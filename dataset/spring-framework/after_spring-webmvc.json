[{"methodBody": ["METHOD_START", "{", "return   list ;", "}", "METHOD_END"], "methodName": ["getList"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "return   objRef ;", "}", "METHOD_END"], "methodName": ["getObjRef"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "this . list    =    list ;", "}", "METHOD_END"], "methodName": ["setList"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "this . objRef    =    object ;", "}", "METHOD_END"], "methodName": ["setObjRef"], "fileName": "org.springframework.beans.factory.access.TestBean"}, {"methodBody": ["METHOD_START", "{", "return   ac ;", "}", "METHOD_END"], "methodName": ["getApplicationContext"], "fileName": "org.springframework.context.ACATester"}, {"methodBody": ["METHOD_START", "{", "return   eventCount ;", "}", "METHOD_END"], "methodName": ["getEventCount"], "fileName": "org.springframework.context.BeanThatListens"}, {"methodBody": ["METHOD_START", "{", "eventCount    =     0  ;", "}", "METHOD_END"], "methodName": ["zero"], "fileName": "org.springframework.context.BeanThatListens"}, {"methodBody": ["METHOD_START", "{", "return   eventCount ;", "}", "METHOD_END"], "methodName": ["getEventCount"], "fileName": "org.springframework.context.TestListener"}, {"methodBody": ["METHOD_START", "{", "eventCount    =     0  ;", "}", "METHOD_END"], "methodName": ["zeroCounter"], "fileName": "org.springframework.context.TestListener"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    new   ClassPathXmlApplicationContext (  \"  / org / springframework / web / context / WEB - INF / applicationContext . xml \"  )  ;", "assertTrue (  \" Has   father \"  ,    context . containsBean (  \" father \"  )  )  ;", "assertTrue (  \" Has   rod \"  ,    context . containsBean (  \" rod \"  )  )  ;", "assertFalse (  \" Hasn ' t   kerry \"  ,    context . containsBean (  \" kerry \"  )  )  ;", "assertTrue (  \" Doesn ' t   have   spouse \"  ,     (  (  (  ( TestBean )     ( context . getBean (  \" rod \"  )  )  )  . getSpouse (  )  )     =  =    null )  )  ;", "assertTrue (  \" myinit   not   evaluated \"  ,     \" Roderick \"  . equals (  (  ( TestBean )     ( context . getBean (  \" rod \"  )  )  )  . getName (  )  )  )  ;", "context    =    new   ClassPathXmlApplicationContext ( new   String [  ]  {     \"  / org / springframework / web / context / WEB - INF / applicationContext . xml \"  ,     \"  / org / springframework / web / context / WEB - INF / context - addition . xml \"     }  )  ;", "assertTrue (  \" Has   father \"  ,    context . containsBean (  \" father \"  )  )  ;", "assertTrue (  \" Has   rod \"  ,    context . containsBean (  \" rod \"  )  )  ;", "assertTrue (  \" Has   kerry \"  ,    context . containsBean (  \" kerry \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testClassPathXmlApplicationContext"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   buffer    =    new   StringBuffer (  )  ;", "final   String   expectedContents    =     \" customizeContext (  )    was   called \"  ;", "final   MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \"  / org /  / web / context / WEB - INF / applicationContext . xml \"  )  ;", "ServletContextListener   listener    =    new   ContextLoaderListener (  )     {", "@ Override", "protected   void   customizeContext ( ServletContext   sc ,    ConfigurableWebApplicationContext   wac )     {", "assertNotNull (  \" The   ServletContext   should   not   be   null .  \"  ,    sc )  ;", "assertEquals (  \" Verifying   that   we   received   the   expected   ServletContext .  \"  ,    sc ,    sc )  ;", "assertFalse (  \" The   ApplicationContext   should   not   yet   have   been   refreshed .  \"  ,    wac . isActive (  )  )  ;", "buffer . append ( expectedContents )  ;", "}", "}  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "assertEquals (  \" customizeContext (  )    should   have   been   called .  \"  ,    expectedContents ,    buffer . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithCustomizedContextLoader"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     (  \"  / org /  / web / context / WEB - INF / applicationContext . xml    \"     +     \"  / org /  / web / context / WEB - INF / context - addition . xml \"  )  )  ;", "ServletContextListener   listener    =    new   ContextLoaderListener (  )  ;", "ServletContextEvent   event    =    new   ServletContextEvent ( sc )  ;", "listener . contextInitialized ( event )  ;", "String   contextAttr    =    WebApplicationContext . ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ;", "WebApplicationContext   context    =     (  ( WebApplicationContext )     ( sc . getAttribute ( contextAttr )  )  )  ;", "assertTrue (  \" Correct   WebApplicationContext   exposed   in   ServletContext \"  ,     ( context   instanceof   XmlWebApplicationContext )  )  ;", "assertTrue (  (  ( WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  )    instanceof   XmlWebApplicationContext )  )  ;", "LifecycleBean   lb    =     (  ( LifecycleBean )     ( context . getBean (  \" lifecycle \"  )  )  )  ;", "assertTrue (  \" Has   father \"  ,    context . containsBean (  \" father \"  )  )  ;", "assertTrue (  \" Has   rod \"  ,    context . containsBean (  \" rod \"  )  )  ;", "assertTrue (  \" Has   kerry \"  ,    context . containsBean (  \" kerry \"  )  )  ;", "assertTrue (  \" Not   destroyed \"  ,     (  !  ( lb . isDestroyed (  )  )  )  )  ;", "assertFalse ( context . containsBean (  \" beans 1  . bean 1  \"  )  )  ;", "assertFalse ( context . containsBean (  \" beans 1  . bean 2  \"  )  )  ;", "listener . contextDestroyed ( event )  ;", "assertTrue (  \" Destroyed \"  ,    lb . isDestroyed (  )  )  ;", "assertNull ( sc . getAttribute ( contextAttr )  )  ;", "assertNull ( WebApplicationContextUtils . getWebApplicationContext ( sc )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithDefaultContext"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "sc . addInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM ,    StringUtils . arrayToCommaDelimitedString ( new   Object [  ]  {     . TestContextInitializer . class . getName (  )  ,     . TestWebContextInitializer . class . getName (  )     }  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithGlobalContextInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "sc . addInitParameter ( CONTEXT _ INITIALIZER _ CLASSES _ PARAM ,    StringUtils . arrayToCommaDelimitedString ( new   Object [  ]  {     . TestContextInitializer . class . getName (  )  ,     . TestWebContextInitializer . class . getName (  )     }  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithLocalContextInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "sc . addInitParameter ( CONTEXT _ INITIALIZER _ CLASSES _ PARAM ,     . TestContextInitializer . class . getName (  )  )  ;", "sc . addInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM ,     . TestWebContextInitializer . class . getName (  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithMixedContextInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "sc . addInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM ,     . TestWebContextInitializer . class . getName (  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . setContextInitializers ( new    . TestContextInitializer (  )  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithProgrammaticAndGlobalInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "sc . addInitParameter ( CONTEXT _ INITIALIZER _ CLASSES _ PARAM ,     . TestContextInitializer . class . getName (  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . setContextInitializers ( new    . TestWebContextInitializer (  )  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithProgrammaticAndLocalInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \" org / springframework / web / context / WEB - INF /  - acc - context . xml \"  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . setContextInitializers ( new    . TestContextInitializer (  )  ,    new    . TestWebContextInitializer (  )  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( sc )  ;", "TestBean   testBean    =    wac . getBean ( TestBean . class )  ;", "assertThat ( testBean . getName (  )  ,    equalTo (  \" testName \"  )  )  ;", "assertThat ( wac . getServletContext (  )  . getAttribute (  \" initialized \"  )  ,    notNullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithProgrammaticInitializers"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \"  / org / springframework / web / context / WEB - INF / empty - context . xml \"  )  ;", "sc . addInitParameter ( CONTEXT _ INITIALIZER _ CLASSES _ PARAM ,    StringUtils . arrayToCommaDelimitedString ( new   Object [  ]  {     . UnknownContextInitializer . class . getName (  )     }  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "try    {", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( ApplicationContextException   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" not   assignable \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testContextLoaderListenerWithUnknownContextInitializer"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONTEXT _ CLASS _ PARAM ,     \" servlet . SimpleWebApplicationContext \"  )  ;", "ServletContextListener   listener    =    new   ContextLoaderListener (  )  ;", "ServletContextEvent   event    =    new   ServletContextEvent ( sc )  ;", "listener . contextInitialized ( event )  ;", "String   contextAttr    =    WebApplicationContext . ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ;", "WebApplicationContext   wc    =     (  ( WebApplicationContext )     ( sc . getAttribute ( contextAttr )  )  )  ;", "assertTrue (  \" Correct   WebApplicationContext   exposed   in   ServletContext \"  ,     ( wc   instanceof   SimpleWebApplicationContext )  )  ;", "}", "METHOD_END"], "methodName": ["testContextLoaderWithCustomContext"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "ServletContextListener   listener    =    new   Listener (  )  ;", "ServletContextEvent   event    =    new   ServletContextEvent ( sc )  ;", "try    {", "listener . contextInitialized ( event )  ;", "fail (  \" Should   have   thrown   BeanDefinitionStoreException \"  )  ;", "}    catch    ( BeanDefinitionStoreException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   IOException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . contains (  \"  / WEB - INF / applicationContext . xml \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testContextLoaderWithDefaultLocation"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONTEXT _ CLASS _ PARAM ,     \" support . InvalidWebApplicationContext \"  )  ;", "ServletContextListener   listener    =    new   ContextLoaderListener (  )  ;", "ServletContextEvent   event    =    new   ServletContextEvent ( sc )  ;", "try    {", "listener . contextInitialized ( event )  ;", "fail (  \" Should   have   thrown   ApplicationContextException \"  )  ;", "}    catch    ( ApplicationContextException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   ClassNotFoundException )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testContextLoaderWithInvalidContext"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \"  / WEB - INF / myContext . xml \"  )  ;", "ServletContextListener   listener    =    new   Listener (  )  ;", "ServletContextEvent   event    =    new   ServletContextEvent ( sc )  ;", "try    {", "listener . contextInitialized ( event )  ;", "fail (  \" Should   have   thrown   BeanDefinitionStoreException \"  )  ;", "}    catch    ( BeanDefinitionStoreException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   FileNotFoundException )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testContextLoaderWithInvalidLocation"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextConfigLocation (  (  \"  / web / context / WEB - INF / testNamespace . xml    \"     +     \"  / web / context / WEB - INF / context - addition . xml \"  )  )  ;", "servlet . init ( new   mock . web . test . MockServletConfig ( new   MockServletContext (  \"  \"  )  ,     \" test \"  )  )  ;", "assertTrue ( servlet . getWebApplicationContext (  )  . containsBean (  \" kerry \"  )  )  ;", "assertTrue ( servlet . getWebApplicationContext (  )  . containsBean (  \" kerryX \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testFrameworkServletWithCustomLocation"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextClass ( XmlWebApplicationContext . class )  ;", "try    {", "servlet . init ( new   mock . web . test . MockServletConfig ( new   MockServletContext (  \"  \"  )  ,     \" test \"  )  )  ;", "fail (  \" Should   have   thrown   BeanDefinitionStoreException \"  )  ;", "}    catch    ( BeanDefinitionStoreException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   IOException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . contains (  \"  / WEB - INF / test - servlet . xml \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testFrameworkServletWithDefaultLocation"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "sc . addInitParameter ( CONFIG _ LOCATION _ PARAM ,     \"  / org / springframework / web / context / WEB - INF / empty - context . xml \"  )  ;", "sc . addInitParameter (  \" someProperty \"  ,     \" someValue \"  )  ;", "sc . addInitParameter ( CONTEXT _ INITIALIZER _ CLASSES _ PARAM ,     . EnvApplicationContextInitializer . class . getName (  )  )  ;", "ContextLoaderListener   listener    =    new   ContextLoaderListener (  )  ;", "listener . contextInitialized ( new   ServletContextEvent ( sc )  )  ;", "}", "METHOD_END"], "methodName": ["testRegisteredContextInitializerCanAccessServletContextParamsViaEnvironment"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "new   ClassPathXmlApplicationContext ( new   String [  ]  {     \"  / org / springframework / web / context / WEB - INF / applicationContext . xml \"  ,     \"  / org / springframework / web / context / WEB - INF / fail . xml \"     }  )     {", "@ Override", "public   void   refresh (  )    throws   BeansException    {", "try    {", "super . refresh (  )  ;", "}    catch    ( BeanCreationException   ex )     {", "DefaultListableBeanFactory   factory    =     (  ( DefaultListableBeanFactory )     ( getBeanFactory (  )  )  )  ;", "assertEquals (  0  ,    factory . getSingletonCount (  )  )  ;", "throw   ex ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["testSingletonDestructionOnStartupFailure"], "fileName": "org.springframework.web.context.ContextLoaderTests"}, {"methodBody": ["METHOD_START", "{", "return   servletConfig ;", "}", "METHOD_END"], "methodName": ["getServletConfig"], "fileName": "org.springframework.web.context.ServletConfigAwareBean"}, {"methodBody": ["METHOD_START", "{", "return   servletContext ;", "}", "METHOD_END"], "methodName": ["getServletContext"], "fileName": "org.springframework.web.context.ServletContextAwareBean"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "processor    =    new    ( servletContext ,    null )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithNonNullServletContextAndNullServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    null ;", "processor    =    new    ( servletContext )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithNullServletContext"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( null ,    servletConfig )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletConfig   should   have   been   set \"  ,    bean . getServletConfig (  )  )  ;", "assertEquals ( servletConfig ,    bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithNullServletContextAndNonNullServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( servletConfig )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletConfig   should   have   been   set \"  ,    bean . getServletConfig (  )  )  ;", "assertEquals ( servletConfig ,    bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( servletContext ,    servletConfig )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletConfig   should   have   been   set \"  ,    bean . getServletConfig (  )  )  ;", "assertEquals ( servletConfig ,    bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithServletContextAndServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "processor    =    new    ( servletContext )  ;", "ServletConfigAwareBean   bean    =    new   ServletConfigAwareBean (  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNull ( bean . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletConfigAwareWithServletContextOnly"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "processor    =    new    ( servletContext ,    null )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletContext   should   have   been   set \"  ,    bean . getServletContext (  )  )  ;", "assertEquals ( servletContext ,    bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithNonNullServletContextAndNullServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    null ;", "processor    =    new    ( servletContext )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithNullServletContext"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( null ,    servletConfig )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletContext   should   have   been   set \"  ,    bean . getServletContext (  )  )  ;", "assertEquals ( servletContext ,    bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithNullServletContextAndNonNullServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( servletConfig )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletContext   should   have   been   set \"  ,    bean . getServletContext (  )  )  ;", "assertEquals ( servletContext ,    bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "processor    =    new    ( servletContext )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletContext   should   have   been   set \"  ,    bean . getServletContext (  )  )  ;", "assertEquals ( servletContext ,    bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithServletContext"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   servletContext    =    new   MockServletContext (  )  ;", "ServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "processor    =    new    ( servletContext ,    servletConfig )  ;", "ServletContextAwareBean   bean    =    new   ServletContextAwareBean (  )  ;", "assertNull ( bean . getServletContext (  )  )  ;", "processor . postProcessBeforeInitialization ( bean ,     \" testBean \"  )  ;", "assertNotNull (  \" ServletContext   should   have   been   set \"  ,    bean . getServletContext (  )  )  ;", "assertEquals ( servletContext ,    bean . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletContextAwareWithServletContextAndServletConfig"], "fileName": "org.springframework.web.context.ServletContextAwareProcessorTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   father    =     (  ( TestBean )     ( this . applicationContext . getBean (  \" father \"  )  )  )  ;", "assertTrue (  \" Bean   from   root   context \"  ,     ( father    !  =    null )  )  ;", "assertTrue (  \" Custom   BeanPostProcessor   applied \"  ,    father . getFriends (  )  . contains (  \" myFriend \"  )  )  ;", "TestBean   rod    =     (  ( TestBean )     ( this . applicationContext . getBean (  \" rod \"  )  )  )  ;", "assertTrue (  \" Bean   from   child   context \"  ,     \" Rod \"  . equals ( rod . getName (  )  )  )  ;", "assertTrue (  \" Bean   has   external   reference \"  ,     (  ( rod . getSpouse (  )  )     =  =    father )  )  ;", "assertTrue (  \" Custom   BeanPostProcessor   not   applied \"  ,     (  !  ( rod . getFriends (  )  . contains (  \" myFriend \"  )  )  )  )  ;", "rod    =     (  ( TestBean )     ( this . root . getBean (  \" rod \"  )  )  )  ;", "assertTrue (  \" Bean   from   root   context \"  ,     \" Roderick \"  . equals ( rod . getName (  )  )  )  ;", "assertTrue (  \" Custom   BeanPostProcessor   applied \"  ,    rod . getFriends (  )  . contains (  \" myFriend \"  )  )  ;", "}", "METHOD_END"], "methodName": ["contextNesting"], "fileName": "org.springframework.web.context.XmlWebApplicationContextTests"}, {"methodBody": ["METHOD_START", "{", "assertThat ( this . root . getEnvironment (  )  . acceptsProfiles (  \" rootProfile 1  \"  )  ,    is ( true )  )  ;", "assertThat ( this . root . getEnvironment (  )  . acceptsProfiles (  \" wacProfile 1  \"  )  ,    is ( false )  )  ;", "assertThat ( this . a . getEnvironment (  )  . acceptsProfiles (  \" rootProfile 1  \"  )  ,    is ( true )  )  ;", "assertThat ( this . a . getEnvironment (  )  . acceptsProfiles (  \" wacProfile 1  \"  )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["environmentMerge"], "fileName": "org.springframework.web.context.XmlWebApplicationContextTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( XmlWebApplicationContextTests . InitAndIB . constructed )  ;", "XmlWebApplicationContextTests . InitAndIB   iib    =     (  ( XmlWebApplicationContextTests . InitAndIB )     ( this . applicationContext . getBean (  \" init - and - ib \"  )  )  )  ;", "assertTrue ( XmlWebApplicationContextTests . InitAndIB . constructed )  ;", "assertTrue (  (  ( iib . afterPropertiesSetInvoked )     &  &     ( iib . initMethodInvoked )  )  )  ;", "assertTrue (  (  (  !  ( iib . destroyed )  )     &  &     (  !  ( iib . customDestroyed )  )  )  )  ;", "this . applicationContext . close (  )  ;", "assertTrue (  (  (  !  ( iib . destroyed )  )     &  &     (  !  ( iib . customDestroyed )  )  )  )  ;", "ConfigurableApplicationContext   parent    =     (  ( ConfigurableApplicationContext )     ( this . applicationContext . getParent (  )  )  )  ;", "parent . close (  )  ;", "assertTrue (  (  ( iib . destroyed )     &  &     ( iib . customDestroyed )  )  )  ;", "parent . close (  )  ;", "assertTrue (  (  ( iib . destroyed )     &  &     ( iib . customDestroyed )  )  )  ;", "}", "METHOD_END"], "methodName": ["initializingBeanAndInitMethod"], "fileName": "org.springframework.web.context.XmlWebApplicationContextTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "wac    =    new    (  )  ;", "wac . setParent ( root )  ;", "wac . setServletContext ( sc )  ;", "wac . setNamespace (  \" testNamespace \"  )  ;", "wac . setConfigLocations ( new   String [  ]  {     \"  / org / springframework / web / context / WEB - INF / test - servlet . xml \"     }  )  ;", "wac . refresh (  )  ;", "try    {", "wac . getMessage (  \" someMessage \"  ,    null ,    Locale . getDefault (  )  )  ;", "fail (  \" Should   have   thrown   NoSuchMessageException \"  )  ;", "}    catch    ( NoSuchMessageException   ex )     {", "}", "String   msg    =    wac . getMessage (  \" someMessage \"  ,    null ,     \" default \"  ,    Locale . getDefault (  )  )  ;", "assertTrue (  \" Default   message   returned \"  ,     \" default \"  . equals ( msg )  )  ;", "}", "METHOD_END"], "methodName": ["withoutMessageSource"], "fileName": "org.springframework.web.context.XmlWebApplicationContextTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "final   MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "final   MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" myHandler \"  ,    new   HttpRequestHandler (  )     {", "@ Override", "public   void   handleRequest ( HttpServletRequest   req ,    HttpServletResponse   res )    throws   IOException ,    ServletException    {", "assertSame ( request ,    req )  ;", "assertSame ( response ,    res )  ;", "String   exception    =    request . getParameter (  \" exception \"  )  ;", "if    (  \" ServletException \"  . equals ( exception )  )     {", "throw   new   ServletException (  \" test \"  )  ;", "}", "if    (  \" IOException \"  . equals ( exception )  )     {", "throw   new   IOException (  \" test \"  )  ;", "}", "res . getWriter (  )  . write (  \" myResponse \"  )  ;", "}", "}  )  ;", "wac . setServletContext ( servletContext )  ;", "wac . refresh (  )  ;", "servletContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "Servlet   servlet    =    new   HttpRequestHandlerServlet (  )  ;", "servlet . init ( new   mock . web . test . MockServletConfig ( servletContext ,     \" myHandler \"  )  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" myResponse \"  ,    response . getContentAsString (  )  )  ;", "try    {", "request . setParameter (  \" exception \"  ,     \" ServletException \"  )  ;", "servlet . service ( request ,    response )  ;", "fail (  \" Should   have   thrown   ServletException \"  )  ;", "}    catch    ( ServletException   ex )     {", "assertEquals (  \" test \"  ,    ex . getMessage (  )  )  ;", "}", "try    {", "request . setParameter (  \" exception \"  ,     \" IOException \"  )  ;", "servlet . service ( request ,    response )  ;", "fail (  \" Should   have   thrown   IOException \"  )  ;", "}    catch    ( IOException   ex )     {", "assertEquals (  \" test \"  ,    ex . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHttpRequestHandlerServletPassThrough"], "fileName": "org.springframework.web.context.support.HttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   tb    =    new   TestBean (  )  ;", "Map < String ,    Object >    attributes    =    new   HashMap <  >  (  )  ;", "attributes . put (  \" attr 1  \"  ,     \" value 1  \"  )  ;", "attributes . put (  \" attr 2  \"  ,    tb )  ;", "Mock   sc    =    new   Mock (  )  ;", "AttributeExporter   exporter    =    new   AttributeExporter (  )  ;", "exporter . setAttributes ( attributes )  ;", "exporter . set ( sc )  ;", "assertEquals (  \" value 1  \"  ,    sc . getAttribute (  \" attr 1  \"  )  )  ;", "assertSame ( tb ,    sc . getAttribute (  \" attr 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextAttributeExporter"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "sc . setAttribute (  \" myAttr \"  ,     \" myValue \"  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues (  )  ;", "pvs . add (  \" attributeName \"  ,     \" myAttr \"  )  ;", "wac . registerSingleton (  \" importedAttr \"  ,    ServletContextAttributeFactoryBean . class ,    pvs )  ;", "wac . refresh (  )  ;", "Object   value    =    wac . getBean (  \" importedAttr \"  )  ;", "assertEquals (  \" myValue \"  ,    value )  ;", "}", "METHOD_END"], "methodName": ["testServletContextAttributeFactoryBean"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues (  )  ;", "pvs . add (  \" attributeName \"  ,     \" myAttr \"  )  ;", "wac . registerSingleton (  \" importedAttr \"  ,    ServletContextAttributeFactoryBean . class ,    pvs )  ;", "try    {", "wac . refresh (  )  ;", "fail (  \" Should   have   thrown   BeanCreationException \"  )  ;", "}    catch    ( BeanCreationException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   IllegalStateException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . contains (  \" myAttr \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testServletContextAttributeFactoryBeanWithAttributeNotFound"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "sc . addInitParameter (  \" myParam \"  ,     \" myValue \"  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues (  )  ;", "pvs . add (  \" initParamName \"  ,     \" myParam \"  )  ;", "wac . registerSingleton (  \" importedParam \"  ,    ServletContextParameterFactoryBean . class ,    pvs )  ;", "wac . refresh (  )  ;", "Object   value    =    wac . getBean (  \" importedParam \"  )  ;", "assertEquals (  \" myValue \"  ,    value )  ;", "}", "METHOD_END"], "methodName": ["testServletContextParameterFactoryBean"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues (  )  ;", "pvs . add (  \" initParamName \"  ,     \" myParam \"  )  ;", "wac . registerSingleton (  \" importedParam \"  ,    ServletContextParameterFactoryBean . class ,    pvs )  ;", "try    {", "wac . refresh (  )  ;", "fail (  \" Should   have   thrown   BeanCreationException \"  )  ;", "}    catch    ( BeanCreationException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   IllegalStateException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . contains (  \" myParam \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testServletContextParameterFactoryBeanWithAttributeNotFound"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \" classpath : org / springframework / web / context \"  )  ;", "ServletContextResourceLoader   rl    =    new   ServletContextResourceLoader ( sc )  ;", "assertTrue ( rl . getResource (  \"  / WEB - INF / web . xml \"  )  . exists (  )  )  ;", "assertTrue ( rl . getResource (  \" WEB - INF / web . xml \"  )  . exists (  )  )  ;", "assertTrue ( rl . getResource (  \"  .  .  / context / WEB - INF / web . xml \"  )  . exists (  )  )  ;", "assertTrue ( rl . getResource (  \"  /  .  .  / context / WEB - INF / web . xml \"  )  . exists (  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextResourceLoader"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    paths    =    new   HashSet <  >  (  )  ;", "paths . add (  \"  / WEB - INF / context 1  . xml \"  )  ;", "paths . add (  \"  / WEB - INF / context 2  . xml \"  )  ;", "MockServletContext   sc    =    new   MockServletContext (  \" classpath : org /  / web / context \"  )     {", "@ Override", "public   Set < String >    getResourcePaths ( String   path )     {", "if    (  \"  / WEB - INF /  \"  . equals ( path )  )     {", "return   paths ;", "}", "return   null ;", "}", "}  ;", "ServletContextResourcePatternResolver   rpr    =    new   ServletContextResourcePatternResolver ( sc )  ;", "Resource [  ]    found    =    rpr . getResources (  \"  / WEB - INF /  *  . xml \"  )  ;", "Set < String >    foundPaths    =    new   HashSet <  >  (  )  ;", "for    ( Resource   resource    :    found )     {", "foundPaths . add (  (  ( ServletContextResource )     ( resource )  )  . getPath (  )  )  ;", "}", "assertEquals (  2  ,    foundPaths . size (  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / context 1  . xml \"  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / context 2  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextResourcePatternResolver"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    paths    =    new   HashSet <  >  (  )  ;", "paths . add (  \" C :  / webroot / WEB - INF / context 1  . xml \"  )  ;", "paths . add (  \" C :  / webroot / WEB - INF / context 2  . xml \"  )  ;", "paths . add (  \" C :  / webroot / someOtherDirThatDoesntContainPath \"  )  ;", "MockServletContext   sc    =    new   MockServletContext (  \" classpath : org /  / web / context \"  )     {", "@ Override", "public   Set < String >    getResourcePaths ( String   path )     {", "if    (  \"  / WEB - INF /  \"  . equals ( path )  )     {", "return   paths ;", "}", "return   null ;", "}", "}  ;", "ServletContextResourcePatternResolver   rpr    =    new   ServletContextResourcePatternResolver ( sc )  ;", "Resource [  ]    found    =    rpr . getResources (  \"  / WEB - INF /  *  . xml \"  )  ;", "Set < String >    foundPaths    =    new   HashSet <  >  (  )  ;", "for    ( Resource   resource    :    found )     {", "foundPaths . add (  (  ( ServletContextResource )     ( resource )  )  . getPath (  )  )  ;", "}", "assertEquals (  2  ,    foundPaths . size (  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / context 1  . xml \"  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / context 2  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextResourcePatternResolverWithAbsolutePaths"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    dirs    =    new   HashSet <  >  (  )  ;", "dirs . add (  \"  / WEB - INF / mydir 1  /  \"  )  ;", "dirs . add (  \"  / WEB - INF / mydir 2  /  \"  )  ;", "MockServletContext   sc    =    new   MockServletContext (  \" classpath : org /  / web / context \"  )     {", "@ Override", "public   Set < String >    getResourcePaths ( String   path )     {", "if    (  \"  / WEB - INF /  \"  . equals ( path )  )     {", "return   dirs ;", "}", "if    (  \"  / WEB - INF / mydir 1  /  \"  . equals ( path )  )     {", "return   Collections . singleton (  \"  / WEB - INF / mydir 1  / context 1  . xml \"  )  ;", "}", "if    (  \"  / WEB - INF / mydir 2  /  \"  . equals ( path )  )     {", "return   Collections . singleton (  \"  / WEB - INF / mydir 2  / context 2  . xml \"  )  ;", "}", "return   null ;", "}", "}  ;", "ServletContextResourcePatternResolver   rpr    =    new   ServletContextResourcePatternResolver ( sc )  ;", "Resource [  ]    found    =    rpr . getResources (  \"  / WEB - INF /  *  /  *  . xml \"  )  ;", "Set < String >    foundPaths    =    new   HashSet <  >  (  )  ;", "for    ( Resource   resource    :    found )     {", "foundPaths . add (  (  ( ServletContextResource )     ( resource )  )  . getPath (  )  )  ;", "}", "assertEquals (  2  ,    foundPaths . size (  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / mydir 1  / context 1  . xml \"  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / mydir 2  / context 2  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextResourcePatternResolverWithPatternPath"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    dirs    =    new   HashSet <  >  (  )  ;", "dirs . add (  \"  / WEB - INF / mydir 1  /  \"  )  ;", "dirs . add (  \"  / WEB - INF / mydir 2  /  \"  )  ;", "final   Set < String >    paths    =    new   HashSet <  >  (  )  ;", "paths . add (  \"  / WEB - INF / mydir 2  / context 2  . xml \"  )  ;", "paths . add (  \"  / WEB - INF / mydir 2  / mydir 3  /  \"  )  ;", "MockServletContext   sc    =    new   MockServletContext (  \" classpath : org /  / web / context \"  )     {", "@ Override", "public   Set < String >    getResourcePaths ( String   path )     {", "if    (  \"  / WEB - INF /  \"  . equals ( path )  )     {", "return   dirs ;", "}", "if    (  \"  / WEB - INF / mydir 1  /  \"  . equals ( path )  )     {", "return   Collections . singleton (  \"  / WEB - INF / mydir 1  / context 1  . xml \"  )  ;", "}", "if    (  \"  / WEB - INF / mydir 2  /  \"  . equals ( path )  )     {", "return   paths ;", "}", "if    (  \"  / WEB - INF / mydir 2  / mydir 3  /  \"  . equals ( path )  )     {", "return   Collections . singleton (  \"  / WEB - INF / mydir 2  / mydir 3  / context 3  . xml \"  )  ;", "}", "return   null ;", "}", "}  ;", "ServletContextResourcePatternResolver   rpr    =    new   ServletContextResourcePatternResolver ( sc )  ;", "Resource [  ]    found    =    rpr . getResources (  \"  / WEB - INF /  *  *  /  *  . xml \"  )  ;", "Set < String >    foundPaths    =    new   HashSet <  >  (  )  ;", "for    ( Resource   resource    :    found )     {", "foundPaths . add (  (  ( ServletContextResource )     ( resource )  )  . getPath (  )  )  ;", "}", "assertEquals (  3  ,    foundPaths . size (  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / mydir 1  / context 1  . xml \"  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / mydir 2  / context 2  . xml \"  )  )  ;", "assertTrue ( foundPaths . contains (  \"  / WEB - INF / mydir 2  / mydir 3  / context 3  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testServletContextResourcePatternResolverWithUnboundedPatternPath"], "fileName": "org.springframework.web.context.support.ServletContextSupportTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "File   tempDir    =    new   File (  \"  \"  )  ;", "wac . getServletContext (  )  . setAttribute ( TEMP _ DIR _ CONTEXT _ ATTRIBUTE ,    tempDir )  ;", "wac . registerBeanDefinition (  \" test \"  ,    new   RootBeanDefinition (  . TestWebApplicationObject . class )  )  ;", "wac . refresh (  )  ;", "WebApplicationObjectSupport   wao    =     (  ( WebApplicationObjectSupport )     ( wac . getBean (  \" test \"  )  )  )  ;", "assertEquals ( wao . getServletContext (  )  ,    wac . getServletContext (  )  )  ;", "assertEquals ( wao . getTempDir (  )  ,    tempDir )  ;", "}", "METHOD_END"], "methodName": ["testWebApplicationObjectSupport"], "fileName": "org.springframework.web.context.support.WebApplicationObjectSupportTests"}, {"methodBody": ["METHOD_START", "{", "StaticApplicationContext   ac    =    new   StaticApplicationContext (  )  ;", "ac . registerBeanDefinition (  \" test \"  ,    new   RootBeanDefinition (  . TestWebApplicationObject . class )  )  ;", "WebApplicationObjectSupport   wao    =     (  ( WebApplicationObjectSupport )     ( ac . getBean (  \" test \"  )  )  )  ;", "try    {", "wao . getWebApplicationContext (  )  ;", "fail (  \" Should   have   thrown   IllegalStateException \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testWebApplicationObjectSupportWithWrongContext"], "fileName": "org.springframework.web.context.support.WebApplicationObjectSupportTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mv    !  =    null )     &  &     (  !  ( mv . hasView (  )  )  )  )     {", "St   defaultViewName    =    getDefaultViewName ( request )  ;", "if    ( defaultViewName    !  =    null )     {", "mv . setViewName ( defaultViewName )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["applyDefaultViewName"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . multipartResolver )     !  =    null )     &  &     ( this . multipartResolver . isMultipart ( request )  )  )     {", "if    (  ( WebUtils . getNativeRequest ( request ,    MultipartHttpServletRequest . class )  )     !  =    null )     {", "logger . debug (  (  \" Request   is   already   a   MultipartHttpServletRequest    -    if   not   in   a   forward ,     \"     +     \" this   typically   results   from   an   additional   MultipartFilter   in   web . xml \"  )  )  ;", "} else", "if    ( hasMultipartException ( request )  )     {", "logger . debug (  (  \" Multipart   resolution   failed   for   current   request   before    -     \"     +     \" skipping   re - resolution   for   undisturbed   error   rendering \"  )  )  ;", "} else    {", "try    {", "return   this . multipartResolver . resolveMultipart ( request )  ;", "}    catch    ( multipart . MultipartException   ex )     {", "if    (  ( request . getAttribute ( WebUtils . ERROR _ EXCEPTION _ ATTRIBUTE )  )     !  =    null )     {", "logger . debug (  \" Multipart   resolution   failed   for   error   dispatch \"  ,    ex )  ;", "} else    {", "throw   ex ;", "}", "}", "}", "}", "return   request ;", "}", "METHOD_END"], "methodName": ["checkMultipart"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . multipartResolver )     !  =    null )     {", "MultipartHttpRequest   multipartRequest    =    WebUtils . getNativeRequest ( request ,    MultipartHttpRequest . class )  ;", "if    ( multipartRequest    !  =    null )     {", "this . multipartResolver . cleanupMultipart ( multipartRequest )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanupMultipart"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "return   context . getAutowireCapableBeanFactory (  )  . createBean ( clazz )  ;", "}", "METHOD_END"], "methodName": ["createDefaultStrategy"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   processedRequest    =    request ;", "HandlerExecutionChain   mappedHandler    =    null ;", "boolean   multipartRequestParsed    =    false ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( request )  ;", "try    {", "ModelAndView   mv    =    null ;", "Exception   dispatchException    =    null ;", "try    {", "processedRequest    =    checkMultipart ( request )  ;", "multipartRequestParsed    =    processedRequest    !  =    request ;", "mappedHandler    =    getHandler ( processedRequest )  ;", "if    ( mappedHandler    =  =    null )     {", "noHandlerFound ( processedRequest ,    response )  ;", "return ;", "}", "HandlerAdapter   ha    =    getHandlerAdapter ( mappedHandler . getHandler (  )  )  ;", "String   method    =    request . getMethod (  )  ;", "boolean   isGet    =     \" GET \"  . equals ( method )  ;", "if    ( isGet    |  |     (  \" HEAD \"  . equals ( method )  )  )     {", "long   lastModified    =    ha . getLastModified ( request ,    mappedHandler . getHandler (  )  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  \" Last - Modified   value   for    [  \"     +     ( DispatcherServlet . getRequestUri ( request )  )  )     +     \"  ]    is :     \"  )     +    lastModified )  )  ;", "}", "if    (  ( new   context . request . ServletWebRequest ( request ,    response )  . checkNotModified ( lastModified )  )     &  &    isGet )     {", "return ;", "}", "}", "if    (  !  ( mappedHandler . applyPreHandle ( processedRequest ,    response )  )  )     {", "return ;", "}", "mv    =    ha . handle ( processedRequest ,    response ,    mappedHandler . getHandler (  )  )  ;", "if    ( asyncManager . isConcurrentHandlingStarted (  )  )     {", "return ;", "}", "applyDefaultViewName ( processedRequest ,    mv )  ;", "mappedHandler . applyPostHandle ( processedRequest ,    response ,    mv )  ;", "}    catch    ( Exception   ex )     {", "dispatchException    =    ex ;", "}    catch    ( Throwable   err )     {", "dispatchException    =    new   NestedServletException (  \" Handler   dispatch   failed \"  ,    err )  ;", "}", "processDispatchResult ( processedRequest ,    response ,    mappedHandler ,    mv ,    dispatchException )  ;", "}    catch    ( Exception   ex )     {", "triggerAfterCompletion ( processedRequest ,    response ,    mappedHandler ,    ex )  ;", "}    catch    ( Throwable   err )     {", "triggerAfterCompletion ( processedRequest ,    response ,    mappedHandler ,    new   NestedServletException (  \" Handler   processing   failed \"  ,    err )  )  ;", "}    finally    {", "if    ( asyncManager . isConcurrentHandlingStarted (  )  )     {", "if    ( mappedHandler    !  =    null )     {", "mappedHandler . applyAfterConcurrentHandlingStarted ( processedRequest ,    response )  ;", "}", "} else    {", "if    ( multipartRequestParsed )     {", "cleanupMultipart ( processedRequest )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["doDispatch"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "String   key    =    strategyInterface . getName (  )  ;", "String   value    =     . defaultStrategies . getProperty ( key )  ;", "if    ( value    !  =    null )     {", "String [  ]    classNames    =    StringUtils . commaDelimitedListToStringArray ( value )  ;", "List < T >    strategies    =    new   ArrayList <  >  ( classNames . length )  ;", "for    ( String   className    :    classNames )     {", "try    {", "Class <  ?  >    clazz    =    ClassUtils . forName ( className ,     . class . getClassLoader (  )  )  ;", "Object   strategy    =    createDefaultStrategy ( context ,    clazz )  ;", "strategies . add (  (  ( T )     ( strategy )  )  )  ;", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   BeanInitializationException (  (  (  (  (  \" Could   not   find    ' s   default   strategy   class    [  \"     +    className )     +     \"  ]    for   interface    [  \"  )     +    key )     +     \"  ]  \"  )  ,    ex )  ;", "}    catch    ( LinkageError   err )     {", "throw   new   BeanInitializationException (  (  (  (  (  \" Unresolvable   class   definition   for    ' s   default   strategy   class    [  \"     +    className )     +     \"  ]    for   interface    [  \"  )     +    key )     +     \"  ]  \"  )  ,    err )  ;", "}", "}", "return   strategies ;", "} else    {", "return   new   LinkedList <  >  (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultStrategies"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "List < T >    strategies    =    getDefaultStrategies ( context ,    strategyInterface )  ;", "if    (  ( strategies . size (  )  )     !  =     1  )     {", "throw   new   BeanInitializationException (  (  (  \"    needs   exactly    1    strategy   for   interface    [  \"     +     ( strategyInterface . getName (  )  )  )     +     \"  ]  \"  )  )  ;", "}", "return   strategies . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultStrategy"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "return    ( this . viewNameTranslator )     !  =    null    ?    this . viewNameTranslator . getViewName ( request )     :    null ;", "}", "METHOD_END"], "methodName": ["getDefaultViewName"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . handlerMappings )     !  =    null )     {", "for    ( HandlerMapping   hm    :    this . handlerMappings )     {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  (  (  \" Testing   handler   map    [  \"     +    hm )     +     \"  ]    in      with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "HandlerExecutionChain   handler    =    hm . getHandler ( request )  ;", "if    ( handler    !  =    null )     {", "return   handler ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . handlerAdapters )     !  =    null )     {", "for    ( HandlerAdapter   ha    :    this . handlerAdapters )     {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  \" Testing   handler   adapter    [  \"     +    ha )     +     \"  ]  \"  )  )  ;", "}", "if    ( ha . supports ( handler )  )     {", "return   ha ;", "}", "}", "}", "throw   new   ServletException (  (  (  \" No   adapter   for   handler    [  \"     +    handler )     +     \"  ]  :    The      configuration   needs   to   include   a   HandlerAdapter   that   supports   this   handler \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerAdapter"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "return    ( this . handlerMappings )     !  =    null    ?    Collections . unmodifiableList ( this . handlerMappings )     :    null ;", "}", "METHOD_END"], "methodName": ["getHandlerMappings"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . multipartResolver ;", "}", "METHOD_END"], "methodName": ["getMultipartResolver"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "String   uri    =     (  ( String )     ( request . getAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE )  )  )  ;", "if    ( uri    =  =    null )     {", "uri    =    request . getRequestURI (  )  ;", "}", "return   uri ;", "}", "METHOD_END"], "methodName": ["getRequestUri"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "return    ( getWebApplicationContext (  )  )    instanceof   ThemeSource    ?     (  ( ThemeSource )     ( getWebApplicationContext (  )  )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getThemeSource"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "Throwable   error    =     (  ( Throwable )     ( request . getAttribute ( ERROR _ EXCEPTION _ ATTRIBUTE )  )  )  ;", "while    ( error    !  =    null )     {", "if    ( error   instanceof   MultipartException )     {", "return   true ;", "}", "error    =    error . getCause (  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasMultipartException"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . flashMapManager    =    context . getBean (  . FLASH _ MAP _ MANAGER _ BEAN _ NAME ,    FlashMapManager . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   FlashMapManager    [  \"     +     ( this . flashMapManager )  )     +     \"  ]  \"  )  )  ;", "}", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "this . flashMapManager    =    getDefaultStrategy ( context ,    FlashMapManager . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Unable   to   locate   FlashMapManager   with   name    '  \"     +     (  . FLASH _ MAP _ MANAGER _ BEAN _ NAME )  )     +     \"  '  :    using   default    [  \"  )     +     ( this . flashMapManager )  )     +     \"  ]  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initFlashMapManager"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . handlerAdapters    =    null ;", "if    ( this . detectAllHandlerAdapters )     {", "Map < String ,    HandlerAdapter >    matchingBeans    =    BeanFactoryUtils . beansOfTypeIncludingAncestors ( context ,    HandlerAdapter . class ,    true ,    false )  ;", "if    (  !  ( matchingBeans . isEmpty (  )  )  )     {", "this . handlerAdapters    =    new   ArrayList <  >  ( matchingBeans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( this . handlerAdapters )  ;", "}", "} else    {", "try    {", "HandlerAdapter   ha    =    context . getBean (  . HANDLER _ ADAPTER _ BEAN _ NAME ,    HandlerAdapter . class )  ;", "this . handlerAdapters    =    Collections . singletonList ( ha )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "}", "}", "if    (  ( this . handlerAdapters )     =  =    null )     {", "this . handlerAdapters    =    getDefaultStrategies ( context ,    HandlerAdapter . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" No   HandlerAdapters   found   in   servlet    '  \"     +     ( getServletName (  )  )  )     +     \"  '  :    using   default \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initHandlerAdapters"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . handlerExceptionResolvers    =    null ;", "if    ( this . detectAllHandlerExceptionResolvers )     {", "Map < String ,    HandlerExceptionResolver >    matchingBeans    =    BeanFactoryUtils . beansOfTypeIncludingAncestors ( context ,    HandlerExceptionResolver . class ,    true ,    false )  ;", "if    (  !  ( matchingBeans . isEmpty (  )  )  )     {", "this . handlerExceptionResolvers    =    new   ArrayList <  >  ( matchingBeans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( this . handlerExceptionResolvers )  ;", "}", "} else    {", "try    {", "HandlerExceptionResolver   her    =    context . getBean (  . HANDLER _ EXCEPTION _ RESOLVER _ BEAN _ NAME ,    HandlerExceptionResolver . class )  ;", "this . handlerExceptionResolvers    =    Collections . singletonList ( her )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "}", "}", "if    (  ( this . handlerExceptionResolvers )     =  =    null )     {", "this . handlerExceptionResolvers    =    getDefaultStrategies ( context ,    HandlerExceptionResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" No   HandlerExceptionResolvers   found   in   servlet    '  \"     +     ( getServletName (  )  )  )     +     \"  '  :    using   default \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initHandlerExceptionResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . handlerMappings    =    null ;", "if    ( this . detectAllHandlerMappings )     {", "Map < String ,    HandlerMapping >    matchingBeans    =    BeanFactoryUtils . beansOfTypeIncludingAncestors ( context ,    HandlerMapping . class ,    true ,    false )  ;", "if    (  !  ( matchingBeans . isEmpty (  )  )  )     {", "this . handlerMappings    =    new   ArrayList <  >  ( matchingBeans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( this . handlerMappings )  ;", "}", "} else    {", "try    {", "HandlerMapping   hm    =    context . getBean (  . HANDLER _ MAPPING _ BEAN _ NAME ,    HandlerMapping . class )  ;", "this . handlerMappings    =    Collections . singletonList ( hm )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "}", "}", "if    (  ( this . handlerMappings )     =  =    null )     {", "this . handlerMappings    =    getDefaultStrategies ( context ,    HandlerMapping . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" No   HandlerMappings   found   in   servlet    '  \"     +     ( getServletName (  )  )  )     +     \"  '  :    using   default \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initHandlerMappings"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . localeResolver    =    context . getBean (  . LOCALE _ RESOLVER _ BEAN _ NAME ,    LocaleResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   LocaleResolver    [  \"     +     ( this . localeResolver )  )     +     \"  ]  \"  )  )  ;", "}", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "this . localeResolver    =    getDefaultStrategy ( context ,    LocaleResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Unable   to   locate   LocaleResolver   with   name    '  \"     +     (  . LOCALE _ RESOLVER _ BEAN _ NAME )  )     +     \"  '  :    using   default    [  \"  )     +     ( this . localeResolver )  )     +     \"  ]  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initLocaleResolver"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . multipartResolver    =    context . getBean (  . MULTIPART _ RESOLVER _ BEAN _ NAME ,    MultipartResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   MultipartResolver    [  \"     +     ( this . multipartResolver )  )     +     \"  ]  \"  )  )  ;", "}", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "this . multipartResolver    =    null ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Unable   to   locate   MultipartResolver   with   name    '  \"     +     (  . MULTIPART _ RESOLVER _ BEAN _ NAME )  )     +     \"  '  :    no   multipart   request   handling   provided \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initMultipartResolver"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . viewNameTranslator    =    context . getBean (  . REQUEST _ TO _ VIEW _ NAME _ TRANSLATOR _ BEAN _ NAME ,    RequestToViewNameTranslator . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   RequestToViewNameTranslator    [  \"     +     ( this . viewNameTranslator )  )     +     \"  ]  \"  )  )  ;", "}", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "this . viewNameTranslator    =    getDefaultStrategy ( context ,    RequestToViewNameTranslator . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Unable   to   locate   RequestToViewNameTranslator   with   name    '  \"     +     (  . REQUEST _ TO _ VIEW _ NAME _ TRANSLATOR _ BEAN _ NAME )  )     +     \"  '  :    using   default    [  \"  )     +     ( this . viewNameTranslator )  )     +     \"  ]  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initRequestToViewNameTranslator"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "initMultipartResolver ( context )  ;", "initLocaleResolver ( context )  ;", "initThemeResolver ( context )  ;", "initHandlerMapps ( context )  ;", "initHandlerAdapters ( context )  ;", "initHandlerExceptionResolvers ( context )  ;", "initRequestToViewNameTranslator ( context )  ;", "initViewResolvers ( context )  ;", "initFlashMapManager ( context )  ;", "}", "METHOD_END"], "methodName": ["initStrategies"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . themeResolver    =    context . getBean (  . THEME _ RESOLVER _ BEAN _ NAME ,    ThemeResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   ThemeResolver    [  \"     +     ( this . themeResolver )  )     +     \"  ]  \"  )  )  ;", "}", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "this . themeResolver    =    getDefaultStrategy ( context ,    ThemeResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Unable   to   locate   ThemeResolver   with   name    '  \"     +     (  . THEME _ RESOLVER _ BEAN _ NAME )  )     +     \"  '  :    using   default    [  \"  )     +     ( this . themeResolver )  )     +     \"  ]  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initThemeResolver"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . viewResolvers    =    null ;", "if    ( this . detectAllViewResolvers )     {", "Map < String ,    ViewResolver >    matchingBeans    =    BeanFactoryUtils . beansOfTypeIncludingAncestors ( context ,    ViewResolver . class ,    true ,    false )  ;", "if    (  !  ( matchingBeans . isEmpty (  )  )  )     {", "this . viewResolvers    =    new   ArrayList <  >  ( matchingBeans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( this . viewResolvers )  ;", "}", "} else    {", "try    {", "ViewResolver   vr    =    context . getBean (  . VIEW _ RESOLVER _ BEAN _ NAME ,    ViewResolver . class )  ;", "this . viewResolvers    =    Collections . singletonList ( vr )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "}", "}", "if    (  ( this . viewResolvers )     =  =    null )     {", "this . viewResolvers    =    getDefaultStrategies ( context ,    ViewResolver . class )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" No   ViewResolvers   found   in   servlet    '  \"     +     ( getServletName (  )  )  )     +     \"  '  :    using   default \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initViewResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    ( DispatcherServlet . pageNotFoundLogger . isWarnEnabled (  )  )     {", "DispatcherServlet . pageNotFoundLogger . warn (  (  (  (  (  \" No   mapping   found   for   HTTP   request   with   URI    [  \"     +     ( DispatcherServlet . getRequestUri ( request )  )  )     +     \"  ]    in   DispatcherServlet   with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "if    ( this . throwExceptionIfNoHandlerFound )     {", "throw   new   NoHandlerFoundException ( request . getMethod (  )  ,    DispatcherServlet . getRequestUri ( request )  ,    new   http . server . ServletServerHttpRequest ( request )  . getHeaders (  )  )  ;", "} else    {", "response . sendError ( SC _ NOT _ FOUND )  ;", "}", "}", "METHOD_END"], "methodName": ["noHandlerFound"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "boolean   errorView    =    false ;", "if    ( exception    !  =    null )     {", "if    ( exception   instanceof   ModelAndViewDefiningException )     {", "logger . debug (  \" ModelAndViewDefiningException   encountered \"  ,    exception )  ;", "mv    =     (  ( ModelAndViewDefiningException )     ( exception )  )  . getModelAndView (  )  ;", "} else    {", "Object   handler    =     ( mappedHandler    !  =    null )     ?    mappedHandler . getHandler (  )     :    null ;", "mv    =    processHandlerException ( request ,    response ,    handler ,    exception )  ;", "errorView    =    mv    !  =    null ;", "}", "}", "if    (  ( mv    !  =    null )     &  &     (  !  ( mv . wasCleared (  )  )  )  )     {", "render ( mv ,    request ,    response )  ;", "if    ( errorView )     {", "WebUtils . clearErrorRequestAttributes ( request )  ;", "}", "} else    {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Null   ModelAndView   returned   to      with   name    '  \"     +     ( getServletName (  )  )  )     +     \"  '  :    assuming   HandlerAdapter   completed   request   handling \"  )  )  ;", "}", "}", "if    ( WebAsyncUtils . getAsyncManager ( request )  . isConcurrentHandlingStarted (  )  )     {", "return ;", "}", "if    ( mappedHandler    !  =    null )     {", "mappedHandler . triggerAfterCompletion ( request ,    response ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["processDispatchResult"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   exMv    =    null ;", "if    (  ( this . handlerExceptionResolvers )     !  =    null )     {", "for    ( HandlerExceptionResolver   handlerExceptionResolver    :    this . handlerExceptionResolvers )     {", "exMv    =    handlerExceptionResolver . resolveException ( request ,    response ,    handler ,    ex )  ;", "if    ( exMv    !  =    null )     {", "break ;", "}", "}", "}", "if    ( exMv    !  =    null )     {", "if    ( exMv . isEmpty (  )  )     {", "request . setAttribute (  . EXCEPTION _ ATTRIBUTE ,    ex )  ;", "return   null ;", "}", "if    (  !  ( exMv . hasView (  )  )  )     {", "String   defaultViewName    =    getDefaultViewName ( request )  ;", "if    ( defaultViewName    !  =    null )     {", "exMv . setViewName ( defaultViewName )  ;", "}", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Handler   execution   resulted   in   exception    -    forwarding   to   resolved   error   view :     \"     +    exMv )  ,    ex )  ;", "}", "WebUtils . exposeErrorRequestAttributes ( request ,    ex ,    getServletName (  )  )  ;", "return   exMv ;", "}", "throw   ex ;", "}", "METHOD_END"], "methodName": ["processHandlerException"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =     (  ( this . localeResolver )     !  =    null )     ?    this . localeResolver . resolveLocale ( request )     :    request . getLocale (  )  ;", "response . setLocale ( locale )  ;", "View   view ;", "String   viewName    =    mv . getViewName (  )  ;", "if    ( viewName    !  =    null )     {", "view    =    resolveViewName ( viewName ,    mv . getModelInternal (  )  ,    locale ,    request )  ;", "if    ( view    =  =    null )     {", "throw   new   ServletException (  (  (  (  (  \" Could   not   resolve   view   with   name    '  \"     +     ( mv . getViewName (  )  )  )     +     \"  '    in   servlet   with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "} else    {", "view    =    mv . getView (  )  ;", "if    ( view    =  =    null )     {", "throw   new   ServletException (  (  (  (  (  (  \" ModelAndView    [  \"     +    mv )     +     \"  ]    neither   contains   a   view   name   nor   a    \"  )     +     \" View   object   in   servlet   with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Rendering   view    [  \"     +    view )     +     \"  ]    in      with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "try    {", "if    (  ( mv . getStatus (  )  )     !  =    null )     {", "response . setStatus ( mv . getStatus (  )  . value (  )  )  ;", "}", "view . render ( mv . getModelInternal (  )  ,    request ,    response )  ;", "}    catch    ( Exception   ex )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Error   rendering   view    [  \"     +    view )     +     \"  ]    in      with   name    '  \"  )     +     ( getServletName (  )  )  )     +     \"  '  \"  )  ,    ex )  ;", "}", "throw   ex ;", "}", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . viewResolvers )     !  =    null )     {", "for    ( ViewResolver   viewResolver    :    this . viewResolvers )     {", "View   view    =    viewResolver . resolveViewN ( viewN ,    locale )  ;", "if    ( view    !  =    null )     {", "return   view ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["resolveViewName"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "Set < String >    attrsToCheck    =    new   HashSet <  >  (  )  ;", "Enumeration <  ?  >    attrNames    =    request . getAttributeNames (  )  ;", "while    ( attrNames . hasMoreElements (  )  )     {", "String   attrName    =     (  ( String )     ( attrNames . nextElement (  )  )  )  ;", "if    (  ( this . cleanupAfterInclude )     |  |     ( attrName . startsWith (  . DEFAULT _ STRATEGIES _ PREFIX )  )  )     {", "attrsToCheck . add ( attrName )  ;", "}", "}", "attrsToCheck . addAll (  (  ( Set < String >  )     ( attributesSnapshot . keySet (  )  )  )  )  ;", "for    ( String   attrName    :    attrsToCheck )     {", "Object   attrValue    =    attributesSnapshot . get ( attrName )  ;", "if    ( attrValue    =  =    null )     {", "request . removeAttribute ( attrName )  ;", "} else", "if    ( attrValue    !  =     ( request . getAttribute ( attrName )  )  )     {", "request . setAttribute ( attrName ,    attrValue )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["restoreAttributesAfterInclude"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . cleanupAfterInclude    =    cleanupAfterInclude ;", "}", "METHOD_END"], "methodName": ["setCleanupAfterInclude"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . detectAllHandlerAdapters    =    detectAllHandlerAdapters ;", "}", "METHOD_END"], "methodName": ["setDetectAllHandlerAdapters"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . detectAllHandlerExceptionResolvers    =    detectAllHandlerExceptionResolvers ;", "}", "METHOD_END"], "methodName": ["setDetectAllHandlerExceptionResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . detectAllHandlerMappings    =    detectAllHandlerMappings ;", "}", "METHOD_END"], "methodName": ["setDetectAllHandlerMappings"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . detectAllViewResolvers    =    detectAllViewResolvers ;", "}", "METHOD_END"], "methodName": ["setDetectAllViewResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "this . throwExceptionIfNoHandlerFound    =    throwExceptionIfNoHandlerFound ;", "}", "METHOD_END"], "methodName": ["setThrowExceptionIfNoHandlerFound"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "if    ( mappedHandler    !  =    null )     {", "mappedHandler . triggerAfterCompion ( request ,    response ,    ex )  ;", "}", "throw   ex ;", "}", "METHOD_END"], "methodName": ["triggerAfterCompletion"], "fileName": "org.springframework.web.servlet.DispatcherServlet"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" OPTIONS \"  ,     \"  / foo \"  )  ;", "MockHttpServletResponse   response    =    spy ( new   MockHttpServletResponse (  )  )  ;", "servlet    =    new    (  )  ;", "servlet . setDispatchOptionsRequest ( false )  ;", "servlet . service ( request ,    response )  ;", "verify ( response ,    never (  )  )  . getHeader ( anyString (  )  )  ;", "assertThat ( response . getHeader (  \" Allow \"  )  ,    equalTo (  \" GET ,    HEAD ,    POST ,    PUT ,    DELETE ,    TRACE ,    OPTIONS ,    PATCH \"  )  )  ;", "}", "METHOD_END"], "methodName": ["allowedOptionsIncludesPatchMethod"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do ; abc = def \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1 x \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1 y \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2 x \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2 y \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 3  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 3 x \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 3 y \"  )  )     !  =    null )  )  ;", "assertEquals (  \" Wed ,     0  1    Apr    2  0  1  5     0  0  :  0  0  :  0  1    GMT \"  ,    response . getHeader (  \" Last - Modified \"  )  )  ;", "}", "METHOD_END"], "methodName": ["anotherLocaleRequest"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / main . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute (  \" test 1  \"  ,     \" value 1  \"  )  ;", "request . setAttribute (  \" test 2  \"  ,     \" value 2  \"  )  ;", "WebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "request . setAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / form . do \"  )  ;", "simple . service ( request ,    response )  ;", "assertEquals (  \" value 1  \"  ,    request . getAttribute (  \" test 1  \"  )  )  ;", "assertEquals (  \" value 2  \"  ,    request . getAttribute (  \" test 2  \"  )  )  ;", "assertEquals ( wac ,    request . getAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  ;", "assertNull ( request . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "assertNull ( request . getAttribute (  \" command \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cleanupAfterIncludeWithRemove"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / main . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute (  \" test 1  \"  ,     \" value 1  \"  )  ;", "request . setAttribute (  \" test 2  \"  ,     \" value 2  \"  )  ;", "WebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "request . setAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "TestBean   command    =    new   TestBean (  )  ;", "request . setAttribute (  \" command \"  ,    command )  ;", "request . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / form . do \"  )  ;", "simple . service ( request ,    response )  ;", "assertEquals (  \" value 1  \"  ,    request . getAttribute (  \" test 1  \"  )  )  ;", "assertEquals (  \" value 2  \"  ,    request . getAttribute (  \" test 2  \"  )  )  ;", "assertSame ( wac ,    request . getAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["cleanupAfterIncludeWithRestore"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Correct   namespace \"  ,     (  \" simple \"     +     ( FrameworkServlet . DEFAULT _ NAMESPACE _ SUFFIX )  )  . equals ( simpleDispatcherServlet . getNamespace (  )  )  )  ;", "assertTrue (  \" Correct   attribute \"  ,     (  ( FrameworkServlet . SERVLET _ CONTEXT _ PREFIX )     +     \" simple \"  )  . equals ( simpleDispatcherServlet . getServletContextAttributeName (  )  )  )  ;", "assertTrue (  \" Context   published \"  ,     (  ( simpleDispatcherServlet . getWebApplicationContext (  )  )     =  =     ( getServletContext (  )  . getAttribute (  (  ( FrameworkServlet . SERVLET _ CONTEXT _ PREFIX )     +     \" simple \"  )  )  )  )  )  ;", "assertTrue (  \" Correct   namespace \"  ,     \" test \"  . equals ( complexDispatcherServlet . getNamespace (  )  )  )  ;", "assertTrue (  \" Correct   attribute \"  ,     (  ( FrameworkServlet . SERVLET _ CONTEXT _ PREFIX )     +     \" complex \"  )  . equals ( complexDispatcherServlet . getServletContextAttributeName (  )  )  )  ;", "assertTrue (  \" Context   not   published \"  ,     (  ( getServletContext (  )  . getAttribute (  (  ( FrameworkServlet . SERVLET _ CONTEXT _ PREFIX )     +     \" complex \"  )  )  )     =  =    null )  )  ;", "simpleDispatcherServlet . destroy (  )  ;", "complexDispatcherServlet . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["configuredDispatcherServlets"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextClass ( SimpleWebApplicationContext . class )  ;", "servlet . setContextInitializerClasses (  (  (  (  . TestWebContextInitializer . class . getName (  )  )     +     \"  ,  \"  )     +     (  . OtherWebContextInitializer . class . getName (  )  )  )  )  ;", "servlet . init ( servletConfig )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" initialized \"  )  )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" otherInitialized \"  )  )  ;", "}", "METHOD_END"], "methodName": ["contextInitializerClasses"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextClass ( SimpleWebApplicationContext . class )  ;", "servlet . setContextInitializers ( new    . TestWebContextInitializer (  )  ,    new    . OtherWebContextInitializer (  )  )  ;", "servlet . init ( servletConfig )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" initialized \"  )  )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" otherInitialized \"  )  )  ;", "}", "METHOD_END"], "methodName": ["contextInitializers"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / servlet . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertEquals (  \" body \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / form . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "}", "METHOD_END"], "methodName": ["detectAllHandlerAdapters"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   parent    =    new   StaticWebApplicationContext (  )  ;", "parent . setServletContext ( getServletContext (  )  )  ;", "parent . registerSingleton (  \" parentHandler \"  ,     . ControllerFromParent . class ,    new   MutablePropertyValues (  )  )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues (  )  ;", "pvs . addPropertyValue ( new   PropertyValue (  \" mappings \"  ,     (  (  . URL _ KNOWN _ ONLY _ PARENT )     +     \"  = parentHandler \"  )  )  )  ;", "parent . registerSingleton (  \" parentMapping \"  ,    SimpleUrlHandlerMapping . class ,    pvs )  ;", "parent . refresh (  )  ;", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "ServletConfig   config    =    new   MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  ;", "config . getServletContext (  )  . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    parent )  ;", "complexDispatcherServlet . init ( config )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     . URL _ KNOWN _ ONLY _ PARENT )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertFalse (  (  \" Matched   through   parent   controller / handler   pair :    not   response =  \"     +     ( response . getStatus (  )  )  )  ,     (  ( response . getStatus (  )  )     =  =     ( HttpServletResponse . SC _ NOT _ FOUND )  )  )  ;", "}", "METHOD_END"], "methodName": ["detectHandlerMappingFromParent"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  \" web / context \"  )  ;", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . init ( new   mock . web . test . MockServletConfig ( servletContext ,     \" empty \"  )  )  ;", "ServletContextAwareBean   contextBean    =     (  ( ServletContextAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletContextAwareBean \"  )  )  )  ;", "ServletConfigAwareBean   configBean    =     (  ( ServletConfigAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletConfigAwareBean \"  )  )  )  ;", "assertSame ( servletContext ,    contextBean . getServletContext (  )  )  ;", "assertSame ( servlet . getServletConfig (  )  ,    configBean . getServletConfig (  )  )  ;", "MultipartResolver   multipartResolver    =    servlet . getMultipartResolver (  )  ;", "assertNotNull ( multipartResolver )  ;", "(  ( ConfigurableApplicationContext )     ( servlet . getWebApplicationContext (  )  )  )  . refresh (  )  ;", "ServletContextAwareBean   contextBean 2     =     (  ( ServletContextAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletContextAwareBean \"  )  )  )  ;", "ServletConfigAwareBean   configBean 2     =     (  ( ServletConfigAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletConfigAwareBean \"  )  )  )  ;", "assertSame ( servletContext ,    contextBean 2  . getServletContext (  )  )  ;", "assertSame ( servlet . getServletConfig (  )  ,    configBean 2  . getServletConfig (  )  )  ;", "assertTrue (  ( contextBean    !  =    contextBean 2  )  )  ;", "assertTrue (  ( configBean    !  =    configBean 2  )  )  ;", "MultipartResolver   multipartResolver 2     =    servlet . getMultipartResolver (  )  ;", "assertTrue (  ( multipartResolver    !  =    multipartResolver 2  )  )  ;", "servlet . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["dispatcherServletContextRefresh"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  \" web / context \"  )  ;", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . init ( new   mock . web . test . MockServletConfig ( servletContext ,     \" empty \"  )  )  ;", "ServletContextAwareBean   contextBean    =     (  ( ServletContextAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletContextAwareBean \"  )  )  )  ;", "ServletConfigAwareBean   configBean    =     (  ( ServletConfigAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletConfigAwareBean \"  )  )  )  ;", "assertSame ( servletContext ,    contextBean . getServletContext (  )  )  ;", "assertSame ( servlet . getServletConfig (  )  ,    configBean . getServletConfig (  )  )  ;", "MultipartResolver   multipartResolver    =    servlet . getMultipartResolver (  )  ;", "assertNotNull ( multipartResolver )  ;", "servlet . refresh (  )  ;", "ServletContextAwareBean   contextBean 2     =     (  ( ServletContextAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletContextAwareBean \"  )  )  )  ;", "ServletConfigAwareBean   configBean 2     =     (  ( ServletConfigAwareBean )     ( servlet . getWebApplicationContext (  )  . getBean (  \" servletConfigAwareBean \"  )  )  )  ;", "assertSame ( servletContext ,    contextBean 2  . getServletContext (  )  )  ;", "assertSame ( servlet . getServletConfig (  )  ,    configBean 2  . getServletConfig (  )  )  ;", "assertNotSame ( contextBean ,    contextBean 2  )  ;", "assertNotSame ( configBean ,    configBean 2  )  ;", "MultipartResolver   multipartResolver 2     =    servlet . getMultipartResolver (  )  ;", "assertNotSame ( multipartResolver ,    multipartResolver 2  )  ;", "servlet . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["dispatcherServletRefresh"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "ConfigurableEnvironment   defaultEnv    =    servlet . getEnvironment (  )  ;", "assertThat ( defaultEnv ,    notNullValue (  )  )  ;", "ConfigurableEnvironment   env 1     =    new   StandardServletEnvironment (  )  ;", "servlet . setEnvironment ( env 1  )  ;", "assertThat ( servlet . getEnvironment (  )  ,    sameInstance ( env 1  )  )  ;", "try    {", "servlet . setEnvironment ( new   DummyEnvironment (  )  )  ;", "fail (  \" expected   IllegalArgumentException   for   non - configurable   Environment \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "class   CustomServletEnvironment   extends   StandardServletEnvironment    {  }", "@ SuppressWarnings (  \" serial \"  )", "DispatcherServlet   custom    =    new   DispatcherServlet (  )     {", "@ Override", "protected   ConfigurableWebEnvironment   createEnvironment (  )     {", "return   new   CustomServletEnvironment (  )  ;", "}", "}  ;", "assertThat ( custom . getEnvironment (  )  ,    instanceOf ( CustomServletEnvironment . class )  )  ;", "}", "METHOD_END"], "methodName": ["environmentOperations"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do ; abc = def \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ComplexWebApplicationContext . MockMultipartResolver   multipartResolver    =     (  ( ComplexWebApplicationContext . MockMultipartResolver )     ( complex . getWebApplicationContext (  )  . getBean (  \" multipartResolver \"  )  )  )  ;", "MultipartHttpServletRequest   multipartRequest    =    multipartResolver . resolveMultipart ( request )  ;", "complex . service ( multipartRequest ,    response )  ;", "multipartResolver . cleanupMultipart ( multipartRequest )  ;", "assertNull ( request . getAttribute ( SimpleMappingExceptionResolver . DEFAULT _ EXCEPTION _ ATTRIBUTE )  )  ;", "assertNotNull ( request . getAttribute (  \" cleanedUp \"  )  )  ;", "}", "METHOD_END"], "methodName": ["existingMultipartRequest"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do ; abc = def \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ComplexWebApplicationContext . MockMultipartResolver   multipartResolver    =     (  ( ComplexWebApplicationContext . MockMultipartResolver )     ( complex . getWebApplicationContext (  )  . getBean (  \" multipartResolver \"  )  )  )  ;", "MultipartHttpServletRequest   multipartRequest    =    multipartResolver . resolveMultipart ( request )  ;", "complex . service ( new   HttpServletRequestWrapper ( multipartRequest )  ,    response )  ;", "multipartResolver . cleanupMultipart ( multipartRequest )  ;", "assertNull ( request . getAttribute ( SimpleMappingExceptionResolver . DEFAULT _ EXCEPTION _ ATTRIBUTE )  )  ;", "assertNotNull ( request . getAttribute (  \" cleanedUp \"  )  )  ;", "}", "METHOD_END"], "methodName": ["existingMultipartRequestButWrapped"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "return   servletConfig . getServletContext (  )  ;", "}", "METHOD_END"], "methodName": ["getServletContext"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextClass ( SimpleWebApplicationContext . class )  ;", "getServletContext (  )  . setInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM ,     (  (  (  . TestWebContextInitializer . class . getName (  )  )     +     \"  ,  \"  )     +     (  . OtherWebContextInitializer . class . getName (  )  )  )  )  ;", "servlet . init ( servletConfig )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" initialized \"  )  )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" otherInitialized \"  )  )  ;", "}", "METHOD_END"], "methodName": ["globalInitializerClasses"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addParameter (  \" abort \"  ,     \" true \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1 x \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 1 y \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2  \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2 x \"  )  )     =  =    null )  )  ;", "assertTrue (  (  ( request . getAttribute (  \" test 2 y \"  )  )     =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["handlerInterceptorAbort"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / view . do \"  )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" noView \"  ,     \" true \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["handlerInterceptorSuppressesView"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . init ( new   MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     . URL _ KNOWN _ ONLY _ PARENT )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertEquals ( SC _ NOT _ FOUND ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handlerNotMappedWithAutodetect"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" HEAD \"  ,     \"  / head . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  5  ,    response . getContentLength (  )  )  ;", "request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / head . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \"  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["headMethodWithExplicitHandling"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" HEAD \"  ,     \"  / body . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  4  ,    response . getContentLength (  )  )  ;", "request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / body . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \" body \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["headMethodWithNoBodyResponse"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / invalid . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "simple . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "assertTrue (  \" correct   error   code \"  ,     (  ( response . getStatus (  )  )     =  =     ( HttpServletResponse . SC _ NOT _ FOUND )  )  )  ;", "}", "METHOD_END"], "methodName": ["invalidRequest"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . GERMAN )  ;", "request . addUserRole (  \" role 2  \"  )  ;", "request . addParameter (  \" locale \"  ,     \" en \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,    request . getAttribute (  \" exception \"  )  . getClass (  )  . equals ( ServletException . class )  )  ;", "}", "METHOD_END"], "methodName": ["localeChangeInterceptor1"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . GERMAN )  ;", "request . addUserRole (  \" role 2  \"  )  ;", "request . addParameter (  \" locale \"  ,     \" en \"  )  ;", "request . addParameter (  \" locale 2  \"  ,     \" en _ CA \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["localeChangeInterceptor2"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "simple . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "assertEquals (  \" Wed ,     0  1    Apr    2  0  1  5     0  0  :  0  0  :  0  0    GMT \"  ,    response . getHeader (  \" Last - Modified \"  )  )  ;", "}", "METHOD_END"], "methodName": ["localeRequest"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   servlet    =    new   DispatcherServlet (  )  ;", "servlet . setContextClass ( SimpleWebApplicationContext . class )  ;", "getServletContext (  )  . setInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM ,     . TestWebContextInitializer . class . getName (  )  )  ;", "servlet . setContextInitializerClasses (  . OtherWebContextInitializer . class . getName (  )  )  ;", "servlet . init ( servletConfig )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" initialized \"  )  )  ;", "assertEquals (  \" true \"  ,    getServletContext (  )  . getAttribute (  \" otherInitialized \"  )  )  ;", "}", "METHOD_END"], "methodName": ["mixedInitializerClasses"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" fail \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertTrue (  \" forwarded   to   failed \"  ,     \" failed 1  . jsp \"  . equals ( response . getForwardedUrl (  )  )  )  ;", "}    catch    ( ServletException   ex )     {", "fail (  (  \" Should   not   have   thrown   ServletException :     \"     +     ( ex . getMessage (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["modelAndViewDefiningException"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do ; abc = def \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . setAttribute (  \" fail \"  ,    Boolean . TRUE )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  . equals ( response . getForwardedUrl (  )  )  )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertTrue (  \" correct   exception \"  ,     (  ( request . getAttribute ( SimpleMappingExceptionResolver . DEFAULT _ EXCEPTION _ ATTRIBUTE )  )    instanceof   MaxUploadSizeExceededException )  )  ;", "}", "METHOD_END"], "methodName": ["multipartResolutionFailed"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / main . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute (  \" test 1  \"  ,     \" value 1  \"  )  ;", "request . setAttribute (  \" test 2  \"  ,     \" value 2  \"  )  ;", "WebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "request . setAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "TestBean   command    =    new   TestBean (  )  ;", "request . setAttribute (  \" command \"  ,    command )  ;", "request . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / form . do \"  )  ;", "simple . setCleanupAfterInclude ( false )  ;", "simple . service ( request ,    response )  ;", "assertEquals (  \" value 1  \"  ,    request . getAttribute (  \" test 1  \"  )  )  ;", "assertEquals (  \" value 2  \"  ,    request . getAttribute (  \" test 2  \"  )  )  ;", "assertSame ( wac ,    request . getAttribute (  . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["noCleanupAfterInclude"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "HttpHeaders   headers    =    new   HttpHeaders (  )  ;", "headers . add (  \" foo \"  ,     \" bar \"  )  ;", "NoHandlerFoundException   ex    =    new   NoHandlerFoundException (  \" GET \"  ,     \"  / foo \"  ,    headers )  ;", "assertTrue (  (  !  ( ex . getMessage (  )  . contains (  \" bar \"  )  )  )  )  ;", "assertTrue (  (  !  ( ex . toSt (  )  . contains (  \" bar \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["noHandlerFoundExceptionMessage"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complex . service ( request ,    response )  ;", "assertTrue (  \" Correct   response \"  ,     (  ( response . getStatus (  )  )     =  =     ( HttpServletResponse . SC _ FORBIDDEN )  )  )  ;", "}    catch    ( ServletException   ex )     {", "fail (  (  \" Should   not   have   thrown   ServletException :     \"     +     ( ex . getMessage (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["notAuthorized"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . setDetectAllHandlerAdapters ( false )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / servlet . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertEquals (  \" body \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / form . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,    request . getAttribute (  \" exception \"  )  . getClass (  )  . equals ( ServletException . class )  )  ;", "}", "METHOD_END"], "methodName": ["notDetectAllHandlerAdapters"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . setDetectAllHandlerExceptionResolvers ( false )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / unknown . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complexDispatcherServlet . service ( request ,    response )  ;", "fail (  \" Should   have   thrown   ServletException \"  )  ;", "}    catch    ( ServletException   ex )     {", "assertTrue (  (  ( ex . getMessage (  )  . indexOf (  \" No   adapter   for   handler \"  )  )     !  =     (  -  1  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["notDetectAllHandlerExceptionResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . setDetectAllHandlerMappings ( false )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / unknown . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertTrue (  (  ( response . getStatus (  )  )     =  =     ( HttpServletResponse . SC _ NOT _ FOUND )  )  )  ;", "}", "METHOD_END"], "methodName": ["notDetectAllHandlerMappings"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( ComplexWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . setDetectAllViewResolvers ( false )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / unknown . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complexDispatcherServlet . service ( request ,    response )  ;", "fail (  \" Should   have   thrown   ServletException \"  )  ;", "}    catch    ( ServletException   ex )     {", "assertTrue (  (  ( ex . getMessage (  )  . indexOf (  \" failed 0  \"  )  )     !  =     (  -  1  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["notDetectAllViewResolvers"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / view . do \"  )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertTrue (  \" forwarded   to   form \"  ,     \" myform . jsp \"  . equals ( response . getForwardedUrl (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["parameterizableViewController"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "complexDispatcherServlet . setPublishEvents ( false )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "ComplexWebApplicationContext . TestApplicationListener   listener    =     (  ( ComplexWebApplicationContext . TestApplicationListener )     ( complexDispatcherServlet . getWebApplicationContext (  )  . getBean (  \" testListener \"  )  )  )  ;", "assertEquals (  0  ,    listener . counter )  ;", "}", "METHOD_END"], "methodName": ["publishEventsOff"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "ComplexWebApplicationContext . TestApplicationListener   listener    =     (  ( ComplexWebApplicationContext . TestApplicationListener )     ( complex . getWebApplicationContext (  )  . getBean (  \" testListener \"  )  )  )  ;", "assertEquals (  1  ,    listener . counter )  ;", "}", "METHOD_END"], "methodName": ["requestHandledEvent"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / servlet . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \" body \"  ,    response . getContentAsString (  )  )  ;", "Servlet   myServlet    =     (  ( Servlet )     ( complex . getWebApplicationContext (  )  . getBean (  \" myServlet \"  )  )  )  ;", "assertEquals (  \" complex \"  ,    myServlet . getServletConfig (  )  . getServletName (  )  )  ;", "assertEquals ( getServletContext (  )  ,    myServlet . getServletConfig (  )  . getServletContext (  )  )  ;", "complex . destroy (  )  ;", "assertNull ( myServlet . getServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletHandlerAdapter"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockServletConfig   complexConfig    =    new   MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  ;", "complexConfig . addInitParameter (  \" publishContext \"  ,     \" false \"  )  ;", "complexConfig . addInitParameter (  \" class \"  ,     \" notWritable \"  )  ;", "complexConfig . addInitParameter (  \" unknownParam \"  ,     \" someValue \"  )  ;", "simple    =    new    (  )  ;", "simple . setContextClass ( SimpleWebApplicationContext . class )  ;", "simple . init ( servletConfig )  ;", "complex    =    new    (  )  ;", "complex . setContextClass ( ComplexWebApplicationContext . class )  ;", "complex . setNamespace (  \" test \"  )  ;", "complex . addRequiredProperty (  \" publishContext \"  )  ;", "complex . init ( complexConfig )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / loc . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" access \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  5  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 1  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,     (  ( request . getAttribute (  \" exception \"  )  )    instanceof   IllegalAccessException )  )  ;", "}", "METHOD_END"], "methodName": ["simpleMappingExceptionResolverWithAllHandlers1"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / loc . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" servlet \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  5  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 1  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,     (  ( request . getAttribute (  \" exception \"  )  )    instanceof   ServletException )  )  ;", "}", "METHOD_END"], "methodName": ["simpleMappingExceptionResolverWithAllHandlers2"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" exception \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,    request . getAttribute (  \" exception \"  )  . getClass (  )  . equals ( RuntimeException . class )  )  ;", "}", "METHOD_END"], "methodName": ["simpleMappingExceptionResolverWithDefaultErrorView"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" access \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 2  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,     (  ( request . getAttribute (  \" exception \"  )  )    instanceof   IllegalAccessException )  )  ;", "}", "METHOD_END"], "methodName": ["simpleMappingExceptionResolverWithSpecificHandler1"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" servlet \"  ,     \" yes \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 3  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,     (  ( request . getAttribute (  \" exception \"  )  )    instanceof   ServletException )  )  ;", "}", "METHOD_END"], "methodName": ["simpleMappingExceptionResolverWithSpecificHandler2"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" theme \"  ,     \" mytheme \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,    request . getAttribute (  \" exception \"  )  . getClass (  )  . equals ( ServletException . class )  )  ;", "}", "METHOD_END"], "methodName": ["themeChangeInterceptor1"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / locale . do \"  )  ;", "request . addPreferredLocale ( Locale . CANADA )  ;", "request . addUserRole (  \" role 1  \"  )  ;", "request . addParameter (  \" theme \"  ,     \" mytheme \"  )  ;", "request . addParameter (  \" theme 2  \"  ,     \" theme \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complex . service ( request ,    response )  ;", "assertTrue (  \" Not   forwarded \"  ,     (  ( response . getForwardedUrl (  )  )     =  =    null )  )  ;", "}    catch    ( ServletException   ex )     {", "fail (  (  \" Should   not   have   thrown   ServletException :     \"     +     ( ex . getMessage (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["themeChangeInterceptor2"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "DispatcherServlet   complexDispatcherServlet    =    new   DispatcherServlet (  )  ;", "complexDispatcherServlet . setContextClass ( SimpleWebApplicationContext . class )  ;", "complexDispatcherServlet . setNamespace (  \" test \"  )  ;", "complexDispatcherServlet . setThrowExceptionIfNoHandlerFound ( true )  ;", "complexDispatcherServlet . init ( new   mock . web . test . MockServletConfig ( getServletContext (  )  ,     \" complex \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / unknown \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complexDispatcherServlet . service ( request ,    response )  ;", "assertTrue (  \" correct   error   code \"  ,     (  ( response . getStatus (  )  )     =  =     ( HttpServletResponse . SC _ NOT _ FOUND )  )  )  ;", "}", "METHOD_END"], "methodName": ["throwExceptionIfNoHandlerFound"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( getServletContext (  )  ,     \" GET \"  ,     \"  / unknown . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \" forwarded   to   failed \"  ,     \" failed 0  . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue (  \" Exception   exposed \"  ,    request . getAttribute (  \" exception \"  )  . getClass (  )  . equals ( ServletException . class )  )  ;", "}", "METHOD_END"], "methodName": ["unknownRequest"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / noview . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \" noview . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["withNoView"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "InternalResourceViewResolver   vr    =     (  ( InternalResourceViewResolver )     ( complexDispatcherServlet . getWebApplicationContext (  )  . getBean (  \" viewResolver 2  \"  )  )  )  ;", "vr . setSuffix (  \"  \"  )  ;", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / noview \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "complexDispatcherServlet . service ( request ,    response )  ;", "fail (  \" Should   have   thrown   ServletException \"  )  ;", "}    catch    ( ServletException   ex )     {", "ex . printStackTrace (  )  ;", "}", "}", "METHOD_END"], "methodName": ["withNoViewAndSamePath"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / noview / simple . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "complex . service ( request ,    response )  ;", "assertEquals (  \" noview / simple . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["withNoViewNested"], "fileName": "org.springframework.web.servlet.DispatcherServletTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( StringUtils . hasText ( name )  )     &  &     ( StringUtils . hasText ( value )  )  )     {", "this . targetRequestParams . add ( name ,    value )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParam"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "if    ( params    !  =    null )     {", "params . forEach (  (    key ,    values )     -  >     {", "for    ( St   value    :    values )     {", "addTargetRequestParam ( key ,    value )  ;", "}", "}  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParams"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "return   this . expirationTime ;", "}", "METHOD_END"], "methodName": ["getExpirationTime"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "return   this . targetRequestParams ;", "}", "METHOD_END"], "methodName": ["getTargetRequestParams"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "return   this . targetRequestPath ;", "}", "METHOD_END"], "methodName": ["getTargetRequestPath"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . expirationTime )     !  =     (  -  1  )  )     &  &     (  ( System . currentTimeMillis (  )  )     >     ( this . expirationTime )  )  ;", "}", "METHOD_END"], "methodName": ["isExpired"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "this . expirationTime    =    expirationTime ;", "}", "METHOD_END"], "methodName": ["setExpirationTime"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "this . targetRequestPath    =    path ;", "}", "METHOD_END"], "methodName": ["setTargetRequestPath"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "this . expirationTime    =     ( System . currentTimeMillis (  )  )     +     ( timeToLive    *     1  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["startExpirationPeriod"], "fileName": "org.springframework.web.servlet.FlashMap"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . addTargetRequestParam (  \"     \"  ,     \" abc \"  )  ;", "flashMap . addTargetRequestParam ( null ,     \" abc \"  )  ;", "assertTrue ( flashMap . getTargetRequestParams (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParamNullKey"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . addTargetRequestParam (  \" text \"  ,     \" abc \"  )  ;", "flashMap . addTargetRequestParam (  \" empty \"  ,     \"     \"  )  ;", "flashMap . addTargetRequestParam (  \" null \"  ,    null )  ;", "assertEquals (  1  ,    flashMap . getTargetRequestParams (  )  . size (  )  )  ;", "assertEquals (  \" abc \"  ,    flashMap . getTargetRequestParams (  )  . getFirst (  \" text \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParamNullValue"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params    =    new   LinkedMultiValueMap (  )  ;", "params . add (  \"     \"  ,     \" abc \"  )  ;", "params . add ( null ,     \"     \"  )  ;", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . addTargetRequestParams ( params )  ;", "assertTrue ( flashMap . getTargetRequestParams (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParamsNullKey"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params    =    new   LinkedMultiValueMap (  )  ;", "params . add (  \" key \"  ,     \" abc \"  )  ;", "params . add (  \" key \"  ,     \"     \"  )  ;", "params . add (  \" key \"  ,    null )  ;", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . addTargetRequestParams ( params )  ;", "assertEquals (  1  ,    flashMap . getTargetRequestParams (  )  . size (  )  )  ;", "assertEquals (  1  ,    flashMap . getTargetRequestParams (  )  . get (  \" key \"  )  . size (  )  )  ;", "assertEquals (  \" abc \"  ,    flashMap . getTargetRequestParams (  )  . getFirst (  \" key \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addTargetRequestParamsNullValue"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap 1     =    new   FlashMap (  )  ;", "FlashMap   flashMap 2     =    new   FlashMap (  )  ;", "assertEquals (  0  ,    flashMap 1  . compareTo ( flashMap 2  )  )  ;", "flashMap 1  . setTargetRequestPath (  \"  / path 1  \"  )  ;", "assertEquals (  (  -  1  )  ,    flashMap 1  . compareTo ( flashMap 2  )  )  ;", "assertEquals (  1  ,    flashMap 2  . compareTo ( flashMap 1  )  )  ;", "flashMap 2  . setTargetRequestPath (  \"  / path 2  \"  )  ;", "assertEquals (  0  ,    flashMap 1  . compareTo ( flashMap 2  )  )  ;", "flashMap 1  . addTargetRequestParam (  \" id \"  ,     \"  1  \"  )  ;", "assertEquals (  (  -  1  )  ,    flashMap 1  . compareTo ( flashMap 2  )  )  ;", "assertEquals (  1  ,    flashMap 2  . compareTo ( flashMap 1  )  )  ;", "flashMap 2  . addTargetRequestParam (  \" id \"  ,     \"  2  \"  )  ;", "assertEquals (  0  ,    flashMap 1  . compareTo ( flashMap 2  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( new   FlashMap (  )  . isExpired (  )  )  ;", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . startExpirationPeriod (  0  )  ;", "Thread . sleep (  1  0  0  )  ;", "assertTrue ( flashMap . isExpired (  )  )  ;", "}", "METHOD_END"], "methodName": ["isExpired"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . startExpirationPeriod (  1  0  )  ;", "Thread . sleep (  1  0  0  )  ;", "assertFalse ( flashMap . isExpired (  )  )  ;", "}", "METHOD_END"], "methodName": ["notExpired"], "fileName": "org.springframework.web.servlet.FlashMapTests"}, {"methodBody": ["METHOD_START", "{", "String   globalClassNames    =    getServletContext (  )  . getInitParameter ( GLOBAL _ INITIALIZER _ CLASSES _ PARAM )  ;", "if    ( globalClassNames    !  =    null )     {", "for    ( String   className    :    StringUtils . tokenizeToStringArray ( globalClassNames ,     . INIT _ PARAM _ DELIMITERS )  )     {", "this . contextInitializers . add ( loadInitializer ( className ,    wac )  )  ;", "}", "}", "if    (  ( this . contextInitializerClasses )     !  =    null )     {", "for    ( String   className    :    StringUtils . tokenizeToStringArray ( this . contextInitializerClasses ,     . INIT _ PARAM _ DELIMITERS )  )     {", "this . contextInitializers . add ( loadInitializer ( className ,    wac )  )  ;", "}", "}", "AnnotationAwareOrderComparator . sort ( this . contextInitializers )  ;", "for    ( ApplicationContextInitializer < ConfigurableApplicationContext >    initializer    :    this . contextInitializers )     {", "initializer . initialize ( wac )  ;", "}", "}", "METHOD_END"], "methodName": ["applyInitializers"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleLocaleContext ( request . getLocale (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildLocaleContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( previousAttributes    =  =    null )     |  |     ( previousAttributes   instanceof   ServletRequestAttributes )  )     {", "return   new   ServletRequestAttributes ( request ,    response )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["buildRequestAttributes"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "if    ( ObjectUtils . identityToString ( wac )  . equals ( wac . getId (  )  )  )     {", "if    (  ( this . contextId )     !  =    null )     {", "wac . setId ( this . contextId )  ;", "} else    {", "wac . setId (  (  (  (  ( ConfigurableWebApplicationContext . APPLICATION _ CONTEXT _ ID _ PREFIX )     +     ( ObjectUtils . getDisplayString ( getServletContext (  )  . getContextPath (  )  )  )  )     +     '  /  '  )     +     ( getServletName (  )  )  )  )  ;", "}", "}", "wac . setServletContext ( getServletContext (  )  )  ;", "wac . setServletConfig ( getServletConfig (  )  )  ;", "wac . setNamespace ( getNamespace (  )  )  ;", "wac . addApplicationListener ( new   context . event . SourceFilteringListener ( wac ,    new   FrameworkServlet . ContextRefreshListener (  )  )  )  ;", "ConfigurableEnvironment   env    =    wac . getEnvironment (  )  ;", "if    ( env   instanceof   ConfigurableWebEnvironment )     {", "(  ( ConfigurableWebEnvironment )     ( env )  )  . initPropertySources ( getServletContext (  )  ,    getServletConfig (  )  )  ;", "}", "postProcessWebApplicationContext ( wac )  ;", "applyInitializers ( wac )  ;", "wac . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["configureAndRefreshWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    contextClass    =    getContextClass (  )  ;", "if    ( this . logger . isDebugEnabled (  )  )     {", "this . logger . debug (  (  (  (  (  (  (  (  \"    with   name    '  \"     +     ( getName (  )  )  )     +     \"  '    will   try   to   create   custom   WebApplicationContext   context   of   class    '  \"  )     +     ( contextClass . getName (  )  )  )     +     \"  '  \"  )     +     \"  ,    using   parent   context    [  \"  )     +    parent )     +     \"  ]  \"  )  )  ;", "}", "if    (  !  ( ConfigurableWebApplicationContext . class . isAssignableFrom ( contextClass )  )  )     {", "throw   new   ApplicationContextException (  (  (  (  (  \" Fatal   initialization   error   in   servlet   with   name    '  \"     +     ( getName (  )  )  )     +     \"  '  :    custom   WebApplicationContext   class    [  \"  )     +     ( contextClass . getName (  )  )  )     +     \"  ]    is   not   of   type   ConfigurableWebApplicationContext \"  )  )  ;", "}", "ConfigurableWebApplicationContext   wac    =     (  ( ConfigurableWebApplicationContext )     ( BeanUtils . instantiateClass ( contextClass )  )  )  ;", "wac . setEnvironment ( getEnvironment (  )  )  ;", "wac . setParent ( parent )  ;", "String   configLocation    =    getContextConfigLocation (  )  ;", "if    ( configLocation    !  =    null )     {", "wac . setConfigLocation ( configLocation )  ;", "}", "configureAndRefreshWebApplicationContext ( wac )  ;", "return   wac ;", "}", "METHOD_END"], "methodName": ["createWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   createWebApplicationContext (  (  ( ApplicationContext )     ( parent )  )  )  ;", "}", "METHOD_END"], "methodName": ["createWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "String   attrName    =    getContextAttribute (  )  ;", "if    ( attrName    =  =    null )     {", "return   null ;", "}", "WebApplicationContext   wac    =    WebApplicationContextUtils . getWebApplicationContext ( getContext (  )  ,    attrName )  ;", "if    ( wac    =  =    null )     {", "throw   new   IllegalStateException (  \" No   WebApplicationContext   found :    initializer   not   registered ?  \"  )  ;", "}", "return   wac ;", "}", "METHOD_END"], "methodName": ["findWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . contextAttribute ;", "}", "METHOD_END"], "methodName": ["getContextAttribute"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . contextClass ;", "}", "METHOD_END"], "methodName": ["getContextClass"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . contextConfigLocation ;", "}", "METHOD_END"], "methodName": ["getContextConfigLocation"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . contextId ;", "}", "METHOD_END"], "methodName": ["getContextId"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return    ( this . namespace )     !  =    null    ?    this . namespace    :     ( getServletName (  )  )     +     ( FrameworkServlet . DEFAULT _ NAMESPACE _ SUFFIX )  ;", "}", "METHOD_END"], "methodName": ["getNamespace"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return    ( FrameworkServlet . SERVLET _ CONTEXT _ PREFIX )     +     ( getServletName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getServletContextAttributeName"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "Principal   userPrincipal    =    request . getUserPrincipal (  )  ;", "return   userPrincipal    !  =    null    ?    userPrincipal . getName (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getUsernameForRequest"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "return   this . webApplicationContext ;", "}", "METHOD_END"], "methodName": ["getWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "if    ( localeContext    !  =    null )     {", "LocaleContextHoldertLocaleContext ( localeContext ,    this . threadContextInheritable )  ;", "}", "if    ( requestAttributes    !  =    null )     {", "RequestContextHoldertRequestAttributes ( requestAttributes ,    this . threadContextInheritable )  ;", "}", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" Bound   request   context   to   thread :     \"     +    request )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initContextHolders"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   rootContext    =    WebApplicationContextUtils . getWebApplicationContext ( getServletContext (  )  )  ;", "WebApplicationContext   wac    =    null ;", "if    (  ( this . webApplicationContext )     !  =    null )     {", "wac    =    this . webApplicationContext ;", "if    ( wac   instanceof   ConfigurableWebApplicationContext )     {", "ConfigurableWebApplicationContext   cwac    =     (  ( ConfigurableWebApplicationContext )     ( wac )  )  ;", "if    (  !  ( cwac . isActive (  )  )  )     {", "if    (  ( cwac . getParent (  )  )     =  =    null )     {", "cwac . setParent ( rootContext )  ;", "}", "configureAndRefreshWebApplicationContext ( cwac )  ;", "}", "}", "}", "if    ( wac    =  =    null )     {", "wac    =    findWebApplicationContext (  )  ;", "}", "if    ( wac    =  =    null )     {", "wac    =    createWebApplicationContext ( rootContext )  ;", "}", "if    (  !  ( this . refreshEventReceived )  )     {", "onRefresh ( wac )  ;", "}", "if    ( this . publishContext )     {", "String   attrName    =    getServletContextAttributeName (  )  ;", "getServletContext (  )  . setAttribute ( attrName ,    wac )  ;", "if    ( this . logger . isDebugEnabled (  )  )     {", "this . logger . debug (  (  (  (  (  \" Published   WebApplicationContext   of   servlet    '  \"     +     ( getServletName (  )  )  )     +     \"  '    as   ServletContext   attribute   with   name    [  \"  )     +    attrName )     +     \"  ]  \"  )  )  ;", "}", "}", "return   wac ;", "}", "METHOD_END"], "methodName": ["initWebApplicationContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class <  ?  >    initializerClass    =    ClassUtils . forName ( className ,    wac . getClassLoader (  )  )  ;", "Class <  ?  >    initializerContextClass    =    GenericTypeResolver . resolveTypeArgument ( initializerClass ,    ApplicationContextInitializer . class )  ;", "if    (  ( initializerContextClass    !  =    null )     &  &     (  !  ( initializerContextClass . isInstance ( wac )  )  )  )     {", "throw   new   ApplicationContextException ( String . format (  (  \" Could   not   apply   context   initializer    [  % s ]    since   its   generic   parameter    [  % s ]     \"     +     (  \" is   not   assignable   from   the   type   of   application   context   used   by   this    \"     +     \"    servlet :     [  % s ]  \"  )  )  ,    initializerClass . getName (  )  ,    initializerContextClass . getName (  )  ,    wac . getClass (  )  . getName (  )  )  )  ;", "}", "return   BeanUtils . instantiateClass ( initializerClass ,    ApplicationContextInitializer . class )  ;", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   ApplicationContextException ( String . format (  (  \" Could   not   load   class    [  % s ]    specified    \"     +     \" via    ' contextInitializerClasses '    init - param \"  )  ,    className )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["loadInitializer"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . refreshEventReceived    =    true ;", "onRefresh ( event . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["onApplicationEvent"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "long   startTime    =    System . currentTimeMillis (  )  ;", "Throwable   failureCause    =    null ;", "LocaleContext   previousLocaleContext    =    LocaleContextHolder . getLocaleContext (  )  ;", "LocaleContext   localeContext    =    buildLocaleContext ( request )  ;", "RequestAttributes   previousAttributes    =    RequestContextHolder . getRequestAttributes (  )  ;", "ServletRequestAttributes   requestAttributes    =    buildRequestAttributes ( request ,    response ,    previousAttributes )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( request )  ;", "asyncManager . registerCallableInterceptor (  . class . getName (  )  ,    new    . RequestBindingInterceptor (  )  )  ;", "initContextHolders ( request ,    localeContext ,    requestAttributes )  ;", "try    {", "doService ( request ,    response )  ;", "}    catch    ( ServletException    |    IOException   ex )     {", "failureCause    =    ex ;", "throw   ex ;", "}    catch    ( Throwable   ex )     {", "failureCause    =    ex ;", "throw   new   NestedServletException (  \" Request   processing   failed \"  ,    ex )  ;", "}    finally    {", "resetContextHolders ( request ,    previousLocaleContext ,    previousAttributes )  ;", "if    ( requestAttributes    !  =    null )     {", "requestAttributes . requestCompleted (  )  ;", "}", "if    ( logger . isDebugEnabled (  )  )     {", "if    ( failureCause    !  =    null )     {", "this . logger . debug (  \" Could   not   complete   request \"  ,    failureCause )  ;", "} else    {", "if    ( asyncManager . isConcurrentHandlingStarted (  )  )     {", "logger . debug (  \" Leaving   response   open   for   concurrent   processing \"  )  ;", "} else    {", "this . logger . debug (  \" Successfully   completed   request \"  )  ;", "}", "}", "}", "publishRequestHandledEvent ( request ,    response ,    startTime ,    failureCause )  ;", "}", "}", "METHOD_END"], "methodName": ["processRequest"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . publishEvents )     &  &     (  ( this . webApplicationContext )     !  =    null )  )     {", "long   processingTime    =     ( System . currentTimeMillis (  )  )     -    startTime ;", "this . webApplicationContext . publishEvent ( new   context . support . ServletRequestHandledEvent ( this ,    request . getRequestURI (  )  ,    request . getRemoteAddr (  )  ,    request . getMethod (  )  ,    getServletConfig (  )  . getServletName (  )  ,    WebUtils . getSessionId ( request )  ,    getUsernameForRequest ( request )  ,    processingTime ,    failureCause ,    response . getStatus (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["publishRequestHandledEvent"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    getWebApplicationContext (  )  ;", "if    (  !  ( wac   instanceof   ConfigurableApplicationContext )  )     {", "throw   new   IllegalStateException (  (  \" WebApplicationContext   does   not   support   refresh :     \"     +    wac )  )  ;", "}", "(  ( ConfigurableApplicationContext )     ( wac )  )  . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["refresh"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "LocaleContextHolder . setLocaleContext ( prevLocaleContext ,    this . threadContextInheritable )  ;", "RequestContextHolder . setRequestAttributes ( previousAttributes ,    this . threadContextInheritable )  ;", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" Cleared   thread - bound   request   context :     \"     +    request )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resetContextHolders"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . contextAttribute    =    contextAttribute ;", "}", "METHOD_END"], "methodName": ["setContextAttribute"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . contextClass    =    contextClass ;", "}", "METHOD_END"], "methodName": ["setContextClass"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . contextConfigLocation    =    contextConfigLocation ;", "}", "METHOD_END"], "methodName": ["setContextConfigLocation"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . contextId    =    contextId ;", "}", "METHOD_END"], "methodName": ["setContextId"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . contextInitializerClasses    =    contextInitializerClasses ;", "}", "METHOD_END"], "methodName": ["setContextInitializerClasses"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "if    ( initializers    !  =    null )     {", "for    ( ApplicationContextInitializer <  ?  >    initializer    :    initializers )     {", "this . contextInitializers . add (  (  ( ApplicationContextInitializer < ConfigurableApplicationContext >  )     ( initializer )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setContextInitializers"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . dispatchOptionsRequest    =    dispatchOptionsRequest ;", "}", "METHOD_END"], "methodName": ["setDispatchOptionsRequest"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . dispatchTraceRequest    =    dispatchTraceRequest ;", "}", "METHOD_END"], "methodName": ["setDispatchTraceRequest"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . namespace    =    namespace ;", "}", "METHOD_END"], "methodName": ["setNamespace"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . publishContext    =    publishContext ;", "}", "METHOD_END"], "methodName": ["setPublishContext"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . publishEvents    =    publishEvents ;", "}", "METHOD_END"], "methodName": ["setPublishEvents"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "this . threadContextInheritable    =    threadContextInheritable ;", "}", "METHOD_END"], "methodName": ["setThreadContextInheritable"], "fileName": "org.springframework.web.servlet.FrameworkServlet"}, {"methodBody": ["METHOD_START", "{", "initInterceptorList (  )  . add ( interceptor )  ;", "}", "METHOD_END"], "methodName": ["addInterceptor"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( ObjectUtils . isEmpty ( interceptors )  )  )     {", "CollecUtils . mergeArrayIntoCollec ( interceptors ,    initInterceptorList (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addInterceptors"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor [  ]    interceptors    =    getInterceptors (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( interceptors )  )  )     {", "for    ( int   i    =     ( interceptors . length )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "if    (  ( interceptors [ i ]  )    instanceof   AsyncHandlerInterceptor )     {", "try    {", "AsyncHandlerInterceptor   asyncInterceptor    =     (  ( AsyncHandlerInterceptor )     ( interceptors [ i ]  )  )  ;", "asyncInterceptor . afterConcurrentHandlingStarted ( request ,    response ,    this . handler )  ;", "}    catch    ( Throwable   ex )     {", ". logger . error (  (  (  \" Interceptor    [  \"     +     ( interceptors [ i ]  )  )     +     \"  ]    failed   in   afterConcurrentHandlingStarted \"  )  ,    ex )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["applyAfterConcurrentHandlingStarted"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor [  ]    interceptors    =    getInterceptors (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( interceptors )  )  )     {", "for    ( int   i    =     ( interceptors . length )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "HandlerInterceptor   interceptor    =    interceptors [ i ]  ;", "interceptor . postHandle ( request ,    response ,    this . handler ,    mv )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["applyPostHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor [  ]    interceptors    =    getInterceptors (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( interceptors )  )  )     {", "for    ( int   i    =     0  ;    i    <     ( interceptors . length )  ;    i +  +  )     {", "HandlerInterceptor   interceptor    =    interceptors [ i ]  ;", "if    (  !  ( interceptor . preHandle ( request ,    response ,    this . handler )  )  )     {", "triggerAfterCompletion ( request ,    response ,    null )  ;", "return   false ;", "}", "this . interceptorIndex    =    i ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["applyPreHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "return   this . handler ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . interceptors )     =  =    null )     &  &     (  ( this . interceptorList )     !  =    null )  )     {", "this . interceptors    =    this . interceptorList . toArray ( new   Interceptor [  0  ]  )  ;", "}", "return   this . interceptors ;", "}", "METHOD_END"], "methodName": ["getInterceptors"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . interceptorList )     =  =    null )     {", "this . interceptorList    =    new   ArrayList <  >  (  )  ;", "if    (  ( this . interceptors )     !  =    null )     {", "CollecUtils . mergeArrayIntoCollec ( this . interceptors ,    this . interceptorList )  ;", "}", "}", "this . interceptors    =    null ;", "return   this . interceptorList ;", "}", "METHOD_END"], "methodName": ["initInterceptorList"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor [  ]    interceptors    =    getInterceptors (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( interceptors )  )  )     {", "for    ( int   i    =    this . interceptorIndex ;    i    >  =     0  ;    i -  -  )     {", "HandlerInterceptor   interceptor    =    interceptors [ i ]  ;", "try    {", "interceptor . afterCompletion ( request ,    response ,    this . handler ,    ex )  ;", "}    catch    ( Throwable   ex 2  )     {", ". logger . error (  \" HandlerInterceptor . afterCompletion   threw   exception \"  ,    ex 2  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["triggerAfterCompletion"], "fileName": "org.springframework.web.servlet.HandlerExecutionChain"}, {"methodBody": ["METHOD_START", "{", "given ( this . interceptor 1  . preHandle ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 2  . preHandle ( this . request ,    this . response ,    this . handler )  )  . willReturn ( false )  ;", "this . chain . applyPreHandle ( request ,    response )  ;", "verify ( this . interceptor 1  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    null )  ;", "}", "METHOD_END"], "methodName": ["earlyExitInPreHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   Exception (  \"  \"  )  ;", "given ( this . interceptor 1  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 2  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 3  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "this . chain . applyPre ( request ,    response )  ;", "this . chain . triggerAfterCompletion ( this . request ,    this . response ,    ex )  ;", "verify ( this . interceptor 3  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    ex )  ;", "verify ( this . interceptor 2  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    ex )  ;", "verify ( this . interceptor 1  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    ex )  ;", "}", "METHOD_END"], "methodName": ["exceptionAfterPreHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "this . chain . triggerAfterCompletion ( this . request ,    this . response ,    null )  ;", "verifyZeroInteractions ( this . interceptor 1  ,    this . interceptor 2  ,    this . interceptor 3  )  ;", "}", "METHOD_END"], "methodName": ["exceptionBeforePreHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   Exception (  \"  \"  )  ;", "given ( this . interceptor 1  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 2  . pre ( this . request ,    this . response ,    this . handler )  )  . willThrow ( ex )  ;", "try    {", "this . chain . applyPre ( request ,    response )  ;", "}    catch    ( Exception   actual )     {", "assertSame ( ex ,    actual )  ;", "}", "this . chain . triggerAfterCompletion ( this . request ,    this . response ,    ex )  ;", "verify ( this . interceptor 1  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    ex )  ;", "verify ( this . interceptor 3  ,    never (  )  )  . pre ( this . request ,    this . response ,    this . handler )  ;", "}", "METHOD_END"], "methodName": ["exceptionDuringPreHandle"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . handler    =    new   Object (  )  ;", "this . chain    =    new    ( this . handler )  ;", "this . interceptor 1     =    mock ( AsyncHandlerInterceptor . class )  ;", "this . interceptor 2     =    mock ( AsyncHandlerInterceptor . class )  ;", "this . interceptor 3     =    mock ( AsyncHandlerInterceptor . class )  ;", "this . chain . addInterceptor ( this . interceptor 1  )  ;", "this . chain . addInterceptor ( this . interceptor 2  )  ;", "assertEquals (  2  ,    this . chain . getInterceptors (  )  . length )  ;", "this . chain . addInterceptor ( this . interceptor 3  )  ;", "assertEquals (  3  ,    this . chain . getInterceptors (  )  . length )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "given ( this . interceptor 1  . preHandle ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 2  . preHandle ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 3  . preHandle ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "this . chain . applyPreHandle ( request ,    response )  ;", "this . chain . applyAfterConcurrentHandlingStarted ( request ,    response )  ;", "this . chain . triggerAfterCompletion ( this . request ,    this . response ,    null )  ;", "verify ( this . interceptor 1  )  . afterConcurrentHandlingStarted ( request ,    response ,    this . handler )  ;", "verify ( this . interceptor 2  )  . afterConcurrentHandlingStarted ( request ,    response ,    this . handler )  ;", "verify ( this . interceptor 3  )  . afterConcurrentHandlingStarted ( request ,    response ,    this . handler )  ;", "}", "METHOD_END"], "methodName": ["successAsyncScenario"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   mav    =    new   ModelAndView (  )  ;", "given ( this . interceptor 1  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 2  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "given ( this . interceptor 3  . pre ( this . request ,    this . response ,    this . handler )  )  . willReturn ( true )  ;", "this . chain . applyPre ( request ,    response )  ;", "this . chain . applyPost ( request ,    response ,    mav )  ;", "this . chain . triggerAfterCompletion ( this . request ,    this . response ,    null )  ;", "verify ( this . interceptor 1  )  . post ( this . request ,    this . response ,    this . handler ,    mav )  ;", "verify ( this . interceptor 2  )  . post ( this . request ,    this . response ,    this . handler ,    mav )  ;", "verify ( this . interceptor 3  )  . post ( this . request ,    this . response ,    this . handler ,    mav )  ;", "verify ( this . interceptor 3  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    null )  ;", "verify ( this . interceptor 2  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    null )  ;", "verify ( this . interceptor 1  )  . afterCompletion ( this . request ,    this . response ,    this . handler ,    null )  ;", "}", "METHOD_END"], "methodName": ["successScenario"], "fileName": "org.springframework.web.servlet.HandlerExecutionChainTests"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["preHandle"], "fileName": "org.springframework.web.servlet.HandlerInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . requiredProperties . add ( property )  ;", "}", "METHOD_END"], "methodName": ["addRequiredProperty"], "fileName": "org.springframework.web.servlet.HttpServletBean"}, {"methodBody": ["METHOD_START", "{", "return   new   StandardServletEnvironment (  )  ;", "}", "METHOD_END"], "methodName": ["createEnvironment"], "fileName": "org.springframework.web.servlet.HttpServletBean"}, {"methodBody": ["METHOD_START", "{", "getModelMap (  )  . addAllAttributes ( modelMap )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addAllObjects"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "getModelMap (  )  . addAttribute ( attributeValue )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addObject"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "getModelMap (  )  . addAttribute ( attributeName ,    attributeValue )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addObject"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "this . view    =    null ;", "this . m    =    null ;", "this . cleared    =    true ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return   getModelMap (  )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return   this . model ;", "}", "METHOD_END"], "methodName": ["getModelInternal"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . model )     =  =    null )     {", "this . model    =    new   Map (  )  ;", "}", "return   this . model ;", "}", "METHOD_END"], "methodName": ["getModelMap"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return   this . status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )    instanceof   View    ?     (  ( View )     ( this . view )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getView"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )    instanceof   String    ?     (  ( String )     ( this . view )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getViewName"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )     !  =    null ;", "}", "METHOD_END"], "methodName": ["hasView"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . view )     =  =    null )     &  &     ( CollectionUtils . isEmpty ( this . model )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )    instanceof   String ;", "}", "METHOD_END"], "methodName": ["isReference"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "this . status    =    status ;", "}", "METHOD_END"], "methodName": ["setStatus"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "this . view    =    view ;", "}", "METHOD_END"], "methodName": ["setView"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "this . view    =    viewName ;", "}", "METHOD_END"], "methodName": ["setViewName"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return    ( this . cleared )     &  &     ( isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["wasCleared"], "fileName": "org.springframework.web.servlet.ModelAndView"}, {"methodBody": ["METHOD_START", "{", "return   modelAndView ;", "}", "METHOD_END"], "methodName": ["getModelAndView"], "fileName": "org.springframework.web.servlet.ModelAndViewDefiningException"}, {"methodBody": ["METHOD_START", "{", "return   this . headers ;", "}", "METHOD_END"], "methodName": ["getHeaders"], "fileName": "org.springframework.web.servlet.NoHandlerFoundException"}, {"methodBody": ["METHOD_START", "{", "return   this . httpMethod ;", "}", "METHOD_END"], "methodName": ["getHttpMethod"], "fileName": "org.springframework.web.servlet.NoHandlerFoundException"}, {"methodBody": ["METHOD_START", "{", "return   this . requestURL ;", "}", "METHOD_END"], "methodName": ["getRequestURL"], "fileName": "org.springframework.web.servlet.NoHandlerFoundException"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "org.springframework.web.servlet.View"}, {"methodBody": ["METHOD_START", "{", "if    ( AnnotationDrivenBeanDefinitionParser . jackson 2 Present )     {", "beanDef . getPropertyValues (  )  . add (  \" requestBodyAdvice \"  ,    new   RootBeanDefinition ( JsonViewRequestBodyAdvice . class )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addRequestBodyAdvice"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    ( AnnotationDrivenBeanDefinitionParser . jackson 2 Present )     {", "beanDef . getPropertyValues (  )  . add (  \" responseBodyAdvice \"  ,    new   RootBeanDefinition ( JsonViewResponseBodyAdvice . class )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   pathMatchingElement    =    DomUtils . getChildElementByTagName ( element ,     \" path - matching \"  )  ;", "if    ( pathMatchingElement    !  =    null )     {", "Object   source    =    pContext . extractSource ( element )  ;", "if    ( pathMatchingElement . hasAttribute (  \" suffix - pattern \"  )  )     {", "Boolean   useSuffixPatternMatch    =    Boolean . valueOf ( pathMatchingElement . getAttribute (  \" suffix - pattern \"  )  )  ;", "handlerMappingDef . getPropertyValues (  )  . add (  \" useSuffixPatternMatch \"  ,    useSuffixPatternMatch )  ;", "}", "if    ( pathMatchingElement . hasAttribute (  \" trailing - slash \"  )  )     {", "Boolean   useTrailingSlashMatch    =    Boolean . valueOf ( pathMatchingElement . getAttribute (  \" trailing - slash \"  )  )  ;", "handlerMappingDef . getPropertyValues (  )  . add (  \" useTrailingSlashMatch \"  ,    useTrailingSlashMatch )  ;", "}", "if    ( pathMatchingElement . hasAttribute (  \" registered - suffixes - only \"  )  )     {", "Boolean   useRegisteredSuffixPatternMatch    =    Boolean . valueOf ( pathMatchingElement . getAttribute (  \" registered - suffixes - only \"  )  )  ;", "handlerMappingDef . getPropertyValues (  )  . add (  \" useRegisteredSuffixPatternMatch \"  ,    useRegisteredSuffixPatternMatch )  ;", "}", "RuntimeBeanReference   pathHelperRef    =    null ;", "if    ( pathMatchingElement . hasAttribute (  \" path - helper \"  )  )     {", "pathHelperRef    =    new   RuntimeBeanReference ( pathMatchingElement . getAttribute (  \" path - helper \"  )  )  ;", "}", "pathHelperRef    =    MvcNamespaceUtils . registerUrlPathHelper ( pathHelperRef ,    pContext ,    source )  ;", "handlerMappingDef . getPropertyValues (  )  . add (  \" urlPathHelper \"  ,    pathHelperRef )  ;", "RuntimeBeanReference   pathMatcherRef    =    null ;", "if    ( pathMatchingElement . hasAttribute (  \" path - matcher \"  )  )     {", "pathMatcherRef    =    new   RuntimeBeanReference ( pathMatchingElement . getAttribute (  \" path - matcher \"  )  )  ;", "}", "pathMatcherRef    =    MvcNamespaceUtils . registerPathMatcher ( pathMatcherRef ,    pContext ,    source )  ;", "handlerMappingDef . getPropertyValues (  )  . add (  \" pathMatcher \"  ,    pathMatcherRef )  ;", "}", "}", "METHOD_END"], "methodName": ["configurePathMatchingProperties"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "RootBeanDefinition   beanDefinition    =    new   RootBeanDefinition ( converterClass )  ;", "beanDefinition . setSource ( source )  ;", "beanDefinition . setRole ( ROLE _ INFRASTRUCTURE )  ;", "return   beanDefinition ;", "}", "METHOD_END"], "methodName": ["createConverterDefinition"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "GenericBeanDefinition   beanDefinition    =    new   GenericBeanDefinition (  )  ;", "beanDefinition . setBeanClass ( Jackson 2 ObjectMapperFactoryBean . class )  ;", "beanDefinition . setSource ( source )  ;", "beanDefinition . setRole ( ROLE _ INFRASTRUCTURE )  ;", "return   beanDefinition ;", "}", "METHOD_END"], "methodName": ["createObjectMapperFactoryDefinition"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "ManagedList < Object >    list    =    new   ManagedList (  )  ;", "list . setSource ( pContext . extractSource ( parentElement )  )  ;", "for    ( Element   beanElement    :    DomUtils . getChildElementsByTagName ( parentElement ,     \" bean \"  ,     \" ref \"  )  )     {", "Object   object    =    pContext . getDelegate (  )  . parsePropertySubElement ( beanElement ,    null )  ;", "list . add ( object )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["extractBeanSubElements"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   resolversElement    =    DomUtils . getChildElementByTagName ( element ,     \" argument - resolvers \"  )  ;", "if    ( resolversElement    !  =    null )     {", "ManagedList < Object >    resolvers    =    extractBeanSubElements ( resolversElement ,    pContext )  ;", "return   wrapLegacyResolvers ( resolvers ,    pContext )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getArgumentResolvers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   asyncElement    =    DomUtils . getChildElementByTagName ( element ,     \" async - support \"  )  ;", "if    (  ( asyncElement    !  =    null )     &  &     ( asyncElement . hasAttribute (  \" task - executor \"  )  )  )     {", "return   new   RuntimeReference ( asyncElement . getAttribute (  \" task - executor \"  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getAsyncExecutor"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   asyncElement    =    DomUtils . getChildElementByTagName ( element ,     \" async - support \"  )  ;", "return   asyncElement    !  =    null    ?    asyncElement . getAttribute (  \" default - timeout \"  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAsyncTimeout"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "ManagedList <  ?    super   Object >    interceptors    =    new   ManagedList (  )  ;", "Element   asyncElement    =    DomUtils . getChildElementByTagName ( element ,     \" async - support \"  )  ;", "if    ( asyncElement    !  =    null )     {", "Element   interceptorsElement    =    DomUtils . getChildElementByTagName ( asyncElement ,     \" callable - interceptors \"  )  ;", "if    ( interceptorsElement    !  =    null )     {", "interceptors . setSource ( source )  ;", "for    ( Element   converter    :    DomUtils . getChildElementsByTagName ( interceptorsElement ,     \" bean \"  )  )     {", "Holder   beanDef    =    parserContext . getDelegate (  )  . parseElement ( converter )  ;", "if    ( beanDef    !  =    null )     {", "beanDef    =    parserContext . getDelegate (  )  . decorateIfRequired ( converter ,    beanDef )  ;", "interceptors . add ( beanDef )  ;", "}", "}", "}", "}", "return   interceptors ;", "}", "METHOD_END"], "methodName": ["getCallableInterceptors"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "RuntimeBeanReference   beanRef ;", "if    ( element . hasAttribute (  \" content - negotiation - manager \"  )  )     {", "String   name    =    element . getAttribute (  \" content - negotiation - manager \"  )  ;", "beanRef    =    new   RuntimeBeanReference ( name )  ;", "} else    {", "RootBeanDefinition   factoryBeanDef    =    new   RootBeanDefinition ( ContentNegotiationManagerFactoryBean . class )  ;", "factoryBeanDef . setSource ( source )  ;", "factoryBeanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "factoryBeanDef . getPropertyValues (  )  . add (  \" mediaTypes \"  ,    getDefaultMediaTypes (  )  )  ;", "String   name    =     . CONTENT _ NEGOTIATION _ MANAGER _ BEAN _ NAME ;", "parserContext . getReaderContext (  )  . getRegistry (  )  . registerBeanDefinition ( name ,    factoryBeanDef )  ;", "parserContext . registerComponent ( new   BeanComponentDefinition ( factoryBeanDef ,    name )  )  ;", "beanRef    =    new   RuntimeBeanReference ( name )  ;", "}", "return   beanRef ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "RuntimeBeanReference   conversionServiceRef ;", "if    ( element . hasAttribute (  \" conversion - service \"  )  )     {", "conversionServiceRef    =    new   RuntimeBeanReference ( element . getAttribute (  \" conversion - service \"  )  )  ;", "} else    {", "RootBeanDefinition   conversionDef    =    new   RootBeanDefinition ( FormattingConversionServiceFactoryBean . class )  ;", "conversionDef . setSource ( source )  ;", "conversionDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "String   conversionName    =    parserContext . getReaderContext (  )  . registerWithGeneratedName ( conversionDef )  ;", "parserContext . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( conversionDef ,    conversionName )  )  ;", "conversionServiceRef    =    new   RuntimeBeanReference ( conversionName )  ;", "}", "return   conversionServiceRef ;", "}", "METHOD_END"], "methodName": ["getConversionService"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "if    (  . romePresent )     {", "props . put (  \" atom \"  ,    APPLICATION _ ATOM _ XML _ VALUE )  ;", "props . put (  \" rss \"  ,    APPLICATION _ RSS _ XML _ VALUE )  ;", "}", "if    (  (  . jaxb 2 Present )     |  |     (  . jackson 2 XmlPresent )  )     {", "props . put (  \" xml \"  ,    APPLICATION _ XML _ VALUE )  ;", "}", "if    (  (  . jackson 2 Present )     |  |     (  . gsonPresent )  )     {", "props . put (  \" json \"  ,    APPLICATION _ JSON _ VALUE )  ;", "}", "if    (  . jackson 2 SmilePresent )     {", "props . put (  \" smile \"  ,     \" application / x - jackson - smile \"  )  ;", "}", "if    (  . jackson 2 CborPresent )     {", "props . put (  \" cbor \"  ,     \" application / cbor \"  )  ;", "}", "return   props ;", "}", "METHOD_END"], "methodName": ["getDefaultMediaTypes"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "ManagedList <  ?    super   Object >    interceptors    =    new   ManagedList (  )  ;", "Element   asyncElement    =    DomUtils . getChildElementByTagName ( element ,     \" async - support \"  )  ;", "if    ( asyncElement    !  =    null )     {", "Element   interceptorsElement    =    DomUtils . getChildElementByTagName ( asyncElement ,     \" deferred - result - interceptors \"  )  ;", "if    ( interceptorsElement    !  =    null )     {", "interceptors . setSource ( source )  ;", "for    ( Element   converter    :    DomUtils . getChildElementsByTagName ( interceptorsElement ,     \" bean \"  )  )     {", "Holder   beanDef    =    parserContext . getDelegate (  )  . parseElement ( converter )  ;", "if    ( beanDef    !  =    null )     {", "beanDef    =    parserContext . getDelegate (  )  . decorateIfRequired ( converter ,    beanDef )  ;", "interceptors . add ( beanDef )  ;", "}", "}", "}", "}", "return   interceptors ;", "}", "METHOD_END"], "methodName": ["getDeferredResultInterceptors"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    ( element . hasAttribute (  \" message - codes - resolver \"  )  )     {", "return   new   RuntimeReference ( element . getAttribute (  \" message - codes - resolver \"  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getMessageCodesResolver"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   convertersElement    =    DomUtils . getChildElementByTagName ( element ,     \" message - converters \"  )  ;", "ManagedList <  ?    super   Object >    messageConverters    =    new   ManagedList (  )  ;", "if    ( convertersElement    !  =    null )     {", "messageConverters . setSource ( source )  ;", "for    ( Element   beanElement    :    DomUtils . getChildElementsByTagName ( convertersElement ,     \" bean \"  ,     \" ref \"  )  )     {", "Object   object    =    parserContext . getDelegate (  )  . parsePropertySubElement ( beanElement ,    null )  ;", "messageConverters . add ( object )  ;", "}", "}", "if    (  ( convertersElement    =  =    null )     |  |     ( Boolean . valueOf ( convertersElement . getAttribute (  \" register - defaults \"  )  )  )  )     {", "messageConverters . setSource ( source )  ;", "messageConverters . add ( createConverterDefinition ( ByteArrayHttpMessageConverter . class ,    source )  )  ;", "RootBeanDefinition   stringConverterDef    =    createConverterDefinition ( StringHttpMessageConverter . class ,    source )  ;", "stringConverterDef . getPropertyValues (  )  . add (  \" writeAcceptCharset \"  ,    false )  ;", "messageConverters . add ( stringConverterDef )  ;", "messageConverters . add ( createConverterDefinition ( ResourceHttpMessageConverter . class ,    source )  )  ;", "messageConverters . add ( createConverterDefinition ( ResourceRegionHttpMessageConverter . class ,    source )  )  ;", "messageConverters . add ( createConverterDefinition ( SourceHttpMessageConverter . class ,    source )  )  ;", "messageConverters . add ( createConverterDefinition ( AllEncompassingFormHttpMessageConverter . class ,    source )  )  ;", "if    (  . romePresent )     {", "messageConverters . add ( createConverterDefinition ( AtomFeedHttpMessageConverter . class ,    source )  )  ;", "messageConverters . add ( createConverterDefinition ( RssChannelHttpMessageConverter . class ,    source )  )  ;", "}", "if    (  . jackson 2 XmlPresent )     {", "Class <  ?  >    type    =    MappingJackson 2 XmlHttpMessageConverter . class ;", "RootBeanDefinition   jacksonConverterDef    =    createConverterDefinition ( type ,    source )  ;", "GenericBeanDefinition   jacksonFactoryDef    =    createObjectMapperFactoryDefinition ( source )  ;", "jacksonFactoryDef . getPropertyValues (  )  . add (  \" createXmlMapper \"  ,    true )  ;", "jacksonConverterDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    jacksonFactoryDef )  ;", "messageConverters . add ( jacksonConverterDef )  ;", "} else", "if    (  . jaxb 2 Present )     {", "messageConverters . add ( createConverterDefinition ( class ,    source )  )  ;", "}", "if    (  . jackson 2 Present )     {", "Class <  ?  >    type    =    MappingJackson 2 HttpMessageConverter . class ;", "RootBeanDefinition   jacksonConverterDef    =    createConverterDefinition ( type ,    source )  ;", "GenericBeanDefinition   jacksonFactoryDef    =    createObjectMapperFactoryDefinition ( source )  ;", "jacksonConverterDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    jacksonFactoryDef )  ;", "messageConverters . add ( jacksonConverterDef )  ;", "} else", "if    (  . gsonPresent )     {", "messageConverters . add ( createConverterDefinition ( class ,    source )  )  ;", "}", "if    (  . jackson 2 SmilePresent )     {", "Class <  ?  >    type    =    MappingJackson 2 SmileHttpMessageConverter . class ;", "RootBeanDefinition   jacksonConverterDef    =    createConverterDefinition ( type ,    source )  ;", "GenericBeanDefinition   jacksonFactoryDef    =    createObjectMapperFactoryDefinition ( source )  ;", "jacksonFactoryDef . getPropertyValues (  )  . add (  \" factory \"  ,    new   SmileFactory (  )  )  ;", "jacksonConverterDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    jacksonFactoryDef )  ;", "messageConverters . add ( jacksonConverterDef )  ;", "}", "if    (  . jackson 2 CborPresent )     {", "Class <  ?  >    type    =    MappingJackson 2 CborHttpMessageConverter . class ;", "RootBeanDefinition   jacksonConverterDef    =    createConverterDefinition ( type ,    source )  ;", "GenericBeanDefinition   jacksonFactoryDef    =    createObjectMapperFactoryDefinition ( source )  ;", "jacksonFactoryDef . getPropertyValues (  )  . add (  \" factory \"  ,    new   CBORFactory (  )  )  ;", "jacksonConverterDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    jacksonFactoryDef )  ;", "messageConverters . add ( jacksonConverterDef )  ;", "}", "}", "return   messageConverters ;", "}", "METHOD_END"], "methodName": ["getMessageConverters"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   handlers    =    DomUtils . getChildElementByTagName ( element ,     \" return - value - handlers \"  )  ;", "return   handlers    !  =    null    ?    extractBeanSubElements ( handlers ,    pContext )     :    null ;", "}", "METHOD_END"], "methodName": ["getReturnValueHandlers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    ( element . hasAttribute (  \" validator \"  )  )     {", "return   new   RuntimeBeanReference ( element . getAttribute (  \" validator \"  )  )  ;", "} else", "if    (  . javaxValidationPresent )     {", "RootBeanDefinition   validatorDef    =    new   RootBeanDefinition (  \" OptionalValidatorFactoryBean \"  )  ;", "validatorDef . setSource ( source )  ;", "validatorDef . setRole ( BeanDefinition . ROLE _ INFRASTRUCTURE )  ;", "String   validatorName    =    parserContext . getReaderContext (  )  . registerWithGeneratedName ( validatorDef )  ;", "parserContext . registerComponent ( new   BeanComponentDefinition ( validatorDef ,    validatorName )  )  ;", "return   new   RuntimeBeanReference ( validatorName )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getValidator"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "ManagedList < Object >    result    =    new   ManagedList (  )  ;", "for    ( Object   object    :    list )     {", "if    ( object   instanceof   Holder )     {", "Holder   beanDef    =     (  ( Holder )     ( object )  )  ;", "String   className    =    beanDef . get (  )  . getBeanClassName (  )  ;", "Assert . notNull ( className ,     \" No   resolver   class \"  )  ;", "Class <  ?  >    clazz    =    ClassUtils . resolveClassName ( className ,    context . getReaderContext (  )  . getBeanClassLoader (  )  )  ;", "if    ( WebArgumentResolver . class . isAssignableFrom ( clazz )  )     {", "Root   adapter    =    new   Root ( ServletWebArgumentResolverAdapter . class )  ;", "adapter . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    beanDef )  ;", "result . add ( new   Holder ( adapter ,     (  ( beanDef . getBeanName (  )  )     +     \" Adapter \"  )  )  )  ;", "continue ;", "}", "}", "result . add ( object )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["wrapLegacyResolvers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config . xml \"  )  ;", "BeanNameUrlHandlerMapping   mapping    =    this . appContext . getBean ( BeanNameUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertEquals (  2  ,    mapping . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["beanNameUrlHandlerMapping"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "XmlBeanDefinitionReader   reader    =    new   XmlBeanDefinitionReader ( this . appContext )  ;", "Resource   resource    =    new   ClassPathResource ( fileName ,     . class )  ;", "reader . loadBeanDefinitions ( resource )  ;", "this . appContext . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["loadBeanDefinitions"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - argument - resolvers . xml \"  )  ;", "testArgumentResolvers ( this . appContext . getBean ( RequestMappingHandlerAdapter . class )  )  ;", "testArgumentResolvers ( this . appContext . getBean ( ExceptionHandlerExceptionResolver . class )  )  ;", "}", "METHOD_END"], "methodName": ["testArgumentResolvers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( bean )  ;", "Object   value    =    new   DirectFieldAccessor ( bean )  . getPropertyValue (  \" customArgumentResolvers \"  )  ;", "assertNotNull ( value )  ;", "assertTrue (  ( value   instanceof   List )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < HandlerMethodArgumentResolver >    resolvers    =     (  ( List < HandlerMethodArgumentResolver >  )     ( value )  )  ;", "assertEquals (  3  ,    resolvers . size (  )  )  ;", "assertTrue (  (  ( resolvers . get (  0  )  )    instanceof   SWebArgumentResolverAdapter )  )  ;", "assertTrue (  (  ( resolvers . get (  1  )  )    instanceof   TestHandlerMethodArgumentResolver )  )  ;", "assertTrue (  (  ( resolvers . get (  2  )  )    instanceof   TestHandlerMethodArgumentResolver )  )  ;", "assertNotSame ( resolvers . get (  1  )  ,    resolvers . get (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testArgumentResolvers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - message - codes - resolver . xml \"  )  ;", "RequestMappingHandlerAdapter   adapter    =    this . appContext . getBean ( RequestMappingHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "Object   initializer    =    adapter . getWebBindingInitializer (  )  ;", "assertNotNull ( initializer )  ;", "MessageCodesResolver   resolver    =     (  ( ConfigurableWebBindingInitializer )     ( initializer )  )  . getMessageCodesResolver (  )  ;", "assertNotNull ( resolver )  ;", "assertEquals ( TestMessageCodesResolver . class ,    resolver . getClass (  )  )  ;", "assertEquals ( false ,    new   DirectFieldAccessor ( adapter )  . getPropertyValue (  \" ignoreDefaultModelOnRedirect \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMessageCodesResolver"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - message - converters . xml \"  )  ;", "verifyMessageConverters ( this . appContext . getBean ( RequestMappingHandlerAdapter . class )  ,    true )  ;", "verifyMessageConverters ( this . appContext . getBean ( ExceptionHandlerExceptionResolver . class )  ,    true )  ;", "verifyRequestResponseBodyAdvice ( this . appContext . getBean ( RequestMappingHandlerAdapter . class )  )  ;", "verifyResponseBodyAdvice ( this . appContext . getBean ( ExceptionHandlerExceptionResolver . class )  )  ;", "}", "METHOD_END"], "methodName": ["testMessageConverters"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - message - converters - defaults - off . xml \"  )  ;", "verifyMessageConverters ( this . appContext . getBean ( RequestMappingHandlerAdapter . class )  ,    false )  ;", "verifyMessageConverters ( this . appContext . getBean ( ExceptionHandlerExceptionResolver . class )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testMessageConvertersWithoutDefaultRegistrations"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - path - matching . xml \"  )  ;", "RequestMappingHandlerMapping   hm    =    this . appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( hm )  ;", "assertTrue ( hm . useSuffixPatternMatch (  )  )  ;", "assertFalse ( hm . useTrailingSlashMatch (  )  )  ;", "assertTrue ( hm . useRegisteredSuffixPatternMatch (  )  )  ;", "assertThat ( hm . getUrlPathHelper (  )  ,    Matchers . instanceOf ( TestPathHelper . class )  )  ;", "assertThat ( hm . getPathMatcher (  )  ,    Matchers . instanceOf ( TestPathMatcher . class )  )  ;", "List < String >    fileExtensions    =    hm . getContentNegotiationManager (  )  . getAllFileExtensions (  )  ;", "assertThat ( fileExtensions ,    Matchers . contains (  \" xml \"  )  )  ;", "assertThat ( fileExtensions ,    Matchers . hasSize (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testPathMatchingConfiguration"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - return - value - handlers . xml \"  )  ;", "testReturnValueHandlers ( this . appContext . getBean ( RequestMappingHandlerAdapter . class )  )  ;", "testReturnValueHandlers ( this . appContext . getBean ( ExceptionHandlerExceptionResolver . class )  )  ;", "}", "METHOD_END"], "methodName": ["testReturnValueHandlers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( bean )  ;", "Object   value    =    new   DirectFieldAccessor ( bean )  . getPropertyValue (  \" customReturnValueHandlers \"  )  ;", "assertNotNull ( value )  ;", "assertTrue (  ( value   instanceof   List )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < HandlerMethodReturnValueHandler >    handlers    =     (  ( List < HandlerMethodReturnValueHandler >  )     ( value )  )  ;", "assertEquals (  2  ,    handlers . size (  )  )  ;", "assertEquals ( HandlerMethodReturnValueHandler . class ,    handlers . get (  0  )  . getClass (  )  )  ;", "assertEquals ( HandlerMethodReturnValueHandler . class ,    handlers . get (  1  )  . getClass (  )  )  ;", "assertNotSame ( handlers . get (  0  )  ,    handlers . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testReturnValueHandlers"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( bean )  ;", "Object   value    =    new   DirectFieldAccessor ( bean )  . getPropertyValue (  \" messageConverters \"  )  ;", "assertNotNull ( value )  ;", "assertTrue (  ( value   instanceof   List )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =     (  ( List < HttpMessageConverter <  ?  >  >  )     ( value )  )  ;", "if    ( hasDefaultRegistrs )     {", "assertTrue (  \" Default   and   custom   converter   expected \"  ,     (  ( converters . size (  )  )     >     2  )  )  ;", "} else    {", "assertTrue (  \" Only   custom   converters   expected \"  ,     (  ( converters . size (  )  )     =  =     2  )  )  ;", "}", "assertTrue (  (  ( converters . get (  0  )  )    instanceof   StringHttpMessageConverter )  )  ;", "assertTrue (  (  ( converters . get (  1  )  )    instanceof   ResourceHttpMessageConverter )  )  ;", "}", "METHOD_END"], "methodName": ["verifyMessageConverters"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( bean )  ;", "Object   value    =    new   DirectFieldAccessor ( bean )  . getPropertyValue (  \" requestResponseBodyAdvice \"  )  ;", "assertNotNull ( value )  ;", "assertTrue (  ( value   instanceof   List )  )  ;", "List < ResponseBodyAdvice <  ?  >  >    converters    =     (  ( List < ResponseBodyAdvice <  ?  >  >  )     ( value )  )  ;", "assertTrue (  (  ( converters . get (  0  )  )    instanceof   JsonViewRequestBodyAdvice )  )  ;", "assertTrue (  (  ( converters . get (  1  )  )    instanceof   JsonViewResponseBodyAdvice )  )  ;", "}", "METHOD_END"], "methodName": ["verifyRequestResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( bean )  ;", "Object   value    =    new   DirectFieldAccessor ( bean )  . getPropertyValue (  \" responseBodyAdvice \"  )  ;", "assertNotNull ( value )  ;", "assertTrue (  ( value   instanceof   List )  )  ;", "List < ResponseBodyAdvice <  ?  >  >    converters    =     (  ( List < ResponseBodyAdvice <  ?  >  >  )     ( value )  )  ;", "assertTrue (  (  ( converters . get (  0  )  )    instanceof   JsonViewResponseBodyAdvice )  )  ;", "}", "METHOD_END"], "methodName": ["verifyResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "List < Element >    paths    =    DomUtils . getChildElementsByTagName ( interceptor ,    elementName )  ;", "ManagedList < String >    patterns    =    new   ManagedList ( paths . size (  )  )  ;", "for    ( Element   path    :    paths )     {", "patterns . add ( path . getAttribute (  \" path \"  )  )  ;", "}", "return   patterns ;", "}", "METHOD_END"], "methodName": ["getIncludePatterns"], "fileName": "org.springframework.web.servlet.config.InterceptorsBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions ( xml )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertFalse ( mapping . getUrlPathHelper (  )  . shouldRemoveSemicolonContent (  )  )  ;", "RequestMappingHandlerAdapter   adapter    =    appContext . getBean ( RequestMappingHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "assertEquals ( true ,    new   DirectFieldAccessor ( adapter )  . getPropertyValue (  \" ignoreDefaultModelOnRedirect \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  9  -  1  0  -  3  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "adapter . handle ( request ,    response ,    handlerMethod )  ;", "assertTrue ( appContext . getBean (  . TestValidator . class )  . validatorInvoked )  ;", "assertFalse ( handler . recordedValidationError )  ;", "}", "METHOD_END"], "methodName": ["doTestCustomValidator"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "this . appContext . setConfigLocation (  (  \" classpath : org / springframework / web / servlet / config /  \"     +    fileName )  )  ;", "this . appContext . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["loadBeanDefinitions"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "MvcNamespaceTests . TestMockServletContext   servletContext    =    new   MvcNamespaceTests . TestMockServletContext (  )  ;", "appContext    =    new   XmlWebApplicationContext (  )  ;", "appContext . setServletContext ( servletContext )  ;", "LocaleContextHolder . setLocale ( Locale . US )  ;", "String   attributeName    =    WebApplicationContext . ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ;", "appContext . getServletContext (  )  . setAttribute ( attributeName ,    appContext )  ;", "handler    =    new   MvcNamespaceTests . TestController (  )  ;", "handlerMethod    =    new   InvocableHandlerMethod ( handler ,    MvcNamespaceTests . TestController . class . getMethod (  \" testBind \"  ,    Date . class ,    Double . class ,    MvcNamespaceTests . TestBean . class ,    BindingResult . class )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - async - support . xml \"  )  ;", "RequestMappingHandlerAdapter   adapter    =    appContext . getBean ( RequestMappingHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "DirectFieldAccessor   fieldAccessor    =    new   DirectFieldAccessor ( adapter )  ;", "assertEquals ( ConcurrentTaskExecutor . class ,    fieldAccessor . getPropertyValue (  \" taskExecutor \"  )  . getClass (  )  )  ;", "assertEquals (  2  5  0  0 L ,    fieldAccessor . getPropertyValue (  \" asyncRequestTimeout \"  )  )  ;", "CallableProcessingInterceptor [  ]    callableInterceptors    =     (  ( CallableProcessingInterceptor [  ]  )     ( fieldAccessor . getPropertyValue (  \" callableInterceptors \"  )  )  )  ;", "assertEquals (  1  ,    callableInterceptors . length )  ;", "DeferredResultProcessingInterceptor [  ]    deferredResultInterceptors    =     (  ( DeferredResultProcessingInterceptor [  ]  )     ( fieldAccessor . getPropertyValue (  \" deferredResultInterceptors \"  )  )  )  ;", "assertEquals (  1  ,    deferredResultInterceptors . length )  ;", "}", "METHOD_END"], "methodName": ["testAsyncSupportOptions"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - bean - decoration . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "mapping . setDefaultHandler ( handlerMethod )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  0  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "LocaleChangeInterceptor   interceptor    =     (  ( LocaleChangeInterceptor )     ( chain . getInterceptors (  )  [  1  ]  )  )  ;", "assertEquals (  \" lang \"  ,    interceptor . getParamName (  )  )  ;", "ThemeChangeInterceptor   interceptor 2     =     (  ( ThemeChangeInterceptor )     ( chain . getInterceptors (  )  [  2  ]  )  )  ;", "assertEquals (  \" style \"  ,    interceptor 2  . getParamName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testBeanDecoration"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - content - negotiation - manager . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "ContentNegotiationManager   manager    =    mapping . getContentNegotiationManager (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . xml \"  )  ;", "NativeWebRequest   webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "assertEquals ( Collections . singletonList ( MediaType . valueOf (  \" application / rss + xml \"  )  )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "ViewResolverComposite   compositeResolver    =    this . appContext . getBean ( ViewResolverComposite . class )  ;", "assertNotNull ( compositeResolver )  ;", "assertEquals (  (  \" Actual :     \"     +     ( compositeResolver . getViewResolvers (  )  )  )  ,     1  ,    compositeResolver . getViewResolvers (  )  . size (  )  )  ;", "ViewResolver   resolver    =    compositeResolver . getViewResolvers (  )  . get (  0  )  ;", "assertEquals ( ContentNegotiatingViewResolver . class ,    resolver . getClass (  )  )  ;", "ContentNegotiatingViewResolver   cnvr    =     (  ( ContentNegotiatingViewResolver )     ( resolver )  )  ;", "assertSame ( manager ,    cnvr . getContentNegotiationManager (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContentNegotiationManager"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - cors . xml \"  )  ;", "String [  ]    beanNames    =    appContext . getBeanNamesForType ( AbstractHandlerMapping . class )  ;", "assertEquals (  2  ,    beanNames . length )  ;", "for    ( String   beanName    :    beanNames )     {", "AbstractHandlerMapping   handlerMapping    =     (  ( AbstractHandlerMapping )     ( appContext . getBean ( beanName )  )  )  ;", "assertNotNull ( handlerMapping )  ;", "Map < String ,    CorsConfiguration >        =    handlerMapping . getCorsConfigurations (  )  ;", "assertNotNull (  )  ;", "assertEquals (  2  ,     . size (  )  )  ;", "CorsConfiguration    =     . get (  \"  / api /  *  *  \"  )  ;", "assertNotNull (  ;", "assertArrayEquals ( new   String [  ]  {     \" http :  /  / domain 1  . com \"  ,     \" http :  /  / domain 2  . com \"     }  ,    getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"  ,     \" PUT \"     }  ,    getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" header 1  \"  ,     \" header 2  \"  ,     \" header 3  \"     }  ,    getAllowedHeaders (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" header 1  \"  ,     \" header 2  \"     }  ,    getExposedHeaders (  )  . toArray (  )  )  ;", "assertFalse ( getAllowCredentials (  )  )  ;", "assertEquals ( Long . valueOf (  1  2  3  )  ,    getMaxAge (  )  )  ;", "=     . get (  \"  / resources /  *  *  \"  )  ;", "assertArrayEquals ( new   String [  ]  {     \" http :  /  / domain 1  . com \"     }  ,    getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"  ,     \" HEAD \"  ,     \" POST \"     }  ,    getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    getAllowedHeaders (  )  . toArray (  )  )  ;", "assertNull ( getExposedHeaders (  )  )  ;", "assertNull ( getAllowCredentials (  )  )  ;", "assertEquals ( Long . valueOf (  1  8  0  0  )  ,    getMaxAge (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCors"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - cors - minimal . xml \"  )  ;", "String [  ]    beanNames    =    appContext . getBeanNamesForType ( AbstractHandlerMapping . class )  ;", "assertEquals (  2  ,    beanNames . length )  ;", "for    ( String   beanName    :    beanNames )     {", "AbstractHandlerMapping   handlerMapping    =     (  ( AbstractHandlerMapping )     ( appContext . getBean ( beanName )  )  )  ;", "assertNotNull ( handlerMapping )  ;", "Map < String ,    CorsConfiguration >        =    handlerMapping . getCorsConfigurations (  )  ;", "assertNotNull (  )  ;", "assertEquals (  1  ,     . size (  )  )  ;", "CorsConfiguration    =     . get (  \"  /  *  *  \"  )  ;", "assertNotNull (  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"  ,     \" HEAD \"  ,     \" POST \"     }  ,    getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    getAllowedHeaders (  )  . toArray (  )  )  ;", "assertNull ( getExposedHeaders (  )  )  ;", "assertNull ( getAllowCredentials (  )  )  ;", "assertEquals ( Long . valueOf (  1  8  0  0  )  ,    getMaxAge (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCorsMinimal"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - custom - conversion - service . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "mapping . setDefaultHandler ( handlerMethod )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . setRequestURI (  \"  / accounts /  1  2  3  4  5  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  9  -  1  0  -  3  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertEquals (  1  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  0  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "ConversionServiceExposingInterceptor   interceptor    =     (  ( ConversionServiceExposingInterceptor )     ( chain . getInterceptors (  )  [  0  ]  )  )  ;", "interceptor . preHandle ( request ,    response ,    handler )  ;", "assertSame ( appContext . getBean (  \" conversionService \"  )  ,    request . getAttribute ( ConversionService . class . getName (  )  )  )  ;", "RequestMappingHandlerAdapter   adapter    =    appContext . getBean ( RequestMappingHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "adapter . handle ( request ,    response ,    handlerMethod )  ;", "}", "METHOD_END"], "methodName": ["testCustomConversionService"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "doTestCustomValidator (  \" mvc - config - custom - validator . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testCustomValidator"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertEquals (  0  ,    mapping . getOrder (  )  )  ;", "assertTrue ( mapping . getUrlPathHelper (  )  . shouldRemoveSemicolonContent (  )  )  ;", "mapping . setDefaultHandler ( handlerMethod )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . json \"  )  ;", "NativeWebRequest   webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "ContentNegotiationManager   manager    =    mapping . getContentNegotiationManager (  )  ;", "assertEquals ( Collections . singletonList ( APPLICATION _ JSON )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "RequestMappingHandlerAdapter   adapter    =    appContext . getBean ( RequestMappingHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "assertEquals ( false ,    new   DirectFieldAccessor ( adapter )  . getPropertyValue (  \" ignoreDefaultModelOnRedirect \"  )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    adapter . getMessageConverters (  )  ;", "assertTrue (  (  ( converters . size (  )  )     >     0  )  )  ;", "for    ( HttpMessageConverter <  ?  >    converter    :    converters )     {", "if    ( converter   instanceof   AbstractJackson 2 HttpMessageConverter )     {", "ObjectMapper   objectMapper    =     (  ( AbstractJackson 2 HttpMessageConverter )     ( converter )  )  . getObjectMapper (  )  ;", "assertFalse ( objectMapper . getDeserializationConfig (  )  . isEnabled ( MapperFeature . DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( objectMapper . getSerializationConfig (  )  . isEnabled ( MapperFeature . DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( objectMapper . getDeserializationConfig (  )  . isEnabled ( DeserializationFeature . FAIL _ ON _ UNKNOWN _ PROPERTIES )  )  ;", "if    ( converter   instanceof   MappingJackson 2 XmlHttpMessageConverter )     {", "assertEquals ( XmlMapper . class ,    objectMapper . getClass (  )  )  ;", "}", "}", "}", "assertNotNull ( appContext . getBean ( FormattingConversionServiceFactoryBean . class )  )  ;", "assertNotNull ( appContext . getBean ( ConversionService . class )  )  ;", "assertNotNull ( appContext . getBean ( LocalValidatorFactoryBean . class )  )  ;", "assertNotNull ( appContext . getBean ( Validator . class )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  9  -  1  0  -  3  1  \"  )  ;", "request . addParameter (  \" percent \"  ,     \"  9  9  .  9  9  %  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertEquals (  1  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  0  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "ConversionServiceExposingInterceptor   interceptor    =     (  ( ConversionServiceExposingInterceptor )     ( chain . getInterceptors (  )  [  0  ]  )  )  ;", "interceptor . preHandle ( request ,    response ,    handlerMethod )  ;", "assertSame ( appContext . getBean ( ConversionService . class )  ,    request . getAttribute ( ConversionService . class . getName (  )  )  )  ;", "adapter . handle ( request ,    response ,    handlerMethod )  ;", "assertTrue ( handler . recordedValidationError )  ;", "assertEquals ( LocalDate . parse (  \"  2  0  0  9  -  1  0  -  3  1  \"  )  . toDate (  )  ,    handler . date )  ;", "assertEquals ( Double . valueOf (  0  .  9  9  9  9  )  ,    handler . percent )  ;", "CompositeUriComponentsContributor   uriComponentsContributor    =    this . appContext . getBean ( MvcUriComponentsBuilder . MVC _ URI _ COMPONENTS _ CONTRIBUTOR _ BEAN _ NAME ,    CompositeUriComponentsContributor . class )  ;", "assertNotNull ( uriComponentsContributor )  ;", "String   name    =     \" mvcHandlerMappingIntrospector \"  ;", "HandlerMappingIntrospector   introspector    =    this . appContext . getBean ( name ,    HandlerMappingIntrospector . class )  ;", "assertNotNull ( introspector )  ;", "assertEquals (  2  ,    introspector . getHandlerMappings (  )  . size (  )  )  ;", "assertSame ( mapping ,    introspector . getHandlerMappings (  )  . get (  0  )  )  ;", "assertEquals ( BeanNameUrlHandlerMapping . class ,    introspector . getHandlerMappings (  )  . get (  1  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultConfig"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - default - servlet . xml \"  )  ;", "HttpRequestHandlerAdapter   adapter    =    appContext . getBean ( HttpRequestHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "DefaultServletHttpRequestHandler   handler    =    appContext . getBean ( DefaultServletHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "SimpleUrlHandlerMapping   mapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertEquals ( LOWEST _ PRECEDENCE ,    mapping . getOrder (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / foo . css \"  )  ;", "request . setMethod (  \" GET \"  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof   DefaultServletHttpRequestHandler )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    adapter . handle ( request ,    response ,    chain . getHandler (  )  )  ;", "assertNull ( mv )  ;", "}", "METHOD_END"], "methodName": ["testDefaultServletHandler"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - default - servlet - optional - attrs . xml \"  )  ;", "HttpRequestHandlerAdapter   adapter    =    appContext . getBean ( HttpRequestHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "DefaultServletHttpRequestHandler   handler    =    appContext . getBean ( DefaultServletHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "SimpleUrlHandlerMapping   mapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertEquals ( LOWEST _ PRECEDENCE ,    mapping . getOrder (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / foo . css \"  )  ;", "request . setMethod (  \" GET \"  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof   DefaultServletHttpRequestHandler )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    adapter . handle ( request ,    response ,    chain . getHandler (  )  )  ;", "assertNull ( mv )  ;", "}", "METHOD_END"], "methodName": ["testDefaultServletHandlerWithOptionalAttributes"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - interceptors . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "mapping . setDefaultHandler ( handlerMethod )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . setRequestURI (  \"  / accounts /  1  2  3  4  5  \"  )  ;", "request . addParameter (  \" locale \"  ,     \" en \"  )  ;", "request . addParameter (  \" theme \"  ,     \" green \"  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  0  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   UserRoleAuthorizationInterceptor )  )  ;", "request . setRequestURI (  \"  / admin / users \"  )  ;", "chain    =    mapping . getHandler ( request )  ;", "assertEquals (  2  ,    chain . getInterceptors (  )  . length )  ;", "request . setRequestURI (  \"  / logged / accounts /  1  2  3  4  5  \"  )  ;", "chain    =    mapping . getHandler ( request )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "request . setRequestURI (  \"  / foo / logged \"  )  ;", "chain    =    mapping . getHandler ( request )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "}", "METHOD_END"], "methodName": ["testInterceptors"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - path - matching - mappings . xml \"  )  ;", "RequestMappingHandlerMapping   requestMapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( requestMapping )  ;", "assertEquals (  . TestPathHelper . class ,    requestMapping . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    requestMapping . getPathMatcher (  )  . getClass (  )  )  ;", "SimpleUrlHandlerMapping   viewController    =    appContext . getBean (  . VIEWCONTROLLER _ BEAN _ NAME ,    SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( viewController )  ;", "assertEquals (  . TestPathHelper . class ,    viewController . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    viewController . getPathMatcher (  )  . getClass (  )  )  ;", "for    ( SimpleUrlHandlerMapping   handlerMapping    :    appContext . getBeansOfType ( SimpleUrlHandlerMapping . class )  . values (  )  )     {", "assertNotNull ( handlerMapping )  ;", "assertEquals (  . TestPathHelper . class ,    handlerMapping . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    handlerMapping . getPathMatcher (  )  . getClass (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testPathMatchingHandlerMappings"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - resources . xml \"  )  ;", "HttpRequestHandlerAdapter   adapter    =    appContext . getBean ( HttpRequestHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "ContentNegotiationManager   manager    =    mapping . getContentNegotiationManager (  )  ;", "ResourceHttpRequestHandler   handler    =    appContext . getBean ( ResourceHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "assertSame ( manager ,    handler . getContentNegotiationManager (  )  )  ;", "SimpleUrlHandlerMapping   resourceMapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( resourceMapping )  ;", "assertEquals (  (  ( Ordered . LOWEST _ PRECEDENCE )     -     1  )  ,    resourceMapping . getOrder (  )  )  ;", "BeanNameUrlHandlerMapping   beanNameMapping    =    appContext . getBean ( BeanNameUrlHandlerMapping . class )  ;", "assertNotNull ( beanNameMapping )  ;", "assertEquals (  2  ,    beanNameMapping . getOrder (  )  )  ;", "ResourceUrlProvider   urlProvider    =    appContext . getBean ( ResourceUrlProvider . class )  ;", "assertNotNull ( urlProvider )  ;", "Map < String ,    MappedInterceptor >    beans    =    appContext . getBeansOfType ( MappedInterceptor . class )  ;", "List < Class <  ?  >  >    interceptors    =    beans . values (  )  . stream (  )  . map (  (    mappedInterceptor )     -  >    mappedInterceptor . getInterceptor (  )  . getClass (  )  )  . collect ( Collectors . toList (  )  )  ;", "assertThat ( interceptors ,    containsInAnyOrder ( ConversionServiceExposingInterceptor . class ,    ResourceUrlProviderExposingInterceptor . class )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / resources / foo . css \"  )  ;", "request . setMethod (  \" GET \"  )  ;", "HandlerExecutionChain   chain    =    resourceMapping . getHandler ( request )  ;", "assertNotNull ( chain )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof   ResourceHttpRequestHandler )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "for    ( HandlerInterceptor   interceptor    :    chain . getInterceptors (  )  )     {", "interceptor . preHandle ( request ,    response ,    chain . getHandler (  )  )  ;", "}", "ModelAndView   mv    =    adapter . handle ( request ,    response ,    chain . getHandler (  )  )  ;", "assertNull ( mv )  ;", "}", "METHOD_END"], "methodName": ["testResources"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - resources - optional - attrs . xml \"  )  ;", "SimpleUrlHandlerMapping   mapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertEquals (  5  ,    mapping . getOrder (  )  )  ;", "assertNotNull ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  ;", "ResourceHttpRequestHandler   handler    =    appContext . getBean (  (  ( String )     ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  )  ,    ResourceHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "assertEquals (  3  6  0  0  ,    handler . getCacheSeconds (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResourcesWithOptionalAttributes"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - resources - chain . xml \"  )  ;", "SimpleUrlHandlerMapping   mapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertNotNull ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  ;", "String   beanName    =     (  ( String )     ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  )  ;", "ResourceHttpRequestHandler   handler    =    appContext . getBean ( beanName ,    ResourceHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "assertNotNull ( handler . getUrlPathHelper (  )  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers ,    Matchers . hasSize (  4  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . instanceOf ( VersionResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  2  )  ,    Matchers . instanceOf ( WebJarsResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  3  )  ,    Matchers . instanceOf ( PathResourceResolver . class )  )  ;", "CachingResourceResolver   cachingResolver    =     (  ( CachingResourceResolver )     ( resolvers . get (  0  )  )  )  ;", "assertThat ( cachingResolver . getCache (  )  ,    Matchers . instanceOf ( ConcurrentMapCache . class )  )  ;", "assertEquals (  \" test - resource - cache \"  ,    cachingResolver . getCache (  )  . getName (  )  )  ;", "VersionResourceResolver   versionResolver    =     (  ( VersionResourceResolver )     ( resolvers . get (  1  )  )  )  ;", "assertThat ( versionResolver . getStrategyMap (  )  . get (  \"  /  *  *  /  *  . js \"  )  ,    Matchers . instanceOf ( FixedVersionStrategy . class )  )  ;", "assertThat ( versionResolver . getStrategyMap (  )  . get (  \"  /  *  *  \"  )  ,    Matchers . instanceOf ( ContentVersionStrategy . class )  )  ;", "PathResourceResolver   pathResolver    =     (  ( PathResourceResolver )     ( resolvers . get (  3  )  )  )  ;", "Map < Resource ,    Charset >    locationCharsets    =    pathResolver . getLocationCharsets (  )  ;", "assertEquals (  1  ,    locationCharsets . size (  )  )  ;", "assertEquals ( StandardCharsets . ISO _  8  8  5  9  _  1  ,    locationCharsets . values (  )  . iterator (  )  . next (  )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  3  )  )  ;", "assertThat ( transformers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  1  )  ,    Matchers . instanceOf ( CssLinkResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  2  )  ,    Matchers . instanceOf ( AppCacheManifestTransformer . class )  )  ;", "CachingResourceTransformer   cachingTransformer    =     (  ( CachingResourceTransformer )     ( transformers . get (  0  )  )  )  ;", "assertThat ( cachingTransformer . getCache (  )  ,    Matchers . instanceOf ( ConcurrentMapCache . class )  )  ;", "assertEquals (  \" test - resource - cache \"  ,    cachingTransformer . getCache (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResourcesWithResolversTransformers"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - resources - chain - no - auto . xml \"  )  ;", "SimpleUrlHandlerMapping   mapping    =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "assertNotNull ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  ;", "ResourceHttpRequestHandler   handler    =    appContext . getBean (  (  ( String )     ( mapping . getUrlMap (  )  . get (  \"  / resources /  *  *  \"  )  )  )  ,    ResourceHttpRequestHandler . class )  ;", "assertNotNull ( handler )  ;", "assertThat ( handler . getCacheControl (  )  . getHeaderValue (  )  ,    Matchers . equalTo ( CacheControl . maxAge (  1  ,    TimeUnit . HOURS )  . sMaxAge (  3  0  ,    TimeUnit . MINUTES )  . cachePublic (  )  . getHeaderValue (  )  )  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers ,    Matchers . hasSize (  3  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . instanceOf ( VersionResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . instanceOf ( GzipResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  2  )  ,    Matchers . instanceOf ( PathResourceResolver . class )  )  ;", "VersionResourceResolver   versionResolver    =     (  ( VersionResourceResolver )     ( resolvers . get (  0  )  )  )  ;", "assertThat ( versionResolver . getStrategyMap (  )  . get (  \"  /  *  *  /  *  . js \"  )  ,    Matchers . instanceOf ( FixedVersionStrategy . class )  )  ;", "assertThat ( versionResolver . getStrategyMap (  )  . get (  \"  /  *  *  \"  )  ,    Matchers . instanceOf ( ContentVersionStrategy . class )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  2  )  )  ;", "assertThat ( transformers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  1  )  ,    Matchers . instanceOf ( AppCacheManifestTransformer . class )  )  ;", "}", "METHOD_END"], "methodName": ["testResourcesWithResolversTransformersCustom"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - controllers . xml \"  )  ;", "RequestMappingHandlerMapping   mapping    =    appContext . getBean ( RequestMappingHandlerMapping . class )  ;", "assertNotNull ( mapping )  ;", "mapping . setDefaultHandler ( handlerMethod )  ;", "BeanNameUrlHandlerMapping   beanNameMapping    =    appContext . getBean ( BeanNameUrlHandlerMapping . class )  ;", "assertNotNull ( beanNameMapping )  ;", "assertEquals (  2  ,    beanNameMapping . getOrder (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" GET \"  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( request )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  0  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "SimpleUrlHandlerMapping   mapping 2     =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( mapping 2  )  ;", "SimpleControllerHandlerAdapter   adapter    =    appContext . getBean ( SimpleControllerHandlerAdapter . class )  ;", "assertNotNull ( adapter )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "ModelAndView   mv    =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertNull ( mv . getViewName (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / app / bar \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  / app \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "mv    =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertEquals (  \" baz \"  ,    mv . getViewName (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / app /  \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  / app \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "mv    =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertEquals (  \" root \"  ,    mv . getViewName (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / app / old \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  / app \"  )  ;", "request . setQueryString (  \" a = b \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "mv    =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertNotNull ( mv . getView (  )  )  ;", "assertEquals ( RedirectView . class ,    mv . getView (  )  . getClass (  )  )  ;", "RedirectView   redirectView    =     (  ( RedirectView )     ( mv . getView (  )  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "redirectView . render ( Collections . emptyMap (  )  ,    request ,    response )  ;", "assertEquals (  \"  / new ? a = b \"  ,    response . getRedirectedUrl (  )  )  ;", "assertEquals (  3  0  8  ,    response . getStatus (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bad \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "mv    =    adapter . handle ( request ,    response ,    chain . getHandler (  )  )  ;", "assertNull ( mv )  ;", "assertEquals (  4  0  4  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewControllers"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - controllers - minimal . xml \"  )  ;", "SimpleUrlHandlerMapping   hm    =    this . appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "assertNotNull ( hm )  ;", "ParameterizableViewController   viewController    =     (  ( ParameterizableViewController )     ( hm . getUrlMap (  )  . get (  \"  / path \"  )  )  )  ;", "assertNotNull ( viewController )  ;", "assertEquals (  \" home \"  ,    viewController . getViewName (  )  )  ;", "ParameterizableViewController   redirectViewController    =     (  ( ParameterizableViewController )     ( hm . getUrlMap (  )  . get (  \"  / old \"  )  )  )  ;", "assertNotNull ( redirectViewController )  ;", "assertThat ( redirectViewController . getView (  )  ,    Matchers . instanceOf ( RedirectView . class )  )  ;", "ParameterizableViewController   statusViewController    =     (  ( ParameterizableViewController )     ( hm . getUrlMap (  )  . get (  \"  / bad \"  )  )  )  ;", "assertNotNull ( statusViewController )  ;", "assertEquals (  4  0  4  ,    statusViewController . getStatusCode (  )  . value (  )  )  ;", "BeanNameUrlHandlerMapping   beanNameMapping    =    this . appContext . getBean ( BeanNameUrlHandlerMapping . class )  ;", "assertNotNull ( beanNameMapping )  ;", "assertEquals (  2  ,    beanNameMapping . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewControllersDefaultConfig"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - controllers . xml \"  )  ;", "SimpleUrlHandlerMapping   mapping 2     =    appContext . getBean ( SimpleUrlHandlerMapping . class )  ;", "SimpleControllerHandlerAdapter   adapter    =    appContext . getBean ( SimpleControllerHandlerAdapter . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" GET \"  )  ;", "request . setRequestURI (  \"  / myapp / app / bar \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  / app /  \"  )  ;", "request . setAttribute (  \" com . ibm . websphereuri _ non _ decoded \"  ,     \"  / myapp / app / bar \"  )  ;", "HandlerExecutionChain   chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "ModelAndView   mv 2     =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertEquals (  \" baz \"  ,    mv 2  . getViewName (  )  )  ;", "request . setRequestURI (  \"  / myapp / app /  \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  / app /  \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "ModelAndView   mv 3     =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertEquals (  \" root \"  ,    mv 3  . getViewName (  )  )  ;", "request . setRequestURI (  \"  / myapp /  \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "request . setServletPath (  \"  /  \"  )  ;", "chain    =    mapping 2  . getHandler ( request )  ;", "assertEquals (  4  ,    chain . getInterceptors (  )  . length )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  1  ]  )    instanceof   ConversionServiceExposingInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  2  ]  )    instanceof   LocaleChangeInterceptor )  )  ;", "assertTrue (  (  ( chain . getInterceptors (  )  [  3  ]  )    instanceof   ThemeChangeInterceptor )  )  ;", "mv 3     =    adapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . getHandler (  )  )  ;", "assertEquals (  \" root \"  ,    mv 3  . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewControllersOnWebSphere"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - resolution . xml \"  )  ;", "ViewResolverComposite   compositeResolver    =    this . appContext . getBean ( ViewResolverComposite . class )  ;", "assertNotNull ( compositeResolver )  ;", "assertEquals (  (  \" Actual :     \"     +     ( compositeResolver . getViewResolvers (  )  )  )  ,     8  ,    compositeResolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( LOWEST _ PRECEDENCE ,    compositeResolver . getOrder (  )  )  ;", "List < ViewResolver >    resolvers    =    compositeResolver . getViewResolvers (  )  ;", "assertEquals ( BeanNameViewResolver . class ,    resolvers . get (  0  )  . getClass (  )  )  ;", "ViewResolver   resolver    =    resolvers . get (  1  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    resolver . getClass (  )  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( resolver )  ;", "assertEquals ( InternalResourceView . class ,    accessor . getPropertyValue (  \" viewClass \"  )  )  ;", "assertEquals ( TilesViewResolver . class ,    resolvers . get (  2  )  . getClass (  )  )  ;", "resolver    =    resolvers . get (  3  )  ;", "assertThat ( resolver ,    instanceOf ( FreeMarkerViewResolver . class )  )  ;", "accessor    =    new   DirectFieldAccessor ( resolver )  ;", "assertEquals (  \" freemarker -  \"  ,    accessor . getPropertyValue (  \" prefix \"  )  )  ;", "assertEquals (  \"  . freemarker \"  ,    accessor . getPropertyValue (  \" suffix \"  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" my *  \"  ,     \"  * Report \"     }  ,     (  ( String [  ]  )     ( accessor . getPropertyValue (  \" viewNames \"  )  )  )  )  ;", "assertEquals (  1  0  2  4  ,    accessor . getPropertyValue (  \" cacheLimit \"  )  )  ;", "resolver    =    resolvers . get (  4  )  ;", "assertThat ( resolver ,    instanceOf ( GroovyMarkupViewResolver . class )  )  ;", "accessor    =    new   DirectFieldAccessor ( resolver )  ;", "assertEquals (  \"  \"  ,    accessor . getPropertyValue (  \" prefix \"  )  )  ;", "assertEquals (  \"  . tpl \"  ,    accessor . getPropertyValue (  \" suffix \"  )  )  ;", "assertEquals (  1  0  2  4  ,    accessor . getPropertyValue (  \" cacheLimit \"  )  )  ;", "resolver    =    resolvers . get (  5  )  ;", "assertThat ( resolver ,    instanceOf ( ScriptTemplateViewResolver . class )  )  ;", "accessor    =    new   DirectFieldAccessor ( resolver )  ;", "assertEquals (  \"  \"  ,    accessor . getPropertyValue (  \" prefix \"  )  )  ;", "assertEquals (  \"  \"  ,    accessor . getPropertyValue (  \" suffix \"  )  )  ;", "assertEquals (  1  0  2  4  ,    accessor . getPropertyValue (  \" cacheLimit \"  )  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    resolvers . get (  6  )  . getClass (  )  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    resolvers . get (  7  )  . getClass (  )  )  ;", "TilesConfigurer   tilesConfigurer    =    appContext . getBean ( TilesConfigurer . class )  ;", "assertNotNull ( tilesConfigurer )  ;", "String [  ]    definitions    =    new   String [  ]  {     \"  / org /  / web / servlet / resource / tiles / tiles 1  . xml \"  ,     \"  / org /  / web / servlet / resource / tiles / tiles 2  . xml \"     }  ;", "accessor    =    new   DirectFieldAccessor ( tilesConfigurer )  ;", "assertArrayEquals ( definitions ,     (  ( String [  ]  )     ( accessor . getPropertyValue (  \" definitions \"  )  )  )  )  ;", "assertTrue (  (  ( boolean )     ( accessor . getPropertyValue (  \" checkRefresh \"  )  )  )  )  ;", "assertEquals ( UnresolvingLocaleDefinitionsFactory . class ,    accessor . getPropertyValue (  \" definitionsFactoryClass \"  )  )  ;", "assertEquals ( SpringBeanPreparerFactory . class ,    accessor . getPropertyValue (  \" preparerFactoryClass \"  )  )  ;", "FreeMarkerConfigurer   freeMarkerConfigurer    =    appContext . getBean ( FreeMarkerConfigurer . class )  ;", "assertNotNull ( freeMarkerConfigurer )  ;", "accessor    =    new   DirectFieldAccessor ( freeMarkerConfigurer )  ;", "assertArrayEquals ( new   String [  ]  {     \"  /  \"  ,     \"  / test \"     }  ,     (  ( String [  ]  )     ( accessor . getPropertyValue (  \" templateLoaderPaths \"  )  )  )  )  ;", "GroovyMarkupConfigurer   groovyMarkupConfigurer    =    appContext . getBean ( GroovyMarkupConfigurer . class )  ;", "assertNotNull ( groovyMarkupConfigurer )  ;", "assertEquals (  \"  / test \"  ,    groovyMarkupConfigurer . getResourceLoaderPath (  )  )  ;", "assertTrue ( groovyMarkupConfigurer . isAutoIndent (  )  )  ;", "assertFalse ( groovyMarkupConfigurer . isCacheTemplates (  )  )  ;", "ScriptTemplateConfigurer   scriptTemplateConfigurer    =    appContext . getBean ( ScriptTemplateConfigurer . class )  ;", "assertNotNull ( scriptTemplateConfigurer )  ;", "assertEquals (  \" render \"  ,    scriptTemplateConfigurer . getRenderFunction (  )  )  ;", "assertEquals ( TEXT _ PLAIN _ VALUE ,    scriptTemplateConfigurer . getContentType (  )  )  ;", "assertEquals ( StandardCharsets . ISO _  8  8  5  9  _  1  ,    scriptTemplateConfigurer . getCharset (  )  )  ;", "assertEquals (  \" classpath :  \"  ,    scriptTemplateConfigurer . getResourceLoaderPath (  )  )  ;", "assertFalse ( scriptTemplateConfigurer . isSharedEngine (  )  )  ;", "String [  ]    scripts    =    new   String [  ]  {     \" org /  / web / servlet / view / script / nashorn / render . js \"     }  ;", "accessor    =    new   DirectFieldAccessor ( scriptTemplateConfigurer )  ;", "assertArrayEquals ( scripts ,     (  ( String [  ]  )     ( accessor . getPropertyValue (  \" scripts \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewResolution"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - resolution - content - negotiation . xml \"  )  ;", "ViewResolverComposite   compositeResolver    =    this . appContext . getBean ( ViewResolverComposite . class )  ;", "assertNotNull ( compositeResolver )  ;", "assertEquals (  1  ,    compositeResolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( HIGHEST _ PRECEDENCE ,    compositeResolver . getOrder (  )  )  ;", "List < ViewResolver >    resolvers    =    compositeResolver . getViewResolvers (  )  ;", "assertEquals ( ContentNegotiatingViewResolver . class ,    resolvers . get (  0  )  . getClass (  )  )  ;", "ContentNegotiatingViewResolver   cnvr    =     (  ( ContentNegotiatingViewResolver )     ( resolvers . get (  0  )  )  )  ;", "assertEquals (  6  ,    cnvr . getViewResolvers (  )  . size (  )  )  ;", "assertEquals (  1  ,    cnvr . getDefaultViews (  )  . size (  )  )  ;", "assertTrue ( cnvr . isUseNotAcceptableStatusCode (  )  )  ;", "String   beanName    =     \" contentNegotiationManager \"  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( cnvr )  ;", "ContentNegotiationManager   manager    =     (  ( ContentNegotiationManager )     ( accessor . getPropertyValue ( beanName )  )  )  ;", "assertNotNull ( manager )  ;", "assertSame ( manager ,    this . appContext . getBean ( ContentNegotiationManager . class )  )  ;", "assertSame ( manager ,    this . appContext . getBean (  \" mvcContentNegotiationManager \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewResolutionWithContentNegotiation"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "loadBeanDefinitions (  \" mvc - config - view - resolution - custom - order . xml \"  )  ;", "ViewResolverComposite   compositeResolver    =    this . appContext . getBean ( ViewResolverComposite . class )  ;", "assertNotNull ( compositeResolver )  ;", "assertEquals (  (  \" Actual :     \"     +     ( compositeResolver . getViewResolvers (  )  )  )  ,     1  ,    compositeResolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals (  1  2  3  ,    compositeResolver . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViewResolutionWithOrderSet"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    AnnotationDrivenBeanDefinitionParser . HANDLER _ MAPPING _ BEAN _ NAME ;", "if    ( context . getRegistry (  )  . containsBeanDefinition ( name )  )     {", "BeanDefinition   handlerMappingBeanDef    =    context . getRegistry (  )  . getBeanDefinition ( name )  ;", "return   handlerMappingBeanDef . getPropertyValues (  )  . get (  \" contentNegotiationManager \"  )  ;", "}", "name    =    AnnotationDrivenBeanDefinitionParser . CONTENT _ NEGOTIATION _ MANAGER _ BEAN _ NAME ;", "if    ( context . getRegistry (  )  . containsBeanDefinition ( name )  )     {", "return   new   RuntimeBeanReference ( name )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . BEAN _ NAME _ URL _ HANDLER _ MAPPING _ BEAN _ NAME )  )  )     {", "RootBeanDefinition   mappingDef    =    new   RootBeanDefinition ( BeanNameUrlHandlerMapping . class )  ;", "mappingDef . setSource ( source )  ;", "mappingDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "mappingDef . getPropertyValues (  )  . add (  \" order \"  ,     2  )  ;", "RuntimeBeanReference   corsRef    =    MvcNamespaceUtils . registerCorsConfigurations ( null ,    context ,    source )  ;", "mappingDef . getPropertyValues (  )  . add (  \" corsConfigurations \"  ,    corsRef )  ;", "context . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . BEAN _ NAME _ URL _ HANDLER _ MAPPING _ BEAN _ NAME ,    mappingDef )  ;", "context . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( mappingDef ,    MvcNamespaceUtils . BEAN _ NAME _ URL _ HANDLER _ MAPPING _ BEAN _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerBeanNameUrlHandlerMapping"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . CORS _ CONFIGURATION _ BEAN _ NAME )  )  )     {", "RootBeanDefinition   corsDef    =    new   RootBeanDefinition ( LinkedHashMap . class )  ;", "corsDef . setSource ( source )  ;", "corsDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "if    ( corsConfigurations    !  =    null )     {", "corsDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    corsConfigurations )  ;", "}", "context . getReaderContext (  )  . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . CORS _ CONFIGURATION _ BEAN _ NAME ,    corsDef )  ;", "context . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( corsDef ,    MvcNamespaceUtils . CORS _ CONFIGURATION _ BEAN _ NAME )  )  ;", "} else", "if    ( corsConfigurations    !  =    null )     {", "beans . factory . config . BeanDefinition   corsDef    =    context . getRegistry (  )  . getBeanDefinition ( MvcNamespaceUtils . CORS _ CONFIGURATION _ BEAN _ NAME )  ;", "corsDef . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    corsConfigurations )  ;", "}", "return   new   RuntimeBeanReference ( MvcNamespaceUtils . CORS _ CONFIGURATION _ BEAN _ NAME )  ;", "}", "METHOD_END"], "methodName": ["registerCorsConfigurations"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "MvcNamespaceUtils . registerBeanNameUrlHandlerMapping ( parserContext ,    source )  ;", "MvcNamespaceUtils . registerHttpRequestHandlerAdapter ( parserContext ,    source )  ;", "MvcNamespaceUtils . registerSimpleControllerHandlerAdapter ( parserContext ,    source )  ;", "MvcNamespaceUtils . registerHandlerMappingIntrospector ( parserContext ,    source )  ;", "}", "METHOD_END"], "methodName": ["registerDefaultComponents"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( parserContext . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . HANDLER _ MAPPING _ INTROSPECTOR _ BEAN _ NAME )  )  )     {", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition ( HandlerMappingIntrospector . class )  ;", "beanDef . setSource ( source )  ;", "beanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "beanDef . setLazyInit ( true )  ;", "parserContext . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . HANDLER _ MAPPING _ INTROSPECTOR _ BEAN _ NAME ,    beanDef )  ;", "parserContext . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( beanDef ,    MvcNamespaceUtils . HANDLER _ MAPPING _ INTROSPECTOR _ BEAN _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerHandlerMappingIntrospector"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . HTTP _ REQUEST _ HANDLER _ ADAPTER _ BEAN _ NAME )  )  )     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition ( HttpRequestHandlerAdapter . class )  ;", "adapterDef . setSource ( source )  ;", "adapterDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "context . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . HTTP _ REQUEST _ HANDLER _ ADAPTER _ BEAN _ NAME ,    adapterDef )  ;", "context . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( adapterDef ,    MvcNamespaceUtils . HTTP _ REQUEST _ HANDLER _ ADAPTER _ BEAN _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerHttpRequestHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( pathMatcherRef    !  =    null )     {", "if    ( parserContext . getRegistry (  )  . isAlias ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  )     {", "parserContext . getRegistry (  )  . removeAlias ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  ;", "}", "parserContext . getRegistry (  )  . registerAlias ( pathMatcherRef . getBeanName (  )  ,    MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  ;", "} else", "if    (  (  !  ( parserContext . getRegistry (  )  . isAlias ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  )  )     &  &     (  !  ( parserContext . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  )  )  )     {", "beans . factory . support . RootBeanDefinition   pathMatcherDef    =    new   beans . factory . support . RootBeanDefinition ( util . AntPathMatcher . class )  ;", "pathMatcherDef . setSource ( source )  ;", "pathMatcherDef . setRole ( BeanDefinition . ROLE _ INFRASTRUCTURE )  ;", "parserContext . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME ,    pathMatcherDef )  ;", "parserContext . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( pathMatcherDef ,    MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  )  ;", "}", "return   new   RuntimeBeanReference ( MvcNamespaceUtils . PATH _ MATCHER _ BEAN _ NAME )  ;", "}", "METHOD_END"], "methodName": ["registerPathMatcher"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . SIMPLE _ CONTROLLER _ HANDLER _ ADAPTER _ BEAN _ NAME )  )  )     {", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition ( SimpleControllerHandlerAdapter . class )  ;", "beanDef . setSource ( source )  ;", "beanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "context . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . SIMPLE _ CONTROLLER _ HANDLER _ ADAPTER _ BEAN _ NAME ,    beanDef )  ;", "context . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( beanDef ,    MvcNamespaceUtils . SIMPLE _ CONTROLLER _ HANDLER _ ADAPTER _ BEAN _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerSimpleControllerHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( urlPathHelperRef    !  =    null )     {", "if    ( parserContext . getRegistry (  )  . isAlias ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  )     {", "parserContext . getRegistry (  )  . removeAlias ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  ;", "}", "parserContext . getRegistry (  )  . registerAlias ( urlPathHelperRef . getBeanName (  )  ,    MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  ;", "} else", "if    (  (  !  ( parserContext . getRegistry (  )  . isAlias ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  )  )     &  &     (  !  ( parserContext . getRegistry (  )  . containsBeanDefinition ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  )  )  )     {", "RootBeanDefinition   urlPathHelperDef    =    new   RootBeanDefinition ( util . UrlPathHelper . class )  ;", "urlPathHelperDef . setSource ( source )  ;", "urlPathHelperDef . setRole ( BeanDefinition . ROLE _ INFRASTRUCTURE )  ;", "parserContext . getRegistry (  )  . registerBeanDefinition ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME ,    urlPathHelperDef )  ;", "parserContext . registerComponent ( new   BeanComponentDefinition ( urlPathHelperDef ,    MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  )  ;", "}", "return   new   RuntimeBeanReference ( MvcNamespaceUtils . URL _ PATH _ HELPER _ BEAN _ NAME )  ;", "}", "METHOD_END"], "methodName": ["registerUrlPathHelper"], "fileName": "org.springframework.web.servlet.config.MvcNamespaceUtils"}, {"methodBody": ["METHOD_START", "{", "CacheControl   cacheControl    =    CacheControl . empty (  )  ;", "if    (  \" true \"  . equals ( element . getAttribute (  \" no - cache \"  )  )  )     {", "cacheControl    =    CacheControl . noCache (  )  ;", "} else", "if    (  \" true \"  . equals ( element . getAttribute (  \" no - store \"  )  )  )     {", "cacheControl    =    CacheControl . noStore (  )  ;", "} else", "if    ( element . hasAttribute (  \" max - age \"  )  )     {", "cacheControl    =    CacheControl . maxAge ( Long . pLong ( element . getAttribute (  \" max - age \"  )  )  ,    TimeUnit . SECONDS )  ;", "}", "if    (  \" true \"  . equals ( element . getAttribute (  \" must - revalidate \"  )  )  )     {", "cacheControl    =    cacheControl . mustRevalidate (  )  ;", "}", "if    (  \" true \"  . equals ( element . getAttribute (  \" no - transform \"  )  )  )     {", "cacheControl    =    cacheControl . noTransform (  )  ;", "}", "if    (  \" true \"  . equals ( element . getAttribute (  \" cache - public \"  )  )  )     {", "cacheControl    =    cacheControl . cachePublic (  )  ;", "}", "if    (  \" true \"  . equals ( element . getAttribute (  \" cache - private \"  )  )  )     {", "cacheControl    =    cacheControl . cachePrivate (  )  ;", "}", "if    (  \" true \"  . equals ( element . getAttribute (  \" proxy - revalidate \"  )  )  )     {", "cacheControl    =    cacheControl . proxyRevalidate (  )  ;", "}", "if    ( element . hasAttribute (  \" s - maxage \"  )  )     {", "cacheControl    =    cacheControl . sMaxAge ( Long . pLong ( element . getAttribute (  \" s - maxage \"  )  )  ,    TimeUnit . SECONDS )  ;", "}", "if    ( element . hasAttribute (  \" stale - while - revalidate \"  )  )     {", "cacheControl    =    cacheControl . staleWhileRevalidate ( Long . pLong ( element . getAttribute (  \" stale - while - revalidate \"  )  )  ,    TimeUnit . SECONDS )  ;", "}", "if    ( element . hasAttribute (  \" stale - if - error \"  )  )     {", "cacheControl    =    cacheControl . staleIfError ( Long . pLong ( element . getAttribute (  \" stale - if - error \"  )  )  ,    TimeUnit . SECONDS )  ;", "}", "return   cacheControl ;", "}", "METHOD_END"], "methodName": ["parseCacheControl"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "String   resourceCache    =    element . getAttribute (  \" resource - cache \"  )  ;", "if    (  \" true \"  . equals ( resourceCache )  )     {", "ConstructorArgumentValues   cargs    =    new   ConstructorArgumentValues (  )  ;", "RootBeanDefinition   cachingResolverDef    =    new   RootBeanDefinition ( CachingResourceResolver . class )  ;", "cachingResolverDef . setSource ( source )  ;", "cachingResolverDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "cachingResolverDef . setConstructorArgumentValues ( cargs )  ;", "RootBeanDefinition   cachingTransformerDef    =    new   RootBeanDefinition ( CachingResourceTransformer . class )  ;", "cachingTransformerDef . setSource ( source )  ;", "cachingTransformerDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "cachingTransformerDef . setConstructorArgumentValues ( cargs )  ;", "String   cacheManagerName    =    element . getAttribute (  \" cache - manager \"  )  ;", "String   cacheName    =    element . getAttribute (  \" cache - name \"  )  ;", "if    (  ( StringUtils . hasText ( cacheManagerName )  )     &  &     ( StringUtils . hasText ( cacheName )  )  )     {", "RuntimeBeanReference   cacheManagerRef    =    new   RuntimeBeanReference ( cacheManagerName )  ;", "cargs . addIndexedArgumentValue (  0  ,    cacheManagerRef )  ;", "cargs . addIndexedArgumentValue (  1  ,    cacheName )  ;", "} else    {", "ConstructorArgumentValues   cacheCavs    =    new   ConstructorArgumentValues (  )  ;", "cacheCavs . addIndexedArgumentValue (  0  ,     . RESOURCE _ CHAIN _ CACHE )  ;", "RootBeanDefinition   cacheDef    =    new   RootBeanDefinition ( ConcurrentMapCache . class )  ;", "cacheDef . setSource ( source )  ;", "cacheDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "cacheDef . setConstructorArgumentValues ( cacheCavs )  ;", "cargs . addIndexedArgumentValue (  0  ,    cacheDef )  ;", "}", "resourceResolvers . add ( cachingResolverDef )  ;", "resourceTransformers . add ( cachingTransformerDef )  ;", "}", "}", "METHOD_END"], "methodName": ["parseResourceCache"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "String   autoRegistration    =    element . getAttribute (  \" auto - registration \"  )  ;", "boolean   isAutoRegistration    =     !  (  ( StringUtils . hasText ( autoRegistration )  )     &  &     (  \" false \"  . equals ( autoRegistration )  )  )  ;", "ManagedList <  ?    super   Object >    resourceResolvers    =    new   ManagedList (  )  ;", "resourceResolvers . setSource ( source )  ;", "ManagedList <  ?    super   Object >    resourceTransformers    =    new   ManagedList (  )  ;", "resourceTransformers . setSource ( source )  ;", "parseCache ( resourceResolvers ,    resourceTransformers ,    element ,    source )  ;", "parseResolversTransformers ( isAutoRegistration ,    resourceResolvers ,    resourceTransformers ,    context ,    element ,    source )  ;", "if    (  !  ( resourceResolvers . isEmpty (  )  )  )     {", "resourceHandlerDef . getPropertyValues (  )  . add (  \" resourceResolvers \"  ,    resourceResolvers )  ;", "}", "if    (  !  ( resourceTransformers . isEmpty (  )  )  )     {", "resourceHandlerDef . getPropertyValues (  )  . add (  \" resourceTransformers \"  ,    resourceTransformers )  ;", "}", "}", "METHOD_END"], "methodName": ["parseResourceChain"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Element   resolversElement    =    DomUtils . getChildElementByTagName ( element ,     \" resolvers \"  )  ;", "if    ( resolversElement    !  =    null )     {", "for    ( Element   beanElement    :    DomUtils . getChildElements ( resolversElement )  )     {", "if    (  . VERSION _ RESOLVER _ ELEMENT . equals ( beanElement . getLocalName (  )  )  )     {", "RootBeanDefinition   versionResolverDef    =    parseVersionResolver ( context ,    beanElement ,    source )  ;", "versionResolverDef . setSource ( source )  ;", "resourceResolvers . add ( versionResolverDef )  ;", "if    ( isAutoRegistration )     {", "RootBeanDefinition   cssLinkTransformerDef    =    new   RootBeanDefinition ( CssLinkResourceTransformer . class )  ;", "cssLinkTransformerDef . setSource ( source )  ;", "cssLinkTransformerDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "resourceTransformers . add ( cssLinkTransformerDef )  ;", "}", "} else    {", "Object   object    =    context . getDelegate (  )  . parsePropertySubElement ( beanElement ,    null )  ;", "resourceResolvers . add ( object )  ;", "}", "}", "}", "if    ( isAutoRegistration )     {", "if    (  . isWebJarsAssetLocatorPresent )     {", "RootBeanDefinition   webJarsResolverDef    =    new   RootBeanDefinition ( WebJarsResourceResolver . class )  ;", "webJarsResolverDef . setSource ( source )  ;", "webJarsResolverDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "resourceResolvers . add ( webJarsResolverDef )  ;", "}", "RootBeanDefinition   pathResolverDef    =    new   RootBeanDefinition ( PathResourceResolver . class )  ;", "pathResolverDef . setSource ( source )  ;", "pathResolverDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "resourceResolvers . add ( pathResolverDef )  ;", "}", "Element   transformersElement    =    DomUtils . getChildElementByTagName ( element ,     \" transformers \"  )  ;", "if    ( transformersElement    !  =    null )     {", "for    ( Element   beanElement    :    DomUtils . getChildElementsByTagName ( transformersElement ,     \" bean \"  ,     \" ref \"  )  )     {", "Object   object    =    context . getDelegate (  )  . parsePropertySubElement ( beanElement ,    null )  ;", "resourceTransformers . add ( object )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseResourceResolversTransformers"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "ManagedMap < String ,     ?    super   Object >    strategyMap    =    new   ManagedMap (  )  ;", "strategyMap . setSource ( source )  ;", "RootBeanDefinition   versionResolverDef    =    new   RootBeanDefinition ( VersionResourceResolver . class )  ;", "versionResolverDef . setSource ( source )  ;", "versionResolverDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "versionResolverDef . getPropertyValues (  )  . addPropertyValue (  \" strategyMap \"  ,    strategyMap )  ;", "for    ( Element   beanElement    :    DomUtils . getChildElements ( element )  )     {", "String [  ]    patterns    =    StringUtils . commaDelimitedListToStringArray ( beanElement . getAttribute (  \" patterns \"  )  )  ;", "Object   strategy    =    null ;", "if    ( ResourcesBeanDefinitionParser . FIXED _ VERSION _ STRATEGY _ ELEMENT . equals ( beanElement . getLocalName (  )  )  )     {", "ConstructorArgumentValues   cargs    =    new   ConstructorArgumentValues (  )  ;", "cargs . addIndexedArgumentValue (  0  ,    beanElement . getAttribute (  \" version \"  )  )  ;", "RootBeanDefinition   strategyDef    =    new   RootBeanDefinition ( FixedVersionStrategy . class )  ;", "strategyDef . setSource ( source )  ;", "strategyDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "strategyDef . setConstructorArgumentValues ( cargs )  ;", "strategy    =    strategyDef ;", "} else", "if    ( ResourcesBeanDefinitionParser . CONTENT _ VERSION _ STRATEGY _ ELEMENT . equals ( beanElement . getLocalName (  )  )  )     {", "RootBeanDefinition   strategyDef    =    new   RootBeanDefinition ( resource . ContentVersionStrategy . class )  ;", "strategyDef . setSource ( source )  ;", "strategyDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "strategy    =    strategyDef ;", "} else", "if    ( ResourcesBeanDefinitionParser . VERSION _ STRATEGY _ ELEMENT . equals ( beanElement . getLocalName (  )  )  )     {", "Element   childElement    =    DomUtils . getChildElementsByTagName ( beanElement ,     \" bean \"  ,     \" ref \"  )  . get (  0  )  ;", "strategy    =    context . getDelegate (  )  . parsePropertySubElement ( childElement ,    null )  ;", "}", "for    ( String   pattern    :    patterns )     {", "strategyMap . put ( pattern ,    strategy )  ;", "}", "}", "return   versionResolverDef ;", "}", "METHOD_END"], "methodName": ["parseVersionResolver"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "String   locationAttr    =    element . getAttribute (  \" location \"  )  ;", "if    (  !  ( StringUtils . hasText ( locationAttr )  )  )     {", "context . getReaderContext (  )  . error (  \" The    ' location '    attribute   is   required .  \"  ,    context . extractSource ( element )  )  ;", "return   null ;", "}", "RootBeanDefinition   resourceHandlerDef    =    new   RootBeanDefinition ( ResourceHttpRequestHandler . class )  ;", "resourceHandlerDef . setSource ( source )  ;", "resourceHandlerDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "MutablePropertyValues   values    =    resourceHandlerDef . getPropertyValues (  )  ;", "values . add (  \" urlPathHelper \"  ,    pathHelperRef )  ;", "values . add (  \" locationValues \"  ,    StringUtils . commaDelimitedListToStringArray ( locationAttr )  )  ;", "String   cacheSeconds    =    element . getAttribute (  \" cache - period \"  )  ;", "if    ( StringUtils . hasText ( cacheSeconds )  )     {", "values . add (  \" cacheSeconds \"  ,    cacheSeconds )  ;", "}", "Element   cacheControlElement    =    DomUtils . getChildElementByTagName ( element ,     \" cache - control \"  )  ;", "if    ( cacheControlElement    !  =    null )     {", "CacheControl   cacheControl    =    parseCacheControl ( cacheControlElement )  ;", "values . add (  \" cacheControl \"  ,    cacheControl )  ;", "}", "Element   resourceChainElement    =    DomUtils . getChildElementByTagName ( element ,     \" resource - chain \"  )  ;", "if    ( resourceChainElement    !  =    null )     {", "parseResourceChain ( resourceHandlerDef ,    context ,    resourceChainElement ,    source )  ;", "}", "Object   manager    =    MvcNamespaceUtils . getContentNegotiationManager ( context )  ;", "if    ( manager    !  =    null )     {", "values . add (  \" contentNegotiationManager \"  ,    manager )  ;", "}", "String   beanName    =    context . getReaderContext (  )  . generateBeanName ( resourceHandlerDef )  ;", "context . getRegistry (  )  . registerBeanDefinition ( beanName ,    resourceHandlerDef )  ;", "context . registerComponent ( new   beans . factory . parsing . BeanComponentDefinition ( resourceHandlerDef ,    beanName )  )  ;", "return   beanName ;", "}", "METHOD_END"], "methodName": ["registerResourceHandler"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . getRegistry (  )  . containsBeanDefinition ( ResourcesBeanDefinitionParser . RESOURCE _ URL _ PROVIDER )  )  )     {", "RootBeanDefinition   urlProvider    =    new   RootBeanDefinition ( ResourceUrlProvider . class )  ;", "urlProvider . setSource ( source )  ;", "urlProvider . setRole ( ROLE _ INFRASTRUCTURE )  ;", "context . getRegistry (  )  . registerBeanDefinition ( ResourcesBeanDefinitionParser . RESOURCE _ URL _ PROVIDER ,    urlProvider )  ;", "context . registerComponent ( new   BeanComponentDefinition ( urlProvider ,    ResourcesBeanDefinitionParser . RESOURCE _ URL _ PROVIDER )  )  ;", "RootBeanDefinition   interceptor    =    new   RootBeanDefinition ( ResourceUrlProviderExposingInterceptor . class )  ;", "interceptor . setSource ( source )  ;", "interceptor . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    urlProvider )  ;", "RootBeanDefinition   mappedInterceptor    =    new   RootBeanDefinition ( MappedInterceptor . class )  ;", "mappedInterceptor . setSource ( source )  ;", "mappedInterceptor . setRole ( ROLE _ INFRASTRUCTURE )  ;", "mappedInterceptor . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,     (  ( Object )     ( null )  )  )  ;", "mappedInterceptor . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  1  ,    interceptor )  ;", "String   mappedInterceptorName    =    context . getReaderContext (  )  . registerWithGeneratedName ( mappedInterceptor )  ;", "context . registerComponent ( new   BeanComponentDefinition ( mappedInterceptor ,    mappedInterceptorName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerUrlProvider"], "fileName": "org.springframework.web.servlet.config.ResourcesBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "RootBeanDefinition   redirectView    =    new   RootBeanDefinition ( RedirectView . class )  ;", "redirectView . setSource ( source )  ;", "redirectView . getConstructorArgumentValues (  )  . addIndexedArgumentValue (  0  ,    element . getAttribute (  \" redirect - url \"  )  )  ;", "if    ( status    !  =    null )     {", "redirectView . getPropertyValues (  )  . add (  \" statusCode \"  ,    status )  ;", "}", "if    ( element . hasAttribute (  \" context - relative \"  )  )     {", "redirectView . getPropertyValues (  )  . add (  \" contextRelative \"  ,    element . getAttribute (  \" context - relative \"  )  )  ;", "} else    {", "redirectView . getPropertyValues (  )  . add (  \" contextRelative \"  ,    true )  ;", "}", "if    ( element . hasAttribute (  \" keep - query - params \"  )  )     {", "redirectView . getPropertyValues (  )  . add (  \" propagateQueryParams \"  ,    element . getAttribute (  \" keep - query - params \"  )  )  ;", "}", "return   redirectView ;", "}", "METHOD_END"], "methodName": ["getRedirectView"], "fileName": "org.springframework.web.servlet.config.ViewControllerBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    ( context . getRegistry (  )  . containsBeanDefinition ( ViewControllerBeanDefinitionParser . HANDLER _ MAPPING _ BEAN _ NAME )  )     {", "return   context . getRegistry (  )  . getBeanDefinition ( ViewControllerBeanDefinitionParser . HANDLER _ MAPPING _ BEAN _ NAME )  ;", "}", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition ( SimpleUrlHandlerMapping . class )  ;", "beanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "context . getRegistry (  )  . registerBeanDefinition ( ViewControllerBeanDefinitionParser . HANDLER _ MAPPING _ BEAN _ NAME ,    beanDef )  ;", "context . registerComponent ( new   BeanComponentDefinition ( beanDef ,    ViewControllerBeanDefinitionParser . HANDLER _ MAPPING _ BEAN _ NAME )  )  ;", "beanDef . setSource ( source )  ;", "beanDef . getPropertyValues (  )  . add (  \" order \"  ,     \"  1  \"  )  ;", "beanDef . getPropertyValues (  )  . add (  \" pathMatcher \"  ,    MvcNamespaceUtils . registerPathMatcher ( null ,    context ,    source )  )  ;", "beanDef . getPropertyValues (  )  . add (  \" urlPathHelper \"  ,    MvcNamespaceUtils . registerUrlPathHelper ( null ,    context ,    source )  )  ;", "RuntimeBeanReference   corsConfigurationsRef    =    MvcNamespaceUtils . registerCorsConfigurations ( null ,    context ,    source )  ;", "beanDef . getPropertyValues (  )  . add (  \" corsConfigurations \"  ,    corsConfigurationsRef )  ;", "return   beanDef ;", "}", "METHOD_END"], "methodName": ["registerHandlerMapping"], "fileName": "org.springframework.web.servlet.config.ViewControllerBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "if    ( element . hasAttribute (  \" prefix \"  )  )     {", "b . getPropertyValues (  )  . add (  \" prefix \"  ,    element . getAttribute (  \" prefix \"  )  )  ;", "}", "if    ( element . hasAttribute (  \" suffix \"  )  )     {", "b . getPropertyValues (  )  . add (  \" suffix \"  ,    element . getAttribute (  \" suffix \"  )  )  ;", "}", "if    ( element . hasAttribute (  \" cache - views \"  )  )     {", "b . getPropertyValues (  )  . add (  \" cache \"  ,    element . getAttribute (  \" cache - views \"  )  )  ;", "}", "if    ( element . hasAttribute (  \" view - class \"  )  )     {", "b . getPropertyValues (  )  . add (  \" viewClass \"  ,    element . getAttribute (  \" view - class \"  )  )  ;", "}", "if    ( element . hasAttribute (  \" view - names \"  )  )     {", "b . getPropertyValues (  )  . add (  \" viewNames \"  ,    element . getAttribute (  \" view - names \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addUrlBasedViewResolverProperties"], "fileName": "org.springframework.web.servlet.config.ViewResolversBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition ( ContentNegotiatingViewResolver . class )  ;", "beanDef . setSource ( context . extractSource ( resolverElement )  )  ;", "beanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "MutablePropertyValues   values    =    beanDef . getPropertyValues (  )  ;", "List < Element >    elements    =    DomUtils . getChildElementsByTagName ( resolverElement ,     \" default - views \"  )  ;", "if    (  !  ( elements . isEmpty (  )  )  )     {", "ManagedList < Object >    list    =    new   ManagedList (  )  ;", "for    ( Element   element    :    DomUtils . getChildElementsByTagName ( elements . get (  0  )  ,     \" bean \"  ,     \" ref \"  )  )     {", "list . add ( context . getDelegate (  )  . parsePropertySubElement ( element ,    null )  )  ;", "}", "values . add (  \" defaultViews \"  ,    list )  ;", "}", "if    ( resolverElement . hasAttribute (  \" use - not - acceptable \"  )  )     {", "values . add (  \" useNotAcceptableStatusCode \"  ,    resolverElement . getAttribute (  \" use - not - acceptable \"  )  )  ;", "}", "Object   manager    =    MvcNamespaceUtils . getContentNegotiationManager ( context )  ;", "if    ( manager    !  =    null )     {", "values . add (  \" contentNegotiationManager \"  ,    manager )  ;", "}", "return   beanDef ;", "}", "METHOD_END"], "methodName": ["createContentNegotiatingViewResolver"], "fileName": "org.springframework.web.servlet.config.ViewResolversBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "Object   source    =    context . extractSource ( element )  ;", "context . pushContainingComponent ( new   CompositeComponentDefinition ( element . getTagName (  )  ,    source )  )  ;", "ManagedList < Object >    resolvers    =    new   ManagedList (  4  )  ;", "resolvers . setSource ( context . extractSource ( element )  )  ;", "String [  ]    names    =    new   String [  ]  {     \" jsp \"  ,     \" tiles \"  ,     \" bean - name \"  ,     \" freemarker \"  ,     \" groovy \"  ,     \" script - template \"  ,     \" bean \"  ,     \" ref \"     }  ;", "for    ( Element   resolverElement    :    DomUtils . getChildElementsByTagName ( element ,    names )  )     {", "String   name    =    resolverElement . getLocalName (  )  ;", "if    (  (  \" bean \"  . equals ( name )  )     |  |     (  \" ref \"  . equals ( name )  )  )     {", "resolvers . add ( context . getDelegate (  )  . parsePropertySubElement ( resolverElement ,    null )  )  ;", "continue ;", "}", "RootBeanDefinition   resolverBeanDef ;", "if    (  \" jsp \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( InternalResourceViewResolver . class )  ;", "resolverBeanDef . getPropertyValues (  )  . add (  \" prefix \"  ,     \"  / WEB - INF /  \"  )  ;", "resolverBeanDef . getPropertyValues (  )  . add (  \" suffix \"  ,     \"  . jsp \"  )  ;", "addUrlBasedViewResolverProperties ( resolverElement ,    resolverBeanDef )  ;", "} else", "if    (  \" tiles \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( class )  ;", "addUrlBasedViewResolverProperties ( resolverElement ,    resolverBeanDef )  ;", "} else", "if    (  \" freemarker \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( class )  ;", "resolverBeanDef . getPropertyValues (  )  . add (  \" suffix \"  ,     \"  . ftl \"  )  ;", "addUrlBasedViewResolverProperties ( resolverElement ,    resolverBeanDef )  ;", "} else", "if    (  \" groovy \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( class )  ;", "resolverBeanDef . getPropertyValues (  )  . add (  \" suffix \"  ,     \"  . tpl \"  )  ;", "addUrlBasedViewResolverProperties ( resolverElement ,    resolverBeanDef )  ;", "} else", "if    (  \" script - template \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( class )  ;", "addUrlBasedViewResolverProperties ( resolverElement ,    resolverBeanDef )  ;", "} else", "if    (  \" bean - name \"  . equals ( name )  )     {", "resolverBeanDef    =    new   RootBeanDefinition ( class )  ;", "} else    {", "throw   new   IllegalStateException (  (  \" Unexpected   element   name :     \"     +    name )  )  ;", "}", "resolverBeanDef . setSource ( source )  ;", "resolverBeanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "resolvers . add ( resolverBeanDef )  ;", "}", "String   beanName    =     . VIEW _ RESOLVER _ BEAN _ NAME ;", "RootBeanDefinition   compositeResolverBeanDef    =    new   RootBeanDefinition ( ViewResolverComposite . class )  ;", "compositeResolverBeanDef . setSource ( source )  ;", "compositeResolverBeanDef . setRole ( ROLE _ INFRASTRUCTURE )  ;", "names    =    new   String [  ]  {     \" content - negotiation \"     }  ;", "List < Element >    contentNegotiationElements    =    DomUtils . getChildElementsByTagName ( element ,    names )  ;", "if    ( contentNegotiationElements . isEmpty (  )  )     {", "compositeResolverBeanDef . getPropertyValues (  )  . add (  \" viewResolvers \"  ,    resolvers )  ;", "} else", "if    (  ( contentNegotiationElements . size (  )  )     =  =     1  )     {", "BeanDefinition   beanDef    =    createContentNegotiatingViewResolver ( contentNegotiationElements . get (  0  )  ,    context )  ;", "beanDef . getPropertyValues (  )  . add (  \" viewResolvers \"  ,    resolvers )  ;", "ManagedList < Object >    list    =    new   ManagedList (  1  )  ;", "list . add ( beanDef )  ;", "compositeResolverBeanDef . getPropertyValues (  )  . add (  \" order \"  ,    Ordered . HIGHEST _ PRECEDENCE )  ;", "compositeResolverBeanDef . getPropertyValues (  )  . add (  \" viewResolvers \"  ,    list )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" Only   one    < content - negotiation >    element   is   allowed .  \"  )  ;", "}", "if    ( element . hasAttribute (  \" order \"  )  )     {", "compositeResolverBeanDef . getPropertyValues (  )  . add (  \" order \"  ,    element . getAttribute (  \" order \"  )  )  ;", "}", "context . getReaderContext (  )  . getRegistry (  )  . registerBeanDefinition ( beanName ,    compositeResolverBeanDef )  ;", "context . registerComponent ( new   BeanComponentDefinition ( compositeResolverBeanDef ,    beanName )  )  ;", "context . popAndRegisterContainingComponent (  )  ;", "return   null ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.springframework.web.servlet.config.ViewResolversBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "return   this . callableInterceptors ;", "}", "METHOD_END"], "methodName": ["getCallableInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . deferredResultInterceptors ;", "}", "METHOD_END"], "methodName": ["getDeferredResultInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . taskExecutor ;", "}", "METHOD_END"], "methodName": ["getTaskExecutor"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . timeout ;", "}", "METHOD_END"], "methodName": ["getTimeout"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . callableInterceptors . addAll ( Arrays . asList ( interceptors )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["registerCallableInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . deferredResultInterceptors . addAll ( Arrays . asList ( interceptors )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["registerDeferredResultInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . timeout    =    timeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDefaultTimeout"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . taskExecutor    =    taskExecutor ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTaskExecutor"], "fileName": "org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . addMediaTypes ( this . mediaTypes )  ;", "return   this . factory . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildContentNegotiationManager"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setDefaultContentTypes ( Arrays . asList ( defaultContentTypes )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["defaultContentType"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setDefaultContentTypeStrategy ( defaultStrategy )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["defaultContentTypeStrategy"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setFavorParameter ( favorParameter )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["favorParameter"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setFavorPathExtension ( favorPathExtension )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["favorPathExtension"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setIgnoreAcceptHeader ( ignoreAcceptHeader )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["ignoreAcceptHeader"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setIgnoreUnknownPathExtensions ( ignore )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["ignoreUnknownPathExtensions"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . mediaTypes . put ( extension ,    mediaType )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["mediaType"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    ( mediaTypes    !  =    null )     {", "this . mediaTypes . putAll ( mediaTypes )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["mediaTypes"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setParameterName ( parameterName )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["parameterName"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . mediaTypes . clear (  )  ;", "mediaTypes ( mediaTypes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["replaceMediaTypes"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setStrategies ( strategies )  ;", "}", "METHOD_END"], "methodName": ["strategies"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . useRegisteredExtensionsOnly (  (  ! useJaf )  )  ;", "}", "METHOD_END"], "methodName": ["useJaf"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . factory . setUseRegisteredExtensionsOnly ( useRegisteredExtensionsOnly )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useRegisteredExtensionsOnly"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . configurer . mediaTypes ( Collections . singletonMap (  \" json \"  ,    APPLICATION _ JSON )  )  ;", "Manager   manager    =    this . configurer . buildManager (  )  ;", "this . servletRequest . setRequestURI (  \"  / flower . json \"  )  ;", "assertEquals ( APPLICATION _ JSON ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["addMediaTypes"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiationManager   manager    =    this . configurer . buildContentNegotiationManager (  )  ;", "this . servletRequest . setRequestURI (  \"  / flower . gif \"  )  ;", "assertEquals (  \" Should   be   able   to   resolve   file   extensions   by   default \"  ,    IMAGE _ GIF ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "this . servletRequest . setRequestURI (  \"  / flower ? format = gif \"  )  ;", "this . servletRequest . addParameter (  \" format \"  ,     \" gif \"  )  ;", "assertEquals (  \" Should   not   resolve   request   parameters   by   default \"  ,    MEDIA _ TYPE _ ALL _ LIST ,    manager . resolveMediaTypes ( this . webRequest )  )  ;", "this . servletRequest . setRequestURI (  \"  / flower \"  )  ;", "this . servletRequest . addHeader (  \" Accept \"  ,    IMAGE _ GIF _ VALUE )  ;", "assertEquals (  \" Should   resolve   Accept   header   by   default \"  ,    IMAGE _ GIF ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultSettings"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . favorParameter ( true )  ;", "this . configurer . parameterName (  \" f \"  )  ;", "this . configurer . mediaTypes ( Collections . singletonMap (  \" json \"  ,    APPLICATION _ JSON )  )  ;", "Manager   manager    =    this . configurer . buildManager (  )  ;", "this . servletRequest . setRequestURI (  \"  / flower \"  )  ;", "this . servletRequest . addParameter (  \" f \"  ,     \" json \"  )  ;", "assertEquals ( APPLICATION _ JSON ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["favorParameter"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . ignoreAcceptHeader ( true )  ;", "Manager   manager    =    this . configurer . buildManager (  )  ;", "this . servletRequest . setRequestURI (  \"  / flower \"  )  ;", "this . servletRequest . addHeader (  \" Accept \"  ,    IMAGE _ GIF _ VALUE )  ;", "assertEquals ( MEDIA _ TYPE _ ALL _ LIST ,    manager . resolveMediaTypes ( this . webRequest )  )  ;", "}", "METHOD_END"], "methodName": ["ignoreAcceptHeader"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . defaultContentType ( APPLICATION _ JSON )  ;", "Manager   manager    =    this . configurer . buildManager (  )  ;", "assertEquals ( APPLICATION _ JSON ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["setDefaultContentType"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . defaultContentTypeStrategy ( new   FixedContentNegotiationStrategy ( MediaType . APPLICATION _ JSON )  )  ;", "ContentNegotiationManager   manager    =    this . configurer . buildContentNegotiationManager (  )  ;", "assertEquals ( APPLICATION _ JSON ,    manager . resolveMediaTypes ( this . webRequest )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["setDefaultContentTypeStrategy"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . defaultContentType ( APPLICATION _ JSON ,    ALL )  ;", "Manager   manager    =    this . configurer . buildManager (  )  ;", "assertEquals ( Arrays . asList ( APPLICATION _ JSON ,    ALL )  ,    manager . resolveMediaTypes ( this . webRequest )  )  ;", "}", "METHOD_END"], "methodName": ["setMultipleDefaultContentTypes"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest    =    new   MockHttpServletRequest (  )  ;", "this . webRequest    =    new   ServletWebRequest ( this . servletRequest )  ;", "this . configurer    =    new    ( this . servletRequest . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . config . setAllowCredentials ( allowCredentials )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowCredentials"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "this . config . setAllowedHeaders ( Arrays . asList ( headers )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowedHeaders"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "this . config . setAllowedMethods ( Arrays . asList ( methods )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowedMethods"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "this . config . setAllowedOrigins ( Arrays . asList ( origins )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowedOrigins"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "this . config . setExposedHeaders ( Arrays . asList ( headers )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exposedHeaders"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . config ;", "}", "METHOD_END"], "methodName": ["getCorsConfiguration"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . pathPattern ;", "}", "METHOD_END"], "methodName": ["getPathPattern"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "this . config . setMaxAge ( maxAge )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["maxAge"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistration"}, {"methodBody": ["METHOD_START", "{", "CorsRegistration   registration    =    new   CorsRegistration ( pathPattern )  ;", "this . registrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addMapping"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistry"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    CorsConfiguration >    configs    =    new   LinkedHashMap <  >  ( this . registrations . size (  )  )  ;", "for    ( ation   registration    :    this . registrations )     {", "configs . put ( registration . getPathPattern (  )  ,    registration . getCorsConfiguration (  )  )  ;", "}", "return   configs ;", "}", "METHOD_END"], "methodName": ["getCorsConfigurations"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistry"}, {"methodBody": ["METHOD_START", "{", "this . registry . addMapping (  \"  / foo \"  )  . allowedOrigins (  \" http :  /  / domain 2  . com \"  ,     \" http :  /  / domain 2  . com \"  )  . allowedMethods (  \" DELETE \"  )  . allowCredentials ( false )  . allowedHeaders (  \" header 1  \"  ,     \" header 2  \"  )  . exposedHeaders (  \" header 3  \"  ,     \" header 4  \"  )  . maxAge (  3  6  0  0  )  ;", "Map < String ,    CorsConfiguration >    configs    =    this . registry . getCorsConfigurations (  )  ;", "assertEquals (  1  ,    configs . size (  )  )  ;", "CorsConfiguration   config    =    configs . get (  \"  / foo \"  )  ;", "assertEquals ( Arrays . asList (  \" http :  /  / domain 2  . com \"  ,     \" http :  /  / domain 2  . com \"  )  ,    config . getAllowedOrigins (  )  )  ;", "assertEquals ( Arrays . asList (  \" DELETE \"  )  ,    config . getAllowedMethods (  )  )  ;", "assertEquals ( Arrays . asList (  \" header 1  \"  ,     \" header 2  \"  )  ,    config . getAllowedHeaders (  )  )  ;", "assertEquals ( Arrays . asList (  \" header 3  \"  ,     \" header 4  \"  )  ,    config . getExposedHeaders (  )  )  ;", "assertEquals ( false ,    config . getAllowCredentials (  )  )  ;", "assertEquals ( Long . valueOf (  3  6  0  0  )  ,    config . getMaxAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["customizedMapping"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addMapping (  \"  / foo \"  )  ;", "this . registry . addMapping (  \"  / bar \"  )  ;", "assertEquals (  2  ,    this . registry . getCorsConfigurations (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipleMappings"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . registry . getCorsConfigurations (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["noMapping"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry    =    new   CorsRegistry (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.annotation.CorsRegistryTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . handler )     =  =    null )     {", "return   null ;", "}", "SimpleUrlMapping   handlerMapping    =    new   SimpleUrlMapping (  )  ;", "handlerMapping . setUrlMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . handler )  )  ;", "handlerMapping . setOrder ( Integer . MAX _ VALUE )  ;", "return   handlerMapping ;", "}", "METHOD_END"], "methodName": ["buildHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer"}, {"methodBody": ["METHOD_START", "{", "enable ( null )  ;", "}", "METHOD_END"], "methodName": ["enable"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   DefaultServletHttpRequestHandler (  )  ;", "if    ( defaultServletName    !  =    null )     {", "this . handler . setDefaultServletName ( defaultServletName )  ;", "}", "this . handler . setServletContext ( this . servletContext )  ;", "}", "METHOD_END"], "methodName": ["enable"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer"}, {"methodBody": ["METHOD_START", "{", "configurer . enable (  )  ;", "SimpleUrlHandlerMapping   handlerMapping    =    configurer . buildHandlerMapping (  )  ;", "ttpRequestHandler   handler    =     (  ( ttpRequestHandler )     ( handlerMapping . getUrlMap (  )  . get (  \"  /  *  *  \"  )  )  )  ;", "assertNotNull ( handler )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "handler . handleRequest ( new   MockHttpServletRequest (  )  ,    response )  ;", "String   expected    =     \" default \"  ;", "assertEquals (  \" The   ServletContext   was   not   called   with   the   default   servlet   name \"  ,    expected ,    servletContext . url )  ;", "assertEquals (  \" The   request   was   not   forwarded \"  ,    expected ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["enable"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "configurer . enable (  \" defaultServlet \"  )  ;", "SimpleUrlHandlerMapping   handlerMapping    =    configurer . buildHandlerMapping (  )  ;", "ttpRequestHandler   handler    =     (  ( ttpRequestHandler )     ( handlerMapping . getUrlMap (  )  . get (  \"  /  *  *  \"  )  )  )  ;", "assertNotNull ( handler )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "handler . handleRequest ( new   MockHttpServletRequest (  )  ,    response )  ;", "String   expected    =     \" defaultServlet \"  ;", "assertEquals (  \" The   ServletContext   was   not   called   with   the   default   servlet   name \"  ,    expected ,    servletContext . url )  ;", "assertEquals (  \" The   request   was   not   forwarded \"  ,    expected ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["enableWithServletName"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( configurer . buildHandlerMapping (  )  )  ;", "}", "METHOD_END"], "methodName": ["notEnabled"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "response    =    new   MockHttpServletResponse (  )  ;", "servletContext    =    new    . DispatchingMockServletContext (  )  ;", "configurer    =    new   DefaultServletHandlerConfigurer ( servletContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( CollectionUtils . isEmpty ( configurers )  )  )     {", "this . configurers . adders ( configurers )  ;", "}", "}", "METHOD_END"], "methodName": ["setConfigurers"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration"}, {"methodBody": ["METHOD_START", "{", "List < WebMvcConfigurer >    configurers    =    new   ArrayList <  >  (  )  ;", "configurers . add ( new   WebMvcConfigurer (  )     {", "@ Override", "public   void   configureHandlerExceptionResolvers ( List < HandlerExceptionResolver >    exceptionResolvers )     {", "exceptionResolvers . add ( new   DefaultHandlerExceptionResolver (  )  )  ;", "}", "}  )  ;", "delegatingConfig . setConfigurers ( configurers )  ;", "HandlerExceptionResolverComposite   composite    =     (  ( HandlerExceptionResolverComposite )     ( delegatingConfig . handlerExceptionResolver (  )  )  )  ;", "assertEquals (  \" Only   one   custom   converter   is   expected \"  ,     1  ,    composite . getExceptionResolvers (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureExceptionResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "final   HttpMessageConverter <  ?  >    customConverter    =    mock ( HttpMessageConverter . class )  ;", "final   StringHttpMessageConverter   stringConverter    =    new   StringHttpMessageConverter (  )  ;", "List < WebMvcConfigurer >    configurers    =    new   ArrayList <  >  (  )  ;", "configurers . add ( new   WebMvcConfigurer (  )     {", "@ Override", "public   void   configureMessageConverters ( List < HttpMessageConverter <  ?  >  >    converters )     {", "converters . add ( stringConverter )  ;", "}", "@ Override", "public   void   extendMessageConverters ( List < HttpMessageConverter <  ?  >  >    converters )     {", "converters . add (  0  ,    customConverter )  ;", "}", "}  )  ;", "delegatingConfig    =    new    (  )  ;", "delegatingConfig . setConfigurers ( configurers )  ;", "RequestMappingHandlerAdapter   adapter    =    delegatingConfig . requestMappingHandlerAdapter (  )  ;", "assertEquals (  \" Only   one   custom   converter   should   be   registered \"  ,     2  ,    adapter . getMessageConverters (  )  . size (  )  )  ;", "assertSame ( customConverter ,    adapter . getMessageConverters (  )  . get (  0  )  )  ;", "assertSame ( stringConverter ,    adapter . getMessageConverters (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["configureMessageConverters"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "final   PathMatcher   pathMatcher    =    mock ( PathMatcher . class )  ;", "final   UrlPathHelper   pathHelper    =    mock ( UrlPathHelper . class )  ;", "List < er >    configurers    =    new   ArrayList <  >  (  )  ;", "configurers . add ( new   er (  )     {", "@ Override", "public   void   configurePathMatch ( PathMatchConfigurer   configurer )     {", "configurer . setUseRegisteredSuffixPatternMatch ( true )  . setUseTrailingSlashMatch ( false )  . setUrlPathHelper ( pathHelper )  . setPathMatcher ( pathMatcher )  ;", "}", "}  )  ;", "delegatingConfig . setConfigurers ( configurers )  ;", "RequestMappingHandlerMapping   handlerMapping    =    delegatingConfig . requestMappingHandlerMapping (  )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals (  \" PathMatchConfigurer   should   configure   RegisteredSuffixPatternMatch \"  ,    true ,    handlerMapping . useRegisteredSuffixPatternMatch (  )  )  ;", "assertEquals (  \" PathMatchConfigurer   should   configure   SuffixPatternMatch \"  ,    true ,    handlerMapping . useSuffixPatternMatch (  )  )  ;", "assertEquals (  \" PathMatchConfigurer   should   configure   TrailingSlashMatch \"  ,    false ,    handlerMapping . useTrailingSlashMatch (  )  )  ;", "assertEquals (  \" PathMatchConfigurer   should   configure   UrlPathHelper \"  ,    pathHelper ,    handlerMapping . getUrlPathHelper (  )  )  ;", "assertEquals (  \" PathMatchConfigurer   should   configure   PathMatcher \"  ,    pathMatcher ,    handlerMapping . getPathMatcher (  )  )  ;", "}", "METHOD_END"], "methodName": ["configurePathMatch"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "given ( webMvcConfigurer . getMessageCodesResolver (  )  )  . willReturn ( new   DefaultMessageCodesResolver (  )  )  ;", "delegatingConfig . setConfigurers ( Collections . singletonList ( webMvcConfigurer )  )  ;", "delegatingConfig . getMessageCodesResolver (  )  ;", "verify ( webMvcConfigurer )  . getMessageCodesResolver (  )  ;", "}", "METHOD_END"], "methodName": ["getCustomMessageCodesResolver"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "given ( webMvcConfigurer . getValidator (  )  )  . willReturn ( new   LocalValidatorFactoryBean (  )  )  ;", "delegatingConfig . setConfigurers ( Collections . singletonList ( webMvcConfigurer )  )  ;", "delegatingConfig . mvcValidator (  )  ;", "verify ( webMvcConfigurer )  . getValidator (  )  ;", "}", "METHOD_END"], "methodName": ["getCustomValidator"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "delegatingConfig . setConfigurers ( Collections . singletonList ( webMvcConfigurer )  )  ;", "delegatingConfig . handlerExceptionResolver (  )  ;", "verify ( webMvcConfigurer )  . configureMessageConverters ( converters . capture (  )  )  ;", "verify ( webMvcConfigurer )  . configureContentNegotiation ( contentNegotiationConfigurer . capture (  )  )  ;", "verify ( webMvcConfigurer )  . configureHandlerExceptionResolvers ( exceptionResolvers . capture (  )  )  ;", "assertEquals (  3  ,    exceptionResolvers . getValue (  )  . size (  )  )  ;", "assertTrue (  (  ( exceptionResolvers . getValue (  )  . get (  0  )  )    instanceof   ExceptionHandlerExceptionResolver )  )  ;", "assertTrue (  (  ( exceptionResolvers . getValue (  )  . get (  1  )  )    instanceof   ResponseStatusExceptionResolver )  )  ;", "assertTrue (  (  ( exceptionResolvers . getValue (  )  . get (  2  )  )    instanceof   DefaultHandlerExceptionResolver )  )  ;", "assertTrue (  (  ( converters . getValue (  )  . size (  )  )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["handlerExceptionResolver"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "delegatingConfig . setConfigurers ( Collections . singletonList ( webMvcConfigurer )  )  ;", "RequestMappingHandlerAdapter   adapter    =    this . delegatingConfig . requestMappingHandlerAdapter (  )  ;", "ConfigurableWebBindingInitializer   initializer    =     (  ( ConfigurableWebBindingInitializer )     ( adapter . getWebBindingInitializer (  )  )  )  ;", "verify ( webMvcConfigurer )  . configureMessageConverters ( converters . capture (  )  )  ;", "verify ( webMvcConfigurer )  . configureContentNegotiation ( contentNegotiationConfigurer . capture (  )  )  ;", "verify ( webMvcConfigurer )  . addFormatters ( conversionService . capture (  )  )  ;", "verify ( webMvcConfigurer )  . addArgumentResolvers ( resolvers . capture (  )  )  ;", "verify ( webMvcConfigurer )  . addReturnValueHandlers ( handlers . capture (  )  )  ;", "verify ( webMvcConfigurer )  . configureAsyncSupport ( asyncConfigurer . capture (  )  )  ;", "assertNotNull ( initializer )  ;", "assertSame ( conversionService . getValue (  )  ,    initializer . getConversionService (  )  )  ;", "assertTrue (  (  ( initializer . getValidator (  )  )    instanceof   LocalValidatorFactoryBean )  )  ;", "assertEquals (  0  ,    resolvers . getValue (  )  . size (  )  )  ;", "assertEquals (  0  ,    handlers . getValue (  )  . size (  )  )  ;", "assertEquals ( converters . getValue (  )  ,    adapter . getMessageConverters (  )  )  ;", "assertNotNull ( asyncConfigurer )  ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "MockitoAnnotations . initMocks ( this )  ;", "delegatingConfig    =    new    (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfigurationTests"}, {"methodBody": ["METHOD_START", "{", "return   addPathPatterns ( Arrays . asList ( patterns )  )  ;", "}", "METHOD_END"], "methodName": ["addPathPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "this . includePatterns . addAll ( patterns )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addPathPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "return   excludePathPatterns ( Arrays . asList ( patterns )  )  ;", "}", "METHOD_END"], "methodName": ["excludePathPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "this . excludePatterns . addAll ( patterns )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludePathPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . includePatterns . isEmpty (  )  )     &  &     ( this . excludePatterns . isEmpty (  )  )  )     {", "return   this . interceptor ;", "}", "String [  ]    include    =    StringUtils . toStringArray ( this . includePatterns )  ;", "String [  ]    exclude    =    StringUtils . toStringArray ( this . excludePatterns )  ;", "Mapped   mapped    =    new   Mapped ( include ,    exclude ,    this . interceptor )  ;", "if    (  ( this . pathMatcher )     !  =    null )     {", "mapped . setPathMatcher ( this . pathMatcher )  ;", "}", "return   mapped ;", "}", "METHOD_END"], "methodName": ["getInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . order ;", "}", "METHOD_END"], "methodName": ["getOrder"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "return   this ;", "}", "METHOD_END"], "methodName": ["order"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "this . pathMatcher    =    pathMatcher ;", "return   this ;", "}", "METHOD_END"], "methodName": ["pathMatcher"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistration"}, {"methodBody": ["METHOD_START", "{", "InterceptorRegistration   registration    =    new   InterceptorRegistration ( interceptor )  ;", "this . registrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistry"}, {"methodBody": ["METHOD_START", "{", "WebRequestHandlerInterceptorAdapter   adapted    =    new   WebRequestHandlerInterceptorAdapter ( interceptor )  ;", "ation   registration    =    new   ation ( adapted )  ;", "this . registrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addWebRequestInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistry"}, {"methodBody": ["METHOD_START", "{", "return   this . registrations . stream (  )  . sorted ( InterceptorRegistry . INTERCEPTOR _ ORDER _ COMPARATOR )  . map ( InterceptorRegistration :  : getInterceptor )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistry"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  ;", "List < HandlerInterceptor >    interceptors    =    getInterceptorsForPath ( null )  ;", "assertEquals ( Arrays . asList ( this . interceptor 1  )  ,    interceptors )  ;", "}", "METHOD_END"], "methodName": ["addInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  . excludePathPatterns (  \"  / path 1  / secret \"  )  ;", "this . registry . addInterceptor ( this . interceptor 2  )  . addPathPatterns (  \"  / path 2  \"  )  ;", "assertEquals ( Collections . singletonList ( this . interceptor 1  )  ,    getInterceptorsForPath (  \"  / path 1  \"  )  )  ;", "assertEquals ( Arrays . asList ( this . interceptor 1  ,    this . interceptor 2  )  ,    getInterceptorsForPath (  \"  / path 2  \"  )  )  ;", "assertEquals ( Collections . emptyList (  )  ,    getInterceptorsForPath (  \"  / path 1  / secret \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addInterceptorWithExcludePathPatternOnly"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "PathMatcher   pathMatcher    =    Mockito . mock ( PathMatcher . class )  ;", "this . registry . add ( interceptor 1  )  . addPathPatterns (  \"  / path 1  /  *  *  \"  )  . pathMatcher ( pathMatcher )  ;", "Mapped   mapped    =     (  ( Mapped )     ( this . registry . gets (  )  . get (  0  )  )  )  ;", "assertSame ( pathMatcher ,    mapped . getPathMatcher (  )  )  ;", "}", "METHOD_END"], "methodName": ["addInterceptorsWithCustomPathMatcher"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  . addPathPatterns (  \"  / path 1  /  *  *  \"  )  . excludePathPatterns (  \"  / path 1  / secret \"  )  ;", "this . registry . addInterceptor ( this . interceptor 2  )  . addPathPatterns (  \"  / path 2  \"  )  ;", "assertEquals ( Arrays . asList ( this . interceptor 1  )  ,    getInterceptorsForPath (  \"  / path 1  / test \"  )  )  ;", "assertEquals ( Arrays . asList ( this . interceptor 2  )  ,    getInterceptorsForPath (  \"  / path 2  \"  )  )  ;", "assertEquals ( Collections . emptyList (  )  ,    getInterceptorsForPath (  \"  / path 1  / secret \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addInterceptorsWithUrlPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  ;", "this . registry . addInterceptor ( this . interceptor 2  )  ;", "List < HandlerInterceptor >    interceptors    =    getInterceptorsForPath ( null )  ;", "assertEquals ( Arrays . asList ( this . interceptor 1  ,    this . interceptor 2  )  ,    interceptors )  ;", "}", "METHOD_END"], "methodName": ["addTwoInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addWebRequestInterceptor ( this . webInterceptor 1  )  ;", "List < HandlerInterceptor >    interceptors    =    getInterceptorsForPath ( null )  ;", "assertEquals (  1  ,    interceptors . size (  )  )  ;", "verifyWebInterceptor ( interceptors . get (  0  )  ,    this . webInterceptor 1  )  ;", "}", "METHOD_END"], "methodName": ["addWebRequestInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addWebRequestInterceptor ( this . webInterceptor 1  )  ;", "this . registry . addWebRequestInterceptor ( this . webInterceptor 2  )  ;", "List < HandlerInterceptor >    interceptors    =    getInterceptorsForPath ( null )  ;", "assertEquals (  2  ,    interceptors . size (  )  )  ;", "verifyWebInterceptor ( interceptors . get (  0  )  ,    this . webInterceptor 1  )  ;", "verifyWebInterceptor ( interceptors . get (  1  )  ,    this . webInterceptor 2  )  ;", "}", "METHOD_END"], "methodName": ["addWebRequestInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addWebRequestInterceptor ( this . webInterceptor 1  )  . addPathPatterns (  \"  / path 1  \"  )  ;", "this . registry . addWebRequestInterceptor ( this . webInterceptor 2  )  . addPathPatterns (  \"  / path 2  \"  )  ;", "List < HandlerInterceptor >    interceptors    =    getInterceptorsForPath (  \"  / path 1  \"  )  ;", "assertEquals (  1  ,    interceptors . size (  )  )  ;", "verifyWebInterceptor ( interceptors . get (  0  )  ,    this . webInterceptor 1  )  ;", "interceptors    =    getInterceptorsForPath (  \"  / path 2  \"  )  ;", "assertEquals (  1  ,    interceptors . size (  )  )  ;", "verifyWebInterceptor ( interceptors . get (  0  )  ,    this . webInterceptor 2  )  ;", "}", "METHOD_END"], "methodName": ["addWebRequestInterceptorsWithUrlPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "PathMatcher   pathMatcher    =    new   AntPathMatcher (  )  ;", "List < Handler >    result    =    new   ArrayList <  >  (  )  ;", "for    ( Object   interceptor    :    this . registry . gets (  )  )     {", "if    ( interceptor   instanceof   Mapped )     {", "Mapped   mapped    =     (  ( Mapped )     ( interceptor )  )  ;", "if    ( mapped . matches ( lookupPath ,    pathMatcher )  )     {", "result . add ( mapped . get (  )  )  ;", "}", "} else", "if    ( interceptor   instanceof   Handler )     {", "result . add (  (  ( Handler )     ( interceptor )  )  )  ;", "} else    {", "fail (  (  \" Unexpected   interceptor   type :     \"     +     ( interceptor . getClass (  )  . getName (  )  )  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getInterceptorsForPath"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  . order (  0  )  ;", "this . registry . addInterceptor ( this . interceptor 2  )  . order (  0  )  ;", "List < Object >    interceptors    =    this . registry . getInterceptors (  )  ;", "assertEquals (  2  ,    interceptors . size (  )  )  ;", "assertSame ( this . interceptor 1  ,    interceptors . get (  0  )  )  ;", "assertSame ( this . interceptor 2  ,    interceptors . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["nonOrderedInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addInterceptor ( this . interceptor 1  )  . order ( LOWEST _ PRECEDENCE )  ;", "this . registry . addInterceptor ( this . interceptor 2  )  . order ( HIGHEST _ PRECEDENCE )  ;", "List < Object >    interceptors    =    this . registry . getInterceptors (  )  ;", "assertEquals (  2  ,    interceptors . size (  )  )  ;", "assertSame ( this . interceptor 2  ,    interceptors . get (  0  )  )  ;", "assertSame ( this . interceptor 1  ,    interceptors . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["orderedInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry    =    new   InterceptorRegistry (  )  ;", "this . webInterceptor 1     =    new    . TestWebRequestInterceptor (  )  ;", "this . webInterceptor 2     =    new    . TestWebRequestInterceptor (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  ( interceptor   instanceof   WebRequestHandlerInterceptorAdapter )  )  ;", "interceptor . preHandle ( this . request ,    this . response ,    null )  ;", "assertTrue ( webInterceptor . preHandleInvoked )  ;", "}", "METHOD_END"], "methodName": ["verifyWebInterceptor"], "fileName": "org.springframework.web.servlet.config.annotation.InterceptorRegistryTests"}, {"methodBody": ["METHOD_START", "{", "return   this . pathMatcher ;", "}", "METHOD_END"], "methodName": ["getPathMatcher"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . registeredSuffixPatternMatch ;", "}", "METHOD_END"], "methodName": ["isUseRegisteredSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . suffixPatternMatch ;", "}", "METHOD_END"], "methodName": ["isUseSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . trailingSlashMatch ;", "}", "METHOD_END"], "methodName": ["isUseTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . pathMatcher    =    pathMatcher ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setPathMatcher"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper    =    urlPathHelper ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . registeredSuffixPatternMatch    =    registeredSuffixPatternMatch ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setUseRegisteredSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . suffixPatternMatch    =    suffixPatternMatch ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setUseSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . trailingSlashMatch    =    trailingSlashMatch ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setUseTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.config.annotation.PathMatchConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPath ;", "}", "METHOD_END"], "methodName": ["getUrlPath"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . controller ;", "}", "METHOD_END"], "methodName": ["getViewController"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . controller . setApplicationContext ( applicationContext )  ;", "this . r . setApplicationContext ( applicationContext )  ;", "}", "METHOD_END"], "methodName": ["setApplicationContext"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . redirectView . setContextRelative ( contextRelative )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setContextRelative"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . redirectView . setPropagateQueryParams ( propagate )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setKeepQueryParams"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "Assert . isTrue ( statusCode . is 3 xxRedirection (  )  ,     \" Not   a   redirect   status   code \"  )  ;", "this . r . setStatusCode ( statusCode )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setStatusCode"], "fileName": "org.springframework.web.servlet.config.annotation.RedirectViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( resolver ,     \" The   provided   ResourceResolver   should   not   be   null \"  )  ;", "this . resolvers . add ( resolver )  ;", "if    ( resolver   instanceof   VersionResourceResolver )     {", "this . hasVersionResolver    =    true ;", "} else", "if    ( resolver   instanceof   resource . PathResourceResolver )     {", "this . hasPathResolver    =    true ;", "} else", "if    ( resolver   instanceof   resource . WebJarsResourceResolver )     {", "this . hasWebjarsResolver    =    true ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceChainRegistration"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( transformer ,     \" The   provided   ResourceTransformer   should   not   be   null \"  )  ;", "this . transformers . add ( transformer )  ;", "if    ( transformer   instanceof   CssLinkResourceTransformer )     {", "this . hasCssLinkTransformer    =    true ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addTransformer"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceChainRegistration"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( this . hasPathResolver )  )     {", "List < ResourceResolver >    result    =    new   ArrayList <  >  ( this . resolvers )  ;", "if    (  (  . isWebJarsAssetLocatorPresent )     &  &     (  !  ( this . hasWebjarsResolver )  )  )     {", "result . add ( new   WebJarsResourceResolver (  )  )  ;", "}", "result . add ( new   PathResourceResolver (  )  )  ;", "return   result ;", "}", "return   this . resolvers ;", "}", "METHOD_END"], "methodName": ["getResourceResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceChainRegistration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . hasVersionResolver )     &  &     (  !  ( this . hasCssLinkTransformer )  )  )     {", "List < Transformer >    result    =    new   ArrayList <  >  ( this . transformers )  ;", "boolean   hasTransformers    =     !  ( this . transformers . isEmpty (  )  )  ;", "boolean   hasCaching    =    hasTransformers    &  &     (  ( this . transformers . get (  0  )  )    instanceof   CachingTransformer )  ;", "result . add (  ( hasCaching    ?     1     :     0  )  ,    new   CssLinkTransformer (  )  )  ;", "return   result ;", "}", "return   this . transformers ;", "}", "METHOD_END"], "methodName": ["getResourceTransformers"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceChainRegistration"}, {"methodBody": ["METHOD_START", "{", "this . locationValues . addAll ( Arrays . asList ( resourceLocations )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addResourceLocations"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . pathPatterns ;", "}", "METHOD_END"], "methodName": ["getPathPatterns"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "ResourceHttpRequestHandler   handler    =    new   ResourceHttpRequestHandler (  )  ;", "if    (  ( this . resourceChain )     !  =    null )     {", "handler . setResourceResolvers ( this . resourceChain . getResourceResolvers (  )  )  ;", "handler . setResourceTransformers ( this . resourceChain . getResourceTransformers (  )  )  ;", "}", "handler . setLocationValues ( this . locationValues )  ;", "if    (  ( this . cacheControl )     !  =    null )     {", "handler . setCacheControl ( this . cacheControl )  ;", "} else", "if    (  ( this . cachePeriod )     !  =    null )     {", "handler . setCacheSeconds ( this . cachePeriod )  ;", "}", "return   handler ;", "}", "METHOD_END"], "methodName": ["getRequestHandler"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . resourceChainRegistration    =    new   ResourceChainRegistration ( cacheResources )  ;", "return   this . resourceChainRegistration ;", "}", "METHOD_END"], "methodName": ["resourceChain"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . resourceChainRegistration    =    new   ResourceChainRegistration ( cacheResources ,    cache )  ;", "return   this . resourceChainRegistration ;", "}", "METHOD_END"], "methodName": ["resourceChain"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . cacheControl    =    cacheControl ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCacheControl"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . cachePeriod    =    cachePeriod ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCachePeriod"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration"}, {"methodBody": ["METHOD_START", "{", "ResourceHandlerRegistration   registration    =    new   ResourceHandlerRegistration ( pathPatterns )  ;", "this . registrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addResourceHandler"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( this . registrations . isEmpty (  )  )     {", "return   null ;", "}", "Map < String ,    HttpRequestHandler >    urlMap    =    new   LinkedHashMap <  >  (  )  ;", "for    ( ation   registration    :    this . registrations )     {", "for    ( String   pathPattern    :    registration . getPathPatterns (  )  )     {", "ResourceHttpRequestHandler   handler    =    registration . getRequestHandler (  )  ;", "if    (  ( this . pathHelper )     !  =    null )     {", "handler . setUrlPathHelper ( this . pathHelper )  ;", "}", "if    (  ( this . contentNegotiationManager )     !  =    null )     {", "handler . setContentNegotiationManager ( this . contentNegotiationManager )  ;", "}", "handler . setServletContext ( this . servletContext )  ;", "handler . setApplicationContext ( this . applicationContext )  ;", "try    {", "handler . afterPropertiesSet (  )  ;", "}    catch    ( Throwable   ex )     {", "throw   new   BeanInitializationException (  \" Failed   to   init   ResourceHttpRequestHandler \"  ,    ex )  ;", "}", "urlMap . put ( pathPattern ,    handler )  ;", "}", "}", "SimpleUrlHandlerMapping   handlerMapping    =    new   SimpleUrlHandlerMapping (  )  ;", "handlerMapping . setOrder ( order )  ;", "handlerMapping . setUrlMap ( urlMap )  ;", "return   handlerMapping ;", "}", "METHOD_END"], "methodName": ["getHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourceHandlerRegistration   registration    :    this . registrations )     {", "if    ( Arrays . asList ( registration . getPathPatterns (  )  )  . contains ( pathPattern )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasMappingForPattern"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "assertThat ( getHandler (  \"  / resources /  *  *  \"  )  . getCacheControl (  )  ,    Matchers . nullValue (  )  )  ;", "this . registration . setCacheControl ( CacheControl . noCache (  )  . cachePrivate (  )  )  ;", "assertThat ( getHandler (  \"  / resources /  *  *  \"  )  . getCacheControl (  )  . getHeaderValue (  )  ,    Matchers . equalTo ( CacheControl . noCache (  )  . cachePrivate (  )  . getHeaderValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheControl"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  -  1  )  ,    getHandler (  \"  / resources /  *  *  \"  )  . getCacheSeconds (  )  )  ;", "this . registration . setCachePeriod (  0  )  ;", "assertEquals (  0  ,    getHandler (  \"  / resources /  *  *  \"  )  . getCacheSeconds (  )  )  ;", "}", "METHOD_END"], "methodName": ["cachePeriod"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "SimpleUrlHandlerMapping   hm    =     (  ( SimpleUrlHandlerMapping )     ( this . registry . getHandlerMapping (  )  )  )  ;", "return    (  ( ttpRequestHandler )     ( hm . getUrlMap (  )  . get ( pathPattern )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . registry . hasMappingForPattern (  \"  / resources /  *  *  \"  )  )  ;", "assertFalse ( this . registry . hasMappingForPattern (  \"  / whatever \"  )  )  ;", "}", "METHOD_END"], "methodName": ["hasMappingForPattern"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" GET \"  )  ;", "request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \"  / testStylesheet . css \"  )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "handler . handleRequest ( request ,    this . response )  ;", "assertEquals (  \" test   stylesheet   content \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["mapPathToLocation"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry    =    new   ResourceHandlerRegistry ( new   GenericWebApplicationContext (  )  ,    new   MockServletContext (  )  )  ;", "assertNull ( this . registry . getHandlerMapping (  )  )  ;", "}", "METHOD_END"], "methodName": ["noResourceHandlers"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  ( Integer . MAX _ VALUE )     -     1  )  ,    registry . getHandlerMapping (  )  . getOrder (  )  )  ;", "registry . setOrder (  0  )  ;", "assertEquals (  0  ,    registry . getHandlerMapping (  )  . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["order"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "ResourceResolver   mockResolver    =    Mockito . mock ( ResourceResolver . class )  ;", "ResourceTransformer   mockTransformer    =    Mockito . mock ( ResourceTransformer . class )  ;", "this . registration . resourceChain ( true )  . addResolver ( mockResolver )  . addTransformer ( mockTransformer )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers . toString (  )  ,    resolvers ,    Matchers . hasSize (  4  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceResolver . class )  )  ;", "CachingResourceResolver   cachingResolver    =     (  ( CachingResourceResolver )     ( resolvers . get (  0  )  )  )  ;", "assertThat ( cachingResolver . getCache (  )  ,    Matchers . instanceOf ( ConcurrentMapCache . class )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . equalTo ( mockResolver )  )  ;", "assertThat ( resolvers . get (  2  )  ,    Matchers . instanceOf ( WebJarsResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  3  )  ,    Matchers . instanceOf ( PathResourceResolver . class )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  2  )  )  ;", "assertThat ( transformers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  1  )  ,    Matchers . equalTo ( mockTransformer )  )  ;", "}", "METHOD_END"], "methodName": ["resourceChain"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "CachingResourceResolver   cachingResolver    =    Mockito . mock ( CachingResourceResolver . class )  ;", "VersionResourceResolver   versionResolver    =    Mockito . mock ( VersionResourceResolver . class )  ;", "WebJarsResourceResolver   webjarsResolver    =    Mockito . mock ( WebJarsResourceResolver . class )  ;", "PathResourceResolver   pathResourceResolver    =    new   PathResourceResolver (  )  ;", "CachingResourceTransformer   cachingTransformer    =    Mockito . mock ( CachingResourceTransformer . class )  ;", "AppCacheManifestTransformer   appCacheTransformer    =    Mockito . mock ( AppCacheManifestTransformer . class )  ;", "CssLinkResourceTransformer   cssLinkTransformer    =    new   CssLinkResourceTransformer (  )  ;", "this . registration . setCachePeriod (  3  6  0  0  )  . resourceChain ( false )  . addResolver ( cachingResolver )  . addResolver ( versionResolver )  . addResolver ( webjarsResolver )  . addResolver ( pathResourceResolver )  . addTransformer ( cachingTransformer )  . addTransformer ( appCacheTransformer )  . addTransformer ( cssLinkTransformer )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers . toString (  )  ,    resolvers ,    Matchers . hasSize (  4  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . sameInstance ( cachingResolver )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . sameInstance ( versionResolver )  )  ;", "assertThat ( resolvers . get (  2  )  ,    Matchers . sameInstance ( webjarsResolver )  )  ;", "assertThat ( resolvers . get (  3  )  ,    Matchers . sameInstance ( pathResourceResolver )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  3  )  )  ;", "assertThat ( transformers . get (  0  )  ,    Matchers . sameInstance ( cachingTransformer )  )  ;", "assertThat ( transformers . get (  1  )  ,    Matchers . sameInstance ( appCacheTransformer )  )  ;", "assertThat ( transformers . get (  2  )  ,    Matchers . sameInstance ( cssLinkTransformer )  )  ;", "}", "METHOD_END"], "methodName": ["resourceChainWithOverrides"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  . addFixedVersionStrategy (  \" fixed \"  ,     \"  /  *  *  /  *  . js \"  )  . addContentVersionStrategy (  \"  /  *  *  \"  )  ;", "this . registration . resourceChain ( true )  . addResolver ( versionResolver )  . addTransformer ( new   AppCacheManifestTransformer (  )  )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers . toString (  )  ,    resolvers ,    Matchers . hasSize (  4  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . sameInstance ( versionResolver )  )  ;", "assertThat ( resolvers . get (  2  )  ,    Matchers . instanceOf ( WebJarsResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  3  )  ,    Matchers . instanceOf ( PathResourceResolver . class )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  3  )  )  ;", "assertThat ( transformers . get (  0  )  ,    Matchers . instanceOf ( CachingResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  1  )  ,    Matchers . instanceOf ( CssLinkResourceTransformer . class )  )  ;", "assertThat ( transformers . get (  2  )  ,    Matchers . instanceOf ( AppCacheManifestTransformer . class )  )  ;", "}", "METHOD_END"], "methodName": ["resourceChainWithVersionResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registration . resourceChain ( false )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "assertThat ( resolvers ,    Matchers . hasSize (  2  )  )  ;", "assertThat ( resolvers . get (  0  )  ,    Matchers . instanceOf ( WebJarsResourceResolver . class )  )  ;", "assertThat ( resolvers . get (  1  )  ,    Matchers . instanceOf ( PathResourceResolver . class )  )  ;", "List < ResourceTransformer >    transformers    =    handler . getResourceTransformers (  )  ;", "assertThat ( transformers ,    Matchers . hasSize (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["resourceChainWithoutCaching"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "GenericWebApplicationContext   appContext    =    new   GenericWebApplicationContext (  )  ;", "appContext . refresh (  )  ;", "this . registry    =    new    ( appContext ,    new   MockServletContext (  )  ,    new   ContentNegotiationManager (  )  ,    new   UrlPathHelper (  )  )  ;", "this . registration    =    this . registry . addResourceHandler (  \"  / resources /  *  *  \"  )  ;", "this . registration . addResourceLocations (  \" classpath : org / springframework / web / servlet / config / annotation /  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registration . addResourceLocations (  \"  [ charset = ISO -  8  8  5  9  -  1  ] file :  /  /  / tmp \"  )  ;", "this . registration . resourceChain ( true )  ;", "ttpRequestHandler   handler    =    getHandler (  \"  / resources /  *  *  \"  )  ;", "UrlResource   resource    =     (  ( UrlResource )     ( handler . getLocations (  )  . get (  1  )  )  )  ;", "assertEquals (  \" file :  / tmp \"  ,    resource . getURL (  )  . toString (  )  )  ;", "assertNotNull ( handler . getUrlPathHelper (  )  )  ;", "List < ResourceResolver >    resolvers    =    handler . getResourceResolvers (  )  ;", "PathResourceResolver   resolver    =     (  ( PathResourceResolver )     ( resolvers . get (  (  ( resolvers . size (  )  )     -     1  )  )  )  )  ;", "Map < Resource ,    Charset >    locationCharsets    =    resolver . getLocationCharsets (  )  ;", "assertEquals (  1  ,    locationCharsets . size (  )  )  ;", "assertEquals ( StandardCharsets . ISO _  8  8  5  9  _  1  ,    locationCharsets . values (  )  . iterator (  )  . next (  )  )  ;", "}", "METHOD_END"], "methodName": ["urlResourceWithCharset"], "fileName": "org.springframework.web.servlet.config.annotation.ResourceHandlerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setAttributesMap ( attributes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["attributes"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setCache ( cache )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["cache"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setCacheLimit ( cacheLimit )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["cacheLimit"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . viewResolver ;", "}", "METHOD_END"], "methodName": ["getViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setPrefix ( prefix )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["prefix"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setSuffix ( suffix )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["suffix"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setViewClass ( viewClass )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["viewClass"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "this . viewResolver . setViewNames ( viewNames )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["viewNames"], "fileName": "org.springframework.web.servlet.config.annotation.UrlBasedViewResolverRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPath ;", "}", "METHOD_END"], "methodName": ["getUrlPath"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . controller ;", "}", "METHOD_END"], "methodName": ["getViewController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . controller . setApplicationContext ( applicationContext )  ;", "}", "METHOD_END"], "methodName": ["setApplicationContext"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . controller . setStatusCode ( statusCode )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setStatusCode"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "this . controller . setViewName ( viewName )  ;", "}", "METHOD_END"], "methodName": ["setViewName"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistration"}, {"methodBody": ["METHOD_START", "{", "RedirectViewControllerRegistration   registration    =    new   RedirectViewControllerRegistration ( urlPath ,    redirectUrl )  ;", "registration . setApplicationContext ( this . applicationContext )  ;", "this . redirectRegistrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addRedirectViewController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistry"}, {"methodBody": ["METHOD_START", "{", "ViewControllerRegistration   registration    =    new   ViewControllerRegistration ( urlPath )  ;", "registration . setApplicationContext ( this . applicationContext )  ;", "registration . setStatusCode ( statusCode )  ;", "registration . getViewController (  )  . setStatusOnly ( true )  ;", "this . registrations . add ( registration )  ;", "}", "METHOD_END"], "methodName": ["addStatusController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistry"}, {"methodBody": ["METHOD_START", "{", "ViewControllerRegistration   registration    =    new   ViewControllerRegistration ( urlPath )  ;", "registration . setApplicationContext ( this . applicationContext )  ;", "this . registrations . add ( registration )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["addViewController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . registrations . isEmpty (  )  )     &  &     ( this . redirectRegistrations . isEmpty (  )  )  )     {", "return   null ;", "}", "Map < String ,    Object >    urlMap    =    new   LinkedHashMap <  >  (  )  ;", "for    ( ation   registration    :    this . registrations )     {", "urlMap . put ( registration . getUrlPath (  )  ,    registration . getViewController (  )  )  ;", "}", "for    ( Redirectation   registration    :    this . redirectRegistrations )     {", "urlMap . put ( registration . getUrlPath (  )  ,    registration . getViewController (  )  )  ;", "}", "SimpleUrlHandlerMapping   handlerMapping    =    new   SimpleUrlHandlerMapping (  )  ;", "handlerMapping . setUrlMap ( urlMap )  ;", "handlerMapping . setOrder ( this . order )  ;", "return   handlerMapping ;", "}", "METHOD_END"], "methodName": ["buildHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistry"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistry"}, {"methodBody": ["METHOD_START", "{", "this . registry . addRedirectViewController (  \"  / path \"  ,     \"  / redirectTo \"  )  ;", "RedirectView   redirectView    =    getRedirectView (  \"  / path \"  )  ;", "this . request . setQueryString (  \" a = b \"  )  ;", "this . request . setContextPath (  \"  / context \"  )  ;", "redirectView . render ( Collections . emptyMap (  )  ,    this . request ,    this . response )  ;", "assertEquals (  3  0  2  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  / context / redirectTo \"  ,    this . response . getRedirectedUrl (  )  )  ;", "assertNotNull ( redirectView . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addRedirectViewController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addRedirectViewController (  \"  / path \"  ,     \"  / redirectTo \"  )  . setContextRelative ( false )  . setKeepQueryParams ( true )  . setStatusCode ( PERMANENT _ REDIRECT )  ;", "RedirectView   redirectView    =    getRedirectView (  \"  / path \"  )  ;", "this . request . setQueryString (  \" a = b \"  )  ;", "this . request . setContextPath (  \"  / context \"  )  ;", "redirectView . render ( Collections . emptyMap (  )  ,    this . request ,    this . response )  ;", "assertEquals (  3  0  8  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  / redirectTo ? a = b \"  ,    response . getRedirectedUrl (  )  )  ;", "assertNotNull ( redirectView . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addRedirectViewControllerWithCustomSettings"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addStatusController (  \"  / path \"  ,    NOT _ FOUND )  ;", "Parameterizable   controller    =    getController (  \"  / path \"  )  ;", "assertNull ( controller . getViewName (  )  )  ;", "assertEquals ( NOT _ FOUND ,    controller . getStatusCode (  )  )  ;", "assertTrue ( controller . isStatusOnly (  )  )  ;", "assertNotNull ( controller . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addStatusController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addViewController (  \"  / path \"  )  . setViewName (  \" viewName \"  )  ;", "ParameterizableViewController   controller    =    getController (  \"  / path \"  )  ;", "assertEquals (  \" viewName \"  ,    controller . getViewName (  )  )  ;", "assertNull ( controller . getStatusCode (  )  )  ;", "assertFalse ( controller . isStatusOnly (  )  )  ;", "assertNotNull ( controller . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addViewController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addViewController (  \"  / path \"  )  ;", "ParameterizableViewController   controller    =    getController (  \"  / path \"  )  ;", "assertNull ( controller . getViewName (  )  )  ;", "assertNull ( controller . getStatusCode (  )  )  ;", "assertFalse ( controller . isStatusOnly (  )  )  ;", "assertNotNull ( controller . getApplicationContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addViewControllerWithDefaultViewName"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,     ?  >    urlMap    =    this . registry . buildHandlerMapping (  )  . getUrlMap (  )  ;", "Parameterizable   controller    =     (  ( Parameterizable )     ( urlMap . get ( path )  )  )  ;", "assertNotNull ( controller )  ;", "return   controller ;", "}", "METHOD_END"], "methodName": ["getController"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "ParameterizableViewController   controller    =    getController ( path )  ;", "assertNull ( controller . getViewName (  )  )  ;", "assertNotNull ( controller . getView (  )  )  ;", "assertEquals ( RedirectView . class ,    controller . getView (  )  . getClass (  )  )  ;", "return    (  ( RedirectView )     ( controller . getView (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRedirectView"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( this . registry . buildHandlerMapping (  )  )  ;", "}", "METHOD_END"], "methodName": ["noViewControllers"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . addViewController (  \"  / path \"  )  ;", "SimpleUrlHandlerMapping   handlerMapping    =    this . registry . buildHandlerMapping (  )  ;", "assertEquals (  1  ,    handlerMapping . getOrder (  )  )  ;", "this . registry . setOrder (  2  )  ;", "handlerMapping    =    this . registry . buildHandlerMapping (  )  ;", "assertEquals (  2  ,    handlerMapping . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["order"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry    =    new   ViewControllerRegistry ( new   StaticApplicationContext (  )  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.config.annotation.ViewControllerRegistryTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletResponse   response    =    runTest ( ViewResolutionIntegrationTests . ExistingViewResolverConfig . class )  ;", "assertEquals (  \"  < html >  < body > Hello   World !  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["existingViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletResponse   response    =    runTest ( ViewResolutionIntegrationTests . FreeMarkerWebConfig . class )  ;", "assertEquals (  \"  < html >  < body > Hello   World !  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["freemarker"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . thrown . expectMessage (  \" In   addition   to   a   FreeMarker   view   resolver    \"  )  ;", "runTest (  . InvalidFreeMarkerWebConfig . class )  ;", "}", "METHOD_END"], "methodName": ["freemarkerInvalidConfig"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletResponse   response    =    runTest ( ViewResolutionIntegrationTests . GroovyMarkupWebConfig . class )  ;", "assertEquals (  \"  < html >  < body > Hello   World !  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["groovyMarkup"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . thrown . expectMessage (  \" In   addition   to   a   Groovy   markup   view   resolver    \"  )  ;", "runTest (  . InvalidGroovyMarkupWebConfig . class )  ;", "}", "METHOD_END"], "methodName": ["groovyMarkupInvalidConfig"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "String   basePath    =     \" org / springframework / web / servlet / config / annotation \"  ;", "MockServletContext   servletContext    =    new   MockServletContext ( basePath )  ;", "MockServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . register ( configClass )  ;", "context . setServletContext ( servletContext )  ;", "context . refresh (  )  ;", "DispatcherServlet   servlet    =    new   DispatcherServlet ( context )  ;", "servlet . init ( servletConfig )  ;", "servlet . service ( request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["runTest"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletResponse   response    =    runTest ( ViewResolutionIntegrationTests . TilesWebConfig . class )  ;", "assertEquals (  \"  / WEB - INF / index . jsp \"  ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["tiles"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . thrown . expectMessage (  \" In   addition   to   a   Tiles   view   resolver    \"  )  ;", "runTest (  . InvalidTilesWebConfig . class )  ;", "}", "METHOD_END"], "methodName": ["tilesInvalidConfig"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanNameViewResolver   resolver    =    new   BeanNameViewResolver (  )  ;", "this . viewResolvers . add ( resolver )  ;", "}", "METHOD_END"], "methodName": ["beanName"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . applicationContext )     =  =    null )     |  |     (  !  ( ObjectUtils . isEmpty ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . applicationContext ,    beanType ,    false ,    false )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["checkBeanOfType"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiatingViewResolver   vr    =    initContentNegotiatingViewResolver ( defaultViews )  ;", "vr . setUseNotAcceptableStatusCode ( useNotAcceptableStatus )  ;", "}", "METHOD_END"], "methodName": ["enableContentNegotiation"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "initContentNegotiatingViewResolver ( defaultViews )  ;", "}", "METHOD_END"], "methodName": ["enableContentNegotiation"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( checkBeanOfType ( FreeMarkerConfigurer . class )  )  )     {", "throw   new   BeanInitializationException (  (  \" In   addition   to   a   FreeMarker   view   resolver    \"     +     (  (  \" there   must   also   be   a   single   FreeMarkerConfig   bean   in   this   web   application   context    \"     +     \"  ( or   its   parent )  :    FreeMarkerConfigurer   is   the   usual   implementation .     \"  )     +     \" This   bean   may   be   given   any   name .  \"  )  )  )  ;", "}", ". FreeMarkerRegistration   registration    =    new    . FreeMarkerRegistration (  )  ;", "this . viewResolvers . add ( registration . getViewResolver (  )  )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["freeMarker"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "return    ( this . order )     !  =    null    ?    this . order    :    Ordered . LOWEST _ PRECEDENCE ;", "}", "METHOD_END"], "methodName": ["getOrder"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . contentNegotiatingResolver )     !  =    null )     {", "return   Collections .  <  > singletonList ( this . contentNegotiatingResolver )  ;", "} else    {", "return   this . viewResolvers ;", "}", "}", "METHOD_END"], "methodName": ["getViewResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( checkBeanOfType ( GroovyMarkupConfigurer . class )  )  )     {", "throw   new   BeanInitializationException (  (  \" In   addition   to   a   Groovy   markup   view   resolver    \"     +     (  (  \" there   must   also   be   a   single   GroovyMarkupConfig   bean   in   this   web   application   context    \"     +     \"  ( or   its   parent )  :    GroovyMarkupConfigurer   is   the   usual   implementation .     \"  )     +     \" This   bean   may   be   given   any   name .  \"  )  )  )  ;", "}", ". GroovyMarkupRegistration   registration    =    new    . GroovyMarkupRegistration (  )  ;", "this . viewResolvers . add ( registration . getViewResolver (  )  )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["groovy"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . contentNegotiatingResolver )     !  =    null )     |  |     (  !  ( this . viewResolvers . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hasRegistrations"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "this . order    =     (  ( this . order )     !  =    null )     ?    this . order    :    Ordered . HIGHEST _ PRECEDENCE ;", "if    (  ( this . contentNegotiatingResolver )     !  =    null )     {", "if    (  (  !  ( ObjectUtils . isEmpty ( defaultViews )  )  )     &  &     (  !  ( CollectionUtils . isEmpty ( this . contentNegotiatingResolver . getDefaultViews (  )  )  )  )  )     {", "List < View >    views    =    new   ArrayList <  >  ( this . contentNegotiatingResolver . getDefaultViews (  )  )  ;", "views . addAll ( Arrays . asList ( defaultViews )  )  ;", "this . contentNegotiatingResolver . setDefaultViews ( views )  ;", "}", "} else    {", "this . contentNegotiatingResolver    =    new   ContentNegotiating (  )  ;", "this . contentNegotiatingResolver . setDefaultViews ( Arrays . asList ( defaultViews )  )  ;", "this . contentNegotiatingResolver . sets ( this . viewResolvers )  ;", "if    (  ( this . contentNegotiationManager )     !  =    null )     {", "this . contentNegotiatingResolver . setContentNegotiationManager ( this . contentNegotiationManager )  ;", "}", "}", "return   this . contentNegotiatingResolver ;", "}", "METHOD_END"], "methodName": ["initContentNegotiatingViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "return   jsp (  \"  / WEB - INF /  \"  ,     \"  . jsp \"  )  ;", "}", "METHOD_END"], "methodName": ["jsp"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "InternalResourceViewResolver   resolver    =    new   InternalResourceViewResolver (  )  ;", "resolver . setPrefix ( prefix )  ;", "resolver . setSuffix ( suffix )  ;", "this . viewResolvers . add ( resolver )  ;", "return   new   UrlBasedation ( resolver )  ;", "}", "METHOD_END"], "methodName": ["jsp"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["order"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( checkBeanOfType ( ScriptTemplateConfigurer . class )  )  )     {", "throw   new   BeanInitializationException (  (  \" In   addition   to   a   script   template   view   resolver    \"     +     (  (  \" there   must   also   be   a   single   ScriptTemplateConfig   bean   in   this   web   application   context    \"     +     \"  ( or   its   parent )  :    ScriptTemplateConfigurer   is   the   usual   implementation .     \"  )     +     \" This   bean   may   be   given   any   name .  \"  )  )  )  ;", "}", ". ScriptRegistration   registration    =    new    . ScriptRegistration (  )  ;", "this . viewResolvers . add ( registration . getViewResolver (  )  )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["scriptTemplate"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( checkBeanOfType ( TilesConfigurer . class )  )  )     {", "throw   new   BeanInitializationException (  (  \" In   addition   to   a   Tiles   view   resolver    \"     +     (  \" there   must   also   be   a   single   TilesConfigurer   bean   in   this   web   application   context    \"     +     \"  ( or   its   parent )  .  \"  )  )  )  ;", "}", ". TilesRegistration   registration    =    new    . TilesRegistration (  )  ;", "this . viewResolvers . add ( registration . getViewResolver (  )  )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["tiles"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( viewResolver   instanceof   ContentNegotiatingViewResolver )     {", "throw   new   BeanInitializationException (  (  \" addViewResolver   cannot   be   used   to   configure   a   ContentNegotiatingViewResolver .     \"     +     \" Please   use   the   method   enableContentNegotiation   instead .  \"  )  )  ;", "}", "this . viewResolvers . add ( viewResolver )  ;", "}", "METHOD_END"], "methodName": ["viewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistry"}, {"methodBody": ["METHOD_START", "{", "this . registry . beanName (  )  ;", "assertEquals (  1  ,    this . registry . gets (  )  . size (  )  )  ;", "assertEquals ( BeanName . class ,    registry . gets (  )  . get (  0  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["beanName"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( this . registry . getViewResolvers (  )  )  ;", "assertEquals (  1  ,    this . registry . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( resolverType ,    this . registry . getViewResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "return    (  ( T )     ( registry . getViewResolvers (  )  . get (  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["checkAndGetResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( resolver )  ;", "for    ( int   i    =     0  ;    i    <     ( nameValuePairs . length )  ;    i +  +     ,    i +  +  )     {", "Object   expected    =    nameValuePairs [  ( i    +     1  )  ]  ;", "Object   actual    =    accessor . getPropertyValue (  (  ( String )     ( nameValuePairs [ i ]  )  )  )  ;", "assertEquals ( expected ,    actual )  ;", "}", "}", "METHOD_END"], "methodName": ["checkPropertyValues"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "MappingJackson 2 JsonView   view    =    new   MappingJackson 2 JsonView (  )  ;", "this . registry . enableContentNegotiation ( view )  ;", "ContentNegotiating   resolver    =    checkAndGetResolver ( ContentNegotiating . class )  ;", "assertEquals ( Arrays . asList ( view )  ,    resolver . getDefaultViews (  )  )  ;", "assertEquals ( HIGHEST _ PRECEDENCE ,    this . registry . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["contentNegotiation"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "MappingJackson 2 JsonView   view 1     =    new   MappingJackson 2 JsonView (  )  ;", "this . registry . enableContentNegotiation ( view 1  )  ;", "ContentNegotiating   resolver 1     =    checkAndGetResolver ( ContentNegotiating . class )  ;", "assertEquals ( Arrays . asList ( view 1  )  ,    resolver 1  . getDefaultViews (  )  )  ;", "MarshallingView   view 2     =    new   MarshallingView (  )  ;", "this . registry . enableContentNegotiation ( view 2  )  ;", "ContentNegotiating   resolver 2     =    checkAndGetResolver ( ContentNegotiating . class )  ;", "assertEquals ( Arrays . asList ( view 1  ,    view 2  )  ,    resolver 2  . getDefaultViews (  )  )  ;", "assertSame ( resolver 1  ,    resolver 2  )  ;", "}", "METHOD_END"], "methodName": ["contentNegotiationAddsDefaultViewRegistrations"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "InternalResourceViewResolver   viewResolver    =    new   InternalResourceViewResolver (  \"  /  \"  ,     \"  . jsp \"  )  ;", "this . registry . viewResolver ( viewResolver )  ;", "assertSame ( viewResolver ,    this . registry . getViewResolvers (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["customViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . freeMarker (  )  . prefix (  \"  /  \"  )  . suffix (  \"  . fmt \"  )  . cache ( false )  ;", "FreeMarker   resolver    =    checkAndGetResolver ( FreeMarker . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  /  \"  ,     \" suffix \"  ,     \"  . fmt \"  ,     \" cacheLimit \"  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["freeMarker"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . freeMarker (  )  ;", "FreeMarker   resolver    =    checkAndGetResolver ( FreeMarker . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  \"  ,     \" suffix \"  ,     \"  . ftl \"  )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerDefaultValues"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . groovy (  )  . prefix (  \"  /  \"  )  . suffix (  \"  . groovy \"  )  . cache ( true )  ;", "GroovyMarkup   resolver    =    checkAndGetResolver ( GroovyMarkup . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  /  \"  ,     \" suffix \"  ,     \"  . groovy \"  ,     \" cacheLimit \"  ,     1  0  2  4  )  ;", "}", "METHOD_END"], "methodName": ["groovyMarkup"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . groovy (  )  ;", "GroovyMarkup   resolver    =    checkAndGetResolver ( GroovyMarkup . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  \"  ,     \" suffix \"  ,     \"  . tpl \"  )  ;", "}", "METHOD_END"], "methodName": ["groovyMarkupDefaultValues"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . registry . hasRegistrations (  )  )  ;", "this . registry . freeMarker (  )  ;", "assertTrue ( this . registry . hasRegistrations (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasRegistrations"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . registry . hasRegistrations (  )  )  ;", "this . registry . enableContentNegotiation (  )  ;", "assertTrue ( this . registry . hasRegistrations (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasRegistrationsWhenContentNegotiationEnabled"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . jsp (  \"  /  \"  ,     \"  . jsp \"  )  ;", "InternalResource   resolver    =    checkAndGetResolver ( InternalResource . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  /  \"  ,     \" suffix \"  ,     \"  . jsp \"  )  ;", "}", "METHOD_END"], "methodName": ["jsp"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . jsp (  )  ;", "InternalResource   resolver    =    checkAndGetResolver ( InternalResource . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  / WEB - INF /  \"  ,     \" suffix \"  ,     \"  . jsp \"  )  ;", "}", "METHOD_END"], "methodName": ["jspDefaultValues"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . jsp (  )  . viewNames (  \" view 1  \"  ,     \" view 2  \"  )  ;", "this . registry . jsp (  )  . viewNames (  \" view 3  \"  ,     \" view 4  \"  )  ;", "assertNotNull ( this . registry . gets (  )  )  ;", "assertEquals (  2  ,    this . registry . gets (  )  . size (  )  )  ;", "assertEquals ( InternalResource . class ,    this . registry . gets (  )  . get (  0  )  . getClass (  )  )  ;", "assertEquals ( InternalResource . class ,    this . registry . gets (  )  . get (  1  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["jspMultipleResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( this . registry . getViewResolvers (  )  )  ;", "assertEquals (  0  ,    this . registry . getViewResolvers (  )  . size (  )  )  ;", "assertFalse ( this . registry . hasRegistrations (  )  )  ;", "}", "METHOD_END"], "methodName": ["noResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( LOWEST _ PRECEDENCE ,    this . registry . getOrder (  )  )  ;", "this . registry . enableContentNegotiation (  )  ;", "assertEquals ( HIGHEST _ PRECEDENCE ,    this . registry . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["order"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . scriptTemplate (  )  . prefix (  \"  /  \"  )  . suffix (  \"  . html \"  )  . cache ( true )  ;", "ScriptTemplate   resolver    =    checkAndGetResolver ( ScriptTemplate . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  /  \"  ,     \" suffix \"  ,     \"  . html \"  ,     \" cacheLimit \"  ,     1  0  2  4  )  ;", "}", "METHOD_END"], "methodName": ["scriptTemplate"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . scriptTemplate (  )  ;", "ScriptTemplate   resolver    =    checkAndGetResolver ( ScriptTemplate . class )  ;", "checkPropertyValues ( resolver ,     \" prefix \"  ,     \"  \"  ,     \" suffix \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["scriptTemplateDefaultValues"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   context    =    new   StaticWebApplicationContext (  )  ;", "context . registerSingleton (  \" freeMarkerConfigurer \"  ,    FreeMarkerConfigurer . class )  ;", "context . registerSingleton (  \" tilesConfigurer \"  ,    TilesConfigurer . class )  ;", "context . registerSingleton (  \" groovyMarkupConfigurer \"  ,    GroovyMarkupConfigurer . class )  ;", "context . registerSingleton (  \" scriptTemplateConfigurer \"  ,    ScriptTemplateConfigurer . class )  ;", "this . registry    =    new    ( new   ContentNegotiationManager (  )  ,    context )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "this . registry . tiles (  )  ;", "checkAndGetResolver ( Tiles . class )  ;", "}", "METHOD_END"], "methodName": ["tiles"], "fileName": "org.springframework.web.servlet.config.annotation.ViewResolverRegistryTests"}, {"methodBody": ["METHOD_START", "{", "ExceptionHandlerExceptionResolver   exceptionHandlerResolver    =    createExceptionHandlerExceptionResolver (  )  ;", "exceptionHandlerResolver . setContentNegotiationManager ( mvcContentNegotiationManager (  )  )  ;", "exceptionHandlerResolver . setMessageConverters ( getMessageConverters (  )  )  ;", "exceptionHandlerResolver . setCustomArgumentResolvers ( getArgumentResolvers (  )  )  ;", "exceptionHandlerResolver . setCustomReturnValueHandlers ( getReturnValueHandlers (  )  )  ;", "if    (  . jackson 2 Present )     {", "exceptionHandlerResolver . setResponseBodyAdvice ( Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "}", "if    (  ( this . applicationContext )     !  =    null )     {", "exceptionHandlerResolver . setApplicationContext ( this . applicationContext )  ;", "}", "exceptionHandlerResolver . afterPropertiesSet (  )  ;", "exceptionResolvers . add ( exceptionHandlerResolver )  ;", "ResponseStatusExceptionResolver   responseStatusResolver    =    new   ResponseStatusExceptionResolver (  )  ;", "responseStatusResolver . setMessageSource ( this . applicationContext )  ;", "exceptionResolvers . add ( responseStatusResolver )  ;", "exceptionResolvers . add ( new   DefaultHandlerExceptionResolver (  )  )  ;", "}", "METHOD_END"], "methodName": ["addDefaultHandlerExceptionResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "StringHttpMessageConverter   stringHttpMessageConverter    =    new   StringHttpMessageConverter (  )  ;", "stringHttpMessageConverter . setWriteAcceptCharset ( false )  ;", "messageConverters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "messageConverters . add ( stringHttpMessageConverter )  ;", "messageConverters . add ( new   ResourceHttpMessageConverter (  )  )  ;", "messageConverters . add ( new   ResourceRegionHttpMessageConverter (  )  )  ;", "messageConverters . add ( new   SourceHttpMessageConverter (  )  )  ;", "messageConverters . add ( new   AllEncompassingFormHttpMessageConverter (  )  )  ;", "if    (  . romePresent )     {", "messageConverters . add ( new   AtomFeedHttpMessageConverter (  )  )  ;", "messageConverters . add ( new   RssChannelHttpMessageConverter (  )  )  ;", "}", "if    (  . jackson 2 XmlPresent )     {", "Jackson 2 ObjectMapperBuilder   builder    =    Jackson 2 ObjectMapperBuilder . xml (  )  ;", "if    (  ( this . applicationContext )     !  =    null )     {", "builder . applicationContext ( this . applicationContext )  ;", "}", "messageConverters . add ( new   MappingJackson 2 XmlHttpMessageConverter ( builder . build (  )  )  )  ;", "} else", "if    (  . jaxb 2 Present )     {", "messageConverters . add ( new   Jaxb 2 RootElementHttpMessageConverter (  )  )  ;", "}", "if    (  . jackson 2 Present )     {", "Jackson 2 ObjectMapperBuilder   builder    =    Jackson 2 ObjectMapperBuilder . json (  )  ;", "if    (  ( this . applicationContext )     !  =    null )     {", "builder . applicationContext ( this . applicationContext )  ;", "}", "messageConverters . add ( new   MappingJackson 2 HttpMessageConverter ( builder . build (  )  )  )  ;", "} else", "if    (  . gsonPresent )     {", "messageConverters . add ( new   GsonHttpMessageConverter (  )  )  ;", "} else", "if    (  . jsonbPresent )     {", "messageConverters . add ( new   JsonbHttpMessageConverter (  )  )  ;", "}", "if    (  . jackson 2 SmilePresent )     {", "Jackson 2 ObjectMapperBuilder   builder    =    Jackson 2 ObjectMapperBuilder . smile (  )  ;", "if    (  ( this . applicationContext )     !  =    null )     {", "builder . applicationContext ( this . applicationContext )  ;", "}", "messageConverters . add ( new   MappingJackson 2 SmileHttpMessageConverter ( builder . build (  )  )  )  ;", "}", "if    (  . jackson 2 CborPresent )     {", "Jackson 2 ObjectMapperBuilder   builder    =    Jackson 2 ObjectMapperBuilder . cbor (  )  ;", "if    (  ( this . applicationContext )     !  =    null )     {", "builder . applicationContext ( this . applicationContext )  ;", "}", "messageConverters . add ( new   MappingJackson 2 CborHttpMessageConverter ( builder . build (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addDefaultHttpMessageConverters"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "BeanNameUrlHandlerMapping   mapping    =    new   BeanNameUrlHandlerMapping (  )  ;", "mapping . setOrder (  2  )  ;", "mapping . setInterceptors ( getInterceptors (  )  )  ;", "mapping . setCorss ( getCorss (  )  )  ;", "return   mapping ;", "}", "METHOD_END"], "methodName": ["beanNameHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   ExceptionHandlerExceptionResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createExceptionHandlerExceptionResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   RequestMappingHandlerAdapter (  )  ;", "}", "METHOD_END"], "methodName": ["createRequestMappingHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   RequestMappingHandlerMapping (  )  ;", "}", "METHOD_END"], "methodName": ["createRequestMappingHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . servletContext )     !  =    null )  ,     \" No   ServletContext   set \"  )  ;", "DefaultServletHandlerConfigurer   configurer    =    new   DefaultServletHandlerConfigurer ( this . servletContext )  ;", "configureDefaultServletHandling ( configurer )  ;", "HandlerMapping   handlerMapping    =    configurer . buildHandlerMapping (  )  ;", "return   handlerMapping    !  =    null    ?    handlerMapping    :    new    . EmptyHandlerMapping (  )  ;", "}", "METHOD_END"], "methodName": ["defaultServletHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . applicationContext ;", "}", "METHOD_END"], "methodName": ["getApplicationContext"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . argumentResolvers )     =  =    null )     {", "this . argumentResolvers    =    new   ArrayList (  )  ;", "addArgumentResolvers ( this . argumentResolvers )  ;", "}", "return   this . argumentResolvers ;", "}", "METHOD_END"], "methodName": ["getArgumentResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "ConfigurableWebBindingInitializer   initializer    =    new   ConfigurableWebBindingInitializer (  )  ;", "initializer . setConversionService ( mvcConversionService (  )  )  ;", "initializer . setValidator ( mvcValidator (  )  )  ;", "MessageCodesResolver   messageCodesResolver    =    getMessageCodesResolver (  )  ;", "if    ( messageCodesResolver    !  =    null )     {", "initializer . setMessageCodesResolver ( messageCodesResolver )  ;", "}", "return   initializer ;", "}", "METHOD_END"], "methodName": ["getConfigurableWebBindingInitializer"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . corsConfigurations )     =  =    null )     {", "CorsRegistry   registry    =    new   CorsRegistry (  )  ;", "addCorsMappings ( registry )  ;", "this . corsConfigurations    =    registry . getCorsConfigurations (  )  ;", "}", "return   this . corsConfigurations ;", "}", "METHOD_END"], "methodName": ["getCorsConfigurations"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MediaType >    map    =    new   HashMap <  >  (  4  )  ;", "if    (  . romePresent )     {", "map . put (  \" atom \"  ,    APPLICATION _ ATOM _ XML )  ;", "map . put (  \" rss \"  ,    APPLICATION _ RSS _ XML )  ;", "}", "if    (  (  . jaxb 2 Present )     |  |     (  . jackson 2 XmlPresent )  )     {", "map . put (  \" xml \"  ,    APPLICATION _ XML )  ;", "}", "if    (  (  (  . jackson 2 Present )     |  |     (  . gsonPresent )  )     |  |     (  . jsonbPresent )  )     {", "map . put (  \" json \"  ,    APPLICATION _ JSON )  ;", "}", "if    (  . jackson 2 SmilePresent )     {", "map . put (  \" smile \"  ,    MediaType . valueOf (  \" application / x - jackson - smile \"  )  )  ;", "}", "if    (  . jackson 2 CborPresent )     {", "map . put (  \" cbor \"  ,    MediaType . valueOf (  \" application / cbor \"  )  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["getDefaultMediaTypes"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . interceptors )     =  =    null )     {", "InterceptorRegistry   registry    =    new   InterceptorRegistry (  )  ;", "addInterceptors ( registry )  ;", "registry . addInterceptor ( new   ConversionServiceExposingInterceptor ( mversionService (  )  )  )  ;", "registry . addInterceptor ( new   ResourceUrlProviderExposingInterceptor ( mvcResourceUrlProvider (  )  )  )  ;", "this . interceptors    =    registry . getInterceptors (  )  ;", "}", "return   this . interceptors . toArray (  )  ;", "}", "METHOD_END"], "methodName": ["getInterceptors"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getMessageCodesResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . messageConverters )     =  =    null )     {", "this . messageConverters    =    new   ArrayList (  )  ;", "ceMessageConverters ( this . messageConverters )  ;", "if    ( this . messageConverters . isEmpty (  )  )     {", "addDefaultHttpMessageConverters ( this . messageConverters )  ;", "}", "extendMessageConverters ( this . messageConverters )  ;", "}", "return   this . messageConverters ;", "}", "METHOD_END"], "methodName": ["getMessageConverters"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . pathMatchConfigurer )     =  =    null )     {", "this . pathMatchConfigurer    =    new   PathMatchConfigurer (  )  ;", "configurePathMatch ( this . pathMatchConfigurer )  ;", "}", "return   this . pathMatchConfigurer ;", "}", "METHOD_END"], "methodName": ["getPathMatchConfigurer"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . returnValueHandlers )     =  =    null )     {", "this . returnValueHandlers    =    new   ArrayList (  )  ;", "addReturnValueHandlers ( this . returnValueHandlers )  ;", "}", "return   this . returnValueHandlers ;", "}", "METHOD_END"], "methodName": ["getReturnValueHandlers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . servletContext ;", "}", "METHOD_END"], "methodName": ["getServletContext"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getValidator"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "List < HandlerExceptionResolver >    exceptionResolvers    =    new   ArrayList <  >  (  )  ;", "ceHandlerExceptionResolvers ( exceptionResolvers )  ;", "if    ( exceptionResolvers . isEmpty (  )  )     {", "addDefaultHandlerExceptionResolvers ( exceptionResolvers )  ;", "}", "extendHandlerExceptionResolvers ( exceptionResolvers )  ;", "HandlerExceptionResolverComposite   composite    =    new   HandlerExceptionResolverComposite (  )  ;", "composite . setOrder (  0  )  ;", "composite . setExceptionResolvers ( exceptionResolvers )  ;", "return   composite ;", "}", "METHOD_END"], "methodName": ["handlerExceptionResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   HttpRequestHandlerAdapter (  )  ;", "}", "METHOD_END"], "methodName": ["httpRequestHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . contentNegotiationManager )     =  =    null )     {", "ContentNegotiationConfigurer   configurer    =    new   ContentNegotiationConfigurer ( thisContext )  ;", "configurer . mediaTypes ( getDefaultMediaTypes (  )  )  ;", "configureContentNegotiation ( configurer )  ;", "this . contentNegotiationManager    =    configurer . buildContentNegotiationManager (  )  ;", "}", "return   this . contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["mvcContentNegotiationManager"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "FormattingConversionService   conversionService    =    new   DefaultFormattingConversionService (  )  ;", "addFormatters ( conversionService )  ;", "return   conversionService ;", "}", "METHOD_END"], "methodName": ["mvcConversionService"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   HandlerMappingIntrospector (  )  ;", "}", "METHOD_END"], "methodName": ["mvcHandlerMappingIntrospector"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "PathMatcher   pathMatcher    =    getPathMatchConfigurer (  )  . getPathMatcher (  )  ;", "return   pathMatcher    !  =    null    ?    pathMatcher    :    new   AntPathMatcher (  )  ;", "}", "METHOD_END"], "methodName": ["mvcPathMatcher"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "ResourceUrlProvider   urlProvider    =    new   ResourceUrlProvider (  )  ;", "UrlPathHelper   pathHelper    =    getPathMatcher (  )  . getUrlPathHelper (  )  ;", "if    ( pathHelper    !  =    null )     {", "urlProvider . setUrlPathHelper ( pathHelper )  ;", "}", "PathMatcher   pathMatcher    =    getPathMatcher (  )  . getPathMatcher (  )  ;", "if    ( pathMatcher    !  =    null )     {", "urlProvider . setPathMatcher ( pathMatcher )  ;", "}", "return   urlProvider ;", "}", "METHOD_END"], "methodName": ["mvcResourceUrlProvider"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   CompositeUriComponentsContributor ( requestMappingHandlerAdapter (  )  . getArgumentResolvers (  )  ,    mvcConversionService (  )  )  ;", "}", "METHOD_END"], "methodName": ["mvcUriComponentsContributor"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "UrlPathHelper   pathHelper    =    getPathMatchConfigurer (  )  . getUrlPathHelper (  )  ;", "return   pathHelper    !  =    null    ?    pathHelper    :    new   UrlPathHelper (  )  ;", "}", "METHOD_END"], "methodName": ["mvcUrlPathHelper"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "Validator   validator    =    getValidator (  )  ;", "if    ( validator    =  =    null )     {", "if    ( ClassUtils . isPresent (  \" Validator \"  ,    getClass (  )  . getClassLoader (  )  )  )     {", "Class <  ?  >    clazz ;", "try    {", "String   className    =     \" OptionalValidatorFactoryBean \"  ;", "clazz    =    ClassUtils . forName ( className ,     . class . getClassLoader (  )  )  ;", "}    catch    ( ClassNotFoundException    |    LinkageError   ex )     {", "throw   new   BeanInitializationException (  \" Failed   to   resolve   default   validator   class \"  ,    ex )  ;", "}", "validator    =     (  ( Validator )     ( BeanUtils . instantiateClass ( clazz )  )  )  ;", "} else    {", "validator    =    new    . NoOpValidator (  )  ;", "}", "}", "return   validator ;", "}", "METHOD_END"], "methodName": ["mvcValidator"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "ViewResolverRegistry   registry    =    new   ViewResolverRegistry ( mvcContentNegotiationManager (  )  ,    this . applicationContext )  ;", "configureViewResolvers ( registry )  ;", "if    (  ( registry . getViewResolvers (  )  . isEmpty (  )  )     &  &     (  ( this . applicationContext )     !  =    null )  )     {", "String [  ]    names    =    BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . applicationContext ,    ViewResolver . class ,    true ,    false )  ;", "if    (  ( names . length )     =  =     1  )     {", "registry . getViewResolvers (  )  . add ( new   InternalResourceViewResolver (  )  )  ;", "}", "}", "ViewResolverComposite   composite    =    new   ViewResolverComposite (  )  ;", "composite . setOrder ( registry . getOrder (  )  )  ;", "composite . setViewResolvers ( registry . getViewResolvers (  )  )  ;", "if    (  ( this . applicationContext )     !  =    null )     {", "composite . setApplicationContext ( this . applicationContext )  ;", "}", "if    (  ( thisContext )     !  =    null )     {", "composite . setServletContext ( thisContext )  ;", "}", "return   composite ;", "}", "METHOD_END"], "methodName": ["mvcViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerAdapter   adapter    =    createRequestMappingHandlerAdapter (  )  ;", "adapter . setContentNegotiationManager ( mvcContentNegotiationManager (  )  )  ;", "adapter . setMessageConverters ( getMessageConverters (  )  )  ;", "adapter . setWebBindingInitializer ( getConfigurableWebBindingInitializer (  )  )  ;", "adapter . setCustomArgumentResolvers ( getArgumentResolvers (  )  )  ;", "adapter . setCustomReturnValueHandlers ( getReturnValueHandlers (  )  )  ;", "if    (  . jackson 2 Present )     {", "adapter . setRequestBodyAdvice ( Collections . singletonList ( new   JsonViewRequestBodyAdvice (  )  )  )  ;", "adapter . setResponseBodyAdvice ( Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "}", "AsyncSupportConfigurer   configurer    =    new   AsyncSupportConfigurer (  )  ;", "configureAsyncSupport ( configurer )  ;", "if    (  ( configurer . getTaskExecutor (  )  )     !  =    null )     {", "adapter . setTaskExecutor ( configurer . getTaskExecutor (  )  )  ;", "}", "if    (  ( configurer . getTimeout (  )  )     !  =    null )     {", "adapter . setAsyncRequestTimeout ( configurer . getTimeout (  )  )  ;", "}", "adapter . setCallableInterceptors ( configurer . getCallableInterceptors (  )  )  ;", "adapter . setDeferredResultInterceptors ( configurer . getDeferredResultInterceptors (  )  )  ;", "return   adapter ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerMapping   mapping    =    createRequestMappingHandlerMapping (  )  ;", "mapping . setOrder (  0  )  ;", "mapping . setInterceptors ( getInterceptors (  )  )  ;", "mapping . setContentNegotiationManager ( mvcContentNegotiationManager (  )  )  ;", "mapping . setCorss ( getCorss (  )  )  ;", "PathMatchConfigurer   configurer    =    getPathMatchConfigurer (  )  ;", "Boolean   useSuffixPatternMatch    =    configurer . isUseSuffixPatternMatch (  )  ;", "Boolean   useRegisteredSuffixPatternMatch    =    configurer . isUseRegisteredSuffixPatternMatch (  )  ;", "Boolean   useTrailingSlashMatch    =    configurer . isUseTrailingSlashMatch (  )  ;", "if    ( useSuffixPatternMatch    !  =    null )     {", "mapping . setUseSuffixPatternMatch ( useSuffixPatternMatch )  ;", "}", "if    ( useRegisteredSuffixPatternMatch    !  =    null )     {", "mapping . setUseRegisteredSuffixPatternMatch ( useRegisteredSuffixPatternMatch )  ;", "}", "if    ( useTrailingSlashMatch    !  =    null )     {", "mapping . setUseTrailingSlashMatch ( useTrailingSlashMatch )  ;", "}", "UrlPathHelper   pathHelper    =    configurer . getUrlPathHelper (  )  ;", "if    ( pathHelper    !  =    null )     {", "mapping . setUrlPathHelper ( pathHelper )  ;", "}", "PathMatcher   pathMatcher    =    configurer . getPathMatcher (  )  ;", "if    ( pathMatcher    !  =    null )     {", "mapping . setPathMatcher ( pathMatcher )  ;", "}", "return   mapping ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . applicationContext )     !  =    null )  ,     \" No   ApplicationContext   set \"  )  ;", "Assert . state (  (  ( this . servletContext )     !  =    null )  ,     \" No   ServletContext   set \"  )  ;", "ResourceHandlerRegistry   registry    =    new   ResourceHandlerRegistry ( this . applicationContext ,    this . servletContext ,    mvcContentNegotiationManager (  )  ,    mvcUrlPathHelper (  )  )  ;", "addResourceHandlers ( registry )  ;", "AbstractHandlerMapping   handlerMapping    =    registry . getHandlerMapping (  )  ;", "if    ( handlerMapping    !  =    null )     {", "handlerMapping . setPathMatcher ( mvcPathMatcher (  )  )  ;", "handlerMapping . setUrlPathHelper ( mvcUrlPathHelper (  )  )  ;", "handlerMapping . setInterceptors ( getInterceptors (  )  )  ;", "handlerMapping . setCorsConfigurations ( getCorsConfigurations (  )  )  ;", "} else    {", "handlerMapping    =    new    . EmptyHandlerMapping (  )  ;", "}", "return   handlerMapping ;", "}", "METHOD_END"], "methodName": ["resourceHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleControllerHandlerAdapter (  )  ;", "}", "METHOD_END"], "methodName": ["simpleControllerHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "ViewControllerRegistry   registry    =    new   ViewControllerRegistry ( this . applicationContext )  ;", "addViewControllers ( registry )  ;", "AbstractHandlerMapping   handlerMapping    =    registry . buildHandlerMapping (  )  ;", "handlerMapping    =     ( handlerMapping    !  =    null )     ?    handlerMapping    :    new    . EmptyHandlerMapping (  )  ;", "handlerMapping . setPathMatcher ( mvcPathMatcher (  )  )  ;", "handlerMapping . setUrlPathHelper ( mvcUrlPathHelper (  )  )  ;", "handlerMapping . setInterceptors ( getInterceptors (  )  )  ;", "handlerMapping . setCorsConfigurations ( getCorsConfigurations (  )  )  ;", "return   handlerMapping ;", "}", "METHOD_END"], "methodName": ["viewControllerHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . json \"  )  ;", "NativeWebRequest   webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "RequestMappingHandlerMapping   mapping    =    this . config . requestMappingHandlerMapping (  )  ;", "ContentNegotiationManager   manager    =    mapping . getContentNegotiationManager (  )  ;", "assertEquals ( Collections . singletonList ( MediaType . APPLICATION _ JSON )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "request . setRequestURI (  \"  / foo . xml \"  )  ;", "assertEquals ( Collections . singletonList ( MediaType . APPLICATION _ XML )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "request . setRequestURI (  \"  / foo . rss \"  )  ;", "assertEquals ( Collections . singletonList ( MediaType . valueOf (  \" application / rss + xml \"  )  )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "request . setRequestURI (  \"  / foo . atom \"  )  ;", "assertEquals ( Collections . singletonList ( MediaType . APPLICATION _ ATOM _ XML )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "request . setRequestURI (  \"  / foo \"  )  ;", "request . setParameter (  \" f \"  ,     \" json \"  )  ;", "assertEquals ( Collections . singletonList ( MediaType . APPLICATION _ JSON )  ,    manager . resolveMediaTypes ( webRequest )  )  ;", "request . setRequestURI (  \"  / resources / foo . gif \"  )  ;", "SimpleUrlHandlerMapping   handlerMapping    =     (  ( SimpleUrlHandlerMapping )     ( this . config . resourceHandlerMapping (  )  )  )  ;", "handlerMapping . setApplicationContext ( this . context )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( request )  ;", "assertNotNull ( chain )  ;", "ResourceHttpRequestHandler   handler    =     (  ( ResourceHttpRequestHandler )     ( chain . getHandler (  )  )  )  ;", "assertNotNull ( handler )  ;", "assertSame ( manager ,    handler . getContentNegotiationManager (  )  )  ;", "}", "METHOD_END"], "methodName": ["contentNegotiation"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    CorsConfiguration >    configs    =    this . config . getCorsConfigurations (  )  ;", "assertEquals (  1  ,    configs . size (  )  )  ;", "assertEquals (  \"  *  \"  ,    configs . get (  \"  / resources /  *  *  \"  )  . getAllowedOrigins (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["crossOrigin"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "List < HandlerExceptionResolver >    resolvers    =     (  ( HandlerExceptionResolverComposite )     ( this . config . handlerExceptionResolver (  )  )  )  . getExceptionResolvers (  )  ;", "assertEquals (  2  ,    resolvers . size (  )  )  ;", "assertEquals ( ResponseStatusExceptionResolver . class ,    resolvers . get (  0  )  . getClass (  )  )  ;", "assertEquals ( SimpleMappingExceptionResolver . class ,    resolvers . get (  1  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["exceptionResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerMapping   rmHandlerMapping    =    this . config . requestMappingHandlerMapping (  )  ;", "rmHandlerMapping . setApplicationContext ( this . context )  ;", "rmHandlerMapping . afterPropertiesSet (  )  ;", "assertEquals (  . TestPathHelper . class ,    rmHandlerMapping . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    rmHandlerMapping . getPathMatcher (  )  . getClass (  )  )  ;", "HandlerExecutionChain   chain    =    rmHandlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getInterceptors (  )  )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "assertEquals ( LocaleChangeInterceptor . class ,    chain . getInterceptors (  )  [  0  ]  . getClass (  )  )  ;", "assertEquals ( ConversionServiceExposingInterceptor . class ,    chain . getInterceptors (  )  [  1  ]  . getClass (  )  )  ;", "assertEquals ( ResourceUrlProviderExposingInterceptor . class ,    chain . getInterceptors (  )  [  2  ]  . getClass (  )  )  ;", "AbstractHandlerMapping   handlerMapping    =     (  ( AbstractHandlerMapping )     ( this . config . viewControllerHandlerMapping (  )  )  )  ;", "handlerMapping . setApplicationContext ( this . context )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals (  1  ,    handlerMapping . getOrder (  )  )  ;", "assertEquals (  . TestPathHelper . class ,    handlerMapping . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    handlerMapping . getPathMatcher (  )  . getClass (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / bad \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / old \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "handlerMapping    =     (  ( AbstractHandlerMapping )     ( this . config . resourceHandlerMapping (  )  )  )  ;", "handlerMapping . setApplicationContext ( this . context )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals (  (  ( Integer . MAX _ VALUE )     -     1  )  ,    handlerMapping . getOrder (  )  )  ;", "assertEquals (  . TestPathHelper . class ,    handlerMapping . getUrlPathHelper (  )  . getClass (  )  )  ;", "assertEquals (  . TestPathMatcher . class ,    handlerMapping . getPathMatcher (  )  . getClass (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / resources / foo . gif \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "assertEquals ( Arrays . toString ( chain . getInterceptors (  )  )  ,     4  ,    chain . getInterceptors (  )  . length )  ;", "assertEquals ( LocaleChangeInterceptor . class ,    chain . getInterceptors (  )  [  1  ]  . getClass (  )  )  ;", "assertEquals ( ConversionServiceExposingInterceptor . class ,    chain . getInterceptors (  )  [  2  ]  . getClass (  )  )  ;", "assertEquals ( ResourceUrlProviderExposingInterceptor . class ,    chain . getInterceptors (  )  [  3  ]  . getClass (  )  )  ;", "handlerMapping    =     (  ( AbstractHandlerMapping )     ( this . config . defaultServletHandlerMapping (  )  )  )  ;", "handlerMapping . setApplicationContext ( this . context )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / anyPath \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "}", "METHOD_END"], "methodName": ["handlerMappings"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerAdapter   adapter    =    this . config . requestMappingHandlerAdapter (  )  ;", "String   actual    =    this . config . mvcConversionService (  )  . convert ( new   TestBean (  )  ,    String . class )  ;", "assertEquals (  \" converted \"  ,    actual )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    adapter . getMessageConverters (  )  ;", "assertEquals (  2  ,    converters . size (  )  )  ;", "assertEquals ( StringHttpMessageConverter . class ,    converters . get (  0  )  . getClass (  )  )  ;", "assertEquals ( MappingJackson 2 HttpMessageConverter . class ,    converters . get (  1  )  . getClass (  )  )  ;", "ObjectMapper   objectMapper    =     (  ( MappingJackson 2 HttpMessageConverter )     ( converters . get (  1  )  )  )  . getObjectMapper (  )  ;", "assertFalse ( objectMapper . getDeserializationConfig (  )  . isEnabled ( MapperFeature . DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( objectMapper . getSerializationConfig (  )  . isEnabled ( MapperFeature . DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( objectMapper . getDeserializationConfig (  )  . isEnabled ( DeserializationFeature . FAIL _ ON _ UNKNOWN _ PROPERTIES )  )  ;", "DirectFieldAccessor   fieldAccessor    =    new   DirectFieldAccessor ( adapter )  ;", "List < HandlerMethodArgumentResolver >    argResolvers    =     (  ( List < HandlerMethodArgumentResolver >  )     ( fieldAccessor . getPropertyValue (  \" customArgumentResolvers \"  )  )  )  ;", "assertEquals (  1  ,    argResolvers . size (  )  )  ;", "List < HandlerMethodReturnValueHandler >    handlers    =     (  ( List < HandlerMethodReturnValueHandler >  )     ( fieldAccessor . getPropertyValue (  \" customReturnValueHandlers \"  )  )  )  ;", "assertEquals (  1  ,    handlers . size (  )  )  ;", "assertEquals ( ConcurrentTaskExecutor . class ,    fieldAccessor . getPropertyValue (  \" taskExecutor \"  )  . getClass (  )  )  ;", "assertEquals (  2  5  0  0 L ,    fieldAccessor . getPropertyValue (  \" asyncRequestTimeout \"  )  )  ;", "CallableProcessingInterceptor [  ]    callableInterceptors    =     (  ( CallableProcessingInterceptor [  ]  )     ( fieldAccessor . getPropertyValue (  \" callableInterceptors \"  )  )  )  ;", "assertEquals (  1  ,    callableInterceptors . length )  ;", "DeferredResultProcessingInterceptor [  ]    deferredResultInterceptors    =     (  ( DeferredResultProcessingInterceptor [  ]  )     ( fieldAccessor . getPropertyValue (  \" deferredResultInterceptors \"  )  )  )  ;", "assertEquals (  1  ,    deferredResultInterceptors . length )  ;", "assertEquals ( false ,    fieldAccessor . getPropertyValue (  \" ignoreDefaultModelOnRedirect \"  )  )  ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "this . context    =    new   StaticWebApplicationContext (  )  ;", "this . context . setServletContext ( new   MockServletContext ( new   FileSystemResourceLoader (  )  )  )  ;", "this . context . registerSingleton (  \" controller \"  ,     . TestController . class )  ;", "this . config    =    new    . TestWebMvcConfigurationSupport (  )  ;", "this . config . setApplicationContext ( this . context )  ;", "this . config . setServletContext ( this . context . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "ViewResolverComposite   viewResolver    =     (  ( ViewResolverComposite )     ( this . config . mvcViewResolver (  )  )  )  ;", "assertEquals ( HIGHEST _ PRECEDENCE ,    viewResolver . getOrder (  )  )  ;", "List < ViewResolver >    viewResolvers    =    viewResolver . getViewResolvers (  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( viewResolvers . get (  0  )  )  ;", "assertEquals (  1  ,    viewResolvers . size (  )  )  ;", "assertEquals ( ContentNegotiatingViewResolver . class ,    viewResolvers . get (  0  )  . getClass (  )  )  ;", "assertFalse (  (  ( Boolean )     ( accessor . getPropertyValue (  \" useNotAcceptableStatusCode \"  )  )  )  )  ;", "assertNotNull ( accessor . getPropertyValue (  \" contentNegotiationManager \"  )  )  ;", "List < View >    defaultViews    =     (  ( List < View >  )     ( accessor . getPropertyValue (  \" defaultViews \"  )  )  )  ;", "assertNotNull ( defaultViews )  ;", "assertEquals (  1  ,    defaultViews . size (  )  )  ;", "assertEquals ( MappingJackson 2 JsonView . class ,    defaultViews . get (  0  )  . getClass (  )  )  ;", "viewResolvers    =     (  ( List < ViewResolver >  )     ( accessor . getPropertyValue (  \" viewResolvers \"  )  )  )  ;", "assertNotNull ( viewResolvers )  ;", "assertEquals (  1  ,    viewResolvers . size (  )  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    viewResolvers . get (  0  )  . getClass (  )  )  ;", "accessor    =    new   DirectFieldAccessor ( viewResolvers . get (  0  )  )  ;", "assertEquals (  \"  /  \"  ,    accessor . getPropertyValue (  \" prefix \"  )  )  ;", "assertEquals (  \"  . jsp \"  ,    accessor . getPropertyValue (  \" suffix \"  )  )  ;", "}", "METHOD_END"], "methodName": ["viewResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerAdapter   adapter    =    this . config . requestMappingHandlerAdapter (  )  ;", "bleWebBindingInitializer   initializer    =     (  ( bleWebBindingInitializer )     ( adapter . getWebBindingInitializer (  )  )  )  ;", "assertNotNull ( initializer )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( null ,     \"  \"  )  ;", "initializer . getValidator (  )  . validate ( null ,    bindingResult )  ;", "assertEquals (  \" invalid \"  ,    bindingResult . getAllErrors (  )  . get (  0  )  . getCode (  )  )  ;", "String [  ]    codes    =    initializer . getMessageCodesResolver (  )  . resolveMessageCodes (  \" invalid \"  ,    null )  ;", "assertEquals (  \" custom . invalid \"  ,    codes [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["webBindingInitializer"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "BeanNameUrlHandlerMapping   handlerMapping    =    context . getBean ( BeanNameUrlHandlerMapping . class )  ;", "assertEquals (  2  ,    handlerMapping . getOrder (  )  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / testController \"  )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( request )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getInterceptors (  )  )  ;", "assertEquals (  3  ,    chain . getInterceptors (  )  . length )  ;", "assertEquals ( ConversionServiceExposingInterceptor . class ,    chain . getInterceptors (  )  [  1  ]  . getClass (  )  )  ;", "assertEquals ( ResourceUrlProviderExposingInterceptor . class ,    chain . getInterceptors (  )  [  2  ]  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["beanNameHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . CustomArgumentResolverConfig . class )  ;", "RequestMappingHandlerAdapter   adapter    =    context . getBean ( RequestMappingHandlerAdapter . class )  ;", "HandlerExceptionResolverComposite   composite    =    context . getBean ( HandlerExceptionResolverComposite . class )  ;", "assertNotNull ( adapter )  ;", "assertEquals (  1  ,    adapter . getCustomArgumentResolvers (  )  . size (  )  )  ;", "assertEquals ( WebMvcConfigurationSupportTests . TestArgumentResolver . class ,    adapter . getCustomArgumentResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "assertEquals (  1  ,    adapter . getCustomReturnValueHandlers (  )  . size (  )  )  ;", "assertEquals ( WebMvcConfigurationSupportTests . TestReturnValueHandler . class ,    adapter . getCustomReturnValueHandlers (  )  . get (  0  )  . getClass (  )  )  ;", "assertNotNull ( composite )  ;", "assertEquals (  3  ,    composite . getExceptionResolvers (  )  . size (  )  )  ;", "assertEquals ( ExceptionHandlerExceptionResolver . class ,    composite . getExceptionResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "ExceptionHandlerExceptionResolver   resolver    =     (  ( ExceptionHandlerExceptionResolver )     ( composite . getExceptionResolvers (  )  . get (  0  )  )  )  ;", "assertEquals (  1  ,    resolver . getCustomArgumentResolvers (  )  . size (  )  )  ;", "assertEquals ( WebMvcConfigurationSupportTests . TestArgumentResolver . class ,    resolver . getCustomArgumentResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "assertEquals (  1  ,    resolver . getCustomReturnValueHandlers (  )  . size (  )  )  ;", "assertEquals ( WebMvcConfigurationSupportTests . TestReturnValueHandler . class ,    resolver . getCustomReturnValueHandlers (  )  . get (  0  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["customArgumentResolvers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "UrlPathHelper   urlPathHelper    =    context . getBean ( UrlPathHelper . class )  ;", "PathMatcher   pathMatcher    =    context . getBean ( PathMatcher . class )  ;", "assertNotNull ( urlPathHelper )  ;", "assertNotNull ( pathMatcher )  ;", "assertEquals ( AntPathMatcher . class ,    pathMatcher . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultPathMatchConfiguration"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "String   name    =     \" defaultServletHandlerMapping \"  ;", "AbstractHandlerMapping   handlerMapping    =    context . getBean ( name ,    AbstractHandlerMapping . class )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "assertTrue ( handlerMapping . getClass (  )  . getName (  )  . endsWith (  \" EmptyHandlerMapping \"  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyDefaultServletHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "AbstractHandlerMapping   handlerMapping    =    context . getBean (  \" resourceHandlerMapping \"  ,    AbstractHandlerMapping . class )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "assertTrue ( handlerMapping . getClass (  )  . getName (  )  . endsWith (  \" EmptyHandlerMapping \"  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyResourceHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "String   name    =     \" viewControllerHandlerMapping \"  ;", "AbstractHandlerMapping   handlerMapping    =    context . getBean ( name ,    AbstractHandlerMapping . class )  ;", "assertNotNull ( handlerMapping )  ;", "assertEquals ( Integer . MAX _ VALUE ,    handlerMapping . getOrder (  )  )  ;", "assertTrue ( handlerMapping . getClass (  )  . getName (  )  . endsWith (  \" EmptyHandlerMapping \"  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyViewControllerHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "HandlerExceptionResolverComposite   compositeResolver    =    context . getBean (  \" handlerExceptionResolver \"  ,    HandlerExceptionResolverComposite . class )  ;", "assertEquals (  0  ,    compositeResolver . getOrder (  )  )  ;", "List < HandlerExceptionResolver >    expectedResolvers    =    compositeResolver . getExceptionResolvers (  )  ;", "assertEquals ( ExceptionHandlerExceptionResolver . class ,    expectedResolvers . get (  0  )  . getClass (  )  )  ;", "assertEquals ( ResponseStatusExceptionResolver . class ,    expectedResolvers . get (  1  )  . getClass (  )  )  ;", "assertEquals ( DefaultHandlerExceptionResolver . class ,    expectedResolvers . get (  2  )  . getClass (  )  )  ;", "ExceptionHandlerExceptionResolver   eher    =     (  ( ExceptionHandlerExceptionResolver )     ( expectedResolvers . get (  0  )  )  )  ;", "assertNotNull ( eher . getApplicationContext (  )  )  ;", "DirectFieldAccessor   fieldAccessor    =    new   DirectFieldAccessor ( eher )  ;", "List < Object >    interceptors    =     (  ( List < Object >  )     ( fieldAccessor . getPropertyValue (  \" responseBodyAdvice \"  )  )  )  ;", "assertEquals (  1  ,    interceptors . size (  )  )  ;", "assertEquals ( JsonViewResponseBodyAdvice . class ,    interceptors . get (  0  )  . getClass (  )  )  ;", "LocaleContextHolder . setLocale ( Locale . ENGLISH )  ;", "try    {", "ResponseStatusExceptionResolver   rser    =     (  ( ResponseStatusExceptionResolver )     ( expectedResolvers . get (  1  )  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "rser . resolveException ( request ,    response ,    context . getBean ( WebMvcConfigurationSupportTests . TestController . class )  ,    new   WebMvcConfigurationSupportTests . UserAlreadyExistsException (  )  )  ;", "assertEquals (  \" User   already   exists !  \"  ,    response . getErrorMessage (  )  )  ;", "}    finally    {", "LocaleContextHolder . resetLocaleContext (  )  ;", "}", "}", "METHOD_END"], "methodName": ["handlerExceptionResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . setServletContext ( new   MockServletContext (  )  )  ;", "context . register ( configClasses )  ;", "context . refresh (  )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["initContext"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "ViewResolverComposite   resolver    =    context . getBean (  \" mvcViewResolver \"  ,    ViewResolverComposite . class )  ;", "assertNotNull ( resolver )  ;", "assertEquals (  1  ,    resolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    resolver . getViewResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "assertEquals ( LOWEST _ PRECEDENCE ,    resolver . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["mvcViewResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class ,    WebMvcConfigurationSupportTests . ViewResolverConfig . class )  ;", "ViewResolverComposite   resolver    =    context . getBean (  \" mvcViewResolver \"  ,    ViewResolverComposite . class )  ;", "assertNotNull ( resolver )  ;", "assertEquals (  0  ,    resolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( LOWEST _ PRECEDENCE ,    resolver . getOrder (  )  )  ;", "assertNull ( resolver . resolveViewName (  \" anyViewName \"  ,    Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["mvcViewResolverWithExistingResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . CustomViewResolverOrderConfig . class )  ;", "ViewResolverComposite   resolver    =    context . getBean (  \" mvcViewResolver \"  ,    ViewResolverComposite . class )  ;", "assertNotNull ( resolver )  ;", "assertEquals (  1  ,    resolver . getViewResolvers (  )  . size (  )  )  ;", "assertEquals ( InternalResourceViewResolver . class ,    resolver . getViewResolvers (  )  . get (  0  )  . getClass (  )  )  ;", "assertEquals (  1  2  3  ,    resolver . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["mvcViewResolverWithOrderSet"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "RequestMappingHandlerAdapter   adapter    =    context . getBean ( RequestMappingHandlerAdapter . class )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    adapter . getMessageConverters (  )  ;", "assertEquals (  1  2  ,    converters . size (  )  )  ;", "converters . stream (  )  . filter (  (    converter )     -  >    converter   instanceof   AbstractJackson 2 HttpMessageConverter )  . forEach (  (    converter )     -  >     {", "ObjectMapper   mapper    =     (  ( AbstractJackson 2 HttpMessageConverter )     ( converter )  )  . getObjectMapper (  )  ;", "assertFalse ( mapper . getDeserializationConfig (  )  . isEnabled ( DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( mapper . getSerializationConfig (  )  . isEnabled ( DEFAULT _ VIEW _ INCLUSION )  )  ;", "assertFalse ( mapper . getDeserializationConfig (  )  . isEnabled ( FAIL _ ON _ UNKNOWN _ PROPERTIES )  )  ;", "if    ( converter   instanceof   MappingJackson 2 XmlHttpMessageConverter )     {", "assertEquals (  . class ,    mapper . getClass (  )  )  ;", "}", "}  )  ;", "ConfigurableWebBindingInitializer   initializer    =     (  ( ConfigurableWebBindingInitializer )     ( adapter . getWebBindingInitializer (  )  )  )  ;", "assertNotNull ( initializer )  ;", "ConversionService   conversionService    =    initializer . getConversionService (  )  ;", "assertNotNull ( conversionService )  ;", "assertTrue (  ( conversionService   instanceof   FormattingConversionService )  )  ;", "Validator   validator    =    initializer . getValidator (  )  ;", "assertNotNull ( validator )  ;", "assertTrue (  ( validator   instanceof   LocalValidatorFactoryBean )  )  ;", "DirectFieldAccessor   fieldAccessor    =    new   DirectFieldAccessor ( adapter )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Object >    bodyAdvice    =     (  ( List < Object >  )     ( fieldAccessor . getPropertyValue (  \" requestResponseBodyAdvice \"  )  )  )  ;", "assertEquals (  2  ,    bodyAdvice . size (  )  )  ;", "assertEquals ( JsonViewRequestBodyAdvice . class ,    bodyAdvice . get (  0  )  . getClass (  )  )  ;", "assertEquals ( JsonViewResponseBodyAdvice . class ,    bodyAdvice . get (  1  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerAdapter"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class ,    WebMvcConfigurationSupportTests . ScopedController . class ,    WebMvcConfigurationSupportTests . ScopedProxyController . class )  ;", "RequestMappingHandlerMapping   handlerMapping    =    context . getBean ( RequestMappingHandlerMapping . class )  ;", "assertEquals (  0  ,    handlerMapping . getOrder (  )  )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getInterceptors (  )  )  ;", "assertEquals ( ConversionServiceExposingInterceptor . class ,    chain . getInterceptors (  )  [  0  ]  . getClass (  )  )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / scoped \"  )  )  ;", "assertNotNull (  \" HandlerExecutionChain   for    '  / scoped '    mapping   should   not   be   null .  \"  ,    chain )  ;", "chain    =    handlerMapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / scopedProxy \"  )  )  ;", "assertNotNull (  \" HandlerExecutionChain   for    '  / scopedProxy '    mapping   should   not   be   null .  \"  ,    chain )  ;", "}", "METHOD_END"], "methodName": ["requestMappingHandlerMapping"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    initContext ( WebMvcConfigurationSupportTests . WebConfig . class )  ;", "CompositeUriComponentsContributor   uriComponentsContributor    =    context . getBean ( MvcUriComponentsBuilder . MVC _ URI _ COMPONENTS _ CONTRIBUTOR _ BEAN _ NAME ,    CompositeUriComponentsContributor . class )  ;", "assertNotNull ( uriComponentsContributor )  ;", "}", "METHOD_END"], "methodName": ["uriComponentsContributor"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getMessageCodesResolver"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getValidator"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( CollectionUtils . isEmpty ( configurers )  )  )     {", "this . delegates . addAll ( configurers )  ;", "}", "}", "METHOD_END"], "methodName": ["addWebMvcConfigurers"], "fileName": "org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   applicationContext    =    obtainApplicationContext (  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Looking   for   URL   mappings   in   application   context :     \"     +    applicationContext )  )  ;", "}", "String [  ]    beanNames    =     ( this . detectsInAncestorContexts )     ?    BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( applicationContext ,    Object . class )     :    applicationContext . getBeanNamesForType ( Object . class )  ;", "for    ( String   beanName    :    beanNames )     {", "String [  ]    urls    =    determineUrlsFor ( beanName )  ;", "if    (  !  ( ObjectUtils . isEmpty ( urls )  )  )     {", "register ( urls ,    beanName )  ;", "} else    {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Rejected   bean   name    '  \"     +    beanName )     +     \"  '  :    no   URL   paths   identified \"  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["detectHandlers"], "fileName": "org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . detectHandlersInAncestorContexts    =    detectHandlersInAncestorContexts ;", "}", "METHOD_END"], "methodName": ["setDetectHandlersInAncestorContexts"], "fileName": "org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return    \" Resolved   exception   caused   by   Handler   execution :     \"     +    ex ;", "}", "METHOD_END"], "methodName": ["buildLogMessage"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . warnLogger )     !  =    null )     &  &     ( this . warnLogger . isWarnEnabled (  )  )  )     {", "this . warnLogger . warn ( buildLogMessage ( ex ,    request )  )  ;", "}", "}", "METHOD_END"], "methodName": ["logException"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( this . preventResponseCaching )     {", "preventCaching ( response )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareResponse"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . addHeader ( AbstractHandlerExceptionResolver . HEADER _ CACHE _ CONTROL ,     \" no - store \"  )  ;", "}", "METHOD_END"], "methodName": ["preventCaching"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . mappedHandlerClasses    =    mappedHandlerClasses ;", "}", "METHOD_END"], "methodName": ["setMappedHandlerClasses"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . mappedHandlers    =    mappedHandlers ;", "}", "METHOD_END"], "methodName": ["setMappedHandlers"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . preventResponseCaching    =    preventResponseCaching ;", "}", "METHOD_END"], "methodName": ["setPreventResponseCaching"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . warnLogger    =    LogFactory . getLog ( loggerName )  ;", "}", "METHOD_END"], "methodName": ["setWarnLogCategory"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( handler    !  =    null )     {", "if    (  (  ( this . mappedHandlers )     !  =    null )     &  &     ( this . mappedHandlers . contains ( handler )  )  )     {", "return   true ;", "}", "if    (  ( this . mappedHandlerClasses )     !  =    null )     {", "for    ( Class <  ?  >    handlerClass    :    this . mappedHandlerClasses )     {", "if    ( handlerClass . isInstance ( handler )  )     {", "return   true ;", "}", "}", "}", "}", "return    (  ( this . mappedHandlers )     =  =    null )     &  &     (  ( this . mappedHandlerClasses )     =  =    null )  ;", "}", "METHOD_END"], "methodName": ["shouldApplyTo"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( interceptor   instanceof   HandlerInterceptor )     {", "return    (  ( HandlerInterceptor )     ( interceptor )  )  ;", "} else", "if    ( interceptor   instanceof   context . request . WebRequestInterceptor )     {", "return   new   WebRequestHandlerInterceptorAdapter (  (  ( context . request . WebRequestInterceptor )     ( interceptor )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Interceptor   type   not   supported :     \"     +     ( interceptor . getClass (  )  . getName (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["adaptInterceptor"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "mappedInterceptors . addAll ( BeanFactoryUtils . beansOfTypeIncludingAncestors ( obtainApplicationContext (  )  ,    MappedInterceptor . class ,    true ,    false )  . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["detectMappedInterceptors"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return    !  ( this . adaptedInterceptors . isEmpty (  )  )     ?    this . adaptedInterceptors . toArray ( new   HandlerInterceptor [  0  ]  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAdaptedInterceptors"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Object   resolvedHandler    =    handler ;", "if    ( handler   instanceof   HandlerExecutionChain )     {", "resolvedHandler    =     (  ( HandlerExecutionChain )     ( handler )  )  . ge (  )  ;", "}", "if    ( resolvedHandler   instanceof   CorsConfigurationSource )     {", "return    (  ( CorsConfigurationSource )     ( resolvedHandler )  )  . getCorsConfiguration ( request )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getCorsConfiguration"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . globalCorsConfigSource . getCorsConfigurations (  )  ;", "}", "METHOD_END"], "methodName": ["getCorsConfigurations"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    ( CorsUtils . isPreFlightRequest ( request )  )     {", "HandlerInterceptor [  ]    interceptors    =    chain . getInterceptors (  )  ;", "chain    =    new   HandlerExecutionChain ( new    . PreFlightHandler ( config )  ,    interceptors )  ;", "} else    {", "chain . addInterceptor ( new    . CorsInterceptor ( config )  )  ;", "}", "return   chain ;", "}", "METHOD_END"], "methodName": ["getCorsHandlerExecutionChain"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . corsProcessor ;", "}", "METHOD_END"], "methodName": ["getCorsProcessor"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultHandler ;", "}", "METHOD_END"], "methodName": ["getDefaultHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "HandlerExecutionChain   chain    =     ( handler   instanceof   HandlerExecutionChain )     ?     (  ( HandlerExecutionChain )     ( handler )  )     :    new   HandlerExecutionChain ( handler )  ;", "String   lookupPath    =    this . urlPathHelper . getLookupPathForRequest ( request )  ;", "for    ( HandlerInterceptor   interceptor    :    this . adaptedInterceptors )     {", "if    ( interceptor   instanceof   MappedInterceptor )     {", "MappedInterceptor   mappedInterceptor    =     (  ( MappedInterceptor )     ( interceptor )  )  ;", "if    ( mappedInterceptor . matches ( lookupPath ,    this . pathMatcher )  )     {", "chain . addInterceptor ( mappedInterceptor . getInterceptor (  )  )  ;", "}", "} else    {", "chain . addInterceptor ( interceptor )  ;", "}", "}", "return   chain ;", "}", "METHOD_END"], "methodName": ["getHandlerExecutionChain"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "List < MappedInterceptor >    mappedInterceptors    =    new   ArrayList <  >  ( this . adaptedInterceptors . size (  )  )  ;", "for    ( Interceptor   interceptor    :    this . adaptedInterceptors )     {", "if    ( interceptor   instanceof   MappedInterceptor )     {", "mappedInterceptors . add (  (  ( MappedInterceptor )     ( interceptor )  )  )  ;", "}", "}", "return    !  ( mappedInterceptors . isEmpty (  )  )     ?    mappedInterceptors . toArray ( new   MappedInterceptor [  0  ]  )     :    null ;", "}", "METHOD_END"], "methodName": ["getMappedInterceptors"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . pathMatcher ;", "}", "METHOD_END"], "methodName": ["getPathMatcher"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( this . interceptors . isEmpty (  )  )  )     {", "for    ( int   i    =     0  ;    i    <     ( this . interceptors . size (  )  )  ;    i +  +  )     {", "Object   interceptor    =    this . interceptors . get ( i )  ;", "if    ( interceptor    =  =    null )     {", "throw   new   IllegalArgumentException (  (  (  \" Entry   number    \"     +    i )     +     \"    in   interceptors   array   is   null \"  )  )  ;", "}", "this . adaptedInterceptors . add ( adaptInterceptor ( interceptor )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initInterceptors"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setAlwaysUseFullPath ( alwaysUseFullPath )  ;", "this . globalCorsConfigSource . setAlwaysUseFullPath ( alwaysUseFullPath )  ;", "}", "METHOD_END"], "methodName": ["setAlwaysUseFullPath"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . globalCorsConfigSource . setCorsConfigurations ( corsConfigurations )  ;", "}", "METHOD_END"], "methodName": ["setCorsConfigurations"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( corsProcessor ,     \" CorsProcessor   must   not   be   null \"  )  ;", "this . corsProcessor    =    corsProcessor ;", "}", "METHOD_END"], "methodName": ["setCorsProcessor"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . defaultHandler    =    defaultHandler ;", "}", "METHOD_END"], "methodName": ["setDefaultHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . interceptors . addAll ( Arrays . asList ( interceptors )  )  ;", "}", "METHOD_END"], "methodName": ["setInterceptors"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( pathMatcher ,     \" PathMatcher   must   not   be   null \"  )  ;", "this . pathMatcher    =    pathMatcher ;", "this . globalCorsConfigSource . setPathMatcher ( pathMatcher )  ;", "}", "METHOD_END"], "methodName": ["setPathMatcher"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setRemoveSemicolonContent ( removeSemicolonContent )  ;", "this . globalCorsConfigSource . setRemoveSemicolonContent ( removeSemicolonContent )  ;", "}", "METHOD_END"], "methodName": ["setRemoveSemicolonContent"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setUrlDecode ( urlDecode )  ;", "this . globalCorsConfigSource . setUrlDecode ( urlDecode )  ;", "}", "METHOD_END"], "methodName": ["setUrlDecode"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "this . globalCorsConfigSource . setUrlPathHelper ( urlPathHelper )  ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "for    ( T   mapping    :    mappings )     {", "T   match    =    getMatching ( mapping ,    request )  ;", "if    ( match    !  =    null )     {", "matches . add ( new   Match ( match ,    this . mappingRegistry . gets (  )  . get ( mapping )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addMatchingMappings"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "HandlerMethod   handlerMethod ;", "if    ( handler   instanceof   String )     {", "String   beanName    =     (  ( String )     ( handler )  )  ;", "handlerMethod    =    new   HandlerMethod ( beanName ,     . obtainApplicationContext (  )  . getAutowireCapableBeanFactory (  )  ,    method )  ;", "} else    {", "handlerMethod    =    new   HandlerMethod ( handler ,    method )  ;", "}", "return   handlerMethod ;", "}", "METHOD_END"], "methodName": ["createHandlerMethod"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    handlerType    =     ( handler   instanceof   String )     ?    AbstractHandlerMethodMapping . obtainApplicationContext (  )  . getType (  (  ( String )     ( handler )  )  )     :    handler . getClass (  )  ;", "if    ( handlerType    !  =    null )     {", "final   Class <  ?  >    userType    =    ClassUtils . getUserClass ( handlerType )  ;", "Map < Method ,    T >    methods    =    MethodIntrospector . selectMethods ( userType ,     (  ( MethodIntrospector . MetadataLookup < T >  )     (  (    method )     -  >     {", "try    {", "return   getMappingForMethod ( method ,    userType )  ;", "}    catch    (    ex )     {", "throw   new    < ex > IllegalStateException (  (  (  (  \" Invalid   mapping   on   handler   class    [  \"     +     ( userType . getName (  )  )  )     +     \"  ]  :     \"  )     +    method )  )  ;", "}", "}  )  )  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  ( methods . size (  )  )     +     \"    request   handler   methods   found   on    \"  )     +    userType )     +     \"  :     \"  )     +    methods )  )  ;", "}", "methods . forEach (  (    method ,    mapping )     -  >     {", "Method   invocableMethod    =    AopUtils . selectInvocableMethod ( method ,    userType )  ;", "registerHandlerMethod ( handler ,    invocableMethod ,    mapping )  ;", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["detectHandlerMethods"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . mappingRegistry . acquireReadLock (  )  ;", "try    {", "return   Collections . unmodifiableMap ( this . mappingRegistry . gets (  )  )  ;", "}    finally    {", "this . mappingRegistry . releaseReadLock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getHandlerMethods"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . mappingRegistry . getHandlerMethodsByMappingName ( mappingName )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMethodsForMappingName"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . mappingRegistry ;", "}", "METHOD_END"], "methodName": ["getMappingRegistry"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . namingStrategy ;", "}", "METHOD_END"], "methodName": ["getNamingStrategy"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,    lookupPath )  ;", "}", "METHOD_END"], "methodName": ["handleMatch"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handleNoMatch"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["initCorsConfiguration"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Looking   for   request   mappings   in   application   context :     \"     +     (  . getApplicationContext (  )  )  )  )  ;", "}", "String [  ]    beanNames    =     ( this . detectHandlerMethodsInAncestorContexts )     ?    BeanFactoryUtils . beanNamesForTypeIncludingAncestors (  . obtainApplicationContext (  )  ,    Object . class )     :     . obtainApplicationContext (  )  . getBeanNamesForType ( Object . class )  ;", "for    ( String   beanName    :    beanNames )     {", "if    (  !  ( beanName . startsWith (  . SCOPED _ TARGET _ NAME _ PREFIX )  )  )     {", "Class <  ?  >    beanType    =    null ;", "try    {", "beanType    =     . obtainApplicationContext (  )  . getType ( beanName )  ;", "}    catch    ( Throwable   ex )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Could   not   resolve   target   class   for   bean   with   name    '  \"     +    beanName )     +     \"  '  \"  )  ,    ex )  ;", "}", "}", "if    (  ( beanType    !  =    null )     &  &     ( isHandler ( beanType )  )  )     {", "detectHandlerMethods ( beanName )  ;", "}", "}", "}", "handlerMethodsInitialized ( getHandlerMethods (  )  )  ;", "}", "METHOD_END"], "methodName": ["initHandlerMethods"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "List < AbstractHandlerMethodMapping < T >  . Match >    matches    =    new   ArrayList <  >  (  )  ;", "List < T >    directPathMatches    =    this . mappingRegistry . getMappingsByUrl ( lookupPath )  ;", "if    ( directPathMatches    !  =    null )     {", "addMatchingMappings ( directPathMatches ,    matches ,    request )  ;", "}", "if    ( matches . isEmpty (  )  )     {", "addMatchingMappings ( this . mappingRegistry . getMappings (  )  . keySet (  )  ,    matches ,    request )  ;", "}", "if    (  !  ( matches . isEmpty (  )  )  )     {", "Comparator < AbstractHandlerMethodMapping < T >  . Match >    comparator    =    new   MatchComparator ( getMappingComparator ( request )  )  ;", "matches . sort ( comparator )  ;", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  (  (  (  \" Found    \"     +     ( matches . size (  )  )  )     +     \"    matching   mapping ( s )    for    [  \"  )     +    lookupPath )     +     \"  ]     :     \"  )     +    matches )  )  ;", "}", "AbstractHandlerMethodMapping < T >  . Match   bestMatch    =    matches . get (  0  )  ;", "if    (  ( matches . size (  )  )     >     1  )     {", "if    ( CorsUtils . isPreFlightRequest ( request )  )     {", "return   AbstractHandlerMethodMapping . PREFLIGHT _ AMBIGUOUS _ MATCH ;", "}", "AbstractHandlerMethodMapping < T >  . Match   secondBestMatch    =    matches . get (  1  )  ;", "if    (  ( comparator . compare ( bestMatch ,    secondBestMatch )  )     =  =     0  )     {", "Method   m 1     =    bestMatch . handlerMethod . getMethod (  )  ;", "Method   m 2     =    secondBestMatch . handlerMethod . getMethod (  )  ;", "throw   new   IllegalStateException (  (  (  (  (  (  (  \" Ambiguous   handler   methods   mapped   for   HTTP   path    '  \"     +     ( request . getRequestURL (  )  )  )     +     \"  '  :     {  \"  )     +    m 1  )     +     \"  ,     \"  )     +    m 2  )     +     \"  }  \"  )  )  ;", "}", "}", "handleMatch ( bestMatch . mapping ,    lookupPath ,    request )  ;", "return   bestMatch . handlerMethod ;", "} else    {", "return   handleNoMatch ( this . mappingRegistry . getMappings (  )  . keySet (  )  ,    lookupPath ,    request )  ;", "}", "}", "METHOD_END"], "methodName": ["lookupHandlerMethod"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . mappingRegistry . register ( mapping ,    handler ,    method )  ;", "}", "METHOD_END"], "methodName": ["registerHandlerMethod"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . mappingRegistry . register ( mapping ,    handler ,    method )  ;", "}", "METHOD_END"], "methodName": ["registerMapping"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . detectHandlerMethodsInAncestorContexts    =    detectHandlerMethodsInAncestorContexts ;", "}", "METHOD_END"], "methodName": ["setDetectHandlerMethodsInAncestorContexts"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . namingStrategy    =    namingStrategy ;", "}", "METHOD_END"], "methodName": ["setHandlerMethodMappingNamingStrategy"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "this . mappingRegistry . unregister ( mapping )  ;", "}", "METHOD_END"], "methodName": ["unregisterMapping"], "fileName": "org.springframework.web.servlet.handler.AbstractHandlerMethodMapping"}, {"methodBody": ["METHOD_START", "{", "HandlerExecutionChain   chain    =    new   HandlerExecutionChain ( rawHandler )  ;", "chain . addInterceptor ( new    . PathExposingHandlerInterceptor ( bestMatchingPattern ,    pathWithinMapping )  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( uriTemplateVariables )  )  )     {", "chain . addInterceptor ( new    . UriTemplateVariablesHandlerInterceptor ( uriTemplateVariables )  )  ;", "}", "return   chain ;", "}", "METHOD_END"], "methodName": ["buildPathExposingHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "request . setAttribute ( HandlerMapping . BEST _ MATCHING _ PATTERN _ ATTRIBUTE ,    bestMatchingPattern )  ;", "request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,    pathWithinMapping )  ;", "}", "METHOD_END"], "methodName": ["exposePathWithinMapping"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVariables )  ;", "}", "METHOD_END"], "methodName": ["exposeUriTemplateVariables"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return    \" handler    \"     +     ( handler   instanceof   String    ?     (  \"  '  \"     +    handler )     +     \"  '  \"     :     (  \" of   type    [  \"     +     ( handler . getClass (  )  )  )     +     \"  ]  \"  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerDescription"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( this . handlerMap )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMap"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . rootHandler ;", "}", "METHOD_END"], "methodName": ["getRootHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Object   handler    =    this . handlerMap . get ( urlPath )  ;", "if    ( handler    !  =    null )     {", "if    ( handler   instanceof   String )     {", "String   handlerName    =     (  ( String )     ( handler )  )  ;", "handler    =    obtainApplicationContext (  )  . getBean ( handlerName )  ;", "}", "validateHandler ( handler ,    request )  ;", "return   buildPathExposingHandler ( handler ,    urlPath ,    urlPath ,    null )  ;", "}", "List < String >    matchingPatterns    =    new   ArrayList <  >  (  )  ;", "for    ( String   registeredPattern    :    this . handlerMap . keySet (  )  )     {", "if    ( getPathMatcher (  )  . match ( registeredPattern ,    urlPath )  )     {", "matchingPatterns . add ( registeredPattern )  ;", "} else", "if    ( useTrailingSlashMatch (  )  )     {", "if    (  (  !  ( registeredPattern . endsWith (  \"  /  \"  )  )  )     &  &     ( getPathMatcher (  )  . match (  ( registeredPattern    +     \"  /  \"  )  ,    urlPath )  )  )     {", "matchingPatterns . add (  ( registeredPattern    +     \"  /  \"  )  )  ;", "}", "}", "}", "String   bestMatch    =    null ;", "Comparator < String >    patternComparator    =    getPathMatcher (  )  . getPatternComparator ( urlPath )  ;", "if    (  !  ( matchingPatterns . isEmpty (  )  )  )     {", "matchingPatterns . sort ( patternComparator )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  \" Matching   patterns   for   request    [  \"     +    urlPath )     +     \"  ]    are    \"  )     +    matchingPatterns )  )  ;", "}", "bestMatch    =    matchingPatterns . get (  0  )  ;", "}", "if    ( bestMatch    !  =    null )     {", "handler    =    this . handlerMap . get ( bestMatch )  ;", "if    ( handler    =  =    null )     {", "if    ( bestMatch . endsWith (  \"  /  \"  )  )     {", "handler    =    this . handlerMap . get ( bestMatch . substring (  0  ,     (  ( bestMatch . length (  )  )     -     1  )  )  )  ;", "}", "if    ( handler    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Could   not   find   handler   for   best   pattern   match    [  \"     +    bestMatch )     +     \"  ]  \"  )  )  ;", "}", "}", "if    ( handler   instanceof   String )     {", "String   handlerName    =     (  ( String )     ( handler )  )  ;", "handler    =    obtainApplicationContext (  )  . getBean ( handlerName )  ;", "}", "validateHandler ( handler ,    request )  ;", "String   pathWithinMapping    =    getPathMatcher (  )  . extractPathWithinPattern ( bestMatch ,    urlPath )  ;", "Map < String ,    String >    uriTemplateVariables    =    new   LinkedHashMap <  >  (  )  ;", "for    ( String   matchingPattern    :    matchingPatterns )     {", "if    (  ( patternComparator . compare ( bestMatch ,    matchingPattern )  )     =  =     0  )     {", "Map < String ,    String >    vars    =    getPathMatcher (  )  . extractUriTemplateVariables ( matchingPattern ,    urlPath )  ;", "Map < String ,    String >    decodedVars    =    getUrlPathHelper (  )  . decodePathVariables ( request ,    vars )  ;", "uriTemplateVariables . putAll ( decodedVars )  ;", "}", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  \" URI   Template   variables   for   request    [  \"     +    urlPath )     +     \"  ]    are    \"  )     +    uriTemplateVariables )  )  ;", "}", "return   buildPathExposingHandler ( handler ,    bestMatch ,    pathWithinMapping ,    uriTemplateVariables )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["lookupHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPath ,     \" URL   path   must   not   be   null \"  )  ;", "Assert . notNull ( handler ,     \" Handler   object   must   not   be   null \"  )  ;", "Object   resolvedHandler    =    handler ;", "if    (  (  !  ( this . lazyInitHandlers )  )     &  &     ( handler   instanceof   String )  )     {", "String   handlerName    =     (  ( String )     ( handler )  )  ;", "ApplicationContext   applicationContext    =    obtainApplicationContext (  )  ;", "if    ( applicationContext . isSingleton ( handlerName )  )     {", "resolvedHandler    =    applicationContext . getBean ( handlerName )  ;", "}", "}", "Object   mappedHandler    =    this . h . get ( urlPath )  ;", "if    ( mappedHandler    !  =    null )     {", "if    ( mappedHandler    !  =    resolvedHandler )     {", "throw   new   IllegalStateException (  (  (  (  (  (  (  \" Cannot   map    \"     +     ( getHandlerDescription ( handler )  )  )     +     \"    to   URL   path    [  \"  )     +    urlPath )     +     \"  ]  :    There   is   already    \"  )     +     ( getHandlerDescription ( mappedHandler )  )  )     +     \"    mapped .  \"  )  )  ;", "}", "} else    {", "if    ( urlPath . equals (  \"  /  \"  )  )     {", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Root   mapping   to    \"     +     ( getHandlerDescription ( handler )  )  )  )  ;", "}", "setRootHandler ( resolvedHandler )  ;", "} else", "if    ( urlPath . equals (  \"  /  *  \"  )  )     {", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Default   mapping   to    \"     +     ( getHandlerDescription ( handler )  )  )  )  ;", "}", "setDefaultHandler ( resolvedHandler )  ;", "} else    {", "this . h . put ( urlPath ,    resolvedHandler )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  (  \" Mapped   URL   path    [  \"     +    urlPath )     +     \"  ]    onto    \"  )     +     ( getHandlerDescription ( handler )  )  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["registerHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPaths ,     \" URL   path   array   must   not   be   null \"  )  ;", "for    ( String   urlPath    :    urlPaths )     {", "register ( urlPath ,    beanName )  ;", "}", "}", "METHOD_END"], "methodName": ["registerHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . lazyInitHandlers    =    lazyInitHandlers ;", "}", "METHOD_END"], "methodName": ["setLazyInitHandlers"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . rootHandler    =    rootHandler ;", "}", "METHOD_END"], "methodName": ["setRootHandler"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . useTrailingSlashMatch    =    useTrailingSlashMatch ;", "}", "METHOD_END"], "methodName": ["setUseTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsTypeLevelMappings"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . useTrailingSlashMatch ;", "}", "METHOD_END"], "methodName": ["useTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.handler.AbstractUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "HandlerMapping   hm    =     (  ( HandlerMapping )     ( wac . getBean (  \" handlerMapping \"  )  )  )  ;", "Object   bean    =    wac . getBean (  \" godCtrl \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / test . html \"  )  ;", "HandlerExecutionChain   hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / testarossa \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / tes \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     ( hec    =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["asteriskMatches"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    wac . getBean (  \" godCtrl \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / welcome . html \"  )  ;", "ExecutionChain   hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "req . setServletPath (  \"  / mypath / welcome . html \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / myservlet / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "req . setServletPath (  \"  / myservlet \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / myapp / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "req . setServletPath (  \"  / myapp \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / show . html \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / bookseats . html \"  )  ;", "hec    =    hm . get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestRequestsWithSubPaths"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "BeanNameUrlHandlerMapping   hm    =     (  ( BeanNameUrlHandlerMapping )     ( wac . getBean (  \" handlerMapping \"  )  )  )  ;", "try    {", "hm . registerHandler (  \"  / mypath / welcome . html \"  ,    new   Object (  )  )  ;", "fail (  \" Should   have   thrown   IllegalStateException \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["doubleMappings"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "BeanNameUrlHandlerMapping   hm    =     (  ( BeanNameUrlHandlerMapping )     ( wac . getBean (  \" handlerMapping \"  )  )  )  ;", "Object   anotherHandler    =    new   Object (  )  ;", "hm . registerHandler (  \"  / mypath / testaross *  \"  ,    anotherHandler )  ;", "Object   bean    =    wac . getBean (  \" godCtrl \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / test . html \"  )  ;", "HandlerExecutionChain   hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / testarossa \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    anotherHandler )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / tes \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     ( hec    =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["overlappingMappings"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "BeanNameUrlHandlerMapping   hm    =    new   BeanNameUrlHandlerMapping (  )  ;", "hm . setAlwaysUseFullPath ( true )  ;", "hm . setApplicationContext ( wac )  ;", "Object   bean    =    wac . getBean (  \" godCtrl \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / welcome . html \"  )  ;", "HandlerExecutionChain   hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  \"  )  ;", "req . setServletPath (  \"  / mypath \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / Myapp / mypath / welcome . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "req . setServletPath (  \"  / mypath \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "hec    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "}", "METHOD_END"], "methodName": ["requestsWithFullPaths"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMapping   hm    =     (  ( HandlerMapping )     ( wac . getBean (  \" handlerMapping \"  )  )  )  ;", "doTestRequestsWithSubPaths ( hm )  ;", "}", "METHOD_END"], "methodName": ["requestsWithSubPaths"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "BeanNameUrlHandlerMapping   hm    =    new   BeanNameUrlHandlerMapping (  )  ;", "hm . setDetectHandlersInAncestorContexts ( true )  ;", "hm . setApplicationContext ( new   StaticApplicationContext ( wac )  )  ;", "doTestRequestsWithSubPaths ( hm )  ;", "}", "METHOD_END"], "methodName": ["requestsWithSubPathsInParentContext"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMapping   hm    =     (  ( HandlerMapping )     ( wac . getBean (  \" handlerMapping \"  )  )  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / mypath / nonsense . html \"  )  ;", "req . setContextPath (  \"  / myapp \"  )  ;", "Object   h    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   null \"  ,     ( h    =  =    null )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo / bar / baz . html \"  )  ;", "h    =    hm . getHandler ( req )  ;", "assertTrue (  \" Handler   is   null \"  ,     ( h    =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["requestsWithoutHandlers"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "wac    =    new   XmlWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . setConfigLocations ( new   String [  ]  {     . CONF    }  )  ;", "wac . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.handler.BeanNameUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( GET . name (  )  )  ;", "this . request . setRequestURI (  \"  / cors \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof    . CorsAwareHandler )  )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( config . getAllowedOrigins (  )  . toArray (  )  ,    new   String [  ]  {     \"  *  \"     }  )  ;", "}", "METHOD_END"], "methodName": ["actualRequestWithCorsConfigurationProvider"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "CorsConfiguration   config    =    new   CorsConfiguration (  )  ;", "config . addAllowedOrigin (  \"  *  \"  )  ;", "this . handlerMapping . setCorsConfigurations ( Collections . singletonMap (  \"  / foo \"  ,    config )  )  ;", "this . request . setMethod ( GET . name (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof    . SimpleHandler )  )  ;", "config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( config . getAllowedOrigins (  )  . toArray (  )  ,    new   String [  ]  {     \"  *  \"     }  )  ;", "}", "METHOD_END"], "methodName": ["actualRequestWithMappedCorsConfiguration"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( GET . name (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    handlerMapping . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertTrue (  (  ( chain . getHandler (  )  )    instanceof    . SimpleHandler )  )  ;", "}", "METHOD_END"], "methodName": ["actualRequestWithoutCorsConfigurationProvider"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "if    ( isPreFlightRequest )     {", "Object   handler    =    chain . ge (  )  ;", "assertTrue ( handler . getClass (  )  . getSimpleName (  )  . equals (  \" PreFligh \"  )  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( handler )  ;", "return    (  ( CorsConfiguration )     ( accessor . getPropertyValue (  \" config \"  )  )  )  ;", "} else    {", "HandlerInterceptor [  ]    interceptors    =    chain . getInterceptors (  )  ;", "if    ( interceptors    !  =    null )     {", "for    ( HandlerInterceptor   interceptor    :    interceptors )     {", "if    ( interceptor . getClass (  )  . getSimpleName (  )  . equals (  \" CorsInterceptor \"  )  )     {", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( interceptor )  ;", "return    (  ( CorsConfiguration )     ( accessor . getPropertyValue (  \" config \"  )  )  )  ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getCorsConfiguration"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( OPTIONS . name (  )  )  ;", "this . request . setRequestURI (  \"  / cors \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    h . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "assertTrue ( chain . getHandler (  )  . getClass (  )  . getSimpleName (  )  . equals (  \" PreFlightHandler \"  )  )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    true )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( config . getAllowedOrigins (  )  . toArray (  )  ,    new   String [  ]  {     \"  *  \"     }  )  ;", "}", "METHOD_END"], "methodName": ["preflightRequestWithCorsConfigurationProvider"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "CorsConfiguration   config    =    new   CorsConfiguration (  )  ;", "config . addAllowedOrigin (  \"  *  \"  )  ;", "this . h . setCorsConfigurations ( Collections . singletonMap (  \"  / foo \"  ,    config )  )  ;", "this . request . setMethod ( OPTIONS . name (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    h . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "assertTrue ( chain . getHandler (  )  . getClass (  )  . getSimpleName (  )  . equals (  \" PreFlightHandler \"  )  )  ;", "config    =    getCorsConfiguration ( chain ,    true )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( config . getAllowedOrigins (  )  . toArray (  )  ,    new   String [  ]  {     \"  *  \"     }  )  ;", "}", "METHOD_END"], "methodName": ["preflightRequestWithMappedCorsConfiguration"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( OPTIONS . name (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "HandlerExecutionChain   chain    =    h . getHandler ( this . request )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getHandler (  )  )  ;", "assertTrue ( chain . getHandler (  )  . getClass (  )  . getSimpleName (  )  . equals (  \" PreFlightHandler \"  )  )  ;", "}", "METHOD_END"], "methodName": ["preflightRequestWithoutCorsConfigurationProvider"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   context    =    new   StaticWebApplicationContext (  )  ;", "this . handlerMapping    =    new    . TestHandlerMapping (  )  ;", "this . handlerMapping . setApplicationContext ( context )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . request . setRemoteHost (  \" domain 1  . com \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.handler.CorsAbstractHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "return    ( this . resolvers )     !  =    null    ?    Collections . unmodifiableList ( this . resolvers )     :    Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getExceptionResolvers"], "fileName": "org.springframework.web.servlet.handler.HandlerExceptionResolverComposite"}, {"methodBody": ["METHOD_START", "{", "this . resolvers    =    exceptionResolvers ;", "}", "METHOD_END"], "methodName": ["setExceptionResolvers"], "fileName": "org.springframework.web.servlet.handler.HandlerExceptionResolverComposite"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.handler.HandlerExceptionResolverComposite"}, {"methodBody": ["METHOD_START", "{", "return    ( this . handlerMappings )     !  =    null    ?    this . handlerMappings    :    Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMappings"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospector"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( this . handlerMappings ,     \" Handler   mappings   not   initialized \"  )  ;", "HttpServletRequest   wrapper    =    new    . RequestAttributeChangeIgnoringWrapper ( request )  ;", "for    ( HandlerMapping   handlerMapping    :    this . handlerMappings )     {", "Object   handler    =    handlerMapping . getHandler ( wrapper )  ;", "if    ( handler    =  =    null )     {", "continue ;", "}", "if    ( handlerMapping   instanceof   MatchableHandlerMapping )     {", "return    (  ( MatchableHandlerMapping )     ( handlerMapping )  )  ;", "}", "throw   new   IllegalStateException (  \" HandlerMapping   is   not   a   MatchableHandlerMapping \"  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMatchableHandlerMapping"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospector"}, {"methodBody": ["METHOD_START", "{", "Properties   props ;", "String   path    =     \" DispatcherServlet . properties \"  ;", "try    {", "Resource   resource    =    new   ClassPathResource ( path ,    DispatcherServlet . class )  ;", "props    =    PropertiesLoaderUtils . loadProperties ( resource )  ;", "}    catch    ( IOException   ex )     {", "throw   new   IllegalStateException (  (  (  (  \" Could   not   load    '  \"     +    path )     +     \"  '  :     \"  )     +     ( ex . getMessage (  )  )  )  )  ;", "}", "String   value    =    props . getProperty (  . class . getName (  )  )  ;", "String [  ]    names    =    StringUtils . commaDelimitedListToStringArray ( value )  ;", "List <  >    result    =    new   ArrayList <  >  ( names . length )  ;", "for    ( String   name    :    names )     {", "try    {", "Class <  ?  >    clazz    =    ClassUtils . forName ( name ,    DispatcherServlet . class . getClassLoader (  )  )  ;", "Object   mapping    =    applicationContext . getAutowireCapableBeanFactory (  )  . createBean ( clazz )  ;", "result . add (  (  (  )     ( mapping )  )  )  ;", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   IllegalStateException (  (  (  \" Could   not   find   default       [  \"     +    name )     +     \"  ]  \"  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["initFallback"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospector"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    HandlerMapping >    beans    =    BeanFactoryUtils . beansOfTypeIncludingAncestors ( applicationContext ,    HandlerMapping . class ,    true ,    false )  ;", "if    (  !  ( beans . isEmpty (  )  )  )     {", "List < HandlerMapping >    mappings    =    new   ArrayList <  >  ( beans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( mappings )  ;", "return   Collections . unmodifiableList ( mappings )  ;", "}", "return   Collections . unmodifiableList (  . initFallback ( applicationContext )  )  ;", "}", "METHOD_END"], "methodName": ["initHandlerMappings"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospector"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "cxt . refresh (  )  ;", "List <  >    actual    =    getIntrospector ( cxt )  . gets (  )  ;", "assertEquals (  2  ,    actual . size (  )  )  ;", "assertEquals ( BeanNameUrl . class ,    actual . get (  0  )  . getClass (  )  )  ;", "assertEquals ( RequestMapping . class ,    actual . get (  1  )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultHandlerMappings"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "cxt . registerSingleton (  \" hmA \"  ,    SimpleUrl . class )  ;", "cxt . registerSingleton (  \" hmB \"  ,    SimpleUrl . class )  ;", "cxt . registerSingleton (  \" hmC \"  ,    SimpleUrl . class )  ;", "cxt . refresh (  )  ;", "List <  ?  >    expected    =    Arrays . asList ( cxt . getBean (  \" hmA \"  )  ,    cxt . getBean (  \" hmB \"  )  ,    cxt . getBean (  \" hmC \"  )  )  ;", "List <  >    actual    =    getIntrospector ( cxt )  . gets (  )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["detectHandlerMappings"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "MutablePropertyValues   pvs    =    new   MutablePropertyValues ( Collections . singletonMap (  \" order \"  ,     \"  3  \"  )  )  ;", "cxt . registerSingleton (  \" hmA \"  ,    SimpleUrl . class ,    pvs )  ;", "pvs    =    new   MutablePropertyValues ( Collections . singletonMap (  \" order \"  ,     \"  2  \"  )  )  ;", "cxt . registerSingleton (  \" hmB \"  ,    SimpleUrl . class ,    pvs )  ;", "pvs    =    new   MutablePropertyValues ( Collections . singletonMap (  \" order \"  ,     \"  1  \"  )  )  ;", "cxt . registerSingleton (  \" hmC \"  ,    SimpleUrl . class ,    pvs )  ;", "cxt . refresh (  )  ;", "List <  ?  >    expected    =    Arrays . asList ( cxt . getBean (  \" hmC \"  )  ,    cxt . getBean (  \" hmB \"  )  ,    cxt . getBean (  \" hmA \"  )  )  ;", "List <  >    actual    =    getIntrospector ( cxt )  . gets (  )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["detectHandlerMappingsOrdered"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   cxt    =    new   AnnotationConfigWebApplicationContext (  )  ;", "cxt . register (  . TestConfig . class )  ;", "cxt . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / path \"  )  ;", "request . addHeader (  \" Origin \"  ,     \" http :  /  / localhost :  9  0  0  0  \"  )  ;", "CorsConfiguration   corsConfig    =    getIntrospector ( cxt )  . getCorsConfiguration ( request )  ;", "assertNotNull ( corsConfig )  ;", "assertEquals ( Collections . singletonList (  \" http :  /  / localhost :  9  0  0  0  \"  )  ,    corsConfig . getAllowedOrigins (  )  )  ;", "assertEquals ( Collections . singletonList (  \" POST \"  )  ,    corsConfig . getAllowedMethods (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCorsConfigurationActual"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   cxt    =    new   AnnotationConfigWebApplicationContext (  )  ;", "cxt . register (  . TestConfig . class )  ;", "cxt . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  / path \"  )  ;", "request . addHeader (  \" Origin \"  ,     \" http :  /  / localhost :  9  0  0  0  \"  )  ;", "request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" POST \"  )  ;", "CorsConfiguration   corsConfig    =    getIntrospector ( cxt )  . getCorsConfiguration ( request )  ;", "assertNotNull ( corsConfig )  ;", "assertEquals ( Collections . singletonList (  \" http :  /  / localhost :  9  0  0  0  \"  )  ,    corsConfig . getAllowedOrigins (  )  )  ;", "assertEquals ( Collections . singletonList (  \" POST \"  )  ,    corsConfig . getAllowedMethods (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCorsConfigurationPreFlight"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMappingIntrospector   introspector    =    new   HandlerMappingIntrospector (  )  ;", "introspector . setApplicationContext ( cxt )  ;", "introspector . afterPropertiesSet (  )  ;", "return   introspector ;", "}", "METHOD_END"], "methodName": ["getIntrospector"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "MutablePropertyValues   pvs    =    new   MutablePropertyValues ( Collections . singletonMap (  \" urlMap \"  ,    Collections . singletonMap (  \"  / path \"  ,    new   Object (  )  )  )  )  ;", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "cxt . registerSingleton (  \" hm \"  ,    SimpleUrl . class ,    pvs )  ;", "cxt . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  ;", "Matchable   hm    =    getIntrospector ( cxt )  . getMatchable ( request )  ;", "assertEquals ( cxt . getBean (  \" hm \"  )  ,    hm )  ;", "assertNull (  \" Attributes   changes   not   ignored \"  ,    request . getAttribute (  . BEST _ MATCHING _ PATTERN _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["getMatchable"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "cxt . registerSingleton (  \" hm 1  \"  ,     . TestHandlerMapping . class )  ;", "cxt . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "getIntrospector ( cxt )  . getMatchableHandlerMapping ( request )  ;", "}", "METHOD_END"], "methodName": ["getMatchableWhereHandlerMappingDoesNotImplementMatchableInterface"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingIntrospectorTests"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor   i 1     =    Mockito . mock ( HandlerInterceptor . class )  ;", "MappedInterceptor   mappedInterceptor 1     =    new   MappedInterceptor ( new   String [  ]  {     \"  /  *  *  \"     }  ,    i 1  )  ;", "HandlerInterceptor   i 2     =    Mockito . mock ( HandlerInterceptor . class )  ;", "HandlerInterceptor   i 3     =    Mockito . mock ( HandlerInterceptor . class )  ;", "MappedInterceptor   mappedInterceptor 3     =    new   MappedInterceptor ( new   String [  ]  {     \"  /  *  *  \"     }  ,    i 3  )  ;", "HandlerInterceptor   i 4     =    Mockito . mock ( HandlerInterceptor . class )  ;", "this . handlerMapping . setInterceptors ( mappedInterceptor 1  ,    i 2  ,    mappedInterceptor 3  ,    i 4  )  ;", "this . handlerMapping . setApplicationContext ( this . context )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandlerExecutionChain ( new    . SimpleHandler (  )  ,    this . request )  ;", "Assert . assertThat ( chain . getInterceptors (  )  ,    Matchers . arrayContaining ( mappedInterceptor 1  . getInterceptor (  )  ,    i 2  ,    mappedInterceptor 3  . getInterceptor (  )  ,    i 4  )  )  ;", "}", "METHOD_END"], "methodName": ["orderedInterceptors"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . context    =    new   StaticWebApplicationContext (  )  ;", "this . handlerMapping    =    new    . TestHandlerMapping (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.handler.HandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . mapping . registerMapping (  \"  / f ? o \"  ,    this . handler ,    this . method 1  )  ;", "this . mapping . registerMapping (  \"  / fo ?  \"  ,    this . handler ,    this . method 2  )  ;", "this . mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguousMatch"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "StaticApplicationContext   cxt    =    new   StaticApplicationContext (  )  ;", "cxt . registerSingleton (  \" myHandler \"  ,     . MyHandler . class )  ;", "AbstractHandlerMethodMapping < String >    mapping 1     =    new    . MyHandlerMethodMapping (  )  ;", "mapping 1  . setApplicationContext ( new   StaticApplicationContext ( cxt )  )  ;", "mapping 1  . afterPropertiesSet (  )  ;", "assertEquals (  0  ,    mapping 1  . getHandlerMethods (  )  . size (  )  )  ;", "AbstractHandlerMethodMapping < String >    mapping 2     =    new    . MyHandlerMethodMapping (  )  ;", "mapping 2  . setDetectHandlerMethodsInAncestorContexts ( true )  ;", "mapping 2  . setApplicationContext ( new   StaticApplicationContext ( cxt )  )  ;", "mapping 2  . afterPropertiesSet (  )  ;", "assertEquals (  2  ,    mapping 2  . getHandlerMethods (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["detectHandlerMethodsInAncestorContexts"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   key    =     \" foo \"  ;", "this . mapping . registerMapping ( key ,    this . handler ,    this . method 1  )  ;", "result    =    this . mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,    key )  )  ;", "assertEquals ( method 1  ,    result . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["directMatch"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   key    =     \" foo \"  ;", "String   beanName    =     \" handler 1  \"  ;", "StaticWebApplicationContext   context    =    new   StaticWebApplicationContext (  )  ;", "context . registerSingleton ( beanName ,     . MyHandler . class )  ;", "this . mapping . setApplicationContext ( context )  ;", "this . mapping . registerMapping ( key ,    beanName ,    this . method 1  )  ;", "HandlerMethod   handlerMethod    =    this . mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,    key )  )  ;", "CorsConfiguration   config    =    this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod )  ;", "assertNotNull ( config )  ;", "assertEquals (  (  (  \" http :  /  /  \"     +     ( beanName . hashCode (  )  )  )     +     ( this . method 1  . getName (  )  )  )  ,    config . getAllowedOrigins (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["getCorsConfigWithBeanNameHandler"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . mapping . registerMapping (  \"  / fo *  \"  ,    this . handler ,    this . method 1  )  ;", "this . mapping . registerMapping (  \"  / f *  \"  ,    this . handler ,    this . method 2  )  ;", "result    =    this . mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  )  ;", "assertEquals ( method 1  ,    result . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["patternMatch"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . mapping . registerMapping (  \" foo \"  ,    this . handler ,    this . method 1  )  ;", "this . mapping . registerMapping (  \" foo \"  ,    this . handler ,    this . method 2  )  ;", "}", "METHOD_END"], "methodName": ["registerDuplicates"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   key 1     =     \"  / foo \"  ;", "String   key 2     =     \"  / foo *  \"  ;", "this . mapping . registerMapping ( key 1  ,    this . handler ,    this . method 1  )  ;", "this . mapping . registerMapping ( key 2  ,    this . handler ,    this . method 2  )  ;", "List < String >    directUrlMatches    =    this . mapping . getMappingRegistry (  )  . getMappingsByUrl ( key 1  )  ;", "assertNotNull ( directUrlMatches )  ;", "assertEquals (  1  ,    directUrlMatches . size (  )  )  ;", "assertEquals ( key 1  ,    directUrlMatches . get (  0  )  )  ;", "handlerMethod 1     =    new    ( this . handler ,    this . method 1  )  ;", "handlerMethod 2     =    new    ( this . handler ,    this . method 2  )  ;", "String   name 1     =    this . method 1  . getName (  )  ;", "List <  >    handlerMethods    =    this . mapping . getMappingRegistry (  )  . getsByMappingName ( name 1  )  ;", "assertNotNull ( handlerMethods )  ;", "assertEquals (  1  ,    handlerMethods . size (  )  )  ;", "assertEquals ( handlerMethod 1  ,    handlerMethods . get (  0  )  )  ;", "String   name 2     =    this . method 2  . getName (  )  ;", "handlerMethods    =    this . mapping . getMappingRegistry (  )  . getsByMappingName ( name 2  )  ;", "assertNotNull ( handlerMethods )  ;", "assertEquals (  1  ,    handlerMethods . size (  )  )  ;", "assertEquals ( handlerMethod 2  ,    handlerMethods . get (  0  )  )  ;", "CorsConfiguration   config    =    this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod 1  )  ;", "assertNotNull ( config )  ;", "assertEquals (  (  (  \" http :  /  /  \"     +     ( handler . hashCode (  )  )  )     +    name 1  )  ,    config . getAllowedOrigins (  )  . get (  0  )  )  ;", "config    =    this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod 2  )  ;", "assertNotNull ( config )  ;", "assertEquals (  (  (  \" http :  /  /  \"     +     ( handler . hashCode (  )  )  )     +    name 2  )  ,    config . getAllowedOrigins (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["registerMapping"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   key 1     =     \" foo \"  ;", "String   key 2     =     \" bar \"  ;", ". MyHandler   handler 1     =    new    . MyHandler (  )  ;", ". MyHandler   handler 2     =    new    . MyHandler (  )  ;", "HandlerMethod   handlerMethod 1     =    new   HandlerMethod ( handler 1  ,    this . method 1  )  ;", "HandlerMethod   handlerMethod 2     =    new   HandlerMethod ( handler 2  ,    this . method 1  )  ;", "this . mapping . registerMapping ( key 1  ,    handler 1  ,    this . method 1  )  ;", "this . mapping . registerMapping ( key 2  ,    handler 2  ,    this . method 1  )  ;", "List < String >    directUrlMatches    =    this . mapping . getMappingRegistry (  )  . getMappingsByUrl ( key 1  )  ;", "assertNotNull ( directUrlMatches )  ;", "assertEquals (  1  ,    directUrlMatches . size (  )  )  ;", "assertEquals ( key 1  ,    directUrlMatches . get (  0  )  )  ;", "String   name    =    this . method 1  . getName (  )  ;", "List < HandlerMethod >    handlerMethods    =    this . mapping . getMappingRegistry (  )  . getHandlerMethodsByMappingName ( name )  ;", "assertNotNull ( handlerMethods )  ;", "assertEquals (  2  ,    handlerMethods . size (  )  )  ;", "assertEquals ( handlerMethod 1  ,    handlerMethods . get (  0  )  )  ;", "assertEquals ( handlerMethod 2  ,    handlerMethods . get (  1  )  )  ;", "CorsConfiguration   config    =    this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod 1  )  ;", "assertNotNull ( config )  ;", "assertEquals (  (  (  \" http :  /  /  \"     +     ( handler 1  . hashCode (  )  )  )     +    name )  ,    config . getAllowedOrigins (  )  . get (  0  )  )  ;", "config    =    this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod 2  )  ;", "assertNotNull ( config )  ;", "assertEquals (  (  (  \" http :  /  /  \"     +     ( handler 2  . hashCode (  )  )  )     +    name )  ,    config . getAllowedOrigins (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["registerMappingWithSameMethodAndTwoHandlerInstances"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . mapping    =    new   HandlerMethodMappingTests . MyHandlerMethodMapping (  )  ;", "this . handler    =    new   HandlerMethodMappingTests . MyHandler (  )  ;", "this . method 1     =    handler . getClass (  )  . getMethod (  \" handlerMethod 1  \"  )  ;", "this . method 2     =    handler . getClass (  )  . getMethod (  \" handlerMethod 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   key    =     \" foo \"  ;", "handlerMethod    =    new    ( this . handler ,    this . method 1  )  ;", "this . mapping . registerMapping ( key ,    this . handler ,    this . method 1  )  ;", "assertNotNull ( this . mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,    key )  )  )  ;", "this . mapping . unregisterMapping ( key )  ;", "assertNull ( mapping . getHandlerInternal ( new   MockHttpServletRequest (  \" GET \"  ,    key )  )  )  ;", "assertNull ( this . mapping . getMappingRegistry (  )  . getMappingsByUrl ( key )  )  ;", "assertNull ( this . mapping . getMappingRegistry (  )  . getsByMappingName ( this . method 1  . getName (  )  )  )  ;", "assertNull ( this . mapping . getMappingRegistry (  )  . getCorsConfiguration ( handlerMethod )  )  ;", "}", "METHOD_END"], "methodName": ["unregisterMapping"], "fileName": "org.springframework.web.servlet.handler.HandlerMethodMappingTests"}, {"methodBody": ["METHOD_START", "{", "return   this . interceptor ;", "}", "METHOD_END"], "methodName": ["getInterceptor"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . pathMatcher ;", "}", "METHOD_END"], "methodName": ["getPathMatcher"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . includePatterns ;", "}", "METHOD_END"], "methodName": ["getPathPatterns"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptor"}, {"methodBody": ["METHOD_START", "{", "PathMatcher   pathMatcherToUse    =     (  ( this . pathMatcher )     !  =    null )     ?    this . pathMatcher    :    pathMatcher ;", "if    (  !  ( ObjectUtils . isEmpty ( this . excludePatterns )  )  )     {", "for    ( St   pattern    :    this . excludePatterns )     {", "if    ( pathMatcherToUse . match ( pattern ,    lookupPath )  )     {", "return   false ;", "}", "}", "}", "if    ( ObjectUtils . isEmpty ( this . includePatterns )  )     {", "return   true ;", "}", "for    ( St   pattern    :    this . includePatterns )     {", "if    ( pathMatcherToUse . match ( pattern ,    lookupPath )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . pathMatcher    =    pathMatcher ;", "}", "METHOD_END"], "methodName": ["setPathMatcher"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptor"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor   interceptor    =    mock ( HandlerInterceptor . class )  ;", "mappedInterceptor    =    new    ( new   String [  ]  {     \"  /  *  *  \"     }  ,    interceptor )  ;", "mappedInterceptor . afterCompletion ( mock ( HttpServletRequest . class )  ,    mock ( HttpServletResponse . class )  ,    null ,    mock ( Exception . class )  )  ;", "then ( interceptor )  . should (  )  . afterCompletion ( any (  )  ,    any (  )  ,    any (  )  ,    any (  )  )  ;", "}", "METHOD_END"], "methodName": ["afterCompletion"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( new   String [  ]  {     \"  / foo /  [  0  -  9  ]  *  \"     }  ,    this . interceptor )  ;", "mappedInterceptor . setPathMatcher ( new    . TestPathMatcher (  )  )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo /  1  2  3  \"  ,    pathMatcher )  )  ;", "assertFalse ( mappedInterceptor . matches (  \"  / foo / bar \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["customPathMatcher"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( null ,    new   String [  ]  {     \"  / admin /  *  *  \"     }  ,    this . interceptor )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo \"  ,    pathMatcher )  )  ;", "assertFalse ( mappedInterceptor . matches (  \"  / admin / foo \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["excludePattern"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( new   String [  ]  {     \"  /  *  *  \"     }  ,    new   String [  ]  {     \"  / admin /  *  *  \"     }  ,    this . interceptor )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo \"  ,    pathMatcher )  )  ;", "assertFalse ( mappedInterceptor . matches (  \"  / admin / foo \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["includeAndExcludePatterns"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( new   String [  ]  {     \"  / foo /  *  \"     }  ,    this . interceptor )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo / bar \"  ,    pathMatcher )  )  ;", "assertFalse ( mappedInterceptor . matches (  \"  / bar / foo \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["includePattern"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( new   String [  ]  {     \"  / foo *  /  *  \"     }  ,    this . interceptor )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo ; q =  1  / bar ; s =  2  \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["includePatternWithMatrixVariables"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( null ,    null ,    this . interceptor )  ;", "assertTrue ( mappedInterceptor . matches (  \"  / foo \"  ,    pathMatcher )  )  ;", "}", "METHOD_END"], "methodName": ["noPatterns"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor   interceptor    =    mock ( HandlerInterceptor . class )  ;", "mappedInterceptor    =    new    ( new   String [  ]  {     \"  /  *  *  \"     }  ,    interceptor )  ;", "mappedInterceptor . postHandle ( mock ( HttpServletRequest . class )  ,    mock ( HttpServletResponse . class )  ,    null ,    mock ( ModelAndView . class )  )  ;", "then ( interceptor )  . should (  )  . postHandle ( any (  )  ,    any (  )  ,    any (  )  ,    any (  )  )  ;", "}", "METHOD_END"], "methodName": ["postHandle"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "HandlerInterceptor   interceptor    =    mock ( HandlerInterceptor . class )  ;", "mappedInterceptor    =    new    ( new   String [  ]  {     \"  /  *  *  \"     }  ,    interceptor )  ;", "mappedInterceptor . preHandle ( mock ( HttpServletRequest . class )  ,    mock ( HttpServletResponse . class )  ,    null )  ;", "then ( interceptor )  . should (  )  . preHandle ( any ( HttpServletRequest . class )  ,    any ( HttpServletResponse . class )  ,    any (  )  )  ;", "}", "METHOD_END"], "methodName": ["preHandle"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "this . interceptor    =    new   LocaleChangeInterceptor (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.handler.MappedInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    wac . getBean (  \" mainController \"  )  ;", "Object   defaultBean    =    wac . getBean (  \" starController \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / pathmatchingTest . html \"  )  ;", "HandlerExecutionChain   hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   null \"  ,     ( hec    !  =    null )  )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec . getHandler (  )  )     =  =    bean )  )  ;", "assertEquals (  \"  / pathmatchingTest . html \"  ,    req . getAttribute (  . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \" welcome . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "assertEquals (  \" welcome . html \"  ,    req . getAttribute (  . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / pathmatchingAA . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "assertEquals (  \" pathmatchingAA . html \"  ,    req . getAttribute (  . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / pathmatchingA . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "assertEquals (  \"  / pathmatchingA . html \"  ,    req . getAttribute (  . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / pathmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / test / pathmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administratort / pathmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bla . jsp \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / another / bla . xml \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / another / bla . gif \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / test / testlastbit \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / test / testla \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / testing / longer / bla \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / testing / longer / test . jsp \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / administrator / testing / longer 2  / notmatching / notmatching \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / shortpattern / testing / toolong \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / XXpathXXmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / pathXXmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / XpathXXmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / XXpathmatching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show 1  2  . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show 1  2  3  . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show 1  . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / reallyGood - test - is - this . jpeg \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / reallyGood - tst - is - this . jpeg \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / testing / test . jpeg \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / testing / test . jpg \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / anotherTest \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / stillAnotherTest \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / outofpattern * ye \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test ' t   est / path ' m   atching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test %  2  6 t %  2  0 est / path %  2  6 m %  2  0 atching . html \"  )  ;", "hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "}", "METHOD_END"], "methodName": ["actualPathMatching"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    wac . getBean (  \" starController \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / goggog . html \"  )  ;", "ExecutionChain   hec    =    get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultMapping"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "HandlerExecutionChain   hec    =    hm . getHandler ( req )  ;", "HandlerInterceptor [  ]    interceptors    =    hec . getInterceptors (  )  ;", "if    ( interceptors    !  =    null )     {", "for    ( HandlerInterceptor   interceptor    :    interceptors )     {", "interceptor . preHandle ( req ,    null ,    hec . getHandler (  )  )  ;", "}", "}", "return   hec ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    wac . getBean (  \" mainController \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show . html \"  )  ;", "HandlerExecutionChain   hec    =    getHandler ( req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "assertEquals (  \" Mapping   not   exposed \"  ,     \" show . html \"  ,    req . getAttribute (  . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["mappingExposedInRequest"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    wac . getBean (  \" mainController \"  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / welcome . html \"  )  ;", "ExecutionChain   hec    =    get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show . html \"  )  ;", "hec    =    get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bookseats . html \"  )  ;", "hec    =    get ( req )  ;", "assertTrue (  \"    is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . get (  )  )     =  =    bean )  )  )  ;", "}", "METHOD_END"], "methodName": ["requestsWithHandlers"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "wac    =    new   XmlWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . setConfigLocations ( new   String [  ]  {     . CONF    }  )  ;", "wac . refresh (  )  ;", "hm    =     (  ( HandlerMapping )     ( wac . getBean (  \" urlMapping \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.handler.PathMatchingUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "return   this . pathMatcher . extractUriTemplateVariables ( this . matchingPattern ,    this . lookupPath )  ;", "}", "METHOD_END"], "methodName": ["extractUriTemplateVariables"], "fileName": "org.springframework.web.servlet.handler.RequestMatchResult"}, {"methodBody": ["METHOD_START", "{", "this . statusCodes . put ( viewName ,    statusCode )  ;", "}", "METHOD_END"], "methodName": ["addStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WebUtils . isIncludeRequest ( request )  )  )     {", "if    ( loggisDebugEnabled (  )  )     {", "loggdebug (  (  \" Applying   HTTP   status   code    \"     +    statusCode )  )  ;", "}", "response . setStatus ( statusCode )  ;", "request . setAttribute ( ERROR _ STATUS _ CODE _ ATTRIBUTE ,    statusCode )  ;", "}", "}", "METHOD_END"], "methodName": ["applyStatusCodeIfPossible"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( this . statusCodes . containsKey ( viewName )  )     {", "return   this . statusCodes . get ( viewName )  ;", "}", "return   this . defaultStatusCode ;", "}", "METHOD_END"], "methodName": ["determineStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =    null ;", "if    (  ( this . excludeds )     !  =    null )     {", "for    ( Class <  ?  >    excludedEx    :    this . excludeds )     {", "if    ( excludedEx . equals ( ex . getClass (  )  )  )     {", "return   null ;", "}", "}", "}", "if    (  ( this . exceptionMappings )     !  =    null )     {", "viewName    =    findMatchingViewName ( this . exceptionMappings ,    ex )  ;", "}", "if    (  ( viewName    =  =    null )     &  &     (  ( this . defaultErrorView )     !  =    null )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Resolving   to   default   view    '  \"     +     ( this . defaultErrorView )  )     +     \"  '    for   exception   of   type    [  \"  )     +     ( ex . getClass (  )  . getName (  )  )  )     +     \"  ]  \"  )  )  ;", "}", "viewName    =    this . defaultErrorView ;", "}", "return   viewName ;", "}", "METHOD_END"], "methodName": ["determineViewName"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =    null ;", "String   dominantMapping    =    null ;", "int   deepest    =    Integer . MAX _ VALUE ;", "for    ( Enumeration <  ?  >    names    =    eMappings . propertyNames (  )  ;    names . hasMoreElements (  )  ;  )     {", "String   eMapping    =     (  ( String )     ( names . nextElement (  )  )  )  ;", "int   depth    =    getDepth ( eMapping ,    ex )  ;", "if    (  ( depth    >  =     0  )     &  &     (  ( depth    <    deepest )     |  |     (  (  ( depth    =  =    deepest )     &  &     ( dominantMapping    !  =    null )  )     &  &     (  ( eMapping . length (  )  )     >     ( dominantMapping . length (  )  )  )  )  )  )     {", "deepest    =    depth ;", "dominantMapping    =    eMapping ;", "viewName    =    eMappings . getProperty ( eMapping )  ;", "}", "}", "if    (  ( viewName    !  =    null )     &  &     ( logger . isDebugEnabled (  )  )  )     {", "logger . debug (  (  (  (  (  (  (  \" Resolving   to   view    '  \"     +    viewName )     +     \"  '    for   e   of   type    [  \"  )     +     ( ex . getClass (  )  . getName (  )  )  )     +     \"  ]  ,    based   on   e   mapping    [  \"  )     +    dominantMapping )     +     \"  ]  \"  )  )  ;", "}", "return   viewName ;", "}", "METHOD_END"], "methodName": ["findMatchingViewName"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( exceptionClass . getName (  )  . contains ( exceptionMapping )  )     {", "return   depth ;", "}", "if    ( exceptionClass    =  =     ( Throwable . class )  )     {", "return    -  1  ;", "}", "return   getDepth ( exceptionMapping ,    exceptionClass . getSuperclass (  )  ,     ( depth    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getDepth"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   getDepth ( exceptionMapping ,    ex . getClass (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getDepth"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   mv    =    new   ModelAndView ( viewName )  ;", "if    (  ( this . exceptionAttribute )     !  =    null )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Exposing      as   model   attribute    '  \"     +     ( this . exceptionAttribute )  )     +     \"  '  \"  )  )  ;", "}", "mv . addObject ( this . exceptionAttribute ,    ex )  ;", "}", "return   mv ;", "}", "METHOD_END"], "methodName": ["getModelAndView"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   getModelAndView ( viewName ,    ex )  ;", "}", "METHOD_END"], "methodName": ["getModelAndView"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( statusCodes )  ;", "}", "METHOD_END"], "methodName": ["getStatusCodesAsMap"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultErrorView    =    defaultErrorView ;", "}", "METHOD_END"], "methodName": ["setDefaultErrorView"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultStatusCode    =    defaultStatusCode ;", "}", "METHOD_END"], "methodName": ["setDefaultStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . exceptionAttribute    =    exceptionAttribute ;", "}", "METHOD_END"], "methodName": ["setExceptionAttribute"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . exceptionMappings    =    mappings ;", "}", "METHOD_END"], "methodName": ["setExceptionMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . excludedExceptions    =    excludedExceptions ;", "}", "METHOD_END"], "methodName": ["setExcludedExceptions"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( Enumeration <  ?  >    enumeration    =    statusCodes . propertyNames (  )  ;    enumeration . hasMoreElements (  )  ;  )     {", "String   viewName    =     (  ( String )     ( enumeration . nextElement (  )  )  )  ;", "Integer   statusCode    =    Integer . valueOf ( statusCodes . getProperty ( viewName )  )  ;", "this . statusCodes . put ( viewName ,    statusCode )  ;", "}", "}", "METHOD_END"], "methodName": ["setStatusCodes"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" default - view \"  ,    mav . getViewName (  )  )  ;", "assertEquals ( genericException ,    mav . getModel (  )  . get (  . DEFAULT _ EXCEPTION _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["defaultErrorView"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 2  ,    genericException )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["defaultErrorViewDifferentHandler"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setMappedHandlerClasses ( String . class )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 2  ,    genericException )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["defaultErrorViewDifferentHandlerClass"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setMappedHandlerClasses ( String . class )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["exactExceptionMappingWithHandlerClassSpecified"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setMappedHandlerClasses ( Comparable . class )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["exactExceptionMappingWithHandlerInterfaceSpecified"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["exactExceptionMappingWithHandlerSpecified"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" SomeFooThrowable \"  ,     \" error \"  )  ;", "e . setWarnLogCategory (  \" HANDLER _ EXCEPTION \"  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["missingExceptionInMapping"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals ( SC _ OK ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["noDefaultStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setDefaultStatusCode ( SC _ BAD _ REQUEST )  ;", "request . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \" some   path \"  )  ;", "exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals ( SC _ OK ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["noDefaultStatusCodeInInclude"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setExceptionAttribute ( null )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" default - view \"  ,    mav . getViewName (  )  )  ;", "assertNull ( mav . getModel (  )  . get (  . DEFAULT _ EXCEPTION _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["nullExceptionAttribute"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setExceptionMappings ( null )  ;", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" default - view \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["nullExceptionMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setDefaultStatusCode ( SC _ BAD _ REQUEST )  ;", "exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals ( SC _ BAD _ REQUEST ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["setDefaultStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setOrder (  2  )  ;", "assertEquals (  2  ,    exceptionResolver . getOrder (  )  )  ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver    =    new   SimpleMappingExceptionResolver (  )  ;", "handler 1     =    new   String (  )  ;", "handler 2     =    new   Object (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "request . setMethod (  \" GET \"  )  ;", "genericException    =    new   Exception (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setWarnLogCategory (  \" HANDLER _ EXCEPTION \"  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleExceptionMapping"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setExceptionMappings ( props )  ;", "e . setExcludedExceptions ( IllegalArgumentException . class )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    new   IllegalArgumentException (  )  )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["simpleExceptionMappingWithExclusion"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setMappedHandlerClasses ( String . class )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 2  ,    genericException )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["simpleExceptionMappingWithHandlerClassSpecifiedButWrongHandler"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "e . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 2  ,    genericException )  ;", "assertNull ( mav )  ;", "}", "METHOD_END"], "methodName": ["simpleExceptionMappingWithHandlerSpecifiedButWrongHandler"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setDefaultErrorView (  \" default - view \"  )  ;", "exceptionResolver . setDefaultStatusCode ( SC _ BAD _ REQUEST )  ;", "Properties   statusCodes    =    new   Properties (  )  ;", "statusCodes . setProperty (  \" default - view \"  ,     \"  4  0  6  \"  )  ;", "exceptionResolver . setStatusCodes ( statusCodes )  ;", "exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals ( SC _ NOT _ ACCEPTABLE ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["specificStatusCode"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   oddException    =    new   SimpleMappingExceptionResolverTests . AnotherOddException (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "props . setProperty (  \" SomeOddException \"  ,     \" another - error \"  )  ;", "props . setProperty (  \" AnotherOddException \"  ,     \" another - some - error \"  )  ;", "exceptionResolver . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "exceptionResolver . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    oddException )  ;", "assertEquals (  \" another - some - error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["threeMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "props . setProperty (  \" AnotherException \"  ,     \" another - error \"  )  ;", "e . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["twoMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "props . setProperty (  \" AnotherException \"  ,     \" another - error \"  )  ;", "e . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "e . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    handler 1  ,    genericException )  ;", "assertEquals (  \" error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["twoMappingsOneShortOneLong"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   oddException    =    new   SimpleMappingExceptionResolverTests . SomeOddException (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "props . setProperty (  \" SomeOddException \"  ,     \" another - error \"  )  ;", "exceptionResolver . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "exceptionResolver . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    oddException )  ;", "assertEquals (  \" another - error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["twoMappingsOneShortOneLongThrowOddException"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   oddException    =    new   SimpleMappingExceptionResolverTests . SomeOddException (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" Exception \"  ,     \" error \"  )  ;", "props . setProperty (  \" SomeOddException \"  ,     \" another - error \"  )  ;", "exceptionResolver . setMappedHandlers ( Collections . singleton ( handler 1  )  )  ;", "exceptionResolver . setExceptionMappings ( props )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    handler 1  ,    oddException )  ;", "assertEquals (  \" another - error \"  ,    mav . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["twoMappingsThrowOddExceptionUseLongExceptionMapping"], "fileName": "org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . useSharedServletConfig    =    useSharedServletConfig ;", "}", "METHOD_END"], "methodName": ["setUseSharedServletConfig"], "fileName": "org.springframework.web.servlet.handler.SimpleServletPostProcessor"}, {"methodBody": ["METHOD_START", "{", "return   this . urlMap ;", "}", "METHOD_END"], "methodName": ["getUrlMap"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    ( urlMap . isEmpty (  )  )     {", "logger . warn (  \" Neither    ' urlMap '    nor    ' mappings '    set   on    \"  )  ;", "} else    {", "urlMap . forEach (  (    url ,    handler )     -  >     {", "if    (  !  ( url . startsWith (  \"  /  \"  )  )  )     {", "url    =     \"  /  \"     +    url ;", "}", "if    ( handler   instanceof   String )     {", "handler    =     (  ( String )     ( handler )  )  . trim (  )  ;", "}", "registerHandler ( url ,    handler )  ;", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerHandlers"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( mappings ,    this . urlMap )  ;", "}", "METHOD_END"], "methodName": ["setMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . urlMap . putAll ( urlMap )  ;", "}", "METHOD_END"], "methodName": ["setUrlMap"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "XmlWebApplicationContext   wac    =    new   XmlWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . setConfigLocations ( new   String [  ]  {     \"  / org /  / web / servlet / handler / map 2  . xml \"     }  )  ;", "wac . refresh (  )  ;", "Object   bean    =    wac . getBean (  \" mainController \"  )  ;", "Object   otherBean    =    wac . getBean (  \" otherController \"  )  ;", "Object   defaultBean    =    wac . getBean (  \" starController \"  )  ;", "HandlerMapping   hm    =     (  ( HandlerMapping )     ( wac . getBean ( beanName )  )  )  ;", "MockHttpServletRequest   req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / welcome . html \"  )  ;", "HandlerExecutionChain   hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "assertEquals (  \"  / welcome . html \"  ,    req . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / welcome . x \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    otherBean )  )  )  ;", "assertEquals (  \" welcome . x \"  ,    req . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / welcome /  \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    otherBean )  )  )  ;", "assertEquals (  \" welcome \"  ,    req . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "req . setServletPath (  \"  / welcome . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / welcome . html \"  )  ;", "req . setContextPath (  \"  / app \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / show . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bookseats . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / original - welcome . html \"  )  ;", "req . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / welcome . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / original - show . html \"  )  ;", "req . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / show . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / original - bookseats . html \"  )  ;", "req . setAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE ,     \"  / bookseats . html \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    bean )  )  )  ;", "assertEquals (  \"  /  \"  ,    req . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "req    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / somePath \"  )  ;", "hec    =    getHandler ( hm ,    req )  ;", "assertTrue (  \" Handler   is   correct   bean \"  ,     (  ( hec    !  =    null )     &  &     (  ( hec . getHandler (  )  )     =  =    defaultBean )  )  )  ;", "assertEquals (  \"  / somePath \"  ,    req . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["checkMappings"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "HandlerExecutionChain   hec    =    hm . getHandler ( req )  ;", "HandlerInterceptor [  ]    interceptors    =    hec . getInterceptors (  )  ;", "if    ( interceptors    !  =    null )     {", "for    ( HandlerInterceptor   interceptor    :    interceptors )     {", "interceptor . preHandle ( req ,    null ,    hec . getHandler (  )  )  ;", "}", "}", "return   hec ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  \"  \"  )  ;", "XmlWebApplicationContext   root    =    new   XmlWebApplicationContext (  )  ;", "root . setServletContext ( sc )  ;", "root . setConfigLocations ( new   String [  ]  {     \"  / org /  / web / servlet / handler / map 1  . xml \"     }  )  ;", "root . refresh (  )  ;", "XmlWebApplicationContext   wac    =    new   XmlWebApplicationContext (  )  ;", "wac . setParent ( root )  ;", "wac . setServletContext ( sc )  ;", "wac . setNamespace (  \" map 2 err \"  )  ;", "wac . setConfigLocations ( new   String [  ]  {     \"  / org /  / web / servlet / handler / map 2 err . xml \"     }  )  ;", "try    {", "wac . refresh (  )  ;", "fail (  \" Should   have   thrown   NoSuchBeanDefinitionException \"  )  ;", "}    catch    ( FatalBeanException   ex )     {", "NoSuchBeanDefinitionException   nestedEx    =     (  ( NoSuchBeanDefinitionException )     ( ex . getCause (  )  )  )  ;", "assertEquals (  \" mainControlle \"  ,    nestedEx . getBeanName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["handlerBeanNotFound"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "SimpleUrlHandlerMapping   handlerMapping    =    new   SimpleUrlHandlerMapping (  )  ;", "handlerMapping . setUrlDecode ( false )  ;", "Object   controller    =    new   Object (  )  ;", "Map < String ,    Object >    urlMap    =    new   LinkedHashMap <  >  (  )  ;", "urlMap . put (  \"  /  *  / baz \"  ,    controller )  ;", "handlerMapping . setUrlMap ( urlMap )  ;", "handlerMapping . setApplicationContext ( new   StaticApplicationContext (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo %  0 a %  0 dbar / baz \"  )  ;", "HandlerExecutionChain   hec    =    handlerMapping . getHandler ( request )  ;", "assertNotNull ( hec )  ;", "assertSame ( controller ,    hec . getHandler (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNewlineInRequest"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "checkMappings (  \" urlMappingWithProps \"  )  ;", "}", "METHOD_END"], "methodName": ["urlMappingWithProps"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "checkMappings (  \" urlMapping \"  )  ;", "}", "METHOD_END"], "methodName": ["urlMappingWithUrlMap"], "fileName": "org.springframework.web.servlet.handler.SimpleUrlHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ FORBIDDEN )  ;", "}", "METHOD_END"], "methodName": ["handleNotAuthorized"], "fileName": "org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . authorizedRoles    =    authorizedRoles ;", "}", "METHOD_END"], "methodName": ["setAuthorizedRoles"], "fileName": "org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultTimeZone ;", "}", "METHOD_END"], "methodName": ["getDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.AbstractLocaleContextResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultTimeZone    =    defaultTimeZone ;", "}", "METHOD_END"], "methodName": ["setDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.AbstractLocaleContextResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultLocale ;", "}", "METHOD_END"], "methodName": ["getDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.AbstractLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultLocale    =    defaultLocale ;", "}", "METHOD_END"], "methodName": ["setDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.AbstractLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "Enumeration < Locale >    requestLocales    =    request . getLocales (  )  ;", "Locale   languageMatch    =    null ;", "while    ( requestLocales . hasMoreElements (  )  )     {", "Locale   locale    =    requestLocales . nextElement (  )  ;", "if    ( supportedLocales . contains ( locale )  )     {", "if    (  ( languageMatch    =  =    null )     |  |     ( languageMatch . getLanguage (  )  . equals ( locale . getLanguage (  )  )  )  )     {", "return   locale ;", "}", "} else", "if    ( languageMatch    =  =    null )     {", "for    ( Locale   candidate    :    supportedLocales )     {", "if    (  (  !  ( util . StringUtils . hasLength ( candidate . getCountry (  )  )  )  )     &  &     ( candidate . getLanguage (  )  . equals ( locale . getLanguage (  )  )  )  )     {", "languageMatch    =    candidate ;", "break ;", "}", "}", "}", "}", "return   languageMatch ;", "}", "METHOD_END"], "methodName": ["findSupportedLocale"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultLocale ;", "}", "METHOD_END"], "methodName": ["getDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . supportedLocales ;", "}", "METHOD_END"], "methodName": ["getSupportedLocales"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultLocale    =    defaultLocale ;", "}", "METHOD_END"], "methodName": ["setDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . supportedLocales . clear (  )  ;", "this . supportedLocales . addAll ( locales )  ;", "}", "METHOD_END"], "methodName": ["setSupportedLocales"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setDefaultLocale ( Locale . JAPANESE )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "assertEquals ( Locale . JAPANESE ,    this . resolver . resolveLocale ( request )  )  ;", "request . addHeader (  \" Accept - Language \"  ,    Locale . US . toLanguageTag (  )  )  ;", "request . setPreferredLocales ( Collections . singletonList ( Locale . US )  )  ;", "assertEquals ( Locale . US ,    this . resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["defaultLocale"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setPreferredLocales ( Arrays . asList ( locales )  )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["request"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Locale . CANADA ,    this . resolver . resolveLocale ( request ( Locale . CANADA )  )  )  ;", "assertEquals ( Locale . US ,    this . resolver . resolveLocale ( request ( Locale . US ,    Locale . CANADA )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Arrays . asList ( Locale . ENGLISH ,    Locale . UK )  )  ;", "assertEquals ( Locale . UK ,    this . resolver . resolveLocale ( request ( Locale . GERMANY ,    Locale . US ,    Locale . UK )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredAgainstCountryIfPossible"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Collections . singletonList ( Locale . ENGLISH )  )  ;", "assertEquals ( Locale . ENGLISH ,    this . resolver . resolveLocale ( request ( Locale . GERMANY ,    Locale . US ,    Locale . UK )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredAgainstLanguageOnly"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Arrays . asList ( Locale . GERMAN ,    Locale . US )  )  ;", "assertEquals ( Locale . GERMAN ,    this . resolver . resolveLocale ( request ( Locale . GERMANY ,    Locale . US ,    Locale . UK )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredAgainstLanguageWithMultipleSupportedLocales"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Collections . singletonList ( Locale . CANADA )  )  ;", "assertEquals ( Locale . US ,    this . resolver . resolveLocale ( request ( Locale . US ,    Locale . UK )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredNotSupported"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Arrays . asList ( Locale . US ,    Locale . JAPAN )  )  ;", "this . resolver . setDefaultLocale ( Locale . JAPAN )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept - Language \"  ,    Locale . KOREA . toLanguageTag (  )  )  ;", "request . setPreferredLocales ( Collections . singletonList ( Locale . KOREA )  )  ;", "assertEquals ( Locale . JAPAN ,    this . resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredNotSupportedWithDefault"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setSupportedLocales ( Collections . singletonList ( Locale . CANADA )  )  ;", "assertEquals ( Locale . CANADA ,    this . resolver . resolveLocale ( request ( Locale . US ,    Locale . CANADA )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePreferredSupported"], "fileName": "org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   defaultLocale    =    getDefaultLocale (  )  ;", "if    ( defaultLocale    =  =    null )     {", "defaultLocale    =    request . getLocale (  )  ;", "}", "return   defaultLocale ;", "}", "METHOD_END"], "methodName": ["determineDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   getDefaultTimeZone (  )  ;", "}", "METHOD_END"], "methodName": ["determineDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultLocale ;", "}", "METHOD_END"], "methodName": ["getDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultTimeZone ;", "}", "METHOD_END"], "methodName": ["getDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . languageTagCompliant ;", "}", "METHOD_END"], "methodName": ["isLanguageTagCompliant"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( request . getAttribute ( CookieLocaleResolver . LOCALE _ REQUEST _ ATTRIBUTE _ NAME )  )     =  =    null )     {", "Locale   locale    =    null ;", "TimeZone   timeZone    =    null ;", "String   cookieName    =    getCookieName (  )  ;", "if    ( cookieName    !  =    null )     {", "Cookie   cookie    =    WebUtils . getCookie ( request ,    cookieName )  ;", "if    ( cookie    !  =    null )     {", "String   value    =    cookie . getValue (  )  ;", "String   localePart    =    value ;", "String   timeZonePart    =    null ;", "int   spaceIndex    =    localePart . indexOf (  '     '  )  ;", "if    ( spaceIndex    !  =     (  -  1  )  )     {", "localePart    =    value . substring (  0  ,    spaceIndex )  ;", "timeZonePart    =    value . substring (  ( spaceIndex    +     1  )  )  ;", "}", "try    {", "locale    =     (  !  (  \"  -  \"  . equals ( localePart )  )  )     ?    parseLocaleValue ( localePart )     :    null ;", "if    ( timeZonePart    !  =    null )     {", "timeZone    =    StringUtils . parseTimeZoneString ( timeZonePart )  ;", "}", "}    catch    ( IllegalArgumentException   ex )     {", "if    (  ( request . getAttribute ( ERROR _ EXCEPTION _ ATTRIBUTE )  )     !  =    null )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  \" Ignoring   invalid   locale   cookie    '  \"     +    cookieName )     +     \"  '    with   value    [  \"  )     +    value )     +     \"  ]    due   to   error   dispatch :     \"  )     +     ( ex . getMessage (  )  )  )  )  ;", "}", "} else    {", "throw   new   IllegalStateException (  (  (  (  (  (  \" Invalid   locale   cookie    '  \"     +    cookieName )     +     \"  '    with   value    [  \"  )     +    value )     +     \"  ]  :     \"  )     +     ( ex . getMessage (  )  )  )  )  ;", "}", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  \" Parsed   cookie   value    [  \"     +     ( cookie . getValue (  )  )  )     +     \"  ]    into   locale    '  \"  )     +    locale )     +     \"  '  \"  )     +     ( timeZone    !  =    null    ?     (  \"    and   time   zone    '  \"     +     ( timeZone . getID (  )  )  )     +     \"  '  \"     :     \"  \"  )  )  )  ;", "}", "}", "}", "request . setAttribute ( CookieLocaleResolver . LOCALE _ REQUEST _ ATTRIBUTE _ NAME ,     ( locale    !  =    null    ?    locale    :    determineDefaultLocale ( request )  )  )  ;", "request . setAttribute ( CookieLocaleResolver . TIME _ ZONE _ REQUEST _ ATTRIBUTE _ NAME ,     ( timeZone    !  =    null    ?    timeZone    :    determineDefaultTimeZone ( request )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseLocaleCookieIfNecessary"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   isLanguageTagCompliant (  )     ?    Locale . forLanguageTag ( locale )     :    StringUtils . parseLocaleString ( locale )  ;", "}", "METHOD_END"], "methodName": ["parseLocaleValue"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultLocale    =    defaultLocale ;", "}", "METHOD_END"], "methodName": ["setDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultTimeZone    =    defaultTimeZone ;", "}", "METHOD_END"], "methodName": ["setDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . languageTagCompliant    =    languageTagCompliant ;", "}", "METHOD_END"], "methodName": ["setLanguageTagCompliant"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   isLanguageTagCompliant (  )     ?    locale . toLanguageTag (  )     :    locale . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toLocaleValue"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoek \"  )  ;", "resolver . setCookieDomain (  \"  . springframework . org \"  )  ;", "resolver . setCookiePath (  \"  / mypath \"  )  ;", "resolver . setCookieMaxAge (  1  0  0  0  0  )  ;", "resolver . setCookieSecure ( true )  ;", "resolver . setLocale ( request ,    response ,    new   Locale (  \" nl \"  ,     \"  \"  )  )  ;", "Cookie   cookie    =    response . getCookie (  \" LanguageKoek \"  )  ;", "assertNotNull ( cookie )  ;", "assertEquals (  \" LanguageKoek \"  ,    cookie . getName (  )  )  ;", "assertEquals (  \"  . springframework . org \"  ,    cookie . getDomain (  )  )  ;", "assertEquals (  \"  / mypath \"  ,    cookie . getPath (  )  )  ;", "assertEquals (  1  0  0  0  0  ,    cookie . getMaxAge (  )  )  ;", "assertTrue ( cookie . getSecure (  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoek \"  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLanguage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCustomCookie"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" nl \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLanguage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" nl \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLocale (  )  . getLanguage (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContext"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,     \"  \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals ( request . getLocale (  )  ,    loc . getLocale (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithCookieWithoutLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" n - x   GMT +  1  \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "try    {", "resolver . resolveLocaleContext ( request )  ;", "fail (  \" Should   have   thrown   IllegalStateException \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" LanguageKoekje \"  )  )  ;", "assertTrue ( ex . getMessage (  )  . contains (  \" n - x   GMT +  1  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithInvalidLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . GERMAN )  ;", "request . setAttribute ( ERROR _ EXCEPTION _ ATTRIBUTE ,    new   ServletException (  )  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" n - x   GMT +  1  \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultTimeZone ( TimeZone . getTimeZone (  \" GMT +  2  \"  )  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . GERMAN ,    loc . getLocale (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  2  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithInvalidLocaleOnErrorDispatch"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" nl   X - MT \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "try    {", "resolver . resolveLocaleContext ( request )  ;", "fail (  \" Should   have   thrown   IllegalStateException \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" LanguageKoekje \"  )  )  ;", "assertTrue ( ex . getMessage (  )  . contains (  \" nl   X - MT \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithInvalidTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( ERROR _ EXCEPTION _ ATTRIBUTE ,    new   ServletException (  )  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" nl   X - MT \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultTimeZone ( TimeZone . getTimeZone (  \" GMT +  2  \"  )  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLocale (  )  . getLanguage (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  2  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithInvalidTimeZoneOnErrorDispatch"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "Cookie   cookie    =    new   Cookie (  \" LanguageKoekje \"  ,     \" nl   GMT +  1  \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setCookieName (  \" LanguageKoekje \"  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLocale (  )  . getLanguage (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals ( request . getLocale (  )  ,    loc . getLocale (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithoutCookie"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultLocale ( Locale . GERMAN )  ;", "resolver . setDefaultTimeZone ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . GERMAN ,    loc . getLocale (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleContextWithoutCookieAndDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,     \"  \"  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals ( request . getLocale (  )  ,    loc )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleWithCookieWithoutLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals ( request . getLocale (  )  ,    loc )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleWithoutCookie"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultLocale ( Locale . GERMAN )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals ( Locale . GERMAN ,    loc )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleWithoutCookieAndDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocale ( request ,    response ,    new   Locale (  \" nl \"  ,     \"  \"  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "assertNotNull ( cookie )  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    cookie . getName (  )  )  ;", "assertEquals ( null ,    cookie . getDomain (  )  )  ;", "assertEquals ( DEFAULT _ COOKIE _ PATH ,    cookie . getPath (  )  )  ;", "assertFalse ( cookie . getSecure (  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLanguage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocale"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocaleContext ( request ,    response ,    new   SimpleLocaleContext ( new   Locale (  \" nl \"  ,     \"  \"  )  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLocale (  )  . getLanguage (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocaleContext"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocaleContext ( request ,    response ,    new   SimpleTimeZoneAwareLocaleContext ( new   Locale (  \" nl \"  ,     \"  \"  )  ,    TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals (  \" nl \"  ,    loc . getLocale (  )  . getLanguage (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocaleContextWithTimeZone"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocaleContext ( request ,    response ,    new   SimpleTimeZoneAwareLocaleContext ( null ,    TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . GERMANY )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "LocaleContext   loc    =    resolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . GERMANY ,    loc . getLocale (  )  )  ;", "assertTrue (  ( loc   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  ,     (  ( TimeZoneAwareLocaleContext )     ( loc )  )  . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocaleContextWithTimeZoneOnly"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocale ( request ,    response ,    new   Locale (  \" de \"  ,     \" AT \"  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "assertNotNull ( cookie )  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    cookie . getName (  )  )  ;", "assertEquals ( null ,    cookie . getDomain (  )  )  ;", "assertEquals ( DEFAULT _ COOKIE _ PATH ,    cookie . getPath (  )  )  ;", "assertFalse ( cookie . getSecure (  )  )  ;", "assertEquals (  \" de _ AT \"  ,    cookie . getValue (  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals (  \" de \"  ,    loc . getLanguage (  )  )  ;", "assertEquals (  \" AT \"  ,    loc . getCountry (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocaleWithCountry"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLanguageTagCompliant ( true )  ;", "resolver . setLocale ( request ,    response ,    new   Locale (  \" de \"  ,     \" AT \"  )  )  ;", "Cookie   cookie    =    response . getCookie (  . DEFAULT _ COOKIE _ NAME )  ;", "assertNotNull ( cookie )  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    cookie . getName (  )  )  ;", "assertEquals ( null ,    cookie . getDomain (  )  )  ;", "assertEquals ( DEFAULT _ COOKIE _ PATH ,    cookie . getPath (  )  )  ;", "assertFalse ( cookie . getSecure (  )  )  ;", "assertEquals (  \" de - AT \"  ,    cookie . getValue (  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setCookies ( cookie )  ;", "resolver    =    new    (  )  ;", "resolver . setLanguageTagCompliant ( true )  ;", "Locale   loc    =    resolver . resolveLocale ( request )  ;", "assertEquals (  \" de \"  ,    loc . getLanguage (  )  )  ;", "assertEquals (  \" AT \"  ,    loc . getCountry (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocaleWithCountryAsLanguageTag"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,    Locale . UK . toString (  )  )  ;", "request . setCookies ( cookie )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocaleContext ( request ,    response ,    null )  ;", "Locale   locale    =     (  ( Locale )     ( request . getAttribute (  . LOCALE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertEquals ( Locale . TAIWAN ,    locale )  ;", "TimeZone   timeZone    =     (  ( TimeZone )     ( request . getAttribute (  . TIME _ ZONE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertNull ( timeZone )  ;", "Cookie [  ]    cookies    =    response . getCookies (  )  ;", "assertEquals (  1  ,    cookies . length )  ;", "Cookie   localeCookie    =    cookies [  0  ]  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    localeCookie . getName (  )  )  ;", "assertEquals (  \"  \"  ,    localeCookie . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetLocaleContextToNull"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,    Locale . UK . toString (  )  )  ;", "request . setCookies ( cookie )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultLocale ( Locale . CANADA _ FRENCH )  ;", "resolver . setDefaultTimeZone ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  ;", "resolver . setLocaleContext ( request ,    response ,    null )  ;", "Locale   locale    =     (  ( Locale )     ( request . getAttribute (  . LOCALE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertEquals ( Locale . CANADA _ FRENCH ,    locale )  ;", "TimeZone   timeZone    =     (  ( TimeZone )     ( request . getAttribute (  . TIME _ ZONE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertEquals ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  ,    timeZone )  ;", "Cookie [  ]    cookies    =    response . getCookies (  )  ;", "assertEquals (  1  ,    cookies . length )  ;", "Cookie   localeCookie    =    cookies [  0  ]  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    localeCookie . getName (  )  )  ;", "assertEquals (  \"  \"  ,    localeCookie . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetLocaleContextToNullWithDefault"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,    Locale . UK . toString (  )  )  ;", "request . setCookies ( cookie )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocale ( request ,    response ,    null )  ;", "Locale   locale    =     (  ( Locale )     ( request . getAttribute (  . LOCALE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertEquals ( Locale . TAIWAN ,    locale )  ;", "Cookie [  ]    cookies    =    response . getCookies (  )  ;", "assertEquals (  1  ,    cookies . length )  ;", "Cookie   localeCookie    =    cookies [  0  ]  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    localeCookie . getName (  )  )  ;", "assertEquals (  \"  \"  ,    localeCookie . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetLocaleToNull"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "Cookie   cookie    =    new   Cookie (  . DEFAULT _ COOKIE _ NAME ,    Locale . UK . toString (  )  )  ;", "request . setCookies ( cookie )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultLocale ( Locale . CANADA _ FRENCH )  ;", "resolver . setLocale ( request ,    response ,    null )  ;", "Locale   locale    =     (  ( Locale )     ( request . getAttribute (  . LOCALE _ REQUEST _ ATTRIBUTE _ NAME )  )  )  ;", "assertEquals ( Locale . CANADA _ FRENCH ,    locale )  ;", "Cookie [  ]    cookies    =    response . getCookies (  )  ;", "assertEquals (  1  ,    cookies . length )  ;", "Cookie   localeCookie    =    cookies [  0  ]  ;", "assertEquals (  . DEFAULT _ COOKIE _ NAME ,    localeCookie . getName (  )  )  ;", "assertEquals (  \"  \"  ,    localeCookie . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetLocaleToNullWithDefault"], "fileName": "org.springframework.web.servlet.i18n.CookieLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    configuredMethods    =    getHttpMethods (  )  ;", "if    ( ObjectUtils . isEmpty ( configuredMethods )  )     {", "return   true ;", "}", "for    ( String   configuredMethod    :    configuredMethods )     {", "if    ( configuredMethod . equalsIgnoreCase ( currentMethod )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["checkHttpMethod"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . httpMethods ;", "}", "METHOD_END"], "methodName": ["getHttpMethods"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . paramName ;", "}", "METHOD_END"], "methodName": ["getParamName"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . ignoreInvalidLocale ;", "}", "METHOD_END"], "methodName": ["isIgnoreInvalidLocale"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . languageTagCompliant ;", "}", "METHOD_END"], "methodName": ["isLanguageTagCompliant"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   isLanguageTagCompliant (  )     ?    Locale . forLanguageTag ( locale )     :    StringUtils . parseLocaleString ( locale )  ;", "}", "METHOD_END"], "methodName": ["parseLocaleValue"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . httpMethods    =    httpMethods ;", "}", "METHOD_END"], "methodName": ["setHttpMethods"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . ignoreInvalidLocale    =    ignoreInvalidLocale ;", "}", "METHOD_END"], "methodName": ["setIgnoreInvalidLocale"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . languageTagCompliant    =    languageTagCompliant ;", "}", "METHOD_END"], "methodName": ["setLanguageTagCompliant"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . paramName    =    paramName ;", "}", "METHOD_END"], "methodName": ["setParamName"], "fileName": "org.springframework.web.servlet.i18n.LocaleChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   context    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( context )  ;", "request . addPreferredLocale ( Locale . UK )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Locale   locale    =    l . resolveLocale ( request )  ;", "assertEquals ( Locale . UK ,    locale )  ;", "try    {", "l . setLocale ( request ,    response ,    Locale . GERMANY )  ;", "if    (  ! shouldSet )", "fail (  \" should   not   be   able   to   set   Locale \"  )  ;", "locale    =    l . resolveLocale ( request )  ;", "assertEquals ( Locale . GERMANY ,    locale )  ;", "}    catch    ( UnsupportedOperationException   ex )     {", "if    ( shouldSet )     {", "fail (  \" should   be   able   to   set   Locale \"  )  ;", "}", "}", "if    ( l   instanceof   LocaleContextResolver )     {", "LocaleContextResolver   localeContextResolver    =     (  ( LocaleContextResolver )     ( l )  )  ;", "LocaleContext   localeContext    =    localeContextResolver . resolveLocaleContext ( request )  ;", "if    ( shouldSet )     {", "assertEquals ( Locale . GERMANY ,    localeContext . getLocale (  )  )  ;", "} else    {", "assertEquals ( Locale . UK ,    localeContext . getLocale (  )  )  ;", "}", "assertTrue (  ( localeContext   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  )  ;", "if    ( localeContextResolver   instanceof   AbstractLocaleContextResolver )     {", "(  ( AbstractLocaleContextResolver )     ( localeContextResolver )  )  . setDefaultTimeZone ( TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  ;", "assertEquals (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  ,    TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  ;", "}", "try    {", "localeContextResolver . setLocaleContext ( request ,    response ,    new   SimpleLocaleContext ( Locale . US )  )  ;", "if    (  ! shouldSet )     {", "fail (  \" should   not   be   able   to   set   Locale \"  )  ;", "}", "localeContext    =    localeContextResolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . US ,    localeContext . getLocale (  )  )  ;", "if    ( localeContextResolver   instanceof   AbstractLocaleContextResolver )     {", "assertEquals (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  ,    TimeZone . getTimeZone (  \" GMT +  1  \"  )  )  ;", "} else    {", "assertNull (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  )  ;", "}", "localeContextResolver . setLocaleContext ( request ,    response ,    new   SimpleTimeZoneAwareLocaleContext ( Locale . GERMANY ,    TimeZone . getTimeZone (  \" GMT +  2  \"  )  )  )  ;", "localeContext    =    localeContextResolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . GERMANY ,    localeContext . getLocale (  )  )  ;", "assertTrue (  ( localeContext   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  ,    TimeZone . getTimeZone (  \" GMT +  2  \"  )  )  ;", "localeContextResolver . setLocaleContext ( request ,    response ,    new   SimpleTimeZoneAwareLocaleContext ( null ,    TimeZone . getTimeZone (  \" GMT +  3  \"  )  )  )  ;", "localeContext    =    localeContextResolver . resolveLocaleContext ( request )  ;", "assertEquals ( Locale . UK ,    localeContext . getLocale (  )  )  ;", "assertTrue (  ( localeContext   instanceof   TimeZoneAwareLocaleContext )  )  ;", "assertEquals (  (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  ,    TimeZone . getTimeZone (  \" GMT +  3  \"  )  )  ;", "if    ( localeContextResolver   instanceof   AbstractLocaleContextResolver )     {", "(  ( AbstractLocaleContextResolver )     ( localeContextResolver )  )  . setDefaultLocale ( Locale . GERMANY )  ;", "assertEquals ( Locale . GERMANY ,    localeContext . getLocale (  )  )  ;", "}", "}    catch    ( UnsupportedOperationException   ex )     {", "if    ( shouldSet )     {", "fail (  \" should   be   able   to   set   Locale \"  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.springframework.web.servlet.i18n.LocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTest ( new   AcceptHeaderLocaleResolver (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testAcceptHeaderLocaleResolver"], "fileName": "org.springframework.web.servlet.i18n.LocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTest ( new   CookieLocaleResolver (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testCookieLocaleResolver"], "fileName": "org.springframework.web.servlet.i18n.LocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTest ( new   FixedLocaleResolver ( Locale . UK )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testFixedLocaleResolver"], "fileName": "org.springframework.web.servlet.i18n.LocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTest ( new   SessionLocaleResolver (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testSessionLocaleResolver"], "fileName": "org.springframework.web.servlet.i18n.LocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   defaultLocale    =    getDefaultLocale (  )  ;", "if    ( defaultLocale    =  =    null )     {", "defaultLocale    =    request . getLocale (  )  ;", "}", "return   defaultLocale ;", "}", "METHOD_END"], "methodName": ["determineDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "return   getDefaultTimeZone (  )  ;", "}", "METHOD_END"], "methodName": ["determineDefaultTimeZone"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . localeAttributeName    =    localeAttributeName ;", "}", "METHOD_END"], "methodName": ["setLocaleAttributeName"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "this . timeZoneAttributeName    =    timeZoneAttributeName ;", "}", "METHOD_END"], "methodName": ["setTimeZoneAttributeName"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolver"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . getSession (  )  . setAttribute (  . LOCALE _ SESSION _ ATTRIBUTE _ NAME ,    Locale . GERMAN )  ;", "resolver    =    new    (  )  ;", "assertEquals ( Locale . GERMAN ,    resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocale"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "assertEquals ( request . getLocale (  )  ,    resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleWithoutSession"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "resolver    =    new    (  )  ;", "resolver . setDefaultLocale ( Locale . GERMAN )  ;", "assertEquals ( Locale . GERMAN ,    resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveLocaleWithoutSessionAndDefaultLocale"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocale ( request ,    response ,    Locale . GERMAN )  ;", "assertEquals ( Locale . GERMAN ,    resolver . resolveLocale ( request )  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setSession ( session )  ;", "resolver    =    new    (  )  ;", "assertEquals ( Locale . GERMAN ,    resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testSetAndResolveLocale"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "request . getSession (  )  . setAttribute (  . LOCALE _ SESSION _ ATTRIBUTE _ NAME ,    Locale . GERMAN )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "resolver    =    new    (  )  ;", "resolver . setLocale ( request ,    response ,    null )  ;", "Locale   locale    =     (  ( Locale )     ( request . getSession (  )  . getAttribute (  . LOCALE _ SESSION _ ATTRIBUTE _ NAME )  )  )  ;", "assertNull ( locale )  ;", "HttpSession   session    =    request . getSession (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . TAIWAN )  ;", "request . setSession ( session )  ;", "resolver    =    new    (  )  ;", "assertEquals ( Locale . TAIWAN ,    resolver . resolveLocale ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testSetLocaleToNullLocale"], "fileName": "org.springframework.web.servlet.i18n.SessionLocaleResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   this . synchronizeOnSession ;", "}", "METHOD_END"], "methodName": ["isSynchronizeOnSession"], "fileName": "org.springframework.web.servlet.mvc.AbstractController"}, {"methodBody": ["METHOD_START", "{", "this . synchronizeOnSession    =    synchronizeOnSession ;", "}", "METHOD_END"], "methodName": ["setSynchronizeOnSession"], "fileName": "org.springframework.web.servlet.mvc.AbstractController"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.mvc.AbstractUrlViewController"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setAlwaysUseFullPath ( alwaysUseFullPath )  ;", "}", "METHOD_END"], "methodName": ["setAlwaysUseFullPath"], "fileName": "org.springframework.web.servlet.mvc.AbstractUrlViewController"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setRemoveSemicolonContent ( removeSemicolonContent )  ;", "}", "METHOD_END"], "methodName": ["setRemoveSemicolonContent"], "fileName": "org.springframework.web.servlet.mvc.AbstractUrlViewController"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setUrlDecode ( urlDecode )  ;", "}", "METHOD_END"], "methodName": ["setUrlDecode"], "fileName": "org.springframework.web.servlet.mvc.AbstractUrlViewController"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.mvc.AbstractUrlViewController"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    mock ( HttpServletRequest . class )  ;", "HttpServletResponse   response    =    mock ( HttpServletResponse . class )  ;", "ServletContext   context    =    mock ( ServletContext . class )  ;", "RequestDispatcher   dispatcher    =    mock ( RequestDispatcher . class )  ;", "given ( request . getMethod (  )  )  . willReturn (  \" GET \"  )  ;", "given ( context . getNamedDispatcher (  \" action \"  )  )  . willReturn ( dispatcher )  ;", "if    ( include )     {", "given ( request . getAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE )  )  . willReturn (  \" somePath \"  )  ;", "} else    {", "given ( request . getAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE )  )  . willReturn ( null )  ;", "}", "StaticWebApplicationContext   sac    =    new   StaticWebApplicationContext (  )  ;", "sac . setServletContext ( context )  ;", "sfc . setApplicationContext ( sac )  ;", "assertNull ( sfc . handleRequest ( request ,    response )  )  ;", "if    ( include )     {", "verify ( dispatcher )  . include ( request ,    response )  ;", "} else    {", "verify ( dispatcher )  . forward ( request ,    response )  ;", "}", "}", "METHOD_END"], "methodName": ["doTestServletForwardingController"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =     \" viewName \"  ;", "ParameterizableView   pvc    =    new   ParameterizableView (  )  ;", "pvc . setViewName ( viewName )  ;", "ModelAndView   mv    =    pvc . handleRequest ( new   MockHttpServletRequest (  \" GET \"  ,     \" foo . html \"  )  ,    new   MockHttpServletResponse (  )  )  ;", "assertTrue (  \" model   has   no   data \"  ,     (  ( mv . getModel (  )  . size (  )  )     =  =     0  )  )  ;", "assertTrue (  \" model   has   correct   viewname \"  ,    mv . getViewName (  )  . equals ( viewName )  )  ;", "assertTrue (  \" getViewName   matches \"  ,    pvc . getViewName (  )  . equals ( viewName )  )  ;", "}", "METHOD_END"], "methodName": ["parameterizableViewController"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "ServletForwardingController   sfc    =    new   ServletForwardingController (  )  ;", "sfc . setServletName (  \" action \"  )  ;", "doTestServletForwardingController ( sfc ,    false )  ;", "}", "METHOD_END"], "methodName": ["servletForwardingController"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "ServletForwardingController   sfc    =    new   ServletForwardingController (  )  ;", "sfc . setBeanName (  \" action \"  )  ;", "doTestServletForwardingController ( sfc ,    false )  ;", "}", "METHOD_END"], "methodName": ["servletForwardingControllerWithBeanName"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "ServletForwardingController   sfc    =    new   ServletForwardingController (  )  ;", "sfc . setServletName (  \" action \"  )  ;", "doTestServletForwardingController ( sfc ,    true )  ;", "}", "METHOD_END"], "methodName": ["servletForwardingControllerWithInclude"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / somePath \"  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ServletWrappingController   swc    =    new   ServletWrappingController (  )  ;", "swc . setServletClass (  . TestServlet . class )  ;", "swc . setServletName (  \" action \"  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" config \"  ,     \" myValue \"  )  ;", "swc . setInitParameters ( props )  ;", "swc . afterPropertiesSet (  )  ;", "assertNotNull (  . TestServlet . config )  ;", "assertEquals (  \" action \"  ,     . TestServlet . config . getServletName (  )  )  ;", "assertEquals (  \" myValue \"  ,     . TestServlet . config . getInitParameter (  \" config \"  )  )  ;", "assertNull (  . TestServlet . request )  ;", "assertFalse (  . TestServlet . destroyed )  ;", "assertNull ( swc . handleRequest ( request ,    response )  )  ;", "assertEquals ( request ,     . TestServlet . request )  ;", "assertEquals ( response ,     . TestServlet . response )  ;", "assertFalse (  . TestServlet . destroyed )  ;", "swc . destroy (  )  ;", "assertTrue (  . TestServlet . destroyed )  ;", "}", "METHOD_END"], "methodName": ["servletWrappingController"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / somePath \"  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ServletWrappingController   swc    =    new   ServletWrappingController (  )  ;", "swc . setServletClass (  . TestServlet . class )  ;", "swc . setBeanName (  \" action \"  )  ;", "swc . afterPropertiesSet (  )  ;", "assertNotNull (  . TestServlet . config )  ;", "assertEquals (  \" action \"  ,     . TestServlet . config . getServletName (  )  )  ;", "assertNull (  . TestServlet . request )  ;", "assertFalse (  . TestServlet . destroyed )  ;", "assertNull ( swc . handleRequest ( request ,    response )  )  ;", "assertEquals ( request ,     . TestServlet . request )  ;", "assertEquals ( response ,     . TestServlet . response )  ;", "assertFalse (  . TestServlet . destroyed )  ;", "swc . destroy (  )  ;", "assertTrue (  . TestServlet . destroyed )  ;", "}", "METHOD_END"], "methodName": ["servletWrappingControllerWithBeanName"], "fileName": "org.springframework.web.servlet.mvc.ControllerTests"}, {"methodBody": ["METHOD_START", "{", "return   this . statusCode ;", "}", "METHOD_END"], "methodName": ["getStatusCode"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )    instanceof   View    ?     (  ( View )     ( this . view )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getView"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "return    ( this . view )    instanceof   String    ?     (  ( String )     ( this . view )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getViewName"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "return   this . statusOnly ;", "}", "METHOD_END"], "methodName": ["isStatusOnly"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "this . statusCode    =    statusCode ;", "}", "METHOD_END"], "methodName": ["setStatusCode"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "this . statusOnly    =    statusOnly ;", "}", "METHOD_END"], "methodName": ["setStatusOnly"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "this . view    =    view ;", "}", "METHOD_END"], "methodName": ["setView"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "this . view    =    viewName ;", "}", "METHOD_END"], "methodName": ["setViewName"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewController"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( OPTIONS . name (  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mav    =    this . c . handleRequest ( this . request ,    response )  ;", "assertNull ( mav )  ;", "assertEquals (  \" GET , HEAD , OPTIONS \"  ,    response . getHeader (  \" Allow \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestHttpOptions"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( DispatcherServlet . INPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   ModelMap (  \" name \"  ,     \" value \"  )  )  ;", "ModelAndView   mav    =    this . c . handleRequest ( this . request ,    new   MockHttpServletResponse (  )  )  ;", "assertEquals (  1  ,    mav . getModel (  )  . size (  )  )  ;", "assertEquals (  \" value \"  ,    mav . getModel (  )  . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestWithFlashAttributes"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =     \" testView \"  ;", "this . c . setViewName ( viewName )  ;", "ModelAndView   mav    =    this . c . handleRequest ( this . request ,    new   MockHttpServletResponse (  )  )  ;", "assertEquals ( viewName ,    mav . getViewName (  )  )  ;", "assertTrue ( mav . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestWithViewName"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   mav    =    this . controller . handleRequest ( this . request ,    new   MockHttpServletResponse (  )  )  ;", "assertNull ( mav . getViewName (  )  )  ;", "assertTrue ( mav . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestWithoutViewName"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller    =    new   ParameterizableViewController (  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletName    =    servletName ;", "}", "METHOD_END"], "methodName": ["setServletName"], "fileName": "org.springframework.web.servlet.mvc.ServletForwardingController"}, {"methodBody": ["METHOD_START", "{", "return    ( WebUtils . isIncludeRequest ( request )  )     |  |     ( response . isCommitted (  )  )  ;", "}", "METHOD_END"], "methodName": ["useInclude"], "fileName": "org.springframework.web.servlet.mvc.ServletForwardingController"}, {"methodBody": ["METHOD_START", "{", "this . initParameters    =    initParameters ;", "}", "METHOD_END"], "methodName": ["setInitParameters"], "fileName": "org.springframework.web.servlet.mvc.ServletWrappingController"}, {"methodBody": ["METHOD_START", "{", "this . servletClass    =    servletClass ;", "}", "METHOD_END"], "methodName": ["setServletClass"], "fileName": "org.springframework.web.servlet.mvc.ServletWrappingController"}, {"methodBody": ["METHOD_START", "{", "this . servletName    =    servletName ;", "}", "METHOD_END"], "methodName": ["setServletName"], "fileName": "org.springframework.web.servlet.mvc.ServletWrappingController"}, {"methodBody": ["METHOD_START", "{", "String   urlPath    =     (  ( String )     ( request . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  )  ;", "if    (  !  ( StringUtils . hasText ( urlPath )  )  )     {", "urlPath    =    getUrlPathHelper (  )  . getLookupPathForRequest ( request )  ;", "}", "return   urlPath ;", "}", "METHOD_END"], "methodName": ["extractOperableUrl"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "int   start    =     (  ( uri . charAt (  0  )  )     =  =     '  /  '  )     ?     1     :     0  ;", "int   lastIndex    =    uri . lastIndexOf (  '  .  '  )  ;", "int   end    =     ( lastIndex    <     0  )     ?    uri . length (  )     :    lastIndex ;", "return   uri . subst ( start ,    end )  ;", "}", "METHOD_END"], "methodName": ["extractViewNameFromUrlPath"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "return   this . prefix ;", "}", "METHOD_END"], "methodName": ["getPrefix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "return   this . suffix ;", "}", "METHOD_END"], "methodName": ["getSuffix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =    this . viewNameCache . get ( uri )  ;", "if    ( viewName    =  =    null )     {", "viewName    =    extractViewNameFromUrlPath ( uri )  ;", "viewName    =    postProcessViewName ( viewName )  ;", "this . viewNameCache . put ( uri ,    viewName )  ;", "}", "return   viewName ;", "}", "METHOD_END"], "methodName": ["getViewNameForUrlPath"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "return    (  ( getPrefix (  )  )     +    viewName )     +     ( getSuffix (  )  )  ;", "}", "METHOD_END"], "methodName": ["postProcessViewName"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "this . prefix    =     ( prefix    !  =    null )     ?    prefix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setPrefix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "this . suffix    =     ( suffix    !  =    null )     ?    suffix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setSuffix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewController"}, {"methodBody": ["METHOD_START", "{", "String   pathInMapping    =    this . pathMatcher . extractPathWithinPattern ( mapping ,    request . getRequestURI (  )  )  ;", "request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,    pathInMapping )  ;", "}", "METHOD_END"], "methodName": ["exposePathInMapping"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / docs / cvs / commit . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" docs / cvs / commit \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiLevel"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / docs / cvs / commit . html \"  )  ;", "exposePathInMapping ( request ,     \"  / docs / cvs / commit . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" docs / cvs / commit \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiLevelMappingWithFallback"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / docs / cvs / commit . html \"  )  ;", "exposePathInMapping ( request ,     \"  / docs /  *  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" cvs / commit \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiLevelWithMapping"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / products / view . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" products / view \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathisUsedAsViewName_InBreakingChangeFromSpring12Line"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "ctrl . setPrefix ( null )  ;", "assertNotNull (  \" For   setPrefix (  .  .  )    with   null ,    the   empty   string   must   be   used   instead .  \"  ,    ctrl . getPrefix (  )  )  ;", "assertEquals (  \" For   setPrefix (  .  .  )    with   null ,    the   empty   string   must   be   used   instead .  \"  ,     \"  \"  ,    ctrl . getPrefix (  )  )  ;", "}", "METHOD_END"], "methodName": ["settingPrefixToNullCausesEmptyStringToBeUsed"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "ctrl . setSuffix ( null )  ;", "assertNotNull (  \" For   setPrefix (  .  .  )    with   null ,    the   empty   string   must   be   used   instead .  \"  ,    ctrl . getSuffix (  )  )  ;", "assertEquals (  \" For   setPrefix (  .  .  )    with   null ,    the   empty   string   must   be   used   instead .  \"  ,     \"  \"  ,    ctrl . getSuffix (  )  )  ;", "}", "METHOD_END"], "methodName": ["settingSuffixToNullCausesEmptyStringToBeUsed"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myapp / docs / cvs / commit . html \"  )  ;", "request . setContextPath (  \"  / myapp \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" docs / cvs / commit \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withContextMapping"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index ; a = A ; b = B \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" index \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withFilenameAndMatrixVariables"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" index \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withFilenamePlusExtension"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index \"  )  ;", "request . setAttribute ( DispatcherServlet . INPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   ModelMap (  \" name \"  ,     \" value \"  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" index \"  ,    mv . getViewName (  )  )  ;", "assertEquals (  1  ,    mv . getModel (  )  . size (  )  )  ;", "assertEquals (  \" value \"  ,    mv . getModel (  )  . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withFlashAttributes"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" index \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withPlainFilename"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "ctrl . setPrefix (  \" mypre _  \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" mypre _ index \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withPrefix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "ctrl . setPrefix (  \" mypre _  \"  )  ;", "ctrl . setSuffix (  \"  _ mysuf \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" mypre _ index _ mysuf \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withPrefixAndSuffix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "UrlFilenameViewController   ctrl    =    new   UrlFilenameViewController (  )  ;", "ctrl . setSuffix (  \"  _ mysuf \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / index . html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "ModelAndView   mv    =    ctrl . handleRequest ( request ,    response )  ;", "assertEquals (  \" index _ mysuf \"  ,    mv . getViewName (  )  )  ;", "assertTrue ( mv . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSuffix"], "fileName": "org.springframework.web.servlet.mvc.UrlFilenameViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "for    ( String   path    :    paths )     {", "this . cacheControlMappings . put ( path ,    cacheControl )  ;", "}", "}", "METHOD_END"], "methodName": ["addCacheMapping"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "CacheControl   cacheControl    =    this . cacheControlMappings . get ( urlPath )  ;", "if    ( cacheControl    !  =    null )     {", "return   cacheControl ;", "}", "for    ( String   registeredPath    :    this . cacheControlMappings . keySet (  )  )     {", "if    ( this . pathMatcher . match ( registeredPath ,    urlPath )  )     {", "return   this . cacheControlMappings . get ( registeredPath )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["lookupCacheControl"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "Integer   cacheSeconds    =    this . cacheMappings . get ( urlPath )  ;", "if    ( cacheSeconds    !  =    null )     {", "return   cacheSeconds ;", "}", "for    ( String   registeredPath    :    this . cacheMappings . keySet (  )  )     {", "if    ( this . pathMatcher . match ( registeredPath ,    urlPath )  )     {", "return   this . cacheMappings . get ( registeredPath )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["lookupCacheSeconds"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setAlwaysUseFullPath ( alwaysUseFullPath )  ;", "}", "METHOD_END"], "methodName": ["setAlwaysUseFullPath"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . cacheMappings . clear (  )  ;", "Enumeration <  ?  >    propNames    =    cacheMappings . propertyNames (  )  ;", "while    ( propNames . hasMoreElements (  )  )     {", "St   path    =     (  ( St )     ( propNames . nextElement (  )  )  )  ;", "int   cacheSeconds    =    Integer . parseInt ( cacheMappings . getProperty ( path )  )  ;", "this . cacheMappings . put ( path ,    cacheSeconds )  ;", "}", "}", "METHOD_END"], "methodName": ["setCacheMappings"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( pathMatcher ,     \" PathMatcher   must   not   be   null \"  )  ;", "this . pathMatcher    =    pathMatcher ;", "}", "METHOD_END"], "methodName": ["setPathMatcher"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setUrlDecode ( urlDecode )  ;", "}", "METHOD_END"], "methodName": ["setUrlDecode"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptor"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  1  0  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "Iterable < String >    cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . hasItem (  \" max - age =  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheResourcesConfiguration"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  1  0  )  ;", "response . setHeader (  \" Pragma \"  ,     \" no - cache \"  )  ;", "response . setHeader (  \" Expires \"  ,     \"  0  \"  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "assertThat ( response . getHeader (  \" Pragma \"  )  ,    is (  \"  \"  )  )  ;", "assertThat ( response . getHeader (  \" Expires \"  )  ,    is (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cachingConfigAndPragmaHeader"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  (  -  1  )  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "Iterable < String >    expiresHeaders    =    response . getHeaders (  \" Expires \"  )  ;", "assertThat ( expiresHeaders ,    Matchers . emptyIterable (  )  )  ;", "Iterable < String >    cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . emptyIterable (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyCacheConfiguration"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  1  0  )  ;", "interceptor . setAlwaysMustRevalidate ( true )  ;", "response . setHeader (  \" Pragma \"  ,     \" no - cache \"  )  ;", "response . setHeader (  \" Expires \"  ,     \"  0  \"  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "assertThat ( response . getHeader (  \" Pragma \"  )  ,    is (  \"  \"  )  )  ;", "assertThat ( response . getHeader (  \" Expires \"  )  ,    is (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["http10CachingConfigAndPragmaHeader"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  0  )  ;", "interceptor . setUseExpiresHeader ( true )  ;", "interceptor . setAlwaysMustRevalidate ( true )  ;", "Properties   mappings    =    new   Properties (  )  ;", "mappings . setProperty (  \"  *  /  *  . cache . html \"  ,     \"  1  0  \"  )  ;", "interceptor . setCacheMappings ( mappings )  ;", "request . setRequestURI (  \" foo / page . html \"  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "Iterable < String >    expiresHeaders    =    response . getHeaders (  \" Expires \"  )  ;", "assertThat ( expiresHeaders ,    Matchers . iterableWithSize (  1  )  )  ;", "Iterable < String >    cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . contains (  \" no - cache \"  ,     \" no - store \"  )  )  ;", "Iterable < String >    pragmaHeaders    =    response . getHeaders (  \" Pragma \"  )  ;", "assertThat ( pragmaHeaders ,    Matchers . contains (  \" no - cache \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \" foo / page . cache . html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "expiresHeaders    =    response . getHeaders (  \" Expires \"  )  ;", "assertThat ( expiresHeaders ,    Matchers . iterableWithSize (  1  )  )  ;", "cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . contains (  \" max - age =  1  0  ,    must - revalidate \"  )  )  ;", "}", "METHOD_END"], "methodName": ["http10CachingConfigAndSpecificMapping"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "Properties   mappings    =    new   Properties (  )  ;", "mappings . setProperty (  \"  *  /  * handle . vm \"  ,     \"  -  1  \"  )  ;", "interceptor    =    new    (  )  ;", "interceptor . setCacheSeconds (  1  0  )  ;", "interceptor . setCacheMappings ( mappings )  ;", "request . setRequestURI (  \" example / adminhandle . vm \"  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "Iterable < String >    cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . emptyIterable (  )  )  ;", "request . setRequestURI (  \" example / bingo . html \"  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . hasItem (  \" max - age =  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["mappedCacheConfigurationOverridesGlobal"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setCacheSeconds (  0  )  ;", "interceptor . preHandle ( request ,    response ,    null )  ;", "Iterable < String >    cacheControlHeaders    =    response . getHeaders (  \" Cache - Control \"  )  ;", "assertThat ( cacheControlHeaders ,    Matchers . contains (  \" no - store \"  )  )  ;", "}", "METHOD_END"], "methodName": ["preventCacheConfiguration"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentInterceptor   interceptor    =    new   WebContentInterceptor (  )  ;", "interceptor . setPathMatcher ( null )  ;", "}", "METHOD_END"], "methodName": ["throwsExceptionWithNullPathMatcher"], "fileName": "org.springframework.web.servlet.mvc.WebContentInterceptorTests"}, {"methodBody": ["METHOD_START", "{", "servlet    =    new   DispatcherServlet (  )     {", "@ Override", "protected   WebApplicationContext   createWebApplicationContext (  @ Nullable", "WebApplicationContext   parent )     {", "GenericWebApplicationContext   wac    =    new   GenericWebApplicationContext (  )  ;", "wac . registerBeanDefinition (  \" controller \"  ,    new   RootBeanDefinition ( controllerClass )  )  ;", "DefaultAdvisorAutoProxyCreator   autoProxyCreator    =    new   DefaultAdvisorAutoProxyCreator (  )  ;", "autoProxyCreator . setProxyTargetClass ( true )  ;", "autoProxyCreator . setBeanFactory ( wac . getBeanFactory (  )  )  ;", "wac . getBeanFactory (  )  . addBeanPostProcessor ( autoProxyCreator )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" advisor \"  ,    new   aop . support . DefaultPointcutAdvisor ( new   SimpleTraceInterceptor ( true )  )  )  ;", "wac . refresh (  )  ;", "return   wac ;", "}", "}  ;", "servlet . init ( new   MockServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["initServlet"], "fileName": "org.springframework.web.servlet.mvc.annotation.CglibProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( CglibProxyControllerTests . MethodLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["methodLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.CglibProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( CglibProxyControllerTests . TypeAndMethodLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels / bookings \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeAndMethodLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.CglibProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( CglibProxyControllerTests . TypeLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.CglibProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "servlet    =    new   DispatcherServlet (  )     {", "@ Override", "protected   WebApplicationContext   createWebApplicationContext (  @ Nullable", "WebApplicationContext   parent )     {", "GenericWebApplicationContext   wac    =    new   GenericWebApplicationContext (  )  ;", "wac . registerBeanDefinition (  \" controller \"  ,    new   RootBeanDefinition ( controllerclass )  )  ;", "DefaultAdvisorAutoProxyCreator   autoProxyCreator    =    new   DefaultAdvisorAutoProxyCreator (  )  ;", "autoProxyCreator . setBeanFactory ( wac . getBeanFactory (  )  )  ;", "wac . getBeanFactory (  )  . addBeanPostProcessor ( autoProxyCreator )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" advisor \"  ,    new   aop . support . DefaultPointcutAdvisor ( new   SimpleTraceInterceptor ( true )  )  )  ;", "wac . refresh (  )  ;", "return   wac ;", "}", "}  ;", "servlet . init ( new   MockServletConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["initServlet"], "fileName": "org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( JdkProxyControllerTests . MethodLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["methodLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( JdkProxyControllerTests . TypeAndMethodLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels / bookings \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeAndMethodLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "initServlet ( JdkProxyControllerTests . TypeLevelImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "servlet . service ( request ,    response )  ;", "assertEquals (  \" doIt \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeLevel"], "fileName": "org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( StringUtils . hasLength ( reason )  )  )     {", "r . sendError ( statusCode )  ;", "} else    {", "String   resolvedReason    =     (  ( this . messageSource )     !  =    null )     ?    this . messageSource . getMessage ( reason ,    null ,    reason ,    LocaleContextHolder . getLocale (  )  )     :    reason ;", "r . sendError ( statusCode ,    resolvedReason )  ;", "}", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["applyStatusAndReason"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "int   statusCode    =    responseStatus . code (  )  . value (  )  ;", "String   reason    =    responseStatus . reason (  )  ;", "return   applyStatusAndReason ( statusCode ,    reason ,    response )  ;", "}", "METHOD_END"], "methodName": ["resolveResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "int   statusCode    =    ex . getStatus (  )  . value (  )  ;", "String   reason    =    ex . getReason (  )  ;", "return   applyStatusAndReason ( statusCode ,    reason ,    r )  ;", "}", "METHOD_END"], "methodName": ["resolveResponseStatusException"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,     (  ( mav    !  =    null )     &  &     ( mav . isEmpty (  )  )  )  )  ;", "assertEquals ( status ,    r . getStatus (  )  )  ;", "assertEquals ( reason ,    r . getErrorMessage (  )  )  ;", "assertTrue ( r . isCommitted (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertResolved"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   cause    =    new   ResponseStatusExceptionResolverTests . StatusCodeAndReasonMessageException (  )  ;", "TypeMismatchException   ex    =    new   TypeMismatchException (  \" value \"  ,    ITestBean . class ,    cause )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  1  0  ,     \" gone . reason \"  )  ;", "}", "METHOD_END"], "methodName": ["nestedException"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   Exception (  )  ;", "e . resolveException ( request ,    response ,    null ,    ex )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNull (  \" ModelAndView   returned \"  ,    mav )  ;", "}", "METHOD_END"], "methodName": ["notAnnotated"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResponseStatusException   ex    =    new   ResponseStatusException ( HttpStatus . BAD _ REQUEST )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  0  0  ,    null )  ;", "}", "METHOD_END"], "methodName": ["responseStatusException"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResponseStatusException   ex    =    new   ResponseStatusException ( HttpStatus . BAD _ REQUEST ,     \" The   reason \"  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  0  0  ,     \" The   reason \"  )  ;", "}", "METHOD_END"], "methodName": ["responseStatusExceptionWithReason"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setWarnLogCategory ( exceptionResolver . getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResponseStatusExceptionResolverTests . StatusCodeException   ex    =    new   ResponseStatusExceptionResolverTests . StatusCodeException (  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  0  0  ,    null )  ;", "}", "METHOD_END"], "methodName": ["statusCode"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResponseStatusExceptionResolverTests . StatusCodeAndReasonException   ex    =    new   ResponseStatusExceptionResolverTests . StatusCodeAndReasonException (  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  1  0  ,     \" You   suck !  \"  )  ;", "}", "METHOD_END"], "methodName": ["statusCodeAndReason"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =    Locale . CHINESE ;", "LocaleContextHolder . setLocale ( locale )  ;", "try    {", "StaticMessageSource   messageSource    =    new   StaticMessageSource (  )  ;", "messageSource . addMessage (  \" gone . reason \"  ,    locale ,     \" Gone   reason   message \"  )  ;", "exceptionResolver . setMessageSource ( messageSource )  ;", ". StatusCodeAndReasonMessageException   ex    =    new    . StatusCodeAndReasonMessageException (  )  ;", "exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertEquals (  \" Invalid   status   reason \"  ,     \" Gone   reason   message \"  ,    response . getErrorMessage (  )  )  ;", "}    finally    {", "LocaleContextHolder . resetLocaleContext (  )  ;", "}", "}", "METHOD_END"], "methodName": ["statusCodeAndReasonMessage"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResponseStatusExceptionResolverTests . StatusCodeFromComposedResponseStatusException   ex    =    new   ResponseStatusExceptionResolverTests . StatusCodeFromComposedResponseStatusException (  )  ;", "ModelAndView   mav    =    exceptionResolver . resolveException ( request ,    response ,    null ,    ex )  ;", "assertResolved ( mav ,     4  0  0  ,    null )  ;", "}", "METHOD_END"], "methodName": ["statusCodeFromComposedResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "boolean   isMatch ;", "if    (  ( this . value )     !  =    null )     {", "isMatch    =    match ( request )  ;", "} else    {", "isMatch    =    matchName ( request )  ;", "}", "return   this . isNegated    ?     ! isMatch    :    isMatch ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "org.springframework.web.servlet.mvc.condition.AbstractNameValueExpression"}, {"methodBody": ["METHOD_START", "{", "return   getContent (  )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.AbstractRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Assert . isTrue (  (  ( getLength (  )  )     =  =     ( other . getLength (  )  )  )  ,     (  (  (  \" Cannot   combine   CompositeRequestConditions   with   a   different   number   of   conditions .     \"     +     ( ObjectUtils . nullSafeToString ( this . requestConditions )  )  )     +     \"    and       \"  )     +     ( ObjectUtils . nullSafeToString ( other . requestConditions )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertNumberOfConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   unwrap (  )  ;", "}", "METHOD_END"], "methodName": ["getConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   this . requestConditions . length ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestCondition"}, {"methodBody": ["METHOD_START", "{", "List < RequestCondition <  ?  >  >    result    =    new   ArrayList <  >  (  )  ;", "for    ( RequestConditionHolder   holder    :    this . requestConditions )     {", "result . add ( holder . getCondition (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["unwrap"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestCondition"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder [  ]    wrappedConditions    =    new   RequestConditionHolder [ rawConditions . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( rawConditions . length )  ;    i +  +  )     {", "wrappedConditions [ i ]     =    new   RequestConditionHolder ( rawConditions [ i ]  )  ;", "}", "return   wrappedConditions ;", "}", "METHOD_END"], "methodName": ["wrap"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestCondition"}, {"methodBody": ["METHOD_START", "{", "CompositeRequestCondition   cond 1     =    new   CompositeRequestCondition ( this . param 1  ,    this . header 1  )  ;", "CompositeRequestCondition   cond 2     =    new   CompositeRequestCondition ( this . param 2  ,    this . header 2  )  ;", "CompositeRequestCondition   cond 3     =    new   CompositeRequestCondition ( this . param 3  ,    this . header 3  )  ;", "assertEquals ( cond 3  ,    cond 1  . combine ( cond 2  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "CompositeRequestCondition   cond 1     =    new   CompositeRequestCondition ( this . param 1  )  ;", "CompositeRequestCondition   cond 2     =    new   CompositeRequestCondition ( this . param 1  ,    this . header 1  )  ;", "cond 1  . combine ( cond 2  )  ;", "}", "METHOD_END"], "methodName": ["combineDifferentLength"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "CompositeRequestCondition   empty    =    new   CompositeRequestCondition (  )  ;", "CompositeRequestCondition   notEmpty    =    new   CompositeRequestCondition ( this . param 1  )  ;", "assertSame ( empty ,    empty . combine ( empty )  )  ;", "assertSame ( notEmpty ,    notEmpty . combine ( empty )  )  ;", "assertSame ( notEmpty ,    empty . combine ( notEmpty )  )  ;", "}", "METHOD_END"], "methodName": ["combineEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "cond 1     =    new    ( this . param 1  )  ;", "cond 3     =    new    ( this . param 3  )  ;", "assertEquals (  1  ,    cond 1  . compareTo ( cond 3  ,    request )  )  ;", "assertEquals (  (  -  1  )  ,    cond 3  . compareTo ( cond 1  ,    request )  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "CompositeRequestCondition   cond 1     =    new   CompositeRequestCondition ( this . param 1  )  ;", "CompositeRequestCondition   cond 2     =    new   CompositeRequestCondition ( this . param 1  ,    this . header 1  )  ;", "cond 1  . compareTo ( cond 2  ,    new   MockHttpServletRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["compareDifferentLength"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "empty    =    new    (  )  ;", "notEmpty    =    new    ( this . param 1  )  ;", "assertEquals (  0  ,    empty . compareTo ( empty ,    request )  )  ;", "assertEquals (  (  -  1  )  ,    notEmpty . compareTo ( empty ,    request )  )  ;", "assertEquals (  1  ,    empty . compareTo ( notEmpty ,    request )  )  ;", "}", "METHOD_END"], "methodName": ["compareEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . setParameter (  \" param 1  \"  ,     \" paramValue 1  \"  )  ;", "request . addHeader (  \" header 1  \"  ,     \" headerValue 1  \"  )  ;", "RequestCondition <  ?  >    getPostCond    =    new   RequestMethodsRequestCondition ( RequestMethod . GET ,    RequestMethod . POST )  ;", "RequestCondition <  ?  >    getCond    =    new   RequestMethodsRequestCondition ( RequestMethod . GET )  ;", "condition    =    new    ( this . param 1  ,    getPostCond )  ;", "matchingCondition    =    new    ( this . param 1  ,    getCond )  ;", "assertEquals ( matchingCondition ,    condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "CompositeRequestCondition   empty    =    new   CompositeRequestCondition (  )  ;", "assertSame ( empty ,    empty . getMatchingCondition ( new   MockHttpServletRequest (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["matchEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "cond    =    new    ( this . param 1  )  ;", "assertNull ( cond . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["noMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "this . param 1     =    new   ParamsRequestCondition (  \" param 1  \"  )  ;", "this . param 2     =    new   ParamsRequestCondition (  \" param 2  \"  )  ;", "this . param 3     =    this . param 1  . combine ( this . param 2  )  ;", "this . header 1     =    new   HeadersRequestCondition (  \" header 1  \"  )  ;", "this . header 2     =    new   HeadersRequestCondition (  \" header 2  \"  )  ;", "this . header 3     =    this . header 1  . combine ( this . header 2  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.condition.CompositeRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    result    =    new   LinkedHashSet <  >  (  )  ;", "for    (  . ConsumeMediaTypeExpression   expression    :    this . expressions )     {", "if    (  !  ( expression . isNegated (  )  )  )     {", "result . add ( expression . getMediaType (  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getConsumableMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   new   LinkedHashSet <  >  ( this . expressions )  ;", "}", "METHOD_END"], "methodName": ["getExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < ConsumesRequestCondition . ConsumeMediaTypeExpression >    result    =    new   LinkedHashSet <  >  (  )  ;", "if    ( headers    !  =    null )     {", "for    ( String   header    :    headers )     {", "HeadersRequestCondition . HeaderExpression   expr    =    new   HeadersRequestCondition . HeaderExpression ( header )  ;", "if    (  (  \" Content - Type \"  . equalsIgnoreCase ( expr . name )  )     &  &     (  ( expr . value )     !  =    null )  )     {", "for    ( MediaType   mediaType    :    MediaType . parseMediaTypes ( expr . value )  )     {", "result . add ( new   ConsumesRequestCondition . ConsumeMediaTypeExpression ( mediaType ,    expr . isNegated )  )  ;", "}", "}", "}", "}", "for    ( String   consume    :    consumes )     {", "result . add ( new   ConsumesRequestCondition . ConsumeMediaTypeExpression ( consume )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["parseExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Collection < ConsumesRequestCondition . ConsumeMediaTypeExpression >    expressions    =    condition . getContent (  )  ;", "assertEquals (  \" Invalid   amount   of   conditions \"  ,    expressions . size (  )  ,    expected . length )  ;", "for    ( String   s    :    expected )     {", "boolean   found    =    false ;", "for    ( ConsumesRequestCondition . ConsumeMediaTypeExpression   expr    :    expressions )     {", "String   conditionMediaType    =    expr . getMediaType (  )  . toString (  )  ;", "if    ( conditionMediaType . equals ( s )  )     {", "found    =    true ;", "break ;", "}", "}", "if    (  ! found )     {", "fail (  (  (  \" Condition    [  \"     +    s )     +     \"  ]    not   found \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition 1     =    new   ConsumesRequestCondition (  \" text / plain \"  )  ;", "ConsumesRequestCondition   condition 2     =    new   ConsumesRequestCondition (  \" application / xml \"  )  ;", "ConsumesRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "assertEquals ( condition 2  ,    result )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition 1     =    new   ConsumesRequestCondition (  \" text / plain \"  )  ;", "ConsumesRequestCondition   condition 2     =    new   ConsumesRequestCondition (  )  ;", "ConsumesRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "assertEquals ( condition 1  ,    result )  ;", "}", "METHOD_END"], "methodName": ["combineWithDefault"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "condition 1     =    new    (  \"  *  /  *  \"  ,     \" text / plain \"  )  ;", "condition 2     =    new    (  \" text /  *  \"  ,     \" text / plain ; q =  0  .  7  \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToMultiple"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "condition 1     =    new    (  \" text / plain \"  )  ;", "condition 2     =    new    (  \" text /  *  \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToSingle"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \" text / plain \"  ,     \" application / xml \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesMultipleMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \"  0  1  \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesParseError"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \"  ! text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \"  0  1  \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesParseErrorWithNegation"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" application / xml \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesSingleNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \" text /  *  \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["consumesWildcardMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \"  ! application / xml \"  )  ;", "assertEquals ( Collections . emptySet (  )  ,    condition . getConsumableMediaTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["getConsumableMediaTypesNegatedExpression"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "condition    =    new    (  \" text / plain \"  ,     \" application / xml \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertConditions ( result ,     \" text / plain \"  )  ;", "condition    =    new    (  \" application / xml \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertNull ( result )  ;", "}", "METHOD_END"], "methodName": ["getMatchingCondition"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ConsumesRequestCondition   condition    =    new   ConsumesRequestCondition (  \"  ! text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["negatedConsumesMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    consumes    =    new   String [  ]  {     \" text / plain \"     }  ;", "String [  ]    headers    =    new   String [  ]  {     \" foo = bar \"  ,     \" content - type = application / xml , application / pdf \"     }  ;", "condition    =    new    ( consumes ,    headers )  ;", "assertConditions ( condition ,     \" text / plain \"  ,     \" application / xml \"  ,     \" application / pdf \"  )  ;", "}", "METHOD_END"], "methodName": ["parseConsumesAndHeaders"], "fileName": "org.springframework.web.servlet.mvc.condition.ConsumesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "return   new   LinkedHashSet <  >  ( this . expressions )  ;", "}", "METHOD_END"], "methodName": ["getExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < HeadersRequestCondition . HeaderExpression >    expressions    =    new   LinkedHashSet <  >  (  )  ;", "for    ( String   header    :    headers )     {", "HeadersRequestCondition . HeaderExpression   expr    =    new   HeadersRequestCondition . HeaderExpression ( header )  ;", "if    (  (  \" Accept \"  . equalsIgnoreCase ( expr . name )  )     |  |     (  \" Content - Type \"  . equalsIgnoreCase ( expr . name )  )  )     {", "continue ;", "}", "expressions . add ( expr )  ;", "}", "return   expressions ;", "}", "METHOD_END"], "methodName": ["parseExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestCondition"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition 1     =    new   HeadersRequestCondition (  \" foo = bar \"  )  ;", "HeadersRequestCondition   condition 2     =    new   HeadersRequestCondition (  \" foo = baz \"  )  ;", "HeadersRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "Collection < HeadersRequestCondition . HeaderExpression >    conditions    =    result . getContent (  )  ;", "assertEquals (  2  ,    conditions . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "condition 1     =    new    (  \" foo \"  ,     \" bar \"  ,     \" baz \"  )  ;", "condition 2     =    new    (  \" foo \"  ,     \" bar \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" bar \"  )  ;", "condition    =    new    (  \" foo \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertEquals ( condition ,    result )  ;", "condition    =    new    (  \" bar \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertNull ( result )  ;", "}", "METHOD_END"], "methodName": ["getMatchingCondition"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo = Bar \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" bar \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerCaseSensitiveValueMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   HeadersRequestCondition (  \" foo \"  )  ,    new   HeadersRequestCondition (  \" foo \"  )  )  ;", "assertEquals ( new   HeadersRequestCondition (  \" foo \"  )  ,    new   HeadersRequestCondition (  \" FOO \"  )  )  ;", "assertFalse ( new   HeadersRequestCondition (  \" foo \"  )  . equals ( new   HeadersRequestCondition (  \" bar \"  )  )  )  ;", "assertEquals ( new   HeadersRequestCondition (  \" foo = bar \"  )  ,    new   HeadersRequestCondition (  \" foo = bar \"  )  )  ;", "assertEquals ( new   HeadersRequestCondition (  \" foo = bar \"  )  ,    new   HeadersRequestCondition (  \" FOO = bar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["headerEquals"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \"  ! accept \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerNotPresent"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" accept \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \"  \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerPresent"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" bar \"  ,     \"  \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerPresentNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo = bar \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" bar \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerValueMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo !  = bar \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" baz \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerValueMatchNegated"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo = bar \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" bazz \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerValueNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HeadersRequestCondition   condition    =    new   HeadersRequestCondition (  \" foo !  = bar \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" foo \"  ,     \" bar \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["headerValueNoMatchNegated"], "fileName": "org.springframework.web.servlet.mvc.condition.HeadersRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "return   new   LinkedHashSet <  >  ( this . expressions )  ;", "}", "METHOD_END"], "methodName": ["getExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < ParamsRequestCondition . ParamExpression >    expressions    =    new   LinkedHashSet <  >  (  )  ;", "for    ( String   param    :    params )     {", "expressions . add ( new   ParamsRequestCondition . ParamExpression ( param )  )  ;", "}", "return   expressions ;", "}", "METHOD_END"], "methodName": ["parseExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "ParamsRequestCondition   condition 1     =    new   ParamsRequestCondition (  \" foo = bar \"  )  ;", "ParamsRequestCondition   condition 2     =    new   ParamsRequestCondition (  \" foo = baz \"  )  ;", "ParamsRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "Collection < ParamsRequestCondition . ParamExpression >    conditions    =    result . getContent (  )  ;", "assertEquals (  2  ,    conditions . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "condition 1     =    new    (  \" foo \"  ,     \" bar \"  ,     \" baz \"  )  ;", "condition 2     =    new    (  \" foo \"  ,     \" bar \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   ParamsRequestCondition (  \" foo \"  )  ,    new   ParamsRequestCondition (  \" foo \"  )  )  ;", "assertFalse ( new   ParamsRequestCondition (  \" foo \"  )  . equals ( new   ParamsRequestCondition (  \" bar \"  )  )  )  ;", "assertFalse ( new   ParamsRequestCondition (  \" foo \"  )  . equals ( new   ParamsRequestCondition (  \" FOO \"  )  )  )  ;", "assertEquals ( new   ParamsRequestCondition (  \" foo = bar \"  )  ,    new   ParamsRequestCondition (  \" foo = bar \"  )  )  ;", "assertFalse ( new   ParamsRequestCondition (  \" foo = bar \"  )  . equals ( new   ParamsRequestCondition (  \" FOO = bar \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["paramEquals"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ParamsRequestCondition   condition    =    new   ParamsRequestCondition (  \"  ! foo \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramNotPresent"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addParameter (  \" foo \"  ,     \"  \"  )  ;", "assertNotNull ( new    (  \" foo \"  )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramPresent"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" bar \"  ,     \"  \"  )  ;", "assertNull ( new    (  \" foo \"  )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramPresentNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addParameter (  \" foo \"  ,     (  ( String )     ( null )  )  )  ;", "assertNotNull ( new    (  \" foo \"  )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramPresentNullValue"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addParameter (  \" foo \"  ,     \" bar \"  )  ;", "assertNotNull ( new    (  \" foo = bar \"  )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramValueMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addParameter (  \" foo \"  ,     \" bazz \"  )  ;", "assertNull ( new    (  \" foo = bar \"  )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["paramValueNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ParamsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "if    ( pattern . equals ( lookupPath )  )     {", "return   pattern ;", "}", "if    ( this . useSuffixMatch )     {", "if    (  (  !  ( this . fileExtensions . isEmpty (  )  )  )     &  &     (  ( lookupPath . indexOf (  '  .  '  )  )     !  =     (  -  1  )  )  )     {", "for    ( String   extension    :    this . fileExtensions )     {", "if    ( this . pathMatcher . match (  ( pattern    +    extension )  ,    lookupPath )  )     {", "return   pattern    +    extension ;", "}", "}", "} else    {", "boolean   hasSuffix    =     ( pattern . indexOf (  '  .  '  )  )     !  =     (  -  1  )  ;", "if    (  (  ! hasSuffix )     &  &     ( this . pathMatcher . match (  ( pattern    +     \"  .  *  \"  )  ,    lookupPath )  )  )     {", "return   pattern    +     \"  .  *  \"  ;", "}", "}", "}", "if    ( this . pathMatcher . match ( pattern ,    lookupPath )  )     {", "return   pattern ;", "}", "if    ( this . useTrailingSlashMatch )     {", "if    (  (  !  ( pattern . endsWith (  \"  /  \"  )  )  )     &  &     ( this . pathMatcher . match (  ( pattern    +     \"  /  \"  )  ,    lookupPath )  )  )     {", "return   pattern    +     \"  /  \"  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMatchingPattern"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "List < String >    matches    =    new   ArrayList <  >  (  )  ;", "for    ( String   pattern    :    this . p )     {", "String   match    =    getMatchingPattern ( pattern ,    lookupPath )  ;", "if    ( match    !  =    null )     {", "matches . add ( match )  ;", "}", "}", "if    (  ( matches . size (  )  )     >     1  )     {", "matches . sort ( this . pathMatcher . getPatternComparator ( lookupPath )  )  ;", "}", "return   matches ;", "}", "METHOD_END"], "methodName": ["getMatchingPatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   this . patterns ;", "}", "METHOD_END"], "methodName": ["getPatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < String >    result    =    new   LinkedHashSet <  >  ( patterns . size (  )  )  ;", "for    ( String   pattern    :    patterns )     {", "if    (  ( StringUtils . hasLength ( pattern )  )     &  &     (  !  ( pattern . startsWith (  \"  /  \"  )  )  )  )     {", "pattern    =     \"  /  \"     +    pattern ;", "}", "result . add ( pattern )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["prependLeadingSlash"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c 1     =    new   PatternsRequestCondition (  )  ;", "PatternsRequestCondition   c 2     =    new   PatternsRequestCondition (  )  ;", "assertEquals ( new   PatternsRequestCondition (  \"  \"  )  ,    c 1  . combine ( c 2  )  )  ;", "}", "METHOD_END"], "methodName": ["combineEmptySets"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c 1     =    new   PatternsRequestCondition (  \"  / t 1  \"  ,     \"  / t 2  \"  )  ;", "PatternsRequestCondition   c 2     =    new   PatternsRequestCondition (  \"  / m 1  \"  ,     \"  / m 2  \"  )  ;", "assertEquals ( new   PatternsRequestCondition (  \"  / t 1  / m 1  \"  ,     \"  / t 1  / m 2  \"  ,     \"  / t 2  / m 1  \"  ,     \"  / t 2  / m 2  \"  )  ,    c 1  . combine ( c 2  )  )  ;", "}", "METHOD_END"], "methodName": ["combineMultiplePatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c 1     =    new   PatternsRequestCondition (  \"  / type 1  \"  ,     \"  / type 2  \"  )  ;", "PatternsRequestCondition   c 2     =    new   PatternsRequestCondition (  )  ;", "assertEquals ( new   PatternsRequestCondition (  \"  / type 1  \"  ,     \"  / type 2  \"  )  ,    c 1  . combine ( c 2  )  )  ;", "c 1     =    new   PatternsRequestCondition (  )  ;", "c 2     =    new   PatternsRequestCondition (  \"  / method 1  \"  ,     \"  / method 2  \"  )  ;", "assertEquals ( new   PatternsRequestCondition (  \"  / method 1  \"  ,     \"  / method 2  \"  )  ,    c 1  . combine ( c 2  )  )  ;", "}", "METHOD_END"], "methodName": ["combineOnePatternWithEmptySet"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c 1     =    new   PatternsRequestCondition (  \"  / foo *  \"  )  ;", "PatternsRequestCondition   c 2     =    new   PatternsRequestCondition (  \"  / foo *  \"  )  ;", "assertEquals (  0  ,    c 1  . compareTo ( c 2  ,    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["compareEqualPatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . html \"  )  ;", "c 1     =    new    (  \"  / foo \"  ,     \"  *  . jpeg \"  )  ;", "c 2     =    new    (  \"  / foo \"  ,     \"  *  . html \"  )  ;", "match 1     =    c 1  . getMatchingCondition ( request )  ;", "match 2     =    c 2  . getMatchingCondition ( request )  ;", "assertEquals (  1  ,    match 1  . compareTo ( match 2  ,    request )  )  ;", "}", "METHOD_END"], "methodName": ["compareNumberOfMatchingPatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c 1     =    new   PatternsRequestCondition (  \"  / fo *  \"  )  ;", "PatternsRequestCondition   c 2     =    new   PatternsRequestCondition (  \"  / foo \"  )  ;", "assertEquals (  1  ,    c 1  . compareTo ( c 2  ,    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["comparePatternSpecificity"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   condition    =    new   PatternsRequestCondition (  \"  / foo \"  )  ;", "PatternsRequestCondition   match    =    condition . getMatchingCondition ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  )  ;", "assertNotNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchDirectPath"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   condition    =    new   PatternsRequestCondition (  \"  / foo /  *  \"  )  ;", "PatternsRequestCondition   match    =    condition . getMatchingCondition ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo / bar \"  )  )  ;", "assertNotNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchPattern"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   condition    =    new   PatternsRequestCondition (  \"  / foo . jpg \"  )  ;", "PatternsRequestCondition   match    =    condition . getMatchingCondition ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . html \"  )  )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchPatternContainsExtension"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   condition    =    new   PatternsRequestCondition (  \"  /  *  *  \"  ,     \"  / foo / bar \"  ,     \"  / foo /  *  \"  )  ;", "PatternsRequestCondition   match    =    condition . getMatchingCondition ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo / bar \"  )  )  ;", "PatternsRequestCondition   expected    =    new   PatternsRequestCondition (  \"  / foo / bar \"  ,     \"  / foo /  *  \"  ,     \"  /  *  *  \"  )  ;", "assertEquals ( expected ,    match )  ;", "}", "METHOD_END"], "methodName": ["matchSortPatterns"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . html \"  )  ;", "condition    =    new    (  \"  /  { foo }  \"  )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \"  /  { foo }  .  *  \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "boolean   useSuffixPatternMatch    =    false ;", "condition    =    new    ( new   String [  ]  {     \"  /  { foo }  \"     }  ,    null ,    null ,    useSuffixPatternMatch ,    false )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \"  /  { foo }  \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "}", "METHOD_END"], "methodName": ["matchSuffixPattern"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    patterns    =    new   String [  ]  {     \"  / jobs /  { jobName }  \"     }  ;", "List < String >    extensions    =    Arrays . asList (  \" json \"  )  ;", "condition    =    new    ( patterns ,    null ,    null ,    true ,    false ,    extensions )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / jobs / my . job \"  )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \"  / jobs /  { jobName }  \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / jobs / my . job . json \"  )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \"  / jobs /  { jobName }  . json \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "}", "METHOD_END"], "methodName": ["matchSuffixPatternUsingFileExtensions"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   condition 1     =    new   PatternsRequestCondition ( new   String [  ]  {     \"  / prefix \"     }  ,    null ,    null ,    true ,    false ,    Arrays . asList (  \" json \"  )  )  ;", "PatternsRequestCondition   condition 2     =    new   PatternsRequestCondition ( new   String [  ]  {     \"  / suffix \"     }  ,    null ,    null ,    true ,    false ,    null )  ;", "PatternsRequestCondition   combined    =    condition 1  . combine ( condition 2  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / prefix / suffix . json \"  )  ;", "PatternsRequestCondition   match    =    combined . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchSuffixPatternUsingFileExtensions2"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo /  \"  )  ;", "condition    =    new    (  \"  / foo \"  )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \" Should   match   by   default \"  ,     \"  / foo /  \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "condition    =    new    ( new   String [  ]  {     \"  / foo \"     }  ,    null ,    null ,    false ,    true )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "assertEquals (  \" Trailing   slash   should   be   insensitive   to   useSuffixPatternMatch   settings    ( SPR -  6  1  6  4  ,    SPR -  5  6  3  6  )  \"  ,     \"  / foo /  \"  ,    match . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "condition    =    new    ( new   String [  ]  {     \"  / foo \"     }  ,    null ,    null ,    false ,    false )  ;", "match    =    condition . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchTrailingSlash"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c    =    new   PatternsRequestCondition (  \"  \"  )  ;", "assertEquals (  \" Do   not   prepend   empty   patterns    ( SPR -  8  2  5  5  )  \"  ,     \"  \"  ,    c . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "}", "METHOD_END"], "methodName": ["prependNonEmptyPatternsOnly"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "PatternsRequestCondition   c    =    new   PatternsRequestCondition (  \" foo \"  )  ;", "assertEquals (  \"  / foo \"  ,    c . getPatterns (  )  . iterator (  )  . next (  )  )  ;", "}", "METHOD_END"], "methodName": ["prependSlash"], "fileName": "org.springframework.web.servlet.mvc.condition.PatternsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "int   result    =     0  ;", "if    ( index 1     !  =    index 2  )     {", "result    =    index 2     -    index 1  ;", "} else", "if    ( index 1     !  =     (  -  1  )  )     {", ". ProduceMediaTypeExpression   expr 1     =    condition 1  . getExpressionsToCompare (  )  . get ( index 1  )  ;", ". ProduceMediaTypeExpression   expr 2     =    condition 2  . getExpressionsToCompare (  )  . get ( index 2  )  ;", "result    =    expr 1  . compareTo ( expr 2  )  ;", "result    =     ( result    !  =     0  )     ?    result    :    expr 1  . getMediaType (  )  . compareTo ( expr 2  . getMediaType (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["compareMatchingMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager . resolveMediaTypes ( new   ServletWebRequest ( request )  )  ;", "}", "METHOD_END"], "methodName": ["getAcceptedMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   new   LinkedHashSet <  >  ( this . expressions )  ;", "}", "METHOD_END"], "methodName": ["getExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "return   this . expressions . isEmpty (  )     ?    ProducesRequestCondition . MEDIA _ TYPE _ ALL _ LIST    :    this . expressions ;", "}", "METHOD_END"], "methodName": ["getExpressionsToCompare"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    result    =    new   LinkedHashSet <  >  (  )  ;", "for    (  . ProduceMediaTypeExpression   expression    :    this . expressions )     {", "if    (  !  ( expression . isNegated (  )  )  )     {", "result . add ( expression . getMediaType (  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getProducibleMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( getExpressionsToCompare (  )  . size (  )  )  ;    i +  +  )     {", "MediaType   currentMediaType    =    getExpressionsToCompare (  )  . get ( i )  . getMediaType (  )  ;", "if    (  ( mediaType . getType (  )  . equalsIgnoreCase ( currentMediaType . getType (  )  )  )     &  &     ( mediaType . getSubtype (  )  . equalsIgnoreCase ( currentMediaType . getSubtype (  )  )  )  )     {", "return   i ;", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["indexOfEqualMediaType"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( getExpressionsToCompare (  )  . size (  )  )  ;    i +  +  )     {", "if    ( mediaType . includes ( getExpressionsToCompare (  )  . get ( i )  . getMediaType (  )  )  )     {", "return   i ;", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["indexOfIncludedMediaType"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Set < ProducesRequestCondition . ProduceMediaTypeExpression >    result    =    new   LinkedHashSet <  >  (  )  ;", "if    ( headers    !  =    null )     {", "for    ( String   header    :    headers )     {", "HeadersRequestCondition . HeaderExpression   expr    =    new   HeadersRequestCondition . HeaderExpression ( header )  ;", "if    (  (  \" Accept \"  . equalsIgnoreCase ( expr . name )  )     &  &     (  ( expr . value )     !  =    null )  )     {", "for    ( MediaType   mediaType    :    MediaType . parseMediaTypes ( expr . value )  )     {", "result . add ( new   ProducesRequestCondition . ProduceMediaTypeExpression ( mediaType ,    expr . isNegated )  )  ;", "}", "}", "}", "}", "for    ( String   produce    :    produces )     {", "result . add ( new   ProducesRequestCondition . ProduceMediaTypeExpression ( produce )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["parseExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestCondition"}, {"methodBody": ["METHOD_START", "{", "Collection < ProducesRequestCondition . ProduceMediaTypeExpression >    expressions    =    condition . getContent (  )  ;", "assertEquals (  \" Invalid   number   of   conditions \"  ,    expressions . size (  )  ,    expected . length )  ;", "for    ( String   s    :    expected )     {", "boolean   found    =    false ;", "for    ( ProducesRequestCondition . ProduceMediaTypeExpression   expr    :    expressions )     {", "String   conditionMediaType    =    expr . getMediaType (  )  . toString (  )  ;", "if    ( conditionMediaType . equals ( s )  )     {", "found    =    true ;", "break ;", "}", "}", "if    (  ! found )     {", "fail (  (  (  \" Condition    [  \"     +    s )     +     \"  ]    not   found \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition 1     =    new   ProducesRequestCondition (  \" text / plain \"  )  ;", "ProducesRequestCondition   condition 2     =    new   ProducesRequestCondition (  \" application / xml \"  )  ;", "ProducesRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "assertEquals ( condition 2  ,    result )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition 1     =    new   ProducesRequestCondition (  \" text / plain \"  )  ;", "ProducesRequestCondition   condition 2     =    new   ProducesRequestCondition (  )  ;", "ProducesRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "assertEquals ( condition 1  ,    result )  ;", "}", "METHOD_END"], "methodName": ["combineWithDefault"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   html    =    new   ProducesRequestCondition (  \" text / html \"  )  ;", "ProducesRequestCondition   xml    =    new   ProducesRequestCondition (  \" application / xml \"  )  ;", "ProducesRequestCondition   none    =    new   ProducesRequestCondition (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml ,    text / html \"  )  ;", "assertTrue (  (  ( html . compareTo ( xml ,    request )  )     >     0  )  )  ;", "assertTrue (  (  ( xml . compareTo ( html ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( xml . compareTo ( none ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( none . compareTo ( xml ,    request )  )     >     0  )  )  ;", "assertTrue (  (  ( html . compareTo ( none ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( none . compareTo ( html ,    request )  )     >     0  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml ,    text /  *  \"  )  ;", "assertTrue (  (  ( html . compareTo ( xml ,    request )  )     >     0  )  )  ;", "assertTrue (  (  ( xml . compareTo ( html ,    request )  )     <     0  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / pdf \"  )  ;", "assertTrue (  (  ( html . compareTo ( xml ,    request )  )     =  =     0  )  )  ;", "assertTrue (  (  ( xml . compareTo ( html ,    request )  )     =  =     0  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html ; q =  0  .  9  , application / xml \"  )  ;", "assertTrue (  (  ( html . compareTo ( xml ,    request )  )     >     0  )  )  ;", "assertTrue (  (  ( xml . compareTo ( html ,    request )  )     <     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text /  *  \"  )  ;", "condition 1     =    new    (  \" text / plain \"  )  ;", "condition 2     =    new    (  \" text / xhtml \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  \" Should   have   used   MediaType . equals ( Object )    to   break   the   match \"  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  \" Should   have   used   MediaType . equals ( Object )    to   break   the   match \"  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToEqualMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "condition 1     =    new    (  )  ;", "condition 2     =    new    (  \" application / json \"  )  ;", "assertTrue (  \" Should   have   picked    '  *  /  *  '    condition   as   an   exact   match \"  ,     (  ( condition 1  . compareTo ( condition 2  ,    request )  )     <     0  )  )  ;", "assertTrue (  \" Should   have   picked    '  *  /  *  '    condition   as   an   exact   match \"  ,     (  ( condition 2  . compareTo ( condition 1  ,    request )  )     >     0  )  )  ;", "condition 1     =    new    (  \"  *  /  *  \"  )  ;", "condition 2     =    new    (  \" application / json \"  )  ;", "assertTrue (  (  ( condition 1  . compareTo ( condition 2  ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( condition 2  . compareTo ( condition 1  ,    request )  )     >     0  )  )  ;", "request . addHeader (  \" Accept \"  ,     \"  *  /  *  \"  )  ;", "condition 1     =    new    (  )  ;", "condition 2     =    new    (  \" application / json \"  )  ;", "assertTrue (  (  ( condition 1  . compareTo ( condition 2  ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( condition 2  . compareTo ( condition 1  ,    request )  )     >     0  )  )  ;", "condition 1     =    new    (  \"  *  /  *  \"  )  ;", "condition 2     =    new    (  \" application / json \"  )  ;", "assertTrue (  (  ( condition 1  . compareTo ( condition 2  ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( condition 2  . compareTo ( condition 1  ,    request )  )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToMediaTypeAll"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \"  *  /  *  ; q =  0  .  9  \"  )  ;", "condition 1     =    new    (  )  ;", "condition 2     =    new    (  \" application / json \"  )  ;", "assertTrue (  (  ( condition 1  . compareTo ( condition 2  ,    request )  )     <     0  )  )  ;", "assertTrue (  (  ( condition 2  . compareTo ( condition 1  ,    request )  )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToMediaTypeAllWithParameter"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition 1     =    new   ProducesRequestCondition (  \"  *  /  *  \"  ,     \" text / plain \"  )  ;", "ProducesRequestCondition   condition 2     =    new   ProducesRequestCondition (  \" text /  *  \"  ,     \" text / plain ; q =  0  .  7  \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToMultipleExpressions"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition 1     =    new   ProducesRequestCondition (  \" text /  *  \"  ,     \" text / plain \"  )  ;", "ProducesRequestCondition   condition 2     =    new   ProducesRequestCondition (  \" application /  *  \"  ,     \" application / xml \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToMultipleExpressionsAndMultipeAcceptHeaderValues"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "condition 1     =    new    (  \" text / plain \"  )  ;", "condition 2     =    new    (  \" text /  *  \"  )  ;", "int   result    =    condition 1  . compareTo ( condition 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    condition 2  . compareTo ( condition 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["compareToWithSingleExpression"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "condition    =    new    (  \" text / plain \"  ,     \" application / xml \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertConditions ( result ,     \" text / plain \"  )  ;", "condition    =    new    (  \" application / xml \"  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertNull ( result )  ;", "}", "METHOD_END"], "methodName": ["getMatchingCondition"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \"  ! application / xml \"  )  ;", "assertEquals ( Collections . emptySet (  )  ,    condition . getProducibleMediaTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProducibleMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    produces    =    new   String [  ]  {     \" text / plain \"     }  ;", "String [  ]    headers    =    new   String [  ]  {     \" foo = bar \"  ,     \" accept = application / xml , application / pdf \"     }  ;", "condition    =    new    ( produces ,    headers )  ;", "assertConditions ( condition ,     \" text / plain \"  ,     \" application / xml \"  ,     \" application / pdf \"  )  ;", "}", "METHOD_END"], "methodName": ["instantiateWithProducesAndHeaderConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition ( new   String [  ]  {     \" text / plain \"     }  ,    new   String [  ]  {        }  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . txt \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchByRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \" text / plain \"  ,     \" application / xml \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchMultiple"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \"  ! text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchNegated"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \"  ! text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "assertEquals ( Collections . emptySet (  )  ,    condition . getProducibleMediaTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["matchNegatedWithoutAcceptHeader"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" bogus \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchParseError"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \"  ! text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" bogus \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchParseErrorWithNegation"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \" text / plain \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "assertNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchSingle"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "ProducesRequestCondition   condition    =    new   ProducesRequestCondition (  \" text /  *  \"  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchWildcard"], "fileName": "org.springframework.web.servlet.mvc.condition.ProducesRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    thisCondition . getClass (  )  ;", "Class <  ?  >    otherClazz    =    otherCondition . getClass (  )  ;", "if    (  !  ( clazz . equals ( otherClazz )  )  )     {", "throw   new   ClassCastException (  (  (  (  \" Incompatible   request   conditions :     \"     +    clazz )     +     \"    and    \"  )     +    otherClazz )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertEqualConditionTypes"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . condition ;", "}", "METHOD_END"], "methodName": ["getCondition"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolder"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder   params 1     =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name 1  \"  )  )  ;", "RequestConditionHolder   params 2     =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name 2  \"  )  )  ;", "RequestConditionHolder   expected    =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name 1  \"  ,     \" name 2  \"  )  )  ;", "assertEquals ( expected ,    params 1  . combine ( params 2  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder   empty    =    new   RequestConditionHolder ( null )  ;", "RequestConditionHolder   notEmpty    =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name \"  )  )  ;", "assertSame ( empty ,    empty . combine ( empty )  )  ;", "assertSame ( notEmpty ,    notEmpty . combine ( empty )  )  ;", "assertSame ( notEmpty ,    empty . combine ( notEmpty )  )  ;", "}", "METHOD_END"], "methodName": ["combineEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder   params    =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name \"  )  )  ;", "RequestConditionHolder   headers    =    new   RequestConditionHolder ( new   HeadersRequestCondition (  \" name \"  )  )  ;", "params . combine ( headers )  ;", "}", "METHOD_END"], "methodName": ["combineIncompatible"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "params 1  1     =    new    ( new   ParamsRequestCondition (  \"  1  \"  )  )  ;", "params 1  2     =    new    ( new   ParamsRequestCondition (  \"  1  \"  ,     \"  2  \"  )  )  ;", "assertEquals (  1  ,    params 1  1  . compareTo ( params 1  2  ,    request )  )  ;", "assertEquals (  (  -  1  )  ,    params 1  2  . compareTo ( params 1  1  ,    request )  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "empty    =    new    ( null )  ;", "empty 2     =    new    ( null )  ;", "notEmpty    =    new    ( new   ParamsRequestCondition (  \" name \"  )  )  ;", "assertEquals (  0  ,    empty . compareTo ( empty 2  ,    request )  )  ;", "assertEquals (  (  -  1  )  ,    notEmpty . compareTo ( empty ,    request )  )  ;", "assertEquals (  1  ,    empty . compareTo ( notEmpty ,    request )  )  ;", "}", "METHOD_END"], "methodName": ["compareEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder   params    =    new   RequestConditionHolder ( new   ParamsRequestCondition (  \" name \"  )  )  ;", "RequestConditionHolder   headers    =    new   RequestConditionHolder ( new   HeadersRequestCondition (  \" name \"  )  )  ;", "params . compareTo ( headers ,    new   MockHttpServletRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["compareIncompatible"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . setParameter (  \" name 1  \"  ,     \" value 1  \"  )  ;", "RequestMethodsRequestCondition   rm    =    new   RequestMethodsRequestCondition ( RequestMethod . GET ,    RequestMethod . POST )  ;", "custom    =    new    ( rm )  ;", "RequestMethodsRequestCondition   expected    =    new   RequestMethodsRequestCondition ( RequestMethod . GET )  ;", "assertEquals ( expected ,    custom . getMatchingCondition ( request )  . getCondition (  )  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "RequestConditionHolder   empty    =    new   RequestConditionHolder ( null )  ;", "assertSame ( empty ,    empty . getMatchingCondition ( new   MockHttpServletRequest (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["matchEmpty"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "RequestMethodsRequestCondition   rm    =    new   RequestMethodsRequestCondition ( RequestMethod . POST )  ;", "custom    =    new    ( rm )  ;", "assertNull ( custom . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["noMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestConditionHolderTests"}, {"methodBody": ["METHOD_START", "{", "return   this . methods ;", "}", "METHOD_END"], "methodName": ["getMethods"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "if    ( getMethods (  )  . isEmpty (  )  )     {", "return   this ;", "}", "String   expectedMethod    =    request . getHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD )  ;", "return   match ( expectedMethod )  ;", "}", "METHOD_END"], "methodName": ["matchPreFlight"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "HttpMethod   httpMethod    =    HttpMethod . resolve ( httpMethodValue )  ;", "if    ( httpMethod    !  =    null )     {", "for    ( RequestMethod   method    :    getMethods (  )  )     {", "if    ( httpMethod . matches ( method . name (  )  )  )     {", "return   new    ( method )  ;", "}", "}", "if    (  ( httpMethod    =  =     ( HttpMethod . HEAD )  )     &  &     ( getMethods (  )  . contains ( GET )  )  )     {", "return    . GET _ CONDITION ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["matchRequestMethod"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition"}, {"methodBody": ["METHOD_START", "{", "RequestMethodsRequestCondition   condition 1     =    new   RequestMethodsRequestCondition ( GET )  ;", "RequestMethodsRequestCondition   condition 2     =    new   RequestMethodsRequestCondition ( POST )  ;", "RequestMethodsRequestCondition   result    =    condition 1  . combine ( condition 2  )  ;", "assertEquals (  2  ,    result . getContent (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "RequestMethodsRequestCondition   c 1     =    new   RequestMethodsRequestCondition ( GET ,    HEAD )  ;", "RequestMethodsRequestCondition   c 2     =    new   RequestMethodsRequestCondition ( POST )  ;", "RequestMethodsRequestCondition   c 3     =    new   RequestMethodsRequestCondition (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "int   result    =    c 1  . compareTo ( c 2  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    c 2  . compareTo ( c 1  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    >     0  )  )  ;", "result    =    c 2  . compareTo ( c 3  ,    request )  ;", "assertTrue (  (  \" Invalid   comparison   result :     \"     +    result )  ,     ( result    <     0  )  )  ;", "result    =    c 1  . compareTo ( c 1  ,    request )  ;", "assertEquals (  \" Invalid   comparison   result    \"  ,     0  ,    result )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "testMatch ( new   RequestMethodsRequestCondition ( GET )  ,    GET )  ;", "testMatch ( new   RequestMethodsRequestCondition ( GET ,    POST )  ,    GET )  ;", "testNoMatch ( new   RequestMethodsRequestCondition ( GET )  ,    POST )  ;", "}", "METHOD_END"], "methodName": ["getMatchingCondition"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  \"  )  ;", "request . addHeader (  \" Origin \"  ,     \" http :  /  / example . com \"  )  ;", "request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" PUT \"  )  ;", "assertNotNull ( new    (  )  . getMatchingCondition ( request )  )  ;", "assertNotNull ( new    ( PUT )  . getMatchingCondition ( request )  )  ;", "assertNull ( new    ( DELETE )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["getMatchingConditionWithCorsPreFlight"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" PROPFIND \"  ,     \"  \"  )  ;", "assertNotNull ( new    (  )  . getMatchingCondition ( request )  )  ;", "assertNull ( new    ( GET ,    POST )  . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["getMatchingConditionWithCustomMethod"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "RequestMethodsRequestCondition   condition    =    new   RequestMethodsRequestCondition (  )  ;", "for    ( RequestMethod   method    :    RequestMethod . values (  )  )     {", "if    ( method    !  =     ( OPTIONS )  )     {", "HttpServletRequest   request    =    new   MockHttpServletRequest ( method . name (  )  ,     \"  \"  )  ;", "assertNotNull ( condition . getMatchingCondition ( request )  )  ;", "}", "}", "testNoMatch ( condition ,    OPTIONS )  ;", "}", "METHOD_END"], "methodName": ["getMatchingConditionWithEmptyConditions"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "testMatch ( new   RequestMethodsRequestCondition ( HEAD )  ,    HEAD )  ;", "testMatch ( new   RequestMethodsRequestCondition ( GET )  ,    GET )  ;", "testNoMatch ( new   RequestMethodsRequestCondition ( POST )  ,    HEAD )  ;", "}", "METHOD_END"], "methodName": ["getMatchingConditionWithHttpHead"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  / path \"  )  ;", "request . setDispatcherType ( ERROR )  ;", "condition    =    new    (  )  ;", "result    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( result )  ;", "assertSame ( condition ,    result )  ;", "}", "METHOD_END"], "methodName": ["getMatchingConditionWithHttpOptionsInErrorDispatch"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( method . name (  )  ,     \"  \"  )  ;", "actual    =    condition . getMatchingCondition ( request )  ;", "assertNotNull ( actual )  ;", "assertEquals ( Collections . singleton ( method )  ,    actual . getContent (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( method . name (  )  ,     \"  \"  )  ;", "assertNull ( getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["testNoMatch"], "fileName": "org.springframework.web.servlet.mvc.condition.RequestMethodsRequestConditionTests"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . name )     !  =    null )     &  &     (  ( other . name )     !  =    null )  )     {", "String   separator    =    HandlerMethodMappingNamingStrategy . SEPARATOR ;", "return    (  ( this . name )     +    separator )     +     ( other . name )  ;", "} else", "if    (  ( this . name )     !  =    null )     {", "return   this . name ;", "} else    {", "return   other . name ;", "}", "}", "METHOD_END"], "methodName": ["combineNames"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . consumesCondition ;", "}", "METHOD_END"], "methodName": ["getConsumesCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . customConditionHolder . getCondition (  )  ;", "}", "METHOD_END"], "methodName": ["getCustomCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . headersCondition ;", "}", "METHOD_END"], "methodName": ["getHeadersCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . methodsCondition ;", "}", "METHOD_END"], "methodName": ["getMethodsCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . paramsCondition ;", "}", "METHOD_END"], "methodName": ["getParamsCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . patternsCondition ;", "}", "METHOD_END"], "methodName": ["getPatternsCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . producesCondition ;", "}", "METHOD_END"], "methodName": ["getProducesCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   RequestMappingInfo . DefaultBuilder ( paths )  ;", "}", "METHOD_END"], "methodName": ["paths"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfo"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MultiValueMap < String ,    String >  >    result    =    new   LinkedHashMap <  >  (  )  ;", "uriVariables . forEach (  (    uriVarKey ,    uriVarValue )     -  >     {", "int   equalsIndex    =    uriVarValue . indexOf (  '  =  '  )  ;", "if    ( equalsIndex    =  =     (  -  1  )  )     {", "return ;", "}", "String   matrixVariables ;", "int   semicolonIndex    =    uriVarValue . indexOf (  '  ;  '  )  ;", "if    (  (  ( semicolonIndex    =  =     (  -  1  )  )     |  |     ( semicolonIndex    =  =     0  )  )     |  |     ( equalsIndex    <    semicolonIndex )  )     {", "matrixVariables    =    uriVarValue ;", "} else    {", "matrixVariables    =    uriVarValue . substring (  ( semicolonIndex    +     1  )  )  ;", "uriVariables . put ( uriVarKey ,    uriVarValue . substring (  0  ,    semicolonIndex )  )  ;", "}", "MultiValueMap < String ,    String >    vars    =    WebUtils . parseMatrixVariables ( matrixVariables )  ;", "result . put ( uriVarKey ,    getUrlPathHelper (  )  . decodeMatrixVariables ( r ,    vars )  )  ;", "}  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["extractMatrixVariables"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return    !  ( getUrlPathHelper (  )  . shouldRemoveSemicolonContent (  )  )  ;", "}", "METHOD_END"], "methodName": ["isMatrixVariableContentAvailable"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "assertNotNull ( chain )  ;", "return    (  ( HandlerMethod )     ( chain . getHandler (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandler"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setParameter (  \" p \"  ,     \" anything \"  )  ;", "ethod   handlerMethod    =    getHandler ( request )  ;", "assertEquals ( this . fooParamMethod . getMethod (  )  ,    handlerMethod . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerBestMatch"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "ethod   handlerMethod    =    getHandler ( request )  ;", "assertEquals ( this . fooMethod . getMethod (  )  ,    handlerMethod . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerDirectMatch"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  \"  )  ;", "ethod   handlerMethod    =    getHandler ( request )  ;", "assertEquals ( this . emptyMethod . getMethod (  )  ,    handlerMethod . getMethod (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "handlerMethod    =    getHandler ( request )  ;", "assertEquals ( this . emptyMethod . getMethod (  )  ,    handlerMethod . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerEmptyPathMatch"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bar \"  )  ;", "ethod   handlerMethod    =    getHandler ( request )  ;", "assertEquals ( this . barMethod . getMethod (  )  ,    handlerMethod . getMethod (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerGlobMatch"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "testHttpOptions (  \"  / foo \"  ,     \" GET , HEAD \"  )  ;", "testHttpOptions (  \"  / person /  1  \"  ,     \" PUT \"  )  ;", "testHttpOptions (  \"  / persons \"  ,     \" GET , HEAD , POST , PUT , PATCH , DELETE , OPTIONS \"  )  ;", "testHttpOptions (  \"  / soing \"  ,     \" PUT , POST \"  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerHttpOptions"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   path    =     \"  / foo \"  ;", "HandlerInterceptor   interceptor    =    new   HandlerInterceptorAdapter (  )     {  }  ;", "MappedInterceptor   mappedInterceptor    =    new   MappedInterceptor ( new   String [  ]  {    path    }  ,    interceptor )  ;", ". TestRequestMappingInfoHandlerMapping   mapping    =    new    . TestRequestMappingInfoHandlerMapping (  )  ;", "mapping . registerHandler ( new    . TestController (  )  )  ;", "mapping . setInterceptors ( new   Object [  ]  {    mappedInterceptor    }  )  ;", "mapping . setApplicationContext ( new   StaticWebApplicationContext (  )  )  ;", "HandlerExecutionChain   chain    =    mapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,    path )  )  ;", "assertNotNull ( chain )  ;", "assertNotNull ( chain . getInterceptors (  )  )  ;", "assertSame ( interceptor ,    chain . getInterceptors (  )  [  0  ]  )  ;", "chain    =    mapping . getHandler ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / invalid \"  )  )  ;", "assertNull ( chain )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMappedInterceptors"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "testHttpMediaTypeNotAcceptableException (  \"  / persons \"  )  ;", "testHttpMediaTypeNotAcceptableException (  \"  / persons /  \"  )  ;", "testHttpMediaTypeNotAcceptableException (  \"  / persons . json \"  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMediaTypeNotAccepted"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "testHttpMediaTypeNotSupportedException (  \"  / person /  1  \"  )  ;", "testHttpMediaTypeNotSupportedException (  \"  / person /  1  /  \"  )  ;", "testHttpMediaTypeNotSupportedException (  \"  / person /  1  . json \"  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerMediaTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / content \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "this . handlerMapping . getHandler ( request )  ;", "String   name    =     . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ;", "assertEquals ( Collections . singleton ( APPLICATION _ XML )  ,    request . getAttribute ( name )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / content \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", "this . handlerMapping . getHandler ( request )  ;", "assertNull (  \" Negated   expression   shouldn ' t   be   listed   as   producible   type \"  ,    request . getAttribute ( name )  )  ;", "}", "METHOD_END"], "methodName": ["getHandlerProducibleMediaTypesAttribute"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / users \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "this . handlerMapping . registerHandler ( new    . UserController (  )  )  ;", "this . handlerMapping . getHandler ( request )  ;", "}", "METHOD_END"], "methodName": ["getHandlerRequestMethodMatchFalsePositive"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / bar \"  )  ;", "this . h . getHandler ( request )  ;", "fail (  \" HttpRequestMethodNotSupportedException   expected \"  )  ;", "}    catch    ( HttpRequestMethodNotSupportedException   ex )     {", "assertArrayEquals (  \" Invalid   supported   methods \"  ,    new   String [  ]  {     \" GET \"  ,     \" HEAD \"     }  ,    ex . getSupportedMethods (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getHandlerRequestMethodNotAllowed"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / person /  1  \"  )  ;", "request . setContentType (  \" bogus \"  )  ;", "this . h . getHandler ( request )  ;", "fail (  \" HttpMediaTypeNotSupportedException   expected \"  )  ;", "}    catch    ( HttpMediaTypeNotSupportedException   ex )     {", "assertEquals (  \" Invalid   mime   type    \\  \" bogus \\  \"  :    does   not   contain    \\  '  /  \\  '  \"  ,    ex . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getHandlerTestInvalidContentType"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / params \"  )  ;", "this . h . getHandler ( request )  ;", "fail (  \" UnsatisfiedServletRequestParameterException   expected \"  )  ;", "}    catch    ( UnsatisfiedServletRequestParameterException   ex )     {", "List < String [  ]  >    groups    =    ex . getParamConditionGroups (  )  ;", "assertEquals (  2  ,    groups . size (  )  )  ;", "assertThat ( Arrays . asList (  \" foo = bar \"  ,     \" bar = baz \"  )  ,    containsInAnyOrder ( groups . get (  0  )  [  0  ]  ,    groups . get (  1  )  [  0  ]  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getHandlerUnsatisfiedServletRequestParameterException"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    patterns    =    new   String [  ]  {     \"  / foo /  *  \"  ,     \"  / foo \"  ,     \"  / bar /  *  \"  ,     \"  / bar \"     }  ;", "info    =     . paths ( patterns )  . build (  )  ;", "Set < String >    actual    =    this . handlerMapping . getMappingPathPatterns ( info )  ;", "assertEquals ( new   HashSet ( Arrays . asList ( patterns )  )  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["getMappingPathPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   attrName    =    HandlerMapping . MATRIX _ VARIABLES _ ATTRIBUTE ;", "return    (  ( Map < String ,    MultiValueMap < String ,    String >  >  )     ( request . getAttribute ( attrName )  )  )  . get ( uriVarName )  ;", "}", "METHOD_END"], "methodName": ["getMatrixVariables"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   attrName    =    HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ;", "return    (  ( Map < String ,    String >  )     ( request . getAttribute ( attrName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getUriTemplateVariables"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   info    =    RequestMappingInfo . paths ( pattern )  . build (  )  ;", "this . handlerMapping . handleMatch ( info ,    lookupPath ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleMatch"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   key    =    RequestMappingInfo . paths (  \"  /  { path 1  }  /  2  \"  ,     \"  /  *  *  \"  )  . build (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  1  /  2  \"  )  ;", "this . handlerMapping . handleMatch ( key ,     \"  /  1  /  2  \"  ,    request )  ;", "assertEquals (  \"  /  { path 1  }  /  2  \"  ,    request . getAttribute ( HandlerMapping . BEST _ MATCHING _ PATTERN _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchBestMatchingPatternAttribute"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   key    =    RequestMappingInfo . paths (  )  . build (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  1  /  2  \"  )  ;", "this . handlerMapping . handleMatch ( key ,     \"  /  1  /  2  \"  ,    request )  ;", "assertEquals (  \"  /  1  /  2  \"  ,    request . getAttribute ( HandlerMapping . BEST _ MATCHING _ PATTERN _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchBestMatchingPatternAttributeNoPatternsDefined"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request ;", "MultiValueMap < String ,    String >    matrixVariables ;", "Map < String ,    String >    uriVariables ;", "request    =    new   MockHttpServletRequest (  )  ;", "handleMatch ( request ,     \"  /  { cars }  \"  ,     \"  / cars ; colors = red , blue , green ; year =  2  0  1  2  \"  )  ;", "matrixVariables    =    getMatrixVariables ( request ,     \" cars \"  )  ;", "uriVariables    =    getUriTemplateVariables ( request )  ;", "assertNotNull ( matrixVariables )  ;", "assertEquals ( Arrays . asList (  \" red \"  ,     \" blue \"  ,     \" green \"  )  ,    matrixVariables . get (  \" colors \"  )  )  ;", "assertEquals (  \"  2  0  1  2  \"  ,    matrixVariables . getFirst (  \" year \"  )  )  ;", "assertEquals (  \" cars \"  ,    uriVariables . get (  \" cars \"  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "handleMatch ( request ,     \"  /  { cars :  [  ^  ;  ]  +  }  { params }  \"  ,     \"  / cars ; colors = red , blue , green ; year =  2  0  1  2  \"  )  ;", "matrixVariables    =    getMatrixVariables ( request ,     \" params \"  )  ;", "uriVariables    =    getUriTemplateVariables ( request )  ;", "assertNotNull ( matrixVariables )  ;", "assertEquals ( Arrays . asList (  \" red \"  ,     \" blue \"  ,     \" green \"  )  ,    matrixVariables . get (  \" colors \"  )  )  ;", "assertEquals (  \"  2  0  1  2  \"  ,    matrixVariables . getFirst (  \" year \"  )  )  ;", "assertEquals (  \" cars \"  ,    uriVariables . get (  \" cars \"  )  )  ;", "assertEquals (  \"  ; colors = red , blue , green ; year =  2  0  1  2  \"  ,    uriVariables . get (  \" params \"  )  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "handleMatch ( request ,     \"  /  { cars :  [  ^  ;  ]  +  }  { params }  \"  ,     \"  / cars \"  )  ;", "matrixVariables    =    getMatrixVariables ( request ,     \" params \"  )  ;", "uriVariables    =    getUriTemplateVariables ( request )  ;", "assertNull ( matrixVariables )  ;", "assertEquals (  \" cars \"  ,    uriVariables . get (  \" cars \"  )  )  ;", "assertEquals (  \"  \"  ,    uriVariables . get (  \" params \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchMatrixVariables"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request ;", "UrlPathHelper   urlPathHelper    =    new   UrlPathHelper (  )  ;", "urlPathHelper . setUrlDecode ( false )  ;", "urlPathHelper . setRemoveSemicolonContent ( false )  ;", "this . h . setUrlPathHelper ( urlPathHelper )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "handleMatch ( request ,     \"  / path { filter }  \"  ,     \"  / path ; mvar = a %  2 fb \"  )  ;", "MultiValueMap < String ,    String >    matrixVariables    =    getMatrixVariables ( request ,     \" filter \"  )  ;", "Map < String ,    String >    uriVariables    =    getUriTemplateVariables ( request )  ;", "assertNotNull ( matrixVariables )  ;", "assertEquals ( Collections . singletonList (  \" a / b \"  )  ,    matrixVariables . get (  \" mvar \"  )  )  ;", "assertEquals (  \"  ; mvar = a / b \"  ,    uriVariables . get (  \" filter \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchMatrixVariablesDecoding"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   key    =    RequestMappingInfo . paths (  \"  /  { path 1  }  /  { path 2  }  \"  )  . build (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  1  /  2  \"  )  ;", "String   lookupPath    =    new   UrlPathHelper (  )  . getLookupPathForRequest ( request )  ;", "this . handlerMapping . handleMatch ( key ,    lookupPath ,    request )  ;", "String   name    =    HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ;", "Map < String ,    String >    uriVariables    =     (  ( Map < String ,    String >  )     ( request . getAttribute ( name )  )  )  ;", "assertNotNull ( uriVariables )  ;", "assertEquals (  \"  1  \"  ,    uriVariables . get (  \" path 1  \"  )  )  ;", "assertEquals (  \"  2  \"  ,    uriVariables . get (  \" path 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchUriTemplateVariables"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   key    =    RequestMappingInfo . paths (  \"  /  { group }  /  { identifier }  \"  )  . build (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / group / a %  2 Fb \"  )  ;", "UrlPathHelper   pathHelper    =    new   UrlPathHelper (  )  ;", "pathHelper . setUrlDecode ( false )  ;", "String   lookupPath    =    pathHelper . getLookupPathForRequest ( request )  ;", "this . handlerMapping . setUrlPathHelper ( pathHelper )  ;", "this . handlerMapping . handleMatch ( key ,    lookupPath ,    request )  ;", "String   name    =    HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ;", "Map < String ,    String >    uriVariables    =     (  ( Map < String ,    String >  )     ( request . getAttribute ( name )  )  )  ;", "assertNotNull ( uriVariables )  ;", "assertEquals (  \" group \"  ,    uriVariables . get (  \" group \"  )  )  ;", "assertEquals (  \" a / b \"  ,    uriVariables . get (  \" identifier \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMatchUriTemplateVariablesDecode"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfoHandlerMappingTests . TestController   testController    =    new   RequestMappingInfoHandlerMappingTests . TestController (  )  ;", "this . fooMethod    =    new   HandlerMethod ( testController ,     \" foo \"  )  ;", "this . fooParamMethod    =    new   HandlerMethod ( testController ,     \" fooParam \"  )  ;", "this . barMethod    =    new   HandlerMethod ( testController ,     \" bar \"  )  ;", "this . emptyMethod    =    new   HandlerMethod ( testController ,     \" empty \"  )  ;", "this . handlerMapping    =    new   RequestMappingInfoHandlerMappingTests . TestRequestMappingInfoHandlerMapping (  )  ;", "this . handlerMapping . registerHandler ( testController )  ;", "this . handlerMapping . setRemoveSemicolonContent ( false )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,    url )  ;", "request . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", "this . h . getHandler ( request )  ;", "fail (  \" HttpMediaTypeNotAcceptableException   expected \"  )  ;", "}    catch    ( HttpMediaTypeNotAcceptableException   ex )     {", "assertEquals (  \" Invalid   supported   producible   media   types \"  ,    Collections . singletonList ( new   MediaType (  \" application \"  ,     \" xml \"  )  )  ,    ex . getSupportedMediaTypes (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHttpMediaTypeNotAcceptableException"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,    url )  ;", "request . setContentType (  \" application / json \"  )  ;", "this . h . getHandler ( request )  ;", "fail (  \" HttpMediaTypeNotSupportedException   expected \"  )  ;", "}    catch    ( HttpMediaTypeNotSupportedException   ex )     {", "assertEquals (  \" Invalid   supported   consumable   media   types \"  ,    Collections . singletonList ( new   MediaType (  \" application \"  ,     \" xml \"  )  )  ,    ex . getSupportedMediaTypes (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHttpMediaTypeNotSupportedException"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,    requestURI )  ;", "HandlerMethod   handlerMethod    =    getHandler ( request )  ;", "ServletWebRequest   webRequest    =    new   ServletWebRequest ( request )  ;", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "Object   result    =    new   method . support . InvocableHandlerMethod ( handlerMethod )  . invokeForRequest ( webRequest ,    mavContainer )  ;", "assertNotNull ( result )  ;", "assertEquals ( HttpHeaders . class ,    result . getClass (  )  )  ;", "assertEquals ( allowHeader ,     (  ( HttpHeaders )     ( result )  )  . getFirst (  \" Allow \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHttpOptions"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ClassUtils . getMethod ( RequestMappingInfoHandlerMethodMappingNamingStrategyTests . TestController . class ,     \" handle \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestMappingInfoHandlerMethodMappingNamingStrategyTests . TestController (  )  ,    method )  ;", "RequestMappingInfo   rmi    =    new   RequestMappingInfo ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "HandlerMethodMappingNamingStrategy < RequestMappingInfo >    strategy    =    new   RequestMappingInfoHandlerMethodMappingNamingStrategy (  )  ;", "assertEquals (  \" TC # handle \"  ,    strategy . getName ( handlerMethod ,    rmi )  )  ;", "}", "METHOD_END"], "methodName": ["getNameConvention"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategyTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ClassUtils . getMethod ( RequestMappingInfoHandlerMethodMappingNamingStrategyTests . TestController . class ,     \" handle \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestMappingInfoHandlerMethodMappingNamingStrategyTests . TestController (  )  ,    method )  ;", "RequestMappingInfo   rmi    =    new   RequestMappingInfo (  \" foo \"  ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "HandlerMethodMappingNamingStrategy < RequestMappingInfo >    strategy    =    new   RequestMappingInfoHandlerMethodMappingNamingStrategy (  )  ;", "assertEquals (  \" foo \"  ,    strategy . getName ( handlerMethod ,    rmi )  )  ;", "}", "METHOD_END"], "methodName": ["getNameExplicit"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategyTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   info    =    RequestMappingInfo . paths (  )  . build (  )  ;", "assertEquals (  0  ,    info . getPatternsCondition (  )  . getPatterns (  )  . size (  )  )  ;", "assertEquals (  0  ,    info . getMethodsCondition (  )  . getMethods (  )  . size (  )  )  ;", "assertEquals ( true ,    info . getConsumesCondition (  )  . isEmpty (  )  )  ;", "assertEquals ( true ,    info . getProducesCondition (  )  . isEmpty (  )  )  ;", "assertNotNull ( info . getParamsCondition (  )  )  ;", "assertNotNull ( info . getHeadersCondition (  )  )  ;", "assertNull ( info . getCustomCondition (  )  )  ;", "}", "METHOD_END"], "methodName": ["createEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   info 1     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "RequestMappingInfo   info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertEquals ( info 1  ,    info 2  )  ;", "assertEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  ,     \"  / NOOOOOO \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET ,    POST )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \"  / NOOOOOO \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \"  / NOOOOOO \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / NOOOOOO \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = customBar \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / NOOOOOO \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "info 2     =    RequestMappingInfo . paths (  \"  / foo \"  )  . methods ( RequestMethod . GET )  . params (  \" foo = bar \"  ,     \" customFoo = NOOOOOO \"  )  . headers (  \" foo = bar \"  )  . consumes (  \" text / plain \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "assertFalse ( info 1  . equals ( info 2  )  )  ;", "assertNotEquals ( info 1  . hashCode (  )  ,    info 2  . hashCode (  )  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setContentType (  \" text / plain \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . consumes (  \" text / plain \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . consumes (  \" application / xml \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchConsumesCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setParameter (  \" foo \"  ,     \" bar \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . params (  \" foo = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . params (  \" foo !  = bar \"  )  . params (  \" foo !  = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchCustomCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . addHeader (  \" foo \"  ,     \" bar \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . headers (  \" foo = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . headers (  \" foo !  = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchHeadersCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setParameter (  \" foo \"  ,     \" bar \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . params (  \" foo = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . params (  \" foo !  = bar \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchParamsCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "info    =     . paths (  \"  / foo *  \"  ,     \"  / bar \"  )  . build (  )  ;", "expected    =     . paths (  \"  / foo *  \"  )  . build (  )  ;", "assertEquals ( expected ,    info . getMatchingCondition ( request )  )  ;", "info    =     . paths (  \"  /  *  *  \"  ,     \"  / foo *  \"  ,     \"  / foo \"  )  . build (  )  ;", "expected    =     . paths (  \"  / foo \"  ,     \"  / foo *  \"  ,     \"  /  *  *  \"  )  . build (  )  ;", "assertEquals ( expected ,    info . getMatchingCondition ( request )  )  ;", "}", "METHOD_END"], "methodName": ["matchPatternsCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / plain \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . produces (  \" text / plain \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . produces (  \" application / xml \"  )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull ( match )  ;", "}", "METHOD_END"], "methodName": ["matchProducesCondition"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  / foo \"  )  ;", "request . addHeader ( ORIGIN ,     \" http :  /  / domain . com \"  )  ;", "request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" POST \"  )  ;", "info    =     . paths (  \"  / foo \"  )  . methods ( POST )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNotNull ( match )  ;", "info    =     . paths (  \"  / foo \"  )  . methods ( OPTIONS )  . build (  )  ;", "match    =    info . getMatchingCondition ( request )  ;", "assertNull (  \" Pre - flight   should   match   the   ACCESS _ CONTROL _ REQUEST _ METHOD \"  ,    match )  ;", "}", "METHOD_END"], "methodName": ["preFlightRequest"], "fileName": "org.springframework.web.servlet.mvc.method.RequestMappingInfoTests"}, {"methodBody": ["METHOD_START", "{", "return   new   MediaType (  \" application \"  ,     \" javascript \"  )  ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractJsonpResponseBodyAdvice"}, {"methodBody": ["METHOD_START", "{", "return   AbstractJsonpResponseBodyAdvice . CALLBACK _ PARAM _ PATTERN . matcher ( value )  . matches (  )  ;", "}", "METHOD_END"], "methodName": ["isValidJsonpQueryParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractJsonpResponseBodyAdvice"}, {"methodBody": ["METHOD_START", "{", "return   body   instanceof   MappingJacksonValue    ?     (  ( MappingJacksonValue )     ( body )  )     :    new   MappingJacksonValue ( body )  ;", "}", "METHOD_END"], "methodName": ["getOrCreateContainer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parameter . getParameterType (  )  )     =  =     ( Optional . class )  )     {", "if    (  (  ( arg    =  =    null )     |  |     (  ( arg   instanceof   Collection )     &  &     (  (  ( Collection <  ?  >  )     ( arg )  )  . isEmpty (  )  )  )  )     |  |     (  ( arg   instanceof   Object [  ]  )     &  &     (  (  (  ( Object [  ]  )     ( arg )  )  . length )     =  =     0  )  )  )     {", "return   Optional . empty (  )  ;", "} else    {", "return   Optional . of ( arg )  ;", "}", "}", "return   arg ;", "}", "METHOD_END"], "methodName": ["adaptArgumentIfNecessary"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   servletRequest    =    webRequest . getNativeRequest ( HttpServletRequest . class )  ;", "Assert . state (  ( servletRequest    !  =    null )  ,     \" No   HttpServletRequest \"  )  ;", "return   new   http . server . ServletServerHttpRequest ( servletRequest )  ;", "}", "METHOD_END"], "methodName": ["createInputMessage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . advice ;", "}", "METHOD_END"], "methodName": ["getAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    allSupportedMediaTypes    =    new   LinkedHashSet <  >  (  )  ;", "for    ( Http <  ?  >    messageConverter    :    messageConverters )     {", "allSupportedMediaTypes . addAll ( messageConverter . getSupportedMediaTypes (  )  )  ;", "}", "List < MediaType >    result    =    new   ArrayList ( allSupportedMediaTypes )  ;", "MediaType . sortBySpecificity ( result )  ;", "return   Collections . unmodifiableList ( result )  ;", "}", "METHOD_END"], "methodName": ["getAllSupportedMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "int   i    =    parameter . getParameterIndex (  )  ;", "Class <  ?  >  [  ]    paramTypes    =    parameter . getExecutable (  )  . getParameterTypes (  )  ;", "boolean   hasBindingResult    =     (  ( paramTypes . length )     >     ( i    +     1  )  )     &  &     ( Errors . class . isAssignableFrom ( paramTypes [  ( i    +     1  )  ]  )  )  ;", "return    ! hasBindingResult ;", "}", "METHOD_END"], "methodName": ["isBindExceptionRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "MediaType   contentType ;", "boolean   noContentType    =    false ;", "try    {", "contentType    =    inputMessage . getHeaders (  )  . getContentType (  )  ;", "}    catch    ( InvalidMediaTypeException   ex )     {", "throw   new   HttpMediaTypeNotSupportedException ( ex . getMessage (  )  )  ;", "}", "if    ( contentType    =  =    null )     {", "noContentType    =    true ;", "contentType    =    MediaType . APPLICATION _ OCTET _ STREAM ;", "}", "Class <  ?  >    contextClass    =    parameter . getContainingClass (  )  ;", "Class < T >    targetClass    =     ( targetType   instanceof   Class )     ?     (  ( Class < T >  )     ( targetType )  )     :    null ;", "if    ( targetClass    =  =    null )     {", "ResolvableType   resolvableType    =    ResolvableType . forMethodParameter ( parameter )  ;", "targetClass    =     (  ( Class < T >  )     ( resolvableType . resolve (  )  )  )  ;", "}", "HttpMethod   httpMethod    =     ( inputMessage   instanceof   HttpRequest )     ?     (  ( HttpRequest )     ( inputMessage )  )  . getMethod (  )     :    null ;", "Object   body    =     . NO _ VALUE ;", ". EmptyBodyCheckingHttpInputMessage   message ;", "try    {", "message    =    new    . EmptyBodyCheckingHttpInputMessage ( inputMessage )  ;", "for    ( HttpMessageConverter <  ?  >    converter    :    this . messageConverters )     {", "Class < HttpMessageConverter <  ?  >  >    converterType    =     (  ( Class < HttpMessageConverter <  ?  >  >  )     ( converter . getClass (  )  )  )  ;", "GenericHttpMessageConverter <  ?  >    genericConverter    =     ( converter   instanceof   GenericHttpMessageConverter )     ?     (  ( GenericHttpMessageConverter <  ?  >  )     ( converter )  )     :    null ;", "if    ( genericConverter    !  =    null    ?    genericConverter . canRead ( targetType ,    contextClass ,    contentType )     :     ( targetClass    !  =    null )     &  &     ( converter . canRead ( targetClass ,    contentType )  )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  (  \" Read    [  \"     +    targetType )     +     \"  ]    as    \\  \"  \"  )     +    contentType )     +     \"  \\  \"    with    [  \"  )     +    converter )     +     \"  ]  \"  )  )  ;", "}", "if    ( message . hasBody (  )  )     {", "HttpInputMessage   msgToUse    =    getAdvice (  )  . beforeBodyRead ( message ,    parameter ,    targetType ,    converterType )  ;", "body    =     ( genericConverter    !  =    null )     ?    genericConverter . read ( targetType ,    contextClass ,    msgToUse )     :     (  ( HttpMessageConverter < T >  )     ( converter )  )  . read ( targetClass ,    msgToUse )  ;", "body    =    getAdvice (  )  . afterBodyRead ( body ,    msgToUse ,    parameter ,    targetType ,    converterType )  ;", "} else    {", "body    =    getAdvice (  )  . handleEmptyBody ( null ,    message ,    parameter ,    targetType ,    converterType )  ;", "}", "break ;", "}", "}", "}    catch    ( IOException   ex )     {", "throw   new   HttpMessageNotReadableException (  \" I / O   error   while   reading   input   message \"  ,    ex )  ;", "}", "if    ( body    =  =     (  . NO _ VALUE )  )     {", "if    (  (  ( httpMethod    =  =    null )     |  |     (  !  (  . SUPPORTED _ METHODS . contains ( httpMethod )  )  )  )     |  |     ( noContentType    &  &     (  !  ( message . hasBody (  )  )  )  )  )     {", "return   null ;", "}", "throw   new   HttpMediaTypeNotSupportedException ( contentType ,    this . allSupportedMediaTypes )  ;", "}", "return   body ;", "}", "METHOD_END"], "methodName": ["readWithMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "HttpInputMessage   inputMessage    =    createInputMessage ( webRequest )  ;", "return   readWiths ( inputMessage ,    parameter ,    paramType )  ;", "}", "METHOD_END"], "methodName": ["readWithMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "Annotation [  ] s    =    parameter . getParameterAnnotations (  )  ;", "for    ( Annotation   ann    : s )     {", "Validated   validatedAnn    =    AnnotationUtils . getAnnotation ( ann ,    Validated . class )  ;", "if    (  ( validatedAnn    !  =    null )     |  |     ( annType (  )  . getSimpleName (  )  . startsWith (  \" Valid \"  )  )  )     {", "Object   hints    =     ( validatedAnn    !  =    null )     ?    validatedAnn . value (  )     :    AnnotationUtils . getValue ( ann )  ;", "Object [  ]    validationHints    =     ( hints   instanceof   Object [  ]  )     ?     (  ( Object [  ]  )     ( hints )  )     :    new   Object [  ]  {    hints    }  ;", "binder . validate ( validationHints )  ;", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateIfApplicable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "HttpHeaders   headers    =    response . getHeaders (  )  ;", "if    ( headers . containsKey ( CONTENT _ DISPOSITION )  )     {", "return ;", "}", "try    {", "int   status    =    response . getServletResponse (  )  . getStatus (  )  ;", "if    (  ( status    <     2  0  0  )     |  |     ( status    >     2  9  9  )  )     {", "return ;", "}", "}    catch    ( Throwable   ex )     {", "}", "HttpServletRequest   servletRequest    =    request . getServletRequest (  )  ;", "String   requestUri    =     . rawUrlPathHelper . getOriginatingRequestUri ( servletRequest )  ;", "int   index    =     ( requestUri . lastIndexOf (  '  /  '  )  )     +     1  ;", "String   filename    =    requestUri . substring ( index )  ;", "String   pathParams    =     \"  \"  ;", "index    =    filename . indexOf (  '  ;  '  )  ;", "if    ( index    !  =     (  -  1  )  )     {", "pathParams    =    filename . substring ( index )  ;", "filename    =    filename . substring (  0  ,    index )  ;", "}", "filename    =     . decodingUrlPathHelper . decodeRequestString ( servletRequest ,    filename )  ;", "String   ext    =    StringUtils . getFilenameExtension ( filename )  ;", "pathParams    =     . decodingUrlPathHelper . decodeRequestString ( servletRequest ,    pathParams )  ;", "String   extInPathParams    =    StringUtils . getFilenameExtension ( pathParams )  ;", "if    (  (  !  ( safeExtension ( servletRequest ,    ext )  )  )     |  |     (  !  ( safeExtension ( servletRequest ,    extInPathParams )  )  )  )     {", "headers . add ( CONTENT _ DISPOSITION ,     \" inline ; filename = f . txt \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["addContentDispositionHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "HttpServletResponse   response    =    webRequest . getNativeResponse ( HttpServletResponse . class )  ;", "Assert . state (  ( response    !  =    null )  ,     \" No   HttpServletResponse \"  )  ;", "return   new   http . server . ServletServerHttpResponse ( response )  ;", "}", "METHOD_END"], "methodName": ["createOutputMessage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager . resolveMediaTypes ( new   ServletWebRequest ( request )  )  ;", "}", "METHOD_END"], "methodName": ["getAcceptableMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( HttpEntity . class . isAssignableFrom ( returnType . getParameterType (  )  )  )     {", "return   ResolvableType . forType ( returnType . getGenericParameterType (  )  )  . getGeneric (  )  . getType (  )  ;", "} else    {", "return   returnType . getGenericParameterType (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getGenericType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "MediaType   produceTypeToUse    =    produceType . copyQualityValue ( acceptType )  ;", "return    ( SPECIFICITY _ COMPARATOR . compare ( acceptType ,    produceTypeToUse )  )     <  =     0     ?    acceptType    :    produceTypeToUse ;", "}", "METHOD_END"], "methodName": ["getMostSpecificMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return   getProducibleMediaTypes ( request ,    valueClass ,    null )  ;", "}", "METHOD_END"], "methodName": ["getProducibleMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    mediaTypes    =     (  ( Set < MediaType >  )     ( request . getAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE )  )  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( mediaTypes )  )  )     {", "return   new   ArrayList ( mediaTypes )  ;", "} else", "if    (  !  ( this . allSupportedMediaTypes . isEmpty (  )  )  )     {", "List < MediaType >    result    =    new   ArrayList <  >  (  )  ;", "for    ( http . converter . HttpMessageConverter <  ?  >    converter    :    this . messageConverters )     {", "if    (  ( converter   instanceof   http . converter . GenericHttpMessageConverter )     &  &     ( declaredType    !  =    null )  )     {", "if    (  (  ( http . converter . GenericHttpMessageConverter <  ?  >  )     ( converter )  )  . canWrite ( declaredType ,    valueClass ,    null )  )     {", "result . addAll ( converter . getSupportedMediaTypes (  )  )  ;", "}", "} else", "if    ( converter . canWrite ( valueClass ,    null )  )     {", "result . addAll ( converter . getSupportedMediaTypes (  )  )  ;", "}", "}", "return   result ;", "} else    {", "return   singletonList ( MediaType . ALL )  ;", "}", "}", "METHOD_END"], "methodName": ["getProducibleMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return   value    !  =    null    ?    value . getClass (  )     :    returnType . getParameterType (  )  ;", "}", "METHOD_END"], "methodName": ["getReturnValueType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "Class < PathExtensionContentNegotiationStrategy >    clazz    =    PathExtensionContentNegotiationStrategy . class ;", "PathExtensionContentNegotiationStrategy   strategy    =    manager . getStrategy ( clazz )  ;", "return   strategy    !  =    null    ?    strategy    :    new   PathExtensionContentNegotiationStrategy (  )  ;", "}", "METHOD_END"], "methodName": ["initPathStrategy"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return   Resource . class . isAssignableFrom (  ( value    !  =    null    ?    value . getClass (  )     :    returnType . getParameterType (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isResourceType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( StringUtils . hasText ( extension )  )  )     {", "return   true ;", "}", "extension    =    extension . toLowerCase ( Locale . ENGLISH )  ;", "if    ( this . safeExtensions . contains ( extension )  )     {", "return   true ;", "}", "String   pattern    =     (  ( String )     ( request . getAttribute ( HandlerMapping . BEST _ MATCHING _ PATTERN _ ATTRIBUTE )  )  )  ;", "if    (  ( pattern    !  =    null )     &  &     ( pattern . endsWith (  (  \"  .  \"     +    extension )  )  )  )     {", "return   true ;", "}", "if    ( extension . equals (  \" html \"  )  )     {", "String   name    =    HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ;", "Set < MediaType >    mediaTypes    =     (  ( Set < MediaType >  )     ( request . getAttribute ( name )  )  )  ;", "if    (  (  !  ( CollectionUtils . isEmpty ( mediaTypes )  )  )     &  &     ( mediaTypes . contains ( TEXT _ HTML )  )  )     {", "return   true ;", "}", "}", "return   safeMediaTypesForExtension ( new   context . request . ServletWebRequest ( request )  ,    extension )  ;", "}", "METHOD_END"], "methodName": ["safeExtension"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( AbstractMessageConverterMethodProcessor . WHITELISTED _ MEDIA _ BASE _ TYPES . contains ( mediaType . getType (  )  )  )     |  |     ( mediaType . getSubtype (  )  . endsWith (  \"  + xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["safeMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "List < MediaType >    mediaTypes    =    null ;", "try    {", "mediaTypes    =    this . pathStrategy . resolveMediaTypeKey ( request ,    extension )  ;", "}    catch    ( HttpMediaTypeNotAcceptableExcep   ex )     {", "}", "if    ( CollecUtils . isEmpty ( mediaTypes )  )     {", "return   false ;", "}", "for    ( MediaType   mediaType    :    mediaTypes )     {", "if    (  !  ( safeMediaType ( mediaType )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["safeMediaTypesForExtension"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "Object   outputValue ;", "Class <  ?  >    valueType ;", "Type   declaredType ;", "if    ( value   instanceof   CharSequence )     {", "outputValue    =    value . toString (  )  ;", "valueType    =    String . class ;", "declaredType    =    String . class ;", "} else    {", "outputValue    =    value ;", "valueType    =    getReturnValueType ( outputValue ,    returnType )  ;", "declaredType    =    getGenericType ( returnType )  ;", "}", "if    ( isResourceType ( value ,    returnType )  )     {", "outputMessage . getHeaders (  )  . set ( ACCEPT _ RANGES ,     \" bytes \"  )  ;", "if    (  ( value    !  =    null )     &  &     (  ( inputMessage . getHeaders (  )  . getFirst ( RANGE )  )     !  =    null )  )     {", "Resource   resource    =     (  ( Resource )     ( value )  )  ;", "try    {", "List < HttpRange >    httpRanges    =    inputMessage . getHeaders (  )  . getRange (  )  ;", "outputMessage . getServletResponse (  )  . setStatus ( PARTIAL _ CONTENT . value (  )  )  ;", "outputValue    =    HttpRange . toResourceRegions ( httpRanges ,    resource )  ;", "valueType    =    outputValue . getClass (  )  ;", "declaredType    =     . RESOURCE _ REGION _ LIST _ TYPE ;", "}    catch    ( IllegalArgumentException   ex )     {", "outputMessage . getHeaders (  )  . set ( CONTENT _ RANGE ,     (  \" bytes    *  /  \"     +     ( resource . contentLength (  )  )  )  )  ;", "outputMessage . getServletResponse (  )  . setStatus ( REQUESTED _ RANGE _ NOT _ SATISFIABLE . value (  )  )  ;", "}", "}", "}", "List < MediaType >    mediaTypesToUse ;", "MediaType   contentType    =    outputMessage . getHeaders (  )  . getContentType (  )  ;", "if    (  ( contentType    !  =    null )     &  &     ( contentType . isConcrete (  )  )  )     {", "mediaTypesToUse    =    Collections . singletonList ( contentType )  ;", "} else    {", "HttpServletRequest   request    =    inputMessage . getServletRequest (  )  ;", "List < MediaType >    requestedMediaTypes    =    getAcceptableMediaTypes ( request )  ;", "List < MediaType >    producibleMediaTypes    =    getProducibleMediaTypes ( request ,    valueType ,    declaredType )  ;", "if    (  ( outputValue    !  =    null )     &  &     ( producibleMediaTypes . isEmpty (  )  )  )     {", "throw   new   HttpMessageNotWritableException (  (  \" No   converter   found   for   return   value   of   type :     \"     +    valueType )  )  ;", "}", "mediaTypesToUse    =    new   ArrayList (  )  ;", "for    ( MediaType   requestedType    :    requestedMediaTypes )     {", "for    ( MediaType   producibleType    :    producibleMediaTypes )     {", "if    ( requestedType . isCompatibleWith ( producibleType )  )     {", "mediaTypesToUse . add ( getMostSpecificMediaType ( requestedType ,    producibleType )  )  ;", "}", "}", "}", "if    ( mediaTypesToUse . isEmpty (  )  )     {", "if    ( outputValue    !  =    null )     {", "throw   new   HttpMediaTypeNotAcceptableException ( producibleMediaTypes )  ;", "}", "return ;", "}", "MediaType . sortBySpecificityAndQuality ( mediaTypesToUse )  ;", "}", "MediaType   selectedMediaType    =    null ;", "for    ( MediaType   mediaType    :    mediaTypesToUse )     {", "if    ( mediaType . isConcrete (  )  )     {", "selectedMediaType    =    mediaType ;", "break ;", "} else", "if    (  ( mediaType . equals ( MediaType . ALL )  )     |  |     ( mediaType . equals (  . MEDIA _ TYPE _ APPLICATION )  )  )     {", "selectedMediaType    =    MediaType . APPLICATION _ OCTET _ STREAM ;", "break ;", "}", "}", "if    ( selectedMediaType    !  =    null )     {", "selectedMediaType    =    selectedMediaType . removeQualityValue (  )  ;", "for    ( HttpMessageConverter <  ?  >    converter    :    this . messageConverters )     {", "GenericHttpMessageConverter   genericConverter    =     ( converter   instanceof   GenericHttpMessageConverter )     ?     (  ( GenericHttpMessageConverter <  ?  >  )     ( converter )  )     :    null ;", "if    ( genericConverter    !  =    null    ?     (  ( GenericHttpMessageConverter )     ( converter )  )  . canWrite ( declaredType ,    valueType ,    selectedMediaType )     :    converter . canWrite ( valueType ,    selectedMediaType )  )     {", "outputValue    =    getAdvice (  )  . beforeBodyWrite ( outputValue ,    returnType ,    selectedMediaType ,     (  ( Class <  ?    extends   HttpMessageConverter <  ?  >  >  )     ( converter . getClass (  )  )  )  ,    inputMessage ,    outputMessage )  ;", "if    ( outputValue    !  =    null )     {", "addContentDispositionHeader ( inputMessage ,    outputMessage )  ;", "if    ( genericConverter    !  =    null )     {", "genericConverter . write ( outputValue ,    declaredType ,    selectedMediaType ,    outputMessage )  ;", "} else    {", "(  ( HttpMessageConverter )     ( converter )  )  . write ( outputValue ,    selectedMediaType ,    outputMessage )  ;", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  (  \" Written    [  \"     +    outputValue )     +     \"  ]    as    \\  \"  \"  )     +    selectedMediaType )     +     \"  \\  \"    using    [  \"  )     +    converter )     +     \"  ]  \"  )  )  ;", "}", "}", "return ;", "}", "}", "}", "if    ( outputValue    !  =    null )     {", "throw   new   HttpMediaTypeNotAcceptableException ( this . allSupportedMediaTypes )  ;", "}", "}", "METHOD_END"], "methodName": ["writeWithMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "ServletServerHttpRequest   inputMessage    =    createInputMessage ( webRequest )  ;", "ServletServerHttpResponse   outputMessage    =    createOutputMessage ( webRequest )  ;", "writeWiths ( value ,    returnType ,    inputMessage ,    outputMessage )  ;", "}", "METHOD_END"], "methodName": ["writeWithMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    new   SynthesizingMethodParameter ( this . handleMethod ,    parameterIndex )  ;", "param . initParameterNameDiscovery ( new   DefaultParameterNameDiscoverer (  )  )  ;", "GenericType . resolveParameterType ( param ,    this . resolver . getClass (  )  )  ;", "return   param ;", "}", "METHOD_END"], "methodName": ["initMethodParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    initMethodParameter (  0  )  ;", "try    {", "testResolveArgument ( param )  ;", "fail (  \" Should   be   required   by   default \"  )  ;", "}    catch    ( ServletRequestBindingException   ex )     {", "assertTrue ( ex . getMessage (  )  . startsWith (  \" Missing    \"  )  )  ;", "}", ". Foo   foo    =    new    . Foo (  )  ;", "this . webRequest . setAttribute (  \" foo \"  ,    foo ,    getScope (  )  )  ;", "assertSame ( foo ,    testResolveArgument ( param )  )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    initMethodParameter (  2  )  ;", "assertNull ( testResolveArgument ( param )  )  ;", ". Foo   foo    =    new    . Foo (  )  ;", "this . webRequest . setAttribute (  \" foo \"  ,    foo ,    getScope (  )  )  ;", "assertSame ( foo ,    testResolveArgument ( param )  )  ;", "}", "METHOD_END"], "methodName": ["resolveNotRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "WebDataBinder   dataBinder    =    new   WebRequestDataBinder ( null )  ;", "dataBinder . setConversionService ( new   DefaultConversionService (  )  )  ;", "WebDataBinderFactory   factory    =    mock ( WebDataBinderFactory . class )  ;", "given ( factory . createBinder ( this . webRequest ,    null ,     \" foo \"  )  )  . willReturn ( dataBinder )  ;", "MethodParameter   param    =    initMethodParameter (  3  )  ;", "Object   actual    =    testResolveArgument ( param ,    factory )  ;", "assertNotNull ( actual )  ;", "assertEquals ( Optional . class ,    actual . getClass (  )  )  ;", "assertFalse (  (  ( Optional <  ?  >  )     ( actual )  )  . isPresent (  )  )  ;", ". Foo   foo    =    new    . Foo (  )  ;", "this . webRequest . setAttribute (  \" foo \"  ,    foo ,    getScope (  )  )  ;", "actual    =    testResolveArgument ( param ,    factory )  ;", "assertNotNull ( actual )  ;", "assertEquals ( Optional . class ,    actual . getClass (  )  )  ;", "assertTrue (  (  ( Optional <  ?  >  )     ( actual )  )  . isPresent (  )  )  ;", "assertSame ( foo ,     (  ( Optional <  ?  >  )     ( actual )  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    initMethodParameter (  1  )  ;", ". Foo   foo    =    new    . Foo (  )  ;", "this . webRequest . setAttribute (  \" specialFoo \"  ,    foo ,    getScope (  )  )  ;", "assertSame ( foo ,    testResolveArgument ( param )  )  ;", "}", "METHOD_END"], "methodName": ["resolveWithName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   ServletWebRequest ( request ,    response )  ;", "this . resolver    =    createResolver (  )  ;", "this . handleMethod    =     . class . getDeclaredMethod ( getHandleMethodName (  )  ,     . Foo . class ,     . Foo . class ,     . Foo . class ,    Optional . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . resolver . supportsParameter ( new   MethodParameter ( this . handleMethod ,     0  )  )  )  ;", "assertFalse ( this . resolver . supportsParameter ( new   MethodParameter ( this . handleMethod ,     (  -  1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   testResolveArgument ( param ,    null )  ;", "}", "METHOD_END"], "methodName": ["testResolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "return   this . resolver . resolve ( param ,    mavContainer ,    this . webRequest ,    factory )  ;", "}", "METHOD_END"], "methodName": ["testResolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractRequestAttributesArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull (  \" DispatcherServlet   not   initialized \"  ,    servlet )  ;", "return   servlet ;", "}", "METHOD_END"], "methodName": ["getServlet"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractServletHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "final   GenericWebApplicationContext   wac    =    new   GenericWebApplicationContext (  )  ;", "servlet    =    new   DispatcherServlet (  )     {", "@ Override", "protected   WebApplicationContext   createWebApplicationContext (  @ Nullable", "WebApplicationContext   parent )     {", "for    ( Class <  ?  >    clazz    :    controllerClasses )     {", "wac . registerBeanDefinition ( clazz . getSimpleName (  )  ,    new   RootBeanDefinition ( clazz )  )  ;", "}", "RootBeanDefinition   mappingDef    =    new   RootBeanDefinition ( RequestMappingapping . class )  ;", "mappingDef . getPropertyValues (  )  . add (  \" removeSemicolonContent \"  ,     \" false \"  )  ;", "wac . registerBeanDefinition (  \" handlerMapping \"  ,    mappingDef )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    new   RootBeanDefinition ( RequestMappingHandlerAdapter . class )  )  ;", "wac . registerBeanDefinition (  \" requestMappingResolver \"  ,    new   RootBeanDefinition ( ExceptionHandlerExceptionResolver . class )  )  ;", "wac . registerBeanDefinition (  \" responseStatusResolver \"  ,    new   RootBeanDefinition ( ResponseStatusExceptionResolver . class )  )  ;", "wac . registerBeanDefinition (  \" defaultResolver \"  ,    new   RootBeanDefinition ( DefaultHandlerExceptionResolver . class )  )  ;", "if    ( initializer    !  =    null )     {", "initializer . initialize ( wac )  ;", "}", "wac . refresh (  )  ;", "return   wac ;", "}", "}  ;", "servlet . init ( new   MockServletConfig (  )  )  ;", "return   wac ;", "}", "METHOD_END"], "methodName": ["initServlet"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractServletHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "return   initServlet ( null ,    controllerClasses )  ;", "}", "METHOD_END"], "methodName": ["initServletWithControllers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractServletHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . servlet    =    null ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.AbstractServletHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setMethod (  \" OPTIONS \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ HEADERS ,     \" header 1  \"  )  ;", "this . request . setRequestURI (  \"  / ambiguous - header \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    true )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedHeaders (  )  . toArray (  )  )  ;", "assertTrue ( config . getAllowCredentials (  )  )  ;", "assertTrue ( CollectionUtils . isEmpty ( config . getExposedHeaders (  )  )  )  ;", "assertNull ( config . getMaxAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguousHeaderPreFlightRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setMethod (  \" OPTIONS \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "this . request . setRequestURI (  \"  / ambiguous - produces \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    true )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedHeaders (  )  . toArray (  )  )  ;", "assertTrue ( config . getAllowCredentials (  )  )  ;", "assertTrue ( CollectionUtils . isEmpty ( config . getExposedHeaders (  )  )  )  ;", "assertNull ( config . getMaxAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguousProducesPreFlightRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "exception . expect ( IllegalStateException . class )  ;", "exception . expectMessage ( containsString (  \"  @ CrossOrigin ' s   allowCredentials \"  )  )  ;", "exception . expectMessage ( containsString (  \" current   value   is    [ bogus ]  \"  )  )  ;", "this . handlerMapping . registerHandler ( new    . MethodLevelControllerWithBogusAllowCredentialsValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["bogusAllowCredentialsValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . ClassLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertFalse ( config . getAllowCredentials (  )  )  ;", "this . request . setRequestURI (  \"  / bar \"  )  ;", "chain    =    this . handlerMapping . getHandler ( request )  ;", "config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertFalse ( config . getAllowCredentials (  )  )  ;", "this . request . setRequestURI (  \"  / baz \"  )  ;", "chain    =    this . handlerMapping . getHandler ( request )  ;", "config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertTrue ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["classLevel"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . ClassLevelMappingWithComposedAnnotation (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" http :  /  / foo . com \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertTrue ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["classLevelComposedAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / someOrigin \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertEquals ( Arrays . asList (  \" http :  /  / example . com \"  )  ,    config . getAllowedOrigins (  )  )  ;", "assertNull ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["customOriginDefinedViaPlaceholder"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / customOrigin \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertEquals ( Arrays . asList (  \" http :  /  / example . com \"  )  ,    config . getAllowedOrigins (  )  )  ;", "assertNull ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["customOriginDefinedViaValueAttribute"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / customized \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" DELETE \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" http :  /  / site 1  . com \"  ,     \" http :  /  / site 2  . com \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" header 1  \"  ,     \" header 2  \"     }  ,    config . getAllowedHeaders (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" header 3  \"  ,     \" header 4  \"     }  ,    config . getExposedHeaders (  )  . toArray (  )  )  ;", "assertEquals ( new   Long (  1  2  3  )  ,    config . getMaxAge (  )  )  ;", "assertFalse ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["customized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / default \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertNull ( config . getAllowCredentials (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedHeaders (  )  . toArray (  )  )  ;", "assertTrue ( CollectionUtils . isEmpty ( config . getExposedHeaders (  )  )  )  ;", "assertEquals ( new   Long (  1  8  0  0  )  ,    config . getMaxAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "if    ( isPreFlightRequest )     {", "Object   handler    =    chain . getHandler (  )  ;", "assertTrue ( handler . getClass (  )  . getSimpleName (  )  . equals (  \" PreFlightHandler \"  )  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( handler )  ;", "return    (  ( CorsConfigur )     ( accessor . getPropertyValue (  \" config \"  )  )  )  ;", "} else    {", "HandlerInterceptor [  ]    interceptors    =    chain . getInterceptors (  )  ;", "if    ( interceptors    !  =    null )     {", "for    ( HandlerInterceptor   interceptor    :    interceptors )     {", "if    ( interceptor . getClass (  )  . getSimpleName (  )  . equals (  \" CorsInterceptor \"  )  )     {", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( interceptor )  ;", "return    (  ( CorsConfigur )     ( accessor . getPropertyValue (  \" config \"  )  )  )  ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getCorsConfiguration"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelMappingWithComposedAnnotation (  )  )  ;", "this . request . setRequestURI (  \"  / foo \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    false )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \" http :  /  / foo . com \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertTrue ( config . getAllowCredentials (  )  )  ;", "}", "METHOD_END"], "methodName": ["methodLevelComposedAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setMethod (  \" POST \"  )  ;", "this . request . setRequestURI (  \"  / no \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "assertNull ( getCorsConfiguration ( chain ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["noAnnotationPostWithOrigin"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setRequestURI (  \"  / no \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "assertNull ( getCorsConfiguration ( chain ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["noAnnotationWithOrigin"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / no \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "assertNull ( getCorsConfiguration ( chain ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["noAnnotationWithoutOrigin"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . registerHandler ( new   CrossOriginTests . MethodLevelController (  )  )  ;", "this . request . setMethod (  \" OPTIONS \"  )  ;", "this . request . addHeader ( ACCESS _ CONTROL _ REQUEST _ METHOD ,     \" GET \"  )  ;", "this . request . setRequestURI (  \"  / default \"  )  ;", "HandlerExecutionChain   chain    =    this . handlerMapping . getHandler ( request )  ;", "CorsConfiguration   config    =    getCorsConfiguration ( chain ,    true )  ;", "assertNotNull ( config )  ;", "assertArrayEquals ( new   String [  ]  {     \" GET \"     }  ,    config . getAllowedMethods (  )  . toArray (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedOrigins (  )  . toArray (  )  )  ;", "assertNull ( config . getAllowCredentials (  )  )  ;", "assertArrayEquals ( new   String [  ]  {     \"  *  \"     }  ,    config . getAllowedHeaders (  )  . toArray (  )  )  ;", "assertTrue ( CollectionUtils . isEmpty ( config . getExposedHeaders (  )  )  )  ;", "assertEquals ( new   Long (  1  8  0  0  )  ,    config . getMaxAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["preFlightRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  / default \"  )  ;", "request . addHeader ( ORIGIN ,     \" http :  /  / domain 2  . com \"  )  ;", "assertNull ( this . handlerMapping . getHandler ( request )  )  ;", "}", "METHOD_END"], "methodName": ["preFlightRequestWithoutRequestMethodHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" my \"  ,     \" http :  /  / example . com \"  )  ;", "wac . getEnvironment (  )  . getPropertySources (  )  . addFirst ( new   PropertiesPropertySource (  \" ps \"  ,    props )  )  ;", "wac . registerSingleton (  \" ppc \"  ,    PropertySourcesPlaceholderConfigurer . class )  ;", "wac . refresh (  )  ;", "this . handlerMapping . setRemoveSemicolonContent ( false )  ;", "wac . getAutowireCapableBeanFactory (  )  . initializeBean ( this . handlerMapping ,     \" hm \"  )  ;", "this . request . setMethod (  \" GET \"  )  ;", "this . request . addHeader ( ORIGIN ,     \" http :  /  / domain . com /  \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests"}, {"methodBody": ["METHOD_START", "{", "DeferredResult < Object >    result    =    new   DeferredResult (  )  ;", "future . handle (  (  ( BiFunction < Object ,    Throwable ,    Object >  )     (  (    value ,    ex )     -  >     {", "if    ( ex    !  =    null )     {", "result . setErrorResult ( ex )  ;", "} else    {", "result . setResult ( value )  ;", "}", "return   null ;", "}  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["adaptCompletionStage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "DeferredResult < Object >    result    =    new   DeferredResult (  )  ;", "future . addCallback ( new   util . concurrent . ListenableFutureCallback < Object >  (  )     {", "@ Override", "public   void   onSuccess (  @ Nullable", "Object   value )     {", "result . setResult ( value )  ;", "}", "@ Override", "public   void   onFailure ( Throwable   ex )     {", "result . setErrorResult ( ex )  ;", "}", "}  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["adaptListenableFuture"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "SettableListenableFuture < String >    future    =    new   SettableListenableFuture (  )  ;", "test ( future ,    CompletableFuture . class ,     (  )     -  >    future . set (  \" foo \"  )  ,     \" foo \"  )  ;", "}", "METHOD_END"], "methodName": ["completableFuture"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "SettableListenableFuture < String >    future    =    new   SettableListenableFuture (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "test ( future ,    CompletableFuture . class ,     (  )     -  >    future . setException ( ex )  ,    ex )  ;", "}", "METHOD_END"], "methodName": ["completableFutureWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "DeferredResult < String >    result    =    new   DeferredResult (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "testHandle ( result ,    DeferredResult . class ,     (  )     -  >    result . setErrorResult ( ex )  ,    ex )  ;", "}", "METHOD_END"], "methodName": ["deferredResult"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "DeferredResult < String >    result    =    new   DeferredResult (  )  ;", "testHandle ( result ,    DeferredResult . class ,     (  )     -  >    result . setResult (  \" foo \"  )  ,     \" foo \"  )  ;", "}", "METHOD_END"], "methodName": ["deferredResultWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . handler . supportsReturnType ( on ( DeferredResultReturnValueHandlerTests . TestController . class )  . resolveReturnType ( String . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["doesNotSupportReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "SettableListenableFuture < String >    future    =    new   SettableListenableFuture (  )  ;", "test ( future ,    ListenableFuture . class ,     (  )     -  >    future . set (  \" foo \"  )  ,     \" foo \"  )  ;", "}", "METHOD_END"], "methodName": ["listenableFuture"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "SettableListenableFuture < String >    future    =    new   SettableListenableFuture (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "test ( future ,    ListenableFuture . class ,     (  )     -  >    future . setException ( ex )  ,    ex )  ;", "}", "METHOD_END"], "methodName": ["listenableFutureWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   DeferredResultMethodReturnValueHandler (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   context . request . ServletWebRequest ( this . request ,    response )  ;", "AsyncWebRequest   asyncWebRequest    =    new   context . request . async . StandardServletAsyncWebRequest ( this . request ,    response )  ;", "WebAsyncUtils . getAsyncManager ( this . webRequest )  . setAsyncWebRequest ( asyncWebRequest )  ;", "this . request . setAsyncSupported ( true )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . supportsReturnType ( on ( DeferredResultReturnValueHandlerTests . TestController . class )  . resolveReturnType ( DeferredResult . class ,    String . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( on ( DeferredResultReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ListenableFuture . class ,    String . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( on ( DeferredResultReturnValueHandlerTests . TestController . class )  . resolveReturnType ( CompletableFuture . class ,    String . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "MethodParameter   returnType    =    on (  . TestController . class )  . resolveReturnType ( asyncType ,    String . class )  ;", "this . handler . handleReturnValue ( returnValue ,    returnType ,    mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertFalse ( WebAsyncUtils . getAsyncManager ( this . webRequest )  . hasConcurrentResult (  )  )  ;", "setResultTask . run (  )  ;", "assertTrue ( WebAsyncUtils . getAsyncManager ( this . webRequest )  . hasConcurrentResult (  )  )  ;", "assertEquals ( expectedValue ,    WebAsyncUtils . getAsyncManager ( this . webRequest )  . getConcurrentResult (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHandle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   this . applicationContext ;", "}", "METHOD_END"], "methodName": ["getApplicationContext"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . argumentResolvers ;", "}", "METHOD_END"], "methodName": ["getArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . customArgumentResolvers ;", "}", "METHOD_END"], "methodName": ["getCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . customReturnValueHandlers ;", "}", "METHOD_END"], "methodName": ["getCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "List < HandlerMethodArgumentResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( new   SessionAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   RequestAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletRequestMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletResponseMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   RedirectAttributesMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ModelMethodProcessor (  )  )  ;", "if    (  ( getCustomArgumentResolvers (  )  )     !  =    null )     {", "resolvers . addAll ( getCustomArgumentResolvers (  )  )  ;", "}", "return   resolvers ;", "}", "METHOD_END"], "methodName": ["getDefaultArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "List < HandlerMethodReturnValueHandler >    handlers    =    new   ArrayList <  >  (  )  ;", "handlers . add ( new   ModelAndViewMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   ModelMethodProcessor (  )  )  ;", "handlers . add ( new   ViewMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   HttpEntityMethodProcessor ( getMessageConverters (  )  ,    this . contentNegotiationManager ,    this . responseBodyAdvice )  )  ;", "handlers . add ( new   ModelAttributeMethodProcessor ( false )  )  ;", "handlers . add ( new   RequestResponseBodyMethodProcessor ( getMessageConverters (  )  ,    this . contentNegotiationManager ,    this . responseBodyAdvice )  )  ;", "handlers . add ( new   ViewNameMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   MapMethodProcessor (  )  )  ;", "if    (  ( getCustomReturnValueHandlers (  )  )     !  =    null )     {", "handlers . addAll ( getCustomReturnValueHandlers (  )  )  ;", "}", "handlers . add ( new   ModelAttributeMethodProcessor ( true )  )  ;", "return   handlers ;", "}", "METHOD_END"], "methodName": ["getDefaultReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( this . exceptionHandlerAdviceCache )  ;", "}", "METHOD_END"], "methodName": ["getExceptionHandlerAdviceCache"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    handlerType    =    null ;", "if    ( handlerMethod    !  =    null )     {", "handlerType    =    handlerMethod . getBeanType (  )  ;", "MethodResolver   resolver    =    this . exceptionHandlerCache . get ( handlerType )  ;", "if    ( resolver    =  =    null )     {", "resolver    =    new   MethodResolver ( handlerType )  ;", "this . exceptionHandlerCache . put ( handlerType ,    resolver )  ;", "}", "Method   method    =    resolver . resolveMethod ( exception )  ;", "if    ( method    !  =    null )     {", "return   new   ServletInvocableHandlerMethod ( handlerMethod . getBean (  )  ,    method )  ;", "}", "if    ( Proxy . isProxyClass ( handlerType )  )     {", "handlerType    =    AopUtils . getTargetClass ( handlerMethod . getBean (  )  )  ;", "}", "}", "for    ( Map . Entry < ControllerAdviceBean ,    MethodResolver >    entry    :    this . exceptionHandlerAdviceCache . entrySet (  )  )     {", "ControllerAdviceBean   advice    =    entry . getKey (  )  ;", "if    ( advice . isApplicableToBeanType ( handlerType )  )     {", "MethodResolver   resolver    =    entry . getValue (  )  ;", "Method   method    =    resolver . resolveMethod ( exception )  ;", "if    ( method    !  =    null )     {", "return   new   ServletInvocableHandlerMethod ( advice . resolveBean (  )  ,    method )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getExceptionHandlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . messageConverters ;", "}", "METHOD_END"], "methodName": ["getMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . returnValueHandlers ;", "}", "METHOD_END"], "methodName": ["getReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getApplicationContext (  )  )     =  =    null )     {", "return ;", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Looking   for   exception   mappings :     \"     +     ( getApplicationContext (  )  )  )  )  ;", "}", "List < ControllerAdviceBean >    adviceBeans    =    ControllerAdviceBean . findAnnotatedBeans ( getApplicationContext (  )  )  ;", "AnnotationAwareOrderComparator . sort ( adviceBeans )  ;", "for    ( ControllerAdviceBean   adviceBean    :    adviceBeans )     {", "Class <  ?  >    beanType    =    adviceBean . getBeanType (  )  ;", "if    ( beanType    =  =    null )     {", "throw   new   IllegalStateException (  (  \" Unresolvable   type   for   ControllerAdviceBean :     \"     +    adviceBean )  )  ;", "}", "MethodResolver   resolver    =    new   MethodResolver ( beanType )  ;", "if    ( resolver . hasExceptionMappings (  )  )     {", "this . exceptionHandlerAdviceCache . put ( adviceBean ,    resolver )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected    @    methods   in    \"     +    adviceBean )  )  ;", "}", "}", "if    ( ResponseBodyAdvice . class . isAssignableFrom ( beanType )  )     {", "this . responseBodyAdvice . add ( adviceBean )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected   ResponseBodyAdvice   implementation   in    \"     +    adviceBean )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["initExceptionHandlerAdviceCache"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( argumentResolvers    =  =    null )     {", "this . argumentResolvers    =    null ;", "} else    {", "this . argumentResolvers    =    new   HandlerMethodArgumentResolverComposite (  )  ;", "this . argumentResolvers . addResolvers ( argumentResolvers )  ;", "}", "}", "METHOD_END"], "methodName": ["setArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . contentNegotiationManager    =    contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["setContentNegotiationManager"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . customArgumentResolvers    =    argumentResolvers ;", "}", "METHOD_END"], "methodName": ["setCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . customReturnValueHandlers    =    returnValueHandlers ;", "}", "METHOD_END"], "methodName": ["setCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . messageConverters    =    messageConverters ;", "}", "METHOD_END"], "methodName": ["setMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "this . responseBodyAdvice . clear (  )  ;", "if    ( responseBodyAdvice    !  =    null )     {", "this . responseBodyAdvice . addAll ( responseBodyAdvice )  ;", "}", "}", "METHOD_END"], "methodName": ["setResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( returnValueHandlers    =  =    null )     {", "this . returnValueHandlers    =    null ;", "} else    {", "this . returnValueHandlers    =    new   HandlerMethodReturnValueHandlerComposite (  )  ;", "this . returnValueHandlers . addHandlers ( returnValueHandlers )  ;", "}", "}", "METHOD_END"], "methodName": ["setReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( resolverCount ,    this . resolver . getArgumentResolvers (  )  . getResolvers (  )  . size (  )  )  ;", "assertEquals ( handlerCount ,    this . resolver . getReturnValueHandlers (  )  . getHandlers (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertMethodProcessorCount"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Object   handler    =    null ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolve ( this . request ,    this . response ,    handler ,    null )  ;", "assertNull (  \"    can   be   resolved   only   if   there   is   a   HandlerMethod \"  ,    mav )  ;", "}", "METHOD_END"], "methodName": ["nullHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyControllerAdviceConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ProxyFactory ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  )  . getProxy (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" BasePackageTestExceptionResolver :    IllegalStateException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionControllerAdviceAgainstProxy"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyControllerAdviceConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" BasePackageTestExceptionResolver :    IllegalStateException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionControllerAdviceHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyControllerAdviceConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    null ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" DefaultTestExceptionResolver :    IllegalStateException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionControllerAdviceNoHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "IllegalAccessException   ex    =    new   IllegalAccessException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" AnotherTestExceptionResolver :    IllegalAccessException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionGlobalHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" TestExceptionResolver :    IllegalStateException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionGlobalHandlerOrdered"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   ex    =    new   IllegalArgumentException (  \" Bad   argument \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . ModelAndViewController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull ( mav )  ;", "assertFalse ( mav . isEmpty (  )  )  ;", "assertEquals (  \" errorView \"  ,    mav . getViewName (  )  )  ;", "assertEquals (  \" Bad   argument \"  ,    mav . getModel (  )  . get (  \" detail \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionModelAndView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   ex    =    new   IllegalArgumentException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . ModelArgumentController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull ( mav )  ;", "assertEquals (  1  ,    mav . getModelMap (  )  . size (  )  )  ;", "assertEquals (  \" IllegalArgumentException \"  ,    mav . getModelMap (  )  . get (  \" exceptionClassName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionModelAtArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   ex    =    new   IllegalArgumentException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . ResponseBodyController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull ( mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" IllegalArgumentException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   ex    =    new   IllegalArgumentException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . ResponseWriterController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull ( mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" IllegalArgumentException \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionResponseWriter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "AssertionError   err    =    new   AssertionError (  \" argh \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    new   NestedServletException (  \" Handler   dispatch   failed \"  ,    err )  )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals ( err . toString (  )  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionWithAssertionError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "AssertionError   err    =    new   AssertionError (  \" argh \"  )  ;", "FatalBeanException   ex    =    new   FatalBeanException (  \" wrapped \"  ,    err )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals ( err . toString (  )  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionWithAssertionErrorAsRootCause"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext ( ExceptionHandlerExceptionResolverTests . MyConfig . class )  ;", "this . resolver . setApplicationContext ( ctx )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ArrayIndexOutOfBoundsException   ex    =    new   ArrayIndexOutOfBoundsException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   ExceptionHandlerExceptionResolverTests . ResponseBodyController (  )  ,     \" handle \"  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull (  \" Exception   was   not   handled \"  ,    mav )  ;", "assertTrue ( mav . isEmpty (  )  )  ;", "assertEquals (  \" HandlerMethod :    handle \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveExceptionWithHandlerMethodArg"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Exception   npe    =    new   NullPointerException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . IoExceptionController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    npe )  ;", "assertNull (  \" NPE   should   not   have   been   handled \"  ,    mav )  ;", "}", "METHOD_END"], "methodName": ["resolveNoExceptionHandlerForException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   ex    =    new   IllegalArgumentException (  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . RedirectAttributesController (  )  ,     \" handle \"  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . resolver . resolveException ( this . request ,    this . response ,    handlerMethod ,    ex )  ;", "assertNotNull ( mav )  ;", "assertEquals (  \" redirect :  /  \"  ,    mav . getViewName (  )  )  ;", "FlashMap   flashMap    =     (  ( FlashMap )     ( this . request . getAttribute ( DispatcherServlet . OUTPUT _ FLASH _ MAP _ ATTRIBUTE )  )  )  ;", "assertNotNull (  \" output   FlashMap   should   exist \"  ,    flashMap )  ;", "assertEquals (  \" IllegalArgumentException \"  ,    flashMap . get (  \" exceptionClassName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveRedirectAttributesAtArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "this . resolver . setArgumentResolvers ( Collections . singletonList ( resolver )  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "assertMethodProcessorCount (  1  ,     . HANDLER _ COUNT )  ;", "}", "METHOD_END"], "methodName": ["setArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "this . resolver . setCustomArgumentResolvers ( Collections . singletonList ( resolver )  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "assertTrue ( this . resolver . getArgumentResolvers (  )  . getResolvers (  )  . contains ( resolver )  )  ;", "assertMethodProcessorCount (  (  (  . RESOLVER _ COUNT )     +     1  )  ,     . HANDLER _ COUNT )  ;", "}", "METHOD_END"], "methodName": ["setCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodReturnValueHandler   handler    =    new   ViewNameMethodReturnValueHandler (  )  ;", "this . resolver . setCustomReturnValueHandlers ( Collections . singletonList ( handler )  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "assertTrue ( this . resolver . getReturnValueHandlers (  )  . getHandlers (  )  . contains ( handler )  )  ;", "assertMethodProcessorCount (  . RESOLVER _ COUNT ,     (  (  . HANDLER _ COUNT )     +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["setCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodReturnValueHandler   handler    =    new   ModelMethodProcessor (  )  ;", "this . resolver . setReturnValueHandlers ( Collections . singletonList ( handler )  )  ;", "this . resolver . afterPropertiesSet (  )  ;", "assertMethodProcessorCount (  . RESOLVER _ COUNT ,     1  )  ;", "}", "METHOD_END"], "methodName": ["setReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver    =    new   ExceptionHandlerExceptionResolver (  )  ;", "this . resolver . setWarnLogCategory ( this . resolver . getClass (  )  . getName (  )  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . request . setAttribute ( DispatcherServlet . OUTPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   FlashMap (  )  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ExceptionHandlerExceptionResolver   resolver    =    new   ExceptionHandlerExceptionResolver (  )  ;", "resolver . afterPropertiesSet (  )  ;", ". RESOLVER _ COUNT    =    resolver . getArgumentResolvers (  )  . getResolvers (  )  . size (  )  ;", ". HANDLER _ COUNT    =    resolver . getReturnValueHandlers (  )  . getHandlers (  )  . size (  )  ;", "}", "METHOD_END"], "methodName": ["setupOnce"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" nameValue \"  )  ;", "uriTemplateVars . put (  \" age \"  ,     \"  2  5  \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "TestBean   target    =    new   TestBean (  )  ;", "WebDataBinder   binder    =    new    ( target ,     \"  \"  )  ;", "(  ( ServletRequestDataBinder )     ( binder )  )  . bind ( request )  ;", "assertEquals (  \" nameValue \"  ,    target . getName (  )  )  ;", "assertEquals (  2  5  ,    target . getAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["createBinder"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinderTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   target    =    new   TestBean (  )  ;", "WebDataBinder   binder    =    new    ( target ,     \"  \"  )  ;", "(  ( ServletRequestDataBinder )     ( binder )  )  . bind ( request )  ;", "assertEquals ( null ,    target . getName (  )  )  ;", "assertEquals (  0  ,    target . getAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["noUriTemplateVars"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinderTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinderTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" age \"  ,     \"  3  5  \"  )  ;", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" nameValue \"  )  ;", "uriTemplateVars . put (  \" age \"  ,     \"  2  5  \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "TestBean   target    =    new   TestBean (  )  ;", "WebDataBinder   binder    =    new    ( target ,     \"  \"  )  ;", "(  ( ServletRequestDataBinder )     ( binder )  )  . bind ( request )  ;", "assertEquals (  \" nameValue \"  ,    target . getName (  )  )  ;", "assertEquals (  3  5  ,    target . getAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateVarAndRequestParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ExtendedServletRequestDataBinderTests"}, {"methodBody": ["METHOD_START", "{", "return   new   Object [  ]  [  ]  {    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . SimpleController . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . SimpleController . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . AbstractClassController . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . AbstractClassController . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . ParameterizedAbstractClassController . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . ParameterizedAbstractClassController . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . ParameterizedSubclassOverridesDefaultMappings . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . ParameterizedSubclassOverridesDefaultMappings . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . InterfaceController . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . InterfaceController . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . ParameterizedInterfaceController . class ,    false    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . SupportClassController . class ,    true    }  ,    new   Object [  ]  {    HandlerMethodAnnotationDetectionTests . SupportClassController . class ,    false    }     }  ;", "}", "METHOD_END"], "methodName": ["handlerTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests"}, {"methodBody": ["METHOD_START", "{", "String   datePattern    =     \" MM : dd : yyyy \"  ;", "SimpleDateFormat   dateFormat    =    new   SimpleDateFormat ( datePattern )  ;", "String   dateA    =     \"  1  1  :  0  1  :  2  0  1  1  \"  ;", "String   dateB    =     \"  1  1  :  0  2  :  2  0  1  1  \"  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / path 1  / path 2  \"  )  ;", "request . setParameter (  \" datePattern \"  ,    datePattern )  ;", "request . addHeader (  \" header 1  \"  ,    dateA )  ;", "request . addHeader (  \" header 2  \"  ,    dateB )  ;", "ExecutionChain   chain    =    handlerMapping . get ( request )  ;", "assertNotNull ( chain )  ;", "ModelAndView   mav    =    handlerAdapter . handle ( request ,    new   MockHttpServletResponse (  )  ,    chain . get (  )  )  ;", "assertEquals (  \" model   attr 1  :  \"  ,    dateFormat . parse ( dateA )  ,    mav . getModel (  )  . get (  \" attr 1  \"  )  )  ;", "assertEquals (  \" model   attr 2  :  \"  ,    dateFormat . parse ( dateB )  ,    mav . getModel (  )  . get (  \" attr 2  \"  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "exceptionResolver . resolveException ( request ,    response ,    chain . get (  )  ,    new   Exception (  \" failure \"  )  )  ;", "assertEquals (  \" text / plain ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  \" failure \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequestMappingMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests"}, {"methodBody": ["METHOD_START", "{", "Assert . isAssignable ( HttpEntity . class ,    parameter . getParameterType (  )  )  ;", "Type   parameterType    =    parameter . getGenericParameterType (  )  ;", "if    ( parameterType   instanceof   ParameterizedType )     {", "ParameterizedType   type    =     (  ( ParameterizedType )     ( parameterType )  )  ;", "if    (  ( type . getActualTypeArguments (  )  . length )     !  =     1  )     {", "throw   new   IllegalArgumentException (  (  (  (  \" Expected   single   generic   parameter   on    '  \"     +     ( parameter . getParameterName (  )  )  )     +     \"  '    in   method    \"  )     +     ( parameter . getMethod (  )  )  )  )  ;", "}", "return   type . getActualTypeArguments (  )  [  0  ]  ;", "} else", "if    ( parameterType   instanceof   Class )     {", "return   Object . class ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getHttpEntityType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "List < String >    entityHeadersVary    =    entityHeaders . getVary (  )  ;", "List < String >    vary    =    responseHeaders . get ( VARY )  ;", "if    ( vary    !  =    null )     {", "List < String >    result    =    new   ArrayList <  >  ( entityHeadersVary )  ;", "for    ( String   header    :    vary )     {", "for    ( String   existing    :    StringUtils . tokenizeToStringArray ( header ,     \"  ,  \"  )  )     {", "if    (  \"  *  \"  . equals ( existing )  )     {", "return   Collections . emptyList (  )  ;", "}", "for    ( String   value    :    entityHeadersVary )     {", "if    ( value . equalsIgnoreCase ( existing )  )     {", "result . remove ( value )  ;", "}", "}", "}", "}", "return   result ;", "}", "return   entityHeadersVary ;", "}", "METHOD_END"], "methodName": ["getVaryRequestHeadersToAdd"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "ServletWebRequest   servletWebRequest    =    new   ServletWebRequest ( request . getServletRequest (  )  ,    response . getServletResponse (  )  )  ;", "HttpHeaders   responseHeaders    =    response . getHeaders (  )  ;", "String   etag    =    responseHeaders . getETag (  )  ;", "long   lastModifiedTimestamp    =    responseHeaders . getLastModified (  )  ;", "if    (  (  ( request . getMethod (  )  )     =  =     ( HttpMethod . GET )  )     |  |     (  ( request . getMethod (  )  )     =  =     ( HttpMethod . HEAD )  )  )     {", "responseHeaders . remove ( ETAG )  ;", "responseHeaders . remove ( LAST _ MODIFIED )  ;", "}", "return   servletWebRequest . checkNotModified ( etag ,    lastModifiedTimestamp )  ;", "}", "METHOD_END"], "methodName": ["isResourceNotModified"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "mav . setRedirectModelScenario ( true )  ;", "ModelMap   model    =    mav . getModel (  )  ;", "if    ( model   instanceof   RedirectAttributes )     {", "Map < String ,     ?  >    flashAttributes    =     (  ( RedirectAttributes )     ( model )  )  . getFlashAttributes (  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( flashAttributes )  )  )     {", "HttpSRequest   req    =    request . getNativeRequest ( HttpSRequest . class )  ;", "HttpSResponse   res    =    request . getNativeResponse ( HttpSResponse . class )  ;", "if    ( req    !  =    null )     {", "RequestContextUtils . getOutputFlashMap ( req )  . putAll ( flashAttributes )  ;", "if    ( res    !  =    null )     {", "RequestContextUtils . saveOutputFlashMap ( location ,    req ,    res )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["saveFlashAttributes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( status . value (  )  ,    servletResponse . getStatus (  )  )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "if    ( body    !  =    null )     {", "assertResponseBody ( body )  ;", "} else    {", "assertEquals (  0  ,    servletResponse . getContentAsByteArray (  )  . length )  ;", "}", "if    ( etag    !  =    null )     {", "assertEquals (  1  ,    servletResponse . getHeaderValues ( ETAG )  . size (  )  )  ;", "assertEquals ( etag ,    servletResponse . getHeader ( ETAG )  )  ;", "}", "if    ( lastModified    !  =     (  -  1  )  )     {", "assertEquals (  1  ,    servletResponse . getHeaderValues ( LAST _ MODIFIED )  . size (  )  )  ;", "assertEquals (  ( lastModified    /     1  0  0  0  )  ,     (  ( servletResponse . getDateHeader ( LAST _ MODIFIED )  )     /     1  0  0  0  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertConditionalResponse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ArgumentCaptor < HttpOutputMessage >    outputMessage    =    ArgumentCaptor . forClass ( HttpOutputMessage . class )  ;", "verify ( stringHttpMessageConverter )  . write ( eq ( body )  ,    eq ( TEXT _ PLAIN )  ,    outputMessage . capture (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   entity ;", "}", "METHOD_END"], "methodName": ["handle1"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   entity ;", "}", "METHOD_END"], "methodName": ["handle2"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   new   HttpEntityMethodProcessorMockTests . CustomHttpEntity (  )  ;", "}", "METHOD_END"], "methodName": ["handle2x"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return    4  2  ;", "}", "METHOD_END"], "methodName": ["handle3"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle4"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle5"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   etagValue    =     \"  \\  \" deadb 3  3 f 8 badf 0  0 d \\  \"  \"  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    etagValue )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["handleEtagWithHttp304"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < Resource >    returnValue    =    ResponseEntity . ok ( new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  )  ;", "servletRequest . addHeader (  \" Range \"  ,     \" illegal \"  )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( null )  )  )  . willReturn ( true )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  )  )  . willReturn ( true )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntityResource ,    mavContainer ,    webRequest )  ;", "then ( resourceRegionMessageConverter )  . should ( never (  )  )  . write ( anyCollection (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    any ( HttpOutputMessage . class )  )  ;", "assertEquals (  4  1  6  ,    servletResponse . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnTypeResourceIllegalByteRange"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    entityValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    existingValues    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( entityValues ,    existingValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueVaryHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "given ( stringHttpMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringHttpMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( true )  ;", "}", "METHOD_END"], "methodName": ["initStringMessageConversion"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "stringHttpMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( stringHttpMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "resourceMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( resourceMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "resourceRegionMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( resourceRegionMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "processor    =    new    ( Arrays . asList ( stringHttpMessageConverter ,    resourceMessageConverter ,    resourceRegionMessageConverter )  )  ;", "Method   handle 1     =    getClass (  )  . getMethod (  \" handle 1  \"  ,    HttpEntity . class ,    ResponseEntity . class ,    Integer . TYPE ,    RequestEntity . class )  ;", "paramHttpEntity    =    new   MethodParameter ( handle 1  ,     0  )  ;", "paramRequestEntity    =    new   MethodParameter ( handle 1  ,     3  )  ;", "paramResponseEntity    =    new   MethodParameter ( handle 1  ,     1  )  ;", "paramInt    =    new   MethodParameter ( handle 1  ,     2  )  ;", "returnTypeResponseEntity    =    new   MethodParameter ( handle 1  ,     (  -  1  )  )  ;", "returnTypeResponseEntityProduces    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 4  \"  )  ,     (  -  1  )  )  ;", "returnTypeHttpEntity    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 2  \"  ,    HttpEntity . class )  ,     (  -  1  )  )  ;", "returnTypeHttpEntitySubclass    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 2 x \"  ,    HttpEntity . class )  ,     (  -  1  )  )  ;", "returnTypeInt    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 3  \"  )  ,     (  -  1  )  )  ;", "returnTypeResponseEntityResource    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 5  \"  )  ,     (  -  1  )  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "servletRequest    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "servletResponse    =    new   MockHttpServletResponse (  )  ;", "webRequest    =    new   ServletWebRequest ( servletRequest ,    servletResponse )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < String >    returnValue    =    new   ResponseEntity (  \" Body \"  ,    HttpStatus . ACCEPTED )  ;", "servletRequest . addHeader (  \" Accept \"  ,     \"  0  1  \"  )  ;", "this . thrown . expect ( HttpMediaTypeNotAcceptableException . class )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["shouldFailHandlingWhenAcceptHeaderIllegal"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( body ,    HttpStatus . OK )  ;", "MediaType   accepted    =    MediaType . APPLICATION _ ATOM _ XML ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringHttpMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "this . thrown . expect ( HttpMediaTypeNotAcceptableException . class )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["shouldFailHandlingWhenContentTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( body ,    HttpStatus . OK )  ;", "MediaType   accepted    =    TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringHttpMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( false )  ;", "this . thrown . expect ( HttpMediaTypeNotAcceptableException . class )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntityProduces ,    mavContainer ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["shouldFailHandlingWhenConverterCannotWrite"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setMethod (  \" POST \"  )  ;", "servletRequest . setContent (  \" some   content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "this . thrown . expect ( HttpMediaTypeNotSupportedException . class )  ;", "processor . resolveArgument ( param ,    mavContainer ,    webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["shouldFailResolvingWhenContentTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   contentType    =    TEXT _ PLAIN ;", "servletRequest . setMethod (  \" POST \"  )  ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "given ( stringHttpMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( contentType )  )  ;", "given ( stringHttpMessageConverter . canRead ( String . class ,    contentType )  )  . willReturn ( false )  ;", "this . thrown . expect ( HttpMediaTypeNotSupportedException . class )  ;", "processor . resolveArgument ( param ,    mavContainer ,    webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["shouldFailResolvingWhenConverterCannotRead"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "long   currentTime    =    new   Date (  )  . getTime (  )  ;", "long   oneMinuteAgo    =    currentTime    -     (  1  0  0  0     *     6  0  )  ;", "String   etagValue    =     \"  \\  \" deadb 3  3 f 8 badf 0  0 d \\  \"  \"  ;", "String   changedEtagValue    =     \"  \\  \" changed - etag - value \\  \"  \"  ;", "ZonedDateTime   dateTime    =    Instant . ofEpochMilli ( currentTime )  . atZone (  . GMT )  ;", "servletRequest . addHeader ( IF _ MODIFIED _ SINCE ,    DateTimeFormatter . RFC _  1  1  2  3  _ DATE _ TIME . format ( dateTime )  )  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    etagValue )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( changedEtagValue )  . lastModified ( oneMinuteAgo )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,    null ,    changedEtagValue ,    oneMinuteAgo )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleChangedETagAndLastModified"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   wildcardValue    =     \"  *  \"  ;", "String   etagValue    =     \"  \\  \" some - etag \\  \"  \"  ;", "servletRequest . setMethod (  \" POST \"  )  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    wildcardValue )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,     \" body \"  ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleConditionalRequestIfNoneMatchWildcard"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "long   currentTime    =    new   Date (  )  . getTime (  )  ;", "long   oneMinuteAgo    =    currentTime    -     (  1  0  0  0     *     6  0  )  ;", "String   etagValue    =     \"  \\  \" deadb 3  3 f 8 badf 0  0 d \\  \"  \"  ;", "ZonedDateTime   dateTime    =    Instant . ofEpochMilli ( currentTime )  . atZone (  . GMT )  ;", "servletRequest . addHeader ( IF _ MODIFIED _ SINCE ,    DateTimeFormatter . RFC _  1  1  2  3  _ DATE _ TIME . format ( dateTime )  )  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    etagValue )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . lastModified ( oneMinuteAgo )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    etagValue ,    oneMinuteAgo )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleETagAndLastModifiedWithHttp304"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   wildcardValue    =     \"  *  \"  ;", "String   etagValue    =     \"  \\  \" some - etag \\  \"  \"  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    wildcardValue )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,     \" body \"  ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleGetIfNoneMatchWildcard"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   etagValue    =     \"  \\  \" some - etag \\  \"  \"  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    etagValue )  ;", "servletRequest . addHeader ( IF _ MATCH ,     \" ifmatch \"  )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleIfNoneMatchIfMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   etagValue    =     \"  \\  \" some - etag \\  \"  \"  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,    etagValue )  ;", "ZonedDateTime   dateTime    =    Instant . ofEpochMilli ( new   Date (  )  . getTime (  )  )  . atZone (  . GMT )  ;", "servletRequest . addHeader ( IF _ UNMODIFIED _ SINCE ,    DateTimeFormatter . RFC _  1  1  2  3  _ DATE _ TIME . format ( dateTime )  )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleIfNoneMatchIfUnmodifiedSince"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   etagValue    =     \"  \\  \" deadb 3  3 f 8 badf 0  0 d \\  \"  \"  ;", "servletRequest . addHeader ( IF _ NONE _ MATCH ,     \" unquoted \"  )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . eTag ( etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,     \" body \"  ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleInvalidIfNoneMatchWithHttp200"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "long   currentTime    =    new   Date (  )  . getTime (  )  ;", "long   oneMinuteAgo    =    currentTime    -     (  1  0  0  0     *     6  0  )  ;", "ZonedDateTime   dateTime    =    Instant . ofEpochMilli ( currentTime )  . atZone (  . GMT )  ;", "servletRequest . addHeader ( IF _ MODIFIED _ SINCE ,    DateTimeFormatter . RFC _  1  1  2  3  _ DATE _ TIME . format ( dateTime )  )  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . lastModified ( oneMinuteAgo )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    null ,    oneMinuteAgo )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleLastModifiedWithHttp304"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "long   currentTime    =    new   Date (  )  . getTime (  )  ;", "long   oneMinuteAgo    =    currentTime    -     (  1  0  0  0     *     6  0  )  ;", "String   etagValue    =     \"  \\  \" deadb 3  3 f 8 badf 0  0 d \\  \"  \"  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . status ( NOT _ MODIFIED )  . eTag ( etagValue )  . lastModified ( oneMinuteAgo )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( NOT _ MODIFIED ,    null ,    etagValue ,    oneMinuteAgo )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleNotModifiedResponse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < Resource >    returnValue    =    ResponseEntity . ok ( new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  )  ;", "given ( resourceMessageConverter . canWrite ( ByteArrayResource . class ,    null )  )  . willReturn ( true )  ;", "given ( resourceMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "given ( resourceMessageConverter . canWrite ( ByteArrayResource . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( true )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntityResource ,    mavContainer ,    webRequest )  ;", "then ( resourceMessageConverter )  . should ( times (  1  )  )  . write ( any ( ByteArrayResource . class )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    any ( HttpOutputMessage . class )  )  ;", "assertEquals (  2  0  0  ,    servletResponse . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleResource"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < Resource >    returnValue    =    ResponseEntity . ok ( new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  )  ;", "servletRequest . addHeader (  \" Range \"  ,     \" bytes =  0  -  5  \"  )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( null )  )  )  . willReturn ( true )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  )  )  . willReturn ( true )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntityResource ,    mavContainer ,    webRequest )  ;", "then ( resourceRegionMessageConverter )  . should ( times (  1  )  )  . write ( anyCollection (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    argThat (  (    outputMessage )     -  >     ( outputMessage . getHeaders (  )  . getFirst ( HttpHeaders . ACCEPT _ RANGES )  )     =  =     \" bytes \"  )  )  ;", "assertEquals (  2  0  6  ,    servletResponse . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleResourceByteRange"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "HttpHeaders   responseHeaders    =    new   HttpHeaders (  )  ;", "responseHeaders . set (  \" header \"  ,     \" headerValue \"  )  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity (  \" body \"  ,    responseHeaders ,    HttpStatus . ACCEPTED )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "ArgumentCaptor < HttpOutputMessage >    outputMessage    =    ArgumentCaptor . forClass ( HttpOutputMessage . class )  ;", "verify ( stringHttpMessageConverter )  . write ( eq (  \" body \"  )  ,    eq ( TEXT _ PLAIN )  ,    outputMessage . capture (  )  )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "assertEquals (  \" headerValue \"  ,    outputMessage . getValue (  )  . getHeaders (  )  . get (  \" header \"  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleResponseHeaderAndBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "HttpHeaders   headers    =    new   HttpHeaders (  )  ;", "headers . set (  \" headerName \"  ,     \" headerValue \"  )  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( headers ,    HttpStatus . ACCEPTED )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "assertEquals (  \" headerValue \"  ,    servletResponse . getHeader (  \" headerName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleResponseHeaderNoBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( body ,    HttpStatus . OK )  ;", "MediaType   accepted    =    TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "initStringMessageConversion ( accepted )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "verify ( stringHttpMessageConverter )  . write ( eq ( body )  ,    eq ( accepted )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( body ,    HttpStatus . OK )  ;", "servletRequest . addHeader (  \" Accept \"  ,     \" text /  *  \"  )  ;", "servletRequest . setAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    Collections . singleton ( TEXT _ HTML )  )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    TEXT _ HTML )  )  . willReturn ( true )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntityProduces ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "verify ( stringHttpMessageConverter )  . write ( eq ( body )  ,    eq ( TEXT _ HTML )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleReturnValueWithProducibleMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . addHeader (  \" Accept \"  ,     \" text /  *  \"  )  ;", "servletRequest . setAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    Collections . singleton ( TEXT _ HTML )  )  ;", "ResponseEntity < String >    returnValue    =    new   ResponseEntity ( HttpStatus . OK )  ;", "ResponseBodyAdvice < String >    advice    =    mock ( ResponseBodyAdvice . class )  ;", "given ( advice . supports ( any (  )  ,    any (  )  )  )  . willReturn ( true )  ;", "given ( advice . beforeBodyWrite ( any (  )  ,    any (  )  ,    any (  )  ,    any (  )  ,    any (  )  ,    any (  )  )  )  . willReturn (  \" Foo \"  )  ;", "processor    =    new    ( Collections . singletonList ( stringHttpMessageConverter )  ,    null ,    Collections . singletonList ( advice )  )  ;", "reset ( stringHttpMessageConverter )  ;", "given ( stringHttpMessageConverter . canWrite ( String . class ,    TEXT _ HTML )  )  . willReturn ( true )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "verify ( stringHttpMessageConverter )  . write ( eq (  \" Foo \"  )  ,    eq ( TEXT _ HTML )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleReturnValueWithResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setMethod (  \" PUT \"  )  ;", "String   etagValue    =     \"  \\  \" some - etag \\  \"  \"  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . header ( ETAG ,    etagValue )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,     \" body \"  ,    etagValue ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleValidatorHeadersInPutResponses"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setMethod (  \" PUT \"  )  ;", "ZonedDateTime   dateTime    =    Instant . ofEpochMilli ( new   Date (  )  . getTime (  )  )  . atZone (  . GMT )  ;", "servletRequest . addHeader ( IF _ UNMODIFIED _ SINCE ,    DateTimeFormatter . RFC _  1  1  2  3  _ DATE _ TIME . format ( dateTime )  )  ;", "long   justModified    =     ( dateTime . plus (  1  ,    ChronoUnit . SECONDS )  . toEpochSecond (  )  )     *     1  0  0  0  ;", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . lastModified ( justModified )  . body (  \" body \"  )  ;", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertConditionalResponse ( OK ,    null ,    null ,    justModified )  ;", "}", "METHOD_END"], "methodName": ["shouldNotFailPreconditionForPutRequests"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "MediaType   contentType    =    TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "servletRequest . setContent ( body . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( stringHttpMessageConverter . canRead ( String . class ,    contentType )  )  . willReturn ( true )  ;", "given ( stringHttpMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( body )  ;", "Object   result    =    processor . resolveArgument ( param ,    mavContainer ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof    )  )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "assertEquals (  \" Invalid   argument \"  ,    body ,     (  (  <  ?  >  )     ( result )  )  . getBody (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldResolveHttpEntityArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "MediaType   contentType    =    TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "servletRequest . setMethod (  \" GET \"  )  ;", "servletRequest . setServerName (  \" www . example . com \"  )  ;", "servletRequest . setServerPort (  8  0  )  ;", "servletRequest . setRequestURI (  \"  / path \"  )  ;", "servletRequest . setContent ( body . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( stringHttpMessageConverter . canRead ( String . class ,    contentType )  )  . willReturn ( true )  ;", "given ( stringHttpMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( body )  ;", "Object   result    =    p . resolveArgument ( paramRequestEntity ,    mavContainer ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof   RequestEntity )  )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "RequestEntity <  ?  >    requestEntity    =     (  ( RequestEntity <  ?  >  )     ( result )  )  ;", "assertEquals (  \" Invalid   method \"  ,    GET ,    requestEntity . getMethod (  )  )  ;", "URI   uri    =    new   URI (  \" http \"  ,    null ,     \" www . example . com \"  ,     (  -  1  )  ,     \"  / path \"  ,    null ,    null )  ;", "assertEquals (  \" Invalid   url \"  ,    uri ,    requestEntity . getUrl (  )  )  ;", "assertEquals (  \" Invalid   argument \"  ,    body ,    requestEntity . getBody (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldResolveRequestEntityArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" HttpEntity   parameter   not   supported \"  ,    processor . supportsParameter ( paramHttpEntity )  )  ;", "assertTrue (  \" RequestEntity   parameter   not   supported \"  ,    processor . supportsParameter ( paramRequestEntity )  )  ;", "assertFalse (  \" ResponseEntity   parameter   supported \"  ,    processor . supportsParameter ( paramResponseEntity )  )  ;", "assertFalse (  \" non - entity   parameter   supported \"  ,    processor . supportsParameter ( paramInt )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" ResponseEntity   return   type   not   supported \"  ,    processor . supportsReturnType ( returnTypeResponseEntity )  )  ;", "assertTrue (  \"    return   type   not   supported \"  ,    processor . supportsReturnType ( returnType )  )  ;", "assertTrue (  \" Custom      subclass   not   supported \"  ,    processor . supportsReturnType ( returnTypeSubclass )  )  ;", "assertFalse (  \" RequestEntity   parameter   supported \"  ,    processor . supportsReturnType ( paramRequestEntity )  )  ;", "assertFalse (  \" non - ResponseBody   return   type   supported \"  ,    processor . supportsReturnType ( returnTypeInt )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < String >    returnValue    =    ResponseEntity . ok (  )  . varyBy ( entityValues )  . body (  \" Foo \"  )  ;", "for    ( String   value    :    existingValues )     {", "servletResponse . addHeader (  \" Vary \"  ,    value )  ;", "}", "initStringMessageConversion ( TEXT _ PLAIN )  ;", "p . handleReturnValue ( returnValue ,    returnTypeResponseEntity ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "assertEquals ( Arrays . asList ( expected )  ,    servletResponse . getHeaders (  \" Vary \"  )  )  ;", "verify ( stringHttpMessageConverter )  . write ( eq (  \" Foo \"  )  ,    eq ( TEXT _ PLAIN )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["testVaryHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    entityValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    existingValues    =    new   String [  ]  {        }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Language ,    User - Agent \"     }  ;", "testVaryHeader ( entityValues ,    existingValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    entityValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    existingValues    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( entityValues ,    existingValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingCommaSeparatedValues"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    entityValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    existingValues    =    new   String [  ]  {     \" Accept - Encoding \"  ,     \" Accept - Language \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Encoding \"  ,     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( entityValues ,    existingValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingCommaValues"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    entityValues    =    new   String [  ]  {     \" Accept - Language \"     }  ;", "String [  ]    existingValues    =    new   String [  ]  {     \"  *  \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \"  *  \"     }  ;", "testVaryHeader ( entityValues ,    existingValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingWildcard"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" handle \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "ResponseEntity < StringBuilder >    returnValue    =    ResponseEntity . ok ( new   StringBuilder (  \" Foo \"  )  )  ;", "processor    =    new    ( converters )  ;", "processor . handleReturnValue ( returnValue ,    returnType ,    mavContainer ,    webRequest )  ;", "assertEquals (  \" text / plain ; charset = ISO -  8  8  5  9  -  1  \"  ,    servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  \" Foo \"  ,    servletResponse . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueCharSequence"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    HttpEntityMethodProcessorTests . JacksonController . class . getMethod (  \" handleList \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   HttpEntityMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters )  ;", "Object   returnValue    =    new   HttpEntityMethodProcessorTests . JacksonController (  )  . handleList (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . mavContainer ,    this . webRequest )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertTrue ( content . contains (  \"  \\  \" type \\  \"  :  \\  \" foo \\  \"  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" type \\  \"  :  \\  \" bar \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonTypeInfoList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType (  \" application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpEntity <  . SimpleBean >    result    =     (  ( HttpEntity <  . SimpleBean >  )     ( processor . resolveArgument ( paramSimpleBean ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getBody (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    HttpEntityMethodProcessorTests . MySimpleParameterizedController . class . getMethod (  \" handleDto \"  ,    HttpEntity . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   HttpEntityMethodProcessorTests . MySimpleParameterizedController (  )  ,    method )  ;", "MethodParameter   methodParam    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "String   content    =     \"  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpEntity < HttpEntityMethodProcessorTests . SimpleBean >    result    =     (  ( HttpEntity < HttpEntityMethodProcessorTests . SimpleBean >  )     ( processor . resolveArgument ( methodParam ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getBody (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentTypeVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContent ( new   byte [  0  ]  )  ;", "this . servletRequest . setContentType (  \" application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "HttpEntity <  ?  >    result    =     (  ( HttpEntity <  ?  >  )     ( processor . resolveArgument ( this . paramSimpleBean ,    this . mavContainer ,    this . webRequest ,    this . binderFactory )  )  )  ;", "assertNotNull ( result )  ;", "assertNull ( result . getBody (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentWithEmptyBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  [  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  ,     {  \\  \" name \\  \"     :     \\  \" Robert \\  \"  }  ]  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType (  \" application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpEntity < List <  . SimpleBean >  >    result    =     (  ( HttpEntity < List <  . SimpleBean >  >  )     ( processor . resolveArgument ( paramList ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getBody (  )  . get (  0  )  . getName (  )  )  ;", "assertEquals (  \" Robert \"  ,    result . getBody (  )  . get (  1  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveGenericArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" handle \"  ,    HttpEntity . class ,    HttpEntity . class )  ;", "paramList    =    new   MethodParameter ( method ,     0  )  ;", "paramSimpleBean    =    new   MethodParameter ( method ,     1  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "binderFactory    =    new    . ValidatingBinderFactory (  )  ;", "servletRequest    =    new   MockHttpServletRequest (  )  ;", "servletResponse    =    new   MockHttpServletResponse (  )  ;", "servletRequest . setMethod (  \" POST \"  )  ;", "webRequest    =    new   ServletWebRequest ( servletRequest ,    servletResponse )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( MultiValueMap . class . isAssignableFrom ( parameter . getParameterType (  )  )  )  )     {", "ResolvableType [  ]    genericTypes    =    ResolvableType . forParameter ( parameter )  . getGenerics (  )  ;", "if    (  ( genericTypes . length )     =  =     2  )     {", "Class <  ?  >    declaredClass    =    genericTypes [  1  ]  . getRawClass (  )  ;", "return    ( declaredClass    =  =    null )     |  |     (  !  ( List . class . isAssignableFrom ( declaredClass )  )  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSingleValueMap"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMapMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MultiValueMap < String ,    String >  >    matrixVariables    =     (  ( Map < String ,    MultiValueMap < String ,    String >  >  )     ( this . request . getAttribute ( HandlerMapping . MATRIX _ VARIABLES _ ATTRIBUTE )  )  )  ;", "MultiValueMap < String ,    String >    params    =    new   util . LinkedMultiValueMap (  )  ;", "matrixVariables . put ( pathVarName ,    params )  ;", "return   params ;", "}", "METHOD_END"], "methodName": ["getVariablesFor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params    =    getVariablesFor (  \" cars \"  )  ;", "params . add (  \" colors \"  ,     \" red \"  )  ;", "params . add (  \" colors \"  ,     \" green \"  )  ;", "params . add (  \" colors \"  ,     \" blue \"  )  ;", "params . add (  \" year \"  ,     \"  2  0  1  2  \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( Map . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    String >    map    =     (  ( Map < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals (  \" red \"  ,    map . get (  \" colors \"  )  )  ;", "param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noPathVar (  )  )  . arg ( MultiValueMap . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "MultiValueMap < String ,    String >    multivalueMap    =     (  ( MultiValueMap < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals ( Arrays . asList (  \" red \"  ,     \" green \"  ,     \" blue \"  )  ,    multivalueMap . get (  \" colors \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params 2     =    getVariablesFor (  \" planes \"  )  ;", "params 2  . add (  \" colors \"  ,     \" yellow \"  )  ;", "params 2  . add (  \" colors \"  ,     \" orange \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . pathVar (  \" cars \"  )  )  . arg ( MultiValueMap . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    String >    map    =     (  ( Map < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals ( Collections . emptyMap (  )  ,    map )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNoMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    this . testMethod . annot ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( Map . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    String >    map    =     (  ( Map < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals ( Collections . emptyMap (  )  ,    map )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNoParams"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params 1     =    getVariablesFor (  \" cars \"  )  ;", "params 1  . add (  \" colors \"  ,     \" red \"  )  ;", "params 1  . add (  \" colors \"  ,     \" purple \"  )  ;", "MultiValueMap < String ,    String >    params 2     =    getVariablesFor (  \" planes \"  )  ;", "params 2  . add (  \" colors \"  ,     \" yellow \"  )  ;", "params 2  . add (  \" colors \"  ,     \" orange \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . pathVar (  \" cars \"  )  )  . arg ( MultiValueMap . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    String >    mapForPathVar    =     (  ( Map < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals ( Arrays . asList (  \" red \"  ,     \" purple \"  )  ,    mapForPathVar . get (  \" colors \"  )  )  ;", "param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( Map . class ,    String . class ,    String . class )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    String >    mapAll    =     (  ( Map < String ,    String >  )     ( this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  )  ;", "assertEquals (  \" red \"  ,    mapAll . get (  \" colors \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver    =    new   MatrixVariableMapMethodArgumentResolver (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . webRequest    =    new   ServletWebRequest ( request ,    new   MockHttpServletResponse (  )  )  ;", "Map < String ,    MultiValueMap < String ,    String >  >    params    =    new   LinkedHashMap <  >  (  )  ;", "this . request . setAttribute ( HandlerMapping . MATRIX _ VARIABLES _ ATTRIBUTE ,    params )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . resolver . supportsParameter ( this . testMethod . arg ( String . class )  )  )  ;", "assertTrue ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( Map . class ,    String . class ,    String . class )  )  )  ;", "assertTrue ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noPathVar (  )  )  . arg ( MultiValueMap . class ,    String . class ,    String . class )  )  )  ;", "assertTrue ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . pathVar (  \" cars \"  )  )  . arg ( MultiValueMap . class ,    String . class ,    String . class )  )  )  ;", "assertFalse ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . name (  \" name \"  )  )  . arg ( Map . class ,    String . class ,    String . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MultiValueMap < String ,    String >  >    matrixVariables    =     (  ( Map < String ,    MultiValueMap < String ,    String >  >  )     ( this . request . getAttribute ( HandlerMapping . MATRIX _ VARIABLES _ ATTRIBUTE )  )  )  ;", "MultiValueMap < String ,    String >    params    =    new   util . LinkedMultiValueMap (  )  ;", "matrixVariables . put ( pathVarName ,    params )  ;", "return   params ;", "}", "METHOD_END"], "methodName": ["getVariablesFor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params    =    getVariablesFor (  \" cars \"  )  ;", "params . add (  \" colors \"  ,     \" red \"  )  ;", "params . add (  \" colors \"  ,     \" green \"  )  ;", "params . add (  \" colors \"  ,     \" blue \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( List . class ,    String . class )  ;", "assertEquals ( Arrays . asList (  \" red \"  ,     \" green \"  ,     \" blue \"  )  ,    this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    this . testMethod . annot ( MvcAnnotationPredicates . matrixAttribute (  )  . name (  \" year \"  )  )  . arg ( int . class )  ;", "assertEquals (  \"  2  0  1  3  \"  ,    resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentDefaultValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "getVariablesFor (  \" var 1  \"  )  . add (  \" colors \"  ,     \" red \"  )  ;", "getVariablesFor (  \" var 2  \"  )  . add (  \" colors \"  ,     \" green \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( List . class ,    String . class )  ;", "this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentMultipleMatches"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    String >    params    =    getVariablesFor (  \" cars \"  )  ;", "params . add (  \" anotherYear \"  ,     \"  2  0  1  2  \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . name (  \" year \"  )  )  . arg ( int . class )  ;", "assertEquals (  \"  2  0  1  3  \"  ,    this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNoMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "getVariablesFor (  \" cars \"  )  . add (  \" year \"  ,     \"  2  0  0  6  \"  )  ;", "getVariablesFor (  \" bikes \"  )  . add (  \" year \"  ,     \"  2  0  0  5  \"  )  ;", "MethodParameter   param    =    this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . name (  \" year \"  )  )  . arg ( int . class )  ;", "assertEquals (  \"  2  0  0  6  \"  ,    this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   param    =    this . testMethod . annot ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( List . class ,    String . class )  ;", "this . resolver . resolveArgument ( param ,    this . mavContainer ,    this . webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver    =    new   MatrixVariableMethodArgumentResolver (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . webRequest    =    new   context . request . ServletWebRequest ( request ,    new   MockHttpServletResponse (  )  )  ;", "Map < String ,    MultiValueMap < String ,    String >  >    params    =    new   LinkedHashMap <  >  (  )  ;", "this . request . setAttribute ( HandlerMapping . MATRIX _ VARIABLES _ ATTRIBUTE ,    params )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . resolver . supportsParameter ( this . testMethod . arg ( String . class )  )  )  ;", "assertTrue ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . noName (  )  )  . arg ( List . class ,    String . class )  )  )  ;", "assertTrue ( this . resolver . supportsParameter ( this . testM ( MvcAnnotationPredicates . matrixAttribute (  )  . name (  \" year \"  )  )  . arg ( int . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MatrixVariablesMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   this . redirectPatterns ;", "}", "METHOD_END"], "methodName": ["getRedirectPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "return    ( PatternMatchUtils . simpleMatch ( this . redirectPatterns ,    viewName )  )     |  |     ( viewName . startsWith (  \" redirect :  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isRedirectViewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "this . redirectPatterns    =    redirectPatterns ;", "}", "METHOD_END"], "methodName": ["setRedirectPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getDeclaredMethod ( methodName )  ;", "return   new   MethodParameter ( method ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["getReturnValueParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "handler . handleReturnValue ( null ,    returnParamModelAndView ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleNull"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectAttributesModelMap   redirectAttributes    =    new   RedirectAttributesModelMap (  )  ;", "mavContainer . setRedirectModel ( redirectAttributes )  ;", "mav    =    new    (  \" myRedirect : viewName \"  ,     \" attrName \"  ,     \" attrValue \"  )  ;", "handler . setRedirectPatterns (  \" myRedirect :  *  \"  )  ;", "handler . handleReturnValue ( mav ,    returnParam ,    mavContainer ,    webRequest )  ;", "ModelMap   model    =    mavContainer . getModel (  )  ;", "assertEquals (  \" myRedirect : viewName \"  ,    mavContainer . getViewName (  )  )  ;", "assertEquals (  \" attrValue \"  ,    model . get (  \" attrName \"  )  )  ;", "assertSame ( redirectAttributes ,    model )  ;", "}", "METHOD_END"], "methodName": ["handleRedirectAttributesWithCustomPrefix"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectAttributesModelMap   redirectAttributes    =    new   RedirectAttributesModelMap (  )  ;", "mavContainer . setRedirectModel ( redirectAttributes )  ;", "mav    =    new    (  \" redirect : viewName \"  ,     \" attrName \"  ,     \" attrValue \"  )  ;", "handler . handleReturnValue ( mav ,    returnParam ,    mavContainer ,    webRequest )  ;", "ModelMap   model    =    mavContainer . getModel (  )  ;", "assertEquals (  \" redirect : viewName \"  ,    mavContainer . getViewName (  )  )  ;", "assertEquals (  \" attrValue \"  ,    model . get (  \" attrName \"  )  )  ;", "assertSame ( redirectAttributes ,    model )  ;", "}", "METHOD_END"], "methodName": ["handleRedirectAttributesWithViewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectAttributesModelMap   redirectAttributes    =    new   RedirectAttributesModelMap (  )  ;", "mavContainer . setRedirectModel ( redirectAttributes )  ;", "mav    =    new    ( new   RedirectView (  )  ,     \" attrName \"  ,     \" attrValue \"  )  ;", "handler . handleReturnValue ( mav ,    returnParam ,    mavContainer ,    webRequest )  ;", "assertEquals ( RedirectView . class ,    mavContainer . getView (  )  . getClass (  )  )  ;", "assertEquals (  \" attrValue \"  ,    mavContainer . getModel (  )  . get (  \" attrName \"  )  )  ;", "assertSame (  \" RedirectAttributes   should   be   used   if   controller   redirects \"  ,    redirectAttributes ,    mavContainer . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRedirectAttributesWithViewReference"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectAttributesModelMap   redirectAttributes    =    new   RedirectAttributesModelMap (  )  ;", "mavContainer . setRedirectModel ( redirectAttributes )  ;", "mav    =    new    (  )  ;", "handler . handleReturnValue ( mav ,    returnParam ,    mavContainer ,    webRequest )  ;", "ModelMap   model    =    mavContainer . getModel (  )  ;", "assertEquals ( null ,    mavContainer . getView (  )  )  ;", "assertTrue ( mavContainer . getModel (  )  . isEmpty (  )  )  ;", "assertNotSame (  \" RedirectAttributes   should   not   be   used   if   controller   doesn ' t   redirect \"  ,    redirectAttributes ,    model )  ;", "}", "METHOD_END"], "methodName": ["handleRedirectAttributesWithoutRedirect"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "mavContainer . setIgnoreDefaultModelOnRedirect ( true )  ;", "RedirectView   redirectView    =    new   RedirectView (  )  ;", "mav    =    new    ( redirectView ,     \" name \"  ,     \" value \"  )  ;", "handler . handleReturnValue ( mav ,    returnParam ,    mavContainer ,    webRequest )  ;", "ModelMap   model    =    mavContainer . getModel (  )  ;", "assertSame ( redirectView ,    mavContainer . getView (  )  )  ;", "assertEquals (  1  ,    model . size (  )  )  ;", "assertEquals (  \" value \"  ,    model . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRedirectWithIgnoreDefaultModel"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   mav    =    new   ModelAndView ( new   RedirectView (  )  ,     \" attrName \"  ,     \" attrValue \"  )  ;", "handler . handleReturnValue ( mav ,    returnParamModelAndView ,    mavContainer ,    webRequest )  ;", "assertEquals ( RedirectView . class ,    mavContainer . getView (  )  . getClass (  )  )  ;", "assertEquals (  \" attrValue \"  ,    mavContainer . getModel (  )  . get (  \" attrName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleViewInstance"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   mav    =    new   ModelAndView (  \" viewName \"  ,     \" attrName \"  ,     \" attrValue \"  )  ;", "handler . handleReturnValue ( mav ,    returnParamModelAndView ,    mavContainer ,    webRequest )  ;", "assertEquals (  \" viewName \"  ,    mavContainer . getView (  )  )  ;", "assertEquals (  \" attrValue \"  ,    mavContainer . getModel (  )  . get (  \" attrName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleViewReference"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["modelAndView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   ModelAndViewMethodReturnValueHandler (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "this . returnParamModelAndView    =    getReturnValueParam (  \" modelAndView \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( handler . supportsReturnType ( returnParamModelAndView )  )  ;", "assertFalse ( handler . supportsReturnType ( getReturnValueParam (  \" viewName \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["viewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" testBeanReturnValue \"  )  ,     (  -  1  )  )  ;", "handler . handleReturnValue ( new   TestBean (  )  ,    returnType ,    mavContainer ,    request )  ;", "assertTrue ( mavContainer . containsAttribute (  \" testBean \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleNonSimpleType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" testBeanReturnValue \"  )  ,     (  -  1  )  )  ;", "handler . handleReturnValue ( null ,    returnType ,    mavContainer ,    request )  ;", "assertNull ( mavContainer . getView (  )  )  ;", "assertNull ( mavContainer . getViewName (  )  )  ;", "assertTrue ( mavContainer . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleNull"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" intReturnValue \"  )  ,     (  -  1  )  )  ;", "handler . handleReturnValue (  5  5  ,    returnType ,    mavContainer ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleSimpleType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["intReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" testBeanReturnValue \"  )  ,     (  -  1  )  )  ;", "mavResolvers . add ( new    . TestModelAndViewResolver ( TestBean . class )  )  ;", "TestBean   testBean    =    new   TestBean (  \" name \"  )  ;", "handler . handleReturnValue ( testBean ,    returnType ,    mavContainer ,    request )  ;", "assertEquals (  \" viewName \"  ,    mavContainer . getViewName (  )  )  ;", "assertSame ( testBean ,    mavContainer . getModel (  )  . get (  \" modelAttrName \"  )  )  ;", "assertFalse ( mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAndViewResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" intReturnValue \"  )  ,     (  -  1  )  )  ;", "mavResolvers . add ( new    . TestModelAndViewResolver ( TestBean . class )  )  ;", "handler . handleReturnValue (  9  9  ,    returnType ,    mavContainer ,    request )  ;", "}", "METHOD_END"], "methodName": ["modelAndViewResolverUnresolved"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "mavResolvers    =    new   ArrayList <  >  (  )  ;", "handler    =    new    ( mavResolvers )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "request    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["testBeanReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolverMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "CompositeUriComponentsContributor   contributor    =    MvcUriComponentsBuilder . getConfiguredUriComponentsContributor (  )  ;", "if    ( contributor    =  =    null )     {", "MvcUriComponentsBuilder . logger . debug (  \" Using   default   CompositeUriComponentsContributor \"  )  ;", "contributor    =    MvcUriComponentsBuilder . defaultUriComponentsContributor ;", "}", "int   paramCount    =    method . getParameterCount (  )  ;", "int   argCount    =    args . length ;", "if    ( paramCount    !  =    argCount )     {", "throw   new   IllegalArgumentException (  (  (  (  \" Number   of   method   parameters    \"     +    paramCount )     +     \"    does   not   match   number   of   argument   values    \"  )     +    argCount )  )  ;", "}", "final   Map < String ,    Object >    uriVars    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <    paramCount ;    i +  +  )     {", "MethodParameter   param    =    new   SynthesizingMethodParameter ( method ,    i )  ;", "param . initParameterNameDiscovery ( MvcUriComponentsBuilder . parameterNameDiscoverer )  ;", "contributor . contributeMethodArgument ( param ,    args [ i ]  ,    builder ,    uriVars )  ;", "}", "return   builder . build (  )  . expand (  (    name )     -  >    uriVars . getOrDefault ( name ,    UriComponents . UriTemplateVariables . SKIP _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["applyContributors"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( controllerType ,     \"  ' controllerType '    must   not   be   null \"  )  ;", "return    . initProxy ( controllerType ,    new    . ControllerMethodInvocationInterceptor ( controllerType )  )  ;", "}", "METHOD_END"], "methodName": ["controller"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromController ( null ,    controllerType )  ;", "}", "METHOD_END"], "methodName": ["fromController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "builder    =    MvcUriComponentsBuilder . getBaseUrlToUse ( builder )  ;", "String   mapping    =    MvcUriComponentsBuilder . getTypeRequestMapping ( controllerType )  ;", "return   builder . path ( mapping )  ;", "}", "METHOD_END"], "methodName": ["fromController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMappingName ( null ,    mappingName )  ;", "}", "METHOD_END"], "methodName": ["fromMappingName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfoHandlerMapping   handlerMapping    =    MvcUriComponentsBuilder . getRequestMappingInfoHandlerMapping (  )  ;", "List < HandlerMethod >    handlerMethods    =    handlerMapping . getHandlerMethodsForMappingName ( name )  ;", "if    ( handlerMethods    =  =    null )     {", "throw   new   IllegalArgumentException (  (  \" Mapping   mappingName   not   found :     \"     +    name )  )  ;", "}", "if    (  ( handlerMethods . size (  )  )     !  =     1  )     {", "throw   new   IllegalArgumentException (  (  (  (  \" No   unique   match   for   mapping   mappingName    \"     +    name )     +     \"  :     \"  )     +    handlerMethods )  )  ;", "}", "HandlerMethod   handlerMethod    =    handlerMethods . get (  0  )  ;", "Class <  ?  >    controllerType    =    handlerMethod . getBeanType (  )  ;", "Method   method    =    handlerMethod . getMethod (  )  ;", "return   new   MvcUriComponentsBuilder . MethodArgumentBuilder ( builder ,    controllerType ,    method )  ;", "}", "METHOD_END"], "methodName": ["fromMappingName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMethodInternal ( null ,    controllerType ,    method ,    args )  ;", "}", "METHOD_END"], "methodName": ["fromMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMethodInternal ( baseUrl ,     ( controllerType    !  =    null    ?    controllerType    :    method . getDeclaringClass (  )  )  ,    method ,    args )  ;", "}", "METHOD_END"], "methodName": ["fromMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . isInstanceOf ( MvcUriComponentsBuilder . MethodInvocationInfo . class ,    info ,     \" MethodInvocationInfo   required \"  )  ;", "MvcUriComponentsBuilder . MethodInvocationInfo   invocationInfo    =     (  ( MvcUriComponentsBuilder . MethodInvocationInfo )     ( info )  )  ;", "Class <  ?  >    controllerType    =    invocationInfo . getControllerType (  )  ;", "Method   method    =    invocationInfo . getControllerMethod (  )  ;", "Object [  ]    arguments    =    invocationInfo . getArgumentValues (  )  ;", "return   MvcUriComponentsBuilder . fromMethodInternal ( null ,    controllerType ,    method ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . isInstanceOf ( MvcUriComponentsBuilder . MethodInvocationInfo . class ,    info ,     \" MethodInvocationInfo   required \"  )  ;", "MvcUriComponentsBuilder . MethodInvocationInfo   invocationInfo    =     (  ( MvcUriComponentsBuilder . MethodInvocationInfo )     ( info )  )  ;", "Class <  ?  >    controllerType    =    invocationInfo . getControllerType (  )  ;", "Method   method    =    invocationInfo . getControllerMethod (  )  ;", "Object [  ]    arguments    =    invocationInfo . getArgumentValues (  )  ;", "return   MvcUriComponentsBuilder . fromMethodInternal ( builder ,    controllerType ,    method ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "baseUrl    =    MvcUriComponentsBuilder . getBaseUrlToUse ( baseUrl )  ;", "String   typePath    =    MvcUriComponentsBuilder . getTypeRequestMapping ( controllerType )  ;", "String   methodPath    =    MvcUriComponentsBuilder . getMethodRequestMapping ( method )  ;", "String   path    =    MvcUriComponentsBuilder . pathMatcher . combine ( typePath ,    methodPath )  ;", "baseUrl . path ( path )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . applyContributors ( baseUrl ,    method ,    args )  ;", "return   UriComponentsBuilder . newInstance (  )  . uriComponents ( uriComponents )  ;", "}", "METHOD_END"], "methodName": ["fromMethodInternal"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    MvcUriComponentsBuilder . getMethod ( controllerType ,    methodName ,    args )  ;", "return   MvcUriComponentsBuilder . fromMethodInternal ( null ,    controllerType ,    method ,    args )  ;", "}", "METHOD_END"], "methodName": ["fromMethodName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    MvcUriComponentsBuilder . getMethod ( controllerType ,    methodName ,    args )  ;", "return   MvcUriComponentsBuilder . fromMethodInternal ( builder ,    controllerType ,    method ,    args )  ;", "}", "METHOD_END"], "methodName": ["fromMethodName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( baseUrl    !  =    null )     {", "return   baseUrl . cloneBuilder (  )  ;", "} else    {", "return   Servlet . fromCurrentServletMapping (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getBaseUrlToUse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    MvcUriComponentsBuilder . getWebApplicationContext (  )  ;", "if    ( wac    =  =    null )     {", "return   null ;", "}", "try    {", "return   wac . getBean ( MvcUriComponentsBuilder . MVC _ URI _ COMPONENTS _ CONTRIBUTOR _ BEAN _ NAME ,    CompositeUriComponentsContributor . class )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "if    ( MvcUriComponentsBuilder . logger . isDebugEnabled (  )  )     {", "MvcUriComponentsBuilder . logger . debug (  (  (  \" No   CompositeUriComponentsContributor   bean   with   name    '  \"     +     ( MvcUriComponentsBuilder . MVC _ URI _ COMPONENTS _ CONTRIBUTOR _ BEAN _ NAME )  )     +     \"  '  \"  )  )  ;", "}", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getConfiguredUriComponentsContributor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "MethodFilter   selector    =     (        -  >     {", "String   name    =    getName (  )  ;", "int   argLength    =    getParameterCount (  )  ;", "return    ( name . equals ( ame )  )     &  &     ( argLength    =  =    args . length )  ;", "}  ;", "Set < Method >        =    MethodIntrospector . selectMethods ( controllerType ,    selector )  ;", "if    (  (  . size (  )  )     =  =     1  )     {", "return    . iterator (  )  . next (  )  ;", "} else", "if    (  (  . size (  )  )     >     1  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Found   two      named    '  % s '    accepting   arguments    % s   in   controller    % s :     [  % s ]  \"  ,    ame ,    asList ( args )  ,    controllerType . getName (  )  ,     )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  (  (  (  \" No   named    '  \"     +    ame )     +     \"  '    with    \"  )     +     ( args . length )  )     +     \"    arguments   found   in   controller    \"  )     +     ( controllerType . getName (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( method ,     \"  ' method '    must   not   be   null \"  )  ;", "RequestMapping   requestMapping    =    AnnotatedElementUtils . findMergedAnnotation ( method ,    RequestMapping . class )  ;", "if    ( requestMapping    =  =    null )     {", "throw   new   IllegalArgumentException (  (  \" No    @ RequestMapping   on :     \"     +     ( method . toGenericString (  )  )  )  )  ;", "}", "String [  ]    paths    =    requestMapping . path (  )  ;", "if    (  ( ObjectUtils . isEmpty ( paths )  )     |  |     ( StringUtils . isEmpty ( paths [  0  ]  )  )  )     {", "return    \"  /  \"  ;", "}", "if    (  (  ( paths . length )     >     1  )     &  &     (  . logger . isWarnEnabled (  )  )  )     {", ". logger . warn (  (  (  \" Multiple   paths   on   method    \"     +     ( method . toGenericString (  )  )  )     +     \"  ,    using   first   one \"  )  )  ;", "}", "return   paths [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getMethodRequestMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    MvcUriComponentsBuilder . getWebApplicationContext (  )  ;", "Assert . notNull ( wac ,     \" Cannot   lookup   handler   method   mappings   without   WebApplicationContext \"  )  ;", "try    {", "return   wac . getBean ( RequestMappingInfoHandlerMapping . class )  ;", "}    catch    ( NoUniqueBeanDefinitionException   ex )     {", "throw   new   IllegalStateException (  \" More   than   one   RequestMappingInfoHandlerMapping   beans   found \"  ,    ex )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "throw   new   IllegalStateException (  \" No   RequestMappingInfoHandlerMapping   bean \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["getRequestMappingInfoHandlerMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( controllerType ,     \"  ' controllerType '    must   not   be   null \"  )  ;", "RequestMapping   requestMapping    =    AnnotatedElementUtils . findMergedAnnotation ( controllerType ,    RequestMapping . class )  ;", "if    ( requestMapping    =  =    null )     {", "return    \"  /  \"  ;", "}", "String [  ]    paths    =    requestMapping . path (  )  ;", "if    (  ( ObjectUtils . isEmpty ( paths )  )     |  |     ( StringUtils . isEmpty ( paths [  0  ]  )  )  )     {", "return    \"  /  \"  ;", "}", "if    (  (  ( paths . length )     >     1  )     &  &     (  . logger . isWarnEnabled (  )  )  )     {", ". logger . warn (  (  (  \" Multiple   paths   on   controller    \"     +     ( controllerType . getName (  )  )  )     +     \"  ,    using   first   one \"  )  )  ;", "}", "return   paths [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getTypeRequestMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "RequestAttributes   requestAttributes    =    RequestContextHolder . getRequestAttributes (  )  ;", "if    ( requestAttributes    =  =    null )     {", ". logger . debug (  \" No   request   bound   to   the   current   thread :    not   in   a   DispatcherServlet   request ?  \"  )  ;", "return   null ;", "}", "HttpServletRequest   request    =     (  ( ServletRequestAttributes )     ( requestAttributes )  )  . getRequest (  )  ;", "WebApplicationContext   wac    =     (  ( WebApplicationContext )     ( request . getAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  )  ;", "if    ( wac    =  =    null )     {", ". logger . debug (  \" No   WebApplicationContext   found :    not   in   a   DispatcherServlet   request ?  \"  )  ;", "return   null ;", "}", "return   wac ;", "}", "METHOD_END"], "methodName": ["getWebApplicationContext"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( Object . class )  )     {", "return    (  ( T )     ( interceptor )  )  ;", "} else", "if    ( type . isInterface (  )  )     {", "ProxyFactory   factory    =    new   ProxyFactory ( INSTANCE )  ;", "factory . addInterface ( type )  ;", "factory . addInterface (  . MethodInvocationInfo . class )  ;", "factory . addAdvice ( interceptor )  ;", "return    (  ( T )     ( factory . getProxy (  )  )  )  ;", "} else    {", "Enhancer   enhancer    =    new   Enhancer (  )  ;", "enhancer . setSuperclass ( type )  ;", "enhancer . setInterfaces ( new   Class <  ?  >  [  ]  {     . MethodInvocationInfo . class    }  )  ;", "enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE )  ;", "enhancer . setCallbackType ( class )  ;", "Class <  ?  >    proxyClass    =    enhancer . createClass (  )  ;", "Object   proxy    =    null ;", "if    (  . objenesis . isWorthTrying (  )  )     {", "try    {", "proxy    =     . objenesis . newInstance ( proxyClass ,    enhancer . getUseCache (  )  )  ;", "}    catch    ( ObjenesisException   ex )     {", ". logger . debug (  (  \" Unable   to   instantiate   controller   proxy   using   Objenesis ,     \"     +     \" falling   back   to   regular   construction \"  )  ,    ex )  ;", "}", "}", "if    ( proxy    =  =    null )     {", "try    {", "proxy    =    accessibleConstructor ( proxyClass )  . newInstance (  )  ;", "}    catch    ( Throwable   ex )     {", "throw   new   IllegalStateException (  (  \" Unable   to   instantiate   controller   proxy   using   Objenesis ,     \"     +     \" and   regular   controller   instantiation   via   default   constructor   fails   as   well \"  )  ,    ex )  ;", "}", "}", "(  ( Factory )     ( proxy )  )  . setCallbacks ( new   Callback [  ]  {    interceptor    }  )  ;", "return    (  ( T )     ( proxy )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initProxy"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . controller ( controllerType )  ;", "}", "METHOD_END"], "methodName": ["on"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   MvcUriComponentsBuilder ( baseUrl )  ;", "}", "METHOD_END"], "methodName": ["relativeTo"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromController ( this . baseUrl ,    controllerType )  ;", "}", "METHOD_END"], "methodName": ["withController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMappingName ( this . baseUrl ,    mappingName )  ;", "}", "METHOD_END"], "methodName": ["withMappingName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMethod ( this . baseUrl ,    controllerType ,    method ,    args )  ;", "}", "METHOD_END"], "methodName": ["withMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMethodCall ( this . baseUrl ,    invocationInfo )  ;", "}", "METHOD_END"], "methodName": ["withMethodCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   MvcUriComponentsBuilder . fromMethodName ( this . baseUrl ,    controllerType ,    methodName ,    args )  ;", "}", "METHOD_END"], "methodName": ["withMethodName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( MvcUriComponentsBuilderTests . UnmappedController . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost /  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerNotMapped"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( MvcUriComponentsBuilderTests . PersonControllerImpl . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    Matchers . endsWith (  \"  / people \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerPlain"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( MvcUriComponentsBuilderTests . PersonControllerImpl . class )  . pathSegment (  \" something \"  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / people / something \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerSubResource"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( MvcUriComponentsBuilderTests . InvalidController . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost / persons \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerTwoTypeLevelMappings"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( MvcUriComponentsBuilderTests . PersonsAddressesController . class )  . buildAndExpand (  1  5  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / people /  1  5  / addresses \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerUriTemplate"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "MvcUriComponentsBuilder   mvcBuilder    =    MvcUriComponentsBuilder . relativeTo ( builder )  ;", "UriComponents   uriComponents    =    mvcBuilder . withController (  . PersonControllerImpl . class )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / people \"  ,    uriComponents . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerWithCustomBaseUrlViaInstance"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController ( builder ,     . PersonControllerImpl . class )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / people \"  ,    uriComponents . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromControllerWithCustomBaseUrlViaStaticCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . setServletContext ( new   MockServletContext (  )  )  ;", "context . register (  . WebConfig . class )  ;", "context . refresh (  )  ;", "this . request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    context )  ;", "this . request . setServerName (  \" example . org \"  )  ;", "this . request . setServerPort (  9  9  9  9  )  ;", "this . request . setContextPath (  \"  / base \"  )  ;", "String   mappingName    =     \" PAC # getAddressesForCountry \"  ;", "String   url    =    MvcUriComponentsBuilder . fromMappingName ( mappingName )  . arg (  0  ,     \" DE \"  )  . buildAndExpand (  1  2  3  )  ;", "assertEquals (  \"  / base / people /  1  2  3  / addresses / DE \"  ,    url )  ;", "}", "METHOD_END"], "methodName": ["fromMappingNamePlain"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . setServletContext ( new   MockServletContext (  )  )  ;", "context . register (  . WebConfig . class )  ;", "context . refresh (  )  ;", "this . request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    context )  ;", "UriComponentsBuilder   baseUrl    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  9  9  9  / base \"  )  ;", "MvcUriComponentsBuilder   mvcBuilder    =    MvcUriComponentsBuilder . relativeTo ( baseUrl )  ;", "String   url    =    mvcBuilder . withMappingName (  \" PAC # getAddressesForCountry \"  )  . arg (  0  ,     \" DE \"  )  . buildAndExpand (  1  2  3  )  ;", "assertEquals (  \" http :  /  / example . org :  9  9  9  9  / base / people /  1  2  3  / addresses / DE \"  ,    url )  ;", "}", "METHOD_END"], "methodName": ["fromMappingNameWithCustomBaseUrl"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . ExtendedController . class )  . myMethod ( null )  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / localhost \"  )  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / extended / else \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallOnSubclass"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . ControllerWithMethods . class )  . myMethod ( null )  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / localhost \"  )  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / something / else \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallPlain"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "MvcUriComponentsBuilder   mvcBuilder    =    MvcUriComponentsBuilder . relativeTo ( builder )  ;", "UriComponents   result    =    mvcBuilder . withMethodCall ( MvcUriComponentsBuilder . on (  . ControllerWithMethods . class )  . myMethod ( null )  )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / something / else \"  ,    result . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithCustomBaseUrlViaInstance"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( builder ,    MvcUriComponentsBuilder . on (  . ControllerWithMethods . class )  . myMethod ( null )  )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / something / else \"  ,    uriComponents . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithCustomBaseUrlViaStaticCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . BookingControllerWithModelAndView . class )  . getBooking (  2  1 L )  )  . buildAndExpand (  4  2  )  ;", "assertEquals (  \" http :  /  / localhost / hotels /  4  2  / bookings /  2  1  \"  ,    uriComponents . encode (  )  . toUri (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithModelAndViewReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . BookingControllerWithObject . class )  . getBooking (  2  1 L )  )  . buildAndExpand (  4  2  )  ;", "assertEquals (  \" http :  /  / localhost / hotels /  4  2  / bookings /  2  1  \"  ,    uriComponents . encode (  )  . toUri (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithObjectReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . ControllerWithMethods . class )  . methodWithPathVariable (  \"  1  \"  )  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / localhost \"  )  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / something /  1  / foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . ControllerWithMethods . class )  . methodWithMultiValueRequestParams (  \"  1  \"  ,    Arrays . asList (  3  ,     7  )  ,     5  )  )  . build (  )  ;", "assertThat ( uriComponents . getPath (  )  ,    is (  \"  / something /  1  / foo \"  )  )  ;", "MultiValueMap < String ,    String >    queryParams    =    uriComponents . getQueryParams (  )  ;", "assertThat ( queryParams . get (  \" limit \"  )  ,    contains (  \"  5  \"  )  )  ;", "assertThat ( queryParams . get (  \" items \"  )  ,    containsInAnyOrder (  \"  3  \"  ,     \"  7  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithPathVariableAndMultiValueRequestParams"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . ControllerWithMethods . class )  . methodForNextPage (  \"  1  \"  ,     1  0  ,     5  )  )  . build (  )  ;", "assertThat ( uriComponents . getPath (  )  ,    is (  \"  / something /  1  / foo \"  )  )  ;", "MultiValueMap < String ,    String >    queryParams    =    uriComponents . getQueryParams (  )  ;", "assertThat ( queryParams . get (  \" limit \"  )  ,    contains (  \"  5  \"  )  )  ;", "assertThat ( queryParams . get (  \" offset \"  )  ,    contains (  \"  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithPathVariableAndRequestParams"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . BookingControllerWithString . class )  . getBooking (  2  1 L )  )  . buildAndExpand (  4  2  )  ;", "assertEquals (  \" http :  /  / localhost / hotels /  4  2  / bookings /  2  1  \"  ,    uriComponents . encode (  )  . toUri (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithStringReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodCall ( MvcUriComponentsBuilder . on ( MvcUriComponentsBuilderTests . PersonsAddressesController . class )  . getAddressesForCountry (  \" DE \"  )  )  . buildAndExpand (  1  5  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    endsWith (  \"  / people /  1  5  / addresses / DE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodCallWithTypeLevelUriVars"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . UnmappedController . class ,     \" unmappedMethod \"  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost /  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameNotMapped"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . ControllerWithMethods . class ,     \" methodWithPathVariable \"  ,     \"  1  \"  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost / something /  1  / foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNamePathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "DateTime   now    =    DateTime . now (  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName (  . ControllerWithMethods . class ,     \" methodWithTwoPathVariables \"  ,     1  ,    now )  . build (  )  ;", "assertThat ( uriComponents . getPath (  )  ,    is (  (  \"  / something /  1  / foo /  \"     +     ( ISODateTimeFormat . date (  )  . print ( now )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameTwoPathVariables"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setContextPath (  \"  / myapp \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName (  . PersonsAddressesController . class ,     \" getAddressesForCountry \"  ,     \" DE \"  )  . buildAndExpand (  \"  1  \"  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost / myapp / people /  1  / addresses / DE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameTypeLevelPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . UserContactController . class ,     \" showCreate \"  ,     1  2  3  )  . build (  )  ;", "assertThat ( uriComponents . getPath (  )  ,    is (  \"  / user /  1  2  3  / contacts / create \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameTypeLevelPathVariableWithoutArgumentValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . PersonCrudController . class ,     \" get \"  ,     (  ( long )     (  4  2  )  )  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost /  4  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithBridgedMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "MvcUriComponentsBuilder   mvcBuilder    =    MvcUriComponentsBuilder . relativeTo ( builder )  ;", "UriComponents   uriComponents    =    mvcBuilder . withMethodName (  . ControllerWithMethods . class ,     \" methodWithPathVariable \"  ,     \"  1  \"  )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / something /  1  / foo \"  ,    uriComponents . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithCustomBaseUrlViaInstance"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponentsBuilder   builder    =    UriComponentsBuilder . fromUriString (  \" http :  /  / example . org :  9  0  9  0  / base \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( builder ,     . ControllerWithMethods . class ,     \" methodWithPathVariable \"  ,     \"  1  \"  )  . build (  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base / something /  1  / foo \"  ,    uriComponents . toString (  )  )  ;", "assertEquals (  \" http :  /  / example . org :  9  0  9  0  / base \"  ,    builder . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithCustomBaseUrlViaStaticCall"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . MetaAnnotationController . class ,     \" handleInput \"  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost / input \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithMetaAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . ControllerWithMethods . class ,     \" methodWithOptionalParam \"  ,    new   Object [  ]  {    null    }  )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    is (  \" http :  /  / localhost / something / optional - param \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithOptionalParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . ControllerWithMethods . class ,     \" methodForNextPage \"  ,     \"  1  \"  ,     1  0  ,     5  )  . build (  )  ;", "assertThat ( uriComponents . getPath (  )  ,    is (  \"  / something /  1  / foo \"  )  )  ;", "MultiValueMap < String ,    String >    queryParams    =    uriComponents . getQueryParams (  )  ;", "assertThat ( queryParams . get (  \" limit \"  )  ,    contains (  \"  5  \"  )  )  ;", "assertThat ( queryParams . get (  \" offset \"  )  ,    contains (  \"  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithPathVarAndRequestParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromMethodName ( MvcUriComponentsBuilderTests . BookingControllerWithString . class ,     \" getBooking \"  ,     2  1 L )  . buildAndExpand (  4  2  )  ;", "assertEquals (  \" http :  /  / localhost / hotels /  4  2  / bookings /  2  1  \"  ,    uriComponents . encode (  )  . toUri (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromMethodNameWithStringReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . resetRequestAttributes (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( new   ServletRequestAttributes ( this . request )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" X - Forwarded - Host \"  ,     \" barfoo :  8  8  8  8  ,    localhost :  8  0  8  8  \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController (  . PersonControllerImpl . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / barfoo :  8  8  8  8  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["usesFirstHostOfXForwardedHost"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" X - Forwarded - Host \"  ,     \" foobar :  8  0  8  8  \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController (  . PersonControllerImpl . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / foobar :  8  0  8  8  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["usesForwardedHostAndPortFromHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Host \"  ,     \" somethingDifferent \"  )  ;", "UriComponents   uriComponents    =    MvcUriComponentsBuilder . fromController (  . PersonControllerImpl . class )  . build (  )  ;", "assertThat ( uriComponents . toUriString (  )  ,    startsWith (  \" http :  /  / somethingDifferent \"  )  )  ;", "}", "METHOD_END"], "methodName": ["usesForwardedHostAsHostIfHeaderIsSet"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name 1  \"  ,     \" value 1  \"  )  ;", "uriTemplateVars . put (  \" name 2  \"  ,     \" value 2  \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "Object   result    =    resolver . resolve ( paramMap ,    mavContainer ,    webRequest ,    null )  ;", "assertEquals ( uriTemplateVars ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    map    =     (  ( Map < String ,    String >  )     ( resolver . resolveArgument ( paramMap ,    mavContainer ,    webRequest ,    null )  )  )  ;", "assertEquals ( Collections . emptyMap (  )  ,    map )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNoUriVars"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "resolver    =    new   PathVariableMapMethodArgumentResolver (  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "webRequest    =    new   ServletWebRequest ( request ,    new   MockHttpServletResponse (  )  )  ;", "Method   method    =    getClass (  )  . getMethod (  \" handle \"  ,    Map . class ,    Map . class ,    Map . class )  ;", "paramMap    =    new   MethodParameter ( method ,     0  )  ;", "paramNamedMap    =    new   MethodParameter ( method ,     1  )  ;", "paramMapNoAnnot    =    new   MethodParameter ( method ,     2  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( resolver . supportsParameter ( paramMap )  )  ;", "assertFalse ( resolver . supportsParameter ( paramNamedMap )  )  ;", "assertFalse ( resolver . supportsParameter ( paramMapNoAnnot )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   String )     {", "return    (  ( String )     ( value )  )  ;", "} else", "if    ( cs    !  =    null )     {", "return    (  ( String )     ( cs . convert ( value ,    sourceType ,     . STRING _ TYPE _ DESCRIPTOR )  )  )  ;", "} else    {", "return   value . toString (  )  ;", "}", "}", "METHOD_END"], "methodName": ["formatUriValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "resolver . resolveArgument ( paramNamedString ,    mavContainer ,    webRequest ,    null )  ;", "fail (  \" Unresolved   path   variable   should   lead   to   exception \"  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( resolver . resolveArgument ( paramNotRequired ,    mavContainer ,    webRequest ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["nullIfNotRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" value \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "String   result    =     (  ( String )     ( resolver . resolveArgument ( paramNamedString ,    mavContainer ,    webRequest ,    null )  )  )  ;", "assertEquals (  \"    not   resolved   correctly \"  ,     \" value \"  ,    result )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    pathVars    =     (  ( Map < String ,    Object >  )     ( request . getAttribute ( View . PATH _ VARIABLES )  )  )  ;", "assertNotNull ( pathVars )  ;", "assertEquals (  1  ,    pathVars . size (  )  )  ;", "assertEquals (  \" value \"  ,    pathVars . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" value \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "String   result    =     (  ( String )     ( resolver . resolveArgument ( paramNotRequired ,    mavContainer ,    webRequest ,    null )  )  )  ;", "assertEquals (  \"    not   resolved   correctly \"  ,     \" value \"  ,    result )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    pathVars    =     (  ( Map < String ,    Object >  )     ( request . getAttribute ( View . PATH _ VARIABLES )  )  )  ;", "assertNotNull ( pathVars )  ;", "assertEquals (  1  ,    pathVars . size (  )  )  ;", "assertEquals (  \" value \"  ,    pathVars . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNotRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" value \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "uriTemplateVars . put (  \" oldName \"  ,     \" oldValue \"  )  ;", "request . setAttribute ( View . PATH _ VARIABLES ,    uriTemplateVars )  ;", "String   result    =     (  ( String )     ( resolver . resolveArgument ( paramNamedString ,    mavContainer ,    webRequest ,    null )  )  )  ;", "assertEquals (  \"    not   resolved   correctly \"  ,     \" value \"  ,    result )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    pathVars    =     (  ( Map < String ,    Object >  )     ( request . getAttribute ( View . PATH _ VARIABLES )  )  )  ;", "assertNotNull ( pathVars )  ;", "assertEquals (  2  ,    pathVars . size (  )  )  ;", "assertEquals (  \" value \"  ,    pathVars . get (  \" name \"  )  )  ;", "assertEquals (  \" oldValue \"  ,    pathVars . get (  \" oldName \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentWithExistingPathVars"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" name \"  ,     \" value \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "ConfigurableWebBindingInitializer   initializer    =    new   ConfigurableWebBindingInitializer (  )  ;", "initializer . setConversionService ( new   DefaultConversionService (  )  )  ;", "WebDataBinderFactory   binderFactory    =    new   bind . support . DefaultDataBinderFactory ( initializer )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Optional < String >    result    =     (  ( Optional < String >  )     ( resolver . resolveArgument ( paramOptional ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertEquals (  \" PathVariable   not   resolved   correctly \"  ,     \" value \"  ,    result . get (  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    pathVars    =     (  ( Map < String ,    Object >  )     ( request . getAttribute ( View . PATH _ VARIABLES )  )  )  ;", "assertNotNull ( pathVars )  ;", "assertEquals (  1  ,    pathVars . size (  )  )  ;", "assertEquals ( Optional . of (  \" value \"  )  ,    pathVars . get (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentWrappedAsOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "resolver    =    new   PathVariableMethodArgumentResolver (  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "webRequest    =    new   ServletWebRequest ( request ,    new   MockHttpServletResponse (  )  )  ;", "Method   method    =    ReflectionUtils . findMethod ( getClass (  )  ,     \" handle \"  ,     (  ( Class <  ?  >  [  ]  )     ( null )  )  )  ;", "paramNamedString    =    new   SynthesizingMethodParameter ( method ,     0  )  ;", "paramString    =    new   SynthesizingMethodParameter ( method ,     1  )  ;", "paramNotRequired    =    new   SynthesizingMethodParameter ( method ,     2  )  ;", "paramOptional    =    new   SynthesizingMethodParameter ( method ,     3  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Parameter   with    @ PathVariable   annotation \"  ,    resolver . supportsParameter ( paramNamedString )  )  ;", "assertFalse (  \" Parameter   without    @ PathVariable   annotation \"  ,    resolver . supportsParameter ( paramString )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "ConfigurableWebBindingInitializer   initializer    =    new   ConfigurableWebBindingInitializer (  )  ;", "initializer . setConversionService ( new   DefaultConversionService (  )  )  ;", "WebDataBinderFactory   binderFactory    =    new   bind . support . DefaultDataBinderFactory ( initializer )  ;", "assertEquals ( Optional . empty (  )  ,    resolver . resolveArgument ( paramOptional ,    mavContainer ,    webRequest ,    binderFactory )  )  ;", "}", "METHOD_END"], "methodName": ["wrapEmptyWithOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ResponseBodyEmitter ( ReactiveTypeHandler . STREAMING _ TIMEOUT _ VALUE )     {", "@ Override", "protected   void   extendResponse ( ServerHttpResponse   outputMessage )     {", "outputMessage . getHeaders (  )  . setContentType ( mediaType )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getEmitter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler"}, {"methodBody": ["METHOD_START", "{", "Collection < MediaType >    mediaTypes    =     (  ( Collection < MediaType >  )     ( request . getAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    SCOPE _ REQUEST )  )  )  ;", "return   CollectionUtils . isEmpty ( mediaTypes )     ?    this . contentNegotiationManager . resolveMediaTypes ( request )     :    mediaTypes ;", "}", "METHOD_END"], "methodName": ["getMediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( returnValue ,     \" Expected   return   value \"  )  ;", "ReactiveAdapter   adapter    =    this . reactiveRegistry . getAdapter ( returnValue . getClass (  )  )  ;", "Assert . state (  ( adapter    !  =    null )  ,     (  \" Unexpected   return   value :     \"     +    returnValue )  )  ;", "ResolvableType   elementType    =    ResolvableType . forMethodParameter ( returnType )  . getGeneric (  0  )  ;", "Class <  ?  >    elementClass    =    elementType . resolve ( Object . class )  ;", "Collection < MediaType >    mediaTypes    =    getMediaTypes ( request )  ;", "Optional < MediaType >    mediaType    =    mediaTypes . stream (  )  . filter ( MimeType :  : isConcrete )  . findFirst (  )  ;", "if    ( adapter . isMultiValue (  )  )     {", "if    (  ( mediaTypes . stream (  )  . anyMatch ( MediaType . TEXT _ EVENT _ STREAM :  : includes )  )     |  |     ( ServerSentEvent . class . isAssignableFrom ( elementClass )  )  )     {", "SseEmitter   emitter    =    new   SseEmitter (  . STREAMING _ TIMEOUT _ VALUE )  ;", "new    . SseEmitterSubscriber ( emitter ,    this . taskExecutor )  . connect ( adapter ,    returnValue )  ;", "return   emitter ;", "}", "if    ( CharSequence . class . isAssignableFrom ( elementClass )  )     {", "ResponseBodyEmitter   emitter    =    getEmitter ( mediaType . orElse ( TEXT _ PLAIN )  )  ;", "new    . TextEmitterSubscriber ( emitter ,    this . taskExecutor )  . connect ( adapter ,    returnValue )  ;", "return   emitter ;", "}", "if    ( mediaTypes . stream (  )  . anyMatch ( MediaType . APPLICATION _ STREAM _ JSON :  : includes )  )     {", "ResponseBodyEmitter   emitter    =    getEmitter ( APPLICATION _ STREAM _ JSON )  ;", "new    . JsonEmitterSubscriber ( emitter ,    this . taskExecutor )  . connect ( adapter ,    returnValue )  ;", "return   emitter ;", "}", "}", "DeferredResult < Object >    result    =    new   DeferredResult (  )  ;", "new    . DeferredResultSubscriber ( result ,    adapter ,    elementType )  . connect ( adapter ,    returnValue )  ;", "WebAsyncUtils . getAsyncManager ( request )  . startDeferredResultProcessing ( result ,    mav )  ;", "return   null ;", "}", "METHOD_END"], "methodName": ["handleValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler"}, {"methodBody": ["METHOD_START", "{", "return    ( this . reactiveRegistry . hasAdapters (  )  )     &  &     (  ( this . reactiveRegistry . getAdapter ( type )  )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["isReactiveType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler"}, {"methodBody": ["METHOD_START", "{", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "MonoProcessor < String >    mono    =    MonoProcessor . create (  )  ;", "testDeferredResultSubscriber ( mono ,    Mono . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    mono . onError ( ex )  ,    ex )  ;", "AtomicReference < SingleEmitter < String >  >    ref    =    new   AtomicReference <  >  (  )  ;", "Single < String >    single    =    Single . fromEmitter ( ref :  : set )  ;", "testDeferredResultSubscriber ( single ,    Single . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    ref . get (  )  . onError ( ex )  ,    ex )  ;", "AtomicReference < io . rx . SingleEmitter < String >  >    ref 2     =    new   AtomicReference <  >  (  )  ;", "io . rx . Single < String >    single 2     =    io . rx . Single . create ( ref 2  :  : set )  ;", "testDeferredResultSubscriber ( single 2  ,    Single . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    ref 2  . get (  )  . onError ( ex )  ,    ex )  ;", "}", "METHOD_END"], "methodName": ["deferredResultSubscriberWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", ". Bar   bar 1     =    new    . Bar (  \" foo \"  )  ;", ". Bar   bar 2     =    new    . Bar (  \" bar \"  )  ;", "EmitterProcessor <  . Bar >    emitter    =    EmitterProcessor . create (  )  ;", "testDeferredResultSubscriber ( emitter ,    Flux . class ,    ResolvableType . forClass (  . Bar . class )  ,     (  )     -  >     {", "emitter . onNext ( bar 1  )  ;", "emitter . onNext ( bar 2  )  ;", "emitter . onComplete (  )  ;", "}  ,    Arrays . asList ( bar 1  ,    bar 2  )  )  ;", "}", "METHOD_END"], "methodName": ["deferredResultSubscriberWithMultipleValues"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MonoProcessor < String >    monoEmpty    =    MonoProcessor . create (  )  ;", "testDeferredResultSubscriber ( monoEmpty ,    Mono . class ,    Resolvabl . forClass ( String . class )  ,    monoEmpty :  : onComplete ,    null )  ;", "}", "METHOD_END"], "methodName": ["deferredResultSubscriberWithNoValues"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MonoProcessor < String >    mono    =    MonoProcessor . create (  )  ;", "testDeferredResultSubscriber ( mono ,    Mono . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    mono . onNext (  \" foo \"  )  ,     \" foo \"  )  ;", "MonoProcessor < String >    monoEmpty    =    MonoProcessor . create (  )  ;", "testDeferredResultSubscriber ( monoEmpty ,    Mono . class ,    ResolvableType . forClass ( String . class )  ,    monoEmpty :  : onComplete ,    null )  ;", "AtomicReference < SingleEmitter < String >  >    ref    =    new   AtomicReference <  >  (  )  ;", "Single < String >    single    =    Single . fromEmitter ( ref :  : set )  ;", "testDeferredResultSubscriber ( single ,    Single . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    ref . get (  )  . onSuccess (  \" foo \"  )  ,     \" foo \"  )  ;", "AtomicReference < io . rx . SingleEmitter < String >  >    ref 2     =    new   AtomicReference <  >  (  )  ;", "io . rx . Single < String >    single 2     =    io . rx . Single . create ( ref 2  :  : set )  ;", "testDeferredResultSubscriber ( single 2  ,    Single . class ,    ResolvableType . forClass ( String . class )  ,     (  )     -  >    ref 2  . get (  )  . onSuccess (  \" foo \"  )  ,     \" foo \"  )  ;", "}", "METHOD_END"], "methodName": ["deferredResultSubscriberWithOneValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . handler . isReactiveType ( String . class )  )  ;", "}", "METHOD_END"], "methodName": ["doesNotSupportType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "MethodParameter   returnType    =    ResolvableMethod . on (  . TestController . class )  . resolveReturnType ( asyncType ,    genericType )  ;", "return   this . handler . handleValue ( returnValue ,    returnType ,    mavContainer ,    this . webRequest )  ;", "}", "METHOD_END"], "methodName": ["handleValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" text / event - stream \"  )  ;", "testSseResponse ( true )  ;", "Set < MediaType >    types    =    Collections . singleton ( TEXT _ EVENT _ STREAM )  ;", "this . servletRequest . setAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    types )  ;", "testSseResponse ( true )  ;", "testSseResponse ( false )  ;", "}", "METHOD_END"], "methodName": ["mediaTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest    =    new   MockHttpServletRequest (  )  ;", "this . servletResponse    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   context . request . ServletWebRequest ( this . servletRequest ,    this . servletResponse )  ;", "AsyncWebRequest   asyncWebRequest    =    new   context . request . async . StandardServletAsyncWebRequest ( this . servletRequest ,    this . servletResponse )  ;", "WebAsyncUtils . getAsyncManager ( this . webRequest )  . setAsyncWebRequest ( asyncWebRequest )  ;", "this . servletRequest . setAsyncSupported ( true )  ;", "}", "METHOD_END"], "methodName": ["resetRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiationManagerFactoryBean   factoryBean    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factoryBean . afterPropertiesSet (  )  ;", "ContentNegotiationManager   manager    =    factoryBean . getObject (  )  ;", "this . handler    =    new    ( ReactiveAdapterRegistry . getSharedInstance (  )  ,    new   SyncTaskExecutor (  )  ,    manager )  ;", "resetRequest (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . isReactiveType ( Mono . class )  )  ;", "assertTrue ( this . handler . isReactiveType ( Single . class )  )  ;", "assertTrue ( this . handler . isReactiveType ( Single . class )  )  ;", "}", "METHOD_END"], "methodName": ["supportsType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ResponseBodyEmitter   emitter    =    handleValue ( returnValue ,    asyncType ,    elementType )  ;", "TestCase . assertNull ( emitter )  ;", "assertTrue ( thisRequest . isAsyncStarted (  )  )  ;", "assertFalse ( WebAsyncUtils . getAsyncManager ( this . webRequest )  . hasConcurrentResult (  )  )  ;", "produceTask . run (  )  ;", "assertTrue ( WebAsyncUtils . getAsyncManager ( this . webRequest )  . hasConcurrentResult (  )  )  ;", "assertEquals ( expected ,    WebAsyncUtils . getAsyncManager ( this . webRequest )  . getConcurrentResult (  )  )  ;", "resetRequest (  )  ;", "}", "METHOD_END"], "methodName": ["testDeferredResultSubscriber"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ServletServerHttpResponse   message    =    new   ServletServerHttpResponse ( this . servletResponse )  ;", "ResponseBodyEmitter   emitter    =    handleValue ( Flux . empty (  )  ,    Flux . class ,    ResolvableType . forClass ( String . class )  )  ;", "emitter . extendResponse ( message )  ;", "assertEquals ( expected ,    message . getHeaders (  )  . getContentType (  )  . toString (  )  )  ;", "resetRequest (  )  ;", "}", "METHOD_END"], "methodName": ["testEmitterContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ResponseBodyEmitter   emitter    =    handleValue ( Flux . empty (  )  ,    Flux . class ,    ResolvableType . forClass ( String . class )  )  ;", "assertEquals ( expectSseEimtter ,     ( emitter   instanceof   SseEmitter )  )  ;", "resetRequest (  )  ;", "}", "METHOD_END"], "methodName": ["testSseResponse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "testEmitterContentType (  \" text / plain \"  )  ;", "thisRequest . addHeader (  \" Accept \"  ,     \" text /  *  \"  )  ;", "testEmitterContentType (  \" text / plain \"  )  ;", "thisRequest . addHeader (  \" Accept \"  ,     \"  *  /  *  ,    text /  *  ,    text / markdown \"  )  ;", "testEmitterContentType (  \" text / markdown \"  )  ;", "thisRequest . addHeader (  \" Accept \"  ,     \"  *  /  *  ,    text /  *  ,    foo / bar \"  )  ;", "testEmitterContentType (  \" foo / bar \"  )  ;", "thisRequest . addHeader (  \" Accept \"  ,     \"  *  /  *  ,    text /  *  ,    application / json \"  )  ;", "testEmitterContentType (  \" application / json \"  )  ;", "}", "METHOD_END"], "methodName": ["writeFluxOfString"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" text / event - stream \"  )  ;", "EmitterProcessor < String >    processor    =    EmitterProcessor . create (  )  ;", "SseEmitter   sseEmitter    =     (  ( SseEmitter )     ( handleValue ( processor ,    Flux . class ,    ResolvableType . forClass ( String . class )  )  )  )  ;", ". EmitterHandler   emitterHandler    =    new    . EmitterHandler (  )  ;", "sseEmitter . initialize ( emitterHandler )  ;", "processor . onNext (  \" foo \"  )  ;", "processor . onNext (  \" bar \"  )  ;", "processor . onNext (  \" baz \"  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" data : foo \\ n \\ ndata : bar \\ n \\ ndata : baz \\ n \\ n \"  ,    emitterHandler . getValuesAsText (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeServerSentEvents"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ResolvableType   type    =    ResolvableType . forClassWithGenerics ( ServerSentEvent . class ,    String . class )  ;", "EmitterProcessor < ServerSentEvent <  ?  >  >    processor    =    EmitterProcessor . create (  )  ;", "SseEmitter   sseEmitter    =     (  ( SseEmitter )     ( handleValue ( processor ,    Flux . class ,    type )  )  )  ;", ". EmitterHandler   emitterHandler    =    new    . EmitterHandler (  )  ;", "sseEmitter . initialize ( emitterHandler )  ;", "processor . onNext ( ServerSentEvent . builder (  \" foo \"  )  . id (  \"  1  \"  )  . build (  )  )  ;", "processor . onNext ( ServerSentEvent . builder (  \" bar \"  )  . id (  \"  2  \"  )  . build (  )  )  ;", "processor . onNext ( ServerSentEvent . builder (  \" baz \"  )  . id (  \"  3  \"  )  . build (  )  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" id :  1  \\ ndata : foo \\ n \\ nid :  2  \\ ndata : bar \\ n \\ nid :  3  \\ ndata : baz \\ n \\ n \"  ,    emitterHandler . getValuesAsText (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeServerSentEventsWithBuilder"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" application / stream + json \"  )  ;", "EmitterProcessor <  . Bar >    processor    =    EmitterProcessor . create (  )  ;", "ResponseBodyEmitter   emitter    =    handleValue ( processor ,    Flux . class ,    ResolvableType . forClass (  . Bar . class )  )  ;", ". EmitterHandler   emitterHandler    =    new    . EmitterHandler (  )  ;", "emitter . initialize ( emitterHandler )  ;", "ServletServerHttpResponse   message    =    new   ServletServerHttpResponse ( this . servletResponse )  ;", "emitter . extendResponse ( message )  ;", ". Bar   bar 1     =    new    . Bar (  \" foo \"  )  ;", ". Bar   bar 2     =    new    . Bar (  \" bar \"  )  ;", "processor . onNext ( bar 1  )  ;", "processor . onNext ( bar 2  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" application / stream + json \"  ,    message . getHeaders (  )  . getContentType (  )  . toString (  )  )  ;", "assertEquals ( Arrays . asList ( bar 1  ,     \"  \\ n \"  ,    bar 2  ,     \"  \\ n \"  )  ,    emitterHandler . getValues (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeStreamJson"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "EmitterProcessor < String >    processor    =    EmitterProcessor . create (  )  ;", "ResponseBodyEmitter   emitter    =    handleValue ( processor ,    Flux . class ,    ResolvableType . forClass ( String . class )  )  ;", ". EmitterHandler   emitterHandler    =    new    . EmitterHandler (  )  ;", "emitter . initialize ( emitterHandler )  ;", "processor . onNext (  \" The   quick \"  )  ;", "processor . onNext (  \"    brown   fox   jumps   over    \"  )  ;", "processor . onNext (  \" the   lazy   dog \"  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" The   quick   brown   fox   jumps   over   the   lazy   dog \"  ,    emitterHandler . getValuesAsText (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeText"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ServletRequestDataBinderFactory ( binderMethods ,    getWebBindingInitializer (  )  )  ;", "}", "METHOD_END"], "methodName": ["createDataBinderFactory"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "InvocableHandlerMethod   binderMethod    =    new   InvocableHandlerMethod ( bean ,    method )  ;", "if    (  ( this . initBinderArgumentResolvers )     !  =    null )     {", "binderMethod . setHandlerMethodArgumentResolvers ( this . initBinderArgumentResolvers )  ;", "}", "binderMethod . setDataBinderFactory ( new   bind . support . DefaultDataBinderFactory ( this . webBindingInitializer )  )  ;", "binderMethod . setParameterNameDiscoverer ( this . parameterNameDiscoverer )  ;", "return   binderMethod ;", "}", "METHOD_END"], "methodName": ["createInitBinderMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   ServletInvocableHandlerMethod ( handlerMethod )  ;", "}", "METHOD_END"], "methodName": ["createInvocableHandlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "InvocableHandlerMethod   attrMethod    =    new   InvocableHandlerMethod ( bean ,    method )  ;", "if    (  ( this . argumentResolvers )     !  =    null )     {", "attrMethod . setHandlerMethodArgumentResolvers ( this . argumentResolvers )  ;", "}", "attrMethod . setParameterNameDiscoverer ( this . parameterNameDiscoverer )  ;", "attrMethod . setDataBinderFactory ( factory )  ;", "return   attrMethod ;", "}", "METHOD_END"], "methodName": ["createModelAttributeMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return    ( this . argumentResolvers )     !  =    null    ?    this . argumentResolvers . getResolvers (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . beanFactory ;", "}", "METHOD_END"], "methodName": ["getBeanFactory"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . customArgumentResolvers ;", "}", "METHOD_END"], "methodName": ["getCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . customReturnValueHandlers ;", "}", "METHOD_END"], "methodName": ["getCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    handlerType    =    handlerMethod . getBeanType (  )  ;", "Set < Method >    methods    =    this . initBinderCache . get ( handlerType )  ;", "if    ( methods    =  =    null )     {", "methods    =    MethodIntrospector . selectMethods ( handlerType ,     . INIT _ BINDER _ METHODS )  ;", "this . initBinderCache . put ( handlerType ,    methods )  ;", "}", "List < InvocableHandlerMethod >    initBinderMethods    =    new   ArrayList <  >  (  )  ;", "this . initBinderAdviceCache . forEach (  (    clazz ,    methodSet )     -  >     {", "if    ( clazz . isApplicableToBeanType ( handlerType )  )     {", "Object   bean    =    clazz . resolveBean (  )  ;", "for    ( Method   method    :    methodSet )     {", "initBinderMethods . add ( createInitBinderMethod ( bean ,    method )  )  ;", "}", "}", "}  )  ;", "for    ( Method   method    :    methods )     {", "Object   bean    =    handlerMethod . getBean (  )  ;", "initBinderMethods . add ( createInitBinderMethod ( bean ,    method )  )  ;", "}", "return   createDataBinderFactory ( initBinderMethods )  ;", "}", "METHOD_END"], "methodName": ["getDataBinderFactory"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "List < HandlerMethodArgumentResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( new   webParamMethodArgumentResolver ( getBeanFactory (  )  ,    false )  )  ;", "resolvers . add ( new   RequestParamMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   PathVariableMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   PathVariableMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   MatrixVariableMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   MatrixVariableMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletModelAttributeMethodProcessor ( false )  )  ;", "resolvers . add ( new   RequestResponseBodyMethodProcessor ( getMessageConverters (  )  ,    this . requestResponseBodyAdvice )  )  ;", "resolvers . add ( new   RequestPartMethodArgumentResolver ( getMessageConverters (  )  ,    this . requestResponseBodyAdvice )  )  ;", "resolvers . add ( new   webHeaderMethodArgumentResolver ( getBeanFactory (  )  )  )  ;", "resolvers . add ( new   RequestHeaderMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletCookieValueMethodArgumentResolver ( getBeanFactory (  )  )  )  ;", "resolvers . add ( new   ExpressionValueMethodArgumentResolver ( getBeanFactory (  )  )  )  ;", "resolvers . add ( new   SessionAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   RequestAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletRequestMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletResponseMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   HttpEntityMethodProcessor ( getMessageConverters (  )  ,    this . requestResponseBodyAdvice )  )  ;", "resolvers . add ( new   RedirectAttributesMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ModelMethodProcessor (  )  )  ;", "resolvers . add ( new   MapMethodProcessor (  )  )  ;", "resolvers . add ( new   ErrorsMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   SessionStatusMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   UriComponentsBuilderMethodArgumentResolver (  )  )  ;", "if    (  ( getCustomArgumentResolvers (  )  )     !  =    null )     {", "resolvers . addAll ( getCustomArgumentResolvers (  )  )  ;", "}", "resolvers . add ( new   webParamMethodArgumentResolver ( getBeanFactory (  )  ,    true )  )  ;", "resolvers . add ( new   ServletModelAttributeMethodProcessor ( true )  )  ;", "return   resolvers ;", "}", "METHOD_END"], "methodName": ["getDefaultArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "List < HandlerMethodArgumentResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( new   webParamMethodArgumentResolver ( getBeanFactory (  )  ,    false )  )  ;", "resolvers . add ( new   RequestParamMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   PathVariableMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   PathVariableMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   MatrixVariableMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   MatrixVariableMapMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ExpressionValueMethodArgumentResolver ( getBeanFactory (  )  )  )  ;", "resolvers . add ( new   SessionAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   RequestAttributeMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletRequestMethodArgumentResolver (  )  )  ;", "resolvers . add ( new   ServletResponseMethodArgumentResolver (  )  )  ;", "if    (  ( getCustomArgumentResolvers (  )  )     !  =    null )     {", "resolvers . addAll ( getCustomArgumentResolvers (  )  )  ;", "}", "resolvers . add ( new   webParamMethodArgumentResolver ( getBeanFactory (  )  ,    true )  )  ;", "return   resolvers ;", "}", "METHOD_END"], "methodName": ["getDefaultInitBinderArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "List < HandlerMethodReturnValueHandler >    handlers    =    new   ArrayList <  >  (  )  ;", "handlers . add ( new   ModelAndViewMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   ModelMethodProcessor (  )  )  ;", "handlers . add ( new   ViewMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   ResponseBodyEmitterReturnValueHandler ( getMessageConverters (  )  ,    this . reactiveAdapterRegistry ,    this . taskExecutor ,    this . contentNegotiationManager )  )  ;", "handlers . add ( new   StreamingResponseBodyReturnValueHandler (  )  )  ;", "handlers . add ( new   HttpEntityMethodProcessor ( getMessageConverters (  )  ,    this . contentNegotiationManager ,    this . requestResponseBodyAdvice )  )  ;", "handlers . add ( new   HttpHeadersReturnValueHandler (  )  )  ;", "handlers . add ( new   CallableMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   DeferredResultMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   AsyncTaskMethodReturnValueHandler ( this . beanFactory )  )  ;", "handlers . add ( new   ModelAttributeMethodProcessor ( false )  )  ;", "handlers . add ( new   RequestResponseBodyMethodProcessor ( getMessageConverters (  )  ,    this . contentNegotiationManager ,    this . requestResponseBodyAdvice )  )  ;", "handlers . add ( new   ViewNameMethodReturnValueHandler (  )  )  ;", "handlers . add ( new   MapMethodProcessor (  )  )  ;", "if    (  ( getCustomReturnValueHandlers (  )  )     !  =    null )     {", "handlers . addAll ( getCustomReturnValueHandlers (  )  )  ;", "}", "if    (  !  ( CollectionUtils . isEmpty ( getModelAndViewResolvers (  )  )  )  )     {", "handlers . add ( new   ModelAndViewResolverMethodReturnValueHandler ( getModelAndViewResolvers (  )  )  )  ;", "} else    {", "handlers . add ( new   ModelAttributeMethodProcessor ( true )  )  ;", "}", "return   handlers ;", "}", "METHOD_END"], "methodName": ["getDefaultReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return    ( this . initBinderArgumentResolvers )     !  =    null    ?    this . initBinderArgumentResolvers . getResolvers (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getInitBinderArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . messageConverters ;", "}", "METHOD_END"], "methodName": ["getMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "modelFactory . updateModel ( webRequest ,    mavContainer )  ;", "if    ( mavContainer . isRequestHandled (  )  )     {", "return   null ;", "}", "ModelMap   model    =    mavContainer . getModel (  )  ;", "ModelAndView   mav    =    new   ModelAndView ( mavContainer . getViewName (  )  ,    model ,    mavContainer . getStatus (  )  )  ;", "if    (  !  ( mavContainer . isViewReference (  )  )  )     {", "mav . setView (  (  ( View )     ( mavContainer . getView (  )  )  )  )  ;", "}", "if    ( model   instanceof   RedirectAttributes )     {", "Map < String ,     ?  >    flashAttributes    =     (  ( RedirectAttributes )     ( model )  )  . getFlashAttributes (  )  ;", "HttpServletRequest   request    =    webRequest . getNativeRequest ( HttpServletRequest . class )  ;", "if    ( request    !  =    null )     {", "RequestContextUtils . getOutputFlashMap ( request )  . putAll ( flashAttributes )  ;", "}", "}", "return   mav ;", "}", "METHOD_END"], "methodName": ["getModelAndView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . modelAndViewResolvers ;", "}", "METHOD_END"], "methodName": ["getModelAndViewResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "SessionAttributesHandler   sessionAttrHandler    =    getSessionAttributesHandler ( handlerMethod )  ;", "Class <  ?  >    handlerType    =    handlerMethod . getBeanType (  )  ;", "Set < Method >    methods    =    this . modelAttributeCache . get ( handlerType )  ;", "if    ( methods    =  =    null )     {", "methods    =    MethodIntrospector . selectMethods ( handlerType ,     . MODEL _ ATTRIBUTE _ METHODS )  ;", "this . modelAttributeCache . put ( handlerType ,    methods )  ;", "}", "List < InvocableHandlerMethod >    attrMethods    =    new   ArrayList <  >  (  )  ;", "this . modelAttributeAdviceCache . forEach (  (    clazz ,    methodSet )     -  >     {", "if    ( clazz . isApplicableToBeanType ( handlerType )  )     {", "Object   bean    =    clazz . resolveBean (  )  ;", "for    ( Method   method    :    methodSet )     {", "attrMethods . add ( createModelAttributeMethod ( binderFactory ,    bean ,    method )  )  ;", "}", "}", "}  )  ;", "for    ( Method   method    :    methods )     {", "Object   bean    =    handlerMethod . getBean (  )  ;", "attrMethods . add ( createModelAttributeMethod ( binderFactory ,    bean ,    method )  )  ;", "}", "return   new   ModelFactory ( attrMethods ,    binderFactory ,    sessionAttrHandler )  ;", "}", "METHOD_END"], "methodName": ["getModelFactory"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . reactiveAdapterRegistry ;", "}", "METHOD_END"], "methodName": ["getReactiveAdapterRegistry"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return    ( this . returnValueHandlers )     !  =    null    ?    this . returnValueHandlers . getHandlers (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    handlerType    =    handlerMethod . getBeanType (  )  ;", "SessionAttributes   sessionAttr    =    this . sessionAttributesCache . get ( handlerType )  ;", "if    ( sessionAttr    =  =    null )     {", "synchronized ( this . sessionAttributesCache )     {", "sessionAttr    =    this . sessionAttributesCache . get ( handlerType )  ;", "if    ( sessionAttr    =  =    null )     {", "sessionAttr    =    new   SessionAttributes ( handlerType ,    sessionAttributeStore )  ;", "this . sessionAttributesCache . put ( handlerType ,    sessionAttr )  ;", "}", "}", "}", "return   sessionAttr ;", "}", "METHOD_END"], "methodName": ["getSessionAttributesHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . webBindingInitializer ;", "}", "METHOD_END"], "methodName": ["getWebBindingInitializer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getApplicationContext (  )  )     =  =    null )     {", "return ;", "}", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Looking   for    @ ControllerAdvice :     \"     +     ( getApplicationContext (  )  )  )  )  ;", "}", "List < ControllerAdviceBean >    adviceBeans    =    ControllerAdviceBean . findAnnotatedBeans ( getApplicationContext (  )  )  ;", "AnnotationAwareOrderComparator . sort ( adviceBeans )  ;", "List < Object >    requestResponseBodyAdviceBeans    =    new   ArrayList <  >  (  )  ;", "for    ( ControllerAdviceBean   adviceBean    :    adviceBeans )     {", "Class <  ?  >    beanType    =    adviceBean . getBeanType (  )  ;", "if    ( beanType    =  =    null )     {", "throw   new   IllegalStateException (  (  \" Unresolvable   type   for   ControllerAdviceBean :     \"     +    adviceBean )  )  ;", "}", "Set < Method >    attrMethods    =    MethodIntrospector . selectMethods ( beanType ,     . MODEL _ ATTRIBUTE _ METHODS )  ;", "if    (  !  ( attrMethods . isEmpty (  )  )  )     {", "this . modelAttributeAdviceCache . put ( adviceBean ,    attrMethods )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected    @ ModelAttribute   methods   in    \"     +    adviceBean )  )  ;", "}", "}", "Set < Method >    binderMethods    =    MethodIntrospector . selectMethods ( beanType ,     . INIT _ BINDER _ METHODS )  ;", "if    (  !  ( binderMethods . isEmpty (  )  )  )     {", "this . initBinderAdviceCache . put ( adviceBean ,    binderMethods )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected    @ InitBinder   methods   in    \"     +    adviceBean )  )  ;", "}", "}", "if    ( RequestBodyAdvice . class . isAssignableFrom ( beanType )  )     {", "requestResponseBodyAdviceBeans . add ( adviceBean )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected   RequestBodyAdvice   bean   in    \"     +    adviceBean )  )  ;", "}", "}", "if    ( ResponseBodyAdvice . class . isAssignableFrom ( beanType )  )     {", "requestResponseBodyAdviceBeans . add ( adviceBean )  ;", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  \" Detected   ResponseBodyAdvice   bean   in    \"     +    adviceBean )  )  ;", "}", "}", "}", "if    (  !  ( requestResponseBodyAdviceBeans . isEmpty (  )  )  )     {", "this . requestResponseBodyAdvice . addAll (  0  ,    requestResponseBodyAdviceBeans )  ;", "}", "}", "METHOD_END"], "methodName": ["initControllerAdviceCache"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "ServletWebRequest   webRequest    =    new   ServletWebRequest ( request ,    response )  ;", "try    {", "WebDataBinderFactory   binderFactory    =    getDataBinderFactory ( handlerMethod )  ;", "ModelFactory   modelFactory    =    getModelFactory ( handlerMethod ,    binderFactory )  ;", "ServletInvocableHandlerMethod   invocableMethod    =    createInvocableHandlerMethod ( handlerMethod )  ;", "if    (  ( this . argumentResolvers )     !  =    null )     {", "invocableMethod . setHandlerMethodArgumentResolvers ( this . argumentResolvers )  ;", "}", "if    (  ( this . returnValueHandlers )     !  =    null )     {", "invocableMethod . setHandlerMethodReturnValueHandlers ( this . returnValueHandlers )  ;", "}", "invocableMethod . setDataBinderFactory ( binderFactory )  ;", "invocableMethod . setParameterNameDiscoverer ( this . parameterNameDiscoverer )  ;", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "mavContainer . addAllAttributes ( RequestContextUtils . getInputFlashMap ( request )  )  ;", "modelFactory . initModel ( webRequest ,    mavContainer ,    invocableMethod )  ;", "mavContainer . setIgnoreDefaultModelOnRedirect ( this . ignoreDefaultModelOnRedirect )  ;", "AsyncWebRequest   asyncWebRequest    =    WebAsyncUtils . createAsyncWebRequest ( request ,    response )  ;", "asyncWebRequest . setTimeout ( this . asyncRequestTimeout )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( request )  ;", "asyncManager . setTaskExecutor ( this . taskExecutor )  ;", "asyncManager . setAsyncWebRequest ( asyncWebRequest )  ;", "asyncManager . registerCallableInterceptors ( this . callableInterceptors )  ;", "asyncManager . registerDeferredResultInterceptors ( this . deferredResultInterceptors )  ;", "if    ( asyncManager . hasConcurrentResult (  )  )     {", "Object   result    =    asyncManager . getConcurrentResult (  )  ;", "mavContainer    =     (  ( ModelAndViewContainer )     ( asyncManager . getConcurrentResultContext (  )  [  0  ]  )  )  ;", "asyncManager . clearConcurrentResult (  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Found   concurrent   result   value    [  \"     +    result )     +     \"  ]  \"  )  )  ;", "}", "invocableMethod    =    invocableMethod . wrapConcurrentResult ( result )  ;", "}", "invocableMethod . invokeAndHandle ( webRequest ,    mavContainer )  ;", "if    ( asyncManager . isConcurrentHandlingStarted (  )  )     {", "return   null ;", "}", "return   getModelAndView ( mavContainer ,    modelFactory ,    webRequest )  ;", "}    finally    {", "webRequest . requestCompleted (  )  ;", "}", "}", "METHOD_END"], "methodName": ["invokeHandlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( argumentResolvers    =  =    null )     {", "this . argumentResolvers    =    null ;", "} else    {", "this . argumentResolvers    =    new   MethodArgumentResolverComposite (  )  ;", "this . argumentResolvers . addResolvers ( argumentResolvers )  ;", "}", "}", "METHOD_END"], "methodName": ["setArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . asyncRequestTimeout    =    timeout ;", "}", "METHOD_END"], "methodName": ["setAsyncRequestTimeout"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . cacheSecondsForSessionAttributeHandlers    =    cacheSecondsForSessionAttributeHandlers ;", "}", "METHOD_END"], "methodName": ["setCacheSecondsForSessionAttributeHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . callableInterceptors    =    interceptors . toArray ( new   CallableProcessingInterceptor [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["setCallableInterceptors"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . contentNegotiationManager    =    contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["setContentNegotiationManager"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . customArgumentResolvers    =    argumentResolvers ;", "}", "METHOD_END"], "methodName": ["setCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . customReturnValueHandlers    =    returnValueHandlers ;", "}", "METHOD_END"], "methodName": ["setCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . deferredResultInterceptors    =    interceptors . toArray ( new   DeferredResultProcessingInterceptor [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["setDeferredResultInterceptors"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . ignoreDefaultModelOnRedirect    =    ignoreDefaultModelOnRedirect ;", "}", "METHOD_END"], "methodName": ["setIgnoreDefaultModelOnRedirect"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( argumentResolvers    =  =    null )     {", "this . initBinderArgumentResolvers    =    null ;", "} else    {", "this . initBinderArgumentResolvers    =    new   MethodArgumentResolverComposite (  )  ;", "this . initBinderArgumentResolvers . addResolvers ( argumentResolvers )  ;", "}", "}", "METHOD_END"], "methodName": ["setInitBinderArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . messageConverters    =    messageConverters ;", "}", "METHOD_END"], "methodName": ["setMessageConverters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . modelAndViewResolvers    =    modelAndViewResolvers ;", "}", "METHOD_END"], "methodName": ["setModelAndViewResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . parameterNameDiscoverer    =    parameterNameDiscoverer ;", "}", "METHOD_END"], "methodName": ["setParameterNameDiscoverer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . reactiveAdapterRegistry    =    reactiveAdapterRegistry ;", "}", "METHOD_END"], "methodName": ["setReactiveAdapterRegistry"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . reactiveAdapterRegistry    =    reactiveRegistry ;", "}", "METHOD_END"], "methodName": ["setReactiveRegistry"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( requestBodyAdvice    !  =    null )     {", "this . requestResponseBodyAdvice . addAll ( requestBodyAdvice )  ;", "}", "}", "METHOD_END"], "methodName": ["setRequestBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( responseBodyAdvice    !  =    null )     {", "this . rResponseBodyAdvice . addAll ( responseBodyAdvice )  ;", "}", "}", "METHOD_END"], "methodName": ["setResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( returnValueHandlers    =  =    null )     {", "this . returnValueHandlers    =    null ;", "} else    {", "this . returnValueHandlers    =    new   HandlerMethodReturnValueHandlerComposite (  )  ;", "this . returnValueHandlers . addHandlers ( returnValueHandlers )  ;", "}", "}", "METHOD_END"], "methodName": ["setReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . sessionAttributeStore    =    sessionAttributeStore ;", "}", "METHOD_END"], "methodName": ["setSessionAttributeStore"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . synchronizeOnSession    =    synchronizeOnSession ;", "}", "METHOD_END"], "methodName": ["setSynchronizeOnSession"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . taskExecutor    =    taskExecutor ;", "}", "METHOD_END"], "methodName": ["setTaskExecutor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "this . webBindingInitializer    =    webBindingInitializer ;", "}", "METHOD_END"], "methodName": ["setWebBindingInitializer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    new   Class <  ?  >  [  ]  {    int . class ,    String . class ,    String . class ,    String . class ,    Map . class ,    Date . class ,    Map . class ,    String . class ,    String . class ,    TestBean . class ,    Errors . class ,    TestBean . class ,    Color . class ,    HttpServletRequest . class ,    HttpServletResponse . class ,    TestBean . class ,    TestBean . class ,    RequestMappingHandlerAdapterIntegrationTests . User . class ,    RequestMappingHandlerAdapterIntegrationTests . OtherUser . class ,    Model . class ,    UriComponentsBuilder . class    }  ;", "String   datePattern    =     \" yyyy . MM . dd \"  ;", "String   formattedDate    =     \"  2  0  1  1  .  0  3  .  1  6  \"  ;", "Date   date    =    new   GregorianCalendar (  2  0  1  1  ,    Calendar . MARCH ,     1  6  )  . getTime (  )  ;", "TestBean   sessionAttribute    =    new   TestBean (  )  ;", "TestBean   requestAttribute    =    new   TestBean (  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" header \"  ,     \" headerValue \"  )  ;", "request . addHeader (  \" anotherHeader \"  ,     \" anotherHeaderValue \"  )  ;", "request . addParameter (  \" datePattern \"  ,    datePattern )  ;", "request . addParameter (  \" dateParam \"  ,    formattedDate )  ;", "request . addParameter (  \" paramByConvention \"  ,     \" paramByConventionValue \"  )  ;", "request . addParameter (  \" age \"  ,     \"  2  5  \"  )  ;", "request . setCookies ( new   Cookie (  \" cookie \"  ,     \"  9  9  \"  )  )  ;", "request . setContent (  \" Hello   World \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "request . setUserPrincipal ( new   RequestMappingHandlerAdapterIntegrationTests . User (  )  )  ;", "request . setContextPath (  \"  / contextPath \"  )  ;", "request . setServletPath (  \"  / main \"  )  ;", "System . setProperty (  \" systemHeader \"  ,     \" systemHeaderValue \"  )  ;", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" pathvar \"  ,     \" pathvarValue \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "request . getSession (  )  . setAttribute (  \" sessionAttribute \"  ,    sessionAttribute )  ;", "request . setAttribute (  \" requestAttribute \"  ,    requestAttribute )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handle \"  ,    parameterTypes )  ;", "ModelAndView   mav    =    handlerAdapter . handle ( request ,    response ,    handlerMethod )  ;", "ModelMap   model    =    mav . getModelMap (  )  ;", "assertEquals (  \" viewName \"  ,    mav . getViewName (  )  )  ;", "assertEquals (  9  9  ,    model . get (  \" cookie \"  )  )  ;", "assertEquals (  \" pathvarValue \"  ,    model . get (  \" pathvar \"  )  )  ;", "assertEquals (  \" headerValue \"  ,    model . get (  \" header \"  )  )  ;", "assertEquals ( date ,    model . get (  \" dateParam \"  )  )  ;", "Map <  ?  ,     ?  >    map    =     (  ( Map <  ?  ,     ?  >  )     ( model . get (  \" headerMap \"  )  )  )  ;", "assertEquals (  \" headerValue \"  ,    map . get (  \" header \"  )  )  ;", "assertEquals (  \" anotherHeaderValue \"  ,    map . get (  \" anotherHeader \"  )  )  ;", "assertEquals (  \" systemHeaderValue \"  ,    model . get (  \" systemHeader \"  )  )  ;", "map    =     (  ( Map <  ?  ,     ?  >  )     ( model . get (  \" paramMap \"  )  )  )  ;", "assertEquals ( formattedDate ,    map . get (  \" dateParam \"  )  )  ;", "assertEquals (  \" paramByConventionValue \"  ,    map . get (  \" paramByConvention \"  )  )  ;", "assertEquals (  \"  / contextPath \"  ,    model . get (  \" value \"  )  )  ;", "TestBean   modelAttr    =     (  ( TestBean )     ( model . get (  \" modelAttr \"  )  )  )  ;", "assertEquals (  2  5  ,    modelAttr . getAge (  )  )  ;", "assertEquals (  \" Set   by   model   method    [ modelAttr ]  \"  ,    modelAttr . getName (  )  )  ;", "assertSame ( modelAttr ,    request . getSession (  )  . getAttribute (  \" modelAttr \"  )  )  ;", "BindingResult   bindingResult    =     (  ( BindingResult )     ( model . get (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" modelAttr \"  )  )  )  )  ;", "assertSame ( modelAttr ,    bindingResult . getTarget (  )  )  ;", "assertEquals (  1  ,    bindingResult . getErrorCount (  )  )  ;", "String   conventionAttrName    =     \" testBean \"  ;", "TestBean   modelAttrByConvention    =     (  ( TestBean )     ( model . get ( conventionAttrName )  )  )  ;", "assertEquals (  2  5  ,    modelAttrByConvention . getAge (  )  )  ;", "assertEquals (  \" Set   by   model   method    [ modelAttrByConvention ]  \"  ,    modelAttrByConvention . getName (  )  )  ;", "assertSame ( modelAttrByConvention ,    request . getSession (  )  . getAttribute ( conventionAttrName )  )  ;", "bindingResult    =     (  ( BindingResult )     ( model . get (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +    conventionAttrName )  )  )  )  ;", "assertSame ( modelAttrByConvention ,    bindingResult . getTarget (  )  )  ;", "assertTrue (  (  ( model . get (  \" customArg \"  )  )    instanceof   Color )  )  ;", "assertEquals ( RequestMappingHandlerAdapterIntegrationTests . User . class ,    model . get (  \" user \"  )  . getClass (  )  )  ;", "assertEquals ( RequestMappingHandlerAdapterIntegrationTests . OtherUser . class ,    model . get (  \" otherUser \"  )  . getClass (  )  )  ;", "assertSame ( sessionAttribute ,    model . get (  \" sessionAttribute \"  )  )  ;", "assertSame ( requestAttribute ,    model . get (  \" requestAttribute \"  )  )  ;", "assertEquals ( new   URI (  \" http :  /  / localhost / contextPath / main / path \"  )  ,    model . get (  \" url \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleAndCompleteSession \"  ,    SessionStatus . class )  ;", "h . handle ( request ,    response ,    handlerMethod )  ;", "assertFalse ( request . getSession (  )  . getAttributeNames (  )  . hasMoreElements (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleAndCompleteSession"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    new   Class <  ?  >  [  ]  {    TestBean . class ,    Errors . class    }  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . setContent (  \" Hello   Server \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleAndValidateRequestBody \"  ,    parameterTypes )  ;", "ModelAndView   mav    =    h . handle ( request ,    response ,    handlerMethod )  ;", "assertNull ( mav )  ;", "assertEquals (  \" Error   count    [  1  ]  \"  ,    new   String ( response . getContentAsByteArray (  )  ,     \" UTF -  8  \"  )  )  ;", "assertEquals ( ACCEPTED . value (  )  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleAndValidateRequestBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   multipartRequest    =    new   MockMultipartHttpServletRequest (  )  ;", "multipartRequest . addFile ( new   MockMultipartFile (  \" requestPart \"  ,     \"  \"  ,     \" text / plain \"  ,     \" content \"  . getBytes (  \" UTF -  8  \"  )  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleAndValidateRequestPart \"  ,    String . class ,    Errors . class ,    Model . class )  ;", "ModelAndView   mav    =    h . handle ( multipartRequest ,    response ,    handlerMethod )  ;", "assertNotNull ( mav )  ;", "assertEquals (  1  ,    mav . getModelMap (  )  . get (  \" error   count \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleAndValidateRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    new   Class <  ?  >  [  ]  {    HttpEntity . class    }  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . setContent (  \" Hello   Server \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleHttpEntity \"  ,    parameterTypes )  ;", "ModelAndView   mav    =    h . handle ( request ,    response ,    handlerMethod )  ;", "assertNull ( mav )  ;", "assertEquals ( ACCEPTED . value (  )  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Handled   requestBody =  [ Hello   Server ]  \"  ,    new   String ( response . getContentAsByteArray (  )  ,     \" UTF -  8  \"  )  )  ;", "assertEquals (  \" headerValue \"  ,    response . getHeader (  \" header \"  )  )  ;", "assertEquals (  \" no - store \"  ,    response . getHeader (  \" Cache - Control \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    new   Class <  ?  >  [  ]  {    HttpEntity . class    }  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . setContent (  \" Hello   Server \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleHttpEntityWithCacheControl \"  ,    parameterTypes )  ;", "ModelAndView   mav    =    h . handle ( request ,    response ,    handlerMethod )  ;", "assertNull ( mav )  ;", "assertEquals ( OK . value (  )  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Handled   requestBody =  [ Hello   Server ]  \"  ,    new   String ( response . getContentAsByteArray (  )  ,     \" UTF -  8  \"  )  )  ;", "assertThat ( response . getHeaderValues (  \" Cache - Control \"  )  ,    Matchers . contains (  \" max - age =  3  6  0  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpEntityWithCacheControl"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    new   Class <  ?  >  [  ]  {    byte [  ]  . class    }  ;", "request . setMethod (  \" POST \"  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . setContent (  \" Hello   Server \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleRequestBody \"  ,    parameterTypes )  ;", "ModelAndView   mav    =    h . handle ( request ,    response ,    handlerMethod )  ;", "assertNull ( mav )  ;", "assertEquals (  \" Handled   requestBody =  [ Hello   Server ]  \"  ,    new   String ( response . getContentAsByteArray (  )  ,     \" UTF -  8  \"  )  )  ;", "assertEquals ( ACCEPTED . value (  )  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   multipartRequest    =    new   MockMultipartHttpServletRequest (  )  ;", "multipartRequest . addFile ( new   MockMultipartFile (  \" requestPart \"  ,     \"  \"  ,     \" text / plain \"  ,     \" content \"  . getBytes (  \" UTF -  8  \"  )  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod (  \" handleRequestPart \"  ,    String . class ,    Model . class )  ;", "ModelAndView   mav    =    h . handle ( multipartRequest ,    response ,    handlerMethod )  ;", "assertNotNull ( mav )  ;", "assertEquals (  \" content \"  ,    mav . getModelMap (  )  . get (  \" requestPart \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    handler . getClass (  )  . getDeclaredMethod ( methodName ,    paramTypes )  ;", "return   new   InvocableMethod ( handler ,    method )  ;", "}", "METHOD_END"], "methodName": ["handlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ConfigurableWebBindingInitializer   bindingInitializer    =    new   ConfigurableWebBindingInitializer (  )  ;", "bindingInitializer . setValidator ( new    . StubValidator (  )  )  ;", "List < HandlerMethodArgumentResolver >    customResolvers    =    new   ArrayList <  >  (  )  ;", "customResolvers . add ( new   ServletWebArgumentResolverAdapter ( new    . ColorArgumentResolver (  )  )  )  ;", "GenericWebApplicationContext   context    =    new   GenericWebApplicationContext (  )  ;", "context . refresh (  )  ;", "handlerAdapter    =    new   RequestMappingHandlerAdapter (  )  ;", "handlerAdapter . setWebBindingInitializer ( bindingInitializer )  ;", "handlerAdapter . setCustomArgumentResolvers ( customResolvers )  ;", "handlerAdapter . setApplicationContext ( context )  ;", "handlerAdapter . setBeanFactory ( context . getBeanFactory (  )  )  ;", "handlerAdapter . afterPropertiesSet (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "request . setMethod (  \" POST \"  )  ;", "RequestContextHolder . setRequestAttributes ( new   ServletWebRequest ( request )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . resetRequestAttributes (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( resolverCount ,    this . handlerAdapter . getArgumentResolvers (  )  . size (  )  )  ;", "assertEquals ( initBinderResolverCount ,    this . handlerAdapter . getInitBinderArgumentResolvers (  )  . size (  )  )  ;", "assertEquals ( handlerCount ,    this . handlerAdapter . getReturnValueHandlers (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertMethodProcessorCount"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerAdapterTests . SessionAttributeController   handler    =    new   RequestMappingHandlerAdapterTests . SessionAttributeController (  )  ;", "this . handlerAdapter . setCacheSeconds (  1  0  0  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod ( handler ,     \" handle \"  )  )  ;", "assertEquals (  \" no - store \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheControlWithSessionAttributes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethod   handlerMethod    =    handlerMethod ( new   RequestMappingHandlerAdapterTests . SimpleController (  )  ,     \" handle \"  )  ;", "this . handlerAdapter . setCacheSeconds (  1  0  0  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertTrue ( response . getHeader (  \" Cache - Control \"  )  . contains (  \" max - age \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheControlWithoutSessionAttributes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    handler . getClass (  )  . getDeclaredMethod ( methodName ,    paramTypes )  ;", "return   new   InvocableMethod ( handler ,    method )  ;", "}", "METHOD_END"], "methodName": ["handlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "this . handlerAdapter . setMessageConverters ( converters )  ;", "this . webAppContext . registerSingleton (  \" jsonpAdvice \"  ,     . JsonpAdvice . class )  ;", "this . webAppContext . refresh (  )  ;", "testJsonp (  \" callback \"  ,    true )  ;", "testJsonp (  \"  _ callback \"  ,    true )  ;", "testJsonp (  \"  _ Call . bAcK \"  ,    true )  ;", "testJsonp (  \"  0  1  2  3  4  5  6  7  8  9 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ _  .  \"  ,    true )  ;", "testJsonp (  \"  < script >  \"  ,    false )  ;", "testJsonp (  \"  ! foo ! bar \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["jsonpResponseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext . registerSingleton (  \" maa \"  ,    RequestMappingHandlerAdapterTests . ModelAttributeAdvice . class )  ;", "this . webAppContext . refresh (  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new   RequestMappingHandlerAdapterTests . SimpleController (  )  ,     \" handle \"  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertEquals (  \" lAttr 1  \"  ,    mav . getModel (  )  . get (  \" attr 1  \"  )  )  ;", "assertEquals (  \" gAttr 2  \"  ,    mav . getModel (  )  . get (  \" attr 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAttributeAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   parent    =    new   StaticWebApplicationContext (  )  ;", "parent . registerSingleton (  \" maa \"  ,     . ModelAttributeAdvice . class )  ;", "parent . refresh (  )  ;", "this . webAppContext . setParent ( parent )  ;", "this . webAppContext . refresh (  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new    . SimpleController (  )  ,     \" handle \"  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertEquals (  \" lAttr 1  \"  ,    mav . getModel (  )  . get (  \" attr 1  \"  )  )  ;", "assertEquals (  \" gAttr 2  \"  ,    mav . getModel (  )  . get (  \" attr 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAttributeAdviceInParentContext"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext . registerSingleton (  \" mapa \"  ,    RequestMappingHandlerAdapterTests . ModelAttributePackageAdvice . class )  ;", "this . webAppContext . registerSingleton (  \" manupa \"  ,    RequestMappingHandlerAdapterTests . ModelAttributeNotUsedPackageAdvice . class )  ;", "this . webAppContext . refresh (  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new   RequestMappingHandlerAdapterTests . SimpleController (  )  ,     \" handle \"  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "ModelAndView   mav    =    this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertEquals (  \" lAttr 1  \"  ,    mav . getModel (  )  . get (  \" attr 1  \"  )  )  ;", "assertEquals (  \" gAttr 2  \"  ,    mav . getModel (  )  . get (  \" attr 2  \"  )  )  ;", "assertEquals ( null ,    mav . getModel (  )  . get (  \" attr 3  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAttributePackageNameAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "this . handlerAdapter . setMessageConverters ( converters )  ;", "this . webAppContext . registerSingleton (  \" rba \"  ,     . ResponseCodeSuppressingAdvice . class )  ;", "this . webAppContext . refresh (  )  ;", "this . request . addHeader (  \" Accept \"  ,    APPLICATION _ JSON _ VALUE )  ;", "this . request . setParameter (  \" c \"  ,     \" callback \"  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new    . SimpleController (  )  ,     \" handleBadRequest \"  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  {  \\  \" status \\  \"  :  4  0  0  ,  \\  \" message \\  \"  :  \\  \" body \\  \"  }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   redirectAttributesResolver    =    new   RedirectAttributesMethodArgumentResolver (  )  ;", "HandlerMethodArgumentResolver   modelResolver    =    new   ModelMethodProcessor (  )  ;", "HandlerMethodReturnValueHandler   viewHandler    =    new   ViewNameMethodReturnValueHandler (  )  ;", "this . handlerAdapter . setArgumentResolvers ( Arrays . asList ( redirectAttributesResolver ,    modelResolver )  )  ;", "this . handlerAdapter . setReturnValueHandlers ( Collections . singletonList ( viewHandler )  )  ;", "this . handlerAdapter . setIgnoreDefaultModelOnRedirect ( true )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "this . request . setAttribute ( DispatcherServlet . OUTPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   FlashMap (  )  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new    . RedirectAttributeController (  )  ,     \" handle \"  ,    Model . class )  ;", "ModelAndView   mav    =    this . handlerAdapter . handle ( request ,    response ,    handlerMethod )  ;", "assertTrue (  \" Without   RedirectAttributes   arg ,    model   should   be   empty \"  ,    mav . getModel (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["setAlwaysUseRedirectAttributes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "this . handlerAdapter . setArgumentResolvers ( Collections . singletonList ( resolver )  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "assertMethodProcessorCount (  1  ,     . INIT _ BINDER _ RESOLVER _ COUNT ,     . HANDLER _ COUNT )  ;", "}", "METHOD_END"], "methodName": ["setArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "this . handlerAdapter . setCustomArgumentResolvers ( Collections . singletonList ( resolver )  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "assertTrue ( this . handlerAdapter . getArgumentResolvers (  )  . contains ( resolver )  )  ;", "assertMethodProcessorCount (  (  (  . RESOLVER _ COUNT )     +     1  )  ,     (  (  . INIT _ BINDER _ RESOLVER _ COUNT )     +     1  )  ,     . HANDLER _ COUNT )  ;", "}", "METHOD_END"], "methodName": ["setCustomArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodReturnValueHandler   handler    =    new   ViewNameMethodReturnValueHandler (  )  ;", "this . handlerAdapter . setCustomReturnValueHandlers ( Collections . singletonList ( handler )  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "assertTrue ( this . handlerAdapter . getReturnValueHandlers (  )  . contains ( handler )  )  ;", "assertMethodProcessorCount (  . RESOLVER _ COUNT ,     . INIT _ BINDER _ RESOLVER _ COUNT ,     (  (  . HANDLER _ COUNT )     +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["setCustomReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodArgumentResolver   resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "this . handlerAdapter . setInitBinderArgumentResolvers ( Collections . singletonList ( resolver )  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "assertMethodProcessorCount (  . RESOLVER _ COUNT ,     1  ,     . HANDLER _ COUNT )  ;", "}", "METHOD_END"], "methodName": ["setInitBinderArgumentResolvers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "HandlerMethodReturnValueHandler   handler    =    new   ModelMethodProcessor (  )  ;", "this . handlerAdapter . setReturnValueHandlers ( Collections . singletonList ( handler )  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "assertMethodProcessorCount (  . RESOLVER _ COUNT ,     . INIT _ BINDER _ RESOLVER _ COUNT ,     1  )  ;", "}", "METHOD_END"], "methodName": ["setReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    new   StaticWebApplicationContext (  )  ;", "this . handlerAdapter    =    new    (  )  ;", "this . handlerAdapter . setApplicationContext ( this . webAppContext )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingHandlerAdapter   adapter    =    new   RequestMappingHandlerAdapter (  )  ;", "adapter . setApplicationContext ( new   StaticWebApplicationContext (  )  )  ;", "adapter . afterPropertiesSet (  )  ;", ". RESOLVER _ COUNT    =    adapter . getArgumentResolvers (  )  . size (  )  ;", ". INIT _ BINDER _ RESOLVER _ COUNT    =    adapter . getInitBinderArgumentResolvers (  )  . size (  )  ;", ". HANDLER _ COUNT    =    adapter . getReturnValueHandlers (  )  . size (  )  ;", "}", "METHOD_END"], "methodName": ["setupOnce"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . request . addHeader (  \" Accept \"  ,    APPLICATION _ JSON _ VALUE )  ;", "this . request . setParameter (  \" c \"  ,    value )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "HandlerMethod   handlerMethod    =    handlerMethod ( new    . SimpleController (  )  ,     \" handleWithResponseEntity \"  )  ;", "this . handlerAdapter . afterPropertiesSet (  )  ;", "this . handlerAdapter . handle ( this . request ,    this . response ,    handlerMethod )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "if    ( validValue )     {", "assertEquals (  (  (  \"  /  *  *  /  \"     +    value )     +     \"  (  {  \\  \" foo \\  \"  :  \\  \" bar \\  \"  }  )  ;  \"  )  ,    this . response . getContentAsString (  )  )  ;", "} else    {", "assertEquals (  \"  {  \\  \" foo \\  \"  :  \\  \" bar \\  \"  }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testJsonp"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterTests"}, {"methodBody": ["METHOD_START", "{", "RequestMapping   requestMapping    =    AnnotatedElementUtils . findMergedAnnotation ( element ,    RequestMapping . class )  ;", "RequestCondition <  ?  >    condition    =     ( element   instanceof   Class )     ?    getCustomTypeCondition (  (  ( Class <  ?  >  )     ( element )  )  )     :    getCustomMethodCondition (  (  ( Method )     ( element )  )  )  ;", "return   requestMapping    !  =    null    ?    createRequestMappingInfo ( requestMapping ,    condition )     :    null ;", "}", "METHOD_END"], "methodName": ["createRequestMappingInfo"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo . Builder   builder    =    RequestMappingInfo . paths ( resolveEmbeddedValuesInPatterns ( requestMapping . path (  )  )  )  . methods ( requestMapping . method (  )  )  . params ( requestMapping . params (  )  )  . headers ( requestMapping . headers (  )  )  . consumes ( requestMapping . consumes (  )  )  . produces ( requestMapping . produces (  )  )  . mappingName ( requestMapping . name (  )  )  ;", "if    ( customCondition    !  =    null )     {", "builder . customCondition ( customCondition )  ;", "}", "return   builder . options ( this . config )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createRequestMappingInfo"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getCustomMethodCondition"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getCustomTypeCondition"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . config . getFileExtensions (  )  ;", "}", "METHOD_END"], "methodName": ["getFileExtensions"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . embeddedValueResolver )     !  =    null )     {", "St   resolved    =    this . embeddedValueResolver . resolveStValue ( value )  ;", "return   resolved    !  =    null    ?    resolved    :     \"  \"  ;", "} else    {", "return   value ;", "}", "}", "METHOD_END"], "methodName": ["resolveCorsAnnotationValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . embeddedValueResolver )     =  =    null )     {", "return   patterns ;", "} else    {", "St [  ]    resolvedPatterns    =    new   St [ patterns . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( patterns . length )  ;    i +  +  )     {", "resolvedPatterns [ i ]     =    this . embeddedValueResolver . resolveStValue ( patterns [ i ]  )  ;", "}", "return   resolvedPatterns ;", "}", "}", "METHOD_END"], "methodName": ["resolveEmbeddedValuesInPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( contentNegotiationManager ,     \" ContentNegotiationManager   must   not   be   null \"  )  ;", "this . contentNegotiationManager    =    contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["setContentNegotiationManager"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . useRegisteredSuffixPatternMatch    =    useRegisteredSuffixPatternMatch ;", "this . useSuffixPatternMatch    =    useRegisteredSuffixPatternMatch    |  |     ( this . useSuffixPatternMatch )  ;", "}", "METHOD_END"], "methodName": ["setUseRegisteredSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . useSuffixPatternMatch    =    useSuffixPatternMatch ;", "}", "METHOD_END"], "methodName": ["setUseSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "this . useTrailingSlashMatch    =    useTrailingSlashMatch ;", "}", "METHOD_END"], "methodName": ["setUseTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  =  =    null )     {", "return ;", "}", "for    ( String   origin    :    origins (  )  )     {", "config . addAllowedOrigin ( resolveCorsAnnotationValue ( origin )  )  ;", "}", "for    ( RequestMethod   method    :    methods (  )  )     {", "config . addAllowedMethod ( method . name (  )  )  ;", "}", "for    ( String   header    :    allowedHeaders (  )  )     {", "config . addAllowedHeader ( resolveCorsAnnotationValue ( header )  )  ;", "}", "for    ( String   header    :    exposedHeaders (  )  )     {", "config . addExposedHeader ( resolveCorsAnnotationValue ( header )  )  ;", "}", "String   allowCredentials    =    resolveCorsAnnotationValue ( allowCredentials (  )  )  ;", "if    (  \" true \"  . equalsIgnoreCase ( allowCredentials )  )     {", "config . setAllowCredentials ( true )  ;", "} else", "if    (  \" false \"  . equalsIgnoreCase ( allowCredentials )  )     {", "config . setAllowCredentials ( false )  ;", "} else", "if    (  !  ( allowCredentials . isEmpty (  )  )  )     {", "throw   new   IllegalStateException (  (  (  (  \"  @ CrossOrigin \\  ' s   allowCredentials   value   must   be    \\  \" true \\  \"  ,     \\  \" false \\  \"  ,     \"     +     \" or   an   empty   string    (  \\  \"  \\  \"  )  :    current   value   is    [  \"  )     +    allowCredentials )     +     \"  ]  \"  )  )  ;", "}", "if    (  (  ( maxAge (  )  )     >  =     0  )     &  &     (  ( config . getMaxAge (  )  )     =  =    null )  )     {", "config . setMaxAge ( maxAge (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["updateCorsConfig"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . useRegisteredSuffixPatternMatch ;", "}", "METHOD_END"], "methodName": ["useRegisteredSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . useSuffixPatternMatch ;", "}", "METHOD_END"], "methodName": ["useSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "return   this . useTrailingSlashMatch ;", "}", "METHOD_END"], "methodName": ["useTrailingSlashMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    RequestMappingHandlerMappingTests . ComposedAnnotationController . class ;", "Method   method    =    clazz . getMethod ( methodName )  ;", "RequestMappingInfo   info    =    this . handlerMapping . getMappingForMethod ( method ,    clazz )  ;", "assertNotNull ( info )  ;", "Set < String >    paths    =    info . getPatternsCondition (  )  . getPatterns (  )  ;", "assertEquals (  1  ,    paths . size (  )  )  ;", "assertEquals ( path ,    paths . iterator (  )  . next (  )  )  ;", "Set < RequestMethod >    methods    =    info . getMethodsCondition (  )  . getMethods (  )  ;", "assertEquals (  1  ,    methods . size (  )  )  ;", "assertEquals ( requestMethod ,    methods . iterator (  )  . next (  )  )  ;", "return   info ;", "}", "METHOD_END"], "methodName": ["assertComposedAnnotationMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "String   methodName    =    requestMethod . name (  )  . toLowerCase (  )  ;", "String   path    =     \"  /  \"     +    methodName ;", "return   assertComposedAMapping ( methodName ,    path ,    requestMethod )  ;", "}", "METHOD_END"], "methodName": ["assertComposedAnnotationMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertComposedAnnotationMapping ( DELETE )  ;", "}", "METHOD_END"], "methodName": ["deleteMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertComposedAnnotationMapping ( GET )  ;", "}", "METHOD_END"], "methodName": ["getMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   requestMappingInfo    =    assertComposedAnnotationMapping ( GET )  ;", "assertArrayEquals ( new   MediaType [  ]  {    MediaType . ALL    }  ,    new   ArrayList ( requestMappingInfo . getConsumesCondition (  )  . getConsumableMediaTypes (  )  )  . toArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMappingOverridesConsumesFromTypeLevelAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertComposedAnnotationMapping ( PATCH )  ;", "}", "METHOD_END"], "methodName": ["patchMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertComposedAnnotationMapping ( POST )  ;", "}", "METHOD_END"], "methodName": ["postMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertComposedAnnotationMapping ( PUT )  ;", "}", "METHOD_END"], "methodName": ["putMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "this . handlerMapping . setEmbeddedValueResolver (  (    value )     -  >     \"  /  $  { pattern }  / bar \"  . equals ( value )     ?     \"  / foo / bar \"     :    value )  ;", "String [  ]    patterns    =    new   String [  ]  {     \"  / foo \"  ,     \"  /  $  { pattern }  / bar \"     }  ;", "String [  ]    result    =    this . handlerMapping . resolveEmbeddedValuesInPatterns ( patterns )  ;", "assertArrayEquals ( new   String [  ]  {     \"  / foo \"  ,     \"  / foo / bar \"     }  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveEmbeddedValuesInPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "RequestMappingInfo   info    =    assertComposedAnnotationMapping (  \" postJson \"  ,     \"  / postJson \"  ,    POST )  ;", "assertEquals ( APPLICATION _ JSON _ VALUE ,    info . getConsumesCondition (  )  . getConsumableMediaTypes (  )  . iterator (  )  . next (  )  . toString (  )  )  ;", "assertEquals ( APPLICATION _ JSON _ VALUE ,    info . getProducesCondition (  )  . getProducibleMediaTypes (  )  . iterator (  )  . next (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveRequestMappingViaComposedAnnotation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "assertFalse ( this . handlerMapping . useRegisteredSuffixPatternMatch (  )  )  ;", "Map < String ,    MediaType >    fileExtensions    =    Collections . singletonMap (  \" json \"  ,    APPLICATION _ JSON )  ;", "PathExtensionContentNegotiationStrategy   strategy    =    new   PathExtensionContentNegotiationStrategy ( fileExtensions )  ;", "ContentNegotiationManager   manager    =    new   ContentNegotiationManager ( strategy )  ;", "this . handlerMapping . setContentNegotiationManager ( manager )  ;", "this . handlerMapping . setUseRegisteredSuffixPatternMatch ( true )  ;", "this . handlerMapping . afterPropertiesSet (  )  ;", "assertTrue ( this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "assertTrue ( this . handlerMapping . useRegisteredSuffixPatternMatch (  )  )  ;", "assertEquals ( Arrays . asList (  \" json \"  )  ,    this . handlerMapping . getFileExtensions (  )  )  ;", "}", "METHOD_END"], "methodName": ["useRegisteredSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MediaType >    fileExtensions    =    Collections . singletonMap (  \" json \"  ,    APPLICATION _ JSON )  ;", "PathExtensionContentNegotiationStrategy   strategy    =    new   PathExtensionContentNegotiationStrategy ( fileExtensions )  ;", "ContentNegotiationManager   manager    =    new   ContentNegotiationManager ( strategy )  ;", "final   Set < String >    extensions    =    new   HashSet <  >  (  )  ;", "RequestMappingHandlerMapping   hm    =    new   RequestMappingHandlerMapping (  )     {", "@ Override", "protected   RequestMappingInfo   getMappingForMethod ( Method   method ,    Class <  ?  >    handlerType )     {", "extensions . addAll ( getFileExtensions (  )  )  ;", "return   super . getMappingForMethod ( method ,    handlerType )  ;", "}", "}  ;", "wac . registerSingleton (  \" testController \"  ,     . ComposedAnnotationController . class )  ;", "wac . refresh (  )  ;", "hm . setContentNegotiationManager ( manager )  ;", "hm . setUseRegisteredSuffixPatternMatch ( true )  ;", "hm . setApplicationContext ( wac )  ;", "hm . afterPropertiesSet (  )  ;", "assertEquals ( Collections . singleton (  \" json \"  )  ,    extensions )  ;", "}", "METHOD_END"], "methodName": ["useRegisteredSuffixPatternMatchInitialization"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "this . handlerMapping . setUseSuffixPatternMatch ( false )  ;", "assertFalse ( this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "this . handlerMapping . setUseRegisteredSuffixPatternMatch ( false )  ;", "assertFalse (  \"  ' false '    registeredSuffixPatternMatch   shouldn ' t   impact   suffixPatternMatch \"  ,    this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "this . handlerMapping . setUseRegisteredSuffixPatternMatch ( true )  ;", "assertTrue (  \"  ' true '    registeredSuffixPatternMatch   should   enable   suffixPatternMatch \"  ,    this . handlerMapping . useSuffixPatternMatch (  )  )  ;", "}", "METHOD_END"], "methodName": ["useSuffixPatternMatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingTests"}, {"methodBody": ["METHOD_START", "{", "testCreate (  (  ( RequestPartIntegrationTests . baseUrl )     +     \"  / commons - resolver / test \"  )  ,     \" Jason \"  )  ;", "testCreate (  (  ( RequestPartIntegrationTests . baseUrl )     +     \"  / commons - resolver / test \"  )  ,     \" Arjen \"  )  ;", "}", "METHOD_END"], "methodName": ["commonsMultipartResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ByteArrayHttpMessageConverter   emptyBodyConverter    =    new   ByteArrayHttpMessageConverter (  )  ;", "emptyBodyConverter . setSupportedMediaTypes ( Collections . singletonList ( APPLICATION _ JSON )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  3  )  ;", "converters . add ( emptyBodyConverter )  ;", "converters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "converters . add ( new   ResourceHttpMessageConverter (  )  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "AllEncompassingFormHttpMessageConverter   converter    =    new   AllEncompassingFormHttpMessageConverter (  )  ;", "converter . setPartConverters ( converters )  ;", "restTemplate    =    new   client . RestTemplate ( new   HttpComponentsClientHttpRequestFactory (  )  )  ;", "restTemplate . setMessageConverters ( Collections . singletonList ( converter )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testCreate (  (  ( RequestPartIntegrationTests . baseUrl )     +     \"  / standard - resolver / test \"  )  ,     \" Jason \"  )  ;", "testCreate (  (  ( RequestPartIntegrationTests . baseUrl )     +     \"  / standard - resolver / test \"  )  ,     \" Arjen \"  )  ;", "}", "METHOD_END"], "methodName": ["standardMultipartResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    boundary    =    MimeTypeUtils . generateMultipartBoundary (  )  ;", "String   boundaryText    =    new   String ( boundary ,     \" US - ASCII \"  )  ;", "Map < String ,    String >    params    =    Collections . singletonMap (  \" boundary \"  ,    boundaryText )  ;", "String   content    =     (  (  (  (  (  (  (  (  (  \"  -  -  \"     +    boundaryText )     +     \"  \\ n \"  )     +     \" Content - Disposition :    form - data ;    name =  \\  \" file \\  \"  ;    filename *  =  \\  \" utf -  8  \\  '  \\  '  % C 3  % A 9 l % C 3  % A 8 ve . txt \\  \"  \\ n \"  )     +     \" Content - Type :    text / plain \\ n \"  )     +     \" Content - Length :     7  \\ n \"  )     +     \"  \\ n \"  )     +     \" content \\ n \"  )     +     \"  -  -  \"  )     +    boundaryText )     +     \"  -  -  \"  ;", "RequestEntity < byte [  ]  >    requestEntity    =    RequestEntity . post ( new   URI (  (  (  . baseUrl )     +     \"  / standard - resolver / spr 1  3  3  1  9  \"  )  )  )  . contentType ( new   MediaType ( MediaType . MULTIPART _ FORM _ DATA ,    params )  )  . body ( content . getBytes ( StandardCharsets . US _ ASCII )  )  ;", "ByteArrayHttpMessageConverter   converter    =    new   ByteArrayHttpMessageConverter (  )  ;", "converter . setSupportedMediaTypes ( Collections . singletonList ( MULTIPART _ FORM _ DATA )  )  ;", "this . restTemplate . setMessageConverters ( Collections . singletonList ( converter )  )  ;", "ResponseEntity < Void >    responseEntity    =    restTemplate . exchange ( requestEntity ,    Void . class )  ;", "assertEquals ( OK ,    responseEntity . getStatusCode (  )  )  ;", "}", "METHOD_END"], "methodName": ["standardMultipartResolverWithEncodedFileName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestPartIntegrationTests . server    =    new   Server (  0  )  ;", "ServletContextHandler   handler    =    new   ServletContextHandler (  )  ;", "handler . setContextPath (  \"  /  \"  )  ;", "Class <  ?  >    config    =    RequestPartIntegrationTests . CommonsMultipartResolverTestConfig . class ;", "ServletHolder   commonsResolverServlet    =    new   ServletHolder ( DispatcherServlet . class )  ;", "commonsResolverServlet . setInitParameter (  \" contextConfigLocation \"  ,    config . getName (  )  )  ;", "commonsResolverServlet . setInitParameter (  \" contextClass \"  ,    AnnotationConfigWebApplicationContext . class . getName (  )  )  ;", "handler . addServlet ( commonsResolverServlet ,     \"  / commons - resolver /  *  \"  )  ;", "config    =    RequestPartIntegrationTests . StandardMultipartResolverTestConfig . class ;", "ServletHolder   standardResolverServlet    =    new   ServletHolder ( DispatcherServlet . class )  ;", "standardResolverServlet . setInitParameter (  \" contextConfigLocation \"  ,    config . getName (  )  )  ;", "standardResolverServlet . setInitParameter (  \" contextClass \"  ,    AnnotationConfigWebApplicationContext . class . getName (  )  )  ;", "standardResolverServlet . getRegistration (  )  . setMultipartConfig ( new   MultipartConfigElement (  \"  \"  )  )  ;", "handler . addServlet ( standardResolverServlet ,     \"  / standard - resolver /  *  \"  )  ;", "RequestPartIntegrationTests . server . setHandler ( handler )  ;", "RequestPartIntegrationTests . server . start (  )  ;", "Connector [  ]    connectors    =    RequestPartIntegrationTests . server . getConnectors (  )  ;", "NetworkConnector   connector    =     (  ( NetworkConnector )     ( connectors [  0  ]  )  )  ;", "RequestPartIntegrationTests . baseUrl    =     \" http :  /  / localhost :  \"     +     ( connector . getLocalPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["startServer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( RequestPartIntegrationTests . server )     !  =    null )     {", "RequestPartIntegrationTests . server . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stopServer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MultiValueMap < String ,    Object >    parts    =    new   LinkedMultiValueMap (  )  ;", "parts . add (  \" json - data \"  ,    new   HttpEntity ( new    . TestData ( basename )  )  )  ;", "parts . add (  \" file - data \"  ,    new   ClassPathResource (  \" logo . jpg \"  ,    getClass (  )  )  )  ;", "parts . add (  \" empty - data \"  ,    new   HttpEntity ( new   byte [  0  ]  )  )  ;", "HttpHeaders   headers    =    new   HttpHeaders (  )  ;", "headers . setContentType ( new   MediaType (  \" application \"  ,     \" octet - stream \"  ,    StandardCharsets . ISO _  8  8  5  9  _  1  )  )  ;", "parts . add (  \" iso -  8  8  5  9  -  1  - data \"  ,    new   HttpEntity ( new   byte [  ]  {     (  ( byte )     (  1  9  6  )  )     }  ,    headers )  )  ;", "URI   location    =    restTemplate . postForLocation ( url ,    parts )  ;", "assertEquals (  (  (  \" http :  /  / localhost :  8  0  8  0  / test /  \"     +    basename )     +     \"  / logo . jpg \"  )  ,    location . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreate"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "String   partName    =     ( requestPart    !  =    null )     ?    requestPart . name (  )     :     \"  \"  ;", "if    ( partName . isEmpty (  )  )     {", "partName    =    methodParam . getParameterName (  )  ;", "if    ( partName    =  =    null )     {", "throw   new   IllegalArgumentException (  (  (  \" Request   part   name   for   argument   type    [  \"     +     ( methodParam . getNestedParameterType (  )  . getName (  )  )  )     +     \"  ]    not   specified ,    and   parameter   name   information   not   found   in   class   file   either .  \"  )  )  ;", "}", "}", "return   partName ;", "}", "METHOD_END"], "methodName": ["getPartName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "resolver . resolveArgument ( paramMultipartFile ,    new   ModelAndViewContainer (  )  ,    new   context . request . ServletWebRequest ( request )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["isMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . multipartRequest . setMethod (  \" PUT \"  )  ;", "Object   actualValue    =    resolver . resolve ( paramMultipartFile ,    null ,    webRequest ,    null )  ;", "assertSame ( multipartFile 1  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["isMultipartRequestPut"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Object   actual    =    resolver . resolveArgument ( paramMultipartFile ,    null ,    webRequest ,    null )  ;", "assertSame ( multipartFile 1  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveMultipartFile"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Object   actual    =    resolver . resolveArgument ( paramMultipartFileArray ,    null ,    webRequest ,    null )  ;", "assertNotNull ( actual )  ;", "assertTrue (  ( actual   instanceof   MultipartFile [  ]  )  )  ;", "MultipartFile [  ]    parts    =     (  ( MultipartFile [  ]  )     ( actual )  )  ;", "assertEquals (  2  ,    parts . length )  ;", "assertEquals ( parts [  0  ]  ,    multipartFile 1  )  ;", "assertEquals ( parts [  1  ]  ,    multipartFile 2  )  ;", "}", "METHOD_END"], "methodName": ["resolveMultipartFileArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Object   actual    =    resolver . resolveArgument ( paramMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actual   instanceof   List )  )  ;", "assertEquals ( Arrays . asList ( multipartFile 1  ,    multipartFile 2  )  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveMultipartFileList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "MultipartFile   expected    =    new   MockMultipartFile (  \" multipartFileNotAnnot \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "request . addFile ( expected )  ;", "request . addFile ( new   MockMultipartFile (  \" otherPart \"  ,     \"  \"  ,     \" text / plain \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   result    =    resolver . resolveArgument ( paramMultipartFileNotAnnot ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof   MultipartFile )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveMultipartFileNotAnnotArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgument ( new   RequestPartMethodArgumentResolverTests . SimpleBean (  \" foo \"  )  ,    paramNamedRequestPart )  ;", "}", "METHOD_END"], "methodName": ["resolveNamedRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgument ( null ,    paramNamedRequestPart )  ;", "}", "METHOD_END"], "methodName": ["resolveNamedRequestPartNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "MultipartFile   expected    =    new   MockMultipartFile (  \" optionalMultipartFile \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "request . addFile ( expected )  ;", "request . addFile ( new   MockMultipartFile (  \" otherPart \"  ,     \"  \"  ,     \" text / plain \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileArgumentNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFile ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileArgumentWithoutMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "MultipartFile   expected    =    new   MockMultipartFile (  \" requestPart \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "request . addFile ( expected )  ;", "request . addFile ( new   MockMultipartFile (  \" otherPart \"  ,     \"  \"  ,     \" text / plain \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    Collections . singletonList ( expected )  ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    Collections . singletonList ( expected )  ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileListNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalMultipartFileList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalMultipartFileListWithoutMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockPart   expected    =    new   MockPart (  \" optionalPart \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "request . addPart ( expected )  ;", "request . addPart ( new   MockPart (  \" otherPart \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartArgumentNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartArgumentWithoutMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockPart   expected    =    new   MockPart (  \" requestPart \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "request . addPart ( expected )  ;", "request . addPart ( new   MockPart (  \" otherPart \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    Collections . singletonList ( expected )  ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( actualValue   instanceof   Optional )  )  ;", "assertEquals (  \" Invalid   result \"  ,    Collections . singletonList ( expected )  ,     (  ( Optional <  ?  >  )     ( actualValue )  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartListNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalPartList ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalPartListWithoutMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "RequestPartMethodArgumentResolverTests . SimpleBean   simpleBean    =    new   RequestPartMethodArgumentResolverTests . SimpleBean (  \" foo \"  )  ;", "given ( messageConverter . canRead ( RequestPartMethodArgumentResolverTests . SimpleBean . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( messageConverter . read ( eq ( RequestPartMethodArgumentResolverTests . SimpleBean . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( simpleBean )  ;", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    mavContainer ,    webRequest ,    new   RequestPartMethodArgumentResolverTests . ValidatingBinderFactory (  )  )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . of ( simpleBean )  ,    actualValue )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    mavContainer ,    webRequest ,    new   RequestPartMethodArgumentResolverTests . ValidatingBinderFactory (  )  )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . of ( simpleBean )  ,    actualValue )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalRequestPartNotPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "Object   actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "actualValue    =    resolver . resolveArgument ( optionalRequestPart ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    Optional . empty (  )  ,    actualValue )  ;", "}", "METHOD_END"], "methodName": ["resolveOptionalRequestPartWithoutMultipartRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "MockPart   expected    =    new   MockPart (  \" part \"  ,     \" Hello   World \"  . getBytes (  )  )  ;", "request . addPart ( expected )  ;", "request . addPart ( new   MockPart (  \" otherPart \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   result    =    resolver . resolveArgument ( paramPart ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof   Part )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolvePartArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "MockPart   part 1     =    new   MockPart (  \" requestPart \"  ,     \" Hello   World    1  \"  . getBytes (  )  )  ;", "MockPart   part 2     =    new   MockPart (  \" requestPart \"  ,     \" Hello   World    2  \"  . getBytes (  )  )  ;", "request . addPart ( part 1  )  ;", "request . addPart ( part 2  )  ;", "request . addPart ( new   MockPart (  \" otherPart \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   result    =    resolver . resolveArgument ( paramPartArray ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof   Part [  ]  )  )  ;", "Part [  ]    parts    =     (  ( Part [  ]  )     ( result )  )  ;", "assertEquals (  2  ,    parts . length )  ;", "assertEquals ( parts [  0  ]  ,    part 1  )  ;", "assertEquals ( parts [  1  ]  ,    part 2  )  ;", "}", "METHOD_END"], "methodName": ["resolvePartArrayArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . setContentType (  \" multipart / form - data \"  )  ;", "MockPart   part 1     =    new   MockPart (  \" requestPart \"  ,     \" Hello   World    1  \"  . getBytes (  )  )  ;", "MockPart   part 2     =    new   MockPart (  \" requestPart \"  ,     \" Hello   World    2  \"  . getBytes (  )  )  ;", "request . addPart ( part 1  )  ;", "request . addPart ( part 2  )  ;", "request . addPart ( new   MockPart (  \" otherPart \"  ,     \" Hello   World \"  . getBytes (  )  )  )  ;", "webRequest    =    new   context . request . ServletWebRequest ( request )  ;", "Object   result    =    resolver . resolveArgument ( paramPartList ,    null ,    webRequest ,    null )  ;", "assertTrue (  ( result   instanceof   List )  )  ;", "assertEquals ( Arrays . asList ( part 1  ,    part 2  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolvePartListArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgument ( new   RequestPartMethodArgumentResolverTests . SimpleBean (  \" foo \"  )  ,    paramRequestPart )  ;", "}", "METHOD_END"], "methodName": ["resolveRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgument ( new   RequestPartMethodArgumentResolverTests . SimpleBean (  \" foo \"  )  ,    paramValidRequestPart )  ;", "}", "METHOD_END"], "methodName": ["resolveRequestPartNotRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "testResolveArgument ( new    . SimpleBean ( null )  ,    paramValidRequestPart )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( MethodArgumentNotValidException   ex )     {", "assertEquals (  \" requestPart \"  ,    ex . getBindingResult (  )  . getObjectName (  )  )  ;", "assertEquals (  1  ,    ex . getBindingResult (  )  . getErrorCount (  )  )  ;", "assertNotNull ( ex . getBindingResult (  )  . getFieldError (  \" name \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveRequestPartNotValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "testResolveArgument ( null ,    paramValid )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( MissingServletException   ex )     {", "assertEquals (  \" requestPart \"  ,    ex . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveRequestPartRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgument ( new   RequestPartMethodArgumentResolverTests . SimpleBean (  \" foo \"  )  ,    paramValidRequestPart )  ;", "}", "METHOD_END"], "methodName": ["resolveRequestPartValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "messageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( messageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "resolver    =    new    ( Collections . singletonList ( messageConverter )  )  ;", "reset ( messageConverter )  ;", "byte [  ]    content    =     \" doesn ' t   matter   as   long   as   not   empty \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "multipartFile 1     =    new   MockMultipartFile (  \" requestPart \"  ,     \"  \"  ,     \" text / plain \"  ,    content )  ;", "multipartFile 2     =    new   MockMultipartFile (  \" requestPart \"  ,     \"  \"  ,     \" text / plain \"  ,    content )  ;", "multipartRequest    =    new   MockMultipartHttpServletRequest (  )  ;", "multipartRequest . addFile ( multipartFile 1  )  ;", "multipartRequest . addFile ( multipartFile 2  )  ;", "multipartRequest . addFile ( new   MockMultipartFile (  \" otherPart \"  ,     \"  \"  ,     \" text / plain \"  ,    content )  )  ;", "webRequest    =    new   ServletWebRequest ( multipartRequest ,    new   MockHttpServletResponse (  )  )  ;", "Method   method    =    ReflectionUtils . findMethod ( getClass (  )  ,     \" handle \"  ,     (  ( Class <  ?  >  [  ]  )     ( null )  )  )  ;", "paramRequestPart    =    new   SynthesizingMethodParameter ( method ,     0  )  ;", "paramRequestPart . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "paramNamedRequestPart    =    new   SynthesizingMethodParameter ( method ,     1  )  ;", "paramValidRequestPart    =    new   SynthesizingMethodParameter ( method ,     2  )  ;", "paramMultipartFile    =    new   SynthesizingMethodParameter ( method ,     3  )  ;", "paramMultipartFileList    =    new   SynthesizingMethodParameter ( method ,     4  )  ;", "paramMultipartFileArray    =    new   SynthesizingMethodParameter ( method ,     5  )  ;", "paramInt    =    new   SynthesizingMethodParameter ( method ,     6  )  ;", "paramMultipartFileNotAnnot    =    new   SynthesizingMethodParameter ( method ,     7  )  ;", "paramMultipartFileNotAnnot . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "paramPart    =    new   SynthesizingMethodParameter ( method ,     8  )  ;", "paramPart . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "paramPartList    =    new   SynthesizingMethodParameter ( method ,     9  )  ;", "paramPartArray    =    new   SynthesizingMethodParameter ( method ,     1  0  )  ;", "paramRequestParamAnnot    =    new   SynthesizingMethodParameter ( method ,     1  1  )  ;", "optionalMultipartFile    =    new   SynthesizingMethodParameter ( method ,     1  2  )  ;", "optionalMultipartFile . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "optionalMultipartFileList    =    new   SynthesizingMethodParameter ( method ,     1  3  )  ;", "optionalMultipartFileList . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "optionalPart    =    new   SynthesizingMethodParameter ( method ,     1  4  )  ;", "optionalPart . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "optionalPartList    =    new   SynthesizingMethodParameter ( method ,     1  5  )  ;", "optionalPartList . initParameterNameDiscovery ( new   LocalVariableTableParameterNameDiscoverer (  )  )  ;", "optionalRequestPart    =    new   SynthesizingMethodParameter ( method ,     1  6  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( resolver . supportsParameter ( paramRequestPart )  )  ;", "assertTrue ( resolver . supportsParameter ( paramNamedRequestPart )  )  ;", "assertTrue ( resolver . supportsParameter ( paramValidRequestPart )  )  ;", "assertTrue ( resolver . supportsParameter ( paramMultipartFile )  )  ;", "assertTrue ( resolver . supportsParameter ( paramMultipartFileList )  )  ;", "assertTrue ( resolver . supportsParameter ( paramMultipartFileArray )  )  ;", "assertFalse ( resolver . supportsParameter ( paramInt )  )  ;", "assertTrue ( resolver . supportsParameter ( paramMultipartFileNotAnnot )  )  ;", "assertTrue ( resolver . supportsParameter ( paramPart )  )  ;", "assertTrue ( resolver . supportsParameter ( paramPartList )  )  ;", "assertTrue ( resolver . supportsParameter ( paramPartArray )  )  ;", "assertFalse ( resolver . supportsParameter ( paramRequestParamAnnot )  )  ;", "assertTrue ( resolver . supportsParameter ( optionalMultipartFile )  )  ;", "assertTrue ( resolver . supportsParameter ( optionalMultipartFileList )  )  ;", "assertTrue ( resolver . supportsParameter ( optionalPart )  )  ;", "assertTrue ( resolver . supportsParameter ( optionalPartList )  )  ;", "assertTrue ( resolver . supportsParameter ( optionalRequestPart )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "given ( messageConverter . canRead ( RequestPartMethodArgumentResolverTests . SimpleBean . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( messageConverter . read ( eq ( RequestPartMethodArgumentResolverTests . SimpleBean . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( argValue )  ;", "ModelAndViewContainer   mavContainer    =    new   ModelAndViewContainer (  )  ;", "Object   actualValue    =    resolver . resolveArgument ( parameter ,    mavContainer ,    webRequest ,    new   RequestPartMethodArgumentResolverTests . ValidatingBinderFactory (  )  )  ;", "assertEquals (  \" Invalid   argument   value \"  ,    argValue ,    actualValue )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( RequestBodyAdvice . class )     =  =    adviceType )     {", "return   this . requestBodyAdvice ;", "} else", "if    (  (  . class )     =  =    adviceType )     {", "return   this . responseBodyAdvice ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unexpected   adviceType :     \"     +    adviceType )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain"}, {"methodBody": ["METHOD_START", "{", "List < Object >    availableAdvice    =    getAdvice ( adviceType )  ;", "if    ( CollectionUtils . isEmpty ( availableAdvice )  )     {", "return   Collections . emptyList (  )  ;", "}", "List < A >    result    =    new   ArrayList <  >  ( availableAdvice . size (  )  )  ;", "for    ( Object   advice    :    availableAdvice )     {", "if    ( advice   instanceof   ControllerAdviceBean )     {", "ControllerAdviceBean   adviceBean    =     (  ( ControllerAdviceBean )     ( advice )  )  ;", "if    (  !  ( adviceBean . isApplicableToBeanType ( parameter . getContainingClass (  )  )  )  )     {", "continue ;", "}", "advice    =    adviceBean . resolveBean (  )  ;", "}", "if    ( adviceType . isAssignableFrom ( advice . getClass (  )  )  )     {", "result . add (  (  ( A )     ( advice )  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getMatchingAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain"}, {"methodBody": ["METHOD_START", "{", "for    ( ResponseBodyAdvice <  ?  >    advice    :    getMatchingAdvice ( returnType ,    ResponseBodyAdvice . class )  )     {", "if    ( advice . supports ( returnType ,    converterType )  )     {", "body    =     (  ( ResponseBodyAdvice < T >  )     ( advice )  )  . beforeBodyWrite (  (  ( T )     ( body )  )  ,    returnType ,    contentType ,    converterType ,    request ,    response )  ;", "}", "}", "return   body ;", "}", "METHOD_END"], "methodName": ["processBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain"}, {"methodBody": ["METHOD_START", "{", "Object   adviceBean    =    new   ControllerAdviceBean ( new   RequestResponseBodyAdviceChainTests . MyControllerAdvice (  )  )  ;", "RequestResponseBodyAdviceChain   chain    =    new   RequestResponseBodyAdviceChain ( Collections . singletonList ( adviceBean )  )  ;", "String   actual    =     (  ( String )     ( chain . beforeBodyWrite ( this . body ,    this . returnType ,    this . contentType ,    this . converterType ,    this . request ,    this . response )  )  )  ;", "assertEquals (  \" body - MyControllerAdvice \"  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["controllerAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "Object   adviceBean    =    new   ControllerAdviceBean ( new   RequestResponseBodyAdviceChainTests . TargetedControllerAdvice (  )  )  ;", "RequestResponseBodyAdviceChain   chain    =    new   RequestResponseBodyAdviceChain ( Collections . singletonList ( adviceBean )  )  ;", "String   actual    =     (  ( String )     ( chain . beforeBodyWrite ( this . body ,    this . returnType ,    this . contentType ,    this . converterType ,    this . request ,    this . response )  )  )  ;", "assertEquals ( this . body ,    actual )  ;", "}", "METHOD_END"], "methodName": ["controllerAdviceNotApplicable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "RequestBodyAdvice   requestAdvice    =    Mockito . mock ( RequestBodyAdvice . class )  ;", "ResponseBodyAdvice < String >    responseAdvice    =    Mockito . mock ( ResponseBodyAdvice . class )  ;", "List < Object >    advice    =    Arrays . asList ( requestAdvice ,    responseAdvice )  ;", "chain    =    new    ( advice )  ;", "HttpInputMessage   wrapped    =    new   ServletServerHttpRequest ( new   MockHttpServletRequest (  )  )  ;", "given ( requestAdvice . supports ( this . paramType ,    String . class ,    this . converterType )  )  . willReturn ( true )  ;", "given ( requestAdvice . beforeBodyRead ( eq ( this . request )  ,    eq ( this . paramType )  ,    eq ( String . class )  ,    eq ( this . converterType )  )  )  . willReturn ( wrapped )  ;", "assertSame ( wrapped ,    chain . beforeBodyRead ( this . request ,    this . paramType ,    String . class ,    this . converterType )  )  ;", "String   modified    =     \" body +  +  \"  ;", "given ( requestAdvice . afterBodyRead ( eq ( this . body )  ,    eq ( this . request )  ,    eq ( this . paramType )  ,    eq ( String . class )  ,    eq ( this . converterType )  )  )  . willReturn ( modified )  ;", "assertEquals ( modified ,    chain . afterBodyRead ( this . body ,    this . request ,    this . paramType ,    String . class ,    this . converterType )  )  ;", "}", "METHOD_END"], "methodName": ["requestBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "RequestBodyAdvice   requestAdvice    =    Mockito . mock ( RequestBodyAdvice . class )  ;", "ResponseBodyAdvice < String >    responseAdvice    =    Mockito . mock ( ResponseBodyAdvice . class )  ;", "List < Object >    advice    =    Arrays . asList ( requestAdvice ,    responseAdvice )  ;", "chain    =    new    ( advice )  ;", "String   expected    =     \" body +  +  \"  ;", "given ( responseAdvice . supports ( this . returnType ,    this . converterType )  )  . willReturn ( true )  ;", "given ( responseAdvice . beforeBodyWrite ( eq ( this . body )  ,    eq ( this . returnType )  ,    eq ( this . contentType )  ,    eq ( this . converterType )  ,    same ( this . request )  ,    same ( this . response )  )  )  . willReturn ( expected )  ;", "String   actual    =     (  ( String )     ( chain . beforeBodyWrite ( this . body ,    this . returnType ,    this . contentType ,    this . converterType ,    this . request ,    this . response )  )  )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "this . body    =     \" body \"  ;", "this . contentType    =    MediaType . TEXT _ PLAIN ;", "this . converterType    =    StringHttpMessageConverter . class ;", "this . paramType    =    new   core . MethodParameter ( ClassUtils . getMethod ( this . getClass (  )  ,     \" handle \"  ,    String . class )  ,     0  )  ;", "this . returnType    =    new   core . MethodParameter ( ClassUtils . getMethod ( this . getClass (  )  ,     \" handle \"  ,    String . class )  ,     (  -  1  )  )  ;", "this . request    =    new   http . server . ServletServerHttpRequest ( new   MockHttpServletRequest (  )  )  ;", "this . response    =    new   http . server . ServletServerHttpResponse ( new   MockHttpServletResponse (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChainTests"}, {"methodBody": ["METHOD_START", "{", "RequestBody   requestBody    =    parameter . getParameterAnnotation ( RequestBody . class )  ;", "return    (  ( requestBody    !  =    null )     &  &     ( requestBody . required (  )  )  )     &  &     (  !  ( parameter . isOptional (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["checkRequired"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "return   s ;", "}", "METHOD_END"], "methodName": ["handle1"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return    4  2  ;", "}", "METHOD_END"], "methodName": ["handle5"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle6"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle7"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "Resource   returnValue    =    new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( resourceMessageConverter . canWrite ( ByteArrayResource . class ,    null )  )  . willReturn ( true )  ;", "given ( resourceMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "given ( resourceMessageConverter . canWrite ( ByteArrayResource . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( true )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResource ,    mavContainer ,    webRequest )  ;", "then ( resourceMessageConverter )  . should ( times (  1  )  )  . write ( any ( ByteArrayResource . class )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    any ( HttpOutputMessage . class )  )  ;", "assertEquals (  2  0  0  ,    servle . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnTypeResource"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "Resource   returnValue    =    new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "servletRequest . addHeader (  \" Range \"  ,     \" bytes =  0  -  5  \"  )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( null )  )  )  . willReturn ( true )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  )  )  . willReturn ( true )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResource ,    mavContainer ,    webRequest )  ;", "then ( resourceRegionMessageConverter )  . should ( times (  1  )  )  . write ( anyCollection (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    argThat (  (    outputMessage )     -  >     ( outputMessage . getHeaders (  )  . getFirst ( HttpHeaders . ACCEPT _ RANGES )  )     =  =     \" bytes \"  )  )  ;", "assertEquals (  2  0  6  ,    servle . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnTypeResourceByteRange"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "Resource   returnValue    =    new   ByteArrayResource (  \" Content \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "servletRequest . addHeader (  \" Range \"  ,     \" illegal \"  )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( null )  )  )  . willReturn ( true )  ;", "given ( resourceRegionMessageConverter . canWrite ( any (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  )  )  . willReturn ( true )  ;", "processor . handleReturnValue ( returnValue ,    returnTypeResource ,    mavContainer ,    webRequest )  ;", "then ( resourceRegionMessageConverter )  . should ( never (  )  )  . write ( anyCollection (  )  ,    eq ( APPLICATION _ OCTET _ STREAM )  ,    any ( HttpOutputMessage . class )  )  ;", "assertEquals (  4  1  6  ,    servle . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnTypeResourceIllegalByteRange"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   accepted    =    MediaType . TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "String   body    =     \" Foo \"  ;", "given ( stringMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( true )  ;", "p . handleReturnValue ( body ,    returnTypeString ,    mavContainer ,    webRequest )  ;", "assertTrue (  \" The   requestHandled   flag   wasn ' t   set \"  ,    mavContainer . isRequestHandled (  )  )  ;", "verify ( stringMessageConverter )  . write ( eq ( body )  ,    eq ( accepted )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "MediaType   accepted    =    MediaType . APPLICATION _ XHTML _ XML ;", "List < MediaType >    supported    =    Collections . singletonList ( MediaType . valueOf (  \" application /  *  + xml \"  )  )  ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( supported )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( true )  ;", "p . handleReturnValue ( body ,    returnTypeStringProduces ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "verify ( stringMessageConverter )  . write ( eq ( body )  ,    eq ( accepted )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueMediaTypeSuffix"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   accepted    =    MediaType . APPLICATION _ ATOM _ XML ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Arrays . asList ( TEXT _ PLAIN )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( false )  ;", "p . handleReturnValue (  \" Foo \"  ,    returnTypeString ,    mavContainer ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueNotAcceptable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   accepted    =    MediaType . TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Accept \"  ,    accepted . toString (  )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    null )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    accepted )  )  . willReturn ( false )  ;", "p . handleReturnValue (  \" Foo \"  ,    returnTypeStringProduces ,    mavContainer ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueNotAcceptableProduces"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "String   body    =     \" Foo \"  ;", "servletRequest . addHeader (  \" Accept \"  ,     \" text /  *  \"  )  ;", "servletRequest . setAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    Collections . singleton ( TEXT _ HTML )  )  ;", "given ( stringMessageConverter . canWrite ( String . class ,    TEXT _ HTML )  )  . willReturn ( true )  ;", "p . handleReturnValue ( body ,    returnTypeStringProduces ,    mavContainer ,    webRequest )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "verify ( stringMessageConverter )  . write ( eq ( body )  ,    eq ( TEXT _ HTML )  ,    isA ( HttpOutputMessage . class )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueProduces"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   contentType    =    MediaType . TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "String   body    =     \" Foo \"  ;", "servletRequest . setContent ( body . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    contentType )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( body )  ;", "Object   result    =    processor . resolveArgument ( paramRequestBodyString ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  ;", "assertEquals (  \" Invalid   argument \"  ,    body ,    result )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   contentType    =    MediaType . TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "servletRequest . setContent (  \" payload \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    contentType )  )  . willReturn ( false )  ;", "p . resolveArgument ( paramRequestBodyString ,    mavContainer ,    webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentCannotRead"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContentType (  \" bad \"  )  ;", "servletRequest . setContent (  \" payload \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "processor . resolveArgument ( paramRequestBodyString ,    mavContainer ,    webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentInvalidContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContent (  \" payload \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( false )  ;", "p . resolveArgument ( paramRequestBodyString ,    mavContainer ,    webRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNoContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setMethod (  \" GET \"  )  ;", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( false )  ;", "assertNull ( processor . resolveArgument ( paramStringNotRequired ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNotGetRequests"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContentType (  \" text / plain \"  )  ;", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "assertNull ( processor . resolveArgument ( paramStringNotRequired ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNotRequiredNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . canRead ( String . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( false )  ;", "assertNull ( processor . resolveArgument ( paramStringNotRequired ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNotRequiredNoContentNoContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContentType (  \" text / plain \"  )  ;", "servletRequest . setContent (  \" body \"  . getBytes (  )  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn (  \" body \"  )  ;", "assertEquals (  \" body \"  ,    processor . resolveArgument ( paramStringNotRequired ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentNotRequiredWithContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "testResolveArgumentWithValidation ( new    . SimpleBean ( null )  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( MethodArgumentNotValidException   e )     {", "assertEquals (  \" simpleBean \"  ,    e . getBindingResult (  )  . getObjectName (  )  )  ;", "assertEquals (  1  ,    e . getBindingResult (  )  . getErrorCount (  )  )  ;", "assertNotNull ( e . getBindingResult (  )  . getFieldError (  \" name \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveArgumentNotValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContentType (  \" text / plain \"  )  ;", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "assertEquals ( Optional . empty (  )  ,    processor . resolveArgument ( paramOptionalString ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentOptionalNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . canRead ( String . class ,    APPLICATION _ OCTET _ STREAM )  )  . willReturn ( false )  ;", "assertEquals ( Optional . empty (  )  ,    processor . resolveArgument ( paramOptionalString ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentOptionalNoContentNoContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContentType (  \" text / plain \"  )  ;", "servletRequest . setContent (  \" body \"  . getBytes (  )  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn (  \" body \"  )  ;", "assertEquals ( Optional . of (  \" body \"  )  ,    processor . resolveArgument ( paramOptionalString ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentOptionalWithContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "servletRequest . setContentType ( TEXT _ PLAIN _ VALUE )  ;", "servletRequest . setContent ( new   byte [  0  ]  )  ;", "given ( stringMessageConverter . canRead ( String . class ,    TEXT _ PLAIN )  )  . willReturn ( true )  ;", "given ( stringMessageConverter . read ( eq ( String . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( null )  ;", "assertNull ( processor . resolveArgument ( paramRequestBodyString ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentRequiredNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "testResolveArgumentWithValidation ( new   RequestResponseBodyMethodProcessorMockTests . SimpleBean (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "stringMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( stringMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "resourceMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( resourceMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "resourceRegionMessageConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( resourceRegionMessageConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( ALL )  )  ;", "processor    =    new   RequestResponseBodyMethodProcessor ( Arrays . asList ( stringMessageConverter ,    resourceMessageConverter ,    resourceRegionMessageConverter )  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "servletRequest    =    new   MockHttpServletRequest (  )  ;", "servletRequest . setMethod (  \" POST \"  )  ;", "servletResponse    =    new   MockHttpServletResponse (  )  ;", "webRequest    =    new   ServletWebRequest ( servletRequest ,    servletResponse )  ;", "Method   methodHandle 1     =    getClass (  )  . getMethod (  \" handle 1  \"  ,    String . class ,    Integer . TYPE )  ;", "paramRequestBodyString    =    new   MethodParameter ( methodHandle 1  ,     0  )  ;", "paramInt    =    new   MethodParameter ( methodHandle 1  ,     1  )  ;", "paramValidBean    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 2  \"  ,     . SimpleBean . class )  ,     0  )  ;", "paramStringNotRequired    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 3  \"  ,    String . class )  ,     0  )  ;", "paramOptionalString    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 4  \"  ,    Optional . class )  ,     0  )  ;", "returnTypeString    =    new   MethodParameter ( methodHandle 1  ,     (  -  1  )  )  ;", "returnTypeInt    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 5  \"  )  ,     (  -  1  )  )  ;", "returnTypeStringProduces    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 6  \"  )  ,     (  -  1  )  )  ;", "returnTypeResource    =    new   MethodParameter ( getClass (  )  . getMethod (  \" handle 7  \"  )  ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" RequestBody   parameter   not   supported \"  ,    processor . supportsParameter ( paramRequestBodyString )  )  ;", "assertFalse (  \" non - RequestBody   parameter   supported \"  ,    processor . supportsParameter ( paramInt )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" ResponseBody   return   type   not   supported \"  ,    processor . supportsReturnType ( returnTypeString )  )  ;", "assertFalse (  \" non - ResponseBody   return   type   supported \"  ,    processor . supportsReturnType ( returnTypeInt )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "MediaType   contentType    =    MediaType . TEXT _ PLAIN ;", "servletRequest . addHeader (  \" Content - Type \"  ,    contentType . toString (  )  )  ;", "servletRequest . setContent (  \" payload \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpMessageConverter <  . SimpleBean >    beanConverter    =    mock ( HttpMessageConverter . class )  ;", "given ( beanConverter . getSupportedMediaTypes (  )  )  . willReturn ( Collections . singletonList ( TEXT _ PLAIN )  )  ;", "given ( beanConverter . canRead (  . SimpleBean . class ,    contentType )  )  . willReturn ( true )  ;", "given ( beanConverter . read ( eq (  . SimpleBean . class )  ,    isA ( HttpInputMessage . class )  )  )  . willReturn ( simpleBean )  ;", "processor    =    new   RequestResponseBodyMethodProcessor ( Collections . singletonList ( beanConverter )  )  ;", "processor . resolveArgument ( paramValidBean ,    mavContainer ,    webRequest ,    new    . ValidatingBinderFactory (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolveArgumentWithValidation"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorMockTests"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiationManagerFactoryBean   factory    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factory . addMediaType (  \" pdf \"  ,    new   MediaType (  \" application \"  ,     \" pdf \"  )  )  ;", "factory . afterPropertiesSet (  )  ;", "processor    =    new    ( Collections . singletonList ( new   StringHttpMessageConverter (  )  )  ,    factory . getObject (  )  )  ;", "assertContentDisposition ( processor ,    false ,     \"  / hello . json \"  ,     \" whitelisted   extension \"  )  ;", "assertContentDisposition ( processor ,    false ,     \"  / hello . pdf \"  ,     \" registered   extension \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello . dataless \"  ,     \" uknown   extension \"  )  ;", "assertContentDisposition ( processor ,    false ,     \"  / hello . json ; a = b \"  ,     \" path   param   shouldn ' t   cause   issue \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello . json ; a = b ; setup . dataless \"  ,     \" uknown   ext   in   path   params \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello . dataless ; a = b ; setup . json \"  ,     \" uknown   ext   in   filename \"  )  ;", "assertContentDisposition ( processor ,    false ,     \"  / hello . json ; a = b ; setup . json \"  ,     \" whitelisted   extensions \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello %  2 Edataless ; a = b ; setup . json \"  ,     \" encoded   dot   in   filename \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello . json ; a = b ; setup %  2 Edataless \"  ,     \" encoded   dot   in   path   params \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / hello . dataless %  3 Bsetup . bat \"  ,     \" encoded   dot   in   path   params \"  )  ;", "this . servletRequest . setAttribute ( FORWARD _ REQUEST _ URI _ ATTRIBUTE ,     \"  / hello . bat \"  )  ;", "assertContentDisposition ( processor ,    true ,     \"  / bonjour \"  ,     \" forwarded   URL \"  )  ;", "this . servletRequest . removeAttribute ( FORWARD _ REQUEST _ URI _ ATTRIBUTE )  ;", "}", "METHOD_END"], "methodName": ["addContentDispositionHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setRequestURI ( requestURI )  ;", "processor . handleReturnValue (  \" body \"  ,    this . returnTypeString ,    this . container ,    this . request )  ;", "String   header    =    servletResponse . getHeader (  \" Content - Disposition \"  )  ;", "if    ( expectContentDisposition )     {", "assertEquals (  (  (  \" Expected    ' Content - Disposition '    header .    Use   case :     '  \"     +    comment )     +     \"  '  \"  )  ,     \" inline ; filename = f . txt \"  ,    header )  ;", "} else    {", "assertNull (  (  (  \" Did   not   expect    ' Content - Disposition '    header .    Use   case :     '  \"     +    comment )     +     \"  '  \"  )  ,    header )  ;", "}", "this . servletRequest    =    new   MockHttpServletRequest (  )  ;", "this . servletResponse    =    new   MockHttpServletResponse (  )  ;", "this . request    =    new   context . request . ServletWebRequest ( servletRequest ,    servletResponse )  ;", "}", "METHOD_END"], "methodName": ["assertContentDisposition"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" defaultCharset \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . defaultCharset (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "assertEquals (  \" UTF -  8  \"  ,    this . servletResponse . getCharacterEncoding (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultCharset"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getImage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["handleAndReturnOutputStream"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "Method   method    =     . ResponseBodyController . class . getMethod (  \" handleWithCharSequence \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "processor . handleReturnValue ( new   StringBuilder (  \" Foo \"  )  ,    returnType ,    container ,    request )  ;", "assertEquals (  \" text / plain ; charset = ISO -  8  8  5  9  -  1  \"  ,    servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  \" Foo \"  ,    servletResponse . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueCharSequence"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \"  *  /  *  \"  )  ;", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" getImage \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   ResourceHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "ClassPathResource   resource    =    new   ClassPathResource (  \" logo . jpg \"  ,    getClass (  )  )  ;", "processor . writeWithMessageConverters ( resource ,    returnType ,    this . request )  ;", "assertEquals (  \" image / jpeg \"  ,    this . servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueImage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" text / plain ;    q =  0  .  5  ,    application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "processor . writeWithMessageConverters (  \" Foo \"  ,    returnTypeString ,    request )  ;", "assertEquals (  \" application / json ; charset = UTF -  8  \"  ,    servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueSortByQuality"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "processor . handleReturnValue (  \" Foo \"  ,    returnTypeString ,    container ,    request )  ;", "assertEquals (  \" text / plain ; charset = ISO -  8  8  5  9  -  1  \"  ,    servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  \" Foo \"  ,    servletResponse . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueString"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . addHeader (  \" Accept \"  ,     \" text / plain ; charset = UTF -  8  \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   ByteArrayHttpMessageConverter (  )  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "processor . writeWithMessageConverters (  \" Foo \"  ,    returnTypeString ,    request )  ;", "assertEquals (  \" text / plain ; charset = UTF -  8  \"  ,    servletResponse . getHeader (  \" Content - Type \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueStringAcceptCharset"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" handleAndReturnOutputStream \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "processor    =    new    ( new   ArrayList <  >  (  )  )  ;", "processor . writeWithMessageConverters ( new   ByteArrayOutputStream (  )  ,    returnType ,    this . request )  ;", "}", "METHOD_END"], "methodName": ["handleReturnValueWithInvalidReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleResponseBody \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleResponseBody (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertFalse ( content . contains (  \"  \\  \" withView 1  \\  \"  :  \\  \" with \\  \"  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" withView 2  \\  \"  :  \\  \" with \\  \"  \"  )  )  ;", "assertFalse ( content . contains (  \"  \\  \" withoutView \\  \"  :  \\  \" without \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonJsonViewWithResponseBodyAndJsonMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleResponseBody \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 XmlHttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleResponseBody (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertFalse ( content . contains (  \"  < withView 1  > with <  / withView 1  >  \"  )  )  ;", "assertTrue ( content . contains (  \"  < withView 2  > with <  / withView 2  >  \"  )  )  ;", "assertFalse ( content . contains (  \"  < withoutView > without <  / withoutView >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonJsonViewWithResponseBodyAndXmlMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleResponseEntity \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleResponseEntity (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertFalse ( content . contains (  \"  \\  \" withView 1  \\  \"  :  \\  \" with \\  \"  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" withView 2  \\  \"  :  \\  \" with \\  \"  \"  )  )  ;", "assertFalse ( content . contains (  \"  \\  \" withoutView \\  \"  :  \\  \" without \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonJsonViewWithResponseEntityAndJsonMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleResponseEntity \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 XmlHttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewResponseBodyAdvice (  )  )  )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleResponseEntity (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertFalse ( content . contains (  \"  < withView 1  > with <  / withView 1  >  \"  )  )  ;", "assertTrue ( content . contains (  \"  < withView 2  > with <  / withView 2  >  \"  )  )  ;", "assertFalse ( content . contains (  \"  < withoutView > without <  / withoutView >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonJsonViewWithResponseEntityAndXmlMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleSubType \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleSubType (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertTrue ( content . contains (  \"  \\  \" id \\  \"  :  1  2  3  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" name \\  \"  :  \\  \" foo \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonSubType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleSubTypeList \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleSubTypeList (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertTrue ( content . contains (  \"  \\  \" id \\  \"  :  1  2  3  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" name \\  \"  :  \\  \" foo \\  \"  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" id \\  \"  :  4  5  6  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" name \\  \"  :  \\  \" bar \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonSubTypeList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . JacksonController . class . getMethod (  \" handleTypeInfoList \"  )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  ,    method )  ;", "MethodParameter   methodReturnType    =    handlerMethod . getReturnType (  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "Object   returnValue    =    new   RequestResponseBodyMethodProcessorTests . JacksonController (  )  . handleTypeInfoList (  )  ;", "processor . handleReturnValue ( returnValue ,    methodReturnType ,    this . container ,    this . request )  ;", "String   content    =    this . servletResponse . getContentAsString (  )  ;", "assertTrue ( content . contains (  \"  \\  \" type \\  \"  :  \\  \" foo \\  \"  \"  )  )  ;", "assertTrue ( content . contains (  \"  \\  \" type \\  \"  :  \\  \" bar \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["jacksonTypeInfoList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType (  \" application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", ". SimpleBean   result    =     (  (  . SimpleBean )     ( processor . resolveArgument ( paramSimpleBean ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentClassJson"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \" foobarbaz \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType (  \" application / json \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "String   result    =     (  ( String )     ( processor . resolveArgument ( paramString ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" foobarbaz \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentClassString"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  [  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  ,     {  \\  \" name \\  \"     :     \\  \" Robert \\  \"  }  ]  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List <  . SimpleBean >    result    =     (  ( List <  . SimpleBean >  )     ( processor . resolveArgument ( paramGenericList ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . get (  0  )  . getName (  )  )  ;", "assertEquals (  \" Robert \"  ,    result . get (  1  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentParameterizedType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \" fruit = apple & vegetable = kale \"  ;", "this . servletRequest . setMethod (  \" GET \"  )  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ FORM _ URLENCODED _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   AllEncompassingFormHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "MultiValueMap < String ,    String >    result    =     (  ( MultiValueMap < String ,    String >  )     ( processor . resolveArgument ( paramMultiValueMap ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" apple \"  ,    result . getFirst (  \" fruit \"  )  )  ;", "assertEquals (  \" kale \"  ,    result . getFirst (  \" vegetable \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentRawTypeFromParameterizedType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContent ( new   byte [  0  ]  )  ;", "this . servletRequest . setContentType (  \" text / plain \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "processor    =    new    ( converters )  ;", "processor . resolveArgument ( paramString ,    container ,    request ,    factory )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentRequiredNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContent ( new   byte [  0  ]  )  ;", "this . servletRequest . setContentType (  \" text / plain \"  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    Collections . singletonList ( new   StringHttpMessageConverter (  )  )  ;", "List < Object >    advice    =    Collections . singletonList ( new    . EmptyRequestBodyAdvice (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters ,    advice )  ;", "String   arg    =     (  ( String )     ( processor . resolveArgument ( paramString ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( arg )  ;", "assertEquals (  \" default   value   for   empty   body \"  ,    arg )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentRequiredNoContentDefaultValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . MyParameterizedController . class . getMethod (  \" handleDto \"  ,    RequestResponseBodyMethodProcessorTests . Identifiable . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . MySimpleParameterizedController (  )  ,    method )  ;", "MethodParameter   methodParam    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "String   content    =     \"  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "RequestResponseBodyMethodProcessorTests . SimpleBean   result    =     (  ( RequestResponseBodyMethodProcessorTests . SimpleBean )     ( processor . resolveArgument ( methodParam ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentTypeVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContent (  \"  \\  \" foo \\  \"  \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ UTF 8  _ VALUE )  ;", "Method   method    =     . MyControllerImplementingInterface . class . getMethod (  \" handle \"  ,    Object . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . MyControllerImplementingInterface (  )  ,    method )  ;", "MethodParameter   methodParameter    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "String   value    =     (  ( String )     ( processor . readWithMessageConverters ( this . request ,    methodParameter ,    methodParameter . getGenericParameterType (  )  )  )  )  ;", "assertEquals (  \" foo \"  ,    value )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentTypeVariableWithGenericInterface"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . MyParameterizedController . class . getMethod (  \" handleDto \"  ,    RequestResponseBodyMethodProcessorTests . Identifiable . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . MySimpleParameterizedController (  )  ,    method )  ;", "MethodParameter   methodParam    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "String   content    =     \"  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "HttpMessageConverter < Object >    target    =    new   MappingJackson 2 HttpMessageConverter (  )  ;", "HttpMessageConverter <  ?  >    proxy    =    ProxyFactory . getProxy ( HttpMessageConverter . class ,    new   SingletonTargetSource ( target )  )  ;", "converters . add ( proxy )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "RequestResponseBodyMethodProcessorTests . SimpleBean   result    =     (  ( RequestResponseBodyMethodProcessorTests . SimpleBean )     ( processor . resolveArgument ( methodParam ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentTypeVariableWithNonGenericConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  {  \\  \" withView 1  \\  \"     :     \\  \" with \\  \"  ,     \\  \" withView 2  \\  \"     :     \\  \" with \\  \"  ,     \\  \" withoutView \\  \"     :     \\  \" without \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "Method   method    =     . JacksonController . class . getMethod (  \" handleRequestBody \"  ,     . JacksonViewBean . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . JacksonController (  )  ,    method )  ;", "MethodParameter   methodParameter    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewRequestBodyAdvice (  )  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", ". JacksonViewBean   result    =     (  (  . JacksonViewBean )     ( processor . resolveArgument ( methodParameter ,    this . container ,    this . request ,    this . factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" with \"  ,    result . getWithView 1  (  )  )  ;", "assertNull ( result . getWithView 2  (  )  )  ;", "assertNull ( result . getWithoutView (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentWithJacksonJsonView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  < root >  \"     +     (  (  \"  < withView 1  > with <  / withView 1  >  \"     +     \"  < withView 2  > with <  / withView 2  >  \"  )     +     \"  < withoutView > without <  / withoutView >  <  / root >  \"  )  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ XML _ VALUE )  ;", "Method   method    =     . JacksonController . class . getMethod (  \" handleRequestBody \"  ,     . JacksonViewBean . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . JacksonController (  )  ,    method )  ;", "MethodParameter   methodParameter    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 XmlHttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewRequestBodyAdvice (  )  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", ". JacksonViewBean   result    =     (  (  . JacksonViewBean )     ( processor . resolveArgument ( methodParameter ,    this . container ,    this . request ,    this . factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" with \"  ,    result . getWithView 1  (  )  )  ;", "assertNull ( result . getWithView 2  (  )  )  ;", "assertNull ( result . getWithoutView (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgumentWithJacksonJsonViewAndXmlMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  {  \\  \" withView 1  \\  \"     :     \\  \" with \\  \"  ,     \\  \" withView 2  \\  \"     :     \\  \" with \\  \"  ,     \\  \" withoutView \\  \"     :     \\  \" without \\  \"  }  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "Method   method    =     . JacksonController . class . getMethod (  \" handleHttpEntity \"  ,    HttpEntity . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . JacksonController (  )  ,    method )  ;", "MethodParameter   methodParameter    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewRequestBodyAdvice (  )  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpEntity <  . JacksonViewBean >    result    =     (  ( HttpEntity <  . JacksonViewBean >  )     ( processor . resolveArgument ( methodParameter ,    this . container ,    this . request ,    this . factory )  )  )  ;", "assertNotNull ( result )  ;", "assertNotNull ( result . getBody (  )  )  ;", "assertEquals (  \" with \"  ,    result . getBody (  )  . getWithView 1  (  )  )  ;", "assertNull ( result . getBody (  )  . getWithView 2  (  )  )  ;", "assertNull ( result . getBody (  )  . getWithoutView (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveHttpEntityArgumentWithJacksonJsonView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "String   content    =     \"  < root >  \"     +     (  (  \"  < withView 1  > with <  / withView 1  >  \"     +     \"  < withView 2  > with <  / withView 2  >  \"  )     +     \"  < withoutView > without <  / withoutView >  <  / root >  \"  )  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ XML _ VALUE )  ;", "Method   method    =     . JacksonController . class . getMethod (  \" handleHttpEntity \"  ,    HttpEntity . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new    . JacksonController (  )  ,    method )  ;", "MethodParameter   methodParameter    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 XmlHttpMessageConverter (  )  )  ;", "HttpEntityMethodProcessor   processor    =    new   HttpEntityMethodProcessor ( converters ,    null ,    Collections . singletonList ( new   JsonViewRequestBodyAdvice (  )  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "HttpEntity <  . JacksonViewBean >    result    =     (  ( HttpEntity <  . JacksonViewBean >  )     ( processor . resolveArgument ( methodParameter ,    this . container ,    this . request ,    this . factory )  )  )  ;", "assertNotNull ( result )  ;", "assertNotNull ( result . getBody (  )  )  ;", "assertEquals (  \" with \"  ,    result . getBody (  )  . getWithView 1  (  )  )  ;", "assertNull ( result . getBody (  )  . getWithView 2  (  )  )  ;", "assertNull ( result . getBody (  )  . getWithoutView (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveHttpEntityArgumentWithJacksonJsonViewAndXmlMessageConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . MyParameterizedControllerWithList . class . getMethod (  \" handleDto \"  ,    List . class )  ;", "HandlerMethod   handlerMethod    =    new   HandlerMethod ( new   RequestResponseBodyMethodProcessorTests . MySimpleParameterizedControllerWithList (  )  ,    method )  ;", "MethodParameter   methodParam    =    handlerMethod . getMethodParameters (  )  [  0  ]  ;", "String   content    =     \"  [  {  \\  \" name \\  \"     :     \\  \" Jad \\  \"  }  ,     {  \\  \" name \\  \"     :     \\  \" Robert \\  \"  }  ]  \"  ;", "this . servletRequest . setContent ( content . getBytes (  \" UTF -  8  \"  )  )  ;", "this . servletRequest . setContentType ( APPLICATION _ JSON _ VALUE )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < RequestResponseBodyMethodProcessorTests . SimpleBean >    result    =     (  ( List < RequestResponseBodyMethodProcessorTests . SimpleBean >  )     ( processor . resolveArgument ( methodParam ,    container ,    request ,    factory )  )  )  ;", "assertNotNull ( result )  ;", "assertEquals (  \" Jad \"  ,    result . get (  0  )  . getName (  )  )  ;", "assertEquals (  \" Robert \"  ,    result . get (  1  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveParameterizedWithTypeVariableArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "container    =    new   ModelAndViewContainer (  )  ;", "servletRequest    =    new   MockHttpServletRequest (  )  ;", "servletRequest . setMethod (  \" POST \"  )  ;", "servletResponse    =    new   MockHttpServletResponse (  )  ;", "request    =    new   ServletWebRequest ( servletRequest ,    servletResponse )  ;", "this . factory    =    new    . ValidatingBinderFactory (  )  ;", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" handle \"  ,    List . class ,     . SimpleBean . class ,    MultiValueMap . class ,    String . class )  ;", "paramGenericList    =    new   MethodParameter ( method ,     0  )  ;", "paramSimpleBean    =    new   MethodParameter ( method ,     1  )  ;", "paramMultiValueMap    =    new   MethodParameter ( method ,     2  )  ;", "paramString    =    new   MethodParameter ( method ,     3  )  ;", "returnTypeString    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . ResponseBodyController . class . getMethod (  \" handle \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "assertTrue (  \" Failed   to   recognize   type - level    @ ResponseBody \"  ,    processor . supportsReturnType ( returnType )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnTypeResponseBodyOnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    RequestResponseBodyMethodProcessorTests . TestRestController . class . getMethod (  \" handle \"  )  ;", "MethodParameter   returnType    =    new   MethodParameter ( method ,     (  -  1  )  )  ;", "List < HttpMessageConverter <  ?  >  >    converters    =    new   ArrayList <  >  (  )  ;", "converters . add ( new   StringHttpMessageConverter (  )  )  ;", "RequestResponseBodyMethodProcessor   processor    =    new   RequestResponseBodyMethodProcessor ( converters )  ;", "assertTrue (  \" Failed   to   recognize   type - level    @ RestController \"  ,    processor . supportsReturnType ( returnType )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnTypeRestController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "if    ( this . sendFailed )     {", "return ;", "}", "this . complete    =    true ;", "if    (  ( this . handler )     !  =    null )     {", "this . handler . complete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "if    ( this . sendFailed )     {", "return ;", "}", "this . complete    =    true ;", "this . failure    =    ex ;", "if    (  ( this . handler )     !  =    null )     {", "this . handler . completeWithError ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["completeWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "return   this . timeout ;", "}", "METHOD_END"], "methodName": ["getTimeout"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    handler ;", "for    (  . DataWithMediaType   sendAttempt    :    this . earlySendAttempts )     {", "sendInternal ( sendAttempt . getData (  )  ,    sendAttempt . getMediaType (  )  )  ;", "}", "this . earlySendAttempts . clear (  )  ;", "if    ( this . complete )     {", "if    (  ( this . failure )     !  =    null )     {", "this . handler . completeWithError ( this . failure )  ;", "} else    {", "this . handler . complete (  )  ;", "}", "} else    {", "this . handler . onTimeout ( this . timeoutCallback )  ;", "this . handler . onError ( this . errorCallback )  ;", "this . handler . onCompletion ( this . completionCallback )  ;", "}", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "this . completionCallback . setDelegate ( callback )  ;", "}", "METHOD_END"], "methodName": ["onCompletion"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "this . errorCallback . setDelegate ( callback )  ;", "}", "METHOD_END"], "methodName": ["onError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "this . timeoutCallback . setDelegate ( callback )  ;", "}", "METHOD_END"], "methodName": ["onTimeout"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "send ( object ,    null )  ;", "}", "METHOD_END"], "methodName": ["send"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  !  ( this . complete )  )  ,     \" ResponseBodyEmitter   is   already   set   complete \"  )  ;", "sendInternal ( object ,    mediaType )  ;", "}", "METHOD_END"], "methodName": ["send"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . handler )     !  =    null )     {", "try    {", "this . handler . send ( object ,    mediaType )  ;", "}    catch    ( IOException   ex )     {", "this . sendFailed    =    true ;", "throw   ex ;", "}    catch    ( Throwable   ex )     {", "this . sendFailed    =    true ;", "throw   new   IllegalStateException (  (  \" Failed   to   send    \"     +    object )  ,    ex )  ;", "}", "} else    {", "this . earlySendAttempts . add ( new    . DataWithMediaType ( object ,    mediaType )  )  ;", "}", "}", "METHOD_END"], "methodName": ["sendInternal"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseEntity . class ,    String . class )  )  )  ;", "assertFalse ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResolvableType . forClassWithGenerics ( ResponseEntity . class ,    ResolvableType . forClassWithGenerics ( AtomicReference . class ,    String . class )  )  )  )  )  ;", "assertFalse ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseEntity . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["doesNotSupportReturnTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   type    =    ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseBodyEmitter . class )  ;", "ResponseBodyEmitter   emitter    =    new   ResponseBodyEmitter (  )  ;", "this . handler . handleReturnValue ( emitter ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "ResponseBodyEmitterReturnValueHandlerTests . SimpleBean   bean    =    new   ResponseBodyEmitterReturnValueHandlerTests . SimpleBean (  )  ;", "bean . setId (  1 L )  ;", "bean . setName (  \" Joe \"  )  ;", "emitter . send ( bean )  ;", "emitter . send (  \"  \\ n \"  )  ;", "bean . setId (  2 L )  ;", "bean . setName (  \" John \"  )  ;", "emitter . send ( bean )  ;", "emitter . send (  \"  \\ n \"  )  ;", "bean . setId (  3 L )  ;", "bean . setName (  \" Jason \"  )  ;", "emitter . send ( bean )  ;", "assertEquals (  (  \"  {  \\  \" id \\  \"  :  1  ,  \\  \" name \\  \"  :  \\  \" Joe \\  \"  }  \\ n \"     +     (  \"  {  \\  \" id \\  \"  :  2  ,  \\  \" name \\  \"  :  \\  \" John \\  \"  }  \\ n \"     +     \"  {  \\  \" id \\  \"  :  3  ,  \\  \" name \\  \"  :  \\  \" Jason \\  \"  }  \"  )  )  ,    this . response . getContentAsString (  )  )  ;", "MockAsyncContext   asyncContext    =     (  ( MockAsyncContext )     ( this . request . getAsyncContext (  )  )  )  ;", "assertNull ( asyncContext . getDispatchedPath (  )  )  ;", "emitter . complete (  )  ;", "assertNotNull ( asyncContext . getDispatchedPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyEmitter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "AsyncWebRequest   asyncWebRequest    =    mock ( AsyncWebRequest . class )  ;", "WebAsyncUtils . getAsyncManager ( this . request )  . setAsyncWebRequest ( asyncWebRequest )  ;", "ResponseBodyEmitter   emitter    =    new   ResponseBodyEmitter (  1  9  0  0  0 L )  ;", "emitter . onError ( mock ( Consumer . class )  )  ;", "emitter . onCompletion ( mock ( Runnable . class )  )  ;", "MethodParameter   type    =    ResolvableMethod . on (  . TestController . class )  . resolveReturnType ( ResponseBodyEmitter . class )  ;", "this . handler . handleReturnValue ( emitter ,    type ,    this . mavContainer ,    this . webRequest )  ;", "verify ( asyncWebRequest )  . addErrorHandler ( any ( Consumer . class )  )  ;", "verify ( asyncWebRequest ,    times (  2  )  )  . addCompletionHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest )  . startAsync (  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyEmitterWithErrorValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "AsyncWebRequest   asyncWebRequest    =    mock ( AsyncWebRequest . class )  ;", "WebAsyncUtils . getAsyncManager ( this . request )  . setAsyncWebRequest ( asyncWebRequest )  ;", "ResponseBodyEmitter   emitter    =    new   ResponseBodyEmitter (  1  9  0  0  0 L )  ;", "emitter . onTimeout ( mock ( Runnable . class )  )  ;", "emitter . onCompletion ( mock ( Runnable . class )  )  ;", "MethodParameter   type    =    ResolvableMethod . on (  . TestController . class )  . resolveReturnType ( ResponseBodyEmitter . class )  ;", "this . handler . handleReturnValue ( emitter ,    type ,    this . mavContainer ,    this . webRequest )  ;", "verify ( asyncWebRequest )  . setTimeout (  1  9  0  0  0 L )  ;", "verify ( asyncWebRequest )  . addTimeoutHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest ,    times (  2  )  )  . addCompletionHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest )  . startAsync (  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyEmitterWithTimeoutValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Accept \"  ,     \" text / event - stream \"  )  ;", "MethodParameter   type    =    ResolvableMethod . on (  . TestController . class )  . resolveReturnType ( Flux . class ,    String . class )  ;", "EmitterProcessor < String >    processor    =    EmitterProcessor . create (  )  ;", "this . handler . handleReturnValue ( processor ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / event - stream ; charset = UTF -  8  \"  ,    this . response . getContentType (  )  )  ;", "processor . onNext (  \" foo \"  )  ;", "processor . onNext (  \" bar \"  )  ;", "processor . onNext (  \" baz \"  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" data : foo \\ n \\ ndata : bar \\ n \\ ndata : baz \\ n \\ n \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyFlux"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "EmitterProcessor < String >    processor    =    EmitterProcessor . create (  )  ;", "ResponseEntity < Flux < String >  >    entity    =    ResponseEntity . ok (  )  . body ( processor )  ;", "ResolvableType   bodyType    =    ResolvableType . forClassWithGenerics ( Flux . class ,    String . class )  ;", "MethodParameter   type    =    ResolvableMethod . on (  . TestController . class )  . resolveReturnType ( ResponseEntity . class ,    bodyType )  ;", "this . handler . handleReturnValue ( entity ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "processor . onNext (  \" foo \"  )  ;", "processor . onNext (  \" bar \"  )  ;", "processor . onNext (  \" baz \"  )  ;", "processor . onComplete (  )  ;", "assertEquals (  \" foobarbaz \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntityFlux"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   type    =    ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseEntity . class ,    SseEmitter . class )  ;", "ResponseEntity < SseEmitter >    entity    =    ResponseEntity . ok (  )  . header (  \" foo \"  ,     \" bar \"  )  . body ( new   SseEmitter (  )  )  ;", "this . handler . handleReturnValue ( entity ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / event - stream ; charset = UTF -  8  \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" bar \"  ,    this . response . getHeader (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntitySse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   type    =    ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseEntity . class ,    SseEmitter . class )  ;", "ResponseEntity <  ?  >    entity    =    ResponseEntity . noContent (  )  . header (  \" foo \"  ,     \" bar \"  )  . build (  )  ;", "this . handler . handleReturnValue ( entity ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertFalse ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  4  ,    this . response . getStatus (  )  )  ;", "assertEquals ( Collections . singletonList (  \" bar \"  )  ,    this . response . getHeaders (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntitySseNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    Arrays . asList ( new   StringHttpMessageConverter (  )  ,    new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "this . handler    =    new    ( converters )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   ServletWebRequest ( this . request ,    this . response )  ;", "AsyncWebRequest   asyncWebRequest    =    new   StandardServletAsyncWebRequest ( this . request ,    this . response )  ;", "WebAsyncUtils . getAsyncManager ( this . webRequest )  . setAsyncWebRequest ( asyncWebRequest )  ;", "this . request . setAsyncSupported ( true )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   type    =    ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( SseEmitter . class )  ;", "SseEmitter   emitter    =    new   SseEmitter (  )  ;", "this . handler . handleReturnValue ( emitter ,    type ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / event - stream ; charset = UTF -  8  \"  ,    this . response . getContentType (  )  )  ;", "ResponseBodyEmitterReturnValueHandlerTests . SimpleBean   bean 1     =    new   ResponseBodyEmitterReturnValueHandlerTests . SimpleBean (  )  ;", "bean 1  . setId (  1 L )  ;", "bean 1  . setName (  \" Joe \"  )  ;", "ResponseBodyEmitterReturnValueHandlerTests . SimpleBean   bean 2     =    new   ResponseBodyEmitterReturnValueHandlerTests . SimpleBean (  )  ;", "bean 2  . setId (  2 L )  ;", "bean 2  . setName (  \" John \"  )  ;", "emitter . send ( SseEmitter . event (  )  . comment (  \" a   test \"  )  . name (  \" update \"  )  . id (  \"  1  \"  )  . reconnectTime (  5  0  0  0 L )  . data ( bean 1  )  . data ( bean 2  )  )  ;", "assertEquals (  (  \"  : a   test \\ n \"     +     (  (  (  (  (  \" event : update \\ n \"     +     \" id :  1  \\ n \"  )     +     \" retry :  5  0  0  0  \\ n \"  )     +     \" data :  {  \\  \" id \\  \"  :  1  ,  \\  \" name \\  \"  :  \\  \" Joe \\  \"  }  \\ n \"  )     +     \" data :  {  \\  \" id \\  \"  :  2  ,  \\  \" name \\  \"  :  \\  \" John \\  \"  }  \\ n \"  )     +     \"  \\ n \"  )  )  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["sseEmitter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseBodyEmitter . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( SseEmitter . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResponseEntity . class ,    ResponseBodyEmitter . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( Flux . class ,    String . class )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( ResolvableMethod . on ( ResponseBodyEmitterReturnValueHandlerTests . TestController . class )  . resolveReturnType ( ResolvableType . forClassWithGenerics ( ResponseEntity . class ,    ResolvableType . forClassWithGenerics ( Flux . class ,    String . class )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . initialize ( this . handler )  ;", "ArgumentCaptor < Runnable >    captor    =    ArgumentCaptor . forClass ( Runnable . class )  ;", "verify ( this . handler )  . onTimeout ( any (  )  )  ;", "verify ( this . handler )  . onCompletion ( captor . capture (  )  )  ;", "Runnable   runnable    =    mock ( Runnable . class )  ;", "this . emitter . onCompletion ( runnable )  ;", "assertNotNull ( captor . getValue (  )  )  ;", "captor . getValue (  )  . run (  )  ;", "verify ( runnable )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["onCompletionAfterHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "Runnable   runnable    =    mock ( Runnable . class )  ;", "this . e . onCompletion ( runnable )  ;", "this . e . initialize ( this . handler )  ;", "ArgumentCaptor < Runnable >    captor    =    ArgumentCaptor . forClass ( Runnable . class )  ;", "verify ( this . handler )  . onTimeout ( any (  )  )  ;", "verify ( this . handler )  . onCompletion ( captor . capture (  )  )  ;", "assertNotNull ( captor . getValue (  )  )  ;", "captor . getValue (  )  . run (  )  ;", "verify ( runnable )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["onCompletionBeforeHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . initialize ( this . handler )  ;", "ArgumentCaptor < Runnable >    captor    =    ArgumentCaptor . forClass ( Runnable . class )  ;", "verify ( this . handler )  . onTimeout ( captor . capture (  )  )  ;", "verify ( this . handler )  . onCompletion ( any (  )  )  ;", "Runnable   runnable    =    mock ( Runnable . class )  ;", "this . emitter . onTimeout ( runnable )  ;", "assertNotNull ( captor . getValue (  )  )  ;", "captor . getValue (  )  . run (  )  ;", "verify ( runnable )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["onTimeoutAfterHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "Runnable   runnable    =    mock ( Runnable . class )  ;", "this . e . onTimeout ( runnable )  ;", "this . e . initialize ( this . handler )  ;", "ArgumentCaptor < Runnable >    captor    =    ArgumentCaptor . forClass ( Runnable . class )  ;", "verify ( this . handler )  . onTimeout ( captor . capture (  )  )  ;", "verify ( this . handler )  . onCompletion ( any (  )  )  ;", "assertNotNull ( captor . getValue (  )  )  ;", "captor . getValue (  )  . run (  )  ;", "verify ( runnable )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["onTimeoutBeforeHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . initialize ( this . handler )  ;", "verify ( this . handler )  . onTimeout ( any (  )  )  ;", "verify ( this . handler )  . onError ( any (  )  )  ;", "verify ( this . handler )  . onCompletion ( any (  )  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . emitter . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "this . emitter . complete (  )  ;", "verify ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . complete (  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendAfterHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . initialize ( this . handler )  ;", "verify ( this . handler )  . onTimeout ( any (  )  )  ;", "verify ( this . handler )  . onError ( any (  )  )  ;", "verify ( this . handler )  . onCompletion ( any (  )  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . emitter . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "this . emitter . completeWithError ( ex )  ;", "verify ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . completeWithError ( ex )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendAfterHandlerInitializedWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . emitter . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "this . emitter . complete (  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "this . emitter . initialize ( this . handler )  ;", "verify ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . complete (  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendBeforeHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "IllegalStateException   ex    =    new   IllegalStateException (  )  ;", "this . e . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . e . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "this . e . completeWithError ( ex )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "this . e . initialize ( this . handler )  ;", "verify ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . send (  \" bar \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . completeWithError ( ex )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendBeforeHandlerInitializedWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . emitter . complete (  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "this . emitter . initialize ( this . handler )  ;", "verify ( this . handler ,    times (  2  )  )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verify ( this . handler )  . complete (  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendDuplicateBeforeHandlerInitialized"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . complete (  )  ;", "this . emitter . send (  \" foo \"  )  ;", "}", "METHOD_END"], "methodName": ["sendFailsAfterComplete"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . initialize ( this . handler )  ;", "verify ( this . handler )  . onTimeout ( any (  )  )  ;", "verify ( this . handler )  . onError ( any (  )  )  ;", "verify ( this . handler )  . onCompletion ( any (  )  )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "IOException   failure    =    new   IOException (  )  ;", "doThrow ( failure )  . when ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "try    {", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IOException   ex )     {", "}", "verify ( this . handler )  . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "verifyNoMoreInteractions ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["sendWithError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "MockitoAnnotations . initMocks ( this )  ;", "this . emitter    =    new    (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterTests"}, {"methodBody": ["METHOD_START", "{", "if    ( webRequest   instanceof   ServletWebRequest )     {", "ServletWebRequest   servletWebRequest    =     (  ( ServletWebRequest )     ( webRequest )  )  ;", "HttpServletRequest   request    =    servletWebRequest . getRequest (  )  ;", "HttpServletResponse   response    =    servletWebRequest . getResponse (  )  ;", "if    (  ( response    !  =    null )     &  &     ( response . isCommitted (  )  )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Async   timeout   for    \"     +     ( request . getMethod (  )  )  )     +     \"     [  \"  )     +     ( request . getRequestURI (  )  )  )     +     \"  ]  \"  )  )  ;", "}", "return   null ;", "}", "}", "return   handleInternal ( ex ,    null ,    headers ,    status ,    webRequest )  ;", "}", "METHOD_END"], "methodName": ["handleAsyncRequestTimeoutException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleBindException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleConversionNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "HttpHeaders   headers    =    new   HttpHeaders (  )  ;", "if    ( ex   instanceof   HttpRequestMethodNotSupportedException )     {", "HttpStatus   status    =    HttpStatus . METHOD _ NOT _ ALLOWED ;", "return   handleHttpRequestMethodNotSupported (  (  ( HttpRequestMethodNotSupportedException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   HttpMediaTypeNotSupportedException )     {", "HttpStatus   status    =    HttpStatus . UNSUPPORTED _ MEDIA _ TYPE ;", "return   handleHttpMediaTypeNotSupported (  (  ( HttpMediaTypeNotSupportedException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   HttpMediaTypeNotAcceptableException )     {", "HttpStatus   status    =    HttpStatus . NOT _ ACCEPTABLE ;", "return   handleHttpMediaTypeNotAcceptable (  (  ( HttpMediaTypeNotAcceptableException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   MissingPathVariableException )     {", "HttpStatus   status    =    HttpStatus . INTERNAL _ SERVER _ ERROR ;", "return   handleMissingPathVariable (  (  ( MissingPathVariableException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   MissingServletRequestParameterException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleMissingServletRequestParameter (  (  ( MissingServletRequestParameterException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   ServletRequestBindingException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleServletRequestBindingException (  (  ( ServletRequestBindingException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   ConversionNotSupportedException )     {", "HttpStatus   status    =    HttpStatus . INTERNAL _ SERVER _ ERROR ;", "return   handleConversionNotSupported (  (  ( ConversionNotSupportedException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   TypeMismatchException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleTypeMismatch (  (  ( TypeMismatchException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   HttpMessageNotReadableException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleHttpMessageNotReadable (  (  ( HttpMessageNotReadableException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   HttpMessageNotWritableException )     {", "HttpStatus   status    =    HttpStatus . INTERNAL _ SERVER _ ERROR ;", "return   handleHttpMessageNotWritable (  (  ( HttpMessageNotWritableException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   MethodArgumentNotValidException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleMethodArgumentNotValid (  (  ( MethodArgumentNotValidException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   MissingServletRequestPartException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleMissingServletRequestPart (  (  ( MissingServletRequestPartException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   BindException )     {", "HttpStatus   status    =    HttpStatus . BAD _ REQUEST ;", "return   handleBindException (  (  ( BindException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   NoHandlerFoundException )     {", "HttpStatus   status    =    HttpStatus . NOT _ FOUND ;", "return   handleNoHandlerFoundException (  (  ( NoHandlerFoundException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else", "if    ( ex   instanceof   AsyncRequestTimeoutException )     {", "HttpStatus   status    =    HttpStatus . SERVICE _ UNAVAILABLE ;", "return   handleAsyncRequestTimeoutException (  (  ( AsyncRequestTimeoutException )     ( ex )  )  ,    headers ,    status ,    request )  ;", "} else    {", "if    ( logger . isWarnEnabled (  )  )     {", "logger . warn (  (  \" Unknown   exception   type :     \"     +     ( ex . getClass (  )  . getName (  )  )  )  )  ;", "}", "HttpStatus   status    =    HttpStatus . INTERNAL _ SERVER _ ERROR ;", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "}", "METHOD_END"], "methodName": ["handleException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( INTERNAL _ SERVER _ ERROR . equals ( status )  )     {", "request . setAttribute ( ERROR _ EXCEPTION _ ATTRIBUTE ,    ex ,    SCOPE _ REQUEST )  ;", "}", "return   new   http . ResponseEntity ( body ,    headers ,    status )  ;", "}", "METHOD_END"], "methodName": ["handleExceptionInternal"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotAcceptable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "List < MediaType >    mediaTypes    =    ex . getSupportedMediaTypes (  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( mediaTypes )  )  )     {", "headers . setAccept ( mediaTypes )  ;", "}", "return   handleInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotReadable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotWritable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "ResponseEntityExceptionHandler . pageNotFoundLogger . warn ( ex . getMessage (  )  )  ;", "Set < HttpMethod >    supportedMethods    =    ex . getSupportedHttpMethods (  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( supportedMethods )  )  )     {", "headers . setAllow ( supportedMethods )  ;", "}", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleHttpRequestMethodNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleMethodArgumentNotValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleMissingPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleNoHandlerFoundException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleServletRequestBindingException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "return   handleExceptionInternal ( ex ,    null ,    headers ,    status ,    request )  ;", "}", "METHOD_END"], "methodName": ["handleTypeMismatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler"}, {"methodBody": ["METHOD_START", "{", "testException ( new   AsyncRequestTimeoutException (  )  )  ;", "}", "METHOD_END"], "methodName": ["asyncRequestTimeoutException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   BindException ( new   Object (  )  ,     \" name \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["bindException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   cxt    =    new   StaticWebApplicationContext (  )  ;", "cxt . registerSingleton (  \" exceptionHandler \"  ,     . ApplicationExceptionHandler . class )  ;", "cxt . refresh (  )  ;", "ExceptionHandlerExceptionResolver   resolver    =    new   ExceptionHandlerExceptionResolver (  )  ;", "resolver . setApplicationContext ( cxt )  ;", "resolver . afterPropertiesSet (  )  ;", "ServletRequestBindingException   ex    =    new   ServletRequestBindingException (  \" message \"  )  ;", "resolver . resolveException ( this . servletRequest ,    this . servletResponse ,    null ,    ex )  ;", "assertEquals (  4  0  0  ,    this . servletResponse . getStatus (  )  )  ;", "assertEquals (  \" error   content \"  ,    this . servletResponse . getContentAsString (  )  )  ;", "assertEquals (  \" someHeaderValue \"  ,    this . servletResponse . getHeader (  \" someHeader \"  )  )  ;", "}", "METHOD_END"], "methodName": ["controllerAdvice"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   ConversionNotSupportedException ( new   Object (  )  ,    Object . class ,    null )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["conversionNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "List < MediaType >    acceptable    =    Arrays . asList ( APPLICATION _ ATOM _ XML ,    APPLICATION _ XML )  ;", "Exception   ex    =    new   HttpMediaTypeNotSupportedException ( MediaType . APPLICATION _ JSON ,    acceptable )  ;", "ResponseEntity < Object >    responseEntity    =    testException ( ex )  ;", "assertEquals ( acceptable ,    responseEntity . getHeaders (  )  . getAccept (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   HttpMediaTypeNotAcceptableException (  \"  \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["httpMediaTypeNotAcceptable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   HttpMessageNotReadableException (  \" message \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["httpMessageNotReadable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   HttpMessageNotWritableException (  \"  \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["httpMessageNotWritable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "List < String >    supported    =    Arrays . asList (  \" POST \"  ,     \" DELETE \"  )  ;", "Exception   ex    =    new   HttpRequestMethodNotSupportedException (  \" GET \"  ,    supported )  ;", "< Object >    responseEntity    =    testException ( ex )  ;", "assertEquals ( EnumSet . of ( POST ,    DELETE )  ,    responseEntity . getHeaders (  )  . getAllow (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpRequestMethodNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    Mockito . mock ( MethodArgumentNotValidException . class )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["methodArgumentNotValid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" handle \"  ,    String . class )  ;", "MethodParameter   parameter    =    new   MethodParameter ( method ,     0  )  ;", "Exception   ex    =    new   bind . MissingPathVariableException (  \" param \"  ,    parameter )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["missingPathVariable"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   MissingServletRequestParameterException (  \" param \"  ,     \" type \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["missingServletRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   MissingServletRequestPartException (  \" partName \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["missingServletRequestPart"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ServletServerHttpRequest   req    =    new   ServletServerHttpRequest ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / resource \"  )  )  ;", "ex    =    new   NoHandlerFound ( req . getMethod (  )  . toString (  )  ,    req . getServletRequest (  )  . getRequestURI (  )  ,    req . getHeaders (  )  )  ;", "test ( ex )  ;", "}", "METHOD_END"], "methodName": ["noHandlerFoundException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   ServletRequestBindingException (  \" message \"  )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["servletRequestBindingException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . servletResponse    =    new   MockHttpServletResponse (  )  ;", "this . request    =    new   ServletWebRequest ( this . servletRequest ,    this . servletResponse )  ;", "this . exceptionHandlerSupport    =    new    . ApplicationExceptionHandler (  )  ;", "this . defaultExceptionResolver    =    new   DefaultHandlerExceptionResolver (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Class < ResponseEntityExceptionHandler >    clazz    =    ResponseEntityExceptionHandler . class ;", "Method   handleExceptionMethod    =    clazz . getMethod (  \" handleException \"  ,    Exception . class ,    WebRequest . class )  ;", "ExceptionHandler   annotation    =    handleExceptionMethod . getAnnotation ( ExceptionHandler . class )  ;", "List < Class <  ?  >  >    exceptionTypes    =    Arrays . asList ( annotation . value (  )  )  ;", "for    ( Method   method    :    DefaultHandlerExceptionResolver . class . getDeclaredMethods (  )  )     {", "Class <  ?  >  [  ]    paramTypes    =    method . getParameterTypes (  )  ;", "if    (  ( method . getName (  )  . startsWith (  \" handle \"  )  )     &  &     (  ( paramTypes . length )     =  =     4  )  )     {", "String   name    =    paramTypes [  0  ]  . getSimpleName (  )  ;", "assertTrue (  (  \"  @ ExceptionHandler   is   missing    \"     +    name )  ,    exceptionTypes . contains ( paramTypes [  0  ]  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["supportsAllDefaultHandlerExceptionResolverExceptionTypes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity < Object >    responseEntity    =    this . exceptionHandlerSupport . handleException ( ex ,    this . request )  ;", "if    ( INTERNAL _ SERVER _ ERROR . equals ( responseEntity . getStatusCode (  )  )  )     {", "assertSame ( ex ,    this . servletRequest . getAttribute (  \" exception \"  )  )  ;", "}", "this . defaultExceptionResolver . resolveException ( this . servletRequest ,    this . servletResponse ,    null ,    ex )  ;", "assertEquals ( this . servletResponse . getStatus (  )  ,    responseEntity . getStatusCode (  )  . value (  )  )  ;", "return   responseEntity ;", "}", "METHOD_END"], "methodName": ["testException"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   TypeMismatchException (  \" foo \"  ,    String . class )  ;", "testException ( ex )  ;", "}", "METHOD_END"], "methodName": ["typeMismatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . AcceptHeadersController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" html \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml ,    text / html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html ; q =  0  .  9  ,    application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / msword \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  6  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["acceptHeaders"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "doTestAdaptedHandleMethods ( ServletAnnotationControllerHandlerMethodTests . MyAdaptedController . class )  ;", "}", "METHOD_END"], "methodName": ["adaptedHandleMethods"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "doTestAdaptedHandleMethods ( ServletAnnotationControllerHandlerMethodTests . MyAdaptedController 2  . class )  ;", "}", "METHOD_END"], "methodName": ["adaptedHandleMethods2"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "doTestAdaptedHandleMethods ( ServletAnnotationControllerHandlerMethodTests . MyAdaptedController 3  . class )  ;", "}", "METHOD_END"], "methodName": ["adaptedHandleMethods3"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . AmbiguousParamsController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" noParams \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "request . addParameter (  \" myParam \"  ,     \"  4  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myParam -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguousParams"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . AmbiguousPathAndRequestMethodController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bug / EXISTING \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Pattern \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguousPathAndRequestMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    new   NotReadableMessageConverter (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" application / pdf \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status   code \"  ,    SC _ BAD _ REQUEST ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["badRequestRequestBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MyBinderInitializingCommandProvidingFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \" myDefaultName \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - String : myDefaultName - typeMismatch - tb 1  - myOriginalValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["binderInitializingCommandProvidingFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . BindingCookieValueController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "request . setCookies ( new   Cookie (  \" date \"  ,     \"  2  0  0  8  -  1  1  -  1  8  \"  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  2  0  0  8  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["bindingCookieValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . TestControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / method \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "}", "METHOD_END"], "methodName": ["bridgeMethods"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ArticleController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / method \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "}", "METHOD_END"], "methodName": ["bridgeMethodsWithMultipleInterfaces"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" webBindingInitializer \"  ,    new   MyWebBindingInitializer (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . MyCommandProvidingFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \" myDefaultName \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - String : myDefaultName - typeMismatch - tb 1  - myOriginalValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["commandProvidingFormControllerWithCustomEditor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ConsumesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" application / pdf \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" pdf \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" text / html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" text \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  1  5  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["consumes"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ContentTypeHeadersController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" application / pdf \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" pdf \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" text / html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" text \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  1  5  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["contentTypeHeaders"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . CustomAnnotationController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status   code \"  ,    SC _ OK ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["customAnnotationController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . CustomMapEditorController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "request . addParameter (  \" map \"  ,     \" bar \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  { foo = bar }  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["customMapEditor"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBinding"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \" param 3  \"  ,     \"  3  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  3  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithAdditionalSetter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ValidatedDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" x \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - x - null \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithConversionError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \"  ! param 2  \"  ,     \" false \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithFieldDefault"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \"  ! param 2  \"  ,     \" false \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - false -  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithFieldDefaultFallback"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \"  _ param 2  \"  ,     \" on \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithFieldMarker"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \"  _ param 2  \"  ,     \" on \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - false -  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithFieldMarkerFallback"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ValidatedDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - null - null \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithMissingParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . OptionalDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \" param 3  \"  ,     \"  3  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  3  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . OptionalDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" x \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - x - null \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithOptionalAndConversionError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ValidatedDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \" optionalParam \"  ,     \"  8  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  8  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithOptionalParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ValidatedDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \" param 3  \"  ,     \"  3  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" value 1  - true -  3  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithResult"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ValidatedDataClassController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bind \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \" true \"  )  ;", "request . addParameter (  \" param 3  \"  ,     \"  3  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" null - true -  3  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataClassBindingWithValidationError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   ppc    =    new   RootBeanDefinition (  . class )  ;", "ppc . getPropertyValues (  )  . add (  \" properties \"  ,     \" myKey = foo \"  )  ;", "wac . registerBeanDefinition (  \" ppc \"  ,    ppc )  ;", "}  ,     . DefaultExpressionValueParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / myPath . do \"  )  ;", "request . setContextPath (  \"  / myApp \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "System . setProperty (  \" myHeader \"  ,     \" bar \"  )  ;", "try    {", "getServlet (  )  . service ( request ,    response )  ;", "}    finally    {", "System . clearProperty (  \" myHeader \"  )  ;", "}", "assertEquals (  \" foo - bar -  / myApp \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultExpressionParameters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . DefaultValueParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" foo -  - bar \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultParameters"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( controllerClass )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath 1  . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \"  2  \"  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath 2  . do \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \"  2  \"  )  ;", "request . addHeader (  \" header 1  \"  ,     \"  1  0  \"  )  ;", "request . setCookies ( new   Cookie (  \" cookie 1  \"  ,     \"  3  \"  )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test - value 1  -  2  -  1  0  -  3  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath 3  . do \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \"  2  \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \"  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test - name 1  -  2  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath 4  . do \"  )  ;", "request . addParameter (  \" param 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" param 2  \"  ,     \"  2  \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test - name 1  - typeMismatch \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestAdaptedHandleMethods"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   vrDef    =    new   RootBeanDefinition (  . class )  ;", "vrDef . getPropertyValues (  )  . add (  \" suffix \"  ,     \"  . jsp \"  )  ;", "wac . registerBeanDefinition (  \" viewResolver \"  ,    vrDef )  ;", "}  ,     . EmptyParameterListHandlerMethodController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / emptyParameterListHandler \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", ". EmptyParameterListHandlerMethodController . called    =    false ;", "getServlet (  )  . service ( request ,    response )  ;", "assertTrue (  . EmptyParameterListHandlerMethodController . called )  ;", "assertEquals (  \"  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyParameterListHandleMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ControllerWithEmptyValueMapping . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setContextPath (  \"  / foo \"  )  ;", "request . setServletPath (  \"  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyValueMapping"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "initServletWithControllers (  . ChildController . class )  ;", "fail (  \" Expected    ' method   already   mapped '    error \"  )  ;", "}    catch    ( BeanCreationException   e )     {", "assertTrue (  (  ( e . getCause (  )  )    instanceof   IllegalStateException )  )  ;", "assertTrue ( e . getCause (  )  . getMessage (  )  . contains (  \" Ambiguous   mapping \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["equivalentMappingsWithSameMethodName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ControllerWithErrorThrown . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setContextPath (  \"  / foo \"  )  ;", "request . setServletPath (  \"  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["errorThrownFromHandlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RedirectAttributesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / messages - response - entity \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  3  0  2  ,    response . getStatus (  )  )  ;", "assertEquals (  \"  / messages /  1  ? name = value \"  ,    response . getRedirectedUrl (  )  )  ;", "assertEquals (  \" yay !  \"  ,    RequestContextUtils . getOutputFlashMap ( request )  . get (  \" successMessage \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / messages /  1  \"  )  ;", "request . setQueryString (  \" name = value \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Got :    yay !  \"  ,    response . getContentAsString (  )  )  ;", "assertTrue ( RequestContextUtils . getOutputFlashMap ( request )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["flashAttributesWithResponseEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MyFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - name 1  - typeMismatch - tb 1  - myValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["formController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseEntityController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / foo \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text /  *  ,     *  /  *  \"  )  ;", "request . addHeader (  \" MyRequestHeader \"  ,     \" MyValue \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  1  ,    response . getStatus (  )  )  ;", "assertEquals ( requestBody ,    response . getContentAsString (  )  )  ;", "assertEquals (  \" MyValue \"  ,    response . getHeader (  \" MyResponseHeader \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / bar \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" MyValue \"  ,    response . getHeader (  \" MyResponseHeader \"  )  )  ;", "assertEquals (  4  0  4  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "List < HttpMessageConverter <  ?  >  >    messageConverters    =    new   ArrayList <  >  (  )  ;", "messageConverters . add ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "messageConverters . add ( new   Jaxb 2 RootElementHttpMessageConverter (  )  )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    messageConverters )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . ResponseEntityController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test - entity \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" application / xml \"  ,    response . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"    standalone =  \\  \" yes \\  \"  ?  >  \"     +     \"  < testEntity >  < name > Foo   Bar <  / name >  <  / testEntity >  \"  )  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpEntityWithContentType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseEntityController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" HEAD \"  ,     \"  / baz \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" MyValue \"  ,    response . getHeader (  \" MyResponseHeader \"  )  )  ;", "assertEquals (  4  ,    response . getContentLength (  )  )  ;", "assertTrue (  (  ( response . getContentAsByteArray (  )  . length )     =  =     0  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / baz \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" MyValue \"  ,    response . getHeader (  \" MyResponseHeader \"  )  )  ;", "assertEquals (  4  ,    response . getContentLength (  )  )  ;", "assertEquals (  \" body \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpHead"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseEntityController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" HEAD \"  ,     \"  / stores \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" v 1  \"  ,    response . getHeader (  \" h 1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["httpHeadExplicit"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseEntityController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" OPTIONS \"  ,     \"  / baz \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" GET , HEAD \"  ,    response . getHeader (  \" Allow \"  )  )  ;", "assertTrue (  (  ( response . getContentAsByteArray (  )  . length )     =  =     0  )  )  ;", "}", "METHOD_END"], "methodName": ["httpOptions"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PATCH \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   world !  \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text /  *  ,     *  /  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals ( requestBody ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpPatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . LateBindingFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - name 1  - typeMismatch - tb 1  - myValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["lateBindingFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "ModelAndViewResolver [  ]    mavResolvers    =    new   ModelAndViewResolver [  ]  {    new   MyModelAndViewResolver (  )     }  ;", "adapterDef . getPropertyValues (  )  . add (  \" modelAndViewResolvers \"  ,    mavResolvers )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . ModelAndViewResolverController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["mavResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MethodNotAllowedController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status \"  ,    SC _ METHOD _ NOT _ ALLOWED ,    response . getStatus (  )  )  ;", "String   allowHeader    =    response . getHeader (  \" Allow \"  )  ;", "assertNotNull (  \" No   Allow   header \"  ,    allowHeader )  ;", "Set < String >    allowedMethods    =    new   HashSet <  >  (  )  ;", "allowedMethods . addAll ( Arrays . asList ( StringUtils . delimitedListToStringArray ( allowHeader ,     \"  ,     \"  )  )  )  ;", "assertEquals (  \" Invalid   amount   of   supported   methods \"  ,     6  ,    allowedMethods . size (  )  )  ;", "assertTrue (  \" PUT   not   allowed \"  ,    allowedMethods . contains (  \" PUT \"  )  )  ;", "assertTrue (  \" DELETE   not   allowed \"  ,    allowedMethods . contains (  \" DELETE \"  )  )  ;", "assertTrue (  \" HEAD   not   allowed \"  ,    allowedMethods . contains (  \" HEAD \"  )  )  ;", "assertTrue (  \" TRACE   not   allowed \"  ,    allowedMethods . contains (  \" TRACE \"  )  )  ;", "assertTrue (  \" OPTIONS   not   allowed \"  ,    allowedMethods . contains (  \" OPTIONS \"  )  )  ;", "assertTrue (  \" POST   not   allowed \"  ,    allowedMethods . contains (  \" POST \"  )  )  ;", "}", "METHOD_END"], "methodName": ["methodNotAllowed"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ModelAndViewController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  2  2  ,    response . getStatus (  )  )  ;", "assertEquals (  \" view \"  ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAndViewWithStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ModelAndViewController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / exception \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  2  2  ,    response . getStatus (  )  )  ;", "assertEquals (  \" view \"  ,    response . getForwardedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["modelAndViewWithStatusInExceptionHandler"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MyModelFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myPath - name 1  - typeMismatch - tb 1  - myValue - yourValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["modelFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / singleString \"  )  ;", "request . addFile ( new   MockMultipartFile (  \" content \"  ,     \" Juergen \"  . getBytes (  )  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipartFileAsSingleString"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / stringArray \"  )  ;", "request . addFile ( new   MockMultipartFile (  \" content \"  ,     \" Juergen \"  . getBytes (  )  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipartFileAsStringArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockMultipartHttpServletRequest   request    =    new   MockMultipartHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / stringArray \"  )  ;", "request . addFile ( new   MockMultipartFile (  \" content \"  ,     \" Juergen \"  . getBytes (  )  )  )  ;", "request . addFile ( new   MockMultipartFile (  \" content \"  ,     \" Eva \"  . getBytes (  )  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen - Eva \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipartFilesAsStringArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . NegatedContentTypeHeadersController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" application / pdf \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" pdf \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / something \"  )  ;", "request . setContentType (  \" text / html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" non - pdf \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["negatedContentTypeHeaders"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MyNullCommandController . class )  ;", "getServlet (  )  . init ( new   MockServletConfig (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath \"  )  ;", "request . setUserPrincipal ( new   ServletAnnotationControllerHandlerMethodTests . OtherPrincipal (  )  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["nullCommandController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . OptionalParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" null - false - null \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["optionalParamMissing"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . OptionalParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" id \"  ,     \" val \"  )  ;", "request . addParameter (  \" flag \"  ,     \" true \"  )  ;", "request . addHeader (  \" header \"  ,     \" otherVal \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" val - true - otherVal \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["optionalParamPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "List < HttpMessageConverter <  ?  >  >    messageConverters    =    new   ArrayList <  >  (  )  ;", "messageConverters . add ( new   StringHttpMessageConverter (  )  )  ;", "messageConverters . add ( new   SimpleMessageConverter ( new   MediaType (  \" application \"  ,     \" json \"  )  ,    MediaType . ALL )  )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    messageConverters )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "request . setContent (  \" Hello   World \"  . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / json ,    text / javascript ,     *  /  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   content - type \"  ,     \" application / json ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getHeader (  \" Content - Type \"  )  )  ;", "}", "METHOD_END"], "methodName": ["overlappingMessageConvertersRequestBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   csDef    =    new   RootBeanDefinition (  . class )  ;", "RootBeanDefinition   wbiDef    =    new   RootBeanDefinition (  . class )  ;", "wbiDef . getPropertyValues (  )  . add (  \" conversionService \"  ,    csDef )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" webBindingInitializer \"  ,    wbiDef )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . CsvController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / integerArray \"  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . addParameter (  \" content \"  ,     \"  1  ,  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \"  1  -  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["parameterCsvAsStringArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "final   MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "final   MockServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "WebApplicationContext   webAppContext    =    initServlet (  (    wac )     -  >     {", "wac . setServletContext ( servletContext )  ;", "AnnotationConfigUtils . registerAnnotationConfigProcessors ( wac )  ;", "wac . getBeanFactory (  )  . registerResolvableDependency (  . class ,    servletConfig )  ;", "}  ,     . MyParameterDispatchingController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView \"  ,    response . getContentAsString (  )  )  ;", "assertSame ( servletContext ,    request . getAttribute (  \" servletContext \"  )  )  ;", "assertSame ( servletConfig ,    request . getAttribute (  \" servletConfig \"  )  )  ;", "assertSame ( session . getId (  )  ,    request . getAttribute (  \" sessionId \"  )  )  ;", "assertSame ( request . getRequestURI (  )  ,    request . getAttribute (  \" requestUri \"  )  )  ;", "assertSame ( request . getLocale (  )  ,    request . getAttribute (  \" locale \"  )  )  ;", "request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / myPath . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "session    =    request . getSession (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView \"  ,    response . getContentAsString (  )  )  ;", "assertSame ( servletContext ,    request . getAttribute (  \" servletContext \"  )  )  ;", "assertSame ( servletConfig ,    request . getAttribute (  \" servletConfig \"  )  )  ;", "assertSame ( session . getId (  )  ,    request . getAttribute (  \" sessionId \"  )  )  ;", "assertSame ( request . getRequestURI (  )  ,    request . getAttribute (  \" requestUri \"  )  )  ;", "request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" view \"  ,     \" other \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myOtherView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" view \"  ,     \" my \"  )  ;", "request . addParameter (  \" lang \"  ,     \" de \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myLangView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest ( servletContext ,     \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" surprise \"  ,     \"  !  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" mySurpriseView \"  ,    response . getContentAsString (  )  )  ;", ". MyParameterDispatchingController   deserialized    =     (  (  . MyParameterDispatchingController )     ( SerializationTestUtils . serializeAndDeserialize ( webAppContext . getBean (  . MyParameterDispatchingController . class . getSimpleName (  )  )  )  )  )  ;", "assertNotNull ( deserialized . request )  ;", "assertNotNull ( deserialized . session )  ;", "}", "METHOD_END"], "methodName": ["parameterDispatchingController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MyParameterizedControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPage \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 1  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" testBeanList \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / myPage \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 2  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" testBeanList \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parameterizedAnnotatedInterface"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MyParameterizedControllerImplWithOverriddenMappings . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPage \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 1  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" testBeanList \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / myPage \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 2  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" testBeanList \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parameterizedAnnotatedInterfaceWithOverriddenMappingsInImpl"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . PathOrderingController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / dir / myPath 1  . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" method 1  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["pathOrdering"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   csDef    =    new   RootBeanDefinition (  . class )  ;", "csDef . getPropertyValues (  )  . add (  \" converters \"  ,    new   AnnotatedExceptionRaisingConverter (  )  )  ;", "RootBeanDefinition   wbiDef    =    new   RootBeanDefinition (  . class )  ;", "wbiDef . getPropertyValues (  )  . add (  \" conversionService \"  ,    csDef )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" webBindingInitializer \"  ,    wbiDef )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . PathVariableWithCustomConverterController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath /  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  4  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["pathVariableWithCustomConverter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ProducesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" html \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / xml ,    text / html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html ; q =  0  .  9  ,    application / xml \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" xml \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / msword \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  6  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["produces"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition (  . class )  ;", "beanDef . setScope ( BeanDefinition . SCOPE _ PROTOTYPE )  ;", "wac . registerBeanDefinition (  \" c \"  ,    beanDef )  ;", "}  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . addParameter (  \" param \"  ,     \"  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" count :  3  \"  ,    response . getContentAsString (  )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" count :  3  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["prototypeController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ;", "DefaultAdvisorAutoProxyCreator   autoProxyCreator    =    new   DefaultAdvisorAutoProxyCreator (  )  ;", "autoProxyCreator . setBeanFactory ( wac . getBeanFactory (  )  )  ;", "wac . getBeanFactory (  )  . addBeanPostProcessor ( autoProxyCreator )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" advisor \"  ,    new   DefaultPointcutAdvisor ( new   SimpleTraceInterceptor (  )  )  )  ;", "}  ,     . MyFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" name \"  ,     \" name 1  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - name 1  - typeMismatch - tb 1  - myValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["proxiedFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RedirectAttributesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / messages \"  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" messages / new \"  ,    response . getForwardedUrl (  )  )  ;", "assertTrue ( RequestContextUtils . getOutputFlashMap ( request )  . isEmpty (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / messages \"  )  ;", "request . setSession ( session )  ;", "request . addParameter (  \" name \"  ,     \" Jeff \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  3  0  2  ,    response . getStatus (  )  )  ;", "assertEquals (  \"  / messages /  1  ? name = value \"  ,    response . getRedirectedUrl (  )  )  ;", "assertEquals (  \" yay !  \"  ,    RequestContextUtils . getOutputFlashMap ( request )  . get (  \" successMessage \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / messages /  1  \"  )  ;", "request . setQueryString (  \" name = value \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Got :    yay !  \"  ,    response . getContentAsString (  )  )  ;", "assertTrue ( RequestContextUtils . getOutputFlashMap ( request )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["redirectAttribute"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / singleString \"  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . addParameter (  \" content \"  ,     \" Juergen \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["regularParameterAsSingleString"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / stringArray \"  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . addParameter (  \" content \"  ,     \" Juergen \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["regularParameterAsStringArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MultipartController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setRequestURI (  \"  / stringArray \"  )  ;", "request . setMethod (  \" POST \"  )  ;", "request . addParameter (  \" content \"  ,     \" Juergen \"  )  ;", "request . addParameter (  \" content \"  ,     \" Eva \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Juergen - Eva \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["regularParametersAsStringArray"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MyRelativeMethodPathDispatchingController . class )  ;", "getServlet (  )  . init ( new   MockServletConfig (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / myHandle \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / yourApp / myOther \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myOtherView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hisApp / myLang \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myLangView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / herApp / surprise . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" mySurpriseView \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["relativeMethodPathDispatchingController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MyRelativePathDispatchingController . class )  ;", "getServlet (  )  . init ( new   MockServletConfig (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / myHandle \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / myOther \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myOtherView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / myLang \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myLangView \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myApp / surprise . do \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" mySurpriseView \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["relativePathDispatchingController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text /  *  ,     *  /  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals ( requestBody ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestBodyResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestHeaderMapController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / map \"  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / html \"  )  ;", "request . addHeader (  \" Custom - Header \"  ,    new   String [  ]  {     \" value 2  1  \"  ,     \" value 2  2  \"     }  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Content - Type = text / html , Custom - Header = value 2  1  \"  ,    response . getContentAsString (  )  )  ;", "request . setRequestURI (  \"  / multiValueMap \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Content - Type =  [ text / html ]  , Custom - Header =  [ value 2  1  , value 2  2  ]  \"  ,    response . getContentAsString (  )  )  ;", "request . setRequestURI (  \"  / httpHeaders \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Content - Type =  [ text / html ]  , Custom - Header =  [ value 2  1  , value 2  2  ]  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestHeaderMap"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . MyAbstractControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestMappingBaseClass"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . IMyControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle   null \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "request . addParameter (  \" p \"  ,     \" value \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle   value \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestMappingInterface"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "DefaultAdvisorAutoProxyCreator   autoProxyCreator    =    new   DefaultAdvisorAutoProxyCreator (  )  ;", "autoProxyCreator . setBeanFactory ( wac . getBeanFactory (  )  )  ;", "wac . getBeanFactory (  )  . addBeanPostProcessor ( autoProxyCreator )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" advisor \"  ,    new   DefaultPointcutAdvisor ( new   SimpleTraceInterceptor (  )  )  )  ;", "}  ,     . IMyControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle   null \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / handle \"  )  ;", "request . addParameter (  \" p \"  ,     \" value \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle   value \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestMappingInterfaceWithProxy"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestParamMapController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / map \"  )  ;", "request . addParameter (  \" key 1  \"  ,     \" value 1  \"  )  ;", "request . addParameter (  \" key 2  \"  ,    new   String [  ]  {     \" value 2  1  \"  ,     \" value 2  2  \"     }  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" key 1  = value 1  , key 2  = value 2  1  \"  ,    response . getContentAsString (  )  )  ;", "request . setRequestURI (  \"  / multiValueMap \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" key 1  =  [ value 1  ]  , key 2  =  [ value 2  1  , value 2  2  ]  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestParamMap"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   webAppContext    =    initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequiredParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status   code \"  ,    SC _ BAD _ REQUEST ,    response . getStatus (  )  )  ;", "assertTrue ( webAppContext . isSingleton ( ServletAnnotationControllerHandlerMethodTests . RequiredParamController . class . getSimpleName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["requiredParamMissing"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . HttpHeadersResponseController . class )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( new   MockHttpServletRequest (  \" POST \"  ,     \"  /  \"  )  ,    response )  ;", "assertEquals (  \" Wrong   status   code \"  ,    SC _ CREATED ,    response . getStatus (  )  )  ;", "assertEquals (  \" Wrong   number   of   headers \"  ,     1  ,    response . getHeaderNames (  )  . size (  )  )  ;", "assertEquals (  \" Wrong   value   for    ' location '    header \"  ,     \"  / test / items /  1  2  3  \"  ,    response . getHeader (  \" location \"  )  )  ;", "assertEquals (  \" Expected   an   empty   content \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseAsHttpHeaders"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . HttpHeadersResponseController . class )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( new   MockHttpServletRequest (  \" POST \"  ,     \"  / empty \"  )  ,    response )  ;", "assertEquals (  \" Wrong   status   code \"  ,    SC _ CREATED ,    response . getStatus (  )  )  ;", "assertEquals (  \" Wrong   number   of   headers \"  ,     0  ,    response . getHeaderNames (  )  . size (  )  )  ;", "assertEquals (  \" Expected   an   empty   content \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseAsHttpHeadersNoHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "Jaxb 2 Marshaller   marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setClassesToBeBound (  . class ,     . class )  ;", "try    {", "marshaller . afterPropertiesSet (  )  ;", "}    catch    (    ex )     {", "throw   new    < ex > BeanCreationException ( ex . getMessage (  )  )  ;", "}", "MarshallingHttpMessageConverter   messageConverter    =    new   MarshallingHttpMessageConverter ( marshaller )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    messageConverter )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . RequestBodyArgMismatchController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \"  < b /  >  \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" application / xml ;    charset = utf -  8  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyArgMismatch"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "ContentNegotiationManagerFactoryBean   factoryBean    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factoryBean . afterPropertiesSet (  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" contentNegotiationManager \"  ,    factoryBean . getObject (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . TextRestController . class )  ;", "byte [  ]    content    =     \" alert (  ' boo '  )  \"  . getBytes ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / a 1  . html \"  )  ;", "request . setContent ( content )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getContentType (  )  )  ;", "assertEquals (  \" inline ; filename = f . txt \"  ,    response . getHeader (  \" Content - Disposition \"  )  )  ;", "assertArrayEquals ( content ,    response . getContentAsByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAsHtml"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "ContentNegotiationManagerFactoryBean   factoryBean    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factoryBean . afterPropertiesSet (  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" contentNegotiationManager \"  ,    factoryBean . getObject (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . TextRestController . class )  ;", "byte [  ]    content    =     \" alert (  ' boo '  )  \"  . getBytes ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / a 3  . html \"  )  ;", "request . setContent ( content )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getContentType (  )  )  ;", "assertNull ( response . getHeader (  \" Content - Disposition \"  )  )  ;", "assertArrayEquals ( content ,    response . getContentAsByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAsHtmlWithProducesCondition"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "ContentNegotiationManagerFactoryBean   factoryBean    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factoryBean . afterPropertiesSet (  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" contentNegotiationManager \"  ,    factoryBean . getObject (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . TextRestController . class )  ;", "byte [  ]    content    =     \" alert (  ' boo '  )  \"  . getBytes ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / a 2  . html \"  )  ;", "request . setContent ( content )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getContentType (  )  )  ;", "assertNull ( response . getHeader (  \" Content - Disposition \"  )  )  ;", "assertArrayEquals ( content ,    response . getContentAsByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAsHtmlWithSuffixPresent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "ContentNegotiationManagerFactoryBean   factoryBean    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factoryBean . afterPropertiesSet (  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" contentNegotiationManager \"  ,    factoryBean . getObject (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . TextRestController . class )  ;", "byte [  ]    content    =     \" body \"  . getBytes ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / a 4  . css \"  )  ;", "request . setContent ( content )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" text / css ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getContentType (  )  )  ;", "assertNull ( response . getHeader (  \" Content - Disposition \"  )  )  ;", "assertArrayEquals ( content ,    response . getContentAsByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyAsTextWithCssExtension"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals ( requestBody ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyNoAcceptHeader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "StringHttpMessageConverter   converter    =    new   StringHttpMessageConverter (  )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    converter )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . RequestResponseBodyProducesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / pdf ,    application / msword \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  6  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyNoAcceptableMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseBodyVoidController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" text /  *  ,     *  /  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyVoid"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" text / plain ;    charset = utf -  8  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \"  *  /  *  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals ( requestBody ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseBodyWildCardMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ResponseStatusController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / something \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" something \"  ,    response . getContentAsString (  )  )  ;", "assertEquals (  2  0  1  ,    response . getStatus (  )  )  ;", "assertEquals (  \" It ' s   alive !  \"  ,    response . getErrorMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . ThisWillActuallyRun . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Hello   World !  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["restController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MySessionAttributesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPage \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 1  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / myPage \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 2  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["sessionAttributeExposure"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ;", "DefaultAdvisorAutoProxyCreator   autoProxyCreator    =    new   DefaultAdvisorAutoProxyCreator (  )  ;", "autoProxyCreator . setBeanFactory ( wac . getBeanFactory (  )  )  ;", "wac . getBeanFactory (  )  . addBeanPostProcessor ( autoProxyCreator )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" advisor \"  ,    new   DefaultPointcutAdvisor ( new   SimpleTraceInterceptor (  )  )  )  ;", "}  ,     . MySessionAttributesControllerImpl . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPage \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 1  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "HttpSession   session    =    request . getSession (  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / myPage \"  )  ;", "request . setSession ( session )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" page 2  \"  ,    request . getAttribute (  \" viewName \"  )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 1  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( session . getAttribute (  \" object 2  \"  )  )     !  =    null )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 1  \"  )  )  ;", "assertTrue (  (  ( Map )     ( session . getAttribute (  \" model \"  )  )  )  . containsKey (  \" object 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["sessionAttributeExposureWithInterface"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >    wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ,    ServletAnnotationControllerHandlerMethodTests . MySpecificBinderInitializingCommandProvidingFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \" myDefaultName \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - String : myDefaultName - typeMismatch - tb 1  - myOriginalValue \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["specificBinderInitializingCommandProvidingFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . HeadersConditionController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" home \"  ,    response . getForwardedUrl (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \"  *  /  *  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" home \"  ,    response . getForwardedUrl (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" application / json ; charset = ISO -  8  8  5  9  -  1  \"  ,    response . getHeader (  \" Content - Type \"  )  )  ;", "assertEquals (  \" homeJson \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHeadersCondition"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . NoPathGetAndM 2 PostController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / t 1  / m 2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  5  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMatchWithoutMethodLevelPath"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . TrailingSlashController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo /  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" templatePath \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["trailingSlash"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( ServletAnnotationControllerHandlerMethodTests . RequiredParamController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" id \"  ,     \" foo \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status   code \"  ,    SC _ BAD _ REQUEST ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeConversionError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   csDef    =    new   RootBeanDefinition (  . class )  ;", "csDef . getPropertyValues (  )  . add (  \" converters \"  ,    new   TestBeanConverter (  )  )  ;", "RootBeanDefinition   wbiDef    =    new   RootBeanDefinition (  . class )  ;", "wbiDef . getPropertyValues (  )  . add (  \" conversionService \"  ,    csDef )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" webBindingInitializer \"  ,    wbiDef )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . NestedSetController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" testBeanSet \"  ,     \"  1  \"  ,     \"  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \"  [  1  ,     2  ]  - TestBean \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeNestedSetBinding"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "wac . registerBeanDefinition (  \" viewResolver \"  ,    new   RootBeanDefinition (  . class )  )  ;", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" webBindingInitializer \"  ,    new   MyWebBindingInitializer (  )  )  ;", "List < HandlerMethodArgumentResolver >    argumentResolvers    =    new   ArrayList <  >  (  )  ;", "argumentResolvers . add ( new   ServletWebArgumentResolverAdapter ( new   MySpecialArgumentResolver (  )  )  )  ;", "adapterDef . getPropertyValues (  )  . add (  \" customArgumentResolvers \"  ,    argumentResolvers )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . MyTypedCommandProvidingFormController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \"  1  0  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - Integer :  1  0  - typeMismatch - tb 1  - myOriginalValue \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myOtherPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \"  1  0  \"  )  ;", "request . addParameter (  \" age \"  ,     \" value 2  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - myName - typeMismatch - tb 1  - myOriginalValue \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myThirdPath . do \"  )  ;", "request . addParameter (  \" defaultName \"  ,     \"  1  0  \"  )  ;", "request . addParameter (  \" age \"  ,     \"  1  0  0  \"  )  ;", "request . addParameter (  \" date \"  ,     \"  2  0  0  7  -  1  0  -  0  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" myView - special -  9  9  - special -  9  9  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["typedCommandProvidingFormController"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServlet (  (    wac )     -  >     {", "RootBeanDefinition   adapterDef    =    new   RootBeanDefinition (  . class )  ;", "adapterDef . getPropertyValues (  )  . add (  \" messageConverters \"  ,    new   ByteArrayHttpMessageConverter (  )  )  ;", "wac . registerBeanDefinition (  \" handlerAdapter \"  ,    adapterDef )  ;", "}  ,     . RequestResponseBodyController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / something \"  )  ;", "String   requestBody    =     \" Hello   World \"  ;", "request . setContent ( requestBody . getBytes (  \" UTF -  8  \"  )  )  ;", "request . addHeader (  \" Content - Type \"  ,     \" application / pdf \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  1  5  ,    response . getStatus (  )  )  ;", "assertNotNull (  \" No   Accept   response   header   set \"  ,    response . getHeader (  \" Accept \"  )  )  ;", "}", "METHOD_END"], "methodName": ["unsupportedRequestBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "Cookie   expected    =    new   Cookie (  \" name \"  ,     \" foo \"  )  ;", "request . ss ( expected )  ;", "Cookie   result    =     (  ( Cookie )     ( resolver . resolveArgument ( cookieParameter ,    null ,    webRequest ,    null )  )  )  ;", "assertEquals (  \" Invalid   result \"  ,    expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveCookieArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Cookie   cookie    =    new   Cookie (  \" name \"  ,     \" foo \"  )  ;", "request . ss ( cookie )  ;", "String   result    =     (  ( String )     ( resolver . resolveArgument ( cookieStringParameter ,    null ,    webRequest ,    null )  )  )  ;", "assertEquals (  \" Invalid   result \"  ,    cookie . getValue (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveCookieStringArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "resolver    =    new   ServletCookieValueMethodArgumentResolver ( null )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "webRequest    =    new   ServletWebRequest ( request ,    new   MockHttpServletResponse (  )  )  ;", "Method   method    =    getClass (  )  . getMethod (  \" params \"  ,    Cookie . class ,    String . class )  ;", "cookieParameter    =    new   SynthesizingMethodParameter ( method ,     0  )  ;", "cookieStringParameter    =    new   SynthesizingMethodParameter ( method ,     1  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder ( message )  ;", "if    ( returnValue    !  =    null )     {", "sb . append (  \"     [ type =  \"  )  . append ( returnValue . getClass (  )  . getName (  )  )  . append (  \"  ]  \"  )  ;", "}", "sb . append (  \"     [ value =  \"  )  . append ( returnValue )  . append (  \"  ]  \"  )  ;", "return   getDetailedErrorMessage ( sb . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getReturnValueHandlingErrorMessage"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "Object   returnValue    =    invokeForRequest ( webRequest ,    mavContainer ,    providedArgs )  ;", "setResponseStatus ( webRequest )  ;", "if    ( returnValue    =  =    null )     {", "if    (  (  ( isRequestNotModified ( webRequest )  )     |  |     (  ( getResponseStatus (  )  )     !  =    null )  )     |  |     ( mavContainer . isRequestHandled (  )  )  )     {", "mavContainer . setRequestHandled ( true )  ;", "return ;", "}", "} else", "if    ( util . StringUtils . hasText ( getResponseStatusReason (  )  )  )     {", "mavContainer . setRequestHandled ( true )  ;", "return ;", "}", "mavContainer . setRequestHandled ( false )  ;", "Assert . state (  (  ( this . returnValueHandlers )     !  =    null )  ,     \" No   return   value   handlers \"  )  ;", "try    {", "this . returnValueHandlers . handleReturnValue ( returnValue ,    getReturnValueType ( returnValue )  ,    mavContainer ,    webRequest )  ;", "}    catch    ( Exception   ex )     {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace ( getReturnValueHandlingErrorMessage (  \" Error   handling   return   value \"  ,    returnValue )  ,    ex )  ;", "}", "throw   ex ;", "}", "}", "METHOD_END"], "methodName": ["invokeAndHandle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "return   webRequest . isNotModified (  )  ;", "}", "METHOD_END"], "methodName": ["isRequestNotModified"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers    =    returnValueHandlers ;", "}", "METHOD_END"], "methodName": ["setHandlerMethodReturnValueHandlers"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "HttpStatus   status    =    getResponseStatus (  )  ;", "if    ( status    =  =    null )     {", "return ;", "}", "HttpResponse   response    =    webRequest . getResponse (  )  ;", "if    ( response    !  =    null )     {", "String   reason    =    getResponseStatusReason (  )  ;", "if    ( StringUtils . hasText ( reason )  )     {", "response . sendError ( status . value (  )  ,    reason )  ;", "} else    {", "response . setStatus ( status . value (  )  )  ;", "}", "}", "webRequest . getRequest (  )  . setAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE ,    status )  ;", "}", "METHOD_END"], "methodName": ["setResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "return   new   ServletInvocableHandlerMethod . ConcurrentResultHandlerMethod ( result ,    new   ServletInvocableHandlerMethod . ConcurrentResultMethodParameter ( result )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    controller . getClass (  )  . getDeclaredMethod ( methodName ,    argTypes )  ;", "handlerMethod    =    new    ( controller ,    method )  ;", "handlerMethod . setHandlerMethodArgumentResolvers ( this . argumentResolvers )  ;", "handlerMethod . setHandlerMethodReturnValueHandlers ( this . returnValueHandlers )  ;", "return   handlerMethod ;", "}", "METHOD_END"], "methodName": ["getHandlerMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . argumentResolvers . addResolver ( new   RequestParamMethodArgumentResolver ( null ,    false )  )  ;", "this . returnValueHandlers . addHandler ( new   ViewMethodReturnValueHandler (  )  )  ;", "this . returnValueHandlers . addHandler ( new   ViewNameMethodReturnValueHandler (  )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . Handler (  )  ,     \" dynamicReturnValue \"  ,    String . class )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertNotNull ( this . mavContainer . getView (  )  )  ;", "assertEquals ( RedirectView . class ,    this . mavContainer . getView (  )  . getClass (  )  )  ;", "this . request . setParameter (  \" param \"  ,     \" value \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  \" view \"  ,    this . mavContainer . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_DynamicReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   ServletInvocableHandlerMethodTests . ExceptionRaisingReturnValueHandler (  )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new   ServletInvocableHandlerMethodTests . Handler (  )  ,     \" handle \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "fail (  \" Expected   exception \"  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_Exception"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new   ServletInvocableHandlerMethodTests . Handler (  )  ,     \" responseStatusWithReason \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue (  \" When   a   status   reason   w /    used ,    the   request   is   handled \"  ,    this . mavContainer . isRequestHandled (  )  )  ;", "assertEquals ( BAD _ REQUEST . value (  )  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  4  0  0    Bad   Request \"  ,    this . response . getErrorMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_NotVoidWithResponseStatusAndReason"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" If - Modified - Since \"  ,     (  (  1  0     *     1  0  0  0  )     *     1  0  0  0  )  )  ;", "int   lastModifiedTimestamp    =     1  0  0  0     *     1  0  0  0  ;", "this . webRequest . checkNotModified ( lastModifiedTimestamp )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . Handler (  )  ,     \" notModified \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue (  \" Null   return   value    +     ' not   modified '    request   should   result   in    ' request   handled '  \"  ,    this . mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_VoidRequestNotModified"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new   ServletInvocableHandlerMethodTests . Handler (  )  ,     \" composedResponseStatus \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue (  \" Null   return   value    +     @ ComposedResponseStatus   should   result   in    ' request   handled '  \"  ,    this . mavContainer . isRequestHandled (  )  )  ;", "assertEquals ( BAD _ REQUEST . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_VoidWithComposedResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . argumentResolvers . addResolver ( new   ServletResponseMethodArgumentResolver (  )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . Handler (  )  ,     \" httpServletResponse \"  ,    HttpServletResponse . class )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue (  \" Null   return   value    +    HttpServletResponse   arg   should   result   in    ' request   handled '  \"  ,    this . mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_VoidWithHttpServletResponseArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new   ServletInvocableHandlerMethodTests . Handler (  )  ,     \" responseStatus \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue (  \" Null   return   value    +     @ ResponseStatus   should   result   in    ' request   handled '  \"  ,    this . mavContainer . isRequestHandled (  )  )  ;", "assertEquals ( BAD _ REQUEST . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_VoidWithResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new   ServletInvocableHandlerMethodTests . ResponseStatusHandler (  )  ,     \" handle \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertTrue ( this . mavContainer . isRequestHandled (  )  )  ;", "assertEquals ( BAD _ REQUEST . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeAndHandle_VoidWithTypeLevelResponseStatus"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   HttpEntityMethodProcessor ( this . converters )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . ResponseEntityHandler (  )  ,     \" handleRawType \"  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntityRawTypeWithNullBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    Collections . singletonList ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "ResolvableType   elementType    =    ResolvableType . forClass ( List . class )  ;", "ReactiveTypeHandler . CollectedValuesList   result    =    new   ReactiveTypeHandler . CollectedValuesList ( elementType )  ;", "result . add ( Arrays . asList (  \" foo 1  \"  ,     \" bar 1  \"  )  )  ;", "result . add ( Arrays . asList (  \" foo 2  \"  ,     \" bar 2  \"  )  )  ;", "ContentNegotiationManager   manager    =    new   ContentNegotiationManager (  )  ;", "this . returnValueHandlers . addHandler ( new   RequestResponseBodyMethodProcessor ( converters ,    manager )  )  ;", "ServletInvocableHandlerMethod   hm    =    getHandlerMethod ( new    . MethodLevelResponseBodyHandler (  )  ,     \" handleFluxOfLists \"  )  ;", "hm    =    hm . wrapConcurrentResult ( result )  ;", "hm . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  [  [  \\  \" foo 1  \\  \"  ,  \\  \" bar 1  \\  \"  ]  ,  [  \\  \" foo 2  \\  \"  ,  \\  \" bar 2  \\  \"  ]  ]  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_CollectedValuesList"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "List < HttpMessageConverter <  ?  >  >    converters    =    Collections . singletonList ( new   MappingJackson 2 HttpMessageConverter (  )  )  ;", "ResolvableType   elementType    =    ResolvableType . forClass (  . Bar . class )  ;", "ReactiveTypeHandler . CollectedValuesList   result    =    new   ReactiveTypeHandler . CollectedValuesList ( elementType )  ;", "result . add ( new    . Bar (  \" foo \"  )  )  ;", "result . add ( new    . Bar (  \" bar \"  )  )  ;", "ContentNegotiationManager   manager    =    new   ContentNegotiationManager (  )  ;", "this . returnValueHandlers . addHandler ( new   RequestResponseBodyMethodProcessor ( converters ,    manager )  )  ;", "ServletInvocableHandlerMethod   hm    =    getHandlerMethod ( new    . ResponseEntityHandler (  )  ,     \" handleFlux \"  )  ;", "hm    =    hm . wrapConcurrentResult ( result )  ;", "hm . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  [  {  \\  \" value \\  \"  :  \\  \" foo \\  \"  }  ,  {  \\  \" value \\  \"  :  \\  \" bar \\  \"  }  ]  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_CollectedValuesListWithResponseEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . DeferredResultSubclassHandler (  )  ,     \" bar \"  ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_DeferredResultSubclass"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . DeferredResultSubclassHandler (  )  ,    null ,    ServletInvocableHandlerMethodTests . CustomDeferredResult . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_DeferredResultSubclassEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . MethodLevelResponseBodyHandler (  )  ,     \" bar \"  ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_MethodLevelResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . MethodLevelResponseBodyHandler (  )  ,    null ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_MethodLevelResponseBodyEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   ModelAndViewMethodReturnValueHandler (  )  )  ;", "this . returnValueHandlers . addHandler ( new   RequestResponseBodyMethodProcessor ( this . converters )  )  ;", "handlerMethod    =    getHandlerMethod ( handler ,     \" handle \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( result )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  ( result    !  =    null    ?    result . toString (  )     :     \"  \"  )  ,    this . response . getContentAsString (  )  )  ;", "assertEquals ( expectedReturnType ,    handlerMethod . getReturnValueType ( result )  . getParameterType (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_ResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   ResponseBodyEmitterReturnValueHandler ( this . converters )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . StreamingHandler (  )  ,     \" handleEmitter \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( null )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_ResponseBodyEmitter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   HttpEntityMethodProcessor ( this . converters )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . ResponseEntityHandler (  )  ,     \" handleDeferred \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( new   ResponseEntity (  \" bar \"  ,    HttpStatus . OK )  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  \" bar \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_ResponseEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   HttpEntityMethodProcessor ( this . converters )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . ResponseEntityHandler (  )  ,     \" handleDeferred \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( new   ResponseEntity ( HttpStatus . OK )  )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_ResponseEntityNullBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   HttpEntityMethodProcessor ( this . converters )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . ResponseEntityHandler (  )  ,     \" handleDeferred \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( null )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_ResponseEntityNullReturnValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "this . returnValueHandlers . addHandler ( new   StreamingResponseBodyReturnValueHandler (  )  )  ;", "ServletInvocableHandlerMethod   handlerMethod    =    getHandlerMethod ( new    . StreamingHandler (  )  ,     \" handleStreamBody \"  )  ;", "handlerMethod    =    handlerMethod . wrapConcurrentResult ( null )  ;", "handlerMethod . invokeAndHandle ( this . webRequest ,    this . mavContainer )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \"  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_StreamingResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . TypeLevelResponseBodyHandler (  )  ,     \" bar \"  ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_TypeLevelResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "wrapConcurrentResult _ ResponseBody ( new   ServletInvocableHandlerMethodTests . TypeLevelResponseBodyHandler (  )  ,    null ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["wrapConcurrentResult_TypeLevelResponseBodyEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "DataBinder   binder    =    binderFactory . createBinder ( request ,    null ,    attributeName )  ;", "ConversionService   conversionService    =    binder . getConversionService (  )  ;", "if    ( conversionService    !  =    null )     {", "TypeDescriptor   source    =    TypeDescriptor . valueOf ( String . class )  ;", "TypeDescriptor   target    =    new   TypeDescriptor ( parameter )  ;", "if    ( conversionService . canConvert ( source ,    target )  )     {", "return   binder . convertIfNecessary ( sourceValue ,    parameter . getParameterType (  )  ,    parameter )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["createAttributeFromRequestValue"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    variables    =    getUriTemplateVariables ( request )  ;", "String   variableValue    =    variables . get ( aName )  ;", "if    ( StringUtils . hasText ( variableValue )  )     {", "return   variableValue ;", "}", "String   parameterValue    =    request . getParameter ( aName )  ;", "if    ( StringUtils . hasText ( parameterValue )  )     {", "return   parameterValue ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getRequestValueForAttribute"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    variables    =     (  ( Map < String ,    String >  )     ( request . getAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    SCOPE _ REQUEST )  )  )  ;", "return   variables    !  =    null    ?    variables    :    Collections . emptyMap (  )  ;", "}", "METHOD_END"], "methodName": ["getUriTemplateVariables"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" name \"  ,     \" Patty \"  )  ;", "mavContainer . getModel (  )  . put (  \" testBean 1  \"  ,    null )  ;", "mavContainer . getModel (  )  . put (  \" testBean 2  \"  ,    null )  ;", "mavContainer . getModel (  )  . put (  \" testBean 3  \"  ,    null )  ;", "assertNull ( processor . resolveArgument ( testBean ,    mavContainer ,    webRequest ,    binderFactory )  )  ;", "assertNull ( processor . resolveArgument ( testBeanWithoutStringConstructor ,    mavContainer ,    webRequest ,    binderFactory )  )  ;", "Optional < TestBean >    testBean    =     (  ( Optional < TestBean >  )     ( processor . resolveArgument ( testBeanWithOptional ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertFalse ( testBean . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["attributesAsNullValues"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" name \"  ,     \" Patty \"  )  ;", "mavContainer . getModel (  )  . put (  \" testBean 1  \"  ,    Optional . empty (  )  )  ;", "mavContainer . getModel (  )  . put (  \" testBean 2  \"  ,    Optional . empty (  )  )  ;", "mavContainer . getModel (  )  . put (  \" testBean 3  \"  ,    Optional . empty (  )  )  ;", "assertNull ( processor . resolveArgument ( testBean ,    mavContainer ,    webRequest ,    binderFactory )  )  ;", "assertNull ( processor . resolveArgument ( testBeanWithoutStringConstructor ,    mavContainer ,    webRequest ,    binderFactory )  )  ;", "Optional < TestBean >    testBean    =     (  ( Optional < TestBean >  )     ( processor . resolveArgument ( testBeanWithOptional ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertFalse ( testBean . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["attributesAsOptionalEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" testBean 1  \"  ,     \" Patty \"  )  ;", "TestBean   testBean    =     (  ( TestBean )     ( processor . resolveArgument ( testBean ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertEquals (  \" Patty \"  ,    testBean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAttributeRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" testBean 2  \"  ,     \" Patty \"  )  ;", ". TestBeanWithoutStringConstructor   testBean    =     (  (  . TestBeanWithoutStringConstructor )     ( processor . resolveArgument ( testBeanWithoutStringConstructorModelAttr ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertNotNull ( testBean )  ;", "}", "METHOD_END"], "methodName": ["createAttributeRequestParameterCannotConvert"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" testBean 3  \"  ,     \" Patty \"  )  ;", "Optional < TestBean >    testBean    =     (  ( Optional < TestBean >  )     ( processor . resolveArgument ( testBeanWithOptional ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertEquals (  \" Patty \"  ,    testBean . get (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAttributeRequestParameterWithOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" testBean 1  \"  ,     \" Patty \"  )  ;", "request . set ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "TestBean   testBean    =     (  ( TestBean )     ( processor . resolveArgument ( testBeanModelAttr ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertEquals (  \" Patty \"  ,    testBean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAttributeUriTemplateVar"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" testBean 2  \"  ,     \" Patty \"  )  ;", "request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", ". TestBeanWithoutStringConstructor   testBean    =     (  (  . TestBeanWithoutStringConstructor )     ( processor . resolveArgument ( testBeanWithoutStringConstructorModelAttr ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertNotNull ( testBean )  ;", "}", "METHOD_END"], "methodName": ["createAttributeUriTemplateVarCannotConvert"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    uriTemplateVars    =    new   HashMap <  >  (  )  ;", "uriTemplateVars . put (  \" testBean 3  \"  ,     \" Patty \"  )  ;", "request . set ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    uriTemplateVars )  ;", "Optional < TestBean >    testBean    =     (  ( Optional < TestBean >  )     ( processor . resolveArgument ( testBeanWithOptionalModelAttr ,    mavContainer ,    webRequest ,    binderFactory )  )  )  ;", "assertEquals (  \" Patty \"  ,    testBean . get (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAttributeUriTemplateVarWithOptional"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "processor    =    new   ServletModelAttributeMethodProcessor ( false )  ;", "ConfigurableWebBindingInitializer   initializer    =    new   ConfigurableWebBindingInitializer (  )  ;", "initializer . setConversionService ( new   DefaultConversionService (  )  )  ;", "binderFactory    =    new   ServletRequestDataBinderFactory ( null ,    initializer )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "webRequest    =    new   ServletWebRequest ( request )  ;", "Method   method    =    getClass (  )  . getDeclaredMethod (  \" modelAttribute \"  ,    TestBean . class ,     . TestBeanWithoutStringConstructor . class ,    Optional . class )  ;", "testBeanModelAttr    =    new   MethodParameter ( method ,     0  )  ;", "testBeanWithoutStringConstructorModelAttr    =    new   MethodParameter ( method ,     1  )  ;", "testBeanWithOptionalModelAttr    =    new   MethodParameter ( method ,     2  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessorTests"}, {"methodBody": ["METHOD_START", "{", "if    ( HttpSession . class . isAssignableFrom ( paramType )  )     {", "HttpSession   session    =    request . getSession (  )  ;", "if    (  ( session    !  =    null )     &  &     (  !  ( paramType . isInstance ( session )  )  )  )     {", "throw   new   IllegalStateException (  (  (  (  \" Current   session   is   not   of   type    [  \"     +     ( paramType . getName (  )  )  )     +     \"  ]  :     \"  )     +    session )  )  ;", "}", "return   session ;", "} else", "if    (  (  (  . pushBuilder )     !  =    null )     &  &     (  . pushBuilder . isAssignableFrom ( paramType )  )  )     {", "return    . PushBuilderDelegate . resolvePushBuilder ( request ,    paramType )  ;", "} else", "if    ( isAssignableFrom ( paramType )  )     {", "InputStream   inputStream    =    request . getInputStream (  )  ;", "if    (  ( inputStream    !  =    null )     &  &     (  !  ( paramType . isInstance ( inputStream )  )  )  )     {", "throw   new   IllegalStateException (  (  (  (  \" Request   input   stream   is   not   of   type    [  \"     +     ( paramType . getName (  )  )  )     +     \"  ]  :     \"  )     +    inputStream )  )  ;", "}", "return   inputStream ;", "} else", "if    ( isAssignableFrom ( paramType )  )     {", "Reader   reader    =    request . getReader (  )  ;", "if    (  ( reader    !  =    null )     &  &     (  !  ( paramType . isInstance ( reader )  )  )  )     {", "throw   new   IllegalStateException (  (  (  (  \" Request   body   reader   is   not   of   type    [  \"     +     ( paramType . getName (  )  )  )     +     \"  ]  :     \"  )     +    reader )  )  ;", "}", "return   reader ;", "} else", "if    ( isAssignableFrom ( paramType )  )     {", "Principal   userPrincipal    =    request . getUserPrincipal (  )  ;", "if    (  ( userPrincipal    !  =    null )     &  &     (  !  ( paramType . isInstance ( userPrincipal )  )  )  )     {", "throw   new   IllegalStateException (  (  (  (  \" Current   user   principal   is   not   of   type    [  \"     +     ( paramType . getName (  )  )  )     +     \"  ]  :     \"  )     +    userPrincipal )  )  ;", "}", "return   userPrincipal ;", "} else", "if    (  ( class )     =  =    paramType )     {", "return   resolve ( request . getMethod (  )  )  ;", "} else", "if    (  ( class )     =  =    paramType )     {", "return   getLocale ( request )  ;", "} else", "if    (  ( class )     =  =    paramType )     {", "TimeZone   timeZone    =    getTimeZone ( request )  ;", "return   timeZone    !  =    null    ?    timeZone    :    getDefault (  )  ;", "} else", "if    (  ( class )     =  =    paramType )     {", "TimeZone   timeZone    =    getTimeZone ( request )  ;", "return   timeZone    !  =    null    ?    timeZone . toZoneId (  )     :    systemDefault (  )  ;", "}", "throw   new   UnsupportedOperationException (  (  \" Unknown   parameter   type :     \"     +     ( paramType . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "T   nativeRequest    =    webRequest . getNativeRequest ( requiredType )  ;", "if    ( nativeRequest    =  =    null )     {", "throw   new   IllegalStateException (  (  (  (  \" Current   request   is   not   of   type    [  \"     +     ( requiredType . getName (  )  )  )     +     \"  ]  :     \"  )     +    webRequest )  )  ;", "}", "return   nativeRequest ;", "}", "METHOD_END"], "methodName": ["resolveNativeRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   httpMethodParameter    =    new   MethodParameter ( method ,     1  0  )  ;", "assertTrue (  \" HttpMethod   not   supported \"  ,    resolver . supportsParameter ( httpMethodParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( httpMethodParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    HttpMethod . valueOf ( webRequest . g (  )  . getMethod (  )  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["httpMethod"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   inputStreamParameter    =    new   MethodParameter ( method ,     5  )  ;", "assertTrue (  \" InputStream   not   supported \"  ,    resolver . supportsParameter ( inputStreamParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( inputStreamParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    webRequest . g (  )  . getInputStream (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["inputStream"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =    Locale . ENGLISH ;", "s . addPreferredLocale ( locale )  ;", "MethodParameter   localeParameter    =    new   MethodParameter ( method ,     4  )  ;", "assertTrue (  \" Locale   not   supported \"  ,    resolver . supportsParameter ( localeParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( localeParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    locale ,    result )  ;", "}", "METHOD_END"], "methodName": ["locale"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =    Locale . ENGLISH ;", "s . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   FixedLocaleResolver ( locale )  )  ;", "MethodParameter   localeParameter    =    new   MethodParameter ( method ,     4  )  ;", "assertTrue (  \" Locale   not   supported \"  ,    resolver . supportsParameter ( localeParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( localeParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    locale ,    result )  ;", "}", "METHOD_END"], "methodName": ["localeFromResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   principalParameter    =    new   MethodParameter ( method ,     3  )  ;", "assertTrue (  \" Principal   not   supported \"  ,    resolver . supportsParameter ( principalParameter )  )  ;", "Object   result    =    resolver . resolve ( principalParameter ,    null ,    webRequest ,    null )  ;", "assertNull (  \" Invalid   result \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["principalAsNull"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "final   PushBuilder   pushBuilder    =    Mockito . mock ( PushBuilder . class )  ;", "servletRequest    =    new   MockHttp (  \" GET \"  ,     \"  \"  )     {", "@ Override", "public   PushBuilder   newPushBuilder (  )     {", "return   pushBuilder ;", "}", "}  ;", "ServletWebRequest   webRequest    =    new   ServletWebRequest ( servletRequest ,    new   MockHttpServletResponse (  )  )  ;", "MethodParameter   pushBuilderParameter    =    new   MethodParameter ( method ,     1  1  )  ;", "assertTrue (  \" PushBuilder   not   supported \"  ,    resolver . supportsParameter ( pushBuilderParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( pushBuilderParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    pushBuilder ,    result )  ;", "}", "METHOD_END"], "methodName": ["pushBuilder"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   readerParameter    =    new   MethodParameter ( method ,     6  )  ;", "assertTrue (  \" Reader   not   supported \"  ,    resolver . supportsParameter ( readerParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( readerParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    webRequest . g (  )  . getReader (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["reader"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   servletRequestParameter    =    new   MethodParameter ( method ,     0  )  ;", "assertTrue (  \"    not   supported \"  ,    resolver . supportsParameter ( servletRequestParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( servletRequestParameter ,    mavContainer ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    servletRequest ,    result )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpSession   session    =    new   MockHttpSession (  )  ;", "s . setSession ( session )  ;", "MethodParameter   sessionParameter    =    new   MethodParameter ( method ,     2  )  ;", "assertTrue (  \" Session   not   supported \"  ,    resolver . supportsParameter ( sessionParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( sessionParameter ,    mavContainer ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    session ,    result )  ;", "assertFalse (  \" The   requestHandled   flag   shouldn ' t   change \"  ,    mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["session"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "resolver    =    new   ServletRequestMethodArgumentResolver (  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "servletRequest    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  \"  )  ;", "webRequest    =    new   ServletWebRequest ( servletRequest ,    new   MockHttpServletResponse (  )  )  ;", "method    =    getClass (  )  . getMethod (  \" supportedParams \"  ,    ServletRequest . class ,    MultipartRequest . class ,    HttpSession . class ,    Principal . class ,    Locale . class ,    InputStream . class ,    Reader . class ,    WebRequest . class ,    TimeZone . class ,    ZoneId . class ,    HttpMethod . class ,    PushBuilder . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   timeZoneParameter    =    new   MethodParameter ( method ,     8  )  ;", "assertTrue (  \" TimeZone   not   supported \"  ,    resolver . supportsParameter ( timeZoneParameter )  )  ;", "Object   result    =    resolver . resolve ( timeZoneParameter ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   result \"  ,    TimeZone . getDefault (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["timeZone"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "TimeZone   timeZone    =    TimeZone . getTimeZone (  \" America / Los _ Angeles \"  )  ;", "s . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   FixedLocaleResolver ( Locale . US ,    timeZone )  )  ;", "MethodParameter   timeZoneParameter    =    new   MethodParameter ( method ,     8  )  ;", "assertTrue (  \" TimeZone   not   supported \"  ,    resolver . supportsParameter ( timeZoneParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( timeZoneParameter ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   result \"  ,    timeZone ,    result )  ;", "}", "METHOD_END"], "methodName": ["timeZoneFromResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   webRequestParameter    =    new   MethodParameter ( method ,     7  )  ;", "assertTrue (  \" WebRequest   not   supported \"  ,    resolver . supportsParameter ( webRequestParameter )  )  ;", "Object   result    =    resolver . resolve ( webRequestParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    webRequest ,    result )  ;", "}", "METHOD_END"], "methodName": ["webRequest"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   zoneIdParameter    =    new   MethodParameter ( method ,     9  )  ;", "assertTrue (  \" ZoneId   not   supported \"  ,    resolver . supportsParameter ( zoneIdParameter )  )  ;", "Object   result    =    resolver . resolve ( zoneIdParameter ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   result \"  ,    ZoneId . systemDefault (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["zoneId"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "TimeZone   timeZone    =    TimeZone . getTimeZone (  \" America / New _ York \"  )  ;", "s . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   FixedLocaleResolver ( Locale . US ,    timeZone )  )  ;", "MethodParameter   zoneIdParameter    =    new   MethodParameter ( method ,     9  )  ;", "assertTrue (  \" ZoneId   not   supported \"  ,    resolver . supportsParameter ( zoneIdParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( zoneIdParameter ,    null ,    webRequest ,    null )  ;", "assertEquals (  \" Invalid   result \"  ,    timeZone . toZoneId (  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["zoneIdFromResolver"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "if    ( OutputStream . class . isAssignableFrom ( paramType )  )     {", "return   r . getOutputStream (  )  ;", "} else", "if    ( isAssignableFrom ( paramType )  )     {", "return   r . getWriter (  )  ;", "}", "throw   new   UnsupportedOperationException (  (  \" Unknown   parameter   type :     \"     +    paramType )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "T   nativeResponse    =    webRequest . getNativeResponse ( requiredType )  ;", "if    ( nativeResponse    =  =    null )     {", "throw   new   IllegalStateException (  (  (  (  \" Current   response   is   not   of   type    [  \"     +     ( requiredType . getName (  )  )  )     +     \"  ]  :     \"  )     +    webRequest )  )  ;", "}", "return   nativeResponse ;", "}", "METHOD_END"], "methodName": ["resolveNativeResponse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   outputStreamParameter    =    new   MethodParameter ( method ,     1  )  ;", "assertTrue (  \" OutputStream   not   supported \"  ,    resolver . supportsParameter ( outputStreamParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( outputStreamParameter ,    mavContainer ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    s . getOutputStream (  )  ,    result )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["outputStream"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   servletResponseParameter    =    new   MethodParameter ( method ,     0  )  ;", "assertTrue (  \"    not   supported \"  ,    resolver . supportsParameter ( servletResponseParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( servletResponseParameter ,    mavContainer ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    servletResponse ,    result )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["servletResponse"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   servletResponseParameter    =    new   MethodParameter ( method ,     0  )  ;", "assertTrue (  \"    not   supported \"  ,    resolver . supportsParameter ( servletResponseParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( servletResponseParameter ,    null ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    servletResponse ,    result )  ;", "}", "METHOD_END"], "methodName": ["servletResponseNoMavContainer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "resolver    =    new   ServletResponseMethodArgumentResolver (  )  ;", "mavContainer    =    new   ModelAndViewContainer (  )  ;", "servletResponse    =    new   MockHttpServletResponse (  )  ;", "webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  ,    servletResponse )  ;", "method    =    getClass (  )  . getMethod (  \" supportedParams \"  ,    ServletResponse . class ,    OutputStream . class ,    Writer . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   writerParameter    =    new   MethodParameter ( method ,     2  )  ;", "assertTrue (  \" Writer   not   supported \"  ,    resolver . supportsParameter ( writerParameter )  )  ;", "Object   result    =    resolver . resolveArgument ( writerParameter ,    mavContainer ,    webRequest ,    null )  ;", "assertSame (  \" Invalid   result \"  ,    s . getWriter (  )  ,    result )  ;", "assertTrue ( mavContainer . isRequestHandled (  )  )  ;", "}", "METHOD_END"], "methodName": ["writer"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   new   SseEmitter . SseEventBuilderImpl (  )  ;", "}", "METHOD_END"], "methodName": ["event"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitter"}, {"methodBody": ["METHOD_START", "{", "Set < ResponseBodyEmitter . DataWithMediaType >    dataToSend    =    builder . build (  )  ;", "synchronized ( this )     {", "for    ( ResponseBodyEmitter . DataWithMediaType   entry    :    dataToSend )     {", "super . send ( entry . getData (  )  ,    entry . getMediaType (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["send"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitter"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send (  \" foo \"  )  ;", "this . handler . assertSentObjectCount (  3  )  ;", "this . handler . assertObject (  0  ,     \" data :  \"  ,     . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  )  ;", "this . handler . assertObject (  2  ,     \"  \\ n \\ n \"  ,     . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["send"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send ( SseEmitter . event (  )  )  ;", "this . handler . assertSentObjectCount (  0  )  ;", "}", "METHOD_END"], "methodName": ["sendEventEmpty"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send ( SseEmitter . event (  )  . comment (  \" blah \"  )  . name (  \" test \"  )  . reconnectTime (  5  0  0  0 L )  . id (  \"  1  \"  )  . data (  \" foo \"  )  )  ;", "this . handler . assertSentObjectCount (  3  )  ;", "this . handler . assertObject (  0  ,     \"  : blah \\ nevent : test \\ nretry :  5  0  0  0  \\ nid :  1  \\ ndata :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  )  ;", "this . handler . assertObject (  2  ,     \"  \\ n \\ n \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["sendEventFull"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send ( SseEmitter . event (  )  . comment (  \" blah \"  )  . data (  \" foo \"  )  . data (  \" bar \"  )  . name (  \" test \"  )  . reconnectTime (  5  0  0  0 L )  . id (  \"  1  \"  )  )  ;", "this . handler . assertSentObjectCount (  5  )  ;", "this . handler . assertObject (  0  ,     \"  : blah \\ ndata :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  )  ;", "this . handler . assertObject (  2  ,     \"  \\ ndata :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  3  ,     \" bar \"  )  ;", "this . handler . assertObject (  4  ,     \"  \\ nevent : test \\ nretry :  5  0  0  0  \\ nid :  1  \\ n \\ n \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["sendEventFullWithTwoDataLinesInTheMiddle"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send ( SseEmitter . event (  )  . data (  \" foo \"  )  )  ;", "this . handler . assertSentObjectCount (  3  )  ;", "this . handler . assertObject (  0  ,     \" data :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  )  ;", "this . handler . assertObject (  2  ,     \"  \\ n \\ n \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["sendEventWithDataLine"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send ( SseEmitter . event (  )  . data (  \" foo \"  )  . data (  \" bar \"  )  )  ;", "this . handler . assertSentObjectCount (  5  )  ;", "this . handler . assertObject (  0  ,     \" data :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  )  ;", "this . handler . assertObject (  2  ,     \"  \\ ndata :  \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "this . handler . assertObject (  3  ,     \" bar \"  )  ;", "this . handler . assertObject (  4  ,     \"  \\ n \\ n \"  ,    SseEmitter . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["sendEventWithTwoDataLines"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . emitter . send (  \" foo \"  ,    TEXT _ PLAIN )  ;", "this . handler . assertSentObjectCount (  3  )  ;", "this . handler . assertObject (  0  ,     \" data :  \"  ,     . TEXT _ PLAIN )  ;", "this . handler . assertObject (  1  ,     \" foo \"  ,    TEXT _ PLAIN )  ;", "this . handler . assertObject (  2  ,     \"  \\ n \\ n \"  ,     . TEXT _ PLAIN )  ;", "}", "METHOD_END"], "methodName": ["sendWithMediaType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   SseEmitterTests . TestHandler (  )  ;", "this . emitter    =    new   SseEmitter (  )  ;", "this . emitter . initialize ( this . handler )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.SseEmitterTests"}, {"methodBody": ["METHOD_START", "{", "CountDownLatch   latch    =    new   CountDownLatch (  1  )  ;", "MethodParameter   returnType    =    returnType (  . TestController . class ,     \" handleResponseEntity \"  )  ;", "ResponseEntity < StreamingResponseBody >    emitter    =    ResponseEntity . ok (  )  . header (  \" foo \"  ,     \" bar \"  )  . body (  (    outputStream )     -  >     {", "outputStream . write (  \" foo \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "latch . countDown (  )  ;", "}  )  ;", "this . handler . handleReturnValue ( emitter ,    returnType ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" bar \"  ,    this . response . getHeader (  \" foo \"  )  )  ;", "assertTrue ( latch . await (  5  ,    TimeUnit . SECONDS )  )  ;", "assertEquals (  \" foo \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntity"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MethodParameter   returnType    =    returnType ( StreamingResponseBodyReturnValueHandlerTests . TestController . class ,     \" handleResponseEntity \"  )  ;", "ResponseEntity <  ?  >    emitter    =    ResponseEntity . noContent (  )  . build (  )  ;", "this . handler . handleReturnValue ( emitter ,    returnType ,    this . mavContainer ,    this . webRequest )  ;", "assertFalse ( this . request . isAsyncStarted (  )  )  ;", "assertEquals (  2  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntityNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ResponseEntity <  ?  >    emitter    =    ResponseEntity . noContent (  )  . header (  \" foo \"  ,     \" bar \"  )  . build (  )  ;", "MethodParameter   returnType    =    returnType (  . TestController . class ,     \" handleResponseEntity \"  )  ;", "this . handler . handleReturnValue ( emitter ,    returnType ,    this . mavContainer ,    this . webRequest )  ;", "assertEquals ( Collections . singletonList (  \" bar \"  )  ,    this . response . getHeaders (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["responseEntityWithHeadersAndNoContent"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    clazz . getDeclaredMethod ( methodName )  ;", "return   new   MethodParameter ( method ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["returnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   StreamingResponseBodyReturnValueHandler (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   ServletWebRequest ( this . request ,    this . response )  ;", "AsyncWebRequest   asyncWebRequest    =    new   StandardServletAsyncWebRequest ( this . request ,    this . response )  ;", "WebAsyncUtils . getAsyncManager ( this . webRequest )  . setAsyncWebRequest ( asyncWebRequest )  ;", "this . request . setAsyncSupported ( true )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "CountDownLatch   latch    =    new   CountDownLatch (  1  )  ;", "MethodParameter   returnType    =    returnType (  . TestController . class ,     \" handle \"  )  ;", "StreamingResponseBody   streamingBody    =     (    outputStream )     -  >     {", "outputStream . write (  \" foo \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "latch . countDown (  )  ;", "}  ;", "this . handler . handleReturnValue ( streamingBody ,    returnType ,    this . mavContainer ,    this . webRequest )  ;", "assertTrue ( this . request . isAsyncStarted (  )  )  ;", "assertTrue ( latch . await (  5  ,    TimeUnit . SECONDS )  )  ;", "assertEquals (  \" foo \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["streamingResponseBody"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . supportsReturnType ( returnType ( StreamingResponseBodyReturnValueHandlerTests . TestController . class ,     \" handle \"  )  )  )  ;", "assertTrue ( this . handler . supportsReturnType ( returnType ( StreamingResponseBodyReturnValueHandlerTests . TestController . class ,     \" handleResponseEntity \"  )  )  )  ;", "assertFalse ( this . handler . supportsReturnType ( returnType ( StreamingResponseBodyReturnValueHandlerTests . TestController . class ,     \" handleResponseEntityString \"  )  )  )  ;", "assertFalse ( this . handler . supportsReturnType ( returnType ( StreamingResponseBodyReturnValueHandlerTests . TestController . class ,     \" handleResponseEntityParameterized \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . servletRequest . setContextPath (  \"  / myapp \"  )  ;", "this . servletRequest . setServletPath (  \"  / main \"  )  ;", "this . servletRequest . setPathInfo (  \"  / accounts \"  )  ;", "Object   actual    =    this . resolver . resolveArgument ( this . builderParam ,    new   ModelAndViewContainer (  )  ,    this . webRequest ,    null )  ;", "assertNotNull ( actual )  ;", "assertEquals ( Servlet . class ,    actual . getClass (  )  )  ;", "assertEquals (  \" http :  /  / localhost / myapp / main \"  ,     (  ( Servlet )     ( actual )  )  . build (  )  . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveArgument"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilderMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver    =    new   UriComponentsBuilderMethodArgumentResolver (  )  ;", "this . servletRequest    =    new   MockHttpServletRequest (  )  ;", "this . webRequest    =    new   ServletWebRequest ( this . servletRequest )  ;", "Method   method    =    this . getClass (  )  . getDeclaredMethod (  \" handle \"  ,    UriComponentsBuilder . class ,    ServletUriComponentsBuilder . class ,    int . class )  ;", "this . builderParam    =    new   MethodParameter ( method ,     0  )  ;", "this . servletBuilderParam    =    new   MethodParameter ( method ,     1  )  ;", "this . intParam    =    new   MethodParameter ( method ,     2  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilderMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . resolver . supportsParameter ( this . builderParam )  )  ;", "assertTrue ( this . resolver . supportsParameter ( thisBuilderParam )  )  ;", "assertFalse ( this . resolver . supportsParameter ( this . intParam )  )  ;", "}", "METHOD_END"], "methodName": ["supportsParameter"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilderMethodArgumentResolverTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . AmbiguousUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels / new \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" specific \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["ambiguous"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . BindingUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  / dates /  2  0  0  8  -  1  1  -  1  8  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  / dates /  2  0  0  8  - foo - bar \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  0  ,    response . getStatus (  )  )  ;", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . NonBindingUriTemplateController . class )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  / dates /  2  0  0  8  - foo - bar \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  5  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["binding"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . CrudController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" list \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" list \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / hotels \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" create \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" show -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  /  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" show -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" PUT \"  ,     \"  / hotels /  4  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" createOrUpdate -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" DELETE \"  ,     \"  / hotels /  4  2  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" remove -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["crud"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . CustomRegexController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  4  2  ; q =  1  ; q =  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" test -  4  2  -  ; q =  1  ; q =  2  -  [  1  ,     2  ]  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["customRegex"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . Spr 6  9  7  8 Controller . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo /  1  0  0  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" loadEntity : foo :  1  0  0  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / foo /  1  0  0  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" publish : foo :  1  0  0  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / module /  1  0  0  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" loadModule :  1  0  0  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / module /  1  0  0  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" publish : module :  1  0  0  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["doIt"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . ExplicitSubPathController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["explicitSubPath"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . SimpleUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  4  2  ; jsessionid = c 0 o 7 fszeb 1  ; q =  2  4  . xml \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  -  2  4  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["extension"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . ImplicitSubPathController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["implicitSubPath"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . MenuTreeController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / book / menu / type / M 5  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" M 5  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["menuTree"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . MethodNotAllowedController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / hotels /  1  \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  5  ,    response . getStatus (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" POST \"  ,     \"  / hotels \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  4  0  5  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["methodNotSupported"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . MultiPathController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / category / page /  5  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle 4  - page -  5  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / category / page /  5  . html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" handle 4  - page -  5  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiPaths"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . MultipleUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  ; q =  2  4  / bookings /  2  1  - other ; q =  1  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  2  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" test -  4  2  - q 2  4  -  2  1  - other - q 1  2  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiple"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    Object >    pathVars    =    new   HashMap <  >  (  )  ;", "pathVars . put (  \" hotel \"  ,     \"  4  2  \"  )  ;", "pathVars . put (  \" booking \"  ,     2  1  )  ;", "pathVars . put (  \" other \"  ,     \" other \"  )  ;", "WebApplicationContext   wac    =    initServlet ( new   ApplicationContextInitializer < GenericWebApplicationContext >  (  )     {", "@ Override", "public   void   initialize ( GenericWebApplicationContext   context )     {", "RootBeanDefinition   beanDef    =    new   RootBeanDefinition (  . ModelValidatingViewResolver . class )  ;", "beanDef . getConstructorArgumentValues (  )  . addGenericArgumentValue ( pathVars )  ;", "context . registerBeanDefinition (  \" viewResolver \"  ,    beanDef )  ;", "}", "}  ,     . ViewRenderingController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  ; q =  1  ,  2  / bookings /  2  1  - other ; q =  3  ; r = R \"  )  ;", "getServlet (  )  . service ( request ,    new   MockHttpServletResponse (  )  )  ;", ". ModelValidatingViewResolver   resolver    =    wac . getBean (  . ModelValidatingViewResolver . class )  ;", "assertEquals (  3  ,    resolver . validatedAttrCount )  ;", "}", "METHOD_END"], "methodName": ["pathVarsInModel"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . RelativePathUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  / bookings /  2  1  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  -  2  1  \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / hotels /  4  2  / bookings /  2  1  . html \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  -  2  1  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["relative"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . SimpleUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  4  2  \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" test -  4  2  -  7  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["simple"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . SimpleUriTemplateController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo . xml \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" Invalid   response   status   code \"  ,    SC _ BAD _ REQUEST ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["typeConversionError"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . VariableNamesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test / foo \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" foo - foo \"  ,    response . getContentAsString (  )  )  ;", "request    =    new   MockHttpServletRequest (  \" DELETE \"  ,     \"  / test / bar \"  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" bar - bar \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["variableNames"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "initServletWithControllers ( UriTemplateServletAnnotationControllerHandlerMethodTests . VariableNamesController . class )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test / foo . json \"  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "getServlet (  )  . service ( request ,    response )  ;", "assertEquals (  \" foo - foo \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["variableNamesWithUrlExtension"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.UriTemplateServletAnnotationControllerHandlerMethodTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getDeclaredMethod ( methodName )  ;", "return   new   MethodParameter ( method ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["createReturnValueParam"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "InternalResourceView   view    =    new   InternalResourceView (  \" testView \"  )  ;", "this . handler . handle ( view ,    createParam (  \" view \"  )  ,    this . mavContainer ,    this . webRequest )  ;", "assertSame ( view ,    this . mavContainer . getView (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnView"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   redirectView    =    new   RedirectView (  \" testView \"  )  ;", "ModelMap   redirectModel    =    new   RedirectAttributesModelMap (  )  ;", "this . mavContainer . setRedirectModel ( redirectModel )  ;", "MethodParameter   param    =    createParam (  \" view \"  )  ;", "this . handler . handle ( redirectView ,    param ,    this . mavContainer ,    this . webRequest )  ;", "assertSame ( redirectView ,    this . mavContainer . getView (  )  )  ;", "assertSame (  \" Should   have   switched   to   the   RedirectModel \"  ,    redirectModel ,    this . mavContainer . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnViewRedirect"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   ViewMethodReturnValueHandler (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . supportsReturnType ( createReturnValueParam (  \" view \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["view"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   this . redirectPatterns ;", "}", "METHOD_END"], "methodName": ["getRedirectPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "return    ( PatternMatchUtils . simpleMatch ( this . redirectPatterns ,    viewName )  )     |  |     ( viewName . startsWith (  \" redirect :  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isRedirectViewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "this . redirectPatterns    =    redirectPatterns ;", "}", "METHOD_END"], "methodName": ["setRedirectPatterns"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandler"}, {"methodBody": ["METHOD_START", "{", "ModelMap   redirectModel    =    new   RedirectAttributesModelMap (  )  ;", "this . mavContainer . setRedirectModel ( redirectModel )  ;", "this . handler . setRedirectPatterns (  \" myRedirect :  *  \"  )  ;", "this . handler . handle (  \" myRedirect : testView \"  ,    this . param ,    this . mavContainer ,    this . webRequest )  ;", "assertEquals (  \" myRedirect : testView \"  ,    this . mavContainer . getViewName (  )  )  ;", "assertSame ( redirectModel ,    this . mavContainer . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnViewCustomRedirect"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler . handleReturnValue (  \" testView \"  ,    this . param ,    this . mavContainer ,    this . webRequest )  ;", "assertEquals (  \" testView \"  ,    this . mavContainer . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnViewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelMap   redirectModel    =    new   RedirectAttributesModelMap (  )  ;", "this . mavContainer . setRedirectModel ( redirectModel )  ;", "this . handler . handle (  \" redirect : testView \"  ,    this . param ,    this . mavContainer ,    this . webRequest )  ;", "assertEquals (  \" redirect : testView \"  ,    this . mavContainer . getViewName (  )  )  ;", "assertSame ( redirectModel ,    this . mavContainer . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnViewNameRedirect"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ModelMap   redirectModel    =    new   RedirectAttributesModelMap (  )  ;", "this . mavContainer . setRedirectModel ( redirectModel )  ;", "this . handler . setRedirectPatterns (  \" myRedirect :  *  \"  )  ;", "this . handler . handle (  \" redirect : testView \"  ,    this . param ,    this . mavContainer ,    this . webRequest )  ;", "assertEquals (  \" redirect : testView \"  ,    this . mavContainer . getViewName (  )  )  ;", "assertSame ( redirectModel ,    this . mavContainer . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["returnViewRedirectWithCustomRedirectPattern"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler    =    new   ViewNameMethodReturnValueHandler (  )  ;", "this . mavContainer    =    new   ModelAndViewContainer (  )  ;", "this . webRequest    =    new   ServletWebRequest ( new   MockHttpServletRequest (  )  )  ;", "this . param    =    new   MethodParameter ( getClass (  )  . getDeclaredMethod (  \" viewName \"  )  ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( this . handler . supportsReturnType ( this . param )  )  ;", "}", "METHOD_END"], "methodName": ["supportsReturnType"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["viewName"], "fileName": "org.springframework.web.servlet.mvc.method.annotation.ViewNameMethodReturnValueHandlerTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( respo . isCommitted (  )  )  )     {", "respondError ( SC _ SERVICE _ UNAVAILABLE )  ;", "} e", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Async   timeout   for    \"     +     ( request . getMethod (  )  )  )     +     \"     [  \"  )     +     ( request . getRequestURI (  )  )  )     +     \"  ]  \"  )  )  ;", "}", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleAsyncRequestTimeoutException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ BAD _ REQUEST )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleBindException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isWarnEnabled (  )  )     {", "logger . warn (  (  \" Failed   to   cont   request   element :     \"     +    ex )  )  ;", "}", "sendSerError ( ex ,    request ,    response )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleConversionNotSupported"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ NOT _ ACCEPTABLE )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotAcceptable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ UNSUPPORTED _ MEDIA _ TYPE )  ;", "List < MediaType >    mediaTypes    =    ex . getSedMediaTypes (  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( mediaTypes )  )  )     {", "response . setHeader (  \" Accept \"  ,    MediaType . toString ( mediaTypes )  )  ;", "}", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isWarnEnabled (  )  )     {", "logger . warn (  (  \" Failed   to   read   HTTP   message :     \"     +    ex )  )  ;", "}", "respondError ( SC _ BAD _ REQUEST )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotReadable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isWarnEnabled (  )  )     {", "logger . warn (  (  \" Failed   to   write   HTTP   message :     \"     +    ex )  )  ;", "}", "sendSerError ( ex ,    request ,    response )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotWritable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "DefaultHandlerExceptionResolver . pageNotFoundLogger . warn ( ex . getMessage (  )  )  ;", "String [  ]    supportedMethods    =    ex . getSupportedMethods (  )  ;", "if    ( supportedMethods    !  =    null )     {", "response . setHeader (  \" Allow \"  ,    StringUtils . arrayToDelimitedString ( supportedMethods ,     \"  ,     \"  )  )  ;", "}", "response . sendError ( SC _ METHOD _ NOT _ ALLOWED ,    ex . getMessage (  )  )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpRequestMethodNotSupported"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ BAD _ REQUEST )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleMethodArgumentNotValidException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ INTERNAL _ SERVER _ ERROR ,    ex . getMessage (  )  )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingPathVariable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ BAD _ REQUEST ,    ex . getMessage (  )  )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ BAD _ REQUEST ,    ex . getMessage (  )  )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestPartException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ NOT _ FOUND )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleNoHandlerFoundException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "response . sendError ( SC _ BAD _ REQUEST ,    ex . getMessage (  )  )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleServletRequestBindingException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isWarnEnabled (  )  )     {", "logger . warn (  (  \" Failed   to   bind   request   element :     \"     +    ex )  )  ;", "}", "respondError ( SC _ BAD _ REQUEST )  ;", "return   new   ModelAndView (  )  ;", "}", "METHOD_END"], "methodName": ["handleTypeMismatch"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "request . setAttribute (  \" exception \"  ,    ex )  ;", "response . sendError ( SC _ INTERNAL _ SERVER _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["sendServerError"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"}, {"methodBody": ["METHOD_START", "{", "Exception   ex    =    new   AsyncRequestTimeoutException (  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     5  0  3  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleAsyncRequestTimeoutException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "BindException   ex    =    new   BindException ( new   Object (  )  ,     \" name \"  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleBindException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ConversionNotSupportedException   ex    =    new   ConversionNotSupportedException ( new   Object (  )  ,    String . class ,    new   Exception (  )  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     5  0  0  ,    response . getStatus (  )  )  ;", "assertSame ( ex ,    request . getAttribute (  \" exception \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleConversionNotSupportedException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HttpMediaTypeNotSupportedException   ex    =    new   HttpMediaTypeNotSupportedException ( new   MediaType (  \" text \"  ,     \" plain \"  )  ,    Collections . singletonList ( new   MediaType (  \" application \"  ,     \" pdf \"  )  )  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  1  5  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Invalid   Accept   header \"  ,     \" application / pdf \"  ,    response . getHeader (  \" Accept \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMediaTypeNotSupported"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HttpMessageNotReadableException   ex    =    new   HttpMessageNotReadableException (  \" foo \"  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotReadable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HttpMessageNotWritableException   ex    =    new   HttpMessageNotWritableException (  \" foo \"  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     5  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpMessageNotWritable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "HttpRequestMethodNotSupportedException   ex    =    new   HttpRequestMethodNotSupportedException (  \" GET \"  ,    new   String [  ]  {     \" POST \"  ,     \" PUT \"     }  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  5  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Invalid   Allow   header \"  ,     \" POST ,    PUT \"  ,    response . getHeader (  \" Allow \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleHttpRequestMethodNotSupported"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( new   TestBean (  )  ,     \" testBean \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" invalid \"  )  ;", "MethodParameter   parameter    =    new   MethodParameter ( this . getClass (  )  . getMethod (  \" handle \"  ,    String . class )  ,     0  )  ;", "MethodArgumentNotValidException   ex    =    new   MethodArgumentNotValidException ( parameter ,    errors )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMethodArgumentNotValid"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    getClass (  )  . getMethod (  \" handle \"  ,    String . class )  ;", "MethodParameter   parameter    =    new   MethodParameter ( method ,     0  )  ;", "MissingPathVariableException   ex    =    new   MissingPathVariableException (  \" foo \"  ,    parameter )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     5  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Missing   URI   template   variable    ' foo '    for   method   parameter   of   type   String \"  ,    response . getErrorMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingPathVariable"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "MissingServletRequestParameterException   ex    =    new   MissingServletRequestParameterException (  \" foo \"  ,     \" bar \"  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "assertEquals (  \" Required   bar   parameter    ' foo '    is   not   present \"  ,    response . getErrorMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestParameter"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "MissingServletRequestPartException   ex    =    new   MissingServletRequestPartException (  \" name \"  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "assertTrue ( response . getErrorMessage (  )  . contains (  \" request   part \"  )  )  ;", "assertTrue ( response . getErrorMessage (  )  . contains (  \" name \"  )  )  ;", "assertTrue ( response . getErrorMessage (  )  . contains (  \" not   present \"  )  )  ;", "}", "METHOD_END"], "methodName": ["handleMissingServletRequestPartException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ServletServerHttpRequest   req    =    new   ServletServerHttpRequest ( new   MockHttpServletRequest (  \" GET \"  ,     \"  / resource \"  )  )  ;", "NoHandlerFoundException   ex    =    new   NoHandlerFoundException ( req . getMethod (  )  . name (  )  ,    req . getServletRequest (  )  . getRequestURI (  )  ,    req . getHeaders (  )  )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  4  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleNoHandlerFoundException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   message    =     \" Missing   required   value    -    header ,    cookie ,    or   pathvar \"  ;", "ServletRequestBindingException   ex    =    new   ServletRequestBindingException ( message )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleServletRequestBindingException"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "TypeMismatchException   ex    =    new   TypeMismatchException (  \" foo \"  ,    String . class )  ;", "ModelAndView   mav    =    e . resolveException ( request ,    response ,    null ,    ex )  ;", "assertNotNull (  \" No   ModelAndView   returned \"  ,    mav )  ;", "assertTrue (  \" No   Empty   ModelAndView   returned \"  ,    mav . isEmpty (  )  )  ;", "assertEquals (  \" Invalid   status   code \"  ,     4  0  0  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleTypeMismatch"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "exceptionResolver . setWarnLogCategory ( exceptionResolver . getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverTests"}, {"methodBody": ["METHOD_START", "{", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertNull ( modelAndView . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultViewName"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setStatusCode ( PERMANENT _ REDIRECT )  ;", "this . controller . setViewName (  \"  / foo \"  )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" redirect :  / foo \"  ,    modelAndView . getViewName (  )  )  ;", "assertEquals (  \"  3 xx   status   should   be   left   to   RedirectView   to   set \"  ,     2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals ( PERMANENT _ REDIRECT ,    this . request . getAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["redirectStatus"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setStatusCode ( PERMANENT _ REDIRECT )  ;", "this . controller . setViewName (  \" redirect :  / foo \"  )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" redirect :  / foo \"  ,    modelAndView . getViewName (  )  )  ;", "assertEquals (  \"  3 xx   status   should   be   left   to   RedirectView   to   set \"  ,     2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals ( PERMANENT _ REDIRECT ,    this . request . getAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["redirectStatusWithRedirectPrefix"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   view    =    new   RedirectView (  \"  / foo \"  )  ;", "this . c . setView ( view )  ;", "ModelAndView   modelAndView    =    this . c . handleRequest ( this . request ,    this . response )  ;", "assertSame ( view ,    modelAndView . getView (  )  )  ;", "}", "METHOD_END"], "methodName": ["redirectView"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setStatusCode ( NOT _ FOUND )  ;", "this . controller . setStatusOnly ( true )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertNull ( modelAndView )  ;", "assertEquals (  4  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["statusOnly"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setViewName (  \" view \"  )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" view \"  ,    modelAndView . getViewName (  )  )  ;", "}", "METHOD_END"], "methodName": ["viewName"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setViewName (  \" view \"  )  ;", "this . controller . setStatusCode ( NOT _ FOUND )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" view \"  ,    modelAndView . getViewName (  )  )  ;", "assertEquals (  4  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["viewNameAndStatus"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "this . controller . setStatusCode ( NO _ CONTENT )  ;", "ModelAndView   modelAndView    =    this . controller . handleRequest ( this . request ,    this . response )  ;", "assertNull ( modelAndView )  ;", "assertEquals (  2  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["viewNameAndStatus204"], "fileName": "org.springframework.web.servlet.mvc.support.ParameterizableViewControllerTests"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "return    ( this . dataBinder )     !  =    null    ?    this . dataBinder . convertIfNecessary ( value ,    St . class )     :    value . toSt (  )  ;", "}", "METHOD_END"], "methodName": ["formatValue"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap"}, {"methodBody": ["METHOD_START", "{", "this . redirectAttributes . addAllAttributes ( Arrays . asList ( new   TestBean (  \" Fred \"  )  ,    new   Integer (  5  )  )  )  ;", "assertEquals (  \" Fred \"  ,    this . redirectAttributes . get (  \" testBean \"  )  )  ;", "assertEquals (  \"  5  \"  ,    this . redirectAttributes . get (  \" integer \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addAllAttributesList"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "String   attrName    =     \" person \"  ;", "this . redirectAttributes . addAttribute ( attrName ,    new   TestBean (  \" Fred \"  )  )  ;", "assertEquals (  \" ConversionService   should   have   invoked   toString (  )  \"  ,     \" Fred \"  ,    this . redirectAttributes . get ( attrName )  )  ;", "this . conversionService . addConverter ( new    . TestBeanConverter (  )  )  ;", "this . redirectAttributes . addAttribute ( attrName ,    new   TestBean (  \" Fred \"  )  )  ;", "assertEquals (  \" Type   converter   should   have   been   used \"  ,     \"  [ Fred ]  \"  ,    this . redirectAttributes . get ( attrName )  )  ;", "}", "METHOD_END"], "methodName": ["addAttributeCustomType"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "this . redirectAttributes . addAttribute (  \" speed \"  ,     6  5  )  ;", "assertEquals (  \"  6  5  \"  ,    this . redirectAttributes . get (  \" speed \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addAttributePrimitiveType"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "String   attrName    =     \" person \"  ;", "model    =    new    (  )  ;", "model . addAttribute ( attrName ,    new   TestBean (  \" Fred \"  )  )  ;", "assertEquals (  \" toString (  )    should   have   been   used \"  ,     \" Fred \"  ,    model . get ( attrName )  )  ;", "}", "METHOD_END"], "methodName": ["addAttributeToString"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "this . redirectAttributes . addAttribute ( new   TestBean (  \" Fred \"  )  )  ;", "assertEquals (  \" Fred \"  ,    this . redirectAttributes . get (  \" testBean \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addAttributeValue"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" person \"  ,    new   TestBean (  \" Fred \"  )  )  ;", "map . put (  \" age \"  ,     3  3  )  ;", "this . r . addAllAttributes ( map )  ;", "assertEquals (  \" Fred \"  ,    this . r . get (  \" person \"  )  )  ;", "assertEquals (  \"  3  3  \"  ,    this . r . get (  \" age \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addAttributesMap"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" person \"  ,    new   TestBean (  \" Fred \"  )  )  ;", "map . put (  \" age \"  ,     3  3  )  ;", "this . r . addAttribute (  \" person \"  ,    new   TestBean (  \" Ralph \"  )  )  ;", "this . r . mergeAttributes ( map )  ;", "assertEquals (  \" Ralph \"  ,    this . r . get (  \" person \"  )  )  ;", "assertEquals (  \"  3  3  \"  ,    this . r . get (  \" age \"  )  )  ;", "}", "METHOD_END"], "methodName": ["mergeAttributes"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "this . redirectAttributes . put (  \" testBean \"  ,    new   TestBean (  \" Fred \"  )  )  ;", "assertEquals (  \" Fred \"  ,    this . redirectAttributes . get (  \" testBean \"  )  )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" person \"  ,    new   TestBean (  \" Fred \"  )  )  ;", "map . put (  \" age \"  ,     3  3  )  ;", "this . r . putAll ( map )  ;", "assertEquals (  \" Fred \"  ,    this . r . get (  \" person \"  )  )  ;", "assertEquals (  \"  3  3  \"  ,    this . r . get (  \" age \"  )  )  ;", "}", "METHOD_END"], "methodName": ["putAll"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "this . conversionService    =    new   DefaultFormattingConversionService (  )  ;", "DataBinder   dataBinder    =    new   DataBinder ( null )  ;", "dataBinder . setConversionService ( conversionService )  ;", "this . redirectAttributes    =    new    ( dataBinder )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.mvc.support.RedirectAttributesModelMapTests"}, {"methodBody": ["METHOD_START", "{", "return   this . pathStrategy ;", "}", "METHOD_END"], "methodName": ["getVersionPathStrategy"], "fileName": "org.springframework.web.servlet.resource.AbstractVersionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   FileCopyUtils . copyToByteArray ( resource . getInputStream (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceBytes"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( info . isLink (  )  )  )     {", "return   new    . LineOutput ( info . getLine (  )  ,    null )  ;", "}", "Resource   appCacheResource    =    transformerChain . getResolverChain (  )  . resolveResource ( null ,    info . getLine (  )  ,    Collections . singletonList ( resource )  )  ;", "String   path    =    info . getLine (  )  ;", "String   absolutePath    =    toAbsolutePath ( path ,    request )  ;", "String   newPath    =    resolveUrlPath ( absolutePath ,    request ,    resource ,    transformerChain )  ;", "if    (  . logger . isTraceEnabled (  )  )     {", "if    (  ( newPath    !  =    null )     &  &     (  !  ( newPath . equals ( path )  )  )  )     {", ". logger . trace (  (  (  (  (  \" Link   modified :     \"     +    path )     +     \"     ( original :     \"  )     +    path )     +     \"  )  \"  )  )  ;", "} else    {", ". logger . trace (  (  \" Link   not   modified :     \"     +    path )  )  ;", "}", "}", "return   new    . LineOutput (  ( newPath    !  =    null    ?    newPath    :    path )  ,    appCacheResource )  ;", "}", "METHOD_END"], "methodName": ["processLine"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformer"}, {"methodBody": ["METHOD_START", "{", "this . chain    =    mock ( ResourceTransformerChain . class )  ;", "this . request    =    mock ( HttpServletRequest . class )  ;", "Resource   resource    =    mock ( Resource . class )  ;", "given ( resource . getFilename (  )  )  . willReturn (  \" foobar . file \"  )  ;", "given ( this . chain . transform ( this . request ,    resource )  )  . willReturn ( resource )  ;", "Resource   result    =    this . transformer . transform ( this . request ,    resource ,    this . chain )  ;", "assertEquals ( resource ,    result )  ;", "}", "METHOD_END"], "methodName": ["noTransformIfExtensionNoMatch"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformerTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   allowedLocation    =    new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  ;", "ResourceHttpRequestHandler   resourceHandler    =    new   ResourceHttpRequestHandler (  )  ;", "ResourceUrlProvider   resourceUrlProvider    =    new   ResourceUrlProvider (  )  ;", "resourceUrlProvider . setHandlerMap ( Collections . singletonMap (  \"  / static /  *  *  \"  ,    resourceHandler )  )  ;", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  )  ;", "PathResourceResolver   pathResolver    =    new   PathResourceResolver (  )  ;", "pathResolver . setAllowedLocations ( allowedLocation )  ;", "List < ResourceResolver >    resolvers    =    Arrays . asList ( versionResolver ,    pathResolver )  ;", "ResourceResolverChain   resolverChain    =    new   DefaultResourceResolverChain ( resolvers )  ;", "CssLinkResourceTransformer   cssLinkResourceTransformer    =    new   CssLinkResourceTransformer (  )  ;", "cssLinkResourceTransformer . setResourceUrlProvider ( resourceUrlProvider )  ;", "List < ResourceTransformer >    transformers    =    Arrays . asList ( cssLinkResourceTransformer )  ;", "this . chain    =    new   DefaultResourceTransformerChain ( resolverChain ,    transformers )  ;", "this . transformer    =    new    (  )  ;", "this . transformer . setResourceUrlProvider ( resourceUrlProvider )  ;", "resourceHandler . setResourceResolvers ( resolvers )  ;", "resourceHandler . setResourceTransformers ( transformers )  ;", "resourceHandler . setLocations ( Collections . singletonList ( allowedLocation )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . chain    =    mock ( ResourceTransformerChain . class )  ;", "this . request    =    mock ( HttpServletRequest . class )  ;", "Resource   resource    =    new   ClassPathResource (  \" test / error . appcache \"  ,    getClass (  )  )  ;", "given ( this . chain . transform ( this . request ,    resource )  )  . willReturn ( resource )  ;", "Resource   result    =    this . transformer . transform ( this . request ,    resource ,    this . chain )  ;", "assertEquals ( resource ,    result )  ;", "}", "METHOD_END"], "methodName": ["syntaxErrorInManifest"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / test . appcache \"  )  ;", "Resource   resource    =    new   ClassPathResource (  \" test / test . appcache \"  ,    getClass (  )  )  ;", "Resource   result    =    this . t . transform ( this . request ,    resource ,    this . chain )  ;", "byte [  ]    bytes    =    FileCopyUtils . copyToByteArray ( result . getInputStream (  )  )  ;", "String   content    =    new   String ( bytes ,     \" UTF -  8  \"  )  ;", "assertThat (  \" should   rewrite   resource   links \"  ,    content ,    Matchers . containsString (  \"  / static / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  )  )  ;", "assertThat (  \" should   rewrite   resource   links \"  ,    content ,    Matchers . containsString (  \"  / static / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  )  )  ;", "assertThat (  \" should   rewrite   resource   links \"  ,    content ,    Matchers . containsString (  \"  / static / js / bar - bd 5  0  8 c 6  2  2  3  5 b 8  3  2 d 9  6  0  2  9  8 ca 6 c 0 b 7  6  4  5  . js \"  )  )  ;", "assertThat (  \" should   not   rewrite   external   resources \"  ,    content ,    Matchers . containsString (  \"  /  / example . org / style . css \"  )  )  ;", "assertThat (  \" should   not   rewrite   external   resources \"  ,    content ,    Matchers . containsString (  \" http :  /  / example . org / image . png \"  )  )  ;", "assertThat (  \" should   generate   fingerprint \"  ,    content ,    Matchers . containsString (  \"  #    Hash :     4 bf 0  3  3  8 bcbeb 0 a 5 b 3 a 4 ec 9 ed 8  8  6  4  1  0  7 d \"  )  )  ;", "}", "METHOD_END"], "methodName": ["transformManifest"], "fileName": "org.springframework.web.servlet.resource.AppCacheManifestTransformerTests"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   key    =    new   StringBuilder ( CachingResourceResolver . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )  ;", "key . append ( requestPath )  ;", "if    ( request    !  =    null )     {", "String   encoding    =    request . getHeader (  \" Accept - Encoding \"  )  ;", "if    (  ( encoding    !  =    null )     &  &     ( encoding . contains (  \" gzip \"  )  )  )     {", "key . append (  \"  + encoding = gzip \"  )  ;", "}", "}", "return   key . toString (  )  ;", "}", "METHOD_END"], "methodName": ["computeKey"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolver"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" bar . css \"  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,    file )  ;", "request . addHeader (  \" Accept - Encoding \"  ,     \" gzip \"  )  ;", "Resource   expected    =    this . chain . resolveResource ( request ,    file ,    this . locations )  ;", "String   cacheKey    =     (  (  . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )     +    file )     +     \"  + encoding = gzip \"  ;", "assertEquals ( expected ,    this . cache . get ( cacheKey )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceAcceptEncodingInCacheKey"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" bar . css \"  ;", "expected    =    new   ClassPath (  (  \" test /  \"     +    file )  ,    getClass (  )  )  ;", "actual    =    this . chain . resolve ( null ,    file ,    this . locations )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceInternal"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   expected    =    Mockito . mock ( Resource . class )  ;", "this . cache . put (  (  (  . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )     +     \" bar . css \"  )  ,    expected )  ;", "String   file    =     \" bar . css \"  ;", "Resource   actual    =    this . chain . resolveResource ( null ,    file ,    this . locations )  ;", "assertSame ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceInternalFromCache"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( this . chain . resolveResource ( null ,     \" invalid . css \"  ,    this . locations )  )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceInternalNoMatch"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    Mockito . mock ( Resource . class )  ;", "Resource   gzResource    =    Mockito . mock ( Resource . class )  ;", "this . cache . put (  (  (  . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )     +     \" bar . css \"  )  ,    resource )  ;", "this . cache . put (  (  (  . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )     +     \" bar . css + encoding = gzip \"  )  ,    gzResource )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \" bar . css \"  )  ;", "assertSame ( resource ,    this . chain . resolveResource ( request ,     \" bar . css \"  ,    this . locations )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \" bar . css \"  )  ;", "request . addHeader (  \" Accept - Encoding \"  ,     \" gzip \"  )  ;", "assertSame ( gzResource ,    this . chain . resolveResource ( request ,     \" bar . css \"  ,    this . locations )  )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceMatchingEncoding"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" bar . css \"  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,    file )  ;", "Resource   expected    =    this . chain . resolveResource ( request ,    file ,    this . locations )  ;", "String   cacheKey    =     (  . RESOLVED _ RESOURCE _ CACHE _ KEY _ PREFIX )     +    file ;", "assertEquals ( expected ,    this . cache . get ( cacheKey )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceNoAcceptEncodingInCacheKey"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   expected    =     \"  / foo . css \"  ;", "String   actual    =    this . chain . rUrlPath ( expected ,    this . locations )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolverUrlPath"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   expected    =     \" cached - imaginary . css \"  ;", "this . cache . put (  (  (  . RESOLVED _ URL _ PATH _ CACHE _ KEY _ PREFIX )     +     \" imaginary . css \"  )  ,    expected )  ;", "String   actual    =    this . chain . resolveUrlPath (  \" imaginary . css \"  ,    this . locations )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolverUrlPathFromCache"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( this . chain . resolveUrlPath (  \" invalid . css \"  ,    this . locations )  )  ;", "}", "METHOD_END"], "methodName": ["resolverUrlPathNoMatch"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . cache    =    new   ConcurrentMapCache (  \" resourceCache \"  )  ;", "List < ResourceResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( new    ( this . cache )  )  ;", "resolvers . add ( new   PathResourceResolver (  )  )  ;", "this . chain    =    new   DefaultResourceResolverChain ( resolvers )  ;", "this . locations    =    new   ArrayList (  )  ;", "this . locations . add ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.CachingResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   this . cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.springframework.web.servlet.resource.CachingResourceTransformer"}, {"methodBody": ["METHOD_START", "{", "String   requestPath    =     \" test / bar . css \"  ;", "String   version    =     \"  1  2  3  \"  ;", "assertEquals (  \" test / bar -  1  2  3  . css \"  ,    this . v . addVersion ( requestPath ,    version )  )  ;", "}", "METHOD_END"], "methodName": ["addVersionToUrl"], "fileName": "org.springframework.web.servlet.resource.ContentBasedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "String   hash    =     \"  7 fbe 7  6 cdac 6  0  9  3  7  8  4  8  9  5 bb 4  9  8  9  2  0  3 e 5 a \"  ;", "String   path    =     (  \" font - awesome / css / font - awesome . min -  \"     +    hash )     +     \"  . css \"  ;", "assertEquals ( hash ,    this . v . extractVersion ( path )  )  ;", "assertNull ( this . v . extractVersion (  \" foo / bar . css \"  )  )  ;", "}", "METHOD_END"], "methodName": ["extractVersion"], "fileName": "org.springframework.web.servlet.resource.ContentBasedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "Resource   expected    =    new   ClassPathResource (  \" test / bar . css \"  ,    getClass (  )  )  ;", "String   hash    =    DigestUtils . md 5 DigestAsHex ( FileCopyUtils . copyToByteArray ( expected . getInputStream (  )  )  )  ;", "assertEquals ( hash ,    this . v . getResourceVersion ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceVersion"], "fileName": "org.springframework.web.servlet.resource.ContentBasedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" font - awesome / css / font - awesome . min % s % s . css \"  ;", "String   hash    =     \"  7 fbe 7  6 cdac 6  0  9  3  7  8  4  8  9  5 bb 4  9  8  9  2  0  3 e 5 a \"  ;", "assertEquals ( String . format ( file ,     \"  \"  ,     \"  \"  )  ,    this . v . removeVersion ( String . format ( file ,     \"  -  \"  ,    hash )  ,    hash )  )  ;", "assertNull ( this . v . extractVersion (  \" foo / bar . css \"  )  )  ;", "}", "METHOD_END"], "methodName": ["removeVersion"], "fileName": "org.springframework.web.servlet.resource.ContentBasedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "VersionResourceResolver   versionResourceResolver    =    new   VersionResourceResolver (  )  ;", "versionResourceResolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . v )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.ContentBasedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "int   schemeIndex    =    link . indexOf (  '  :  '  )  ;", "return    (  ( schemeIndex    >     0  )     &  &     (  !  ( link . subst (  0  ,    schemeIndex )  . contains (  \"  /  \"  )  )  )  )     |  |     (  ( link . indexOf (  \"  /  /  \"  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["hasScheme"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformer"}, {"methodBody": ["METHOD_START", "{", "Resource   location    =    new   ClassPathResource (  \" test /  \"  ,    CssLinkResourceTransformerTests . class )  ;", "Path   original    =    Paths . get ( location . getFile (  )  . getAbsolutePath (  )  ,    filePath )  ;", "Path   copy    =    Paths . get ( location . getFile (  )  . getAbsolutePath (  )  ,    copyFilePath )  ;", "Files . deleteIfExists ( copy )  ;", "Files . copy ( original ,    copy )  ;", "copy . toFile (  )  . deleteOnExit (  )  ;", "}", "METHOD_END"], "methodName": ["createTempCopy"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   allowedLocation    =    new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  ;", "ResourceHttpRequestHandler   resourceHandler    =    new   ResourceHttpRequestHandler (  )  ;", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  )  ;", "PathResourceResolver   pathResolver    =    new   PathResourceResolver (  )  ;", "pathResolver . setAllowedLocations ( allowedLocation )  ;", "List < ResourceResolver >    resolvers    =    Arrays . asList ( versionResolver ,    pathResolver )  ;", "ResourceUrlProvider   resourceUrlProvider    =    new   ResourceUrlProvider (  )  ;", "resourceUrlProvider . setHandlerMap ( Collections . singletonMap (  \"  / static /  *  *  \"  ,    resourceHandler )  )  ;", "cssLinkResourceTransformer    =    new    (  )  ;", "cssLinkResourceTransformer . setResourceUrlProvider ( resourceUrlProvider )  ;", "List < ResourceTransformer >    transformers    =    Arrays . asList ( cssLinkResourceTransformer )  ;", "resourceHandler . setResourceResolvers ( resolvers )  ;", "resourceHandler . setResourceTransformers ( transformers )  ;", "resourceHandler . setLocations ( Collections . singletonList ( allowedLocation )  )  ;", "ResourceResolverChain   resolverChain    =    new   DefaultResourceResolverChain ( resolvers )  ;", "this . transformerChain    =    new   DefaultResourceTransformerChain ( resolverChain ,    transformers )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / main . css \"  )  ;", "Resource   css    =    new   ClassPathResource (  \" test / main . css \"  ,    getClass (  )  )  ;", "dResource   actual    =     (  ( dResource )     ( this . transformerChain . transform ( this . request ,    css )  )  )  ;", "String   expected    =     \"  \\ n \"     +     (  (  (  (  (  \"  @ import   url (  \\  \"  / static / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css ?  # iefix \\  \"  )  ;  \\ n \"     +     \"  @ import   url (  \\  '  / static / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css # bla - normal \\  '  )  ;  \\ n \"  )     +     \"  @ import   url (  / static / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css )  ;  \\ n \\ n \"  )     +     \"  @ import    \\  \"  / static / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \\  \"  ;  \\ n \"  )     +     \"  @ import    \\  '  / static / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \\  '  ;  \\ n \\ n \"  )     +     \" body    {    background :    url (  \\  \"  / static / images / image - f 4  4  8 cd 1 d 5 dba 8  2 b 7  7  4 f 3  2  0  2 c 8  7  8  2  3  0 b 3  . png ?  # iefix \\  \"  )     }  \\ n \"  )  ;", "String   result    =    new   String ( actual . getByteArray (  )  ,    StandardCharsets . UTF _  8  )  ;", "result    =    StringUtils . deleteAny ( result ,     \"  \\ r \"  )  ;", "assertEquals ( expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / external . css \"  )  ;", "ResourceResolverChain   resolverChain    =    Mockito . mock ( DefaultResourceResolverChain . class )  ;", "ResourceTransformerChain   transformerChain    =    new   DefaultResourceTransformerChain ( resolverChain ,    Arrays . asList ( new    (  )  )  )  ;", "Resource   externalCss    =    new   ClassPathResource (  \" test / external . css \"  ,    getClass (  )  )  ;", "Resource   resource    =    transformerChain . transform ( this . request ,    externalCss )  ;", "TransformedResource   transformedResource    =     (  ( TransformedResource )     ( resource )  )  ;", "String   expected    =     \"  @ import   url (  \\  \" http :  /  / example . org / fonts / css \\  \"  )  ;  \\ n \"     +     (  \" body    {    background :    url (  \\  \" file :  /  /  / home / spring / image . png \\  \"  )     }  \\ n \"     +     \" figure    {    background :    url (  \\  \"  /  / example . org / style . css \\  \"  )  }  \"  )  ;", "String   result    =    new   String ( transformedResource . getByteArray (  )  ,    StandardCharsets . UTF _  8  )  ;", "result    =    StringUtils . deleteAny ( result ,     \"  \\ r \"  )  ;", "assertEquals ( expected ,    result )  ;", "Mockito . verify ( resolverChain ,    Mockito . never (  )  )  . resolveUrlPath (  \" http :  /  / example . org / fonts / css \"  ,    Arrays . asList ( externalCss )  )  ;", "Mockito . verify ( resolverChain ,    Mockito . never (  )  )  . resolveUrlPath (  \" file :  /  /  / home / spring / image . png \"  ,    Arrays . asList ( externalCss )  )  ;", "Mockito . verify ( resolverChain ,    Mockito . never (  )  )  . resolveUrlPath (  \"  /  / example . org / style . css \"  ,    Arrays . asList ( externalCss )  )  ;", "}", "METHOD_END"], "methodName": ["transformExtLinksNotAllowed"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / foo . css \"  )  ;", "Resource   expected    =    new   ClassPathResource (  \" test / foo . css \"  ,    getClass (  )  )  ;", "Resource   actual    =    this . tChain . transform ( this . request ,    expected )  ;", "assertSame ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["transformNoLinks"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / main . css \"  )  ;", "Resource   original    =    new   ClassPathResource (  \" test / main . css \"  ,    getClass (  )  )  ;", "createTempCopy (  \" main . css \"  ,     \" main . css . gz \"  )  ;", "GzipResourceResolver . GzippedResource   expected    =    new   GzipResourceResolver . GzippedResource ( original )  ;", "Resource   actual    =    this . tChain . transform ( this . request ,    expected )  ;", "assertSame ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["transformWithGzippedResource"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / static / images / image . png \"  )  ;", "Resource   expected    =    new   ClassPathResource (  \" test / images / image . png \"  ,    getClass (  )  )  ;", "Resource   actual    =    this . tChain . transform ( this . request ,    expected )  ;", "assertSame ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["transformWithNonCssResource"], "fileName": "org.springframework.web.servlet.resource.CssLinkResourceTransformerTests"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . index )     <  =     ( this . resolvers . size (  )  )  )  ,     \" Current   index   exceeds   the   number   of   configured   ResourceResolvers \"  )  ;", "if    (  ( this . index )     =  =     (  ( this . resolvers . size (  )  )     -     1  )  )     {", "return   null ;", "}", "( this . index )  +  +  ;", "return   this . resolvers . get ( this . index )  ;", "}", "METHOD_END"], "methodName": ["getNext"], "fileName": "org.springframework.web.servlet.resource.DefaultResourceResolverChain"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . index )     <  =     ( this . transformers . size (  )  )  )  ,     \" Current   index   exceeds   the   number   of   configured   ResourceTransformers \"  )  ;", "if    (  ( this . index )     =  =     (  ( this . transformers . size (  )  )     -     1  )  )     {", "return   null ;", "}", "( this . index )  +  +  ;", "return   this . transformers . get ( this . index )  ;", "}", "METHOD_END"], "methodName": ["getNext"], "fileName": "org.springframework.web.servlet.resource.DefaultResourceTransformerChain"}, {"methodBody": ["METHOD_START", "{", "return   this . resolverChain ;", "}", "METHOD_END"], "methodName": ["getResolverChain"], "fileName": "org.springframework.web.servlet.resource.DefaultResourceTransformerChain"}, {"methodBody": ["METHOD_START", "{", "this . defaultServletName    =    defaultServletName ;", "}", "METHOD_END"], "methodName": ["setDefaultServletName"], "fileName": "org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  (  ( this . version )     +     \"  /  \"  )     +     ( this . path )  )  ,    this . strategy . addVersion (  (  \"  /  \"     +     ( this . path )  )  ,    this . version )  )  ;", "}", "METHOD_END"], "methodName": ["addVersion"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "String   relativePath    =     \"  .  .  /  \"     +     ( this . path )  ;", "assertEquals ( relativePath ,    this . strategy . ad ( relativePath ,    this . version )  )  ;", "}", "METHOD_END"], "methodName": ["addVersionRelativePath"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "new   FixedVersionStrategy (  \"        \"  )  ;", "}", "METHOD_END"], "methodName": ["emptyPrefixVersion"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( this . version ,    this . strategy . extractVersion (  (  (  ( this . version )     +     \"  /  \"  )     +     ( this . path )  )  )  )  ;", "assertNull ( this . strategy . extractVersion ( this . path )  )  ;", "}", "METHOD_END"], "methodName": ["extractVersion"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  \"  /  \"     +     ( this . path )  )  ,    this . strategy . removeVersion (  (  (  ( this . version )     +     \"  /  \"  )     +     ( this . path )  )  ,    this . version )  )  ;", "}", "METHOD_END"], "methodName": ["removeVersion"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "this . strategy    =    new   FixedVersionStrategy ( this . version )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.FixedVersionStrategyTests"}, {"methodBody": ["METHOD_START", "{", "String   value    =    request . getHeader (  \" Accept - Encoding \"  )  ;", "return    ( value    !  =    null )     &  &     ( value . toLowerCase (  )  . contains (  \" gzip \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isGzipAccepted"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolver"}, {"methodBody": ["METHOD_START", "{", "Resource   location    =    new   ClassPathResource (  \" test /  \"  ,    GzipResourceResolverTests . class )  ;", "Resource   fileResource    =    new   FileSystemResource ( location . createRelative ( filePath )  . getFile (  )  )  ;", "Path   gzFilePath    =    Paths . get (  (  ( fileResource . getFile (  )  . getAbsolutePath (  )  )     +     \"  . gz \"  )  )  ;", "Files . deleteIfExists ( gzFilePath )  ;", "File   gzFile    =    Files . createFile ( gzFilePath )  . toFile (  )  ;", "GZIPOutputStream   out    =    new   GZIPOutputStream ( new   FileOutputStream ( gzFile )  )  ;", "FileCopyUtils . copy ( fileResource . getInputStream (  )  ,    out )  ;", "gzFile . deleteOnExit (  )  ;", "}", "METHOD_END"], "methodName": ["createGzFile"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "GzipResourceResolverTests . createGzFile (  \"  / js / foo . js \"  )  ;", "GzipResourceResolverTests . createGzFile (  \" foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  )  ;", "}", "METHOD_END"], "methodName": ["createGzippedResources"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept - Encoding \"  ,     \" gzip \"  )  ;", "String   file    =     \" foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  ;", "Resource   resolved    =    this . resolver . resolveResource ( request ,    file ,    this . locations )  ;", "String   gzFile    =    file    +     \"  . gz \"  ;", "Resource    =    new   ClassPathResource (  (  \" test /  \"     +    gzFile )  ,    getClass (  )  )  ;", "assertEquals ( getDescription (  )  ,    resolved . getDescription (  )  )  ;", "assertEquals ( new   ClassPathResource (  (  \" test /  \"     +    file )  )  . getFilename (  )  ,    resolved . getFilename (  )  )  ;", "assertTrue (  (  (  (  \" Expected    \"     +    resolved )     +     \"    to   be   of   type    \"  )     +     ( HttpResource . class )  )  ,     ( resolved   instanceof   HttpResource )  )  ;", "}", "METHOD_END"], "methodName": ["resolveFingerprintedGzippedFile"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / js / foo . js \"  )  ;", "request . addHeader (  \" Accept - Encoding \"  ,     \" gzip \"  )  ;", "String   file    =     \" js / foo . js \"  ;", "Resource   resolved    =    this . resolver . resolveResource ( request ,    file ,    this . locations )  ;", "String   gzFile    =    file    +     \"  . gz \"  ;", "Resource   gzResource    =    new   ClassPathResource (  (  \" test /  \"     +    gzFile )  ,    getClass (  )  )  ;", "assertEquals ( gzResource . getDescription (  )  ,    resolved . getDescription (  )  )  ;", "assertEquals ( new   ClassPathResource (  (  \" test /  \"     +    file )  )  . getFilename (  )  ,    resolved . getFilename (  )  )  ;", "assertTrue (  (  (  (  \" Expected    \"     +    resolved )     +     \"    to   be   of   type    \"  )     +     ( Htt . class )  )  ,     ( resolved   instanceof   Htt )  )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / js / foo . js \"  )  ;", "resolved    =    this . resolver . resolveResource ( request ,    file ,    this . locations )  ;", "Resource   resource    =    new   ClassPathResource (  (  \" test /  \"     +    file )  ,    getClass (  )  )  ;", "assertEquals ( resource . getDescription (  )  ,    resolved . getDescription (  )  )  ;", "assertEquals ( new   ClassPathResource (  (  \" test /  \"     +    file )  )  . getFilename (  )  ,    resolved . getFilename (  )  )  ;", "assertFalse (  (  (  (  \" Expected    \"     +    resolved )     +     \"    to    * not *    be   of   type    \"  )     +     ( Htt . class )  )  ,     ( resolved   instanceof   Htt )  )  ;", "}", "METHOD_END"], "methodName": ["resolveFromCacheWithEncodingVariants"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addHeader (  \" Accept - Encoding \"  ,     \" gzip \"  )  ;", "String   file    =     \" js / foo . js \"  ;", "Resource   resolved    =    this . resolver . resolveResource ( request ,    file ,    this . locations )  ;", "String   gzFile    =    file    +     \"  . gz \"  ;", "Resource    =    new   ClassPathResource (  (  \" test /  \"     +    gzFile )  ,    getClass (  )  )  ;", "assertEquals ( getDescription (  )  ,    resolved . getDescription (  )  )  ;", "assertEquals ( new   ClassPathResource (  (  \" test /  \"     +    file )  )  . getFilename (  )  ,    resolved . getFilename (  )  )  ;", "assertTrue (  (  (  (  \" Expected    \"     +    resolved )     +     \"    to   be   of   type    \"  )     +     ( HttpResource . class )  )  ,     ( resolved   instanceof   HttpResource )  )  ;", "}", "METHOD_END"], "methodName": ["resolveGzippedFile"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" js / foo . js \"  ;", "Resource   resolved    =    this . resolver . resolveResource ( null ,    file ,    this . locations )  ;", "String   gzFile    =    file    +     \"  . gz \"  ;", "Resource   gzResource    =    new   ClassPathResource (  (  \" test /  \"     +    gzFile )  ,    getClass (  )  )  ;", "assertEquals ( gzResource . getDescription (  )  ,    resolved . getDescription (  )  )  ;", "assertEquals ( new   ClassPathResource (  (  \" test /  \"     +    file )  )  . getFilename (  )  ,    resolved . getFilename (  )  )  ;", "assertTrue (  (  (  (  \" Expected    \"     +    resolved )     +     \"    to   be   of   type    \"  )     +     ( Htt . class )  )  ,     ( resolved   instanceof   Htt )  )  ;", "}", "METHOD_END"], "methodName": ["resolveWithNullRequest"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . cache    =    new   ConcurrentMapCache (  \" resourceCache \"  )  ;", "Map < String ,    VersionStrategy >    versionStrategyMap    =    new   HashMap <  >  (  )  ;", "versionStrategyMap . put (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  ;", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( versionStrategyMap )  ;", "List < ResourceResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( new   CachingResourceResolver ( this . cache )  )  ;", "resolvers . add ( new    (  )  )  ;", "resolvers . add ( versionResolver )  ;", "resolvers . add ( new   PathResourceResolver (  )  )  ;", "this . resolver    =    new   DefaultResourceResolverChain ( resolvers )  ;", "this . locations    =    new   ArrayList (  )  ;", "this . locations . add ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "this . locations . add ( new   ClassPathResource (  \" testalternatepath /  \"  ,    getClass (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.resource.GzipResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "if    ( isResourceUnderLocation ( resource ,    location )  )     {", "return   true ;", "}", "Resource [  ]    allowedLocations    =    getAllowedLocations (  )  ;", "if    ( allowedLocations    !  =    null )     {", "for    ( Resource   current    :    allowedLocations )     {", "if    ( isResourceUnderLocation ( resource ,    current )  )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["checkResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( shouldEncodeRelativePath ( location )  )     &  &     ( request    !  =    null )  )     {", "Charset   charset    =    this . locationCharsets . getOrDefault ( location ,    StandardCharsets . UTF _  8  )  ;", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "StringTokenizer   tokenizer    =    new   StringTokenizer ( path ,     \"  /  \"  )  ;", "while    ( tokenizer . hasMoreTokens (  )  )     {", "String   value    =    UriUtils . encode ( tokenizer . nextToken (  )  ,    charset )  ;", "sb . append ( value )  ;", "sb . append (  \"  /  \"  )  ;", "}", "if    (  !  ( path . endsWith (  \"  /  \"  )  )  )     {", "sb . setLength (  (  ( sb . length (  )  )     -     1  )  )  ;", "}", "return   sb . toString (  )  ;", "} else    {", "return   path ;", "}", "}", "METHOD_END"], "methodName": ["encodeIfNecessary"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . allowedLocations ;", "}", "METHOD_END"], "methodName": ["getAllowedLocations"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( this . locationCharsets )  ;", "}", "METHOD_END"], "methodName": ["getLocationCharsets"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( Resource   location    :    locations )     {", "try    {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" Checking   location :     \"     +    location )  )  ;", "}", "String   pathToUse    =    encodeIfNecessary ( resourcePath ,    request ,    location )  ;", "Resource   resource    =    getResource ( pathToUse ,    location )  ;", "if    ( resource    !  =    null )     {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" Found   match :     \"     +    resource )  )  ;", "}", "return   resource ;", "} else", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" No   match   for   location :     \"     +    location )  )  ;", "}", "}    catch    ( IOException   ex )     {", "logger . trace (  \" Failure   checking   for   relative   resource    -    trying   next   location \"  ,    ex )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "Resource    =    location . createRelative ( ath )  ;", "if    (  ( exists (  )  )     &  &     ( isReadable (  )  )  )     {", "if    ( checkResource (    location )  )     {", "return", "} else", "if    ( logger . isTraceEnabled (  )  )     {", "Resource [  ]    allowedLocations    =    getAllowedLocations (  )  ;", "logger . trace (  (  (  (  (  (  (  (  (  (  (  \" Resource   path    \\  \"  \"     +    ath )     +     \"  \\  \"    was   successfully   resolved    \"  )     +     \" but    \\  \"  \"  )     +     ( getURL (  )  )  )     +     \"  \\  \"    is   neither   under   the    \"  )     +     \" current   location    \\  \"  \"  )     +     ( location . getURL (  )  )  )     +     \"  \\  \"    nor   under   any   of   the    \"  )     +     \" allowed   locations    \"  )     +     ( allowedLocations    !  =    null    ?    asList ( allowedLocations )     :     \"  [  ]  \"  )  )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( resourcePath . contains (  \"  %  \"  )  )     {", "try    {", "String   decodedPath    =    URLDecoder . decode ( resourcePath ,     \" UTF -  8  \"  )  ;", "if    (  ( decodedPath . contains (  \"  .  .  /  \"  )  )     |  |     ( decodedPath . contains (  \"  .  .  \\  \\  \"  )  )  )     {", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  \" Resolved   resource   path   contains   encoded    \\  \"  .  .  /  \\  \"    or    \\  \"  .  .  \\  \\  \\  \"  :     \"     +    resourcePath )  )  ;", "}", "return   true ;", "}", "}    catch    ( UnsupportedEncodingException   ex )     {", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isInvalidEncodedPath"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resource . getClass (  )  )     !  =     ( location . getClass (  )  )  )     {", "return   false ;", "}", "String   resourcePath ;", "String   locationPath ;", "if    ( resource   instanceof   UrlResource )     {", "resourcePath    =    resource . getURL (  )  . toExternalForm (  )  ;", "locationPath    =    StringUtils . cleanPath ( location . getURL (  )  . toString (  )  )  ;", "} else", "if    ( resource   instanceof   ClassPathResource )     {", "resourcePath    =     (  ( ClassPathResource )     ( resource )  )  . getPath (  )  ;", "locationPath    =    StringUtils . cleanPath (  (  ( ClassPathResource )     ( location )  )  . getPath (  )  )  ;", "} else", "if    ( resource   instanceof   context . support . ServletContextResource )     {", "resourcePath    =     (  ( context . support . ServletContextResource )     ( resource )  )  . getPath (  )  ;", "locationPath    =    StringUtils . cleanPath (  (  ( context . support . ServletContextResource )     ( location )  )  . getPath (  )  )  ;", "} else    {", "resourcePath    =    resource . getURL (  )  . getPath (  )  ;", "locationPath    =    StringUtils . cleanPath ( location . getURL (  )  . getPath (  )  )  ;", "}", "if    ( locationPath . equals ( resourcePath )  )     {", "return   true ;", "}", "locationPath    =     (  ( locationPath . endsWith (  \"  /  \"  )  )     |  |     ( locationPath . isEmpty (  )  )  )     ?    locationPath    :    locationPath    +     \"  /  \"  ;", "return    ( resourcePath . startsWith ( locationPath )  )     &  &     (  !  ( isInvalidEncodedPath ( resourcePath )  )  )  ;", "}", "METHOD_END"], "methodName": ["isResourceUnderLocation"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "this . allowedLocations    =    locations ;", "}", "METHOD_END"], "methodName": ["setAllowedLocations"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "this . locationCharsets . clear (  )  ;", "this . locationCharsets . putAll ( locationCharsets )  ;", "}", "METHOD_END"], "methodName": ["setLocationCharsets"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return    (  ( location   instanceof   UrlResource )     &  &     (  ( this . urlPathHelper )     !  =    null )  )     &  &     ( this . urlPathHelper . isUrlDecode (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldEncodeRelativePath"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolver"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    new   ClassPathResource (  \" test / main . css \"  ,    PathResourceResolver . class )  ;", "assertTrue ( this . resolver . checkResource ( resource ,    resource )  )  ;", "}", "METHOD_END"], "methodName": ["checkFileLocation"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   locationUrl    =    new   UrlResource ( getClass (  )  . getResource (  \"  .  / test /  \"  )  )  . getURL (  )  . toExternalForm (  )  ;", "Resource   location    =    new   UrlResource ( locationUrl . replace (  \"  /  \"  ,     \"  /  .  .  / org /  \"  )  )  ;", "assertNotNull ( this . resolver . resolveResource ( null ,     \" main . css \"  ,    Arrays . asList ( location )  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["checkRelativeLocation"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   location    =    new   ClassPathResource (  \" test /  \"  ,    PathResourceResolver . class )  ;", "testCheckResource ( location ,     \"  .  .  / testsecret / secret . txt \"  )  ;", "testCheckResource ( location ,     \" test /  .  .  /  .  .  / testsecret / secret . txt \"  )  ;", "location    =    new   UrlResource ( getClass (  )  . getResource (  \"  .  / test /  \"  )  )  ;", "String   secretPath    =    new   UrlResource ( getClass (  )  . getResource (  \" testsecret / secret . txt \"  )  )  . getURL (  )  . getPath (  )  ;", "testCheckResource ( location ,     (  \" file :  \"     +    secretPath )  )  ;", "testCheckResource ( location ,     (  \"  / file :  \"     +    secretPath )  )  ;", "testCheckResource ( location ,     (  \"  /  \"     +    secretPath )  )  ;", "testCheckResource ( location ,     (  \"  /  /  /  /  .  .  /  .  .  \"     +    secretPath )  )  ;", "testCheckResource ( location ,     \"  /  %  2 E %  2 E / testsecret / secret . txt \"  )  ;", "testCheckResource ( location ,     \"  /  %  2 e %  2 e / testsecret / secret . txt \"  )  ;", "testCheckResource ( location ,     (  \"     \"     +    secretPath )  )  ;", "testCheckResource ( location ,     (  \"  /        \"     +    secretPath )  )  ;", "testCheckResource ( location ,     (  \" url :  \"     +    secretPath )  )  ;", "}", "METHOD_END"], "methodName": ["checkResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . setAllowedLocations ( new   ClassPathResource (  \" test /  \"  ,    PathResourceResolver . class )  ,    new   ClassPathResource (  \" testalternatepath /  \"  ,    PathResourceResolver . class )  )  ;", "Resource   location    =    new   ClassPathResource (  \" test / main . css \"  ,    PathResourceResolver . class )  ;", "String   actual    =    this . resolver . resolveUrlPath (  \"  .  .  / testalternatepath / bar . css \"  ,    Arrays . asList ( location )  ,    null )  ;", "assertEquals (  \"  .  .  / testalternatepath / bar . css \"  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["checkResourceWithAllowedLocations"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   classpathLocation    =    new   ClassPathResource (  \" test /  \"  ,    PathResourceResolver . class )  ;", "MockServletContext   context    =    new   MockServletContext (  )  ;", "ServletContextResource   servletContextLocation    =    new   ServletContextResource ( context ,     \"  / webjars /  \"  )  ;", "ServletContextResource   resource    =    new   ServletContextResource ( context ,     \"  / webjars / webjar - foo /  1  .  0  / foo . js \"  )  ;", "assertFalse ( this . resolver . checkResource ( resource ,    classpathLocation )  )  ;", "assertTrue ( this . resolver . checkResource ( resource ,    servletContextLocation )  )  ;", "}", "METHOD_END"], "methodName": ["checkServletContextResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "PathResourceResolverTests . TestUrlResource   location    =    new   PathResourceResolverTests . TestUrlResource (  \" file :  /  /  / tmp \"  )  ;", "List < PathResourceResolverTests . TestUrlResource >    locations    =    Collections . singletonList ( location )  ;", "this . resolver . setUrlPathHelper ( new   UrlPathHelper (  )  )  ;", "this . resolver . setLocationCharsets ( Collections . singletonMap ( location ,    StandardCharsets . ISO _  8  8  5  9  _  1  )  )  ;", "this . resolver . resolveResource ( new   MockHttpServletRequest (  )  ,     \"  /  ?     ;  ?  . txt \"  ,    locations ,    null )  ;", "assertEquals (  \"  % C 4  %  2  0  %  3 B % E 4  . txt \"  ,    location . getSavedRelativePath (  )  )  ;", "this . resolver . setLocationCharsets ( Collections . singletonMap ( location ,    StandardCharsets . UTF _  8  )  )  ;", "this . resolver . resolveResource ( new   MockHttpServletRequest (  )  ,     \"  /  ?     ;  ?  . txt \"  ,    locations ,    null )  ;", "assertEquals (  \"  % C 3  %  8  4  %  2  0  %  3 B % C 3  % A 4  . txt \"  ,    location . getSavedRelativePath (  )  )  ;", "this . resolver . setLocationCharsets ( Collections . emptyMap (  )  )  ;", "this . resolver . resolveResource ( new   MockHttpServletRequest (  )  ,     \"  /  ?     ;  ?  . txt \"  ,    locations ,    null )  ;", "assertEquals (  \"  % C 3  %  8  4  %  2  0  %  3 B % C 3  % A 4  . txt \"  ,    location . getSavedRelativePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["relativePathEncodedForUrlResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   location    =    new   ClassPathResource (  \" test /  \"  ,    PathResourceResolver . class )  ;", "String   requestPath    =     \" bar . css \"  ;", "Resource   actual    =    this . resolver . resolveResource ( null ,    requestPath ,    Arrays . asList ( location )  ,    null )  ;", "assertEquals ( location . createRelative ( requestPath )  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveFromClasspath"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   location    =    new   ClassPathResource (  \"  /  \"  )  ;", "String   requestPath    =     \" org /  / web / servlet / resource / test / bar . css \"  ;", "Resource   actual    =    this . resolver . resolveResource ( null ,    requestPath ,    Arrays . asList ( location )  ,    null )  ;", "assertNotNull ( actual )  ;", "}", "METHOD_END"], "methodName": ["resolveFromClasspathRoot"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   webjarsLocation    =    new   ClassPathResource (  \"  / META - INF / resources / webjars /  \"  ,    PathResourceResolver . class )  ;", "String   path    =    this . resolver . resolveUrlPathInternal (  \"  \"  ,    Arrays . asList ( webjarsLocation )  ,    null )  ;", "assertNull ( path )  ;", "}", "METHOD_END"], "methodName": ["resolvePathRootResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   actual    =    this . resolver . resolveResource ( null ,    requestPath ,    Arrays . asList ( location )  ,    null )  ;", "if    (  (  !  ( location . createRelative ( requestPath )  . exists (  )  )  )     &  &     (  !  ( requestPath . contains (  \"  :  \"  )  )  )  )     {", "fail (  ( requestPath    +     \"    doesn ' t   actually   exist   as   a   relative   path \"  )  )  ;", "}", "assertNull ( actual )  ;", "}", "METHOD_END"], "methodName": ["testCheckResource"], "fileName": "org.springframework.web.servlet.resource.PathResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    null ;", "char   prev    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( path . length (  )  )  ;    i +  +  )     {", "char   curr    =    path . charAt ( i )  ;", "try    {", "if    (  ( curr    =  =     '  /  '  )     &  &     ( prev    =  =     '  /  '  )  )     {", "if    ( sb    =  =    null )     {", "sb    =    new   StringBuilder ( path . substring (  0  ,    i )  )  ;", "}", "continue ;", "}", "if    ( sb    !  =    null )     {", "sb . append ( path . charAt ( i )  )  ;", "}", "}    finally    {", "prev    =    curr ;", "}", "}", "return   sb    !  =    null    ?    sb . toString (  )     :    path ;", "}", "METHOD_END"], "methodName": ["cleanDuplicateSlashes"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "boolean   slash    =    false ;", "for    ( int   i    =     0  ;    i    <     ( path . length (  )  )  ;    i +  +  )     {", "if    (  ( path . charAt ( i )  )     =  =     '  /  '  )     {", "slash    =    true ;", "} else", "if    (  (  ( path . charAt ( i )  )     >     '     '  )     &  &     (  ( path . charAt ( i )  )     !  =     1  2  7  )  )     {", "if    (  ( i    =  =     0  )     |  |     (  ( i    =  =     1  )     &  &    slash )  )     {", "return   path ;", "}", "path    =     ( slash )     ?     \"  /  \"     +     ( path . substring ( i )  )     :    path . substring ( i )  ;", "if    (  . logger . isTraceEnabled (  )  )     {", ". logger . trace (  (  (  \" Path   after   trimming   leading    '  /  '    and   control   characters :     [  \"     +    path )     +     \"  ]  \"  )  )  ;", "}", "return   path ;", "}", "}", "return   slash    ?     \"  /  \"     :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["cleanLeadingSlash"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . locations ;", "}", "METHOD_END"], "methodName": ["getLocations"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return    ( this . contentNegotiationStrategy )     !  =    null    ?    this . contentNegotiationStrategy . getMediaTypeForResource ( resource )     :    null ;", "}", "METHOD_END"], "methodName": ["getMediaType"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "String   path    =     (  ( String )     ( request . getAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )  )  ;", "if    ( path    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Required   request   attribute    '  \"     +     ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE )  )     +     \"  '    is   not   set \"  )  )  ;", "}", "path    =    processPath ( path )  ;", "if    (  (  !  ( StringUtils . hasText ( path )  )  )     |  |     ( isInvalidPath ( path )  )  )     {", "if    (  . logger . isTraceEnabled (  )  )     {", ". logger . trace (  (  (  \" Ignoring   invalid   resource   path    [  \"     +    path )     +     \"  ]  \"  )  )  ;", "}", "return   null ;", "}", "if    ( isInvalidEncodedPath ( path )  )     {", "if    (  . logger . isTraceEnabled (  )  )     {", ". logger . trace (  (  (  \" Ignoring   invalid   resource   path   with   escape   sequences    [  \"     +    path )     +     \"  ]  \"  )  )  ;", "}", "return   null ;", "}", "ResourceResolverChain   resolveChain    =    new   DefaultResourceResolverChain ( getResourceResolvers (  )  )  ;", "Resource   resource    =    resolveChain . resolveResource ( request ,    path ,    getLocations (  )  )  ;", "if    (  ( resource    =  =    null )     |  |     ( getResourceTransformers (  )  . isEmpty (  )  )  )     {", "return   resource ;", "}", "ResourceTransformerChain   transformChain    =    new   DefaultResourceTransformerChain ( resolveChain ,    getResourceTransformers (  )  )  ;", "resource    =    transformChain . transform ( request ,    resource )  ;", "return   resource ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceHttpMessageConverter ;", "}", "METHOD_END"], "methodName": ["getResourceHttpMessageConverter"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceRegionHttpMessageConverter ;", "}", "METHOD_END"], "methodName": ["getResourceRegionHttpMessageConverter"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceResolvers ;", "}", "METHOD_END"], "methodName": ["getResourceResolvers"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceTransformers ;", "}", "METHOD_END"], "methodName": ["getResourceTransformers"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( CollectionUtils . isEmpty ( this . locations )  )     {", "return ;", "}", "for    ( int   i    =     ( getResolvers (  )  . size (  )  )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "if    (  ( getResolvers (  )  . get ( i )  )    instanceof   PathResolver )     {", "PathResolver   pathResolver    =     (  ( PathResolver )     ( getResolvers (  )  . get ( i )  )  )  ;", "if    ( ObjectUtils . isEmpty ( pathResolver . getAllowedLocations (  )  )  )     {", "pathResolver . setAllowedLocations ( getLocations (  )  . toArray ( new    [  0  ]  )  )  ;", "}", "if    (  ( this . urlPathHelper )     !  =    null )     {", "pathResolver . setLocationCharsets ( this . locationCharsets )  ;", "pathResolver . setUrlPathHelper ( this . urlPathHelper )  ;", "}", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["initAllowedLocations"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    MediaType >    mediaTypes    =    null ;", "if    (  ( getContentNegotiationManager (  )  )     !  =    null )     {", "PathExtensionContentNegotiationStrategy   strategy    =    getContentNegotiationManager (  )  . getStrategy ( PathExtensionContentNegotiationStrategy . class )  ;", "if    ( strategy    !  =    null )     {", "mediaTypes    =    new   HashMap ( strategy . getMediaTypes (  )  )  ;", "}", "}", "return    ( getServletContext (  )  )     !  =    null    ?    new   accept . ServletPathExtensionContentNegotiationStrategy ( getServletContext (  )  ,    mediaTypes )     :    new   PathExtensionContentNegotiationStrategy ( mediaTypes )  ;", "}", "METHOD_END"], "methodName": ["initContentNegotiationStrategy"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( path . contains (  \"  %  \"  )  )     {", "try    {", "St   decodedPath    =    URLDecoder . decode ( path ,     \" UTF -  8  \"  )  ;", "if    ( isInvalidPath ( decodedPath )  )     {", "return   true ;", "}", "decodedPath    =    processPath ( decodedPath )  ;", "if    ( isInvalidPath ( decodedPath )  )     {", "return   true ;", "}", "}    catch    ( IllegalArgumentException    |    UnsupportedEncodingException   ex )     {", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isInvalidEncodedPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( path . contains (  \" WEB - INF \"  )  )     |  |     ( path . contains (  \" META - INF \"  )  )  )     {", ". logger . trace (  \" Path   contains    \\  \" WEB - INF \\  \"    or    \\  \" META - INF \\  \"  .  \"  )  ;", "return   true ;", "}", "if    ( path . contains (  \"  :  /  \"  )  )     {", "String   relativePath    =     (  ( path . charAt (  0  )  )     =  =     '  /  '  )     ?    path . substring (  1  )     :    path ;", "if    (  ( ResourceUtils . isUrl ( relativePath )  )     |  |     ( relativePath . startsWith (  \" url :  \"  )  )  )     {", ". logger . trace (  \" Path   represents   URL   or   has    \\  \" url :  \\  \"    prefix .  \"  )  ;", "return   true ;", "}", "}", "if    ( path . contains (  \"  .  .  \"  )  )     {", "path    =    StringUtils . cleanPath ( path )  ;", "if    ( path . contains (  \"  .  .  /  \"  )  )     {", ". logger . trace (  \" Path   contains    \\  \"  .  .  /  \\  \"    after   call   to   StringUtils # cleanPath .  \"  )  ;", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isInvalidPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "path    =    StringUtils . replace ( path ,     \"  \\  \\  \"  ,     \"  /  \"  )  ;", "path    =    cleanDuplicateSlashes ( path )  ;", "return   cleanLeadingSlash ( path )  ;", "}", "METHOD_END"], "methodName": ["processPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( CollectionUtils . isEmpty ( this . locationValues )  )     {", "return ;", "} else", "if    (  !  ( CollectionUtils . isEmpty ( this . locations )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Please   set   either   Resource - based    \\  \" locations \\  \"    or    \"     +     \" String - based    \\  \" locationValues \\  \"  ,    but   not   both .  \"  )  )  ;", "}", "ApplicationContext   applicationContext    =    obtainApplicationContext (  )  ;", "for    ( String   location    :    this . locationValues )     {", "if    (  ( this . embeddedValueResolver )     !  =    null )     {", "String   resolvedLocation    =    this . embeddedValueResolver . resolveStringValue ( location )  ;", "if    ( resolvedLocation    =  =    null )     {", "throw   new   IllegalArgumentException (  (  \" Location   resolved   to   null :     \"     +    location )  )  ;", "}", "location    =    resolvedLocation ;", "}", "Charset   charset    =    null ;", "location    =    location . trim (  )  ;", "if    ( location . startsWith (  . URL _ RESOURCE _ CHARSET _ PREFIX )  )     {", "int   endIndex    =    location . indexOf (  '  ]  '  ,     . URL _ RESOURCE _ CHARSET _ PREFIX . length (  )  )  ;", "if    ( endIndex    =  =     (  -  1  )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   charset   syntax   in   location :     \"     +    location )  )  ;", "}", "String   value    =    location . substring (  . URL _ RESOURCE _ CHARSET _ PREFIX . length (  )  ,    endIndex )  ;", "charset    =    Charset . forName ( value )  ;", "location    =    location . substring (  ( endIndex    +     1  )  )  ;", "}", "Resource   resource    =    applicationContext . getResource ( location )  ;", "this . locations . add ( resource )  ;", "if    ( charset    !  =    null )     {", "if    (  !  ( resource   instanceof   UrlResource )  )     {", "throw   new   IllegalArgumentException (  (  \" Unexpected   charset   for   non - UrlResource :     \"     +    resource )  )  ;", "}", "this . locationCharsets . put ( resource ,    charset )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["resolveResourceLocations"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . contentNegotiationManager    =    contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["setContentNegotiationManager"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . corsConfiguration    =    corsConfiguration ;", "}", "METHOD_END"], "methodName": ["setCorsConfiguration"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "long   length    =    resource . contentLength (  )  ;", "if    ( length    >     ( Integer . MAX _ VALUE )  )     {", "response . setContentLengthLong ( length )  ;", "} else    {", "response . setContentLength (  (  ( int )     ( length )  )  )  ;", "}", "if    ( mediaType    !  =    null )     {", "response . setContentType ( mediaType . toString (  )  )  ;", "}", "if    ( resource   instanceof   HttpResource )     {", "HttpHeaders   resourceHeaders    =     (  ( HttpResource )     ( resource )  )  . getResponseHeaders (  )  ;", "resourceHeaders . forEach (  (    headerName ,    headerValues )     -  >     {", "boolean   first    =    true ;", "for    ( String   headerValue    :    headerValues )     {", "if    ( first )     {", "response . setHeader ( headerName ,    headerValue )  ;", "} else    {", "response . addHeader ( headerName ,    headerValue )  ;", "}", "first    =    false ;", "}", "}  )  ;", "}", "response . setHeader ( ACCEPT _ RANGES ,     \" bytes \"  )  ;", "}", "METHOD_END"], "methodName": ["setHeaders"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( locationValues ,     \" Location   values   list   must   not   be   null \"  )  ;", "this . locationValues . clear (  )  ;", "this . locationValues . addAll ( locationValues )  ;", "}", "METHOD_END"], "methodName": ["setLocationValues"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( locations ,     \" Locations   list   must   not   be   null \"  )  ;", "this . locations . clear (  )  ;", "this . locations . addAll ( locations )  ;", "}", "METHOD_END"], "methodName": ["setLocations"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . resourceHttpMessageConverter    =    messageConverter ;", "}", "METHOD_END"], "methodName": ["setResourceHttpMessageConverter"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . resourceRegionHttpMessageConverter    =    messageConverter ;", "}", "METHOD_END"], "methodName": ["setResourceRegionHttpMessageConverter"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . resourceResolvers . clear (  )  ;", "if    ( resourceResolvers    !  =    null )     {", "this . resourceResolvers . addAll ( resourceResolvers )  ;", "}", "}", "METHOD_END"], "methodName": ["setResourceResolvers"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . resourceTransformers . clear (  )  ;", "if    ( resourceTransformers    !  =    null )     {", "this . resourceTransformers . addAll ( resourceTransformers )  ;", "}", "}", "METHOD_END"], "methodName": ["setResourceTransformers"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" js /  \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  4  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["directory"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" underscorejs /  \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  0  ,    this . response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["directoryInJarFile"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . response . setHeader (  \" Cache - Control \"  ,     \" no - store \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" max - age =  3  6  0  0  \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "}", "METHOD_END"], "methodName": ["doOverwriteExistingCacheControlHeaders"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiationManagerFactoryBean   factory    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factory . setFavorPathExtension ( false )  ;", "factory . afterPropertiesSet (  )  ;", "ContentNegotiationManager   manager    =    factory . getObject (  )  ;", "List < Resource >    paths    =    Collections . singletonList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "handler    =    new    (  )  ;", "handler . setServletContext ( new   MockServletContext (  )  )  ;", "handler . setLocations ( paths )  ;", "handler . setContentNegotiationManager ( manager )  ;", "handler . afterPropertiesSet (  )  ;", "this . request . addHeader (  \" Accept \"  ,     \" application / json , text / plain ,  *  /  *  \"  )  ;", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . html \"  )  ;", "handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / html \"  ,    this . response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMediaTypeWithFavorPathExtensionOff"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / css \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  7  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" max - age =  3  6  0  0  \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "assertEquals (  \" h 1     {    color : red ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" baz . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / css \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  7  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" max - age =  3  6  0  0  \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" testalternatepath / baz . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "assertEquals (  \" h 1     {    color : red ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFromAlternatePath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" js / foo . js \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / javascript \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" function   foo (  )     {    console . log (  \\  \" hello   world \\  \"  )  ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFromSubDirectory"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" js / baz . js \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / javascript \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" function   foo (  )     {    console . log (  \\  \" hello   world \\  \"  )  ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFromSubDirectoryOfAlternatePath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . setCacheSeconds (  3  6  0  0  )  ;", "this . handler . setUseExpiresHeader ( true )  ;", "this . handler . setUseCacheControlHeader ( true )  ;", "this . handler . setAlwaysMustRevalidate ( true )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" max - age =  3  6  0  0  ,    must - revalidate \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue (  (  ( this . response . getDateHeader (  \" Expires \"  )  )     >  =     (  (  ( System . currentTimeMillis (  )  )     -     1  0  0  0  )     +     (  3  6  0  0     *     1  0  0  0  )  )  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceHttp10BehaviorCache"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . setCacheSeconds (  0  )  ;", "this . handler . setUseExpiresHeader ( true )  ;", "this . handler . setUseCacheControlNoStore ( false )  ;", "this . handler . setUseCacheControlHeader ( true )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" no - cache \"  ,    this . response . getHeader (  \" Pragma \"  )  )  ;", "assertThat ( this . response . getHeaderValues (  \" Cache - Control \"  )  ,    Matchers . iterableWithSize (  1  )  )  ;", "assertEquals (  \" no - cache \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue (  (  ( this . response . getDateHeader (  \" Expires \"  )  )     <  =     ( System . currentTimeMillis (  )  )  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceHttp10BehaviorNoCache"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod (  \" HEAD \"  )  ;", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / css \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  7  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" max - age =  3  6  0  0  \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "assertEquals (  0  ,    this . response . getContentAsByteArray (  )  . length )  ;", "}", "METHOD_END"], "methodName": ["getResourceHttpHeader"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod (  \" OPTIONS \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  0  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" GET , HEAD , OPTIONS \"  ,    this . response . getHeader (  \" Allow \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceHttpOptions"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . handler . setCacheSeconds (  0  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" no - store \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceNoCache"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . html \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" text / html \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" max - age =  3  6  0  0  \"  ,    this . response . getHeader (  \" Cache - Control \"  )  )  ;", "assertTrue ( this . response . containsHeader (  \" Last - Modified \"  )  )  ;", "assertEquals (  (  ( LastModified (  \" test / foo . html \"  )  )     /     1  0  0  0  )  ,     (  ( this . response . getDateHeader (  \" Last - Modified \"  )  )     /     1  0  0  0  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceWithHtmlMediaType"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )     {", "@ Override", "public   String   getMimeType ( String   filePath )     {", "return    \" foo / bar \"  ;", "}", "@ Override", "public   String   getVirtualServerName (  )     {", "return    \"  \"  ;", "}", "}  ;", "List < Resource >    paths    =    Collections . singletonList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "handler    =    new    (  )  ;", "handler . setServletContext ( servletContext )  ;", "handler . setLocations ( paths )  ;", "handler . afterPropertiesSet (  )  ;", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" foo / bar \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" h 1     {    color : red ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceWithMediaTypeResolvedThroughServletContext"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ContentNegotiationManagerFactoryBean   factory    =    new   ContentNegotiationManagerFactoryBean (  )  ;", "factory . addMediaType (  \" bar \"  ,    new   MediaType (  \" foo \"  ,     \" bar \"  )  )  ;", "factory . afterPropertiesSet (  )  ;", "ContentNegotiationManager   manager    =    factory . getObject (  )  ;", "List < Resource >    paths    =    Collections . singletonList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "handler    =    new    (  )  ;", "handler . setServletContext ( new   MockServletContext (  )  )  ;", "handler . setLocations ( paths )  ;", "handler . setContentNegotiationManager ( manager )  ;", "handler . afterPropertiesSet (  )  ;", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . bar \"  )  ;", "handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \" foo / bar \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  \" h 1     {    color : red ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceWithRegisteredMediaType"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  . addFixedVersionStrategy (  \" versionString \"  ,     \"  /  *  *  \"  )  ;", "this . handler . setResourceResolvers ( Arrays . asList ( versionResolver ,    new   PathResourceResolver (  )  )  )  ;", "this . handler . afterPropertiesSet (  )  ;", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" versionString / foo . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  \"  \\  \" versionString \\  \"  \"  ,    this . response . getHeader (  \" ETag \"  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getVersionedResource"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \"  /  % foo %  / bar . txt \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  4  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["ignoreInvalidEscapeSequence"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "PathResourceResolver   resolver    =     (  ( PathResourceResolver )     ( this . handler . getResourceResolvers (  )  . get (  0  )  )  )  ;", "Resource [  ]    locations    =    resolver . getAllowedLocations (  )  ;", "assertEquals (  3  ,    locations . length )  ;", "assertEquals (  \" test /  \"  ,     (  ( ClassPathResource )     ( locations [  0  ]  )  )  . getPath (  )  )  ;", "assertEquals (  \" testalternatepath /  \"  ,     (  ( ClassPathResource )     ( locations [  1  ]  )  )  . getPath (  )  )  ;", "assertEquals (  \" META - INF / resources / webjars /  \"  ,     (  ( ClassPathResource )     ( locations [  2  ]  )  )  . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["initAllowedLocations"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   location 1     =    new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  ;", "ClassPathResource   location 2     =    new   ClassPathResource (  \" testalternatepath /  \"  ,    getClass (  )  )  ;", "PathResourceResolver   pathResolver    =    new   PathResourceResolver (  )  ;", "pathResolver . setAllowedLocations ( location 1  )  ;", "handler    =    new    (  )  ;", "handler . setResourceResolvers ( Collections . singletonList ( pathResolver )  )  ;", "handler . setServletContext ( new   MockServletContext (  )  )  ;", "handler . setLocations ( Arrays . asList ( location 1  ,    location 2  )  )  ;", "handler . afterPropertiesSet (  )  ;", "Resource [  ]    locations    =    pathResolver . getAllowedLocations (  )  ;", "assertEquals (  1  ,    locations . length )  ;", "assertEquals (  \" test /  \"  ,     (  ( ClassPathResource )     ( locations [  0  ]  )  )  . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["initAllowedLocationsWithExplicitConfiguration"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \"  \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  4  0  4  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["missingResourcePath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . request . addHeader (  \" If - Modified - Since \"  ,     (  (  (  ( LastModified (  \" test / foo . css \"  )  )     /     1  0  0  0  )     *     1  0  0  0  )     -     1  )  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals ( SC _ OK ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" h 1     {    color : red ;     }  \"  ,    this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["modified"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . handler . handleRequest ( this . request ,    this . response )  ;", "}", "METHOD_END"], "methodName": ["noPathWithinHandlerMappingAttribute"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . request . addHeader (  \" If - Modified - Since \"  ,    LastModified (  \" test / foo . css \"  )  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals ( SC _ NOT _ MODIFIED ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["notModified"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  0  -  1  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  2  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" bytes    0  -  1  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \" So \"  ,    this . response . getContentAsString (  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentByteRange"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  9  -  1  0  0  0  0  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" bytes    9  -  9  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \"  .  \"  ,    this . response . getContentAsString (  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentByteRangeLargeEnd"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  9  -  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" bytes    9  -  9  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \"  .  \"  ,    this . response . getContentAsString (  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentByteRangeNoEnd"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =    foo   bar \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  4  1  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" bytes    *  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentInvalidRangeHeader"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  0  -  1  ,     4  -  5  ,     8  -  9  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertTrue ( this . response . getContentType (  )  . startsWith (  \" multipart / byteranges ;    boundary =  \"  )  )  ;", "String   boundary    =     \"  -  -  \"     +     ( this . response . getContentType (  )  . substring (  3  1  )  )  ;", "String   content    =    this . response . getContentAsString (  )  ;", "String [  ]    ranges    =    StringUtils . tokenizeToStringArray ( content ,     \"  \\ r \\ n \"  ,    false ,    true )  ;", "assertEquals ( boundary ,    ranges [  0  ]  )  ;", "assertEquals (  \" Content - Type :    text / plain \"  ,    ranges [  1  ]  )  ;", "assertEquals (  \" Content - Range :    bytes    0  -  1  /  1  0  \"  ,    ranges [  2  ]  )  ;", "assertEquals (  \" So \"  ,    ranges [  3  ]  )  ;", "assertEquals ( boundary ,    ranges [  4  ]  )  ;", "assertEquals (  \" Content - Type :    text / plain \"  ,    ranges [  5  ]  )  ;", "assertEquals (  \" Content - Range :    bytes    4  -  5  /  1  0  \"  ,    ranges [  6  ]  )  ;", "assertEquals (  \"    t \"  ,    ranges [  7  ]  )  ;", "assertEquals ( boundary ,    ranges [  8  ]  )  ;", "assertEquals (  \" Content - Type :    text / plain \"  ,    ranges [  9  ]  )  ;", "assertEquals (  \" Content - Range :    bytes    8  -  9  /  1  0  \"  ,    ranges [  1  0  ]  )  ;", "assertEquals (  \" t .  \"  ,    ranges [  1  1  ]  )  ;", "}", "METHOD_END"], "methodName": ["partialContentMultipleByteRanges"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  -  1  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" bytes    9  -  9  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \"  .  \"  ,    this . response . getContentAsString (  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentSuffixRange"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" Range \"  ,     \" bytes =  -  1  1  \"  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . txt \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals (  2  0  6  ,    this . response . getStatus (  )  )  ;", "assertEquals (  \" text / plain \"  ,    this . response . getContentType (  )  )  ;", "assertEquals (  1  0  ,    this . response . getContentLength (  )  )  ;", "assertEquals (  \" bytes    0  -  9  /  1  0  \"  ,    this . response . getHeader (  \" Content - Range \"  )  )  ;", "assertEquals (  \" Some   text .  \"  ,    this . response . getContentAsString (  )  )  ;", "assertEquals (  \" bytes \"  ,    this . response . getHeader (  \" Accept - Ranges \"  )  )  ;", "assertEquals (  1  ,    this . response . getHeaders (  \" Accept - Ranges \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["partialContentSuffixRangeLargeSuffix"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "assertSame (  \"  / foo / bar \"  ,    this . handler . processPath (  \"  / foo / bar \"  )  )  ;", "assertSame (  \" foo / bar \"  ,    this . handler . processPath (  \" foo / bar \"  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  \"        / foo / bar \"  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  (  (  ( char )     (  1  )  )     +     \"  / foo / bar \"  )  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  (  (  ( char )     (  3  1  )  )     +     \"  / foo / bar \"  )  )  )  ;", "assertEquals (  \" foo / bar \"  ,    this . handler . processPath (  \"       foo / bar \"  )  )  ;", "assertEquals (  \" foo / bar \"  ,    this . handler . processPath (  (  (  ( char )     (  3  1  )  )     +     \" foo / bar \"  )  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  (  (  ( char )     (  1  2  7  )  )     +     \"  / foo / bar \"  )  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  (  (  ( char )     (  1  2  7  )  )     +     \"  / foo / bar \"  )  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  \"        /       foo / bar \"  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  \"        /        /       foo / bar \"  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  \"        /  /     /  /  /     /  /  /  /       foo / bar \"  )  )  ;", "assertEquals (  \"  / foo / bar \"  ,    this . handler . processPath (  (  (  (  (  ( char )     (  1  )  )     +     \"     /     \"  )     +     (  ( char )     (  1  2  7  )  )  )     +     \"     /  /    foo / bar \"  )  )  )  ;", "assertEquals (  \"  \"  ,    this . handler . processPath (  \"           \"  )  )  ;", "assertEquals (  \"  /  \"  ,    this . handler . processPath (  \"  /  \"  )  )  ;", "assertEquals (  \"  /  \"  ,    this . handler . processPath (  \"  /  /  /  \"  )  )  ;", "assertEquals (  \"  /  \"  ,    this . handler . processPath (  \"  /     /           /     \"  )  )  ;", "assertEquals (  \"  /  \"  ,    this . handler . processPath (  \"  \\  \\  /     \\  \\  /           \\  \\  /     \"  )  )  ;", "assertEquals (  \"  / foo /     / bar / baz /  \"  ,    this . handler . processPath (  \"  /  / foo /     / bar /  / baz /  /  \"  )  )  ;", "assertEquals (  \"  / foo /     / bar / baz /  \"  ,    this . handler . processPath (  \"  \\  \\  \\  \\ foo \\  \\     \\  \\ bar \\  \\  \\  \\ baz \\  \\  \\  \\  \"  )  )  ;", "assertEquals (  \" foo / bar \"  ,    this . handler . processPath (  \" foo \\  \\  \\  \\  /  \\  \\  /  /  /  / bar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["processPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "for    ( HttpMethod   method    :    HttpMethod . values (  )  )     {", "this . request    =    new   MockHttpServlet (  \" GET \"  ,     \"  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "testResolvePathWithTraversal ( method )  ;", "}", "}", "METHOD_END"], "methodName": ["resolvePathWithTraversal"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ClassPathResource ( resourceName ,    getClass (  )  )  . getFile (  )  . lastModified (  )  ;", "}", "METHOD_END"], "methodName": ["resourceLastModified"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "for    ( HttpMethod   method    :    HttpMethod . values (  )  )     {", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "NotFound ( method )  ;", "}", "}", "METHOD_END"], "methodName": ["resourceNotFound"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( httpMethod . name (  )  )  ;", "this . request . setAttribute ( Mapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" not - there . css \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals ( NOT _ FOUND . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["resourceNotFound"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "List < Resource >    paths    =    new   ArrayList <  >  (  2  )  ;", "paths . add ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "paths . add ( new   ClassPathResource (  \" testalternatepath /  \"  ,    getClass (  )  )  )  ;", "paths . add ( new   ClassPathResource (  \" META - INF / resources / webjars /  \"  )  )  ;", "this . handler    =    new   ResourceHttpRequestHandler (  )  ;", "this . handler . setLocations ( paths )  ;", "this . handler . setCacheSeconds (  3  6  0  0  )  ;", "this . handler . setServletContext ( new    . TestServletContext (  )  )  ;", "this . handler . afterPropertiesSet (  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    mock ( Resource . class )  ;", "when ( resource . getFilename (  )  )  . thenThrow ( new   AssertionError (  \" Resource   should   not   be   resolved \"  )  )  ;", "when ( resource . getInputStream (  )  )  . thenThrow ( new   AssertionError (  \" Resource   should   not   be   resolved \"  )  )  ;", "ResourceResolver   resolver    =    mock ( ResourceResolver . class )  ;", "when ( resolver . resolveResource ( any (  )  ,    any (  )  ,    any (  )  ,    any (  )  )  )  . thenReturn ( resource )  ;", "ResourceHttpRequestHandler   handler    =    new   ResourceHttpRequestHandler (  )  ;", "handler . setLocations ( Collections . singletonList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  )  ;", "handler . setResourceResolvers ( Collections . singletonList ( resolver )  )  ;", "handler . setServletContext ( new    . TestServletContext (  )  )  ;", "handler . afterPropertiesSet (  )  ;", "testInvalidPath (  \"  .  .  / testsecret / secret . txt \"  ,    handler )  ;", "testInvalidPath (  \" test /  .  .  /  .  .  / testsecret / secret . txt \"  ,    handler )  ;", "testInvalidPath (  \"  :  /  .  .  /  .  .  / testsecret / secret . txt \"  ,    handler )  ;", "Resource   location    =    new   UrlResource ( getClass (  )  . getResource (  \"  .  / test /  \"  )  )  ;", "this . handler . setLocations ( Collections . singletonList ( location )  )  ;", "Resource   secretResource    =    new   UrlResource ( getClass (  )  . getResource (  \" testsecret / secret . txt \"  )  )  ;", "String   secretPath    =    secretResource . getURL (  )  . getPath (  )  ;", "testInvalidPath (  (  \" file :  \"     +    secretPath )  ,    handler )  ;", "testInvalidPath (  (  \"  / file :  \"     +    secretPath )  ,    handler )  ;", "testInvalidPath (  (  \" url :  \"     +    secretPath )  ,    handler )  ;", "testInvalidPath (  (  \"  / url :  \"     +    secretPath )  ,    handler )  ;", "testInvalidPath (  (  \"  /  .  .  /  .  .  \"     +    secretPath )  ,    handler )  ;", "testInvalidPath (  \"  /  %  2 E %  2 E / testsecret / secret . txt \"  ,    handler )  ;", "testInvalidPath (  \"  /  %  2 E %  2 E / testsecret / secret . txt \"  ,    handler )  ;", "testInvalidPath (  (  \"  %  2 F %  2 F %  2 E %  2 E %  2 F %  2 F %  2 E %  2 E \"     +    secretPath )  ,    handler )  ;", "}", "METHOD_END"], "methodName": ["testInvalidPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,    requestPath )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "handler . handleRequest ( this . request ,    this . response )  ;", "assertEquals ( NOT _ FOUND . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidPath"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,    requestPath )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "if    (  (  !  ( location . createRelative ( requestPath )  . exists (  )  )  )     &  &     (  !  ( requestPath . contains (  \"  :  \"  )  )  )  )     {", "fail (  ( requestPath    +     \"    doesn ' t   actually   exist   as   a   relative   path \"  )  )  ;", "}", "assertEquals ( NOT _ FOUND . value (  )  ,    this . response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["testResolvePathWithTraversal"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setMethod ( httpMethod . name (  )  )  ;", "location    =    new   ClassPath (  \" test /  \"  ,    getClass (  )  )  ;", "this . handler . setLocations ( Collections . singletonList ( location )  )  ;", "testResolvePathWithTraversal ( location ,     \"  .  .  / testsecret / secret . txt \"  )  ;", "testResolvePathWithTraversal ( location ,     \" test /  .  .  /  .  .  / testsecret / secret . txt \"  )  ;", "testResolvePathWithTraversal ( location ,     \"  :  /  .  .  /  .  .  / testsecret / secret . txt \"  )  ;", "location    =    new   Url ( getClass (  )  . get (  \"  .  / test /  \"  )  )  ;", "this . handler . setLocations ( Collections . singletonList ( location )  )  ;", "secret    =    new   Url ( getClass (  )  . get (  \" testsecret / secret . txt \"  )  )  ;", "String   secretPath    =    secret . getURL (  )  . getPath (  )  ;", "testResolvePathWithTraversal ( location ,     (  \" file :  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     (  \"  / file :  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     (  \" url :  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     (  \"  / url :  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     (  \"  /  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     (  \"  /  /  /  /  .  .  /  .  .  \"     +    secretPath )  )  ;", "testResolvePathWithTraversal ( location ,     \"  /  %  2 E %  2 E / testsecret / secret . txt \"  )  ;", "testResolvePathWithTraversal ( location ,     \"  %  2 F %  2 F %  2 E %  2 E %  2 F %  2 Ftestsecret / secret . txt \"  )  ;", "testResolvePathWithTraversal ( location ,     (  \"  /        \"     +    secretPath )  )  ;", "}", "METHOD_END"], "methodName": ["testResolvePathWithTraversal"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setAttribute ( HandlerMapping . PATH _ WITHIN _ HANDLER _ MAPPING _ ATTRIBUTE ,     \" foo . css \"  )  ;", "this . request . setMethod (  \" POST \"  )  ;", "this . handler . handleRequest ( this . request ,    this . response )  ;", "}", "METHOD_END"], "methodName": ["unsupportedHttpMethod"], "fileName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandlerTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . resourceUrlProvider )     !  =    null )     {", "return   this . resourceUrlProvider ;", "}", "return    (  ( ResourceUrlProvider )     ( request . getAttribute ( ResourceUrlProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR )  )  )  ;", "}", "METHOD_END"], "methodName": ["findResourceUrlProvider"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceUrlProvider ;", "}", "METHOD_END"], "methodName": ["getResourceUrlProvider"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupport"}, {"methodBody": ["METHOD_START", "{", "if    ( resourcePath . startsWith (  \"  /  \"  )  )     {", "ResourceUrlProvider   urlProvider    =    findResourceUrlProvider ( request )  ;", "return   urlProvider    !  =    null    ?    urlProvider . getForRequestUrl ( request ,    resourcePath )     :    null ;", "} else    {", "return   tChain . getResolverChain (  )  . resolveUrlPath ( resourcePath ,    Collections . singletonList ( resource )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveUrlPath"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupport"}, {"methodBody": ["METHOD_START", "{", "this . resourceUrlProvider    =    resourceUrlProvider ;", "}", "METHOD_END"], "methodName": ["setResourceUrlProvider"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupport"}, {"methodBody": ["METHOD_START", "{", "ResourceUrlProvider   urlProvider    =    findResourceUrlProvider ( request )  ;", "Assert . state (  ( urlProvider    !  =    null )  ,     \" No   ResourceUrlProvider \"  )  ;", "String   requestPath    =    urlProvider . getUrlPathHelper (  )  . getRequestUri ( request )  ;", "String   absolutePath    =    StringUtils . applyRelativePath ( requestPath ,    path )  ;", "return   StringUtils . cleanPath ( absolutePath )  ;", "}", "METHOD_END"], "methodName": ["toAbsolutePath"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupport"}, {"methodBody": ["METHOD_START", "{", "ResourceHttpRequestHandler   handler    =    new   ResourceHttpRequestHandler (  )  ;", "handler . setLocations ( Collections . singletonList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  )  ;", "handler . setResourceResolvers ( resolvers )  ;", "ResourceUrlProvider   urlProvider    =    new   ResourceUrlProvider (  )  ;", "urlProvider . setHandlerMap ( Collections . singletonMap (  \"  / resources /  *  *  \"  ,    handler )  )  ;", "return   urlProvider ;", "}", "METHOD_END"], "methodName": ["createResourceUrlProvider"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupportTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / context / servlet / resources / main . css \"  )  ;", "this . request . setContextPath (  \"  / context \"  )  ;", "this . request . setServletPath (  \"  / servlet \"  )  ;", "String   resourcePath    =     \"  / context / servlet / resources / bar . css \"  ;", "Resource   css    =    new   ClassPathResource (  \" test / main . css \"  ,    getClass (  )  )  ;", "String   actual    =    this . t . resolveUrlPath ( resourcePath ,    this . request ,    css ,    this . tChain )  ;", "assertEquals (  \"  / context / servlet / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlPath"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupportTests"}, {"methodBody": ["METHOD_START", "{", "Resource   css    =    new   ClassPathResource (  \" test / main . css \"  ,    getClass (  )  )  ;", "String   actual    =    this . t . resolveUrlPath (  \" bar . css \"  ,    this . request ,    css ,    this . tChain )  ;", "assertEquals (  \" bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlPathWithRelativePath"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupportTests"}, {"methodBody": ["METHOD_START", "{", "Resource   imagePng    =    new   ClassPathResource (  \" test / images / image . png \"  ,    getClass (  )  )  ;", "String   actual    =    this . t . resolveUrlPath (  \"  .  .  / bar . css \"  ,    this . request ,    imagePng ,    this . tChain )  ;", "assertEquals (  \"  .  .  / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    actual )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlPathWithRelativePathInParentDirectory"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupportTests"}, {"methodBody": ["METHOD_START", "{", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  )  ;", "PathResourceResolver   pathResolver    =    new   PathResourceResolver (  )  ;", "pathResolver . setAllowedLocations ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "List < ResourceResolver >    resolvers    =    Arrays . asList ( versionResolver ,    pathResolver )  ;", "this . transformerChain    =    new   DefaultResourceTransformerChain ( new   DefaultResourceResolverChain ( resolvers )  ,    null )  ;", "this . transformer    =    new    . TestResourceTransformerSupport (  )  ;", "this . transformer . setResourceUrlProvider ( createResourceUrlProvider ( resolvers )  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.resource.ResourceTransformerSupportTests"}, {"methodBody": ["METHOD_START", "{", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  )  ;", "PathResourceResolver   pathResolver    =    new   PathResourceResolver (  )  ;", "pathResolver . setAllowedLocations ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "List < ResourceResolver >    resolvers    =    Arrays . asList ( versionResolver ,    pathResolver )  ;", "this . filter    =    new    (  )  ;", "this . resourceUrlProvider    =    createResourceUrlProvider ( resolvers )  ;", "}", "METHOD_END"], "methodName": ["createFilter"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "ResourceHttpRequestHandler   handler    =    new   ResourceHttpRequestHandler (  )  ;", "handler . setLocations ( Arrays . asList ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  )  ;", "handler . setResourceResolvers ( resolvers )  ;", "Provider   urlProvider    =    new   Provider (  )  ;", "urlProvider . setHandlerMap ( Collections . singletonMap (  \"  / resources /  *  *  \"  ,    handler )  )  ;", "return   urlProvider ;", "}", "METHOD_END"], "methodName": ["createResourceUrlProvider"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / context /  \"  )  ;", "request . setContextPath (  \"  / context \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  / context / resources / bar . css \"  )  ;", "assertEquals (  \"  / context / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeContextPathUrlWithSuffix"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / context \"  )  ;", "request . setContextPath (  \"  / context \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  / context / resources / bar . css \"  )  ;", "assertEquals (  \"  / context / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeContextPathUrlWithoutSuffix"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / context / foo \"  )  ;", "request . setContextPath (  \"  / context \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  ? foo =  1  \"  )  ;", "assertEquals (  \"  ? foo =  1  \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeEmptyURLWithContext"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  / resources / bar . css \"  )  ;", "assertEquals (  \"  / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeURL"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / context / foo \"  )  ;", "request . setContextPath (  \"  / context \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  / context / resources / bar . css \"  )  ;", "assertEquals (  \"  / context / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeURLWithContext"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / foo \"  )  ;", "request . setContextPath (  \"  /  \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \"  / resources / bar . css ? foo = bar & url = http :  /  / example . org \"  )  ;", "assertEquals (  \"  / resources / bar -  1  1 e 1  6 cf 7  9 faee 7 ac 6  9  8 c 8  0  5 cf 2  8  2  4  8 d 2  . css ? foo = bar & url = http :  /  / example . org \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeURLWithRequestParams"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / context - path / index \"  )  ;", "request . setContextPath (  \"  / context - path \"  )  ;", "request . setServletPath (  \"  \"  )  ;", "request . setAttribute ( ProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    this . resourceUrlProvider )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "this . filter . doFilter ( request ,    response ,     (    req ,    res )     -  >     {", "String   result    =     (  ( HttpServletResponse )     ( res )  )  . encodeURL (  \" index ? key = value \"  )  ;", "assertEquals (  \" index ? key = value \"  ,    result )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["encodeUrlPreventStringOutOfBounds"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlEncodingFilterTests"}, {"methodBody": ["METHOD_START", "{", "logger . debug (  \" Looking   for   resource   handler   mappings \"  )  ;", "Map < String ,    SimpleUrlHandlerMapping >    beans    =    appContext . getBeansOfType ( SimpleUrlHandlerMapping . class )  ;", "List < SimpleUrlHandlerMapping >    mappings    =    new   ArrayList <  >  ( beans . values (  )  )  ;", "AnnotationAwareOrderComparator . sort ( mappings )  ;", "for    ( SimpleUrlHandlerMapping   mapping    :    mappings )     {", "for    ( String   pattern    :    mapping . getHandlerMap (  )  . keySet (  )  )     {", "Object   handler    =    mapping . getHandlerMap (  )  . get ( pattern )  ;", "if    ( handler   instanceof   ResourceHttpRequestHandler )     {", "ResourceHttpRequestHandler   resourceHandler    =     (  ( ResourceHttpRequestHandler )     ( handler )  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  (  (  \" Found   resource   handler   mapping :    URL   pattern =  \\  \"  \"     +    pattern )     +     \"  \\  \"  ,     \"  )     +     \" locations =  \"  )     +     ( resourceHandler . getLocations (  )  )  )     +     \"  ,     \"  )     +     \" resolvers =  \"  )     +     ( resourceHandler . getResourceResolvers (  )  )  )  )  ;", "}", "this . handlerMap . put ( pattern ,    resourceHandler )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["detectResourceHandlers"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "int   suffixIndex    =    lookupPath . length (  )  ;", "int   queryIndex    =    lookupPath . indexOf (  '  ?  '  )  ;", "if    ( queryIndex    >     0  )     {", "suffixIndex    =    queryIndex ;", "}", "int   hashIndex    =    lookupPath . indexOf (  '  #  '  )  ;", "if    ( hashIndex    >     0  )     {", "suffixIndex    =    Math . min ( suffixIndex ,    hashIndex )  ;", "}", "return   suffixIndex ;", "}", "METHOD_END"], "methodName": ["getEndPathIndex"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "String   previous ;", "do    {", "previous    =    lookupPath ;", "lookupPath    =    StringUtils . replace ( lookupPath ,     \"  /  /  \"  ,     \"  /  \"  )  ;", "}    while    (  !  ( lookupPath . equals ( previous )  )     )  ;", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  \" Getting      URL   for   lookup   path    \\  \"  \"     +    lookupPath )     +     \"  \\  \"  \"  )  )  ;", "}", "List < String >    matchingPatterns    =    new   ArrayList <  >  (  )  ;", "for    ( String   pattern    :    this . handlerMap . keySet (  )  )     {", "if    ( getPathMatcher (  )  . match ( pattern ,    lookupPath )  )     {", "matchingPatterns . add ( pattern )  ;", "}", "}", "if    (  !  ( matchingPatterns . isEmpty (  )  )  )     {", "Comparator < String >    patternComparator    =    getPathMatcher (  )  . getPatternComparator ( lookupPath )  ;", "matchingPatterns . sort ( patternComparator )  ;", "for    ( String   pattern    :    matchingPatterns )     {", "String   pathWithinMapping    =    getPathMatcher (  )  . extractPathWithinPattern ( pattern ,    lookupPath )  ;", "String   pathMapping    =    lookupPath . substring (  0  ,    lookupPath . indexOf ( pathWithinMapping )  )  ;", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  \" Invoking   ResourceResolverChain   for   URL   pattern    \\  \"  \"     +    pattern )     +     \"  \\  \"  \"  )  )  ;", "}", "ResourceHttpRequestHandler   handler    =    this . handlerMap . get ( pattern )  ;", "ResourceResolverChain   chain    =    new   DefaultResourceResolverChain ( handler . getResourceResolvers (  )  )  ;", "String   resolved    =    chain . resolveUrlPath ( pathWithinMapping ,    handler . getLocations (  )  )  ;", "if    ( resolved    =  =    null )     {", "continue ;", "}", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  \" Resolved   public      URL   path    \\  \"  \"     +    resolved )     +     \"  \\  \"  \"  )  )  ;", "}", "return   pathMapping    +    resolved ;", "}", "}", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" No   matching      mapping   for   lookup   path    \\  \"  \"     +    lookupPath )     +     \"  \\  \"  \"  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getForLookupPath"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isTraceEnabled (  )  )     {", "logger . trace (  (  (  \" Getting      URL   for   request   URL    \\  \"  \"     +    requestUrl )     +     \"  \\  \"  \"  )  )  ;", "}", "int   prefixIndex    =    getLookupPathIndex ( request )  ;", "int   suffixIndex    =    getEndPathIndex ( requestUrl )  ;", "if    ( prefixIndex    >  =    suffixIndex )     {", "return   null ;", "}", "String   prefix    =    requestUrl . substring (  0  ,    prefixIndex )  ;", "String   suffix    =    requestUrl . substring ( suffixIndex )  ;", "String   lookupPath    =    requestUrl . substring ( prefixIndex ,    suffixIndex )  ;", "String   resolvedLookupPath    =    getForLookupPath ( lookupPath )  ;", "return   resolvedLookupPath    !  =    null    ?     ( prefix    +    resolvedLookupPath )     +    suffix    :    null ;", "}", "METHOD_END"], "methodName": ["getForRequestUrl"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . handlerMap ;", "}", "METHOD_END"], "methodName": ["getHandlerMap"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "UrlPathHelper   pathHelper    =    getUrlPathHelper (  )  ;", "String   requestUri    =    pathHelper . getRequestUri ( request )  ;", "String   lookupPath    =    pathHelper . getLookupPathForRequest ( request )  ;", "return   requestUri . indexOf ( lookupPath )  ;", "}", "METHOD_END"], "methodName": ["getLookupPathIndex"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . pathMatcher ;", "}", "METHOD_END"], "methodName": ["getPathMatcher"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . autodetect ;", "}", "METHOD_END"], "methodName": ["isAutodetect"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( handlerMap    !  =    null )     {", "this . handlerMap . clear (  )  ;", "this . handlerMap . putAll ( handlerMap )  ;", "this . autodetect    =    false ;", "}", "}", "METHOD_END"], "methodName": ["setHandlerMap"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "this . pathMatcher    =    pathMatcher ;", "}", "METHOD_END"], "methodName": ["setPathMatcher"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProvider"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / myapp / myservlet / index \"  )  ;", "this . request . setServletPath (  \"  / myservlet \"  )  ;", "this . filterChain . doFilter ( this . request ,    this . response )  ;", "assertEquals (  \"  / myapp / myservlet / index \"  ,    resolvePublicath (  \"  / myapp / myservlet / index \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePathNoMatch"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / myapp / index \"  )  ;", "this . request . setServletPath (  \"  / index \"  )  ;", "this . filterChain . doFilter ( this . request ,    this . response )  ;", "assertEquals (  \"  / myapp / resources / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  ,    resolvePublicath (  \"  / myapp / resources / foo . css \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePathWithServletMappedAsRoot"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / myapp / myservlet / index \"  )  ;", "this . request . setServletPath (  \"  / myservlet \"  )  ;", "this . filterChain . doFilter ( this . request ,    this . response )  ;", "assertEquals (  \"  / myapp / myservlet / resources / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  ,    resolvePublicath (  \"  / myapp / myservlet / resources / foo . css \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePathWithServletMappedByPrefix"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests"}, {"methodBody": ["METHOD_START", "{", "return   this . servlet . wrappedResponse . encodeURL ( path )  ;", "}", "METHOD_END"], "methodName": ["resolvePublicResourceUrlPath"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests"}, {"methodBody": ["METHOD_START", "{", "this . filterChain    =    new   MockFilterChain ( this . servlet ,    new   ResourceUrlEncodingFilter (  )  )  ;", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . setServletContext ( new   MockServletContext (  )  )  ;", "context . register (  . WebConfig . class )  ;", "context . refresh (  )  ;", "this . request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  /  \"  )  ;", "this . request . setContextPath (  \"  / myapp \"  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "Object   urlProvider    =    context . getBean ( ResourceUrlProvider . class )  ;", "this . request . setAttribute ( ResourceUrlProviderExposingInterceptor . RESOURCE _ URL _ PROVIDER _ ATTR ,    urlProvider )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderJavaConfigTests"}, {"methodBody": ["METHOD_START", "{", "ResourceHttpRequestHandler   otherHandler    =    new   ResourceHttpRequestHandler (  )  ;", "otherHandler . setLocations ( this . locations )  ;", "Map < String ,    VersionStrategy >    versionStrategyMap    =    new   HashMap <  >  (  )  ;", "versionStrategyMap . put (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  ;", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( versionStrategyMap )  ;", "List < ResourceResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( versionResolver )  ;", "resolvers . add ( new   PathResourceResolver (  )  )  ;", "otherHandler . setResourceResolvers ( resolvers )  ;", "this . handlerMap . put (  \"  / resources /  *  . css \"  ,    otherHandler )  ;", "this . u . setHandlerMap ( this . handlerMap )  ;", "String   url    =    this . u . getForLookupPath (  \"  / resources / foo . css \"  )  ;", "assertEquals (  \"  / resources / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  ,    url )  ;", "}", "METHOD_END"], "methodName": ["bestPatternMatch"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    VersionStrategy >    versionStrategyMap    =    new   HashMap <  >  (  )  ;", "versionStrategyMap . put (  \"  /  *  *  \"  ,    new   ContentVersionStrategy (  )  )  ;", "VersionResourceResolver   versionResolver    =    new   VersionResourceResolver (  )  ;", "versionResolver . setStrategyMap ( versionStrategyMap )  ;", "List < ResourceResolver >    resolvers    =    new   ArrayList <  >  (  )  ;", "resolvers . add ( versionResolver )  ;", "resolvers . add ( new   PathResourceResolver (  )  )  ;", "this . handler . setResourceResolvers ( resolvers )  ;", "String   url    =    this . u . getForLookupPath (  \"  / resources / foo . css \"  )  ;", "assertEquals (  \"  / resources / foo - e 3  6 d 2 e 0  5  2  5  3 c 6 c 7  0  8  5 a 9  1  5  2  2 ce 4  3 a 0 b 4  . css \"  ,    url )  ;", "}", "METHOD_END"], "methodName": ["getFingerprintedResourceUrl"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "ResourceResolver   mockResourceResolver    =    mock ( ResourceResolver . class )  ;", "when ( mockResourceResolver . resolveUrlPath ( any (  )  ,    any (  )  ,    any (  )  )  )  . thenReturn (  \" some - path \"  )  ;", "ResourceHttpRequestHandler   handler    =    new   ResourceHttpRequestHandler (  )  ;", "handler . getResourceResolvers (  )  . add ( mockResourceResolver )  ;", "provider    =    new    (  )  ;", "provider . getHandlerMap (  )  . put (  \"  / some - pattern /  *  *  \"  ,    handler )  ;", "String   lookupForPath    =    provider . getForLookupPath (  \"  / some - pattern / some - lib /  / some - resource \"  )  ;", "assertEquals (  \"  / some - pattern / some - path \"  ,    lookupForPath )  ;", "}", "METHOD_END"], "methodName": ["getForLookupPathShouldNotFailIfPathContainsDoubleSlashes"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =    this . urlProvider . getForLookupPath (  \"  / resources / foo . css \"  )  ;", "assertEquals (  \"  / resources / foo . css \"  ,    url )  ;", "}", "METHOD_END"], "methodName": ["getStaticResourceUrl"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContextPath (  \"  /  \"  )  ;", "request . setRequestURI (  \"  /  \"  )  ;", "String   url    =     \"  / resources / foo . css ? foo = bar & url = http :  /  / example . org \"  ;", "String   resolvedUrl    =    this . u . getForRequestUrl ( request ,    url )  ;", "assertEquals (  \"  / resources / foo . css ? foo = bar & url = http :  /  / example . org \"  ,    resolvedUrl )  ;", "url    =     \"  / resources / foo . css # hash \"  ;", "resolvedUrl    =    this . u . getForRequestUrl ( request ,    url )  ;", "assertEquals (  \"  / resources / foo . css # hash \"  ,    resolvedUrl )  ;", "}", "METHOD_END"], "methodName": ["getStaticResourceUrlRequestWithQueryOrHash"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setContextPath (  \"  / contextpath - longer - than - request - path \"  )  ;", "request . setRequestURI (  \"  / contextpath - longer - than - request - path / style . css \"  )  ;", "String   url    =     \"  / resources / foo . css \"  ;", "String   resolvedUrl    =    this . u . getForRequestUrl ( request ,    url )  ;", "assertNull ( resolvedUrl )  ;", "}", "METHOD_END"], "methodName": ["getStaticResourceWithMissingContextPath"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   context    =    new   AnnotationConfigWebApplicationContext (  )  ;", "context . setServletContext ( new   MockServletContext (  )  )  ;", "context . register (  . HandlerMappingConfiguration . class )  ;", "context . refresh (  )  ;", "ResourceUrlProvider   urlProviderBean    =    context . getBean ( ResourceUrlProvider . class )  ;", "assertThat ( urlProviderBean . getHandlerMap (  )  ,    Matchers . hasKey (  \"  / resources /  *  *  \"  )  )  ;", "assertFalse ( urlProviderBean . isAutodetect (  )  )  ;", "}", "METHOD_END"], "methodName": ["initializeOnce"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "this . locations . add ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "this . locations . add ( new   ClassPathResource (  \" testalternatepath /  \"  ,    getClass (  )  )  )  ;", "this . handler . setServletContext ( new   MockServletContext (  )  )  ;", "this . handler . setLocations ( locations )  ;", "this . handler . afterPropertiesSet (  )  ;", "this . handlerMap . put (  \"  / resources /  *  *  \"  ,    this . handler )  ;", "this . u . setHandlerMap ( this . handlerMap )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.resource.ResourceUrlProviderTests"}, {"methodBody": ["METHOD_START", "{", "addVersionStrategy ( new   ContentVersionStrategy (  )  ,    pathPatterns )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addContentVersionStrategy"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "List < String >    patternsList    =    Arrays . asList ( pathPatterns )  ;", "List < String >    prefixedPatterns    =    new   ArrayList <  >  ( pathPatterns . length )  ;", "String   versionPrefix    =     \"  /  \"     +    version ;", "for    ( String   pattern    :    patternsList )     {", "prefixedPatterns . add ( pattern )  ;", "if    (  (  !  ( pattern . startsWith ( versionPrefix )  )  )     &  &     (  !  ( patternsList . contains (  ( versionPrefix    +    pattern )  )  )  )  )     {", "prefixedPatterns . add (  ( versionPrefix    +    pattern )  )  ;", "}", "}", "return   addStrategy ( new   FixedStrategy ( version )  ,    StringUtils . toStringArray ( prefixedPatterns )  )  ;", "}", "METHOD_END"], "methodName": ["addFixedVersionStrategy"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( String   pattern    :    pathPatterns )     {", "getStrategyMap (  )  . put ( pattern ,    strategy )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addVersionStrategy"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "String   path    =     \"  /  \"  . concat ( requestPath )  ;", "List < String >    matchingPatterns    =    new   ArrayList <  >  (  )  ;", "for    ( String   pattern    :    this . vStrategyMap . keySet (  )  )     {", "if    ( this . pathMatcher . match ( pattern ,    path )  )     {", "matchingPatterns . add ( pattern )  ;", "}", "}", "if    (  !  ( matchingPatterns . isEmpty (  )  )  )     {", "Comparator < String >    comparator    =    this . pathMatcher . getPatternComparator ( path )  ;", "matchingPatterns . sort ( comparator )  ;", "return   this . vStrategyMap . get ( matchingPatterns . get (  0  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStrategyForPath"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . versionStrategyMap ;", "}", "METHOD_END"], "methodName": ["getStrategyMap"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "this . versionStrategyMap . clear (  )  ;", "this . versionStrategyMap . putAll ( map )  ;", "}", "METHOD_END"], "methodName": ["setStrategyMap"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolver"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    VersionStrategy >    strategies    =    new   HashMap <  >  (  )  ;", "VersionStrategy   jsStrategy    =    mock ( VersionStrategy . class )  ;", "VersionStrategy   catchAllStrategy    =    mock ( VersionStrategy . class )  ;", "strategies . put (  \"  /  *  *  \"  ,    catchAllStrategy )  ;", "strategies . put (  \"  /  *  *  /  *  . js \"  ,    jsStrategy )  ;", "this . resolver . setStrategyMap ( strategies )  ;", "assertEquals ( catchAllStrategy ,    this . resolver . getStrategyForPath (  \" foo . css \"  )  )  ;", "assertEquals ( catchAllStrategy ,    this . resolver . getStrategyForPath (  \" foo - js . css \"  )  )  ;", "assertEquals ( jsStrategy ,    this . resolver . getStrategyForPath (  \" foo . js \"  )  )  ;", "assertEquals ( jsStrategy ,    this . resolver . getStrategyForPath (  \" bar / foo . js \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getStrategyForPath"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" bar . css \"  ;", "expected    =    new   ClassPath (  (  \" test /  \"     +    file )  ,    getClass (  )  )  ;", "given ( this . chain . resolve ( null ,    file ,    this . locations )  )  . willReturn ( expected )  ;", "this . resolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . versionStrategy )  )  ;", "actual    =    this . resolver . resolveInternal ( null ,    file ,    this . locations ,    this . chain )  ;", "assertEquals ( expected ,    actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolve ( null ,    file ,    this . locations )  ;", "verify ( this . versionStrategy ,    never (  )  )  . extractVersion ( file )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceExisting"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   versionFile    =     \" bar - version . css \"  ;", "String   version    =     \" version \"  ;", "String   file    =     \" bar . css \"  ;", "given ( this . chain . resolve ( null ,    versionFile ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . chain . resolve ( null ,    file ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . versionStrategy . extractVersion ( versionFile )  )  . willReturn ( version )  ;", "given ( this . versionStrategy . removeVersion ( versionFile ,    version )  )  . willReturn ( file )  ;", "this . resolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . versionStrategy )  )  ;", "actual    =    this . resolver . resolveInternal ( null ,    versionFile ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . versionStrategy ,    times (  1  )  )  . removeVersion ( versionFile ,    version )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceNoResourceAfterVersionRemoved"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" bar . css \"  ;", "given ( this . chain . resolve ( null ,    file ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . versionStrategy . extractVersion ( file )  )  . willReturn (  \"  \"  )  ;", "this . resolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . versionStrategy )  )  ;", "actual    =    this . resolver . resolveInternal ( null ,    file ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolve ( null ,    file ,    this . locations )  ;", "verify ( this . versionStrategy ,    times (  1  )  )  . extractVersion ( file )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceNoVersionInPath"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" missing . css \"  ;", "given ( this . chain . resolve ( null ,    file ,    this . locations )  )  . willReturn ( null )  ;", "this . resolver . setStrategyMap ( Collections . emptyMap (  )  )  ;", "actual    =    this . resolver . resolveInternal ( null ,    file ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolve ( null ,    file ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceNoVersionStrategy"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   versionFile    =     \" bar - version . css \"  ;", "String   version    =     \" version \"  ;", "String   file    =     \" bar . css \"  ;", "expected    =    new   ClassPath (  (  \" test /  \"     +    file )  ,    getClass (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / resources / bar - version . css \"  )  ;", "given ( this . chain . resolve ( request ,    versionFile ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . chain . resolve ( request ,    file ,    this . locations )  )  . willReturn ( expected )  ;", "given ( this . versionStrategy . extractVersion ( versionFile )  )  . willReturn ( version )  ;", "given ( this . versionStrategy . removeVersion ( versionFile ,    version )  )  . willReturn ( file )  ;", "given ( this . versionStrategy . getVersion ( expected )  )  . willReturn ( version )  ;", "this . resolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . versionStrategy )  )  ;", "actual    =    this . resolver . resolveInternal ( request ,    versionFile ,    this . locations ,    this . chain )  ;", "assertEquals ( expected . getFilename (  )  ,    actual . getFilename (  )  )  ;", "verify ( this . versionStrategy ,    times (  1  )  )  . getVersion ( expected )  ;", "assertThat ( actual ,    instanceOf ( Http . class )  )  ;", "assertEquals (  (  (  \"  \\  \"  \"     +    version )     +     \"  \\  \"  \"  )  ,     (  ( Http )     ( actual )  )  . getResponseHeaders (  )  . getETag (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceSuccess"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   versionFile    =     \" bar - version . css \"  ;", "String   version    =     \" version \"  ;", "String   file    =     \" bar . css \"  ;", "expected    =    new   ClassPath (  (  \" test /  \"     +    file )  ,    getClass (  )  )  ;", "given ( this . chain . resolve ( null ,    versionFile ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . chain . resolve ( null ,    file ,    this . locations )  )  . willReturn ( expected )  ;", "given ( this . versionStrategy . extractVersion ( versionFile )  )  . willReturn ( version )  ;", "given ( this . versionStrategy . removeVersion ( versionFile ,    version )  )  . willReturn ( file )  ;", "given ( this . versionStrategy . getVersion ( expected )  )  . willReturn (  \" newer - version \"  )  ;", "this . resolver . setStrategyMap ( Collections . singletonMap (  \"  /  *  *  \"  ,    this . versionStrategy )  )  ;", "actual    =    this . resolver . resolveInternal ( null ,    versionFile ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . versionStrategy ,    times (  1  )  )  . getVersion ( expected )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceVersionDoesNotMatch"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "given ( this . chain . resolveUrlPath (  \"  / foo . css \"  ,    this . locations )  )  . willReturn (  \"  / foo . css \"  )  ;", "String   resolved    =    this . r . resolveUrlPathInternal (  \"  / foo . css \"  ,    this . locations ,    this . chain )  ;", "assertThat ( resolved ,    is (  \"  / foo . css \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlPathNoVersionStrategy"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . locations    =    new   ArrayList (  )  ;", "this . locations . add ( new   ClassPathResource (  \" test /  \"  ,    getClass (  )  )  )  ;", "this . locations . add ( new   ClassPathResource (  \" testalternatepath /  \"  ,    getClass (  )  )  )  ;", "this . resolver    =    new    (  )  ;", "this . chain    =    mock ( ResourceResolverChain . class )  ;", "this . versionStrategy    =    mock ( VersionStrategy . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . resolver . addFixedVersionStrategy (  \" fixedversion \"  ,     \"  / js /  *  *  \"  ,     \"  / css /  *  *  \"  ,     \"  / fixedversion / css /  *  *  \"  )  ;", "Matcher < VersionStrategy >    matcher    =    Matchers . instanceOf ( FixedVersionStrategy . class )  ;", "assertThat ( this . resolver . getStrategyMap (  )  . size (  )  ,    is (  4  )  )  ;", "assertThat ( this . resolver . getStrategyForPath (  \" js / something . js \"  )  ,    matcher )  ;", "assertThat ( this . resolver . getStrategyForPath (  \" fixedversion / js / something . js \"  )  ,    matcher )  ;", "assertThat ( this . resolver . getStrategyForPath (  \" css / something . css \"  )  ,    matcher )  ;", "assertThat ( this . resolver . getStrategyForPath (  \" fixedversion / css / something . css \"  )  ,    matcher )  ;", "}", "METHOD_END"], "methodName": ["shouldConfigureFixedPrefixAutomatically"], "fileName": "org.springframework.web.servlet.resource.VersionResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "int   startOffset    =     ( path . startsWith (  \"  /  \"  )  )     ?     1     :     0  ;", "int   endOffset    =    path . indexOf (  '  /  '  ,     1  )  ;", "if    ( endOffset    !  =     (  -  1  )  )     {", "String   webjar    =    path . substring ( startOffset ,    endOffset )  ;", "String   partialPath    =    path . substring (  ( endOffset    +     1  )  )  ;", "String   webJarPath    =    webJarAssetLocator . getFullPathExact ( webjar ,    partialPath )  ;", "if    ( webJarPath    !  =    null )     {", "return   webJarPath . substring (  . WEBJARS _ LOCATION _ LENGTH )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findWebJarResourcePath"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolver"}, {"methodBody": ["METHOD_START", "{", "Resource   expected    =    mock ( Resource . class )  ;", "this . locations    =    Collections . singletonList ( new   ClassPathResource (  \"  / META - INF / resources / webjars /  \"  ,    getClass (  )  )  )  ;", "String   file    =     \" foo /  2  .  3  / foo . txt \"  ;", "given ( this . chain . resolveResource ( this . request ,    file ,    this . locations )  )  . willReturn ( expected )  ;", "Resource   actual    =    this . resolver . resolveResource ( this . request ,    file ,    this . locations ,    this . chain )  ;", "assertEquals ( expected ,    actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveResource ( this . request ,    file ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceExisting"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" something / something . js \"  ;", "given ( this . chain . resolveUrlPath ( file ,    this . locations )  )  . willReturn ( null )  ;", "actual    =    this . resolver . resolve ( this . request ,    file ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolve ( this . request ,    file ,    this . locations )  ;", "verify ( this . chain ,    never (  )  )  . resolve ( this . request ,    null ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceNotFound"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "Resource   expected    =    mock ( Resource . class )  ;", "String   file    =     \" underscorejs / underscore . js \"  ;", "String   expectedPath    =     \" underscorejs /  1  .  8  .  3  / underscore . js \"  ;", "this . locations    =    Collections . singletonList ( new   ClassPathResource (  \"  / META - INF / resources / webjars /  \"  ,    getClass (  )  )  )  ;", "given ( this . chain . resolveResource ( this . request ,    expectedPath ,    this . locations )  )  . willReturn ( expected )  ;", "Resource   actual    =    this . resolver . resolveResource ( this . request ,    file ,    this . locations ,    this . chain )  ;", "assertEquals ( expected ,    actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveResource ( this . request ,    file ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveResourceWebJar"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . locations    =    Collections . singletonList ( new   ClassPathResource (  \"  / META - INF / resources / webjars /  \"  ,    getClass (  )  )  )  ;", "String   file    =     \"  / foo /  2  .  3  / foo . txt \"  ;", "given ( this . chain . resolveUrlPath ( file ,    this . locations )  )  . willReturn ( file )  ;", "String   actual    =    this . resolver . resolveUrlPath ( file ,    this . locations ,    this . chain )  ;", "assertEquals ( file ,    actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveUrlPath ( file ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlExisting"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . locations    =    Collections . singletonList ( new   ClassPathResource (  \"  / META - INF / resources / webjars /  \"  ,    getClass (  )  )  )  ;", "String   file    =     \" foo / foo . txt \"  ;", "given ( this . chain . resolveUrlPath ( file ,    this . locations )  )  . willReturn ( null )  ;", "String   actual    =    this . resolver . resolveUrlPath ( file ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveUrlPath ( file ,    this . locations )  ;", "verify ( this . chain ,    never (  )  )  . resolveUrlPath (  \" foo /  2  .  3  / foo . txt \"  ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlExistingNotInJarFile"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" underscorejs / underscore . js \"  ;", "String   expected    =     \" underscorejs /  1  .  8  .  3  / underscore . js \"  ;", "given ( this . chain . resolveUrlPath ( file ,    this . locations )  )  . willReturn ( null )  ;", "given ( this . chain . resolveUrlPath ( expected ,    this . locations )  )  . willReturn ( expected )  ;", "String   actual    =    this . r . resolveUrlPath ( file ,    this . locations ,    this . chain )  ;", "assertEquals ( expected ,    actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveUrlPath ( file ,    this . locations )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveUrlPath ( expected ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlWebJarResource"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "String   file    =     \" something / something . js \"  ;", "given ( this . chain . resolveUrlPath ( file ,    this . locations )  )  . willReturn ( null )  ;", "String   actual    =    this . r . resolveUrlPath ( file ,    this . locations ,    this . chain )  ;", "assertNull ( actual )  ;", "verify ( this . chain ,    times (  1  )  )  . resolveUrlPath ( file ,    this . locations )  ;", "verify ( this . chain ,    never (  )  )  . resolveUrlPath ( null ,    this . locations )  ;", "}", "METHOD_END"], "methodName": ["resolveUrlWebJarResourceNotFound"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . locations    =    Collections . singletonList ( new   ClassPathResource (  \"  / META - INF / resources / webjars \"  )  )  ;", "this . resolver    =    new    (  )  ;", "this . chain    =    mock ( ResourceResolverChain . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.resource.WebJarsResourceResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   new   DispatcherServlet ( servletAppContext )  ;", "}", "METHOD_END"], "methodName": ["createDispatcherServlet"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "return   isAsyncSupported (  )     ?    EnumSet . of ( REQUEST ,    FORWARD ,    INCLUDE ,    ASYNC )     :    EnumSet . of ( REQUEST ,    FORWARD ,    INCLUDE )  ;", "}", "METHOD_END"], "methodName": ["getDispatcherTypes"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getServletApplicationContextInitializers"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getServletFilters"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "return   AbstractDispatcherServletInitializer . DEFAULT _ SERVLET _ NAME ;", "}", "METHOD_END"], "methodName": ["getServletName"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isAsyncSupported"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "String   servletName    =    getServletName (  )  ;", "Assert . hasLength ( servletName ,     \" getServletName (  )    must   not   return   null   or   empty \"  )  ;", "WebApplicationContext   servletAppContext    =    createServletApplicationContext (  )  ;", "Assert . notNull ( servletAppContext ,     \" createServletApplicationContext (  )    must   not   return   null \"  )  ;", "FrameworkServlet   dispatcherServlet    =    create ( servletAppContext )  ;", "Assert . notNull ( dispatcherServlet ,     \" create ( WebApplicationContext )    must   not   return   null \"  )  ;", "dispatcherServlet . setContextInitializers ( getServletApplicationContextInitializers (  )  )  ;", "ServletRegistration . Dynamic   registration    =    servletContext . addServlet ( servletName ,    dispatcherServlet )  ;", "if    ( registration    =  =    null )     {", "throw   new   IllegalStateException (  (  (  (  \" Failed   to   register   servlet   with   name    '  \"     +    servletName )     +     \"  '  .     \"  )     +     \" Check   if   there   is   another   servlet   registered   under   the   same   name .  \"  )  )  ;", "}", "registration . setLoadOnStartup (  1  )  ;", "registration . addMapping ( getServletMappings (  )  )  ;", "registration . setAsyncSupported ( isAsyncSupported (  )  )  ;", "Filter [  ]    filters    =    getServletFilters (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( filters )  )  )     {", "for    ( Filter   filter    :    filters )     {", "registerServletFilter ( servletContext ,    filter )  ;", "}", "}", "customizeRegistration ( registration )  ;", "}", "METHOD_END"], "methodName": ["registerDispatcherServlet"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "String   filterName    =    Conventions . getVariableName ( filter )  ;", "Dynamic   registration    =    servletContext . addFilter ( filterName ,    filter )  ;", "if    ( registration    =  =    null )     {", "int   counter    =     0  ;", "while    ( registration    =  =    null )     {", "if    ( counter    =  =     1  0  0  )     {", "throw   new   IllegalStateException (  (  (  (  \" Failed   to   register   filter   with   name    '  \"     +    filterName )     +     \"  '  .     \"  )     +     \" Check   if   there   is   another   filter   registered   under   the   same   name .  \"  )  )  ;", "}", "registration    =    servletContext . addFilter (  (  ( filterName    +     \"  #  \"  )     +    counter )  ,    filter )  ;", "counter +  +  ;", "}", "}", "registration . setAsyncSupported ( isAsyncSupported (  )  )  ;", "registration . addMappingForServletNames ( geTypes (  )  ,    false ,    getServletName (  )  )  ;", "return   registration ;", "}", "METHOD_END"], "methodName": ["registerServletFilter"], "fileName": "org.springframework.web.servlet.support.AbstractDispatcherServletInitializer"}, {"methodBody": ["METHOD_START", "{", "if    ( path    !  =    null )     {", "path    =    getUrlPathHelper (  )  . decodeRequestSt ( request ,    path )  ;", "if    (  ( path . charAt (  0  )  )     !  =     '  /  '  )     {", "St   requestUri    =    getUrlPathHelper (  )  . getRequestUri ( request )  ;", "path    =     ( requestUri . subst (  0  ,     (  ( requestUri . lastIndexOf (  '  /  '  )  )     +     1  )  )  )     +    path ;", "path    =    StUtils . cleanPath ( path )  ;", "}", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["decodeAndNormalizePath"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "List < FlashMap >    result    =    new   LinkedList <  >  (  )  ;", "for    ( FlashMap   map    :    allMaps )     {", "if    ( map . isExpired (  )  )     {", "result . add ( map )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getExpiredFlashMaps"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "return   this . flashMapTimeout ;", "}", "METHOD_END"], "methodName": ["getFlashMapTimeout"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "return   AbstractFlashMapManager . DEFAULT _ FLASH _ MAPS _ MUTEX ;", "}", "METHOD_END"], "methodName": ["getFlashMapsMutex"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "List < FlashMap >    result    =    new   LinkedList <  >  (  )  ;", "for    ( FlashMap   flashMap    :    allMaps )     {", "if    ( isFlashMapForRequest ( flashMap ,    request )  )     {", "result . add ( flashMap )  ;", "}", "}", "if    (  !  ( result . isEmpty (  )  )  )     {", "Collections . sort ( result )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Found   matching   FlashMap ( s )  :     \"     +    result )  )  ;", "}", "return   result . get (  0  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMatchingFlashMap"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "String   query    =    getUrlPathHelper (  )  . getOriginatingQueryString ( request )  ;", "return   SUriComponentsBuilder . fromPath (  \"  /  \"  )  . query ( query )  . build (  )  . getQueryParams (  )  ;", "}", "METHOD_END"], "methodName": ["getOriginatingRequestParams"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "String   expectedPath    =    flashMap . getTargetRequestPath (  )  ;", "if    ( expectedPath    !  =    null )     {", "String   requestUri    =    getUrlPathHelper (  )  . getOriginatingRequestUri ( request )  ;", "if    (  (  !  ( requestUri . equals ( expectedPath )  )  )     &  &     (  !  ( requestUri . equals (  ( expectedPath    +     \"  /  \"  )  )  )  )  )     {", "return   false ;", "}", "}", "MultiValueMap < String ,    String >    actualParams    =    getOriginatingRequestParams ( request )  ;", "MultiValueMap < String ,    String >    expectedParams    =    flashMap . getTargetRequestParams (  )  ;", "for    ( String   expectedName    :    expectedParams . keySet (  )  )     {", "List < String >    actualValues    =    actualParams . get ( expectedName )  ;", "if    ( actualValues    =  =    null )     {", "return   false ;", "}", "for    ( String   expectedValue    :    expectedParams . get ( expectedName )  )     {", "if    (  !  ( actualValues . contains ( expectedValue )  )  )     {", "return   false ;", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isFlashMapForRequest"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "this . flashMapTimeout    =    flashMapTimeout ;", "}", "METHOD_END"], "methodName": ["setFlashMapTimeout"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.support.AbstractFlashMapManager"}, {"methodBody": ["METHOD_START", "{", "initializer    =    new   AnnotationConfigDispatcherServletInitializerTests . MyAnnotationConfigDispatcherServletInitializer (  )     {", "@ Override", "protected   boolean   isAsyncSupported (  )     {", "return   false ;", "}", "}  ;", "initializer . onStartup ( servletContext )  ;", "MockServletRegistration   servletRegistration    =    servletRegistrations . get ( AnnotationConfigDispatcherServletInitializerTests . SERVLET _ NAME )  ;", "assertFalse ( servletRegistration . isAsyncSupported (  )  )  ;", "for    ( MockFilterRegistration   filterRegistration    :    filterRegistrations . values (  )  )     {", "assertFalse ( filterRegistration . isAsyncSupported (  )  )  ;", "assertEquals ( EnumSet . of ( REQUEST ,    FORWARD ,    INCLUDE )  ,    filterRegistration . getMappings (  )  . get ( AnnotationConfigDispatcherServletInitializerTests . SERVLET _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["asyncSupportedFalse"], "fileName": "org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "initializer    =    new   AnnotationConfigDispatcherServletInitializerTests . MyAnnotationConfigDispatcherServletInitializer (  )     {", "@ Override", "protected   Filter [  ]    getServletFilters (  )     {", "return   null ;", "}", "}  ;", "initializer . onStartup ( servletContext )  ;", "assertEquals (  0  ,    filterRegistrations . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["noFilters"], "fileName": "org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "initializer . onStartup ( servletContext )  ;", "assertEquals (  1  ,    servlets . size (  )  )  ;", "assertNotNull ( servlets . get (  . SERVLET _ NAME )  )  ;", "DispatcherServlet   servlet    =     (  ( DispatcherServlet )     ( servlets . get (  . SERVLET _ NAME )  )  )  ;", "WebApplicationContext   wac    =    servlet . getWebApplicationContext (  )  ;", "(  ( AnnotationConfigWebApplicationContext )     ( wac )  )  . refresh (  )  ;", "assertTrue ( wac . containsBean (  \" bean \"  )  )  ;", "assertTrue (  (  ( wac . getBean (  \" bean \"  )  )    instanceof    . MyBean )  )  ;", "assertEquals (  1  ,    servletRegistrations . size (  )  )  ;", "assertNotNull ( servletRegistrations . get (  . SERVLET _ NAME )  )  ;", "MockServletRegistration   servletRegistration    =    servletRegistrations . get (  . SERVLET _ NAME )  ;", "assertEquals ( Collections . singleton (  . SERVLET _ MAPPING )  ,    servletRegistration . getMappings (  )  )  ;", "assertEquals (  1  ,    servletRegistration . getLoadOnStartup (  )  )  ;", "assertEquals (  . ROLE _ NAME ,    servletRegistration . getRunAsRole (  )  )  ;", "assertTrue ( servletRegistration . isAsyncSupported (  )  )  ;", "assertEquals (  4  ,    filterRegistrations . size (  )  )  ;", "assertNotNull ( filterRegistrations . get (  \" hiddenHttpMethodFilter \"  )  )  ;", "assertNotNull ( filterRegistrations . get (  \" delegatingFilterProxy \"  )  )  ;", "assertNotNull ( filterRegistrations . get (  \" delegatingFilterProxy #  0  \"  )  )  ;", "assertNotNull ( filterRegistrations . get (  \" delegatingFilterProxy #  1  \"  )  )  ;", "for    ( MockFilterRegistration   filterRegistration    :    filterRegistrations . values (  )  )     {", "assertTrue ( filterRegistration . isAsyncSupported (  )  )  ;", "EnumSet < DispatcherType >    enumSet    =    EnumSet . of ( REQUEST ,    FORWARD ,    INCLUDE ,    ASYNC )  ;", "assertEquals ( enumSet ,    filterRegistration . getMappings (  )  . get (  . SERVLET _ NAME )  )  ;", "}", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "initializer    =    new   AnnotationConfigDispatcherServletInitializerTests . MyAnnotationConfigDispatcherServletInitializer (  )     {", "@ Override", "protected   Class <  ?  >  [  ]    getRootConfigClasses (  )     {", "return   new   Class <  ?  >  [  ]  {    AnnotationConfigDispatcherServletInitializerTests . MyConfiguration . class    }  ;", "}", "@ Override", "protected   Class <  ?  >  [  ]    getServletConfigClasses (  )     {", "return   null ;", "}", "}  ;", "initializer . onStartup ( servletContext )  ;", "DispatcherServlet   servlet    =     (  ( DispatcherServlet )     ( servlets . get ( AnnotationConfigDispatcherServletInitializerTests . SERVLET _ NAME )  )  )  ;", "servlet . init ( new   MockServletConfig ( this . servletContext )  )  ;", "WebApplicationContext   wac    =    servlet . getWebApplicationContext (  )  ;", "(  ( AnnotationConfigWebApplicationContext )     ( wac )  )  . refresh (  )  ;", "assertTrue ( wac . containsBean (  \" bean \"  )  )  ;", "assertTrue (  (  ( wac . getBean (  \" bean \"  )  )    instanceof   AnnotationConfigDispatcherServletInitializerTests . MyBean )  )  ;", "}", "METHOD_END"], "methodName": ["rootContextOnly"], "fileName": "org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "servletContext    =    new   AnnotationConfigDispatcherServletInitializerTests . MyMockServletContext (  )  ;", "initializer    =    new   AnnotationConfigDispatcherServletInitializerTests . MyAnnotationConfigDispatcherServletInitializer (  )  ;", "servlets    =    new   LinkedHashMap (  1  )  ;", "servletRegistrations    =    new   LinkedHashMap <  >  (  1  )  ;", "filters    =    new   LinkedHashMap (  1  )  ;", "filterRegistrations    =    new   LinkedHashMap <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.support.AnnotationConfigDispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "return    ( this . bindingResult )     !  =    null    ?    this . bindingResult . findEditor ( this . expression ,    valueClass )     :    null ;", "}", "METHOD_END"], "methodName": ["findEditor"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . actualValue ;", "}", "METHOD_END"], "methodName": ["getActualValue"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . value )    instanceof   String )     {", "return    (  ( String )     ( this . value )  )  ;", "}", "if    (  ( this . value )     !  =    null )     {", "return   this . htmlEscape    ?    HtmlUtils . htmlEscape ( this . value . toString (  )  )     :    this . value . toString (  )  ;", "}", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["getDisplayValue"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . editor ;", "}", "METHOD_END"], "methodName": ["getEditor"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return    ( this . errorCodes . length )     >     0     ?    this . errorCodes [  0  ]     :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getErrorCode"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . errorCodes ;", "}", "METHOD_END"], "methodName": ["getErrorCodes"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "String [  ]    errorMessages    =    initErrorMessages (  )  ;", "return    ( errorMessages . length )     >     0     ?    errorMessages [  0  ]     :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getErrorMessage"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   initErrorMessages (  )  ;", "}", "METHOD_END"], "methodName": ["getErrorMessages"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   StringUtils . arrayToDelimitedString ( initErrorMessages (  )  ,    delimiter )  ;", "}", "METHOD_END"], "methodName": ["getErrorMessagesAsString"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . errors ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . expression ;", "}", "METHOD_END"], "methodName": ["getExpression"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return   this . valueType ;", "}", "METHOD_END"], "methodName": ["getValueType"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "String [  ]    errorCodes    =    new   String [ objectErrors . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( objectErrors . size (  )  )  ;    i +  +  )     {", "ObjectError   error    =    objectErrors . get ( i )  ;", "errorCodes [ i ]     =    error . getCode (  )  ;", "}", "return   errorCodes ;", "}", "METHOD_END"], "methodName": ["initErrorCodes"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . errorMessages )     =  =    null )     {", "if    (  ( this . objectErrors )     !  =    null )     {", "this . errorMessages    =    new   St [ this . objectErrors . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( this . objectErrors . size (  )  )  ;    i +  +  )     {", "ObjectError   error    =    this . objectErrors . get ( i )  ;", "this . errorMessages [ i ]     =    this . requestContext . getMessage ( error ,    this . htmlEscape )  ;", "}", "} else    {", "this . errorMessages    =    new   St [  0  ]  ;", "}", "}", "return   this . errorMessages ;", "}", "METHOD_END"], "methodName": ["initErrorMessages"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "return    ( this . errorCodes . length )     >     0  ;", "}", "METHOD_END"], "methodName": ["isError"], "fileName": "org.springframework.web.servlet.support.BindStatus"}, {"methodBody": ["METHOD_START", "{", "initializer . onStartup ( servletContext )  ;", "assertEquals (  1  ,    servlets . size (  )  )  ;", "assertNotNull ( servlets . get (  . SERVLET _ NAME )  )  ;", "DispatcherServlet   servlet    =     (  ( DispatcherServlet )     ( servlets . get (  . SERVLET _ NAME )  )  )  ;", "assertEquals (  . MyDispatcherServlet . class ,    servlet . getClass (  )  )  ;", "WebApplicationContext   servletContext    =    servlet . getWebApplicationContext (  )  ;", "assertTrue ( servletContext . containsBean (  \" bean \"  )  )  ;", "assertTrue (  (  ( servletContext . getBean (  \" bean \"  )  )    instanceof    . MyBean )  )  ;", "assertEquals (  1  ,    registrations . size (  )  )  ;", "assertNotNull ( registrations . get (  . SERVLET _ NAME )  )  ;", "MockServletRegistration   registration    =    registrations . get (  . SERVLET _ NAME )  ;", "assertEquals ( Collections . singleton (  . SERVLET _ MAPPING )  ,    registration . getMappings (  )  )  ;", "assertEquals (  1  ,    registration . getLoadOnStartup (  )  )  ;", "assertEquals (  . ROLE _ NAME ,    registration . getRunAsRole (  )  )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.springframework.web.servlet.support.DispatcherServletInitializerTests"}, {"methodBody": ["METHOD_START", "{", "String   encodedValue    =    URLEncoder . encode (  \"  1     2  \"  ,     \" UTF -  8  \"  )  ;", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / path \"  )  ;", "flashMap . addTargetRequestParam (  \" param \"  ,    encodedValue )  ;", "this . request . setCharacterEncoding (  \" UTF -  8  \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "MockHttpServletRequest   requestAfterRedirect    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  ;", "requestAfterRedirect . setQueryString (  (  \" param =  \"     +    encodedValue )  )  ;", "requestAfterRedirect . addParameter (  \" param \"  ,     \"  1     2  \"  )  ;", "flashMap    =    this . f . retrieveAndUpdate ( requestAfterRedirect ,    new   MockHttpServletResponse (  )  )  ;", "assertNotNull ( flashMap )  ;", "assertEquals (  1  ,    flashMap . size (  )  )  ;", "assertEquals (  \" value \"  ,    flashMap . get (  \" key \"  )  )  ;", "}", "METHOD_END"], "methodName": ["flashAttributesWithQueryParamsWithSpace"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / accounts \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( flashMap )  )  ;", "this . request . setAttribute ( FORWARD _ REQUEST _ URI _ ATTRIBUTE ,     \"  / accounts \"  )  ;", "this . request . setRequestURI (  \"  / mvc / accounts \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchByOriginatingPath"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / accounts \"  )  ;", "flashMap . addTargetRequestParam (  \" a \"  ,     \" b \"  )  ;", "this . f . setFlashMaps ( Collections . singletonList ( flashMap )  )  ;", "this . request . setAttribute ( FORWARD _ REQUEST _ URI _ ATTRIBUTE ,     \"  / accounts \"  )  ;", "this . request . setAttribute ( FORWARD _ QUERY _ STRING _ ATTRIBUTE ,     \" a = b \"  )  ;", "this . request . setRequestURI (  \"  / mvc / accounts \"  )  ;", "this . request . setQueryString (  \" x = y \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchByOriginatingPathAndQueryString"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . addTargetRequestParam (  \" number \"  ,     \" one \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( flashMap )  )  ;", "this . request . setQueryString (  \" number =  \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertNull ( inputFlashMap )  ;", "assertEquals (  \" FlashMap   should   not   have   been   removed \"  ,     1  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "this . request . setQueryString (  \" number = two \"  )  ;", "inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertNull ( inputFlashMap )  ;", "assertEquals (  \" FlashMap   should   not   have   been   removed \"  ,     1  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "this . request . setQueryString (  \" number = one \"  )  ;", "inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchByParams"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / path \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( flashMap )  )  ;", "this . request . setRequestURI (  \"  / path \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchByPath"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" name \"  ,     \" value \"  )  ;", "flashMap . addTargetRequestParam (  \" id \"  ,     \"  1  \"  )  ;", "flashMap . addTargetRequestParam (  \" id \"  ,     \"  2  \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( flashMap )  )  ;", "this . request . setQueryString (  \" id =  1  \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertNull ( inputFlashMap )  ;", "assertEquals (  \" FlashMap   should   not   have   been   removed \"  ,     1  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "this . request . setQueryString (  \" id =  1  & id =  2  \"  )  ;", "inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchWithMultiValueParam"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / path \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( flashMap )  )  ;", "this . request . setRequestURI (  \"  / path /  \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMap ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateMatchWithTrailingSlash"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "List < FlashMap >    flashMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "FlashMap   expiredFlashMap    =    new   FlashMap (  )  ;", "expiredFlashMap . startExpirationPeriod (  (  -  1  )  )  ;", "flashMaps . add ( expiredFlashMap )  ;", "}", "this . f . setFlashMaps ( flashMaps )  ;", "this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals (  \" Expired   instances   should   be   removed   even   if   the   saved   FlashMap   is   empty \"  ,     0  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateRemoveExpired"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   emptyFlashMap    =    new   FlashMap (  )  ;", "FlashMap   flashMapOne    =    new   FlashMap (  )  ;", "flashMapOne . put (  \" key 1  \"  ,     \" value 1  \"  )  ;", "flashMapOne . setTargetRequestPath (  \"  / one \"  )  ;", "FlashMap   flashMapTwo    =    new   FlashMap (  )  ;", "flashMapTwo . put (  \" key 1  \"  ,     \" value 1  \"  )  ;", "flashMapTwo . put (  \" key 2  \"  ,     \" value 2  \"  )  ;", "flashMapTwo . setTargetRequestPath (  \"  / one / two \"  )  ;", "this . f . setFlashMaps ( Arrays . asList ( emptyFlashMap ,    flashMapOne ,    flashMapTwo )  )  ;", "this . request . setRequestURI (  \"  / one / two \"  )  ;", "FlashMap   inputFlashMap    =    this . f . retrieveAndUpdate ( this . request ,    this . response )  ;", "assertEquals ( flashMapTwo ,    inputFlashMap )  ;", "assertEquals (  \" Input   FlashMap   should   have   been   removed \"  ,     2  ,    this . f . getFlashMaps (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveAndUpdateSortMultipleMatches"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" name \"  ,     \" value \"  )  ;", "this . f . setFlashMapTimeout (  (  -  1  )  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "List < FlashMap >    allMaps    =    this . f . getFlashMaps (  )  ;", "assertNotNull ( allMaps )  ;", "assertSame ( flashMap ,    allMaps . get (  0  )  )  ;", "assertTrue ( flashMap . isExpired (  )  )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMap"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / path \"  )  ;", "flashMap . addTargetRequestParam (  \" param \"  ,     \"  % D 0  %  9  0  % D 0  %  9  0  \"  )  ;", "flashMap . addTargetRequestParam (  \" param \"  ,     \"  % D 0  %  9  1  % D 0  %  9  1  \"  )  ;", "flashMap . addTargetRequestParam (  \" param \"  ,     \"  % D 0  %  9  2  % D 0  %  9  2  \"  )  ;", "flashMap . addTargetRequestParam (  \"  %  3 A %  2 F %  3 F %  2  3  %  5 B %  5 D %  4  0  \"  ,     \" value \"  )  ;", "this . request . setCharacterEncoding (  \" UTF -  8  \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "MockHttpServletRequest   requestAfterRedirect    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / path \"  )  ;", "requestAfterRedirect . setQueryString (  \" param =  % D 0  %  9  0  % D 0  %  9  0  & param =  % D 0  %  9  1  % D 0  %  9  1  & param =  % D 0  %  9  2  % D 0  %  9  2  &  %  3 A %  2 F %  3 F %  2  3  %  5 B %  5 D %  4  0  = value \"  )  ;", "requestAfterRedirect . addParameter (  \" param \"  ,     \"  \\ u 0  4  1  0  \\ u 0  4  1  0  \"  )  ;", "requestAfterRedirect . addParameter (  \" param \"  ,     \"  \\ u 0  4  1  1  \\ u 0  4  1  1  \"  )  ;", "requestAfterRedirect . addParameter (  \" param \"  ,     \"  \\ u 0  4  1  2  \\ u 0  4  1  2  \"  )  ;", "requestAfterRedirect . addParameter (  \"  :  /  ?  #  [  ]  @  \"  ,     \" value \"  )  ;", "flashMap    =    this . f . retrieveAndUpdate ( requestAfterRedirect ,    new   MockHttpServletResponse (  )  )  ;", "assertNotNull ( flashMap )  ;", "assertEquals (  1  ,    flashMap . size (  )  )  ;", "assertEquals (  \" value \"  ,    flashMap . get (  \" key \"  )  )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMapDecodeParameters"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  / once %  2  0 upon %  2  0 a %  2  0 time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once   upon   a   time \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMapDecodeTargetPath"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "List < FlashMap >    allMaps    =    this . f . getFlashMaps (  )  ;", "assertNull ( allMaps )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMapEmpty"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" key \"  ,     \" value \"  )  ;", "flashMap . setTargetRequestPath (  \"  .  \"  )  ;", "this . request . setRequestURI (  \"  / once / upon / a / time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once / upon / a \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "flashMap . setTargetRequestPath (  \"  .  /  \"  )  ;", "this . request . setRequestURI (  \"  / once / upon / a / time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once / upon / a /  \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "flashMap . setTargetRequestPath (  \"  .  .  \"  )  ;", "this . request . setRequestURI (  \"  / once / upon / a / time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once / upon \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "flashMap . setTargetRequestPath (  \"  .  .  /  \"  )  ;", "this . request . setRequestURI (  \"  / once / upon / a / time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once / upon /  \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "flashMap . setTargetRequestPath (  \"  .  .  /  .  .  / only \"  )  ;", "this . request . setRequestURI (  \"  / once / upon / a / time \"  )  ;", "this . f . saveOutputFlashMap ( flashMap ,    this . request ,    this . response )  ;", "assertEquals (  \"  / once / only \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMapNormalizeTargetPath"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "this . flashMapManager    =    new   FlashMapManagerTests . TestFlashMapManager (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.support.FlashMapManagerTests"}, {"methodBody": ["METHOD_START", "{", "return   this . pageContext ;", "}", "METHOD_END"], "methodName": ["getPageContext"], "fileName": "org.springframework.web.servlet.support.JspAwareRequestContext"}, {"methodBody": ["METHOD_START", "{", "Locale   jstlLocale    =    RequestContextUtils . getLocale ( request )  ;", "Config . set ( request ,    FMT _ LOCALE ,    jstlLocale )  ;", "TimeZone   timeZone    =    RequestContextUtils . getTimeZone ( request )  ;", "if    ( timeZone    !  =    null )     {", "Config . set ( request ,    FMT _ TIME _ ZONE ,    timeZone )  ;", "}", "if    ( messageSource    !  =    null )     {", "LocalizationContext   jstlContext    =    new    . SpringLocalizationContext ( messageSource ,    request )  ;", "Config . set ( request ,    FMT _ LOCALIZATION _ CONTEXT ,    jstlContext )  ;", "}", "}", "METHOD_END"], "methodName": ["exposeLocalizationContext"], "fileName": "org.springframework.web.servlet.support.JstlUtils"}, {"methodBody": ["METHOD_START", "{", "Config . set ( requestContext . getRequest (  )  ,    FMT _ LOCALE ,    requestContext . getLocale (  )  )  ;", "TimeZone   timeZone    =    requestContext . getTimeZone (  )  ;", "if    ( timeZone    !  =    null )     {", "Config . set ( requestContext . getRequest (  )  ,    FMT _ TIME _ ZONE ,    timeZone )  ;", "}", "MessageSource   messageSource    =     . getJstlAwareMessageSource ( requestContext . getServletContext (  )  ,    requestContext . getMessageSource (  )  )  ;", "LocalizationContext   jstlContext    =    new    . SpringLocalizationContext ( messageSource ,    requestContext . getRequest (  )  )  ;", "Config . set ( requestContext . getRequest (  )  ,    FMT _ LOCALIZATION _ CONTEXT ,    jstlContext )  ;", "}", "METHOD_END"], "methodName": ["exposeLocalizationContext"], "fileName": "org.springframework.web.servlet.support.JstlUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( servletContext    !  =    null )     {", "String   jstlInitParam    =    servletContext . getInitParameter ( FMT _ LOCALIZATION _ CONTEXT )  ;", "if    ( jstlInitParam    !  =    null )     {", "ResourceBundleMessageSource   jstlBundleWrapper    =    new   ResourceBundleMessageSource (  )  ;", "jstlBundleWrapper . setBasename ( jstlInitParam )  ;", "jstlBundleWrapper . setParentMessageSource ( messageSource )  ;", "return   jstlBundleWrapper ;", "}", "}", "return   messageSource ;", "}", "METHOD_END"], "methodName": ["getJstlAwareMessageSource"], "fileName": "org.springframework.web.servlet.support.JstlUtils"}, {"methodBody": ["METHOD_START", "{", "return   this . mappings ;", "}", "METHOD_END"], "methodName": ["getMappings"], "fileName": "org.springframework.web.servlet.support.MockFilterRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . asyncSupported ;", "}", "METHOD_END"], "methodName": ["isAsyncSupported"], "fileName": "org.springframework.web.servlet.support.MockFilterRegistration"}, {"methodBody": ["METHOD_START", "{", "return   loadOnStartup ;", "}", "METHOD_END"], "methodName": ["getLoadOnStartup"], "fileName": "org.springframework.web.servlet.support.MockServletRegistration"}, {"methodBody": ["METHOD_START", "{", "return   this . asyncSupported ;", "}", "METHOD_END"], "methodName": ["isAsyncSupported"], "fileName": "org.springframework.web.servlet.support.MockServletRegistration"}, {"methodBody": ["METHOD_START", "{", "LocaleResolver   localeResolver    =    RequestContextUtils . getLocaleResolver ( this . request )  ;", "if    ( localeResolver    =  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   change   locale   if   no   LocaleResolver   configured \"  )  ;", "}", "localeResolver . setLocale ( this . request ,    this . response ,    locale )  ;", "this . locale    =    locale ;", "}", "METHOD_END"], "methodName": ["changeLocale"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "LocaleResolver   localeResolver    =    RequestContextUtils . getLocaleResolver ( this . request )  ;", "if    (  !  ( localeResolver   instanceof   LocaleContextResolver )  )     {", "throw   new   IllegalStateException (  \" Cannot   change   locale   context   if   no   LocaleContextResolver   configured \"  )  ;", "}", "(  ( LocaleContextResolver )     ( localeResolver )  )  . setLocaleContext ( this . request ,    this . response ,    new   SimpleTimeZoneAwareLocaleContext ( locale ,    timeZone )  )  ;", "this . locale    =    locale ;", "this . timeZone    =    timeZone ;", "}", "METHOD_END"], "methodName": ["changeLocale"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "ThemeResolver   themeResolver    =    RequestContextUtils . getThemeResolver ( this . request )  ;", "if    ( themeResolver    =  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   change   theme   if   no   ThemeResolver   configured \"  )  ;", "}", "themeResolver . setThemeName ( this . request ,    this . response ,    themeName )  ;", "this . theme    =    null ;", "}", "METHOD_END"], "methodName": ["changeTheme"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "ThemeResolver   themeResolver    =    RequestContextUtils . getThemeResolver ( this . request )  ;", "if    ( themeResolver    =  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   change   theme   if   no   ThemeResolver   configured \"  )  ;", "}", "themeResolver . setThemeName ( this . request ,    this . response ,     ( theme    !  =    null    ?    theme . getName (  )     :    null )  )  ;", "this . theme    =    theme ;", "}", "METHOD_END"], "methodName": ["changeTheme"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   new   BindStatus ( this ,    path ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getBindStatus"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   new   BindStatus ( this ,    path ,    htmlEscape )  ;", "}", "METHOD_END"], "methodName": ["getBindStatus"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper . getOriginatingContextPath ( this . request )  ;", "}", "METHOD_END"], "methodName": ["getContextPath"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   url    =     ( getContextPath (  )  )     +    relativeUrl ;", "if    (  ( this . response )     !  =    null )     {", "url    =    this . response . encodeURL ( url )  ;", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["getContextUrl"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   url    =     ( getContextPath (  )  )     +    relativeUrl ;", "UriTemplate   template    =    new   UriTemplate ( url )  ;", "url    =    template . expand ( params )  . toASCIIString (  )  ;", "if    (  ( this . response )     !  =    null )     {", "url    =    this . response . encodeURL ( url )  ;", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["getContextUrl"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultHtmlEscape ;", "}", "METHOD_END"], "methodName": ["getDefaultHtmlEscape"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getErrors ( name ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . errorsMap )     =  =    null )     {", "this . errorsMap    =    new   HashMap (  )  ;", "}", "Errors   errors    =    this . errorsMap . get ( n )  ;", "boolean   put    =    false ;", "if    ( errors    =  =    null )     {", "errors    =     (  ( Errors )     ( getModelObject (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +    n )  )  )  )  ;", "if    ( errors   instanceof   BindException )     {", "errors    =     (  ( BindException )     ( errors )  )  . getBindingResult (  )  ;", "}", "if    ( errors    =  =    null )     {", "return   null ;", "}", "put    =    true ;", "}", "if    ( htmlEscape    &  &     (  !  ( errors   instanceof   EscapedErrors )  )  )     {", "errors    =    new   EscapedErrors ( errors )  ;", "put    =    true ;", "} else", "if    (  (  ! htmlEscape )     &  &     ( errors   instanceof   EscapedErrors )  )     {", "errors    =     (  ( EscapedErrors )     ( errors )  )  . getSource (  )  ;", "put    =    true ;", "}", "if    ( put )     {", "this . errorsMap . put ( n ,    errors )  ;", "}", "return   errors ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "if    ( RequestContext . jstlPresent )     {", "Locale   locale    =    RequestContext . JstlLocaleResolver . getJstlLocale ( getRequest (  )  ,    getServletContext (  )  )  ;", "if    ( locale    !  =    null )     {", "return   locale ;", "}", "}", "return   getRequest (  )  . getLocale (  )  ;", "}", "METHOD_END"], "methodName": ["getFallbackLocale"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "ThemeSource   themeSource    =    RequestContextUtils . getThemeSource ( getRequest (  )  )  ;", "if    ( themeSource    =  =    null )     {", "themeSource    =    new   ResourceBundleThemeSource (  )  ;", "}", "Theme   theme    =    themeSource . getTheme ( RequestContext . DEFAULT _ THEME _ NAME )  ;", "if    ( theme    =  =    null )     {", "throw   new   IllegalStateException (  \" No   theme   defined   and   no   fallback   theme   found \"  )  ;", "}", "return   theme ;", "}", "METHOD_END"], "methodName": ["getFallbackTheme"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "if    ( RequestContext . jstlPresent )     {", "TimeZone   timeZone    =    RequestContext . JstlLocaleResolver . getJstlTimeZone ( getRequest (  )  ,    getServletContext (  )  )  ;", "if    ( timeZone    !  =    null )     {", "return   timeZone ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getFallbackTimeZone"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return    ( this . locale )     !  =    null    ?    this . locale    :    getFallbackLocale (  )  ;", "}", "METHOD_END"], "methodName": ["getLocale"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,    null ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,    args ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . webApplicationContext . getMessage ( code ,    args ,    getLocale (  )  )  ;", "return   htmlEscape    ?    HtmlUtils . htmlEscape ( msg )     :    msg ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,    args ,    defaultMessage ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . webApplicationContext . getMessage ( code ,    args ,    defaultMessage ,    getLocale (  )  )  ;", "if    ( msg    =  =    null )     {", "return    \"  \"  ;", "}", "return   htmlEscape    ?    HtmlUtils . htmlEscape ( msg )     :    msg ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,    null ,    defaultMessage ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,     ( args    !  =    null    ?    args . toArray (  )     :    null )  ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( code ,     ( args    !  =    null    ?    args . toArray (  )     :    null )  ,    defaultMessage ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getMessage ( resolvable ,    isDefaultHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . webApplicationContext . getMessage ( resolvable ,    getLocale (  )  )  ;", "return   htmlEscape    ?    HtmlUtils . htmlEscape ( msg )     :    msg ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . webApplicationContext ;", "}", "METHOD_END"], "methodName": ["getMessageSource"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . model ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . model )     !  =    null )     {", "return   this . model . get ( modelName )  ;", "} else    {", "return   this . r . getAttribute ( modelName )  ;", "}", "}", "METHOD_END"], "methodName": ["getModelObject"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   path    =    this . urlPathHelper . getOriginatingContextPath ( this . request )  ;", "if    ( StringUtils . hasText ( this . urlPathHelper . getPathWithinServletMapping ( this . request )  )  )     {", "path    +  =    this . urlPathHelper . getOriginatingServletPath ( this . request )  ;", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["getPathToServlet"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper . getOriginatingQueryString ( this . request )  ;", "}", "METHOD_END"], "methodName": ["getQueryString"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . request ;", "}", "METHOD_END"], "methodName": ["getRequest"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . requestDataValueProcessor ;", "}", "METHOD_END"], "methodName": ["getRequestDataValueProcessor"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper . getOriginatingRequestUri ( this . request )  ;", "}", "METHOD_END"], "methodName": ["getRequestUri"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . responseEncodedHtmlEscape ;", "}", "METHOD_END"], "methodName": ["getResponseEncodedHtmlEscape"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . webApplicationContext . getServletContext (  )  ;", "}", "METHOD_END"], "methodName": ["getServletContext"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . theme )     =  =    null )     {", "this . theme    =    Utils . getTheme ( this . request )  ;", "if    (  ( this . theme )     =  =    null )     {", "this . theme    =    getFallbackTheme (  )  ;", "}", "}", "return   this . theme ;", "}", "METHOD_END"], "methodName": ["getTheme"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getTheme (  )  . getMessageSource (  )  . getMessage ( code ,    null ,    getLocale (  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getTheme (  )  . getMessageSource (  )  . getMessage ( code ,    args ,    getLocale (  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    getTheme (  )  . getMessageSource (  )  . getMessage ( code ,    args ,    defaultMessage ,    getLocale (  )  )  ;", "return   msg    !  =    null    ?    msg    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    getTheme (  )  . getMessageSource (  )  . getMessage ( code ,    null ,    defaultMessage ,    getLocale (  )  )  ;", "return   msg    !  =    null    ?    msg    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getTheme (  )  . getMessageSource (  )  . getMessage ( code ,     ( args    !  =    null    ?    args . toArray (  )     :    null )  ,    getLocale (  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    getTheme (  )  . getMessageSource (  )  . getMessage ( code ,     ( args    !  =    null    ?    args . toArray (  )     :    null )  ,    defaultMessage ,    getLocale (  )  )  ;", "return   msg    !  =    null    ?    msg    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   getTheme (  )  . getMessageSource (  )  . getMessage ( resolvable ,    getLocale (  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return    ( this . timeZone )     !  =    null    ?    this . timeZone    :    getFallbackTimeZone (  )  ;", "}", "METHOD_END"], "methodName": ["getTimeZone"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . urlPathHelper ;", "}", "METHOD_END"], "methodName": ["getUrlPathHelper"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . webApplicationContext ;", "}", "METHOD_END"], "methodName": ["getWebApplicationContext"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . defaultHtmlEscape )     !  =    null )     &  &     ( this . defaultHtmlEscape . booleanValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["isDefaultHtmlEscape"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . responseEncodedHtmlEscape )     =  =    null )     |  |     ( this . responseEncodedHtmlEscape . booleanValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["isResponseEncodedHtmlEscape"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "this . defaultHtmlEscape    =    defaultHtmlEscape ;", "}", "METHOD_END"], "methodName": ["setDefaultHtmlEscape"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.support.RequestContext"}, {"methodBody": ["METHOD_START", "{", "GenericWebApplicationContext   applicationContext    =    new   GenericWebApplicationContext (  )  ;", "applicationContext . refresh (  )  ;", "servle . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    applicationContext )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.springframework.web.servlet.support.RequestContextTests"}, {"methodBody": ["METHOD_START", "{", "request . setContextPath (  \" foo /  \"  )  ;", "context    =    new    ( request ,    response ,    servletContext ,    model )  ;", "assertEquals (  \" foo / bar \"  ,    context . getContextUrl (  \" bar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetContextUrl"], "fileName": "org.springframework.web.servlet.support.RequestContextTests"}, {"methodBody": ["METHOD_START", "{", "request . setContextPath (  \" foo /  \"  )  ;", "context    =    new    ( request ,    response ,    servletContext ,    model )  ;", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" foo \"  ,     \" bar \"  )  ;", "map . put (  \" spam \"  ,     \" bucket \"  )  ;", "assertEquals (  \" foo / bar ? spam = bucket \"  ,    context . getContextUrl (  \"  { foo }  ? spam =  { spam }  \"  ,    map )  )  ;", "}", "METHOD_END"], "methodName": ["testGetContextUrlWithMap"], "fileName": "org.springframework.web.servlet.support.RequestContextTests"}, {"methodBody": ["METHOD_START", "{", "request . setContextPath (  \" foo /  \"  )  ;", "context    =    new    ( request ,    response ,    servletContext ,    model )  ;", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" foo \"  ,     \" bar   baz \"  )  ;", "map . put (  \" spam \"  ,     \"  & bucket =  \"  )  ;", "assertEquals (  \" foo / bar %  2  0 baz ? spam =  %  2  6 bucket %  3 D \"  ,    context . getContextUrl (  \"  { foo }  ? spam =  { spam }  \"  ,    map )  )  ;", "}", "METHOD_END"], "methodName": ["testGetContextUrlWithMapEscaping"], "fileName": "org.springframework.web.servlet.support.RequestContextTests"}, {"methodBody": ["METHOD_START", "{", "request . setContextPath (  \"  / app \"  )  ;", "request . setServletPath (  \"  / servlet \"  )  ;", "context    =    new    ( request ,    response ,    servletContext ,    model )  ;", "assertEquals (  \"  / app / servlet \"  ,    context . getPathToServlet (  )  )  ;", "request . setAttribute ( FORWARD _ CONTEXT _ PATH _ ATTRIBUTE ,     \"  / origApp \"  )  ;", "request . setAttribute ( FORWARD _ SERVLET _ PATH _ ATTRIBUTE ,     \"  / origServlet \"  )  ;", "assertEquals (  \"  / origApp / origServlet \"  ,    context . getPathToServlet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testPathToServlet"], "fileName": "org.springframework.web.servlet.support.RequestContextTests"}, {"methodBody": ["METHOD_START", "{", "return   RequestContextUtils . findWebApplicationContext ( request ,    request . getServletContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["findWebApplicationContext"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   webApplicationContext    =     (  ( WebApplicationContext )     ( request . getAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  )  ;", "if    ( webApplicationContext    =  =    null )     {", "if    ( servletContext    !  =    null )     {", "webApplicationContext    =    WebApplication . getWebApplicationContext ( servletContext )  ;", "}", "if    ( webApplicationContext    =  =    null )     {", "webApplicationContext    =    ContextLoader . getCurrentWebApplicationContext (  )  ;", "}", "}", "return   webApplicationContext ;", "}", "METHOD_END"], "methodName": ["findWebApplicationContext"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( FlashMapManager )     ( request . getAttribute ( DispatcherServlet . FLASH _ MAP _ MANAGER _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getFlashMapManager"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Map < String ,     ?  >  )     ( request . getAttribute ( DispatcherServlet . INPUT _ FLASH _ MAP _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getInputFlashMap"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "LocaleResolver   localeResolver    =    RequestContextUtils . getLocaleResolver ( request )  ;", "return   localeResolver    !  =    null    ?    localeResolver . resolveLocale ( request )     :    request . getLocale (  )  ;", "}", "METHOD_END"], "methodName": ["getLocale"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( LocaleResolver )     ( request . getAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getLocaleResolver"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( FlashMap )     ( request . getAttribute ( DispatcherServlet . OUTPUT _ FLASH _ MAP _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getOutputFlashMap"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "ThemeResolver   themeResolver    =    RequestContextUtils . getThemeResolver ( request )  ;", "ThemeSource   themeSource    =    RequestContextUtils . getThemeSource ( request )  ;", "if    (  ( themeResolver    !  =    null )     &  &     ( themeSource    !  =    null )  )     {", "String   themeName    =    themeResolver . resolveThemeName ( request )  ;", "return   themeSource . getTheme ( themeName )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getTheme"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ThemeResolver )     ( request . getAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeResolver"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ThemeSource )     ( request . getAttribute ( DispatcherServlet . THEME _ SOURCE _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getThemeSource"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "LocaleResolver   localeResolver    =    RequestContextUtils . getLocaleResolver ( request )  ;", "if    ( localeResolver   instanceof   LocaleContextResolver )     {", "LocaleContext   localeContext    =     (  ( LocaleContextResolver )     ( localeResolver )  )  . resolveLocaleContext ( request )  ;", "if    ( localeContext   instanceof   TimeZoneAwareLocaleContext )     {", "return    (  ( TimeZoneAwareLocaleContext )     ( localeContext )  )  . getTimeZone (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getTimeZone"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "FlashMap   flashMap    =    RequestContextUtils . getOutputFlashMap ( request )  ;", "if    ( CollectionUtils . isEmpty ( flashMap )  )     {", "return ;", "}", "UriComponents   uriComponents    =    UriComponentsBuilder . fromUriString ( location )  . build (  )  ;", "flashMap . setTargetRequestPath ( uriComponents . getPath (  )  )  ;", "flashMap . addTargetRequestParams ( uriComponents . getQueryParams (  )  )  ;", "FlashMapManager   manager    =    RequestContextUtils . getFlashMapManager ( request )  ;", "Assert . state (  ( manager    !  =    null )  ,     \" No   FlashMapManager .    Is   this   a   DispatcherServlet   handled   request ?  \"  )  ;", "manager . saveOutputFlashMap ( flashMap ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["saveOutputFlashMap"], "fileName": "org.springframework.web.servlet.support.RequestContextUtils"}, {"methodBody": ["METHOD_START", "{", "this . processor    =    processor ;", "}", "METHOD_END"], "methodName": ["setRequestDataValueProcessor"], "fileName": "org.springframework.web.servlet.support.RequestDataValueProcessorWrapper"}, {"methodBody": ["METHOD_START", "{", "ServletUriComponentsBuilder   builder    =    ServletUriComponentsBuilder . initFromRequest ( request )  ;", "String   forwardedPrefix    =    ServletUriComponentsBuilder . getForwardedPrefix ( request )  ;", "builder . replacePath (  ( forwardedPrefix    !  =    null    ?    forwardedPrefix    :    request . getContextPath (  )  )  )  ;", "return   builder ;", "}", "METHOD_END"], "methodName": ["fromContextPath"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   ServletUriComponentsBuilder . fromContextPath ( ServletUriComponentsBuilder . getCurrentRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromCurrentContextPath"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   ServletUriComponentsBuilder . fromRequest ( ServletUriComponentsBuilder . getCurrentRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromCurrentRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   ServletUriComponentsBuilder . fromRequestUri ( ServletUriComponentsBuilder . getCurrentRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromCurrentRequestUri"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   ServletUriComponentsBuilder . fromServletMapping ( ServletUriComponentsBuilder . getCurrentRequest (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromCurrentServletMapping"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "ServletUriComponentsBuilder   builder    =    ServletUriComponentsBuilder . initFromRequest ( request )  ;", "builder . initPath ( ServletUriComponentsBuilder . getRequestUriWithForwardedPrefix ( request )  )  ;", "builder . query ( request . getQueryString (  )  )  ;", "return   builder ;", "}", "METHOD_END"], "methodName": ["fromRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "ServletUriComponentsBuilder   builder    =    ServletUriComponentsBuilder . initFromRequest ( request )  ;", "builder . initPath ( ServletUriComponentsBuilder . getRequestUriWithForwardedPrefix ( request )  )  ;", "return   builder ;", "}", "METHOD_END"], "methodName": ["fromRequestUri"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "ServletUriComponentsBuilder   builder    =    ServletUriComponentsBuilder . fromContextPath ( request )  ;", "if    ( StringUtils . hasText ( new   UrlPathHelper (  )  . getPathWithinServletMapping ( request )  )  )     {", "builder . path ( request . getServletPath (  )  )  ;", "}", "return   builder ;", "}", "METHOD_END"], "methodName": ["fromServletMapping"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "RequestAttributes   attrs    =    RequestContextHolder . getRequestAttributes (  )  ;", "Assert . state (  ( attrs   instanceof   RequestAttributes )  ,     \" No   current   RequestAttributes \"  )  ;", "return    (  ( RequestAttributes )     ( attrs )  )  . getRequest (  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =    null ;", "Enumeration < String >    names    =    request . getHeaderNames (  )  ;", "while    ( names . hasMoreElements (  )  )     {", "String   name    =    names . nextElement (  )  ;", "if    (  \" X - Forwarded - Prefix \"  . equalsIgnoreCase ( name )  )     {", "prefix    =    request . getHeader ( name )  ;", "}", "}", "if    ( prefix    !  =    null )     {", "while    ( prefix . endsWith (  \"  /  \"  )  )     {", "prefix    =    prefix . substring (  0  ,     (  ( prefix . length (  )  )     -     1  )  )  ;", "}", "}", "return   prefix ;", "}", "METHOD_END"], "methodName": ["getForwardedPrefix"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "String   path    =    request . getRequestURI (  )  ;", "String   forwardedPrefix    =     . getForwardedPrefix ( request )  ;", "if    ( forwardedPrefix    !  =    null )     {", "String   contextPath    =    request . getContextPath (  )  ;", "if    (  (  (  !  ( StringUtils . isEmpty ( contextPath )  )  )     &  &     (  !  ( contextPath . equals (  \"  /  \"  )  )  )  )     &  &     ( path . startsWith ( contextPath )  )  )     {", "path    =    path . substring ( contextPath . length (  )  )  ;", "}", "path    =    forwardedPrefix    +    path ;", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["getRequestUriWithForwardedPrefix"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "HttpRequest   httpRequest    =    new   ServletServerHttpRequest ( request )  ;", "UriComponents   uriComponents    =    UriComponentsBuilder . fromHttpRequest ( httpRequest )  . build (  )  ;", "String   scheme    =    uriComponents . getScheme (  )  ;", "String   host    =    uriComponents . getHost (  )  ;", "int   port    =    uriComponents . getPort (  )  ;", "builder    =    new    (  )  ;", "builder . scheme ( scheme )  ;", "builder . host ( host )  ;", "if    (  (  (  \" http \"  . equals ( scheme )  )     &  &     ( port    !  =     8  0  )  )     |  |     (  (  \" https \"  . equals ( scheme )  )     &  &     ( port    !  =     4  4  3  )  )  )     {", "builder . port ( port )  ;", "}", "return   builder ;", "}", "METHOD_END"], "methodName": ["initFromRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "this . originalPath    =    path ;", "replacePath ( path )  ;", "}", "METHOD_END"], "methodName": ["initPath"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "String   extension    =    null ;", "if    (  ( this . originalPath )     !  =    null )     {", "extension    =    UriUtils . extractFileExtension ( this . originalPath )  ;", "if    (  !  ( StringUtils . isEmpty ( extension )  )  )     {", "int   end    =     ( this . originalPath . length (  )  )     -     (  ( extension . length (  )  )     +     1  )  ;", "replacePath ( this . originalPath . substring (  0  ,    end )  )  ;", "}", "this . originalPath    =    null ;", "}", "return   extension ;", "}", "METHOD_END"], "methodName": ["removePathExtension"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilder"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / data / param \"  )  ;", "this . request . setQueryString (  \" foo =  1  2  3  \"  )  ;", "String   result    =     . fromContextPath ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromContextPath"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Prefix \"  ,     \"  / prefix \"  )  ;", "this . request . setContextPath (  \"  / mvc - showcase \"  )  ;", "this . request . setRequestURI (  \"  / mvc - showcase / simple \"  )  ;", "String   result    =     . fromContextPath ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / prefix \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromContextPathWithForwardedPrefix"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / data / param \"  )  ;", "this . request . setQueryString (  \" foo =  1  2  3  \"  )  ;", "RequestContextHolder . setRequestAttributes ( new   ServletRequestAttributes ( this . request )  )  ;", "try    {", "String   result    =     . fromCurrentRequest (  )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase / data / param ? foo =  1  2  3  \"  ,    result )  ;", "}    finally    {", "RequestContextHolder . resetRequestAttributes (  )  ;", "}", "}", "METHOD_END"], "methodName": ["fromCurrentRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / data / param \"  )  ;", "this . request . setQueryString (  \" foo =  1  2  3  \"  )  ;", "String   result    =     . fromRequest ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase / data / param ? foo =  1  2  3  \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromRequest"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setServerPort (  8  0  8  0  )  ;", "String   result    =     . fromRequest ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost :  8  0  8  0  / mvc - showcase \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromRequestAtypicalHttpPort"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setScheme (  \" https \"  )  ;", "this . request . setServerPort (  9  0  4  3  )  ;", "String   result    =     . fromRequest ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" https :  /  / localhost :  9  0  4  3  / mvc - showcase \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromRequestAtypicalHttpsPort"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / data / foo %  2  0 bar \"  )  ;", "String   result    =     . fromRequest ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase / data / foo %  2  0 bar \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromRequestEncodedPath"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / data / param \"  )  ;", "this . request . setQueryString (  \" foo =  1  2  3  \"  )  ;", "String   result    =     . fromRequestUri ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase / data / param \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromRequestUri"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setScheme (  \" http \"  )  ;", "request . setServerName (  \" localhost \"  )  ;", "request . setServerPort (  8  0  )  ;", "request . setRequestURI (  \"  / mvc - showcase \"  )  ;", "request . addHeader (  \" X - Forwarded - Proto \"  ,     \" https \"  )  ;", "request . addHeader (  \" X - Forwarded - Host \"  ,     \"  8  4  .  1  9  8  .  5  8  .  1  9  9  \"  )  ;", "request . addHeader (  \" X - Forwarded - Port \"  ,     \"  4  4  3  \"  )  ;", "UriComponents   result    =     . fromRequest ( request )  . build (  )  ;", "assertEquals (  \" https :  /  /  8  4  .  1  9  8  .  5  8  .  1  9  9  / mvc - showcase \"  ,    result . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRequestWithForwardedHostAndPort"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Prefix \"  ,     \"  / prefix \"  )  ;", "this . request . setContextPath (  \"  / mvc - showcase \"  )  ;", "this . request . setRequestURI (  \"  / mvc - showcase / bar \"  )  ;", "UriComponents   result    =     . fromRequest ( this . request )  . build (  )  ;", "assertEquals (  \" http :  /  / localhost / prefix / bar \"  ,    result . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRequestWithForwardedPrefix"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Prefix \"  ,     \"  /  \"  )  ;", "this . request . setContextPath (  \"  / mvc - showcase \"  )  ;", "this . request . setRequestURI (  \"  / mvc - showcase / bar \"  )  ;", "UriComponents   result    =     . fromRequest ( this . request )  . build (  )  ;", "assertEquals (  \" http :  /  / localhost / bar \"  ,    result . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRequestWithForwardedPrefixRoot"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Prefix \"  ,     \"  / foo /  \"  )  ;", "this . request . setContextPath (  \"  / spring - mvc - showcase \"  )  ;", "this . request . setRequestURI (  \"  / spring - mvc - showcase / bar \"  )  ;", "UriComponents   result    =     . fromRequest ( this . request )  . build (  )  ;", "assertEquals (  \" http :  /  / localhost / foo / bar \"  ,    result . toUriString (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRequestWithForwardedPrefixTrailingSlash"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / mvc - showcase / app / simple \"  )  ;", "this . request . setServletPath (  \"  / app \"  )  ;", "this . request . setQueryString (  \" foo =  1  2  3  \"  )  ;", "String   result    =     . fromServletMapping ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / mvc - showcase / app \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromServletMapping"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . addHeader (  \" X - Forwarded - Prefix \"  ,     \"  / prefix \"  )  ;", "this . request . setContextPath (  \"  / mvc - showcase \"  )  ;", "this . request . setServletPath (  \"  / app \"  )  ;", "this . request . setRequestURI (  \"  / mvc - showcase / app / simple \"  )  ;", "String   result    =     . fromServletMapping ( this . request )  . build (  )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / prefix / app \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["fromServletMappingWithForwardedPrefix"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / rest / books /  6  . json \"  )  ;", "builder    =     . fromRequestUri ( this . request )  ;", "String   extension    =    builder . removePathExtension (  )  ;", "String   result    =    builder . path (  \"  / pages /  1  .  { ext }  \"  )  . buildAndExpand ( extension )  . toUriString (  )  ;", "assertEquals (  \" http :  /  / localhost / rest / books /  6  / pages /  1  . json \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["pathExtension"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / rest / books /  6  \"  )  ;", "builder    =     . fromRequestUri ( this . request )  ;", "assertNull ( builder . removePathExtension (  )  )  ;", "}", "METHOD_END"], "methodName": ["pathExtensionNone"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . request . setScheme (  \" http \"  )  ;", "this . request . setServerName (  \" localhost \"  )  ;", "this . request . setServerPort (  (  -  1  )  )  ;", "this . request . setRequestURI (  \"  / mvc - showcase \"  )  ;", "this . request . setContextPath (  \"  / mvc - showcase \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.support.ServletUriComponentsBuilderTests"}, {"methodBody": ["METHOD_START", "{", "String   ccValue    =    cacheControl . getHeaderValue (  )  ;", "if    ( ccValue    !  =    null )     {", "response . setHeader (  . HEADER _ CACHE _ CONTROL ,    ccValue )  ;", "if    ( response . containsHeader (  . HEADER _ PRAGMA )  )     {", "response . setHeader (  . HEADER _ PRAGMA ,     \"  \"  )  ;", "}", "if    ( response . containsHeader (  . HEADER _ EXPIRES )  )     {", "response . setHeader (  . HEADER _ EXPIRES ,     \"  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["applyCacheControl"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . useExpiresHeader )     |  |     (  !  ( this . useCacheControlHeader )  )  )     {", "if    ( cacheSeconds    >     0  )     {", "cacheForSeconds ( response ,    cacheSeconds )  ;", "} else", "if    ( cacheSeconds    =  =     0  )     {", "preventCaching ( response )  ;", "}", "} else    {", "CacheControl   cControl ;", "if    ( cacheSeconds    >     0  )     {", "cControl    =    CacheControl . maxAge ( cacheSeconds ,    TimeUnit . SECONDS )  ;", "if    ( this . alwaysMustRevalidate )     {", "cControl    =    cControl . mustRevalidate (  )  ;", "}", "} else", "if    ( cacheSeconds    =  =     0  )     {", "cControl    =     ( this . useCacheControlNoStore )     ?    CacheControl . noStore (  )     :    CacheControl . noCache (  )  ;", "} else    {", "cControl    =    CacheControl . empty (  )  ;", "}", "applyCacheControl ( response ,    cControl )  ;", "}", "}", "METHOD_END"], "methodName": ["applyCacheSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( cacheSeconds    >     0  )     {", "cacheForSeconds ( response ,    cacheSeconds ,    mustRevalidate )  ;", "} else", "if    ( cacheSeconds    =  =     0  )     {", "prevCaching ( response )  ;", "}", "}", "METHOD_END"], "methodName": ["applyCacheSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "cacheForSeconds ( response ,    seconds ,    false )  ;", "}", "METHOD_END"], "methodName": ["cacheForSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( this . useExpiresHeader )     {", "response . setDateHeader (  . HEADER _ EXPIRES ,     (  ( System . currentTimeMillis (  )  )     +     ( seconds    *     1  0  0  0 L )  )  )  ;", "} else", "if    ( response . containsHeader (  . HEADER _ EXPIRES )  )     {", "response . setHeader (  . HEADER _ EXPIRES ,     \"  \"  )  ;", "}", "if    ( this . useCacheControlHeader )     {", "String   headerValue    =     \" max - age =  \"     +    seconds ;", "if    ( mustRevalidate    |  |     ( this . alwaysMustRevalidate )  )     {", "headerValue    +  =     \"  ,    must - revalidate \"  ;", "}", "response . setHeader (  . HEADER _ CACHE _ CONTROL ,    headerValue )  ;", "}", "if    ( response . containsHeader (  . HEADER _ PRAGMA )  )     {", "response . setHeader (  . HEADER _ PRAGMA ,     \"  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["cacheForSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "checkRequest ( request )  ;", "epareResponse ( response )  ;", "}", "METHOD_END"], "methodName": ["checkAndPrepare"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "checkRequest ( request )  ;", "alyCacheSeconds ( response ,    cacheSeconds )  ;", "}", "METHOD_END"], "methodName": ["checkAndPrepare"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "String   method    =    request . getMethod (  )  ;", "if    (  (  ( thisedMethods )     !  =    null )     &  &     (  !  ( thisedMethods . contains ( method )  )  )  )     {", "throw   new   HttpRequestMethodNotSupportedException ( method ,    thisedMethods )  ;", "}", "if    (  ( this . requireSession )     &  &     (  ( request . getSession ( false )  )     =  =    null )  )     {", "throw   new   HttpSessionRequiredException (  \" Pre - existing   session   required   but   none   found \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkRequest"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . allowHeader ;", "}", "METHOD_END"], "methodName": ["getAllowHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . cacheControl ;", "}", "METHOD_END"], "methodName": ["getCacheControl"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . cacheSeconds ;", "}", "METHOD_END"], "methodName": ["getCacheSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return    ( this . supportedMethods )     !  =    null    ?    StringUtils . toStringArray ( this . supportedMethods )     :    null ;", "}", "METHOD_END"], "methodName": ["getSupportedMethods"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . varyByRequestHeaders ;", "}", "METHOD_END"], "methodName": ["getVaryByRequestHeaders"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( response . containsHeader ( VARY )  )  )     {", "return   Arrays . asList ( varyByRequestHeaders )  ;", "}", "Collection < St >    result    =    new   ArrayList <  >  ( varyByRequestHeaders . length )  ;", "Collections . addAll ( result ,    varyByRequestHeaders )  ;", "for    ( St   header    :    response . getHeaders ( VARY )  )     {", "for    ( St   existing    :    StUtils . tokenizeToStArray ( header ,     \"  ,  \"  )  )     {", "if    (  \"  *  \"  . equals ( existing )  )     {", "return   Collections . emptyList (  )  ;", "}", "for    ( St   value    :    varyByRequestHeaders )     {", "if    ( value . equalsIgnoreCase ( existing )  )     {", "result . remove ( value )  ;", "}", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getVaryRequestHeadersToAdd"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "Collection < String >    allowedMethods ;", "if    (  ( thisedMethods )     =  =    null )     {", "allowedMethods    =    new   ArrayList (  (  ( HttpMethod . values (  )  . length )     -     1  )  )  ;", "for    ( HttpMethod   method    :    HttpMethod . values (  )  )     {", "if    ( method    !  =     ( HttpMethod . TRACE )  )     {", "allowedMethods . add ( method . name (  )  )  ;", "}", "}", "} else", "if    ( thisedMethods . contains ( HttpMethod . OPTIONS . name (  )  )  )     {", "allowedMethods    =    thisedMethods ;", "} else    {", "allowedMethods    =    new   ArrayList <  >  ( thisedMethods )  ;", "allowedMethods . add ( HttpMethod . OPTIONS . name (  )  )  ;", "}", "this . allowHeader    =    StringUtils . collectionToCommaDelimitedString ( allowedMethods )  ;", "}", "METHOD_END"], "methodName": ["initAllowHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . alwaysMustRevalidate ;", "}", "METHOD_END"], "methodName": ["isAlwaysMustRevalidate"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . requireSession ;", "}", "METHOD_END"], "methodName": ["isRequireSession"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . useCacheControlHeader ;", "}", "METHOD_END"], "methodName": ["isUseCacheControlHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . useCacheControlNoStore ;", "}", "METHOD_END"], "methodName": ["isUseCacheControlNoStore"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "return   this . useExpiresHeader ;", "}", "METHOD_END"], "methodName": ["isUseExpiresHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . cacheControl )     !  =    null )     {", "applyCacheControl ( response ,    this . cacheControl )  ;", "} else    {", "applyCacheSeconds ( response ,    this . cacheSeconds )  ;", "}", "if    (  ( this . varyByRequestHeaders )     !  =    null )     {", "for    ( String   value    :    getVaryRequestHeadersToAdd ( response ,    this . varyByRequestHeaders )  )     {", "response . addHeader (  \" Vary \"  ,    value )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["prepareResponse"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "response . setHeader ( WebContentGenerator . HEADER _ PRAGMA ,     \" no - cache \"  )  ;", "if    ( this . useExpiresHeader )     {", "response . setDateHeader ( WebContentGenerator . HEADER _ EXPIRES ,     1 L )  ;", "}", "if    ( this . useCacheControlHeader )     {", "response . setHeader ( WebContentGenerator . HEADER _ CACHE _ CONTROL ,     \" no - cache \"  )  ;", "if    ( this . useCacheControlNoStore )     {", "response . addHeader ( WebContentGenerator . HEADER _ CACHE _ CONTROL ,     \" no - store \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["preventCaching"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . alwaysMustRevalidate    =    mustRevalidate ;", "}", "METHOD_END"], "methodName": ["setAlwaysMustRevalidate"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . cacheControl    =    cacheControl ;", "}", "METHOD_END"], "methodName": ["setCacheControl"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . cacheSeconds    =    seconds ;", "}", "METHOD_END"], "methodName": ["setCacheSeconds"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . requireSession    =    requireSession ;", "}", "METHOD_END"], "methodName": ["setRequireSession"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( ObjectUtils . isEmpty ( methods )  )  )     {", "thisedMethods    =    new   LinkedHashSet <  >  ( Arrays . asList ( methods )  )  ;", "} else    {", "thisedMethods    =    null ;", "}", "initAllowHeader (  )  ;", "}", "METHOD_END"], "methodName": ["setSupportedMethods"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . useCacheControlHeader    =    useCacheControlHeader ;", "}", "METHOD_END"], "methodName": ["setUseCacheControlHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . useCacheControlNoStore    =    useCacheControlNoStore ;", "}", "METHOD_END"], "methodName": ["setUseCacheControlNoStore"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . useExpiresHeader    =    useExpiresHeader ;", "}", "METHOD_END"], "methodName": ["setUseExpiresHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "this . varyByRequestHeaders    =    varyByRequestHeaders ;", "}", "METHOD_END"], "methodName": ["setVaryByRequestHeaders"], "fileName": "org.springframework.web.servlet.support.WebContentGenerator"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator ( false )  ;", "assertEquals (  \" GET , HEAD , POST , PUT , PATCH , DELETE , OPTIONS \"  ,    generator . getAllowHeader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllowHeaderWithConstructorFalse"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator ( true )  ;", "assertEquals (  \" GET , HEAD , POST , OPTIONS \"  ,    generator . getAllowHeader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllowHeaderWithConstructorTrue"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator (  \" POST \"  )  ;", "assertEquals (  \" POST , OPTIONS \"  ,    generator . getAllowHeader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllowHeaderWithSupportedMethodsConstructor"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator (  )  ;", "generator . setSupportedMethods (  \" POST \"  )  ;", "assertEquals (  \" POST , OPTIONS \"  ,    generator . getAllowHeader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllowHeaderWithSupportedMethodsSetter"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator (  )  ;", "generator . setSupportedMethods (  )  ;", "assertEquals (  \" Effectively    \\  \" no   restriction \\  \"    on   supported   methods \"  ,     \" GET , HEAD , POST , PUT , PATCH , DELETE , OPTIONS \"  ,    generator . getAllowHeader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllowHeaderWithSupportedMethodsSetterEmpty"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator (  )  ;", "generator . setVaryByRequestHeaders ( configuredValues )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "for    ( String   value    :    responseValues )     {", "response . addHeader (  \" Vary \"  ,    value )  ;", "}", "generator . prepareResponse ( response )  ;", "assertEquals ( Arrays . asList ( expected )  ,    response . getHeaderValues (  \" Vary \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testVaryHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    configuredValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    responseValues    =    new   String [  ]  {        }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( configuredValues ,    responseValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeader"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "WebContentGenerator   generator    =    new   WebContentGeneratorTests . TestWebContentGenerator (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "generator . prepareResponse ( response )  ;", "assertNull ( response . getHeader (  \" Vary \"  )  )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderNone"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    configuredValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    responseValues    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Encoding ,    Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( configuredValues ,    responseValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingCommaSeparatedValues"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    configuredValues    =    new   String [  ]  {     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "String [  ]    responseValues    =    new   String [  ]  {     \" Accept - Encoding \"  ,     \" Accept - Language \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \" Accept - Encoding \"  ,     \" Accept - Language \"  ,     \" User - Agent \"     }  ;", "testVaryHeader ( configuredValues ,    responseValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingCommaValues"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    configuredValues    =    new   String [  ]  {     \" Accept - Language \"     }  ;", "String [  ]    responseValues    =    new   String [  ]  {     \"  *  \"     }  ;", "String [  ]    expected    =    new   String [  ]  {     \"  *  \"     }  ;", "testVaryHeader ( configuredValues ,    responseValues ,    expected )  ;", "}", "METHOD_END"], "methodName": ["varyHeaderWithExistingWildcard"], "fileName": "org.springframework.web.servlet.support.WebContentGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "SimpleWebApplicationContext   wac    =    new   SimpleWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . setNamespace (  \" test \"  )  ;", "wac . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "if    ( inDispatcherServlet (  )  )     {", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "LocaleResolver   lr    =    new   AcceptHeaderLocaleResolver (  )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    lr )  ;", "ThemeResolver   tr    =    new   FixedThemeResolver (  )  ;", "request . setAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE ,    tr )  ;", "request . setAttribute ( DispatcherServlet . THEME _ SOURCE _ ATTRIBUTE ,    wac )  ;", "} else    {", "sc . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "}", "return   new   mock . web . test . MockPageContext ( sc ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["createPageContext"], "fileName": "org.springframework.web.servlet.tags.AbstractTagTests"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["inDispatcherServlet"], "fileName": "org.springframework.web.servlet.tags.AbstractTagTests"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "this . valueSet    =    true ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTag"}, {"methodBody": ["METHOD_START", "{", "tag . setBodyContent ( new   MockBodyContent (  \" value 2  \"  ,    new   MockHttpServletResponse (  )  )  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value 2  \"  ,    parent . getArgument (  )  )  ;", "}", "METHOD_END"], "methodName": ["argumentWithBodyValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue ( null )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertNull ( parent . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["argumentWithExplicitNullValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertNull ( parent . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["argumentWithImplicitNullValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" value 1  \"  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value 1  \"  ,    parent . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["argumentWithStringValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" value 3  \"  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value 3  \"  ,    parent . getArgument (  )  )  ;", "tag . release (  )  ;", "parent    =    new   ArgumentTagTests . MockArgumentSupportTag (  )  ;", "tag . setPageContext ( createPageContext (  )  )  ;", "tag . setParent ( parent )  ;", "tag . setBodyContent ( new   mock . web . test . MockBodyContent (  \" value 4  \"  ,    new   MockHttpServletResponse (  )  )  )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value 4  \"  ,    parent . getArgument (  )  )  ;", "}", "METHOD_END"], "methodName": ["argumentWithValueThenReleaseThenBodyValue"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   context    =    createPageContext (  )  ;", "parent    =    new    . MockArgumentSupportTag (  )  ;", "tag    =    new   ArgumentTag (  )  ;", "tag . setPageContext ( context )  ;", "tag . setParent ( parent )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.tags.ArgumentTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . errors ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.springframework.web.servlet.tags.BindErrorsTag"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.tags.BindErrorsTag"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.BindErrorsTag"}, {"methodBody": ["METHOD_START", "{", "return   getStatus (  )  . getErrors (  )  ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "return   this . path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "return   getStatus (  )  . getExpression (  )  ;", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . status )     !  =    null )  ,     \" No   current   BindStatus \"  )  ;", "return   this . status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "return   this . ignoreNestedPath ;", "}", "METHOD_END"], "methodName": ["isIgnoreNestedPath"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "this . ignoreNestedPath    =    ignoreNestedPath ;", "}", "METHOD_END"], "methodName": ["setIgnoreNestedPath"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "this . path    =    path ;", "}", "METHOD_END"], "methodName": ["setPath"], "fileName": "org.springframework.web.servlet.tags.BindTag"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject (  \" test \"  ,    null ,     \" test \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindErrorsTag   tag    =    new   BindErrorsTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setName (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Has   errors   variable \"  ,     (  ( pc . getAttribute ( BindErrorsTag . ERRORS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )     =  =    errors )  )  ;", "}", "METHOD_END"], "methodName": ["bindErrorsTagWithErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "ErrorsTag   tag    =    new   ErrorsTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setName (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . SKIP _ BODY )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindErrorsTagWithoutBean"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindErrorsTag   tag    =    new   BindErrorsTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setName (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . SKIP _ BODY )  )  )  ;", "assertTrue (  \" Doesn ' t   have   errors   variable \"  ,     (  ( pc . getAttribute ( BindErrorsTag . ERRORS _ VARIABLE _ NAME )  )     =  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["bindErrorsTagWithoutErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject (  \" code 1  \"  ,    null ,     \" message 1  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" Error   messages   String   should   be    ' message 1  '  \"  ,     \" message 1  \"  ,    status . getErrorMessagesAsString (  \"  ,  \"  )  )  ;", "pc    =    createPageContext (  )  ;", "errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject (  \" code 1  \"  ,    null ,     \" message 1  \"  )  ;", "errors . reject (  \" code 1  \"  ,    null ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "tag . doStartTag (  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" Error   messages   String   should   be    ' message 1  , message 2  '  \"  ,     \" message 1  , message 2  \"  ,    status . getErrorMessagesAsString (  \"  ,  \"  )  )  ;", "pc    =    createPageContext (  )  ;", "errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "tag . doStartTag (  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" Error   messages   String   should   be    '  '  \"  ,     \"  \"  ,    status . getErrorMessagesAsString (  \"  ,  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["bindStatusGetErrorMessagesAsString"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "pc . getRequest (  )  . setAttribute (  \" tb \"  ,    new   TestBean (  \" juergen \"  ,     9  9  )  )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute (  . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertNull ( status . getExpression (  )  )  ;", "assertNull ( status . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithBeanButWithoutErrorsInstance"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "pc . getRequest (  )  . setAttribute (  \" tb \"  ,    new   TestBean (  \" juergen & eva \"  ,     9  9  )  )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute (  . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" name \"  ,    status . getExpression (  )  )  ;", "assertEquals (  \" juergen & eva \"  ,    status . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithFieldButWithoutErrorsInstance"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "tag . setHtmlEscape ( true )  ;", "pc . getRequest (  )  . setAttribute (  \" tb \"  ,    new   TestBean (  \" juergen & eva \"  ,     9  9  )  )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute (  . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" name \"  ,    status . getExpression (  )  )  ;", "assertEquals (  \" juergen & amp ; eva \"  ,    status . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithFieldButWithoutErrorsInstanceAndHtmlEscaping"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "tb . setName (  \" name 1  \"  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 1  \"  ,     \" message    &     1  \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 2  \"  ,     \" message 2  \"  )  ;", "errors . rejectValue (  \" age \"  ,     \" code 2  \"  ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "tag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" name \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 1  \"  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \" name 1  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    & amp ;     1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    & amp ;     1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message    & amp ;     1     -    message 2  \"  . equals ( status . getErrorMessagesAsString (  \"     -     \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . age \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" age \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,    new   Integer (  0  )  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  0  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 2  \"  . equals ( status . getErrorMessagesAsString (  \"     -     \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     3  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     3  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  2  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    &     1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    &     1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  2  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithFieldErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "tb . setName (  \" name 1  \"  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" name \"  ,    null ,     \" message    &     1  \"  )  ;", "errors . rejectValue (  \" name \"  ,    null ,     \" message 2  \"  )  ;", "errors . rejectValue (  \" age \"  ,    null ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "tag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" name \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 1  \"  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \" name 1  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    & amp ;     1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    & amp ;     1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message    & amp ;     1     -    message 2  \"  . equals ( status . getErrorMessagesAsString (  \"     -     \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . age \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" age \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,    new   Integer (  0  )  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  0  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 2  \"  . equals ( status . getErrorMessagesAsString (  \"     -     \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     3  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    &     1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message    &     1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  2  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithFieldErrorsAndDefaultMessageOnly"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "tb . setName (  \" name 1  \"  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 1  \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 2  \"  )  ;", "errors . rejectValue (  \" age \"  ,     \" code 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "tag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" name \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 1  \"  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \" name 1  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . age \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" age \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,    new   Integer (  0  )  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  0  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCode (  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     3  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  2  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithFieldErrorsAndNoDefaultMessage"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject (  \" code 1  \"  ,     \" message 1  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     (  ( status . getExpression (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 1  \"  . equals ( status . getErrorMessagesAsString (  \"  ,  \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 1  \"  . equals ( status . getErrorMessagesAsString (  \"  ,  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithGlobalErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject ( null ,     \" message 1  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     (  ( status . getExpression (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 1  \"  . equals ( status . getErrorMessagesAsString (  \"  ,  \"  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 1  \"  . equals ( status . getErrorMessagesAsString (  \"  ,  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithGlobalErrorsAndDefaultMessageOnly"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . reject (  \" code 1  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     (  ( status . getExpression (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb .  *  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \"  *  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithGlobalErrorsAndNoDefaultMessage"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "IndexedTestBean   tb    =    new   IndexedTestBean (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" array [  0  ]  \"  ,     \" code 1  \"  ,     \" message 1  \"  )  ;", "errors . rejectValue (  \" array [  0  ]  \"  ,     \" code 2  \"  ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . array [  0  ]  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" array [  0  ]  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Value   is   TestBean \"  ,     (  ( status . getValue (  )  )    instanceof   TestBean )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 0  \"  . equals (  (  ( TestBean )     ( status . getValue (  )  )  )  . getName (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithIndexedProperties"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "IndexedTestBean   tb    =    new   IndexedTestBean (  )  ;", "DataBinder   binder    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "binder . registerCustomEditor ( TestBean . class ,    null ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   String   getAsText (  )     {", "return    \" something \"  ;", "}", "}  )  ;", "Errors   errors    =    binder . getBindingResult (  )  ;", "errors . rejectValue (  \" array [  0  ]  \"  ,     \" code 1  \"  ,     \" message 1  \"  )  ;", "errors . rejectValue (  \" array [  0  ]  \"  ,     \" code 2  \"  ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . array [  0  ]  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" array [  0  ]  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Value   is   TestBean \"  ,     (  ( status . getValue (  )  )    instanceof   String )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" something \"  . equals ( status . getValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithIndexedPropertiesAndCustomEditor"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "IndexedTestBean   tb    =    new   IndexedTestBean (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" map [ key 1  ]  \"  ,     \" code 1  \"  ,     \" message 1  \"  )  ;", "errors . rejectValue (  \" map [ key 1  ]  \"  ,     \" code 2  \"  ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . map [ key 1  ]  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" map [ key 1  ]  \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Value   is   TestBean \"  ,     (  ( status . getValue (  )  )    instanceof   TestBean )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 4  \"  . equals (  (  ( TestBean )     ( status . getValue (  )  )  )  . getName (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     2  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCodes (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 2  \"  . equals ( status . getErrorCodes (  )  [  1  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessages (  )  [  0  ]  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 2  \"  . equals ( status . getErrorMessages (  )  [  1  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithMappedProperties"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "tb . setName (  \" name 1  \"  )  ;", "TestBean   spouse    =    new   TestBean (  )  ;", "spouse . setName (  \" name 2  \"  )  ;", "tb . setSpouse ( spouse )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( tb ,     \" tb \"  )  . getBindingResult (  )  ;", "errors . rejectValue (  \" spouse . name \"  ,     \" code 1  \"  ,     \" message 1  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . spouse . name \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     \" spouse . name \"  . equals ( status . getExpression (  )  )  )  ;", "assertTrue (  \" Correct   value \"  ,     \" name 2  \"  . equals ( status . getValue (  )  )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \" name 2  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,    status . isError (  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     1  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \" code 1  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \" message 1  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \" message 1  \"  . equals ( status . getErrorMessagesAsString (  \"     -     \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithNestedFieldErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . someSet \"  )  ;", "tag . setHtmlEscape ( true )  ;", "pc . getRequest (  )  . setAttribute (  \" tb \"  ,    new   TestBean (  \" juergen & eva \"  ,     9  9  )  )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute (  . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" someSet \"  ,    status . getExpression (  )  )  ;", "assertTrue (  (  ( status . getValue (  )  )    instanceof   Set )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithSetValueAndHtmlEscaping"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . doctor \"  )  ;", "tag . setHtmlEscape ( true )  ;", "TestBean   tb    =    new   TestBean (  \" somebody \"  ,     9  9  )  ;", "NestedTestBean   ntb    =    new   NestedTestBean (  \" juergen & eva \"  )  ;", "tb . setDoctor ( ntb )  ;", "pc . getRequest (  )  . setAttribute (  \" tb \"  ,    tb )  ;", "tag . doStartTag (  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute (  . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertEquals (  \" doctor \"  ,    status . getExpression (  )  )  ;", "assertTrue (  (  ( status . getValue (  )  )    instanceof   NestedTestBean )  )  ;", "assertTrue (  (  ( status . getDisplayValue (  )  . indexOf (  \" juergen & amp ; eva \"  )  )     !  =     (  -  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithToStringAndHtmlEscaping"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "try    {", "tag . doStartTag (  )  ;", "fail (  \" Should   have   thrown   JspException \"  )  ;", "}    catch    ( JspException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["bindTagWithoutBean"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertTrue (  \" Correct   expression \"  ,     (  ( status . getExpression (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   value \"  ,     (  ( status . getValue (  )  )     =  =    null )  )  ;", "assertTrue (  \" Correct   displayValue \"  ,     \"  \"  . equals ( status . getDisplayValue (  )  )  )  ;", "assertTrue (  \" Correct   isError \"  ,     (  !  ( status . isError (  )  )  )  )  ;", "assertTrue (  \" Correct   errorCodes \"  ,     (  ( status . getErrorCodes (  )  . length )     =  =     0  )  )  ;", "assertTrue (  \" Correct   errorMessages \"  ,     (  ( status . getErrorMessages (  )  . length )     =  =     0  )  )  ;", "assertTrue (  \" Correct   errorCode \"  ,     \"  \"  . equals ( status . getErrorCode (  )  )  )  ;", "assertTrue (  \" Correct   errorMessage \"  ,     \"  \"  . equals ( status . getErrorMessage (  )  )  )  ;", "assertTrue (  \" Correct   errorMessagesAsString \"  ,     \"  \"  . equals ( status . getErrorMessagesAsString (  \"  ,  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["bindTagWithoutErrors"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "NestedPathTag   tag    =    new   NestedPathTag (  )  ;", "tag . setPath (  \" foo \"  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "int   returnValue    =    tag . doE (  )  ;", "assertEquals ( EVAL _ PAGE ,    returnValue )  ;", "assertNull ( pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathDoEndTag"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "NestedPathTag   tag    =    new   NestedPathTag (  )  ;", "tag . setPath (  \" foo \"  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "NestedPathTag   anotherTag    =    new   NestedPathTag (  )  ;", "anotherTag . setPageContext ( pc )  ;", "anotherTag . setPath (  \" bar \"  )  ;", "anotherTag . doStartTag (  )  ;", "anotherTag . doE (  )  ;", "assertEquals (  \" foo .  \"  ,    pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "tag . doE (  )  ;", "assertNull ( pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathDoEndTagWithNesting"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "NedPathTag   tag    =    new   NedPathTag (  )  ;", "tag . setPath (  \" foo \"  )  ;", "tag . setPageContext ( pc )  ;", "int   returnValue    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    returnValue )  ;", "assertEquals (  \" foo .  \"  ,    pc . getAttribute ( NedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathDoStartTagInternal"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "NestedPathTag   tag    =    new   NestedPathTag (  )  ;", "tag . setPath (  \" foo \"  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" foo .  \"  ,    pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "NestedPathTag   anotherTag    =    new   NestedPathTag (  )  ;", "anotherTag . setPageContext ( pc )  ;", "anotherTag . setPath (  \" bar \"  )  ;", "anotherTag . doStartTag (  )  ;", "assertEquals (  \" foo . bar .  \"  ,    pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "NestedPathTag   yetAnotherTag    =    new   NestedPathTag (  )  ;", "yetAnotherTag . setPageContext ( pc )  ;", "yetAnotherTag . setPath (  \" boo \"  )  ;", "yetAnotherTag . doStartTag (  )  ;", "assertEquals (  \" foo . bar . boo .  \"  ,    pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "yetAnotherTag . doE (  )  ;", "NestedPathTag   andAnotherTag    =    new   NestedPathTag (  )  ;", "andAnotherTag . setPageContext ( pc )  ;", "andAnotherTag . setPath (  \" boo 2  \"  )  ;", "andAnotherTag . doStartTag (  )  ;", "assertEquals (  \" foo . bar . boo 2  .  \"  ,    pc . getAttribute ( NestedPathTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathDoStartTagInternalWithNesting"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb \"  )  . getBindingResult (  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "NestedPathTag   nestedPathTag    =    new   NestedPathTag (  )  ;", "nestedPathTag . setPath (  \" tb \"  )  ;", "nestedPathTag . setPageContext ( pc )  ;", "nestedPathTag . doStartTag (  )  ;", "BindTag   bindTag    =    new   BindTag (  )  ;", "bindTag . setPageContext ( pc )  ;", "bindTag . setPath (  \" name \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( bindTag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertEquals (  \" tb . name \"  ,    status . getPath (  )  )  ;", "assertEquals (  \" Correct   field   value \"  ,     \"  \"  ,    status . getDisplayValue (  )  )  ;", "BindTag   bindTag 2     =    new   BindTag (  )  ;", "bindTag 2  . setPageContext ( pc )  ;", "bindTag 2  . setPath (  \" age \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( bindTag 2  . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status 2     =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status 2     !  =    null )  )  ;", "assertEquals (  \" tb . age \"  ,    status 2  . getPath (  )  )  ;", "assertEquals (  \" Correct   field   value \"  ,     \"  0  \"  ,    status 2  . getDisplayValue (  )  )  ;", "bindTag 2  . doEndTag (  )  ;", "BindStatus   status 3     =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertSame (  \" Status   matches   previous   status \"  ,    status ,    status 3  )  ;", "assertEquals (  \" tb . name \"  ,    status . getPath (  )  )  ;", "assertEquals (  \" Correct   field   value \"  ,     \"  \"  ,    status . getDisplayValue (  )  )  ;", "bindTag . doEndTag (  )  ;", "nestedPathTag . doEndTag (  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathWithBindTag"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "Errors   errors    =    new   bind . ServletRequestDataBinder ( new   TestBean (  )  ,     \" tb 2  \"  )  . getBindingResult (  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb 2  \"  )  ,    errors )  ;", "NestedPathTag   tag    =    new   NestedPathTag (  )  ;", "tag . setPath (  \" tb \"  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "BindTag   bindTag    =    new   BindTag (  )  ;", "bindTag . setPageContext ( pc )  ;", "bindTag . setIgnoreNestedPath ( true )  ;", "bindTag . setPath (  \" tb 2  . name \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( bindTag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "BindStatus   status    =     (  ( BindStatus )     ( pc . getAttribute ( BindTag . STATUS _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "assertTrue (  \" Has   status   variable \"  ,     ( status    !  =    null )  )  ;", "assertEquals (  \" tb 2  . name \"  ,    status . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathWithBindTagWithIgnoreNestedPath"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "FormTag   formTag    =    new   FormTag (  )     {", "@ Override", "protected   TagWriter   createTagWriter (  )     {", "return   new   TagWriter ( new   StringWriter (  )  )  ;", "}", "}  ;", "String   action    =     \"  / form . html \"  ;", "String   commandName    =     \" tb \"  ;", "String   name    =     \" formName \"  ;", "String   enctype    =     \" my / enctype \"  ;", "String   method    =     \" POST \"  ;", "String   onsubmit    =     \" onsubmit \"  ;", "String   onreset    =     \" onreset \"  ;", "String   cssClass    =     \" myClass \"  ;", "String   cssStyle    =     \" myStyle \"  ;", "String   acceptCharset    =     \" iso -  8  8  5  9  -  1  \"  ;", "formTag . setName ( name )  ;", "formTag . setCssClass ( cssClass )  ;", "formTag . setCssStyle ( cssStyle )  ;", "formTag . setAction ( action )  ;", "formTag . setModelAttribute ( commandName )  ;", "formTag . setEnctype ( enctype )  ;", "formTag . setMethod ( method )  ;", "formTag . setOnsubmit ( onsubmit )  ;", "formTag . setOnreset ( onreset )  ;", "formTag . setAcceptCharset ( acceptCharset )  ;", "formTag . setPageContext ( pc )  ;", "formTag . doStartTag (  )  ;", "bindTag 1     =    new    (  )  ;", "bindTag 1  . setPageContext ( pc )  ;", "bindTag 1  . setPath (  \" date \"  )  ;", "bindTag 1  . doStartTag (  )  ;", "bindTag 1  . doEndTag (  )  ;", "bindTag 2     =    new    (  )  ;", "bindTag 2  . setPageContext ( pc )  ;", "bindTag 2  . setPath (  \" tb . date \"  )  ;", "bindTag 2  . doStartTag (  )  ;", "bindTag 2  . doEndTag (  )  ;", "bindTag 3     =    new    (  )  ;", "bindTag 3  . setPageContext ( pc )  ;", "bindTag 3  . setPath (  \" tb \"  )  ;", "bindTag 3  . doStartTag (  )  ;", "bindTag 3  . doEndTag (  )  ;", "formTag . doEndTag (  )  ;", "}", "METHOD_END"], "methodName": ["nestingInFormTag"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "tb . setName (  \" name 1  \"  )  ;", "Errors   errors    =    new   validation . BindException ( tb ,     \" tb \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 1  \"  ,    null ,     \" message    &     1  \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" code 2  \"  ,    null ,     \" message 2  \"  )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    errors )  ;", "BindTag   tag    =    new   BindTag (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertNull ( tag . getProperty (  )  )  ;", "tag . release (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setPath (  \" tb . name \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" name \"  ,    tag . getProperty (  )  )  ;", "}", "METHOD_END"], "methodName": ["propertyExposing"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . date \"  )  ;", "bind . doStartTag (  )  ;", "TransformTag   transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setParent ( bind )  ;", "transform . setValue ( tb . getDate (  )  )  ;", "transform . setVar (  \" theDate \"  )  ;", "transform . doStartTag (  )  ;", "assertNotNull ( pc . getAttribute (  \" theDate \"  )  )  ;", "assertEquals ( pc . getAttribute (  \" theDate \"  )  ,    df . format ( tb . getDate (  )  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . name \"  )  ;", "bind . doStartTag (  )  ;", "transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setValue (  \" name \"  )  ;", "transform . setParent ( bind )  ;", "transform . setVar (  \" theString \"  )  ;", "transform . doStartTag (  )  ;", "assertNotNull ( pc . getAttribute (  \" theString \"  )  )  ;", "assertEquals (  \" name \"  ,    pc . getAttribute (  \" theString \"  )  )  ;", "}", "METHOD_END"], "methodName": ["transformTagCorrectBehavior"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . name \"  )  ;", "bind . doStartTag (  )  ;", "TransformTag   transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setValue ( null )  ;", "transform . setParent ( bind )  ;", "transform . setVar (  \" theString 2  \"  )  ;", "transform . doStartTag (  )  ;", "assertNull ( pc . getAttribute (  \" theString 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["transformTagNonExistingValue"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "TransformTag   transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setVar (  \" var \"  )  ;", "transform . setValue (  \" bla \"  )  ;", "try    {", "transform . doStartTag (  )  ;", "fail (  \" Tag   can   be   executed   outside    \"  )  ;", "}    catch    ( JspException   e )     {", "}", "MessageTag   message    =    new   MessageTag (  )  ;", "message . setPageContext ( pc )  ;", "transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setVar (  \" var \"  )  ;", "transform . setValue (  \" bla \"  )  ;", "transform . setParent ( message )  ;", "try    {", "transform . doStartTag (  )  ;", "fail (  \" Tag   can   be   executed   outside      and   inside   messagtag \"  )  ;", "}    catch    ( JspException   e )     {", "}", "}", "METHOD_END"], "methodName": ["transformTagOutsideBindTag"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . name \"  )  ;", "bind . doStartTag (  )  ;", "TransformTag   transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setValue (  \" na < me \"  )  ;", "transform . setParent ( bind )  ;", "transform . setVar (  \" theString \"  )  ;", "transform . setHtmlEscape ( true )  ;", "transform . doStartTag (  )  ;", "assertNotNull ( pc . getAttribute (  \" theString \"  )  )  ;", "assertEquals (  \" na & lt ; me \"  ,    pc . getAttribute (  \" theString \"  )  )  ;", "}", "METHOD_END"], "methodName": ["transformTagWithHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy - MM - dd \"  )  ;", "ServletRequestDataBinder   binder    =    new   ServletRequestDataBinder ( tb ,     \" tb \"  )  ;", "CustomDateEditor   l    =    new   CustomDateEditor ( df ,    true )  ;", "binder . registerCustomEditor ( Date . class ,    l )  ;", "pc . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" tb \"  )  ,    binder . getBindingResult (  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . date \"  )  ;", "bind . doStartTag (  )  ;", "TransformTag   transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setParent ( bind )  ;", "transform . setValue ( tb . getDate (  )  )  ;", "transform . setVar (  \" theDate \"  )  ;", "transform . setScope (  \" page \"  )  ;", "transform . doStartTag (  )  ;", "transform . release (  )  ;", "assertNotNull ( pc . getAttribute (  \" theDate \"  )  )  ;", "assertEquals ( df . format ( tb . getDate (  )  )  ,    pc . getAttribute (  \" theDate \"  )  )  ;", "bind    =    new    (  )  ;", "bind . setPageContext ( pc )  ;", "bind . setPath (  \" tb . name \"  )  ;", "bind . doStartTag (  )  ;", "transform    =    new   TransformTag (  )  ;", "transform . setPageContext ( pc )  ;", "transform . setValue (  \" name \"  )  ;", "transform . setParent ( bind )  ;", "transform . setVar (  \" theString \"  )  ;", "transform . setScope (  \" page \"  )  ;", "transform . doStartTag (  )  ;", "transform . release (  )  ;", "assertNotNull ( pc . getAttribute (  \" theString \"  )  )  ;", "assertEquals (  \" name \"  ,    pc . getAttribute (  \" theString \"  )  )  ;", "}", "METHOD_END"], "methodName": ["transformTagWithSettingOfScope"], "fileName": "org.springframework.web.servlet.tags.BindTagTests"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . bodyContent )     !  =    null )  ,     \" No   BodyContent   set \"  )  ;", "return   this . bodyContent . getString (  )  ;", "}", "METHOD_END"], "methodName": ["readBodyContent"], "fileName": "org.springframework.web.servlet.tags.EscapeBodyTag"}, {"methodBody": ["METHOD_START", "{", "this . javaScriptEscape    =    javaScriptEscape ;", "}", "METHOD_END"], "methodName": ["setJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.EscapeBodyTag"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . bodyContent )     !  =    null )  ,     \" No   BodyContent   set \"  )  ;", "this . bodyContent . getEnclosingWriter (  )  . print ( content )  ;", "}", "METHOD_END"], "methodName": ["writeBodyContent"], "fileName": "org.springframework.web.servlet.tags.EscapeBodyTag"}, {"methodBody": ["METHOD_START", "{", "StandardEvaluationContext   context    =    new   StandardEvaluationContext (  )  ;", "context . addPropertyAccessor ( new   EvalTag . JspPropertyAccessor ( pageContext )  )  ;", "context . addPropertyAccessor ( new   MapAccessor (  )  )  ;", "context . addPropertyAccessor ( new   EnvironmentAccessor (  )  )  ;", "context . setBeanResolver ( new   context . expression . BeanFactoryResolver ( getRequestContext (  )  . getWebApplicationContext (  )  )  )  ;", "ConversionService   conversionService    =    getConversionService ( pageContext )  ;", "if    ( conversionService    !  =    null )     {", "context . setTypeConverter ( new   expression . spel . support . StandardTypeConverter ( conversionService )  )  ;", "}", "return   context ;", "}", "METHOD_END"], "methodName": ["createEvaluationContext"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ConversionService )     ( pageContext . getRequest (  )  . getAttribute ( ConversionService . class . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getConversionService"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "this . expression    =    this . expressionParser . parseExpression ( expression )  ;", "}", "METHOD_END"], "methodName": ["setExpression"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "this . javaScriptEscape    =    javaScriptEscape ;", "}", "METHOD_END"], "methodName": ["setJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "this . scope    =    TagUtils . getScope ( scope )  ;", "}", "METHOD_END"], "methodName": ["setScope"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "this . var    =    var ;", "}", "METHOD_END"], "methodName": ["setVar"], "fileName": "org.springframework.web.servlet.tags.EvalTag"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   wac    =     (  ( GenericApplicationContext )     ( context . getRequest (  )  . getAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" bean 2  \"  ,    context . getRequest (  )  . getAttribute (  \" bean \"  )  )  ;", "tag . setExpression (  \"  @ bean 2  . bean \"  )  ;", "tag . setVar (  \" foo \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" not   the   bean   object \"  ,    context . getAttribute (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["accessUsingBeanSyntax"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" key . foo \"  ,     \" value . foo \"  )  ;", "GenericApplicationContext   wac    =     (  ( GenericApplicationContext )     ( context . getRequest (  )  . getAttribute ( DispatcherSWEB _ APPLICATION _ CONTEXT _ ATTRIBUTE )  )  )  ;", "wac . getEnvironment (  )  . getPropertySources (  )  . addFirst ( new   MapPropertySource (  \" mapSource \"  ,    map )  )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" bean 2  \"  ,    context . getRequest (  )  . getAttribute (  \" bean \"  )  )  ;", "tag . setExpression (  \"  @ environment [  ' key . foo '  ]  \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value . foo \"  ,     (  ( MockHttpSesponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["environmentAccess"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . map . key \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" value \"  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["mapAccess"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . bean \"  )  ;", "tag . setVar (  \" foo \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" not   the   bean   object \"  ,    context . getAttribute (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPropertyWithAttributeName"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "PercentStyleFormatter   formatter    =    new   PercentStyleFormatter (  )  ;", "tag . setExpression (  \" bean . formattable \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals ( formatter . print ( new   BigDecimal (  \"  .  2  5  \"  )  ,    Locale . getDefault (  )  )  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["printFormattedScopedAttributeResult"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . html (  )  \"  )  ;", "tag . setHtmlEscape ( true )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \"  & lt ; p & gt ;  \"  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["printHtmlEscapedAttributeResult"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . js (  )  \"  )  ;", "tag . setJavaScriptEscape ( true )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" function   foo (  )     {    alert (  \\  \\  \\  \" hi \\  \\  \\  \"  )     }  \"  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["printJavaScriptEscapedAttributeResult"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . null \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \"  \"  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["printNullAsEmptyString"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . method (  )  \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" foo \"  ,     (  ( MockHttpSResponse )     ( context . getResponse (  )  )  )  . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["printScopedAttributeResult"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setExpression (  \" bean . formattable \"  )  ;", "tag . setVar (  \" foo \"  )  ;", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals ( new   BigDecimal (  \"  .  2  5  \"  )  ,    context . getAttribute (  \" foo \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setFormattedScopedAttributeResult"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "context    =    createPageContext (  )  ;", "FormattingConversionServiceFactoryBean   factory    =    new   FormattingConversionServiceFactoryBean (  )  ;", "factory . afterPropertiesSet (  )  ;", "context . getRequest (  )  . setAttribute (  \" core . convert . ConversionService \"  ,    factory . getObject (  )  )  ;", "context . getRequest (  )  . setAttribute (  \" bean \"  ,    new   EvalTagTests . Bean (  )  )  ;", "tag    =    new   EvalTag (  )  ;", "tag . setPageContext ( context )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.tags.EvalTagTests"}, {"methodBody": ["METHOD_START", "{", "this . defaultHtmlEscape    =    defaultHtmlEscape ;", "}", "METHOD_END"], "methodName": ["setDefaultHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTag"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   result    =    new   StringBuffer (  )  ;", "BodyTag   tag    =    new   BodyTag (  )     {", "@ Override", "protected   String   readBodyContent (  )     {", "return    \" test   text \"  ;", "}", "@ Override", "protected   void   writeBodyContent ( String   content )     {", "result . append ( content )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    tag . doStartTag (  )  )  ;", "assertEquals ( SKIP _ BODY ,    tag . doAfterBody (  )  )  ;", "assertEquals (  \" test   text \"  ,    result . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeBody"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   result    =    new   StringBuffer (  )  ;", "EscapeBodyTag   tag    =    new   EscapeBodyTag (  )     {", "@ Override", "protected   String   readBodyContent (  )     {", "return    \" test    &    text \"  ;", "}", "@ Override", "protected   void   writeBodyContent ( String   content )     {", "result . append ( content )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . set ( true )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    tag . doStartTag (  )  )  ;", "assertEquals ( SKIP _ BODY ,    tag . doAfterBody (  )  )  ;", "assertEquals (  \" test    & amp ;    text \"  ,    result . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeBodyWithHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   result    =    new   StringBuffer (  )  ;", "EscapeBodyTag   tag    =    new   EscapeBodyTag (  )     {", "@ Override", "protected   String   readBodyContent (  )     {", "return    \"  \\  '    test    &    text    \\  \\  \"  ;", "}", "@ Override", "protected   void   writeBodyContent ( String   content )     {", "result . append ( content )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . set ( true )  ;", "tag . setJavaScriptEscape ( true )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    tag . doStartTag (  )  )  ;", "assertEquals ( SKIP _ BODY ,    tag . doAfterBody (  )  )  ;", "assertEquals (  \" Correct   content \"  ,     \"  &  #  3  9  ;    test    & amp ;    text    \\  \\  \\  \\  \"  ,    result . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeBodyWithHtmlEscapeAndJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   result    =    new   StringBuffer (  )  ;", "BodyTag   tag    =    new   BodyTag (  )     {", "@ Override", "protected   String   readBodyContent (  )     {", "return    \"  \\  '    test    &    text    \\  \\  \"  ;", "}", "@ Override", "protected   void   writeBodyContent ( String   content )     {", "result . append ( content )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setJavaScript ( true )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    tag . doStartTag (  )  )  ;", "assertEquals ( SKIP _ BODY ,    tag . doAfterBody (  )  )  ;", "assertEquals (  \" Correct   content \"  ,     \"  \\  \\  \\  '    test    &    text    \\  \\  \\  \\  \"  ,    result . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeBodyWithJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "HtmlEscapingAwareTag   testTag    =    new   HtmlEscapingAwareTag (  )     {", "@ Override", "public   int   doStartTagInternal (  )    throws   Exception    {", "return   EVAL _ BODY _ INCLUDE ;", "}", "}  ;", "testTag . setPageContext ( pc )  ;", "testTag . doStartTag (  )  ;", "assertTrue (  \" Correct   default \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,     (  !  ( testTag . isHtmlEscape (  )  )  )  )  ;", "tag . setDefaultHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   enabled \"  ,    tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,    testTag . isHtmlEscape (  )  )  ;", "tag . setDefaultHtmlEscape ( false )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   disabled \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,     (  !  ( testTag . isHtmlEscape (  )  )  )  )  ;", "tag . setDefaultHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "testTag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correctly   enabled \"  ,    tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,    testTag . isHtmlEscape (  )  )  ;", "testTag . setHtmlEscape ( false )  ;", "assertTrue (  \" Correctly   enabled \"  ,    tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,     (  !  ( testTag . isHtmlEscape (  )  )  )  )  ;", "tag . setDefaultHtmlEscape ( false )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "testTag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correctly   disabled \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,    testTag . isHtmlEscape (  )  )  ;", "testTag . setHtmlEscape ( false )  ;", "assertTrue (  \" Correctly   disabled \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "assertTrue (  \" Correctly   applied \"  ,     (  !  ( testTag . isHtmlEscape (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["htmlEscapeTag"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "MockServletContext   sc    =     (  ( MockServletContext )     ( pc . getServletContext (  )  )  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "sc . addInitParameter ( HTML _ ESCAPE _ CONTEXT _ PARAM ,     \" false \"  )  ;", "assertTrue (  \" Correct   default \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "tag . setDefaultHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   enabled \"  ,    tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  ;", "tag . setDefaultHtmlEscape ( false )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   disabled \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["htmlEscapeTagWithContextParamFalse"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "MockServletContext   sc    =     (  ( MockServletContext )     ( pc . getServletContext (  )  )  )  ;", "sc . addInitParameter ( HTML _ ESCAPE _ CONTEXT _ PARAM ,     \" true \"  )  ;", "tag    =    new    (  )  ;", "tag . setDefaultHtmlEscape ( false )  ;", "tag . setPageContext ( pc )  ;", "tag . doStartTag (  )  ;", "assertTrue (  \" Correct   default \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "tag . setDefaultHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   enabled \"  ,    tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  ;", "tag . setDefaultHtmlEscape ( false )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertTrue (  \" Correctly   disabled \"  ,     (  !  ( tag . getRequestContext (  )  . isDefaultHtmlEscape (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["htmlEscapeTagWithContextParamTrue"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapeTagTests"}, {"methodBody": ["METHOD_START", "{", "String   out    =    content ;", "if    ( ise (  )  )     {", "if    ( isResponseEncodede (  )  )     {", "out    =    HtmlUtils . htmlEscape ( content ,    this . pageContext . getResponse (  )  . getCharacterEncoding (  )  )  ;", "} else    {", "out    =    HtmlUtils . htmlEscape ( content )  ;", "}", "}", "return   out ;", "}", "METHOD_END"], "methodName": ["htmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapingAwareTag"}, {"methodBody": ["METHOD_START", "{", "return   getRequestContext (  )  . isDefaultHtmlEscape (  )  ;", "}", "METHOD_END"], "methodName": ["isDefaultHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapingAwareTag"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . htmlEscape )     !  =    null )     {", "return   this . htmlEscape . booleanValue (  )  ;", "} else    {", "return   isDefaulte (  )  ;", "}", "}", "METHOD_END"], "methodName": ["isHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapingAwareTag"}, {"methodBody": ["METHOD_START", "{", "return   getRequestContext (  )  . isResponseEncodedHtmlEscape (  )  ;", "}", "METHOD_END"], "methodName": ["isResponseEncodedHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapingAwareTag"}, {"methodBody": ["METHOD_START", "{", "this . htmlEscape    =    htmlEscape ;", "}", "METHOD_END"], "methodName": ["setHtmlEscape"], "fileName": "org.springframework.web.servlet.tags.HtmlEscapingAwareTag"}, {"methodBody": ["METHOD_START", "{", "if    ( ObjectUtils . isEmpty ( sourceArguments )  )     {", "return   additionalArguments ;", "}", "Object [  ]    arguments    =    new   Object [  ( sourceArguments . length )     +     ( additionalArguments . length )  ]  ;", "System . arraycopy ( sourceArguments ,     0  ,    arguments ,     0  ,    sourceArguments . length )  ;", "System . arraycopy ( additionalArguments ,     0  ,    arguments ,    sourceArguments . length ,    additionalArguments . length )  ;", "return   arguments ;", "}", "METHOD_END"], "methodName": ["appendArguments"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "return   getRequestContext (  )  . getMessageSource (  )  ;", "}", "METHOD_END"], "methodName": ["getMessageSource"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "return   ex . getMessage (  )  ;", "}", "METHOD_END"], "methodName": ["getNoSuchMessageExceptionDescription"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "if    ( arguments   instanceof   String )     {", "String [  ]    stringArray    =    StringUtils . delimitedListToStringArray (  (  ( String )     ( arguments )  )  ,    this . argumentSeparator )  ;", "if    (  ( stringArray . length )     =  =     1  )     {", "Object   argument    =    stringArray [  0  ]  ;", "if    (  ( argument    !  =    null )     &  &     ( argument . getClass (  )  . isArray (  )  )  )     {", "return   ObjectUtils . toObjectArray ( argument )  ;", "} else    {", "return   new   Object [  ]  {    argument    }  ;", "}", "} else    {", "return   stringArray ;", "}", "} else", "if    ( arguments   instanceof   Object [  ]  )     {", "return    (  ( Object [  ]  )     ( arguments )  )  ;", "} else", "if    ( arguments   instanceof   Collection )     {", "return    (  ( Collection <  ?  >  )     ( arguments )  )  . toArray (  )  ;", "} else", "if    ( arguments    !  =    null )     {", "return   new   Object [  ]  {    arguments    }  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["resolveArguments"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "MessageSource   messageSource    =    getMessageSource (  )  ;", "if    (  ( this . message )     !  =    null )     {", "return   messageSource . getMessage ( this . message ,    getRequestContext (  )  . getLocale (  )  )  ;", "}", "if    (  (  ( this . code )     !  =    null )     |  |     (  ( this . text )     !  =    null )  )     {", "Object [  ]    argumentsArray    =    resolveArguments ( this . arguments )  ;", "if    (  !  ( this . nestedArguments . isEmpty (  )  )  )     {", "argumentsArray    =    appendArguments ( argumentsArray ,    this . nestedArguments . toArray (  )  )  ;", "}", "if    (  ( this . text )     !  =    null )     {", "String   msg    =    messageSource . getMessage ( this . code ,    argumentsArray ,    this . text ,    getRequestContext (  )  . getLocale (  )  )  ;", "return   msg    !  =    null    ?    msg    :     \"  \"  ;", "} else    {", "return   messageSource . getMessage ( this . code ,    argumentsArray ,    getRequestContext (  )  . getLocale (  )  )  ;", "}", "}", "throw   new   JspTagException (  \" No   resolvable   message \"  )  ;", "}", "METHOD_END"], "methodName": ["resolveMessage"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . argumentSeparator    =    argumentSeparator ;", "}", "METHOD_END"], "methodName": ["setArgumentSeparator"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . arguments    =    arguments ;", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . code    =    code ;", "}", "METHOD_END"], "methodName": ["setCode"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . javaScriptEscape    =    javaScriptEscape ;", "}", "METHOD_END"], "methodName": ["setJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . message    =    message ;", "}", "METHOD_END"], "methodName": ["setMessage"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . scope    =    scope ;", "}", "METHOD_END"], "methodName": ["setScope"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . text    =    text ;", "}", "METHOD_END"], "methodName": ["setText"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "this . var    =    var ;", "}", "METHOD_END"], "methodName": ["setVar"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "pageContext . getOut (  )  . write ( String . valueOf ( msg )  )  ;", "}", "METHOD_END"], "methodName": ["writeMessage"], "fileName": "org.springframework.web.servlet.tags.MessageTag"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" test \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   message \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCode"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "tag . setArguments (  \" arg 1  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   arg 1    message    {  1  }  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndArgument"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "tag . setArguments (  5  )  ;", "tag . addArgument (  7  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test    5    message    7  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndArgumentAndNestedArgument"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "tag . setArguments (  \" arg 1  , arg 2  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   arg 1    message   arg 2  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndArguments"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "tag . setArguments ( new   Object [  ]  {     \" arg 1  \"  ,     5     }  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   arg 1    message    5  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndArrayArgument"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "tag . addArgument (  7  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test    7    message    {  1  }  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndNestedArgument"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "tag . addArgument (  \" arg 1  \"  )  ;", "tag . addArgument (  6  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   arg 1    message    6  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndNestedArguments"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "tag . setArguments (  5  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test    5    message    {  1  }  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndObjectArgument"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" testArgs \"  )  ;", "tag . setArguments (  \" arg 1  ,  1  ; arg 2  ,  2  \"  )  ;", "tag . setArgumentSeparator (  \"  ;  \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   arg 1  ,  1    message   arg 2  ,  2  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndStringArgumentWithCustomSeparator"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" test \"  )  ;", "tag . setText (  \" testtext \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   message \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithCodeAndText"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setMessage ( new   DefaultMessageSourceResolvable (  \" test \"  )  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   message \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithMessageSourceResolvable"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \" test    &    text    \u00a8\u00a6  \"  )  ;", "tag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertTrue (  \" Correct   message \"  ,    message . toString (  )  . startsWith (  \" test    & amp ;    text    &  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithText"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \"  \\  '    test    &    text    \\  \\  \"  )  ;", "tag . setHtmlEscape ( true )  ;", "tag . setJavaScriptEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \"  &  #  3  9  ;    test    & amp ;    text    \\  \\  \\  \\  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithTextAndHtmlEscapeAndJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \"  \\  '    test    &    text    \\  \\  \"  )  ;", "tag . setJavaScriptEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \"  \\  \\  \\  '    test    &    text    \\  \\  \\  \\  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithTextAndJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "pc . getServletContext (  )  . setInitParameter ( RESPONSE _ ENCODED _ HTML _ ESCAPE _ CONTEXT _ PARAM ,     \" true \"  )  ;", "pc . getResponse (  )  . setCharacterEncoding (  \" UTF -  8  \"  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \" test    <  &  >     \u00a8\u00a6  \"  )  ;", "tag . setHtmlEscape ( true )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test    & lt ;  & amp ;  & gt ;     \u00a8\u00a6  \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageTagWithTextEncodingEscaped"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \" text    &    text \"  )  ;", "tag . setVar (  \" testvar \"  )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" text    &    text \"  ,    pc . getAttribute (  \" testvar \"  )  )  ;", "tag . release (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" test \"  )  ;", "tag . setVar (  \" testvar \"  )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   message \"  ,    pc . getAttribute (  \" testvar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["messageWithVar"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setText (  \" text    &    text \"  )  ;", "tag . setVar (  \" testvar \"  )  ;", "tag . setScope (  \" page \"  )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" text    &    text \"  ,    pc . getAttribute (  \" testvar \"  )  )  ;", "tag . release (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" test \"  )  ;", "tag . setVar (  \" testvar 2  \"  )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" Correct   message \"  ,     \" test   message \"  ,    pc . getAttribute (  \" testvar 2  \"  )  )  ;", "tag . release (  )  ;", "}", "METHOD_END"], "methodName": ["messageWithVarAndScope"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "ConfigurableWebApplicationContext   ctx    =     (  ( ConfigurableWebApplicationContext )     ( RequestContextUtils . findWebApplicationContext (  (  ( HttpServletRequest )     ( pc . getRequest (  )  )  )  ,    pc . getServletContext (  )  )  )  )  ;", "ctx . close (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" test \"  )  ;", "tag . setVar (  \" testvar 2  \"  )  ;", "tag . doStartTag (  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "}", "METHOD_END"], "methodName": ["nullMessageSource"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "RequestContext   rc    =    new   RequestContext (  (  ( HttpServletRequest )     ( pc . getRequest (  )  )  )  ,    pc . getServletContext (  )  )  ;", "assertEquals (  \" test   message \"  ,    rc . get (  \" test \"  )  )  ;", "assertEquals (  \" test   message \"  ,    rc . get (  \" test \"  ,     (  ( Object [  ]  )     ( null )  )  )  )  ;", "assertEquals (  \" test   message \"  ,    rc . get (  \" test \"  ,     \" default \"  )  )  ;", "assertEquals (  \" test   message \"  ,    rc . get (  \" test \"  ,     (  ( Object [  ]  )     ( null )  )  ,     \" default \"  )  )  ;", "assertEquals (  \" test   arg 1    message   arg 2  \"  ,    rc . get (  \" testArgs \"  ,    new   String [  ]  {     \" arg 1  \"  ,     \" arg 2  \"     }  ,     \" default \"  )  )  ;", "assertEquals (  \" test   arg 1    message   arg 2  \"  ,    rc . get (  \" testArgs \"  ,    Arrays . asList ( new   String [  ]  {     \" arg 1  \"  ,     \" arg 2  \"     }  )  ,     \" default \"  )  )  ;", "assertEquals (  \" default \"  ,    rc . get (  \" testa \"  ,     \" default \"  )  )  ;", "assertEquals (  \" default \"  ,    rc . get (  \" testa \"  ,     (  ( List )     ( null )  )  ,     \" default \"  )  )  ;", "SourceResolvable   resolvable    =    new   DefaultSourceResolvable ( new   String [  ]  {     \" test \"     }  )  ;", "assertEquals (  \" test   message \"  ,    rc . get ( resolvable )  )  ;", "}", "METHOD_END"], "methodName": ["requestContext"], "fileName": "org.springframework.web.servlet.tags.MessageTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.springframework.web.servlet.tags.NestedPathTag"}, {"methodBody": ["METHOD_START", "{", "if    ( path    =  =    null )     {", "path    =     \"  \"  ;", "}", "if    (  (  ( path . length (  )  )     >     0  )     &  &     (  !  ( path . endsWith ( NESTED _ PROPERTY _ SEPARATOR )  )  )  )     {", "path    +  =    PropertyAccessor . NESTED _ PROPERTY _ SEPARATOR ;", "}", "this . path    =    path ;", "}", "METHOD_END"], "methodName": ["setPath"], "fileName": "org.springframework.web.servlet.tags.NestedPathTag"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.tags.Param"}, {"methodBody": ["METHOD_START", "{", "return   this . value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.web.servlet.tags.Param"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.Param"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.Param"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.ParamTag"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "this . valueSet    =    true ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.ParamTag"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name \"  )  ;", "tag . setBodyContent ( new   mock . web . test . MockBodyContent (  \" value \"  ,    new   MockHttpServletResponse (  )  )  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name \"  ,    parent . getParam (  )  . getName (  )  )  ;", "assertEquals (  \" value \"  ,    parent . getParam (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["paramWithBodyValue"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name \"  )  ;", "tag . setValue ( null )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name \"  ,    parent . get (  )  . getName (  )  )  ;", "assertNull ( parent . get (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["paramWithExplicitNullValue"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name \"  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name \"  ,    parent . get (  )  . getName (  )  )  ;", "assertNull ( parent . get (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["paramWithImplicitNullValue"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name \"  )  ;", "tag . setValue (  \" value \"  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name \"  ,    parent . get (  )  . getName (  )  )  ;", "assertEquals (  \" value \"  ,    parent . get (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["paramWithNameAndValue"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name \"  )  ;", "tag . setValue (  \" value \"  )  ;", "tag . setParent ( null )  ;", "tag . doEndTag (  )  ;", "}", "METHOD_END"], "methodName": ["paramWithNoParent"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setName (  \" name 1  \"  )  ;", "tag . setValue (  \" value 1  \"  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name 1  \"  ,    parent . getParam (  )  . getName (  )  )  ;", "assertEquals (  \" value 1  \"  ,    parent . getParam (  )  . getValue (  )  )  ;", "tag . release (  )  ;", "parent    =    new   ParamTagTests . MockParamSupportTag (  )  ;", "tag . setPageContext ( createPageContext (  )  )  ;", "tag . setParent ( parent )  ;", "tag . setName (  \" name 2  \"  )  ;", "tag . setBodyContent ( new   mock . web . test . MockBodyContent (  \" value 2  \"  ,    new   MockHttpServletResponse (  )  )  )  ;", "action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "assertEquals (  \" name 2  \"  ,    parent . getParam (  )  . getName (  )  )  ;", "assertEquals (  \" value 2  \"  ,    parent . getParam (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["paramWithValueThenReleaseThenBodyValue"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   context    =    createPageContext (  )  ;", ". setPageContext ( context )  ;", ". setParent ( parent )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.tags.ParamTagTests"}, {"methodBody": ["METHOD_START", "{", "param . setName (  \" name \"  )  ;", "assertEquals (  \" name \"  ,    param . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.springframework.web.servlet.tags.ParamTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( param . getName (  )  )  ;", "assertNull ( param . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["nullDefaults"], "fileName": "org.springframework.web.servlet.tags.ParamTests"}, {"methodBody": ["METHOD_START", "{", "param . setValue (  \" value \"  )  ;", "assertEquals (  \" value \"  ,    param . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["value"], "fileName": "org.springframework.web.servlet.tags.ParamTests"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . requestContext )     !  =    null )  ,     \" No   current   RequestContext \"  )  ;", "return   this . requestContext ;", "}", "METHOD_END"], "methodName": ["getRequestContext"], "fileName": "org.springframework.web.servlet.tags.RequestContextAwareTag"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "RequestContext   rc    =    new   RequestContext (  (  ( HttpSRequest )     ( pc . getRequest (  )  )  )  )  ;", "assertEquals (  \" theme   test   message \"  ,    rc . getThemeMessage (  \" themetest \"  )  )  ;", "assertEquals (  \" theme   test   message \"  ,    rc . getThemeMessage (  \" themetest \"  ,     (  ( String [  ]  )     ( null )  )  )  )  ;", "assertEquals (  \" theme   test   message \"  ,    rc . getThemeMessage (  \" themetest \"  ,     \" default \"  )  )  ;", "assertEquals (  \" theme   test   message \"  ,    rc . getThemeMessage (  \" themetest \"  ,     (  ( Object [  ]  )     ( null )  )  ,     \" default \"  )  )  ;", "assertEquals (  \" theme   test   message   arg 1  \"  ,    rc . getThemeMessage (  \" themetestArgs \"  ,    new   String [  ]  {     \" arg 1  \"     }  )  )  ;", "assertEquals (  \" theme   test   message   arg 1  \"  ,    rc . getThemeMessage (  \" themetestArgs \"  ,    Arrays . asList ( new   String [  ]  {     \" arg 1  \"     }  )  )  )  ;", "assertEquals (  \" default \"  ,    rc . getThemeMessage (  \" themetesta \"  ,     \" default \"  )  )  ;", "assertEquals (  \" default \"  ,    rc . getThemeMessage (  \" themetesta \"  ,     (  ( List )     ( null )  )  ,     \" default \"  )  )  ;", "MessageSourceResolvable   resolvable    =    new   DefaultMessageSourceResolvable ( new   String [  ]  {     \" themetest \"     }  )  ;", "assertEquals (  \" theme   test   message \"  ,    rc . getThemeMessage ( resolvable )  )  ;", "}", "METHOD_END"], "methodName": ["requestContext"], "fileName": "org.springframework.web.servlet.tags.ThemeTagTests"}, {"methodBody": ["METHOD_START", "{", "PageContext   pc    =    createPageContext (  )  ;", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "tag    =    new    (  )     {", "@ Override", "protected   void   writeMessage ( String   msg )     {", "message . append ( msg )  ;", "}", "}  ;", "tag . setPageContext ( pc )  ;", "tag . setCode (  \" themetest \"  )  ;", "assertTrue (  \" Correct   doStartTag   return   value \"  ,     (  ( tag . doStartTag (  )  )     =  =     ( Tag . EVAL _ BODY _ INCLUDE )  )  )  ;", "assertEquals (  \" Correct   doEndTag   return   value \"  ,    EVAL _ PAGE ,    tag . doEndTag (  )  )  ;", "assertEquals (  \" theme   test   message \"  ,    message . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["themeTag"], "fileName": "org.springframework.web.servlet.tags.ThemeTagTests"}, {"methodBody": ["METHOD_START", "{", "this . scope    =    scope ;", "}", "METHOD_END"], "methodName": ["setScope"], "fileName": "org.springframework.web.servlet.tags.TransformTag"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.TransformTag"}, {"methodBody": ["METHOD_START", "{", "this . var    =    var ;", "}", "METHOD_END"], "methodName": ["setVar"], "fileName": "org.springframework.web.servlet.tags.TransformTag"}, {"methodBody": ["METHOD_START", "{", "String   encoding    =    pageContext . getResponse (  )  . getCharacterEncoding (  )  ;", "StringBuilder   qs    =    new   StringBuilder (  )  ;", "for    ( Param   param    :    params )     {", "if    (  (  !  ( usedParams . contains ( param . getName (  )  )  )  )     &  &     ( StringUtils . hasLength ( param . getName (  )  )  )  )     {", "if    ( includeQueryStringDelimiter    &  &     (  ( qs . length (  )  )     =  =     0  )  )     {", "qs . append (  \"  ?  \"  )  ;", "} else    {", "qs . append (  \"  &  \"  )  ;", "}", "try    {", "qs . append ( UriUtils . encodeQueryParam ( param . getName (  )  ,    encoding )  )  ;", "if    (  ( param . getValue (  )  )     !  =    null )     {", "qs . append (  \"  =  \"  )  ;", "qs . append ( UriUtils . encodeQueryParam ( param . getValue (  )  ,    encoding )  )  ;", "}", "}    catch    ( UnsupportedCharsetException   ex )     {", "throw   new   JspException ( ex )  ;", "}", "}", "}", "return   qs . toString (  )  ;", "}", "METHOD_END"], "methodName": ["createQueryString"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . value )     !  =    null )  ,     \" No   value   set \"  )  ;", "HttpSRequest   request    =     (  ( HttpSRequest )     ( pageContext . getRequest (  )  )  )  ;", "HttpSResponse   response    =     (  ( HttpSResponse )     ( pageContext . getResponse (  )  )  )  ;", "StringBuilder   url    =    new   StringBuilder (  )  ;", "if    (  ( this . type )     =  =     ( UrlTag . UrlType . CONTEXT _ RELATIVE )  )     {", "if    (  ( this . context )     =  =    null )     {", "url . append ( request . getContextPath (  )  )  ;", "} else    {", "if    ( this . context . endsWith (  \"  /  \"  )  )     {", "url . append ( this . context . substring (  0  ,     (  ( this . context . length (  )  )     -     1  )  )  )  ;", "} else    {", "url . append ( this . context )  ;", "}", "}", "}", "if    (  (  (  ( this . type )     !  =     ( UrlTag . UrlType . RELATIVE )  )     &  &     (  ( this . type )     !  =     ( UrlTag . UrlType . ABSOLUTE )  )  )     &  &     (  !  ( this . value . startsWith (  \"  /  \"  )  )  )  )     {", "url . append (  \"  /  \"  )  ;", "}", "url . append ( replaceUriTemplateParams ( this . value ,    this . params ,    this . templateParams )  )  ;", "url . append ( createQueryString ( this . params ,    this . templateParams ,     (  ( url . indexOf (  \"  ?  \"  )  )     =  =     (  -  1  )  )  )  )  ;", "String   urlStr    =    url . toString (  )  ;", "if    (  ( this . type )     !  =     ( UrlTag . UrlType . ABSOLUTE )  )     {", "urlStr    =    response . encodeURL ( urlStr )  ;", "}", "urlStr    =    htmlEscape ( urlStr )  ;", "urlStr    =     ( this . javaScriptEscape )     ?    JavaScriptUtils . javaScriptEscape ( urlStr )     :    urlStr ;", "return   urlStr ;", "}", "METHOD_END"], "methodName": ["createUrl"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "String   encoding    =    pageContext . getResponse (  )  . getCharacterEncoding (  )  ;", "for    ( Param   param    :    params )     {", "String   template    =     (  (  . URL _ TEMPLATE _ DELIMITER _ PREFIX )     +     ( param . getName (  )  )  )     +     (  . URL _ TEMPLATE _ DELIMITER _ SUFFIX )  ;", "if    ( uri . contains ( template )  )     {", "usedParams . add ( param . getName (  )  )  ;", "String   value    =    param . getValue (  )  ;", "try    {", "uri    =    uri . replace ( template ,     ( value    !  =    null    ?    UriUtils . encodePath ( value ,    encoding )     :     \"  \"  )  )  ;", "}    catch    ( UnsupportedCharsetException   ex )     {", "throw   new   JspException ( ex )  ;", "}", "} else    {", "template    =     (  (  (  . URL _ TEMPLATE _ DELIMITER _ PREFIX )     +     '  /  '  )     +     ( param . getName (  )  )  )     +     (  . URL _ TEMPLATE _ DELIMITER _ SUFFIX )  ;", "if    ( uri . contains ( template )  )     {", "usedParams . add ( param . getName (  )  )  ;", "String   value    =    param . getValue (  )  ;", "try    {", "uri    =    uri . replace ( template ,     ( value    !  =    null    ?    UriUtils . encodePathSegment ( param . getValue (  )  ,    encoding )     :     \"  \"  )  )  ;", "}    catch    ( UnsupportedCharsetException   ex )     {", "throw   new   JspException ( ex )  ;", "}", "}", "}", "}", "return   uri ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParams"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "if    ( context . startsWith (  \"  /  \"  )  )     {", "this . context    =    context ;", "} else    {", "this . context    =     \"  /  \"     +    context ;", "}", "}", "METHOD_END"], "methodName": ["setContext"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "this . javaScriptEscape    =    javaScriptEscape ;", "}", "METHOD_END"], "methodName": ["setJavaScriptEscape"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "this . scope    =    TagUtils . getScope ( scope )  ;", "}", "METHOD_END"], "methodName": ["setScope"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "if    ( value . contains ( UrlTag . URL _ TYPE _ ABSOLUTE )  )     {", "this . type    =    UrlTag . UrlType . ABSOLUTE ;", "this . value    =    value ;", "} else", "if    ( value . startsWith (  \"  /  \"  )  )     {", "this . type    =    UrlTag . UrlType . CONTEXT _ RELATIVE ;", "this . value    =    value ;", "} else    {", "this . type    =    UrlTag . UrlType . RELATIVE ;", "this . value    =    value ;", "}", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "this . var    =    var ;", "}", "METHOD_END"], "methodName": ["setVar"], "fileName": "org.springframework.web.servlet.tags.UrlTag"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringNoParams"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  ? name = value \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringOneParam"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "usedParams . add (  \" name \"  )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringOneParamAlreadyUsed"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \"  \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  ? name =  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringOneParamEmptyValue"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    false )  ;", "assertEquals (  \"  & name = value \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringOneParamForExsistingQueryString"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue ( null )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  ? name \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringOneParamNullValue"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \"  \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringParamEmptyName"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName ( null )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringParamNullName"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  ? name = value & name = value 2  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringTwoParams"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "params . add ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "params . add ( param )  ;", "St   querySt    =    tag . createQuerySt ( params ,    usedParams ,    true )  ;", "assertEquals (  \"  ? n %  2  0 me = v %  2  6 l %  3 De & name = value 2  \"  ,    querySt )  ;", "}", "METHOD_END"], "methodName": ["createQueryStringUrlEncoding"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "(  ( MockHttpServletRequest )     ( context . getRequest (  )  )  )  . setContextPath (  \"  / app - context \"  )  ;", "tag . setValue (  \"  / url / path \"  )  ;", "tag . doStartTag (  )  ;", "String   uri    =    tag . createUrl (  )  ;", "assertEquals (  \"  / app - context / url / path \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlLocalContext"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . doStartTag (  )  ;", "St   uri    =    tag . createUrl (  )  ;", "assertEquals (  \" url / path \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlRelative"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "(  ( MockHttpServletRequest )     ( context . getRequest (  )  )  )  . setContextPath (  \"  / app - context \"  )  ;", "tag . setValue (  \"  / url / path \"  )  ;", "tag . setContext (  \" some - other - context \"  )  ;", "tag . doStartTag (  )  ;", "String   uri    =    tag . createUrl (  )  ;", "assertEquals (  \"  / some - other - context / url / path \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlRemoteContext"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "(  ( MockHttpServletRequest )     ( context . getRequest (  )  )  )  . setContextPath (  \"  / app - context \"  )  ;", "tag . setValue (  \"  / url / path \"  )  ;", "tag . setContext (  \"  /  \"  )  ;", "tag . doStartTag (  )  ;", "String   uri    =    tag . createUrl (  )  ;", "assertEquals (  \"  / url / path \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlRemoteContextSingleSlash"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "(  ( MockHttpServletRequest )     ( context . getRequest (  )  )  )  . setContextPath (  \"  / app - context \"  )  ;", "tag . setValue (  \"  / url / path \"  )  ;", "tag . setContext (  \"  / some - other - context \"  )  ;", "tag . doStartTag (  )  ;", "String   uri    =    tag . createUrl (  )  ;", "assertEquals (  \"  / some - other - context / url / path \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlRemoteContextWithSlash"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" http :  /  / www . springframework . org /  \"  )  ;", "tag . doStartTag (  )  ;", "String   uri    =    tag . createUrl (  )  ;", "assertEquals (  \" http :  /  / www . springframework . org /  \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlRemoteServer"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path ? foo = bar \"  )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "tag . addParam ( param )  ;", "St   uri    =    tag . createUrl (  )  ;", "assertEquals (  \" url / path ? foo = bar & name = value \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlWithParamAndExistingQueryString"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v   lue \"  )  ;", "tag . addParam ( param )  ;", "St   uri    =    tag . createUrl (  )  ;", "assertEquals (  \" url / path ? name = value & n %  2  0 me = v %  2  0 lue \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlWithParams"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url /  { name }  \"  )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v   lue \"  )  ;", "tag . addParam ( param )  ;", "St   uri    =    tag . createUrl (  )  ;", "assertEquals (  \" url / value ? n %  2  0 me = v %  2  0 lue \"  ,    uri )  ;", "}", "METHOD_END"], "methodName": ["createUrlWithTemplateParams"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . doStartTag (  )  ;", "int   action    =    tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    action )  ;", "}", "METHOD_END"], "methodName": ["doEndTag"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "int   action    =    tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    action )  ;", "}", "METHOD_END"], "methodName": ["doStartTag"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "assertThat ( tag ,    instanceOf ( ParamAware . class )  )  ;", "}", "METHOD_END"], "methodName": ["paramSupport"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url / path \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / path \"  ,    uri )  ;", "assertEquals (  0  ,    usedParams . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsNoParams"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  { name }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / value \"  ,    uri )  ;", "assertEquals (  1  ,    usedParams . size (  )  )  ;", "assertTrue ( usedParams . contains (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithParamMatch"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" value \"  )  ;", "params . add ( param )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  { n   me }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / value \"  ,    uri )  ;", "assertEquals (  1  ,    usedParams . size (  )  )  ;", "assertTrue ( usedParams . contains (  \" n   me \"  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithParamMatchNamePreEncoding"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" v   lue \"  )  ;", "params . add ( param )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  { name }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / v %  2  0 lue \"  ,    uri )  ;", "assertEquals (  1  ,    usedParams . size (  )  )  ;", "assertTrue ( usedParams . contains (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithParamMatchValueEncoded"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" my / Id \"  )  ;", "params . add ( param )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  { name }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / my / Id \"  ,    uri )  ;", "assertEquals (  1  ,    usedParams . size (  )  )  ;", "assertTrue ( usedParams . contains (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithPath"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" my / Id \"  )  ;", "params . add ( param )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  {  / name }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url / my %  2 FId \"  ,    uri )  ;", "assertEquals (  1  ,    usedParams . size (  )  )  ;", "assertTrue ( usedParams . contains (  \" name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithPathSegment"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "List < Param >    params    =    new   LinkedList <  >  (  )  ;", "Set < St >    usedParams    =    new   HashSet <  >  (  )  ;", "St   uri    =    tag . replaceUriTemplateParams (  \" url /  { path }  \"  ,    params ,    usedParams )  ;", "assertEquals (  \" url /  { path }  \"  ,    uri )  ;", "assertEquals (  0  ,    usedParams . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateParamsTemplateWithoutParamMatch"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . setHtmlEscape ( true )  ;", "tag . setJavaScriptEscape ( true )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "tag . addParam ( param )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url \\  \\  / path ? n %  2  0 me = v %  2  6 l %  3 De & amp ; name = value 2  \"  ,    context . getAttribute (  \" var \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setHtmlAndJavaScriptEscapeTrue"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "tag . addParam ( param )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url / path ? n %  2  0 me = v %  2  6 l %  3 De & name = value 2  \"  ,    context . getAttribute (  \" var \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setHtmlEscapeDefault"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . setHtmlEscape ( false )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "tag . addParam ( param )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url / path ? n %  2  0 me = v %  2  6 l %  3 De & name = value 2  \"  ,    context . getAttribute (  \" var \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setHtmlEscapeFalse"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . setHtmlEscape ( true )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "tag . addParam ( param )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url / path ? n %  2  0 me = v %  2  6 l %  3 De & amp ; name = value 2  \"  ,    context . getAttribute (  \" var \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setHtmlEscapeTrue"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . setJavaScriptEscape ( true )  ;", "tag . doStartTag (  )  ;", "Param   param    =    new   Param (  )  ;", "param . setName (  \" n   me \"  )  ;", "param . setValue (  \" v & l = e \"  )  ;", "tag . addParam ( param )  ;", "param    =    new   Param (  )  ;", "param . setName (  \" name \"  )  ;", "param . setValue (  \" value 2  \"  )  ;", "tag . addParam ( param )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url \\  \\  / path ? n %  2  0 me = v %  2  6 l %  3 De & name = value 2  \"  ,    context . getAttribute (  \" var \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setJavaScriptEscapeTrue"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "context    =    createPageContext (  )  ;", "tag    =    new    (  )  ;", "tag . setPageContext ( context )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . doStartTag (  )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url / path \"  ,    context . getAttribute (  \" var \"  ,    PAGE _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["varDefaultScope"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "tag . setValue (  \" url / path \"  )  ;", "tag . setVar (  \" var \"  )  ;", "tag . setScope (  \" request \"  )  ;", "tag . doStartTag (  )  ;", "tag . doEndTag (  )  ;", "assertEquals (  \" url / path \"  ,    context . getAttribute (  \" var \"  ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["varExplicitScope"], "fileName": "org.springframework.web.servlet.tags.UrlTagTests"}, {"methodBody": ["METHOD_START", "{", "return   SelectedValueComparator . isSelected ( getBindStatus (  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["isOptionSelected"], "fileName": "org.springframework.web.servlet.tags.form.AbstractCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "tagWriter . writeAttribute (  \" value \"  ,    processFieldValue ( getName (  )  ,     \" true \"  ,    getInputType (  )  )  )  ;", "if    ( boundValue )     {", "tagWriter . writeAttribute (  \" c \"  ,     \" c \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["renderFromBoolean"], "fileName": "org.springframework.web.servlet.tags.form.AbstractCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "String   displayValue    =    convertToDisplayString ( value )  ;", "tagWriter . writeAttribute (  \" value \"  ,    processFieldValue ( getName (  )  ,    displayValue ,    getInputType (  )  )  )  ;", "if    (  ( isOptionSelected ( value )  )     |  |     (  ( value    !  =    item )     &  &     ( isOptionSelected ( item )  )  )  )     {", "tagWriter . writeAttribute (  \" c \"  ,     \" c \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["renderFromValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "renderFromValue ( value ,    value ,    tagWriter )  ;", "}", "METHOD_END"], "methodName": ["renderFromValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "String   name    =    getName (  )  ;", "return   name    !  =    null    ?    StringUtils . deleteAny ( name ,     \"  [  ]  \"  )     :    null ;", "}", "METHOD_END"], "methodName": ["autogenerateId"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "PropertyEditor   editor    =     ( value    !  =    null )     ?    getBindStatus (  )  . findEditor ( value . getClass (  )  )     :    null ;", "return   getDisplaySt ( value ,    editor )  ;", "}", "METHOD_END"], "methodName": ["convertToDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . bindStatus )     =  =    null )     {", "St   nestedPath    =    getNestedPath (  )  ;", "St   pathToUse    =     ( nestedPath    !  =    null )     ?    nestedPath    +     ( getPath (  )  )     :    getPath (  )  ;", "if    ( pathToUse . endsWith ( NESTED _ PROPERTY _ SEPARATOR )  )     {", "pathToUse    =    pathToUse . subst (  0  ,     (  ( pathToUse . length (  )  )     -     1  )  )  ;", "}", "this . bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    pathToUse ,    false )  ;", "}", "return   this . bindStatus ;", "}", "METHOD_END"], "methodName": ["getBindStatus"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "return   getBindStatus (  )  . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getBoundValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "return   getPropertyPath (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( this . pageContext . getAttribute ( AbstractDataBoundFormElementTag . NESTED _ PATH _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getNestedPath"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "String   resolvedPath    =     (  ( String )     ( evaluate (  \" path \"  ,    this . path )  )  )  ;", "return   resolvedPath    !  =    null    ?    resolvedPath    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "return   getBindStatus (  )  . getEditor (  )  ;", "}", "METHOD_END"], "methodName": ["getPropertyEditor"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "String   expression    =    getBindStatus (  )  . getExpression (  )  ;", "return   expression    !  =    null    ?    expression    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["getPropertyPath"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "RequestDataValueProcessor   processor    =    getRequestContext (  )  . getRequestDataValueProcessor (  )  ;", "SRequest   request    =    this . pageContext . getRequest (  )  ;", "if    (  ( processor    !  =    null )     &  &     ( request   instanceof   HttpSRequest )  )     {", "value    =    processor . processFormFieldValue (  (  ( HttpSRequest )     ( request )  )  ,    name ,    value ,    type )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["processFieldValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "Object   id    =    evaluate (  \" id \"  ,    getId (  )  )  ;", "if    ( id    !  =    null )     {", "St   idSt    =    id . toSt (  )  ;", "return   StUtils . hasText ( idSt )     ?    idSt    :    null ;", "}", "return   autogenerateId (  )  ;", "}", "METHOD_END"], "methodName": ["resolveId"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "this . path    =    path ;", "}", "METHOD_END"], "methodName": ["setPath"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "writeOptionalAttribute ( tagWriter ,     \" id \"  ,    resolveId (  )  )  ;", "writeOptionalAttribute ( tagWriter ,     \" name \"  ,    getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeDefaultAttributes"], "fileName": "org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag"}, {"methodBody": ["METHOD_START", "{", "return   new   TagWriter ( this . pageContext )  ;", "}", "METHOD_END"], "methodName": ["createTagWriter"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTag"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["evaluate"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTag"}, {"methodBody": ["METHOD_START", "{", "return   ValueFormatter . getDisplayString ( value ,    isHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTag"}, {"methodBody": ["METHOD_START", "{", "return   ValueFormatter . getDisplayString ( value ,    propertyEditor ,    isHtmlEscape (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTag"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "tagWriter . writeOptionalAttributeValue ( attributeName ,    getDisplaySt ( evaluate ( attributeName ,    value )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeOptionalAttribute"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . formTag ;", "}", "METHOD_END"], "methodName": ["getFormTag"], "fileName": "org.springframework.web.servlet.tags.form.AbstractFormTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "bContent . writeOut ( bContent . getEnclosingWriter (  )  )  ;", "}    catch    ( IOException   ex )     {", "throw   new   JspException (  \" Unable   to   write   buffered   b   content .  \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["flushBufferedBodyContent"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag"}, {"methodBody": ["METHOD_START", "{", "flushBufferedBodyContent ( this . bodyContent )  ;", "}", "METHOD_END"], "methodName": ["renderFromBodyContent"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["shouldRender"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag"}, {"methodBody": ["METHOD_START", "{", "return   this . cssClass ;", "}", "METHOD_END"], "methodName": ["getCssClass"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . cssErrorClass ;", "}", "METHOD_END"], "methodName": ["getCssErrorClass"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . cssStyle ;", "}", "METHOD_END"], "methodName": ["getCssStyle"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . dir ;", "}", "METHOD_END"], "methodName": ["getDir"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . dynamicAttributes ;", "}", "METHOD_END"], "methodName": ["getDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . lang ;", "}", "METHOD_END"], "methodName": ["getLang"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onclick ;", "}", "METHOD_END"], "methodName": ["getOnclick"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . ondblclick ;", "}", "METHOD_END"], "methodName": ["getOndblclick"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onkeydown ;", "}", "METHOD_END"], "methodName": ["getOnkeydown"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onkeypress ;", "}", "METHOD_END"], "methodName": ["getOnkeypress"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onkeyup ;", "}", "METHOD_END"], "methodName": ["getOnkeyup"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onmousedown ;", "}", "METHOD_END"], "methodName": ["getOnmousedown"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onmousemove ;", "}", "METHOD_END"], "methodName": ["getOnmousemove"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onmouseout ;", "}", "METHOD_END"], "methodName": ["getOnmouseout"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onmouseover ;", "}", "METHOD_END"], "methodName": ["getOnmouseover"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onmouseup ;", "}", "METHOD_END"], "methodName": ["getOnmouseup"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . tabindex ;", "}", "METHOD_END"], "methodName": ["getTabindex"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . title ;", "}", "METHOD_END"], "methodName": ["getTitle"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidDynamicAttribute"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getBindStatus (  )  . isError (  )  )     &  &     ( StringUtils . hasText ( getCssErrorClass (  )  )  )  )     {", "return   ObjectUtils . getDisplayString ( evaluate (  \" cssErrorClass \"  ,    getCssErrorClass (  )  )  )  ;", "} else    {", "return   ObjectUtils . getDisplayString ( evaluate (  \" cssClass \"  ,    getCssClass (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveCssClass"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . cssClass    =    cssClass ;", "}", "METHOD_END"], "methodName": ["setCssClass"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . cssErrorClass    =    cssErrorClass ;", "}", "METHOD_END"], "methodName": ["setCssErrorClass"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . cssStyle    =    cssStyle ;", "}", "METHOD_END"], "methodName": ["setCssStyle"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . dir    =    dir ;", "}", "METHOD_END"], "methodName": ["setDir"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . lang    =    lang ;", "}", "METHOD_END"], "methodName": ["setLang"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onclick    =    onclick ;", "}", "METHOD_END"], "methodName": ["setOnclick"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . ondblclick    =    ondblclick ;", "}", "METHOD_END"], "methodName": ["setOndblclick"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onkeydown    =    onkeydown ;", "}", "METHOD_END"], "methodName": ["setOnkeydown"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onkeypress    =    onkeypress ;", "}", "METHOD_END"], "methodName": ["setOnkeypress"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onkeyup    =    onkeyup ;", "}", "METHOD_END"], "methodName": ["setOnkeyup"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onmousedown    =    onmousedown ;", "}", "METHOD_END"], "methodName": ["setOnmousedown"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onmousemove    =    onmousemove ;", "}", "METHOD_END"], "methodName": ["setOnmousemove"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onmouseout    =    onmouseout ;", "}", "METHOD_END"], "methodName": ["setOnmouseout"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onmouseover    =    onmouseover ;", "}", "METHOD_END"], "methodName": ["setOnmouseover"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onmouseup    =    onmouseup ;", "}", "METHOD_END"], "methodName": ["setOnmouseup"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . tabindex    =    tabindex ;", "}", "METHOD_END"], "methodName": ["setTabindex"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "this . title    =    title ;", "}", "METHOD_END"], "methodName": ["setTitle"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "tagWriter . writeOptionalAttributeValue ( AbstractHtmlElementTag . CLASS _ ATTRIBUTE ,    resolveCssClass (  )  )  ;", "tagWriter . writeOptionalAttributeValue ( AbstractHtmlElementTag . STYLE _ ATTRIBUTE ,    ObjectUtils . getDisplayString ( evaluate (  \" cssStyle \"  ,    getCssStyle (  )  )  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . LANG _ ATTRIBUTE ,    getLang (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . TITLE _ ATTRIBUTE ,    getTitle (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . DIR _ ATTRIBUTE ,    getDir (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . TABINDEX _ ATTRIBUTE ,    getTabindex (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONCLICK _ ATTRIBUTE ,    getOnclick (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONDBLCLICK _ ATTRIBUTE ,    getOndblclick (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONMOUSEDOWN _ ATTRIBUTE ,    getOnmousedown (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONMOUSEUP _ ATTRIBUTE ,    getOnmouseup (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONMOUSEOVER _ ATTRIBUTE ,    getOnmouseover (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONMOUSEMOVE _ ATTRIBUTE ,    getOnmousemove (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONMOUSEOUT _ ATTRIBUTE ,    getOnmouseout (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONKEYPRESS _ ATTRIBUTE ,    getOnkeypress (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONKEYUP _ ATTRIBUTE ,    getOnkeyup (  )  )  ;", "writeOptionalAttribute ( tagWriter ,    AbstractHtmlElementTag . ONKEYDOWN _ ATTRIBUTE ,    getOnkeydown (  )  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( this . dynamicAttributes )  )  )     {", "for    ( String   attr    :    this . dynamicAttributes . keySet (  )  )     {", "tagWriter . writeOptionalAttributeValue ( attr ,    getDisplayString ( this . dynamicAttributes . get ( attr )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["writeOptionalAttributes"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  (  (  (  \" Unexpected   attribute    '  \"     +    attributeName )     +     \"  '    in   output    '  \"  )     +    output )     +     \"  '  .  \"  )  ,     (  !  ( output . contains (  ( attributeName    +     \"  =  \\  \"  \"  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertAttributeNotPresent"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "String   contents    =    output . substring (  (  ( output . indexOf (  \"  >  \"  )  )     +     1  )  ,    output . lastIndexOf (  \"  <  \"  )  )  ;", "assertTrue (  (  (  (  (  \" Expected   to   find    '  \"     +    desiredContents )     +     \"  '    in   the   contents   of   block   tag    '  \"  )     +    output )     +     \"  '  \"  )  ,    contents . contains ( desiredContents )  )  ;", "}", "METHOD_END"], "methodName": ["assertBlockTagContains"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "String   attributeString    =     (  ( attributeName    +     \"  =  \\  \"  \"  )     +    attributeValue )     +     \"  \\  \"  \"  ;", "assertTrue (  (  (  (  (  (  (  \" Expected   to   find   attribute    '  \"     +    attributeName )     +     \"  '    with   value    '  \"  )     +    attributeValue )     +     \"  '    in   output    +     '  \"  )     +    output )     +     \"  '  \"  )  ,    output . contains ( attributeString )  )  ;", "}", "METHOD_END"], "methodName": ["assertContainsAttribute"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "MockPageContext   pageContext    =    createPageContext (  )  ;", "MockHttpSRequest   request    =     (  ( MockHttpSRequest )     ( pageContext . getRequest (  )  )  )  ;", "(  ( StaticWebApplicationContext )     ( RequestContextUtils . findWebApplicationContext ( request )  )  )  . registerSingleton (  \" requestDataValueProcessor \"  ,    RequestDataValueProcessorWrapper . class )  ;", "extendRequest ( request )  ;", "extendPageContext ( pageContext )  ;", "RequestContext   requestContext    =    new   JspAwareRequestContext ( pageContext )  ;", "pageContext . setAttribute ( RequestContextAwareTag . REQUEST _ CONTEXT _ PAGE _ ATTRIBUTE ,    requestContext )  ;", "return   pageContext ;", "}", "METHOD_END"], "methodName": ["createAndPopulatePageContext"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    Collections . singletonMap (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    errors )  ;", "MockPageContext   pageContext    =    getPageContext (  )  ;", "RequestContext   context    =    new   RequestContext (  (  ( HttpServletRequest )     ( pageContext . getRequest (  )  )  )  ,    model )  ;", "pageContext . setAttribute ( RequestContextAwareTag . REQUEST _ CONTEXT _ PAGE _ ATTRIBUTE ,    context )  ;", "}", "METHOD_END"], "methodName": ["exposeBindingResult"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "RequestDataValueProcessor   mockProcessor    =    mock ( RequestDataValueProcessor . class )  ;", "HttpSRequest   request    =     (  ( HttpSRequest )     ( getPageContext (  )  . getRequest (  )  )  )  ;", "WebApplicationContext   wac    =    RequestContextUtils . findWebApplicationContext ( request )  ;", "wac . getBean ( RequestDataValueProcessorWrapper . class )  . setRequestDataValueProcessor ( mockProcessor )  ;", "return   mockProcessor ;", "}", "METHOD_END"], "methodName": ["getMockRequestDataValueProcessor"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . writer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getOutput"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . pageContext ;", "}", "METHOD_END"], "methodName": ["getPageContext"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RequestContext )     ( getPageContext (  )  . getAttribute ( RequestContextAwareTag . REQUEST _ CONTEXT _ PAGE _ ATTRIBUTE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRequestContext"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . writer ;", "}", "METHOD_END"], "methodName": ["getWriter"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "this . writer    =    new   StringWriter (  )  ;", "this . pageContext    =    createAndPopulatePageContext (  )  ;", "onSetUp (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlElementTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . accesskey ;", "}", "METHOD_END"], "methodName": ["getAccesskey"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onblur ;", "}", "METHOD_END"], "methodName": ["getOnblur"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onchange ;", "}", "METHOD_END"], "methodName": ["getOnchange"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onfocus ;", "}", "METHOD_END"], "methodName": ["getOnfocus"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . readonly ;", "}", "METHOD_END"], "methodName": ["isReadonly"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . accesskey    =    accesskey ;", "}", "METHOD_END"], "methodName": ["setAccesskey"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . disabled    =    disabled ;", "}", "METHOD_END"], "methodName": ["setDisabled"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onblur    =    onblur ;", "}", "METHOD_END"], "methodName": ["setOnblur"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onchange    =    onchange ;", "}", "METHOD_END"], "methodName": ["setOnchange"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . onfocus    =    onfocus ;", "}", "METHOD_END"], "methodName": ["setOnfocus"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "this . readonly    =    readonly ;", "}", "METHOD_END"], "methodName": ["setReadonly"], "fileName": "org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . delimiter ;", "}", "METHOD_END"], "methodName": ["getDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . element ;", "}", "METHOD_END"], "methodName": ["getElement"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . itemLabel ;", "}", "METHOD_END"], "methodName": ["getItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . itemValue ;", "}", "METHOD_END"], "methodName": ["getItemValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "this . delimiter    =    delimiter ;", "}", "METHOD_END"], "methodName": ["setDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( element ,     \"  ' element '    cannot   be   null   or   blank \"  )  ;", "this . element    =    element ;", "}", "METHOD_END"], "methodName": ["setElement"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( itemLabel ,     \"  ' itemLabel '    must   not   be   empty \"  )  ;", "this . itemLabel    =    itemLabel ;", "}", "METHOD_END"], "methodName": ["setItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( itemValue ,     \"  ' itemValue '    must   not   be   empty \"  )  ;", "this . itemValue    =    itemValue ;", "}", "METHOD_END"], "methodName": ["setItemValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( items ,     \"  ' items '    must   not   be   null \"  )  ;", "this . items    =    items ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "tagWriter . startTag ( getElement (  )  )  ;", "if    ( itemIndex    >     0  )     {", "Object   resolvedDelimiter    =    evaluate (  \" delimiter \"  ,    getDelimiter (  )  )  ;", "if    ( resolvedDelimiter    !  =    null )     {", "tagWriter . appendValue ( resolvedDelimiter . toString (  )  )  ;", "}", "}", "tagWriter . startTag (  \" input \"  )  ;", "String   id    =    resolveId (  )  ;", "writeOptionalAttribute ( tagWriter ,     \" id \"  ,    id )  ;", "writeOptionalAttribute ( tagWriter ,     \" name \"  ,    getName (  )  )  ;", "writeOptionalAttributes ( tagWriter )  ;", "tagWriter . writeAttribute (  \" type \"  ,    getInputType (  )  )  ;", "renderFromValue ( item ,    value ,    tagWriter )  ;", "tagWriter . endTag (  )  ;", "tagWriter . startTag (  \" label \"  )  ;", "tagWriter . writeAttribute (  \" for \"  ,    id )  ;", "tagWriter . appendValue ( convertToDisplayString ( label )  )  ;", "tagWriter . endTag (  )  ;", "tagWriter . endTag (  )  ;", "}", "METHOD_END"], "methodName": ["writeElementTag"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "Object   mapKey    =    entry . getKey (  )  ;", "Object   mapValue    =    entry . getValue (  )  ;", "BeanWrapper   mapKeyWrapper    =    PropertyAccessorFactory . forBeanPropertyAccess ( mapKey )  ;", "BeanWrapper   mapValueWrapper    =    PropertyAccessorFactory . forBeanPropertyAccess ( mapValue )  ;", "Object   renderValue    =     ( valueProperty    !  =    null )     ?    mapKeyWrapper . getPropertyValue ( valueProperty )     :    mapKey . toString (  )  ;", "Object   renderLabel    =     ( labelProperty    !  =    null )     ?    mapValueWrapper . getPropertyValue ( labelProperty )     :    mapValue . toString (  )  ;", "write ( tagWriter ,    mapKey ,    renderValue ,    renderLabel ,    itemIndex )  ;", "}", "METHOD_END"], "methodName": ["writeMapEntry"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "BeanWrapper   wrapper    =    PropertyAccessorFactory . forBeanPropertyAccess ( item )  ;", "Object   renderValue ;", "if    ( valueProperty    !  =    null )     {", "renderValue    =    wrapper . getPropertyValue ( valueProperty )  ;", "} else", "if    ( item   instanceof   Enum )     {", "renderValue    =     (  ( Enum <  ?  >  )     ( item )  )  . name (  )  ;", "} else    {", "renderValue    =    item ;", "}", "Object   renderLabel    =     ( labelProperty    !  =    null )     ?    wrapper . getPropertyValue ( labelProperty )     :    item ;", "write ( tagWriter ,    item ,    renderValue ,    renderLabel ,    itemIndex )  ;", "}", "METHOD_END"], "methodName": ["writeObjectEntry"], "fileName": "org.springframework.web.servlet.tags.form.AbstractMultiCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . label ;", "}", "METHOD_END"], "methodName": ["getLabel"], "fileName": "org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   this . value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "this . label    =    label ;", "}", "METHOD_END"], "methodName": ["setLabel"], "fileName": "org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag"}, {"methodBody": ["METHOD_START", "{", "return   testEnum ;", "}", "METHOD_END"], "methodName": ["getTestEnum"], "fileName": "org.springframework.web.servlet.tags.form.BeanWithEnum"}, {"methodBody": ["METHOD_START", "{", "this . testEnum    =    customEnum ;", "}", "METHOD_END"], "methodName": ["setTestEnum"], "fileName": "org.springframework.web.servlet.tags.form.BeanWithEnum"}, {"methodBody": ["METHOD_START", "{", "return    \" Submit \"  ;", "}", "METHOD_END"], "methodName": ["getDefaultValue"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "return    \" submit \"  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "return   this . value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "return   this . disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "this . disabled    =    disabled ;", "}", "METHOD_END"], "methodName": ["setDisabled"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "String   valueToUse    =     (  ( getValue (  )  )     !  =    null )     ?    getValue (  )     :    getDefaultValue (  )  ;", "tagWriter . writeAttribute (  \" value \"  ,    processFieldValue ( getName (  )  ,    valueToUse ,    getType (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["writeValue"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Tag   not   closed   properly \"  ,    output . endsWith (  \"  <  / button >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Tag   not   opened   properly \"  ,    output . startsWith (  \"  < button    \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( EVAL _ BODY _ INCLUDE ,    this . tag . doStartTag (  )  )  ;", "assertEquals ( EVAL _ PAGE ,    this . tag . doEndTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" My   Id \"  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" My   Name \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" submit \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" My    \"  )  ;", "assertAttributeNotPresent ( output ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["buttonTag"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ButtonTag (  )     {", "@ Override", "protected   TagWriter   createTagWriter (  )     {", "return   new   TagWriter ( writer )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createTag"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setDisabled ( true )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" disabled \"  ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["disabled"], "fileName": "org.springframework.web.servlet.tags.form.ButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" otherColours \"  )  ;", "this . tag . setValue (  \" PURPLE \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" otherColours \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfColoursNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" otherColours \"  )  ;", "this . tag . setValue (  \" RED \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" otherColours \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfColoursSelected"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   Pet (  \" Rudiger \"  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPets"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue (  \" Spot \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsAsString"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue (  \" Santa ' s   Little   Helper \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsAsStringNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   Pet (  \" Santa ' s   Little   Helper \"  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Santa ' s   Little   Helper \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   ItemPet (  \" Rudiger \"  )  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElement . COMMAND _ NAME )  ;", "PropertyEditorSupport   editor    =    new   ItemPet . CustomEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( ItemPet . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElement . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" email \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" email \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "Calendar   cal    =    Calendar . getInstance (  )  ;", "calt ( Calendar . YEAR ,     1  0  )  ;", "calt ( Calendar . MONTH ,     1  0  )  ;", "calt ( Calendar . DATE ,     1  0  )  ;", "calt ( Calendar . HOUR ,     1  0  )  ;", "calt ( Calendar . MINUTE ,     1  0  )  ;", "calt ( Calendar . SECOND ,     1  0  )  ;", "return   cal . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someBoolean \"  )  ;", "this . tag . setDisabled ( true )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   rendered   incorrectly \"  ,     1  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   cElement    =     (  ( Element )     ( rootElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someBoolean \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["hiddenElementOmittedOnDisabled"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someList \"  )  ;", "this . tag . setValue (  \" foo \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someList \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withCollection"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someMap [ key ]  \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   not   rendered \"  ,     2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   cElement    =     (  ( Element )     ( rootElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someMapkey 1  \"  ,    cElement . attribute (  \" id \"  )  . getValue (  )  )  ;", "assertEquals (  \" someMap [ key ]  \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withIndexedBooleanObjectNotChecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setValue (  \" foo \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueChecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someIntegerArray \"  )  ;", "this . tag . setValue (  \"           1  \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyIntegerEditor   editor    =    new    . MyIntegerEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( Integer . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "assertEquals (  1  ,    editor . count )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someIntegerArray \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"           1  \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueIntegerWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setValue (  \" abc \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" abc \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueUnchecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setValue (  \"          foo \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyStringTrimmerEditor   editor    =    new    . MyStringTrimmerEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( String . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "assertEquals (  1  ,    editor . count )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          foo \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setPath (  \" name \"  )  ;", "this . doStartTag (  )  ;", "fail (  \" Should   not   be   able   to   render   with   a   null   value   when   binding   to   a   non - boolean .  \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "}", "}", "METHOD_END"], "methodName": ["withNullValue"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" date \"  )  ;", "this . tag . setValue ( getDate (  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" date \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals ( getDate (  )  . toString (  )  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withObjectChecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" date \"  )  ;", "Date   date    =    new   Date (  )  ;", "this . tag . setValue ( date )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" date \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "assertEquals ( date . toString (  )  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withObjectUnchecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setName (  \" Rob   Harrop \"  )  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setValue (  \"          Rob   Harrop \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElement . COMMAND _ NAME )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( String . class ,    new   StringTrimmerEditor ( false )  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElement . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" name \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          Rob   Harrop \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueAndEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" jedi \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" jedi \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueBooleanChecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someBoolean \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   not   rendered \"  ,     2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   cElement    =     (  ( Element )     ( rootElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someBoolean 1  \"  ,    cElement . attribute (  \" id \"  )  . getValue (  )  )  ;", "assertEquals (  \" someBoolean \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueBooleanObjectChecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" someBoolean \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   not   rendered \"  ,     2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   cElement    =     (  ( Element )     ( rootElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someBoolean \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    cElement . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    cElement . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueBooleanObjectCheckedAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setSomeBoolean ( Boolean . FALSE )  ;", "this . tag . setPath (  \" someBoolean \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someBoolean \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueBooleanObjectUnchecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setJedi ( false )  ;", "this . tag . setPath (  \" jedi \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" jedi \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" true \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueBooleanUnchecked"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setName (  \" Rob   Harrop \"  )  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setValue (  \" Rob   Harrop \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" name \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rob   Harrop \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueNotNull"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setName ( null )  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setValue (  \" Rob   Harrop \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   cElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" name \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( cElement . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" Rob   Harrop \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSingleValueNull"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someSet \"  )  ;", "List   allPets    =    new   ArrayList (  )  ;", "allPets . add ( new   ItemPet (  \" PET 1  \"  )  )  ;", "allPets . add ( new   ItemPet (  \" PET 2  \"  )  )  ;", "allPets . add ( new   ItemPet (  \" PET 3  \"  )  )  ;", "this . tag . setItems ( allPets )  ;", "this . tag . setItemValue (  \" name \"  )  ;", "this . tag . setItemLabel (  \" label \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNotNull (  \" should   be   checked \"  ,    cElement 1  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 1  \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 1  \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNotNull (  \" should   be   checked \"  ,    cElement 2  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 2  \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 2  \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" PET 3  \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 3  \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfItemPets"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "List   allPets    =    new   ArrayList (  )  ;", "allPets . add ( new   ItemPet (  \" Rudiger \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Spot \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Checkers \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Fluffy \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Mufty \"  )  )  ;", "this . tag . setItems ( allPets )  ;", "this . tag . setItemValue (  \" name \"  )  ;", "this . tag . setItemLabel (  \" label \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" RUDIGER \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Spot \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" SPOT \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" Checkers \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" CHECKERS \"  ,    spanElement 3  . getStringValue (  )  )  ;", "Element   spanElement 4     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  3  )  )  )  ;", "Element   cElement 4     =     (  ( Element )     ( spanElement 4  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 4  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 4  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement 4  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 4  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Fluffy \"  ,    cElement 4  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FLUFFY \"  ,    spanElement 4  . getStringValue (  )  )  ;", "Element   spanElement 5     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  4  )  )  )  ;", "Element   cElement 5     =     (  ( Element )     ( spanElement 5  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 5  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 5  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    cElement 5  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 5  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Mufty \"  ,    cElement 5  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" MUFTY \"  ,    spanElement 5  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPets"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "List   allPets    =    new   ArrayList (  )  ;", "allPets . add ( new   ItemPet (  \" Rudiger \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Spot \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Checkers \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Fluffy \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Mufty \"  )  )  ;", "this . tag . setItems ( allPets )  ;", "this . tag . setItemLabel (  \" label \"  )  ;", "this . tag . setId (  \" myId \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElement . COMMAND _ NAME )  ;", "PropertyEditorSupport   editor    =    new   ItemPet . CustomEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( ItemPet . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElement . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   checkboxElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 1  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    checkboxElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" RUDIGER \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   checkboxElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 2  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Spot \"  ,    checkboxElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" SPOT \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   checkboxElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 3  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    checkboxElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" Checkers \"  ,    checkboxElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" CHECKERS \"  ,    spanElement 3  . getStringValue (  )  )  ;", "Element   spanElement 4     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  3  )  )  )  ;", "Element   checkboxElement 4     =     (  ( Element )     ( spanElement 4  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 4  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 4  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement 4  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 4  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Fluffy \"  ,    checkboxElement 4  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FLUFFY \"  ,    spanElement 4  . getStringValue (  )  )  ;", "Element   spanElement 5     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  4  )  )  )  ;", "Element   checkboxElement 5     =     (  ( Element )     ( spanElement 5  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 5  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 5  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement 5  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 5  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Mufty \"  ,    checkboxElement 5  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" MUFTY \"  ,    spanElement 5  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" email \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" email \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "Calendar   cal    =    Calendar . getInstance (  )  ;", "calt ( Calendar . YEAR ,     1  0  )  ;", "calt ( Calendar . MONTH ,     1  0  )  ;", "calt ( Calendar . DATE ,     1  0  )  ;", "calt ( Calendar . HOUR ,     1  0  )  ;", "calt ( Calendar . MINUTE ,     1  0  )  ;", "calt ( Calendar . SECOND ,     1  0  )  ;", "return   cal . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setDisabled ( true )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   rendered   incorrectly \"  ,     3  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   spanElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement    =     (  ( Element )     ( spanElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" disabled \"  ,    cElement . attribute (  \" disabled \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["hiddenElementOmittedOnDisabled"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setElement (  \" element \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" element \"  ,    spanElement . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["spanElementCustomizable"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArray"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    cElement 1  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    cElement 1  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    cElement 2  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    cElement 2  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    cElement 3  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    cElement 3  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArrayAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setDelimiter (  \"  < br /  >  \"  )  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   delimiterElement 1     =    spanElement 1  . element (  \" br \"  )  ;", "assertNull ( delimiterElement 1  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   delimiterElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" br \"  ,    delimiterElement 2  . getName (  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  1  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   delimiterElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" br \"  ,    delimiterElement 3  . getName (  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  1  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArrayWithDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "Map   m    =    new   LinkedHashMap (  )  ;", "m . put (  \" foo \"  ,     \" FOO \"  )  ;", "m . put (  \" bar \"  ,     \" BAR \"  )  ;", "m . put (  \" baz \"  ,     \" BAZ \"  )  ;", "this . tag . setItems ( m )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FOO \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" BAR \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" BAZ \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueMap"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "String   delimiter    =     \"     |     \"  ;", "this . tag . setDelimiter ( delimiter )  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "Map   m    =    new   LinkedHashMap (  )  ;", "m . put (  \" foo \"  ,     \" FOO \"  )  ;", "m . put (  \" bar \"  ,     \" BAR \"  )  ;", "m . put (  \" baz \"  ,     \" BAZ \"  )  ;", "this . tag . setItems ( m )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FOO \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  ( delimiter    +     \" BAR \"  )  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  ( delimiter    +     \" BAZ \"  )  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueMapWithDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \"          foo \"  ,     \"          bar \"  ,     \"          baz \"     }  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyStringTrimmerEditor   editor    =    new    . MyStringTrimmerEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( String . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "assertEquals (  3  ,    editor . allProcessedValues . size (  )  )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   checkboxElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 1  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          foo \"  ,    checkboxElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   checkboxElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 2  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          bar \"  ,    checkboxElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   checkboxElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 3  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    checkboxElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \"          baz \"  ,    checkboxElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \"          foo \"  ,     \"          bar \"  ,     \"          baz \"     }  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", "FormattingConversionService   cs    =    new   FormattingConversionService (  )  ;", "cs . addFormatterForFieldType ( String . class ,    new   format . Formatter < String >  (  )     {", "@ Override", "public   String   print ( String   object ,    Locale   locale )     {", "return   object ;", "}", "@ Override", "public   String   parse ( String   text ,    Locale   locale )    throws   ParseException    {", "return   text . trim (  )  ;", "}", "}  )  ;", "bindingResult . initConversion ( cs )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   checkboxElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 1  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          foo \"  ,    checkboxElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   checkboxElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 2  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          bar \"  ,    checkboxElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   checkboxElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 3  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    checkboxElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \"          baz \"  ,    checkboxElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueWithFormatter"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" FOO \"  ,     \" BAR \"  ,     \" BAZ \"     }  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyLowerCaseEditor   editor    =    new    . MyLowerCaseEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( String . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   checkboxElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 1  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" FOO \"  ,    checkboxElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   checkboxElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 2  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" BAR \"  ,    checkboxElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   checkboxElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement 3  . getName (  )  )  ;", "assertEquals (  \" checkbox \"  ,    checkboxElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    checkboxElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    checkboxElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" BAZ \"  ,    checkboxElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueWithReverseEditor"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setPath (  \" name \"  )  ;", "this . doStartTag (  )  ;", "fail (  \" Should   not   be   able   to   render   with   a   null   value   when   binding   to   a   non - boolean .  \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["withNullValue"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someSet \"  )  ;", "Map   m    =    new   LinkedHashMap (  )  ;", "m . put ( new   ItemPet (  \" PET 1  \"  )  ,     \" PET 1 Label \"  )  ;", "m . put ( new   ItemPet (  \" PET 2  \"  )  ,     \" PET 2 Label \"  )  ;", "m . put ( new   ItemPet (  \" PET 3  \"  )  ,     \" PET 3 Label \"  )  ;", "this . tag . setItems ( m )  ;", "tag . setItemValue (  \" name \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   cElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 1  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 1  \"  ,    cElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 1 Label \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   cElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 2  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    cElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 2  \"  ,    cElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 2 Label \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   cElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    cElement 3  . getName (  )  )  ;", "assertEquals (  \" c \"  ,    cElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" someSet \"  ,    cElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    cElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" PET 3  \"  ,    cElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" PET 3 Label \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withPetItemsMap"], "fileName": "org.springframework.web.servlet.tags.form.CheckboxesTagTests"}, {"methodBody": ["METHOD_START", "{", "List   countries    =    new   ArrayList (  )  ;", "countries . add (  . COUNTRY _ AT )  ;", "countries . add (  . COUNTRY _ NL )  ;", "countries . add (  . COUNTRY _ UK )  ;", "countries . add (  . COUNTRY _ US )  ;", "return   countries ;", "}", "METHOD_END"], "methodName": ["getCountries"], "fileName": "org.springframework.web.servlet.tags.form.Country"}, {"methodBody": ["METHOD_START", "{", "if    ( Country . COUNTRY _ AT . isoCode . equals ( isoCode )  )     {", "return   Country . COUNTRY _ AT ;", "}", "if    ( Country . COUNTRY _ NL . isoCode . equals ( isoCode )  )     {", "return   Country . COUNTRY _ NL ;", "}", "if    ( Country . COUNTRY _ UK . isoCode . equals ( isoCode )  )     {", "return   Country . COUNTRY _ UK ;", "}", "if    ( Country . COUNTRY _ US . isoCode . equals ( isoCode )  )     {", "return   Country . COUNTRY _ US ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getCountryWithIsoCode"], "fileName": "org.springframework.web.servlet.tags.form.Country"}, {"methodBody": ["METHOD_START", "{", "return   this . isoCode ;", "}", "METHOD_END"], "methodName": ["getIsoCode"], "fileName": "org.springframework.web.servlet.tags.form.Country"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.tags.form.Country"}, {"methodBody": ["METHOD_START", "{", "return   this . delimiter ;", "}", "METHOD_END"], "methodName": ["getDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTag"}, {"methodBody": ["METHOD_START", "{", "return   this . element ;", "}", "METHOD_END"], "methodName": ["getElement"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTag"}, {"methodBody": ["METHOD_START", "{", "this . delimiter    =    delimiter ;", "}", "METHOD_END"], "methodName": ["setDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( element ,     \"  ' element '    cannot   be   null   or   blank \"  )  ;", "this . element    =    element ;", "}", "METHOD_END"], "methodName": ["setElement"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTag"}, {"methodBody": ["METHOD_START", "{", "Errors   errors    =    new   BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "String   bodyContent    =     \" Foo \"  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "assertEquals ( bodyContent ,    getOutput (  )  )  ;", "assertNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["asBodyTag"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   existingAttribute    =     \" something \"  ;", "getPageContext (  )  . setAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE ,    existingAttribute ,    APPLICATION _ SCOPE )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "assertTrue (  (  ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )    instanceof   List )  )  ;", "String   bodyContent    =     \" Foo \"  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "assertEquals ( bodyContent ,    getOutput (  )  )  ;", "assertEquals ( existingAttribute ,    getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE ,    APPLICATION _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithErrorsAndExistingMessagesAttributeInNonPageScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   existingAttribute    =     \" something \"  ;", "getPageContext (  )  . setAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE ,    existingAttribute )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "assertTrue (  (  ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )    instanceof   List )  )  ;", "String   bodyContent    =     \" Foo \"  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "assertEquals ( bodyContent ,    getOutput (  )  )  ;", "assertEquals ( existingAttribute ,    getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithExistingMessagesAttribute"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered ( APPLICATION _ SCOPE )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithNoErrorsAndExistingMessagesAttributeInApplicationScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered ( PAGE _ SCOPE )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithNoErrorsAndExistingMessagesAttributeInPageScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered ( REQUEST _ SCOPE )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithNoErrorsAndExistingMessagesAttributeInRequestScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered ( SESSION _ SCOPE )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithNoErrorsAndExistingMessagesAttributeInSessionScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . endsWith (  (  (  \"  <  /  \"     +     ( this . tag . getElement (  )  )  )     +     \"  >  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertElementTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . startsWith (  (  (  \"  <  \"     +     ( this . tag . getElement (  )  )  )     +     \"     \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertElementTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   existingAttribute    =     \" something \"  ;", "getPageContext (  )  . setAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE ,    existingAttribute ,    scope )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  0  ,    output . length (  )  )  ;", "assertEquals ( existingAttribute ,    getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE ,    scope )  )  ;", "}", "METHOD_END"], "methodName": ["assertWhenNoErrorsExistingMessagesInScopeAreNotClobbered"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath ( null )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . reject (  \" some . code \"  ,     \" object   error \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" field   error \"  )  ;", "exposeBindingResult ( errors )  ;", "this . tag . doStartTag (  )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . contains (  \" id =  \\  \" testBean . errors \\  \"  \"  )  )  ;", "assertTrue ( output . contains (  \" object   error \"  )  )  ;", "assertFalse ( output . contains (  \" field   error \"  )  )  ;", "}", "METHOD_END"], "methodName": ["omittedPathMatchesObjectErrorsOnly"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . reject (  \" some . code \"  ,     \" object   error \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" field   error \"  )  ;", "exposeBindingResult ( errors )  ;", "this . tag . doStartTag (  )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . contains (  \" id =  \\  \" name . errors \\  \"  \"  )  )  ;", "assertFalse ( output . contains (  \" object   error \"  )  )  ;", "assertTrue ( output . contains (  \" field   error \"  )  )  ;", "}", "METHOD_END"], "methodName": ["specificPathMatchesSpecificFieldOnly"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \"  *  \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "errors . reject (  \" some . code \"  ,     \" object   error \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" field   error \"  )  ;", "exposeBindingResult ( errors )  ;", "this . tag . doStartTag (  )  ;", "assertNotNull ( getPageContext (  )  . getAttribute ( ErrorsTag . MESSAGES _ ATTRIBUTE )  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . contains (  \" id =  \\  \" testBean . errors \\  \"  \"  )  )  ;", "assertTrue ( output . contains (  \" object   error \"  )  )  ;", "assertTrue ( output . contains (  \" field   error \"  )  )  ;", "}", "METHOD_END"], "methodName": ["starMatchesAllErrors"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \"  < br /  >  \"  )  ;", "assertBlockTagContains ( output ,     \" Default   Message \"  )  ;", "assertBlockTagContains ( output ,     \" Too   Short \"  )  ;", "}", "METHOD_END"], "methodName": ["withErrors"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "this . tag . setElement (  \" div \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \"  < br /  >  \"  )  ;", "assertBlockTagContains ( output ,     \" Default   Message \"  )  ;", "assertBlockTagContains ( output ,     \" Too   Short \"  )  ;", "}", "METHOD_END"], "methodName": ["withErrorsAndCustomElement"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertBlockTagContains ( output ,     \"  < br /  >  \"  )  ;", "assertBlockTagContains ( output ,     \" Default   Message \"  )  ;", "assertBlockTagContains ( output ,     \" Too   Short \"  )  ;", "}", "METHOD_END"], "methodName": ["withErrorsAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default    <  >    Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too    &    Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \"  < br /  >  \"  )  ;", "assertBlockTagContains ( output ,     \" Default    & lt ;  & gt ;    Message \"  )  ;", "assertBlockTagContains ( output ,     \" Too    & amp ;    Short \"  )  ;", "}", "METHOD_END"], "methodName": ["withEscapedErrors"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setBodyContent ( new   MockBodyContent (  \"  \"  ,    getWriter (  )  )  )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \" Default   Message \"  )  ;", "}", "METHOD_END"], "methodName": ["withExplicitEmptyWhitespaceBodyContent"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   mockContent    =     \" This   is   some   explicit   body   content \"  ;", "this . tag . setBodyContent ( new   MockBodyContent ( mockContent ,    getWriter (  )  )  )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "assertEquals ( mockContent ,    getOutput (  )  )  ;", "}", "METHOD_END"], "methodName": ["withExplicitNonWhitespaceBodyContent"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setBodyContent ( new   MockBodyContent (  \"  \\ t \\ n          \"  ,    getWriter (  )  )  )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \" Default   Message \"  )  ;", "}", "METHOD_END"], "methodName": ["withExplicitWhitespaceBodyContent"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setHtmlEscape ( false )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setName (  \" Rob   Harrop \"  )  ;", "Errors   errors    =    new   validation . BeanPropertyBindingResult ( target ,    ErrorsTagTests . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default    <  >    Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too    &    Short \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertElementTagOpened ( output )  ;", "assertElementTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" name . errors \"  )  ;", "assertBlockTagContains ( output ,     \"  < br /  >  \"  )  ;", "assertBlockTagContains ( output ,     \" Default    <  >    Message \"  )  ;", "assertBlockTagContains ( output ,     \" Too    &    Short \"  )  ;", "}", "METHOD_END"], "methodName": ["withNonEscapedErrors"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "Errors   errors    =    new   BeanPropertyBindingResult ( new   TestBean (  )  ,     \" COMMAND _ NAME \"  )  ;", "exposeBindingResult ( errors )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  0  ,    output . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutErrors"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  0  ,    output . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutErrorsInstance"], "fileName": "org.springframework.web.servlet.tags.form.ErrorsTagTests"}, {"methodBody": ["METHOD_START", "{", "for    ( HttpMethod   httpMethod    :    HttpMethod . values (  )  )     {", "if    ( httpMethod . name (  )  . equalsIgnoreCase ( method )  )     {", "return ;", "}", "}", "throw   new   IllegalArgumentException (  (  \" Invalid   HTTP   method :     \"     +    method )  )  ;", "}", "METHOD_END"], "methodName": ["assertHttpMethod"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . acceptCharset ;", "}", "METHOD_END"], "methodName": ["getAcceptCharset"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . action ;", "}", "METHOD_END"], "methodName": ["getAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . autocomplete ;", "}", "METHOD_END"], "methodName": ["getAutocomplete"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . enctype ;", "}", "METHOD_END"], "methodName": ["getEnctype"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   isMethodBrowserSupported ( getMethod (  )  )     ?    getMethod (  )     :    FormTag . DEFAULT _ METHOD ;", "}", "METHOD_END"], "methodName": ["getHttpMethod"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . method ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . methodParam ;", "}", "METHOD_END"], "methodName": ["getMethodParam"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . modelAttribute ;", "}", "METHOD_END"], "methodName": ["getModelAttribute"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onreset ;", "}", "METHOD_END"], "methodName": ["getOnreset"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onsubmit ;", "}", "METHOD_END"], "methodName": ["getOnsubmit"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . servletRelativeAction ;", "}", "METHOD_END"], "methodName": ["getServletRelativeAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return   this . target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "return    (  \" get \"  . equalsIgnoreCase ( method )  )     |  |     (  \" post \"  . equalsIgnoreCase ( method )  )  ;", "}", "METHOD_END"], "methodName": ["isMethodBrowserSupported"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "RequestDataValueProcessor   processor    =    getRequestContext (  )  . getRequestDataValueProcessor (  )  ;", "SRequest   request    =    this . pageContext . getRequest (  )  ;", "if    (  ( processor    !  =    null )     &  &     ( request   instanceof   HttpSRequest )  )     {", "action    =    processor . processAction (  (  ( HttpSRequest )     ( request )  )  ,    action ,    getHttpMethod (  )  )  ;", "}", "return   action ;", "}", "METHOD_END"], "methodName": ["processAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "String   action    =    getAction (  )  ;", "String   servletRelativeAction    =    getServletRelativeAction (  )  ;", "if    ( StringUtils . hasText ( action )  )     {", "action    =    getDisplayString ( evaluate ( FormTag . ACTION _ ATTRIBUTE ,    action )  )  ;", "return   processAction ( action )  ;", "} else", "if    ( StringUtils . hasText ( servletRelativeAction )  )     {", "String   pathToServlet    =    getRequestContext (  )  . getPathToServlet (  )  ;", "if    (  ( servletRelativeAction . startsWith (  \"  /  \"  )  )     &  &     (  !  ( servletRelativeAction . startsWith ( getRequestContext (  )  . getContextPath (  )  )  )  )  )     {", "servletRelativeAction    =    pathToServlet    +    servletRelativeAction ;", "}", "servletRelativeAction    =    getDisplayString ( evaluate ( FormTag . ACTION _ ATTRIBUTE ,    servletRelativeAction )  )  ;", "return   processAction ( servletRelativeAction )  ;", "} else    {", "String   requestUri    =    getRequestContext (  )  . getRequestUri (  )  ;", "String   encoding    =    this . pageContext . getResponse (  )  . getCharacterEncoding (  )  ;", "try    {", "requestUri    =    util . UriUtils . encodePath ( requestUri ,    encoding )  ;", "}    catch    ( UnsupportedCharsetException   ex )     {", "}", "ServletResponse   response    =    this . pageContext . getResponse (  )  ;", "if    ( response   instanceof   HttpServletResponse )     {", "requestUri    =     (  ( HttpServletResponse )     ( response )  )  . encodeURL ( requestUri )  ;", "String   queryString    =    getRequestContext (  )  . getQueryString (  )  ;", "if    ( StringUtils . hasText ( queryString )  )     {", "requestUri    +  =     \"  ?  \"     +     ( util . HtmlUtils . htmlEscape ( queryString )  )  ;", "}", "}", "if    ( StringUtils . hasText ( requestUri )  )     {", "return   processAction ( requestUri )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Attribute    ' action '    is   required .     \"     +     \" Attempted   to   resolve   against   current   request   URI   but   request   URI   was   null .  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["resolveAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "Object   resolvedModelAttribute    =    evaluate ( FormTag . MODEL _ ATTRIBUTE ,    getModelAttribute (  )  )  ;", "if    ( resolvedModelAttribute    =  =    null )     {", "throw   new   IllegalArgumentException (  (  ( FormTag . MODEL _ ATTRIBUTE )     +     \"    must   not   be   null \"  )  )  ;", "}", "return    (  ( String )     ( resolvedModelAttribute )  )  ;", "}", "METHOD_END"], "methodName": ["resolveModelAttribute"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . acceptCharset    =    acceptCharset ;", "}", "METHOD_END"], "methodName": ["setAcceptCharset"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . action    =     ( action    !  =    null )     ?    action    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . autocomplete    =    autocomplete ;", "}", "METHOD_END"], "methodName": ["setAutocomplete"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . enctype    =    enctype ;", "}", "METHOD_END"], "methodName": ["setEnctype"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . method    =    method ;", "}", "METHOD_END"], "methodName": ["setMethod"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . methodParam    =    methodParam ;", "}", "METHOD_END"], "methodName": ["setMethodParam"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . modelAttribute    =    modelAttribute ;", "}", "METHOD_END"], "methodName": ["setModelAttribute"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . onreset    =    onreset ;", "}", "METHOD_END"], "methodName": ["setOnreset"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . onsubmit    =    onsubmit ;", "}", "METHOD_END"], "methodName": ["setOnsubmit"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . servletRelativeAction    =     ( servletRelativeAction    !  =    null )     ?    servletRelativeAction    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setServletRelativeAction"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "this . target    =    target ;", "}", "METHOD_END"], "methodName": ["setTarget"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( CollectionUtils . isEmpty ( hiddenFields )  )  )     {", "thisWriter . appendValue (  \"  < div >  \\ n \"  )  ;", "for    ( String   name    :    hiddenFields . keySet (  )  )     {", "thisWriter . appendValue (  \"  < input   type =  \\  \" hidden \\  \"     \"  )  ;", "thisWriter . appendValue (  (  (  (  (  \" name =  \\  \"  \"     +    name )     +     \"  \\  \"    value =  \\  \"  \"  )     +     ( hiddenFields . get ( name )  )  )     +     \"  \\  \"     \"  )  )  ;", "thisWriter . appendValue (  \"  /  >  \\ n \"  )  ;", "}", "thisWriter . appendValue (  \"  <  / div >  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeHiddenFields"], "fileName": "org.springframework.web.servlet.tags.form.FormTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . endsWith (  \"  <  / form >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertFormTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . startsWith (  \"  < form    \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertFormTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setModelAttribute (  \" model \"  )  ;", "getPageContext (  )  . setAttribute (  \" model \"  ,     \" foo   bar \"  )  ;", "assertNull ( getPageContext (  )  . getAttribute (  . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "this . tag . doStartTag (  )  ;", "assertNotNull ( getPageContext (  )  . getAttribute (  . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "this . tag . doFinally (  )  ;", "assertNull ( getPageContext (  )  . getAttribute (  . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "}", "METHOD_END"], "methodName": ["clearAttributesOnFinally"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setMethod (  \" put \"  )  ;", "this . tag . setMethodParam (  \" methodParameter \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "String   inputOutput    =    getInputTag ( output )  ;", "assertContainsAttribute ( formOutput ,     \" method \"  ,     \" post \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" name \"  ,     \" methodParameter \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" value \"  ,     \" put \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" type \"  ,     \" hidden \"  )  ;", "}", "METHOD_END"], "methodName": ["customMethodParameter"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setRequestURI (  \"  / a   b   c \"  )  ;", "request . setQueryString (  \"  \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "assertContainsAttribute ( formOutput ,     \" action \"  ,     \"  / a %  2  0 b %  2  0 c \"  )  ;", "}", "METHOD_END"], "methodName": ["defaultActionEncoded"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setMethod (  \" delete \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "String   inputOutput    =    getInputTag ( output )  ;", "assertContainsAttribute ( formOutput ,     \" method \"  ,     \" post \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" name \"  ,     \"  _ method \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" value \"  ,     \" delete \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" type \"  ,     \" hidden \"  )  ;", "}", "METHOD_END"], "methodName": ["delete"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setMethod (  \" get \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "String   inputOutput    =    getInputTag ( output )  ;", "assertContainsAttribute ( formOutput ,     \" method \"  ,     \" get \"  )  ;", "assertEquals (  \"  \"  ,    inputOutput )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "int   inputStart    =    output . indexOf (  \"  <  \"  ,     1  )  ;", "int   inputEnd    =    output . lastIndexOf (  \"  >  \"  ,     (  ( output . length (  )  )     -     2  )  )  ;", "return    ( output . subst (  0  ,    inputStart )  )     +     ( output . subst (  ( inputEnd    +     1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getFormTag"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "int   inputStart    =    output . indexOf (  \"  <  \"  ,     1  )  ;", "int   inputEnd    =    output . lastIndexOf (  \"  >  \"  ,     (  ( output . length (  )  )     -     2  )  )  ;", "return   output . subst ( inputStart ,     ( inputEnd    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getInputTag"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setMethod (  \" post \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "String   inputOutput    =    getInputTag ( output )  ;", "assertContainsAttribute ( formOutput ,     \" method \"  ,     \" post \"  )  ;", "assertEquals (  \"  \"  ,    inputOutput )  ;", "}", "METHOD_END"], "methodName": ["post"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . request . setContextPath (  \"  / myApp \"  )  ;", "this . request . setServletPath (  \"  / main \"  )  ;", "this . request . setPathInfo (  \"  / index . html \"  )  ;", "String   commandName    =     \" myCommand \"  ;", "String   action    =     \"  / form . html \"  ;", "String   enctype    =     \" my / enctype \"  ;", "String   method    =     \" POST \"  ;", "String   onsubmit    =     \" onsubmit \"  ;", "String   onreset    =     \" onreset \"  ;", "this . tag . setModelAttribute ( commandName )  ;", "this . tag . setServletRelativeAction ( action )  ;", "this . tag . setMethod ( method )  ;", "this . tag . setEnctype ( enctype )  ;", "this . tag . setOnsubmit ( onsubmit )  ;", "this . tag . setOnreset ( onreset )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    result )  ;", "assertEquals (  \" Form   attribute   not   exposed \"  ,    commandName ,    getPageContext (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . tag . doFinally (  )  ;", "assertNull (  \" Form   attribute   not   cleared   after   tag   ends \"  ,    getPageContext (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "String   output    =    getOutput (  )  ;", ". assertFormTagOpened ( output )  ;", ". assertFormTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" action \"  ,     \"  / myApp / main / form . html \"  )  ;", "assertContainsAttribute ( output ,     \" method \"  ,    method )  ;", "assertContainsAttribute ( output ,     \" enctype \"  ,    enctype )  ;", "assertContainsAttribute ( output ,     \" onsubmit \"  ,    onsubmit )  ;", "assertContainsAttribute ( output ,     \" onreset \"  ,    onreset )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "}", "METHOD_END"], "methodName": ["prependServletPath"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setMethod (  \" put \"  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "String   formOutput    =    get ( output )  ;", "String   inputOutput    =    getInputTag ( output )  ;", "assertContainsAttribute ( formOutput ,     \" method \"  ,     \" post \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" name \"  ,     \"  _ method \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" value \"  ,     \" put \"  )  ;", "assertContainsAttribute ( inputOutput ,     \" type \"  ,     \" hidden \"  )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "String   action    =     \"  / my / form ? foo = bar \"  ;", "RequestDataValueProcessor   processor    =    getMockRequestDataValueProcessor (  )  ;", "given ( processor . processAction ( this . request ,    action ,     \" post \"  )  )  . willReturn ( action )  ;", "given ( processor . getExtraHiddenFields ( this . request )  )  . willReturn ( Collections . singletonMap (  \" key \"  ,     \" value \"  )  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  \"  < div >  \\ n < input   type =  \\  \" hidden \\  \"    name =  \\  \" key \\  \"    value =  \\  \" value \\  \"     /  >  \\ n <  / div >  \"  ,    getInputTag ( output )  )  ;", ". assertFormTagOpened ( output )  ;", ". assertFormTagClosed ( output )  ;", "}", "METHOD_END"], "methodName": ["requestDataValueProcessorHooks"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "String   commandName    =     \" myCommand \"  ;", "String   enctype    =     \" my / enctype \"  ;", "String   method    =     \" POST \"  ;", "String   onsubmit    =     \" onsubmit \"  ;", "String   onreset    =     \" onreset \"  ;", "this . tag . setModelAttribute ( commandName )  ;", "this . tag . setMethod ( method )  ;", "this . tag . setEnctype ( enctype )  ;", "this . tag . setOnsubmit ( onsubmit )  ;", "this . tag . setOnreset ( onreset )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    result )  ;", "assertEquals (  \" Form   attribute   not   exposed \"  ,    commandName ,    getPageContext (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . tag . doFinally (  )  ;", "assertNull (  \" Form   attribute   not   cleared   after   tag   ends \"  ,    getPageContext (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME ,    REQUEST _ SCOPE )  )  ;", "String   output    =    getOutput (  )  ;", ". assertFormTagOpened ( output )  ;", ". assertFormTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" action \"  ,     (  (  (  . REQUEST _ URI )     +     \"  ?  \"  )     +     (  . QUERY _ STRING )  )  )  ;", "assertContainsAttribute ( output ,     \" method \"  ,    method )  ;", "assertContainsAttribute ( output ,     \" enctype \"  ,    enctype )  ;", "assertContainsAttribute ( output ,     \" onsubmit \"  ,    onsubmit )  ;", "assertContainsAttribute ( output ,     \" onreset \"  ,    onreset )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "}", "METHOD_END"], "methodName": ["withActionFromRequest"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", ". setModelAttribute ( null )  ;", ". doStartTag (  )  ;", "fail (  \" Must   not   be   able   to   have   a   command   name   that   resolves   to   null \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["withNullResolvedCommand"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "String   commandName    =     \" myCommand \"  ;", "String   name    =     \" formName \"  ;", "String   action    =     \"  / form . html \"  ;", "String   method    =     \" POST \"  ;", "String   target    =     \" myTarget \"  ;", "String   enctype    =     \" my / enctype \"  ;", "String   acceptCharset    =     \" iso -  8  8  5  9  -  1  \"  ;", "String   onsubmit    =     \" onsubmit \"  ;", "String   onreset    =     \" onreset \"  ;", "String   autocomplete    =     \" off \"  ;", "String   cssClass    =     \" myClass \"  ;", "String   cssStyle    =     \" myStyle \"  ;", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setName ( name )  ;", "this . tag . setCssClass ( cssClass )  ;", "this . tag . setCssStyle ( cssStyle )  ;", "this . tag . setModelAttribute ( commandName )  ;", "this . tag . setAction ( action )  ;", "this . tag . setMethod ( method )  ;", "this . tag . setTarget ( target )  ;", "this . tag . setEnctype ( enctype )  ;", "this . tag . setAcceptCharset ( acceptCharset )  ;", "this . tag . setOnsubmit ( onsubmit )  ;", "this . tag . setOnreset ( onreset )  ;", "this . tag . setAutocomplete ( autocomplete )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    result )  ;", "assertEquals (  \" Form   attribute   not   exposed \"  ,    commandName ,    getPageContext (  )  . getRequest (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . tag . doFinally (  )  ;", "assertNull (  \" Form   attribute   not   cleared   after   tag   ends \"  ,    getPageContext (  )  . getRequest (  )  . getAttribute ( FormTag . MODEL _ ATTRIBUTE _ VARIABLE _ NAME )  )  ;", "String   output    =    getOutput (  )  ;", ". assertFormTagOpened ( output )  ;", ". assertFormTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" class \"  ,    cssClass )  ;", "assertContainsAttribute ( output ,     \" style \"  ,    cssStyle )  ;", "assertContainsAttribute ( output ,     \" action \"  ,    action )  ;", "assertContainsAttribute ( output ,     \" method \"  ,    method )  ;", "assertContainsAttribute ( output ,     \" target \"  ,    target )  ;", "assertContainsAttribute ( output ,     \" enctype \"  ,    enctype )  ;", "assertContainsAttribute ( output ,     \" accept - charset \"  ,    acceptCharset )  ;", "assertContainsAttribute ( output ,     \" onsubmit \"  ,    onsubmit )  ;", "assertContainsAttribute ( output ,     \" onreset \"  ,    onreset )  ;", "assertContainsAttribute ( output ,     \" autocomplete \"  ,    autocomplete )  ;", "assertContainsAttribute ( output ,     \" id \"  ,    commandName )  ;", "assertContainsAttribute ( output ,     \" name \"  ,    name )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "}", "METHOD_END"], "methodName": ["writeForm"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "String   xssQueryString    =     ( FormTagTests . QUERY _ STRING )     +     \"  & stuff =  \\  \"  >  < script > alert (  \\  ' XSS !  \\  '  )  <  / script >  \"  ;", "request . setQueryString ( xssQueryString )  ;", "tag . doStartTag (  )  ;", "assertEquals (  (  \"  < form   id =  \\  \" command \\  \"    action =  \\  \"  / my / form ? foo = bar & amp ; stuff =  & quot ;  & gt ;  & lt ;  \"     +     \" script & gt ; alert (  &  #  3  9  ; XSS !  &  #  3  9  ;  )  & lt ;  / script & gt ;  \\  \"    method =  \\  \" post \\  \"  >  \"  )  ,    getOutput (  )  )  ;", "}", "METHOD_END"], "methodName": ["xssExploitWhenActionIsResolvedFromQueryString"], "fileName": "org.springframework.web.servlet.tags.form.FormTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTag"}, {"methodBody": ["METHOD_START", "{", "this . disabled    =    disabled ;", "}", "METHOD_END"], "methodName": ["setDisabled"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . endsWith (  \"  /  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . startsWith (  \"  < input    \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setDisabled ( false )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertAttributeNotPresent ( output ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["disabledFalse"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setDisabled ( true )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" disabled \"  ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["disabledTrue"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" email \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" email \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" h \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" Sally   Greenwood \"  )  ;", "assertAttributeNotPresent ( output ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" myFloat \"  )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElemen . COMMAND _ NAME )  ;", "errors . getPropertyAccessor (  )  . registerCustomEditor ( Float . class ,    new   SimpleFloatEditor (  )  )  ;", "exposeBindingResult ( errors )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" hidden \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \"  1  2  .  3  4 f \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomBinder"], "fileName": "org.springframework.web.servlet.tags.form.HiddenInputTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . alt ;", "}", "METHOD_END"], "methodName": ["getAlt"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return   this . autocomplete ;", "}", "METHOD_END"], "methodName": ["getAutocomplete"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return   this . maxlength ;", "}", "METHOD_END"], "methodName": ["getMaxlength"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onselect ;", "}", "METHOD_END"], "methodName": ["getOnselect"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return   this . size ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return    \" text \"  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( getDynamicAttributes (  )  )     !  =    null )     &  &     ( getDynamicAttributes (  )  . containsKey (  \" type \"  )  )  ;", "}", "METHOD_END"], "methodName": ["hasDynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "this . alt    =    alt ;", "}", "METHOD_END"], "methodName": ["setAlt"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "this . autocomplete    =    autocomplete ;", "}", "METHOD_END"], "methodName": ["setAutocomplete"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "this . maxlength    =    maxlength ;", "}", "METHOD_END"], "methodName": ["setMaxlength"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "this . onselect    =    onselect ;", "}", "METHOD_END"], "methodName": ["setOnselect"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "this . size    =    size ;", "}", "METHOD_END"], "methodName": ["setSize"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "String   value    =    getDisplayString ( getBoundValue (  )  ,    getPropertyEditor (  )  )  ;", "String   type    =     ( hasDynamicTypeAttribute (  )  )     ?     (  ( String )     ( getDynamicAttributes (  )  . get (  \" type \"  )  )  )     :    getType (  )  ;", "tagWriter . writeAttribute (  \" value \"  ,    processFieldValue ( getName (  )  ,    value ,    type )  )  ;", "}", "METHOD_END"], "methodName": ["writeValue"], "fileName": "org.springframework.web.servlet.tags.form.InputTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Tag   not   closed   properly \"  ,    output . endsWith (  \"  /  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Tag   not   opened   properly \"  ,    output . startsWith (  \"  < input    \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "assertContainsAttribute ( output ,     \" value \"  ,    expectedValue )  ;", "}", "METHOD_END"], "methodName": ["assertValueAttribute"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" spouse . name \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" spouse . name \"  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" spouse . name \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \" Sally \"  )  ;", "}", "METHOD_END"], "methodName": ["complexBind"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "return   new   InputTag (  )     {", "@ Override", "protected   TagWriter   createTagWriter (  )     {", "return   new   TagWriter ( writer )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createTag"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setDisabled ( false )  ;", "this . tag . doStartTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertAttributeNotPresent ( output ,     \" disabled \"  )  ;", "}", "METHOD_END"], "methodName": ["disabledFalse"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" myFloat \"  )  ;", "this . tag . setDynamicAttribute ( null ,     \" type \"  ,     \" number \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" number \"  )  ;", "assertValueAttribute ( output ,     \"  1  2  .  3  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" checkbox \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" checkbox \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeCheckboxAttribute"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" radio \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" radio \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeRadioAttribute"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . tag ;", "}", "METHOD_END"], "methodName": ["getTag"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "return    \" text \"  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setReadonly ( true )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertContainsAttribute ( output ,     \" readonly \"  ,     \" readonly \"  )  ;", "assertValueAttribute ( output ,     \" Rob \"  )  ;", "}", "METHOD_END"], "methodName": ["readOnlyAttributeRenderingWhenReadonlyIsTrue"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \" Rob \"  )  ;", "}", "METHOD_END"], "methodName": ["simpleBind"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "BindTag   bindTag    =    new   BindTag (  )  ;", "bindTag . setPath (  \" name \"  )  ;", "bindTag . setPageContext ( getPageContext (  )  )  ;", "bindTag . doStar (  )  ;", "BindStatus   bindStatus    =     (  ( BindStatus )     ( getPageContext (  )  . findAttribute ( BindTag . STATUS _ VARIABLE _ NAME )  )  )  ;", "assertEquals (  \" Rob \"  ,    bindStatus . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleBindTagWithinForm"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "final   String   NAME    =     \" Rob    \\  \" I   Love   Mangos \\  \"    Harrop \"  ;", "final   String   HTML _ ESCAPED _ NAME    =     \" Rob    & quot ; I   Love   Mangos & quot ;    Harrop \"  ;", "this . tag . setPath (  \" name \"  )  ;", "this . rob . setName ( NAME )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,    HTML _ ESCAPED _ NAME )  ;", "}", "METHOD_END"], "methodName": ["simpleBindWithHtmlEscaping"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "String   title    =     \" aTitle \"  ;", "String   id    =     \"  1  2  3  \"  ;", "String   size    =     \"  1  2  \"  ;", "String   cssClass    =     \" textfield \"  ;", "String   cssStyle    =     \" width :  1  0 px \"  ;", "String   lang    =     \" en \"  ;", "String   dir    =     \" ltr \"  ;", "String   tabindex    =     \"  2  \"  ;", "boolean   disabled    =    true ;", "String   onclick    =     \" doClick (  )  \"  ;", "String   ondblclick    =     \" doDblclick (  )  \"  ;", "String   onkeydown    =     \" doKeydown (  )  \"  ;", "String   onkeypress    =     \" doKeypress (  )  \"  ;", "String   onkeyup    =     \" doKeyup (  )  \"  ;", "String   onmousedown    =     \" doMouseDown (  )  \"  ;", "String   onmousemove    =     \" doMouseMove (  )  \"  ;", "String   onmouseout    =     \" doMouseOut (  )  \"  ;", "String   onmouseover    =     \" doMouseOver (  )  \"  ;", "String   onmouseup    =     \" doMouseUp (  )  \"  ;", "String   onfocus    =     \" doFocus (  )  \"  ;", "String   onblur    =     \" doBlur (  )  \"  ;", "String   onchange    =     \" doChange (  )  \"  ;", "String   accesskey    =     \" a \"  ;", "String   maxlength    =     \"  1  2  \"  ;", "String   alt    =     \" Some   text \"  ;", "String   onselect    =     \" doSelect (  )  \"  ;", "boolean   readonly    =    true ;", "String   autocomplete    =     \" off \"  ;", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setId ( id )  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setSize ( size )  ;", "this . tag . setCssClass ( cssClass )  ;", "this . tag . setCssStyle ( cssStyle )  ;", "this . tag . setTitle ( title )  ;", "this . tag . setLang ( lang )  ;", "this . tag . setDir ( dir )  ;", "this . tag . setTabindex ( tabindex )  ;", "this . tag . setDisabled ( disabled )  ;", "this . tag . setOnclick ( onclick )  ;", "this . tag . setOndblclick ( ondblclick )  ;", "this . tag . setOnkeydown ( onkeydown )  ;", "this . tag . setOnkeypress ( onkeypress )  ;", "this . tag . setOnkeyup ( onkeyup )  ;", "this . tag . setOnmousedown ( onmousedown )  ;", "this . tag . setOnmousemove ( onmousemove )  ;", "this . tag . setOnmouseout ( onmouseout )  ;", "this . tag . setOnmouseover ( onmouseover )  ;", "this . tag . setOnmouseup ( onmouseup )  ;", "this . tag . setOnfocus ( onfocus )  ;", "this . tag . setOnblur ( onblur )  ;", "this . tag . setOnchange ( onchange )  ;", "this . tag . setAccesskey ( accesskey )  ;", "this . tag . setMaxlength ( maxlength )  ;", "this . tag . setAlt ( alt )  ;", "this . tag . setOnselect ( onselect )  ;", "this . tag . setReadonly ( readonly )  ;", "this . tag . setAutocomplete ( autocomplete )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertContainsAttribute ( output ,     \" id \"  ,    id )  ;", "assertValueAttribute ( output ,     \" Rob \"  )  ;", "assertContainsAttribute ( output ,     \" size \"  ,    size )  ;", "assertContainsAttribute ( output ,     \" class \"  ,    cssClass )  ;", "assertContainsAttribute ( output ,     \" style \"  ,    cssStyle )  ;", "assertContainsAttribute ( output ,     \" title \"  ,    title )  ;", "assertContainsAttribute ( output ,     \" lang \"  ,    lang )  ;", "assertContainsAttribute ( output ,     \" dir \"  ,    dir )  ;", "assertContainsAttribute ( output ,     \" tabindex \"  ,    tabindex )  ;", "assertContainsAttribute ( output ,     \" disabled \"  ,     \" disabled \"  )  ;", "assertContainsAttribute ( output ,     \" onclick \"  ,    onclick )  ;", "assertContainsAttribute ( output ,     \" ondblclick \"  ,    ondblclick )  ;", "assertContainsAttribute ( output ,     \" onkeydown \"  ,    onkeydown )  ;", "assertContainsAttribute ( output ,     \" onkeypress \"  ,    onkeypress )  ;", "assertContainsAttribute ( output ,     \" onkeyup \"  ,    onkeyup )  ;", "assertContainsAttribute ( output ,     \" onmousedown \"  ,    onmousedown )  ;", "assertContainsAttribute ( output ,     \" onmousemove \"  ,    onmousemove )  ;", "assertContainsAttribute ( output ,     \" onmouseout \"  ,    onmouseout )  ;", "assertContainsAttribute ( output ,     \" onmouseover \"  ,    onmouseover )  ;", "assertContainsAttribute ( output ,     \" onmouseup \"  ,    onmouseup )  ;", "assertContainsAttribute ( output ,     \" onfocus \"  ,    onfocus )  ;", "assertContainsAttribute ( output ,     \" onblur \"  ,    onblur )  ;", "assertContainsAttribute ( output ,     \" onchange \"  ,    onchange )  ;", "assertContainsAttribute ( output ,     \" accesskey \"  ,    accesskey )  ;", "assertContainsAttribute ( output ,     \" maxlength \"  ,    maxlength )  ;", "assertContainsAttribute ( output ,     \" alt \"  ,    alt )  ;", "assertContainsAttribute ( output ,     \" onselect \"  ,    onselect )  ;", "assertContainsAttribute ( output ,     \" readonly \"  ,     \" readonly \"  )  ;", "assertContainsAttribute ( output ,     \" autocomplete \"  ,    autocomplete )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "}", "METHOD_END"], "methodName": ["withAllAttributes"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" myFloat \"  )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . rob ,    AbstractHtmlElemen . COMMAND _ NAME )  ;", "errors . getPropertyAccessor (  )  . registerCustomEditor ( Float . class ,    new   SimpleFloatEditor (  )  )  ;", "exposeBindingResult ( errors )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \"  1  2  .  3  4 f \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomBinder"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setCssClass (  \" good \"  )  ;", "this . tag . setCssErrorClass (  \" bad \"  )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . rob ,    AbstractHtmlElemen . COMMAND _ NAME )  ;", "errors . rejectValue (  \" name \"  ,     \" some . code \"  ,     \" Default   Message \"  )  ;", "errors . rejectValue (  \" name \"  ,     \" too . short \"  ,     \" Too   Short \"  )  ;", "exposeBindingResult ( errors )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \" Rob \"  )  ;", "assertContainsAttribute ( output ,     \" class \"  ,     \" bad \"  )  ;", "}", "METHOD_END"], "methodName": ["withErrors"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "NestedPathTag   nestedPathTag    =    new   NestedPathTag (  )  ;", "nestedPathTag . setPath (  \" spouse .  \"  )  ;", "nestedPathTag . setPageContext ( getPageContext (  )  )  ;", "nestedPathTag . doStar (  )  ;", "this . tag . setPath (  \" name \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStar (  )  )  ;", "String   output    =    getOutput (  )  ;", "asserOpened ( output )  ;", "asserClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \" Sally \"  )  ;", "}", "METHOD_END"], "methodName": ["withNestedBind"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "NestedPathTag   nestedPathTag    =    new   NestedPathTag (  )  ;", "nestedPathTag . setPath (  \" spouse .  \"  )  ;", "nestedPathTag . setPageContext ( getPageContext (  )  )  ;", "nestedPathTag . doStar (  )  ;", "BindTag   bindTag    =    new   BindTag (  )  ;", "bindTag . setPath (  \" name \"  )  ;", "bindTag . setPageContext ( getPageContext (  )  )  ;", "bindTag . doStar (  )  ;", "BindStatus   bindStatus    =     (  ( BindStatus )     ( getPageContext (  )  . findAttribute ( BindTag . STATUS _ VARIABLE _ NAME )  )  )  ;", "assertEquals (  \" Sally \"  ,    bindStatus . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withNestedBindTagWithinForm"], "fileName": "org.springframework.web.servlet.tags.form.InputTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . name . toUpperCase (  )  ;", "}", "METHOD_END"], "methodName": ["getLabel"], "fileName": "org.springframework.web.servlet.tags.form.ItemPet"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.web.servlet.tags.form.ItemPet"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.web.servlet.tags.form.ItemPet"}, {"methodBody": ["METHOD_START", "{", "return   StringUtils . deleteAny ( getPropertyPath (  )  ,     \"  [  ]  \"  )  ;", "}", "METHOD_END"], "methodName": ["autogenerateFor"], "fileName": "org.springframework.web.servlet.tags.form.LabelTag"}, {"methodBody": ["METHOD_START", "{", "return   this . forId ;", "}", "METHOD_END"], "methodName": ["getFor"], "fileName": "org.springframework.web.servlet.tags.form.LabelTag"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . hasText ( this . forId )  )     {", "return   getDisplayString ( evaluate (  . FOR _ ATTRIBUTE ,    this . forId )  )  ;", "} else    {", "return   autogenerateFor (  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveFor"], "fileName": "org.springframework.web.servlet.tags.form.LabelTag"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( forId ,     \"  ' forId '    must   not   be   null \"  )  ;", "thiId    =    forId ;", "}", "METHOD_END"], "methodName": ["setFor"], "fileName": "org.springframework.web.servlet.tags.form.LabelTag"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setFor (  \" myElement \"  )  ;", "int   startResult    =    this . tag . doStartTag (  )  ;", "int   endResult    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    startResult )  ;", "assertEquals ( EVAL _ PAGE ,    endResult )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" for \"  ,     \" myElement \"  )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "assertAttributeNotPresent ( output ,     \" id \"  )  ;", "assertTrue ( output . startsWith (  \"  < label    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / label >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["overrideFor"], "fileName": "org.springframework.web.servlet.tags.form.LabelTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "int   startResult    =    this . tag . doStartTag (  )  ;", "int   endResult    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    startResult )  ;", "assertEquals ( EVAL _ PAGE ,    endResult )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" for \"  ,     \" spouse . name \"  )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "assertAttributeNotPresent ( output ,     \" id \"  )  ;", "assertTrue ( output . startsWith (  \"  < label    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / label >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleRender"], "fileName": "org.springframework.web.servlet.tags.form.LabelTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   startResult    =    this . tag . doStartTag (  )  ;", "int   endResult    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    startResult )  ;", "assertEquals ( EVAL _ PAGE ,    endResult )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" for \"  ,     \" spouse . name \"  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "assertAttributeNotPresent ( output ,     \" id \"  )  ;", "assertTrue ( output . startsWith (  \"  < label    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / label >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleRenderWithDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.LabelTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someMap [  1  ]  \"  )  ;", "int   startResult    =    this . tag . doStartTag (  )  ;", "int   endResult    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    startResult )  ;", "assertEquals ( EVAL _ PAGE ,    endResult )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" for \"  ,     \" spouse . someMap 1  \"  )  ;", "assertAttributeNotPresent ( output ,     \" name \"  )  ;", "assertAttributeNotPresent ( output ,     \" id \"  )  ;", "assertTrue ( output . startsWith (  \"  < label    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / label >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleRenderWithMapElement"], "fileName": "org.springframework.web.servlet.tags.form.LabelTagTests"}, {"methodBody": ["METHOD_START", "{", "TagUtils . assertHasAncestorOfType ( this ,    SelectTag . class ,     \" option \"  ,     \" select \"  )  ;", "}", "METHOD_END"], "methodName": ["assertUnderSelectTag"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return   this . label ;", "}", "METHOD_END"], "methodName": ["getLabel"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "String   label    =    getLabel (  )  ;", "Object   labelObj    =     ( label    =  =    null )     ?    resolvedValue    :    evaluate (  \" label \"  ,    label )  ;", "return   getDisplayString ( labelObj ,    getBindStatus (  )  . getEditor (  )  )  ;", "}", "METHOD_END"], "methodName": ["getLabelValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( SelectTag )     ( findAncestorWithClass ( this ,    SelectTag . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSelectTag"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return   this . value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return   this . disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return   SelectedValueComparator . isSelected ( getBindStatus (  )  ,    resolvedValue )  ;", "}", "METHOD_END"], "methodName": ["isSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "tagWriter . startTag (  \" option \"  )  ;", "writeOptionalAttribute ( tagWriter ,     \" id \"  ,    resolveId (  )  )  ;", "writeOptionalAttributes ( tagWriter )  ;", "String   renderedValue    =    getDisplayString ( value ,    getBindStatus (  )  . getEditor (  )  )  ;", "renderedValue    =    processFieldValue ( getSelectTag (  )  . getName (  )  ,    renderedValue ,     \" option \"  )  ;", "tagWriter . writeAttribute (  . VALUE _ ATTRIBUTE ,    renderedValue )  ;", "if    ( isSelected ( value )  )     {", "tagWriter . writeAttribute (  . SELECTED _ ATTRIBUTE ,     . SELECTED _ ATTRIBUTE )  ;", "}", "if    ( isDisabled (  )  )     {", "tagWriter . writeAttribute (  . DISABLED _ ATTRIBUTE ,     \" disabled \"  )  ;", "}", "tagWriter . appendValue ( label )  ;", "tagWriter . endTag (  )  ;", "}", "METHOD_END"], "methodName": ["renderOption"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "return   evaluate ( OptionTag . VALUE _ VARIABLE _ NAME ,    getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "this . disabled    =    disabled ;", "}", "METHOD_END"], "methodName": ["setDisabled"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( label ,     \"  ' label '    must   not   be   null \"  )  ;", "this . label    =    label ;", "}", "METHOD_END"], "methodName": ["setLabel"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionTag"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . endsWith (  \"  <  / option >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertOptionTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagEnumTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . startsWith (  \"  < option \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertOptionTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagEnumTests"}, {"methodBody": ["METHOD_START", "{", "GenericBean   testBean    =    new   GenericBean (  )  ;", "testBean . setCustomEnum ( VALUE _  1  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  \" testBean \"  ,    testBean )  ;", "String   selectName    =     \" testBean . customEnum \"  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  )  ;", "this . tag . setValue (  \" VALUE _  1  \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getWriter (  )  . toString (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" VALUE _  1  \"  )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "}", "METHOD_END"], "methodName": ["withJavaEnum"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagEnumTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "String   bodyContent    =     \" some   content \"  ;", "this . tag . setValue (  \" foo \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,    bodyContent )  ;", "}", "METHOD_END"], "methodName": ["asBodyTag"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "String   bodyContent    =     \" some   content \"  ;", "this . tag . setValue ( bodyContent )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,    bodyContent )  ;", "assertBlockTagContains ( output ,    bodyContent )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagCollapsed"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "String   bodyContent    =     \" some   content \"  ;", "this . tag . setValue (  \" Rob   Harrop \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "this . tag . setBodyContent ( new   MockBodyContent ( bodyContent ,    getWriter (  )  )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertBlockTagContains ( output ,    bodyContent )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . stringArray \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )     {", "@ Override", "public   PropertyEditor   getEditor (  )     {", "return   new    . RulesVariantEditor (  )  ;", "}", "}  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", ". RulesVariant   rulesVariant    =    new    . RulesVariant (  \" someRules \"  ,     \" someVariant \"  )  ;", "this . tag . setValue ( rulesVariant )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "assertEquals ( rulesVariant ,    getPageContext (  )  . getAttribute (  \" value \"  )  )  ;", "assertEquals ( rulesVariant . toId (  )  ,    getPageContext (  )  . getAttribute (  \" displayValue \"  )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "}", "METHOD_END"], "methodName": ["asBodyTagWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . endsWith (  \"  <  / option >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertOptionTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( output . startsWith (  \"  < option \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertOptionTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  \" bar \"  )  ;", "this . tag . setLabel (  \" Bar \"  )  ;", "this . tag . setDisabled ( true )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" bar \"  )  ;", "assertContainsAttribute ( output ,     \" disabled \"  ,     \" disabled \"  )  ;", "assertBlockTagContains ( output ,     \" Bar \"  )  ;", "}", "METHOD_END"], "methodName": ["canBeDisabledEvenWhenSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanPropertyBindingResult   result    =    new   BeanPropertyBindingResult ( new   TestBean (  )  ,     \" testBean \"  )  ;", "result . getPropertyAccessor (  )  . registerCustomEditor ( TestBean . class ,     \" friends \"  ,    new    . FriendEditor (  )  )  ;", "exposeBindingResult ( result )  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,     \" testBean . friends \"  ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue ( new   TestBean (  \" foo \"  )  )  ;", "this . tag . doStartTag (  )  ;", "this . tag . doEndTag (  )  ;", "assertEquals (  \"  < option   value =  \\  \" foo \\  \"  > foo <  / option >  \"  ,    getOutput (  )  )  ;", "}", "METHOD_END"], "methodName": ["multiBind"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "tag . setParent ( null )  ;", "tag . setValue (  \" foo \"  )  ;", "tag . doStartTag (  )  ;", "fail (  \" Must   throw   an   IllegalStateExce   when   not   nested   within   a    < select /  >    tag .  \"  )  ;", "}    catch    ( IllegalStateExce   ex )     {", "}", "}", "METHOD_END"], "methodName": ["optionTagNotNestedWithinSelectTag"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  \" bar \"  )  ;", "this . tag . setLabel (  \" Bar \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" bar \"  )  ;", "assertBlockTagContains ( output ,     \" Bar \"  )  ;", "}", "METHOD_END"], "methodName": ["renderNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setId (  \" myOption \"  )  ;", "this . tag . setValue (  \" foo \"  )  ;", "this . tag . setLabel (  \" Foo \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" id \"  ,     \" myOption \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" foo \"  )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \" Foo \"  )  ;", "}", "METHOD_END"], "methodName": ["renderSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  \" bar \"  )  ;", "this . tag . setLabel (  \" Bar \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" bar \"  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertBlockTagContains ( output ,     \" Bar \"  )  ;", "}", "METHOD_END"], "methodName": ["renderWithDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "final   PropertyEditor   floatEditor    =    new   SimpleFloatEditor (  )  ;", "String   selectName    =     \" testBean . someNumber \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )     {", "@ Override", "public   PropertyEditor   getEditor (  )     {", "return   floatEditor ;", "}", "}  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue ( new   Float (  1  2  .  3  5  )  )  ;", "this . tag . setLabel (  \"  1  2  .  3  5 f \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertAttributeNotPresent ( output ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \"  1  2  .  3  5 f \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomObjectAndEditorNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "final   PropertyEditor   floatEditor    =    new   SimpleFloatEditor (  )  ;", "floatEditor . setValue ( new   Float (  \"  1  2  .  3  4  \"  )  )  ;", "String   selectName    =     \" testBean . someNumber \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )     {", "@ Override", "public   PropertyEditor   getEditor (  )     {", "return   floatEditor ;", "}", "}  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue ( new   Float (  1  2  .  3  4  )  )  ;", "this . tag . setLabel (  \"  1  2  .  3  4 f \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \"  1  2  .  3  4 f \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomObjectAndEditorSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . someNumber \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue ( new   Float (  1  2  .  3  5  )  )  ;", "this . tag . setLabel (  \" GBP    1  2  .  3  5  \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \"  1  2  .  3  5  \"  )  ;", "assertAttributeNotPresent ( output ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \" GBP    1  2  .  3  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomObjectNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . someNumber \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue ( new   Float (  1  2  .  3  4  )  )  ;", "this . tag . setLabel (  \" GBP    1  2  .  3  4  \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \"  1  2  .  3  4  \"  )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \" GBP    1  2  .  3  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["withCustomObjectSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . name \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  \" bar \"  )  ;", "this . tag . setCssClass (  \" myClass \"  )  ;", "this . tag . setOnclick (  \" CLICK \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOpened ( output )  ;", "assertClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" bar \"  )  ;", "assertContainsAttribute ( output ,     \" class \"  ,     \" myClass \"  )  ;", "assertContainsAttribute ( output ,     \" onclick \"  ,     \" CLICK \"  )  ;", "assertBlockTagContains ( output ,     \" bar \"  )  ;", "}", "METHOD_END"], "methodName": ["withNoLabel"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "String   selectName    =     \" testBean . stringArray \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )     {", "@ Override", "public   PropertyEditor   getEditor (  )     {", "return   new   StringArrayPropertyEditor (  )  ;", "}", "}  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  . ARRAY _ SOURCE )  ;", "this . tag . setLabel (  \" someArray \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOptionTagOpened ( output )  ;", "assertOptionTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     . ARRAY _ SOURCE )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \" someArray \"  )  ;", "}", "METHOD_END"], "methodName": ["withPropertyEditor"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "final   PropertyEditor   testBeanEditor    =    new   OptionTagTests . TestBeanPropertyEditor (  )  ;", "testBeanEditor . setValue ( new   TestBean (  \" Sally \"  )  )  ;", "String   selectName    =     \" testBean . spouse \"  ;", "BindStatus   bindStatus    =    new   BindStatus ( getRequestContext (  )  ,    selectName ,    false )     {", "@ Override", "public   PropertyEditor   getEditor (  )     {", "return   testBeanEditor ;", "}", "}  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    bindStatus )  ;", "this . tag . setValue (  \" Sally \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ BUFFERED ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertOptionTagOpened ( output )  ;", "assertOptionTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" Sally \"  )  ;", "assertContainsAttribute ( output ,     \" selected \"  ,     \" selected \"  )  ;", "assertBlockTagContains ( output ,     \" Sally \"  )  ;", "}", "METHOD_END"], "methodName": ["withPropertyEditorStringComparison"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setParent ( null )  ;", "this . tag . setValue (  \" foo \"  )  ;", "this . tag . setLabel (  \" Foo \"  )  ;", "try    {", "tag . doStartTag (  )  ;", "fail (  \" Must   not   be   able   to   use    < o >    tag   without   exposed   context .  \"  )  ;", "}    catch    ( IllegalStateExce   ex )     {", "}", "}", "METHOD_END"], "methodName": ["withoutContext"], "fileName": "org.springframework.web.servlet.tags.form.OptionTagTests"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   item    :    optionCollection )     {", "BeanWrapper   wrapper    =    PropertyAccessorFactory . forBeanPropertyAccess ( item )  ;", "Object   value ;", "if    (  ( this . valueProperty )     !  =    null )     {", "value    =    wrapper . getPropertyValue ( this . valueProperty )  ;", "} else", "if    ( item   instanceof   Enum )     {", "value    =     (  ( Enum <  ?  >  )     ( item )  )  . name (  )  ;", "} else    {", "value    =    item ;", "}", "Object   label    =     (  ( this . labelProperty )     !  =    null )     ?    wrapper . getPropertyValue ( this . labelProperty )     :    item ;", "render ( tagWriter ,    item ,    value ,    label )  ;", "}", "}", "METHOD_END"], "methodName": ["doRenderFromCollection"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "PropertyEditor   editor    =     ( value    !  =    null )     ?    this . bindStatus . findEditor ( value . getClass (  )  )     :    null ;", "return   ValueFormatter . getDisplaySt ( value ,    editor ,    this . htmlEscape )  ;", "}", "METHOD_END"], "methodName": ["getDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isOptionDisabled"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "return   SelectedValueComparator . isSelected ( this . bindStatus ,    resolvedValue )  ;", "}", "METHOD_END"], "methodName": ["isOptionSelected"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "return   resolvedValue ;", "}", "METHOD_END"], "methodName": ["processOptionValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "doRenderFromCollection ( CollectionUtils . arrayToList ( this . optionSource )  ,    tagWriter )  ;", "}", "METHOD_END"], "methodName": ["renderFromArray"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "doRenderFromCollection (  (  ( Collection <  ?  >  )     ( this . optionSource )  )  ,    tagWriter )  ;", "}", "METHOD_END"], "methodName": ["renderFromCollection"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "doRenderFromCollection ( CollectionUtils . arrayToList (  (  ( Class <  ?  >  )     ( this . optionSource )  )  . getEnumConstants (  )  )  ,    tagWriter )  ;", "}", "METHOD_END"], "methodName": ["renderFromEnum"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "Map <  ?  ,     ?  >    optionMap    =     (  ( Map <  ?  ,     ?  >  )     ( this . optionSource )  )  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    optionMap . entrySet (  )  )     {", "Object   mapKey    =    entry . getKey (  )  ;", "Object   mapValue    =    entry . getValue (  )  ;", "Object   renderValue    =     (  ( this . valueProperty )     !  =    null )     ?    PropertyAccessorFactory . forBeanPropertyAccess ( mapKey )  . getPropertyValue ( this . valueProperty )     :    mapKey ;", "Object   renderLabel    =     (  ( this . labelProperty )     !  =    null )     ?    PropertyAccessorFactory . forBeanPropertyAccess ( mapValue )  . getPropertyValue ( this . labelProperty )     :    mapValue ;", "render ( tagWriter ,    mapKey ,    renderValue ,    renderLabel )  ;", "}", "}", "METHOD_END"], "methodName": ["renderFromMap"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "tagWriter . startTag (  \" option \"  )  ;", "writeCommonAttributes ( tagWriter )  ;", "String   valueDisplayString    =    getDisplayString ( value )  ;", "String   labelDisplayString    =    getDisplayString ( label )  ;", "valueDisplayString    =    processOptionValue ( valueDisplayString )  ;", "tagWriter . writeAttribute (  \" value \"  ,    valueDisplayString )  ;", "if    (  ( isOptionSelected ( value )  )     |  |     (  ( value    !  =    item )     &  &     ( isOptionSelected ( item )  )  )  )     {", "tagWriter . writeAttribute (  \" selected \"  ,     \" selected \"  )  ;", "}", "if    ( isOptionDisabled (  )  )     {", "tagWriter . writeAttribute (  \" disabled \"  ,     \" disabled \"  )  ;", "}", "tagWriter . appendValue ( labelDisplayString )  ;", "tagWriter . endTag (  )  ;", "}", "METHOD_END"], "methodName": ["renderOption"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( this . optionSource . getClass (  )  . isArray (  )  )     {", "renderFromArray ( tagWriter )  ;", "} else", "if    (  ( this . optionSource )    instanceof   Collection )     {", "renderFromCollection ( tagWriter )  ;", "} else", "if    (  ( this . optionSource )    instanceof   Map )     {", "renderFromMap ( tagWriter )  ;", "} else", "if    (  (  ( this . optionSource )    instanceof   Class )     &  &     (  (  ( Class <  ?  >  )     ( this . optionSource )  )  . isEnum (  )  )  )     {", "renderFromEnum ( tagWriter )  ;", "} else    {", "throw   new   JspException (  (  (  \" Type    [  \"     +     ( this . optionSource . getClass (  )  . getName (  )  )  )     +     \"  ]    is   not   valid   for   option   items \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeOptions"], "fileName": "org.springframework.web.servlet.tags.form.OptionWriter"}, {"methodBody": ["METHOD_START", "{", "return   this . itemLabel ;", "}", "METHOD_END"], "methodName": ["getItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "return   this . itemValue ;", "}", "METHOD_END"], "methodName": ["getItemValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "return   this . items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "TagUtils . assertHasAncestorOfType ( this ,    SelectTag . class ,     \" options \"  ,     \" select \"  )  ;", "return    (  ( SelectTag )     ( findAncestorWithClass ( this ,    SelectTag . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSelectTag"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "return   this . disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "this . disabled    =    disabled ;", "}", "METHOD_END"], "methodName": ["setDisabled"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( itemLabel ,     \"  ' itemLabel '    must   not   be   empty \"  )  ;", "this . itemLabel    =    itemLabel ;", "}", "METHOD_END"], "methodName": ["setItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "Assert . hasText ( itemValue ,     \"  ' itemValue '    must   not   be   empty \"  )  ;", "this . itemValue    =    itemValue ;", "}", "METHOD_END"], "methodName": ["setItemValue"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "this . items    =    items ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTag"}, {"methodBody": ["METHOD_START", "{", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    new   BindStatus ( getRequestContext (  )  ,     \" testBean . country \"  ,    false )  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . tag . setId (  \" my \"  )  ;", "this . tag . setCssClass (  \" myClass \"  )  ;", "this . tag . setOnclick (  \" CLICK \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   element    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   selected \"  ,     \" selected \"  ,    element . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" my 3  \"  ,    element . attribute (  \" id \"  )  . getValue (  )  )  ;", "assertEquals (  \" myClass \"  ,    element . attribute (  \" class \"  )  . getValue (  )  )  ;", "assertEquals (  \" CLICK \"  ,    element . attribute (  \" onclick \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withCollection"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "PropertyEditor   propertyEditor    =    new   SimpleFloatEditor (  )  ;", "TestBean   target    =    new   TestBean (  )  ;", "target . setMyFloat ( new   Float (  \"  1  2  .  3  4  \"  )  )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( target ,     . COMMAND _ NAME )  ;", "errors . getPropertyAccessor (  )  . registerCustomEditor ( Float . class ,    propertyEditor )  ;", "exposeBindingResult ( errors )  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    new   BindStatus ( getRequestContext (  )  ,     \" testBean . myFloat \"  ,    false )  )  ;", "List < Float >    floats    =    new   ArrayList <  >  (  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  0  \"  )  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  1  \"  )  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  2  \"  )  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  3  \"  )  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  4  \"  )  )  ;", "floats . add ( new   Float (  \"  1  2  .  3  5  \"  )  )  ;", "this . tag . setItems ( floats )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     6  ,    children . size (  )  )  ;", "Element   element    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [ text (  )     =     '  1  2  .  3  4 f '  ]  \"  )  )  )  ;", "assertNotNull (  \" Option   node   should   not   be   null \"  ,    element )  ;", "assertEquals (  \"  1  2  .  3  4    node   not   selected \"  ,     \" selected \"  ,    element . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertNull (  \" No   id   rendered \"  ,    element . attribute (  \" id \"  )  )  ;", "element    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [ text (  )     =     '  1  2  .  3  5 f '  ]  \"  )  )  )  ;", "assertNotNull (  \" Option   node   should   not   be   null \"  ,    element )  ;", "assertNull (  \"  1  2  .  3  5    node   incorrectly   selected \"  ,    element . attribute (  \" selected \"  )  )  ;", "assertNull (  \" No   id   rendered \"  ,    element . attribute (  \" id \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withCollectionAndCustomEditor"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    new   BindStatus ( getRequestContext (  )  ,     \" testBean . country \"  ,    false )  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . tag . setId (  \" my \"  )  ;", "this . tag . setCssClass (  \" myClass \"  )  ;", "this . tag . setOnclick (  \" CLICK \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   element    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   selected \"  ,     \" selected \"  ,    element . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" my 3  \"  ,    element . attribute (  \" id \"  )  . getValue (  )  )  ;", "assertEquals (  \" myClass \"  ,    element . attribute (  \" class \"  )  . getValue (  )  )  ;", "assertEquals (  \" CLICK \"  ,    element . attribute (  \" onclick \"  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    element . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    element . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withCollectionAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "getPageContext (  )  . setAttribute ( SelectTag . LIST _ VALUE _ PAGE _ ATTRIBUTE ,    new   BindStatus ( getRequestContext (  )  ,     \" testBean . country \"  ,    false )  )  ;", "this . tag . setItems ( Collec . emptyList (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     0  ,    children . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["withItemsNullReference"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . selectTag . setPath (  \" testBean \"  )  ;", "this . selectTag . doStartTag (  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "this . tag . doEndTag (  )  ;", "this . selectTag . doEndTag (  )  ;", "String   output    =    getOutput (  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     0  ,    children . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutItems"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanWithEnum   testBean    =    new   BeanWithEnum (  )  ;", "testBean . setTestEnum ( TestEnum . VALUE _  2  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  \" testBean \"  ,    testBean )  ;", "this . selectTag . setPath (  \" testBean . testEnum \"  )  ;", "this . selectTag . doStartTag (  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . selectTag . doEndTag (  )  ;", "String   output    =    getWriter (  )  . toString (  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Node   value 1     =    rootElement . selectSingleNode (  \" o [  @ value    =     ' VALUE _  1  '  ]  \"  )  ;", "Node   value 2     =    rootElement . selectSingleNode (  \" o [  @ value    =     ' VALUE _  2  '  ]  \"  )  ;", "assertEquals (  \" TestEnum :    VALUE _  1  \"  ,    value 1  . getText (  )  )  ;", "assertEquals (  \" TestEnum :    VALUE _  2  \"  ,    value 2  . getText (  )  )  ;", "assertEquals ( value 2  ,    rootElement . selectSingleNode (  \" o [  @ selected ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutItemsEnumParent"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanWithEnum   testBean    =    new   BeanWithEnum (  )  ;", "testBean . setTestEnum ( TestEnum . VALUE _  2  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  \" testBean \"  ,    testBean )  ;", "this . selectTag . setPath (  \" testBean . testEnum \"  )  ;", "this . tag . setItemLabel (  \" enumLabel \"  )  ;", "this . tag . setItemValue (  \" enumValue \"  )  ;", "this . selectTag . doStartTag (  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . selectTag . doEndTag (  )  ;", "String   output    =    getWriter (  )  . toString (  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Node   value 1     =    rootElement . selectSingleNode (  \" o [  @ value    =     ' Value :    VALUE _  1  '  ]  \"  )  ;", "Node   value 2     =    rootElement . selectSingleNode (  \" o [  @ value    =     ' Value :    VALUE _  2  '  ]  \"  )  ;", "assertEquals (  \" Label :    VALUE _  1  \"  ,    value 1  . getText (  )  )  ;", "assertEquals (  \" Label :    VALUE _  2  \"  ,    value 2  . getText (  )  )  ;", "assertEquals ( value 2  ,    rootElement . selectSingleNode (  \" o [  @ selected ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutItemsEnumParentWithExplicitLabelsAndValues"], "fileName": "org.springframework.web.servlet.tags.form.OptionsTagTests"}, {"methodBody": ["METHOD_START", "{", "return   this . showPassword ;", "}", "METHOD_END"], "methodName": ["isShowPassword"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTag"}, {"methodBody": ["METHOD_START", "{", "this . showPassword    =    showPassword ;", "}", "METHOD_END"], "methodName": ["setShowPassword"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PasswordInputTag )     ( this . getTag (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getPasswordTag"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . getTag (  )  . setPath (  \" name \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . getTag (  )  . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["passwordValueIsNotRenderedByDefault"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . getTag (  )  . setPath (  \" name \"  )  ;", "this . getTag (  )  . setShow ( false )  ;", "assertEquals ( SKIP _ BODY ,    this . getTag (  )  . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["passwordValueIsNotRenderedIfShowPasswordAttributeIsSetToFalse"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTagTests"}, {"methodBody": ["METHOD_START", "{", "this . getTag (  )  . setPath (  \" name \"  )  ;", "this . getTag (  )  . setShow ( true )  ;", "assertEquals ( SKIP _ BODY ,    this . getTag (  )  . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" type \"  ,    getType (  )  )  ;", "assertValueAttribute ( output ,     \" Rob \"  )  ;", "}", "METHOD_END"], "methodName": ["passwordValueIsRenderedIfShowPasswordAttributeIsSetToTrue"], "fileName": "org.springframework.web.servlet.tags.form.PasswordInputTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( output . indexOf (  \"  /  >  \"  )  )     >     (  -  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagClosed"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( output . indexOf (  \"  < input    \"  )  )     >     (  -  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTagOpened"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   Pet (  \" Rudiger \"  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPets"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   Pet (  \" Santa ' s   Little   Helper \"  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Santa ' s   Little   Helper \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertNull ( checkboxElement . attribute (  \" checked \"  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsNotSelected"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "this . tag . setValue ( new   ItemPet (  \" Rudiger \"  )  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElement . COMMAND _ NAME )  ;", "PropertyEditorSupport   editor    =    new   ItemPet . CustomEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( ItemPet . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElement . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   checkboxElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    checkboxElement . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    checkboxElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    checkboxElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    checkboxElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    checkboxElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" email \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" email \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "return   new   Float (  \"  1  2  .  9  9  \"  )  ;", "}", "METHOD_END"], "methodName": ["getFloat"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" myFloat \"  )  ;", "this . tag . setValue ( getFloat (  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" myFloat \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,    getFloat (  )  . toString (  )  )  ;", "assertContainsAttribute ( output ,     \" checked \"  ,     \" checked \"  )  ;", "}", "METHOD_END"], "methodName": ["withCheckedObjectValue"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" myFloat \"  )  ;", "this . tag . setValue (  \" F 1  2  .  9  9  \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyFloatEditor   editor    =    new    . MyFloatEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( Float . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" myFloat \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     (  \" F \"     +     ( getFloat (  )  . toString (  )  )  )  )  ;", "assertContainsAttribute ( output ,     \" checked \"  ,     \" checked \"  )  ;", "}", "METHOD_END"], "methodName": ["withCheckedObjectValueAndEditor"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" sex \"  )  ;", "this . tag . setValue (  \" M \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" sex \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" M \"  )  ;", "assertContainsAttribute ( output ,     \" checked \"  ,     \" checked \"  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "}", "METHOD_END"], "methodName": ["withCheckedValue"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" sex \"  )  ;", "this . tag . setValue (  \" M \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" sex \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" M \"  )  ;", "assertContainsAttribute ( output ,     \" checked \"  ,     \" checked \"  )  ;", "}", "METHOD_END"], "methodName": ["withCheckedValueAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "Float   value    =    new   Float (  \"  9  9  .  4  5  \"  )  ;", "this . setPath (  \" myFloat \"  )  ;", "this . setValue ( value )  ;", "int   result    =    this . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" myFloat \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,    value . toString (  )  )  ;", "assertAttributeNotPresent ( output ,     \" checked \"  )  ;", "}", "METHOD_END"], "methodName": ["withUncheckedObjectValue"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" sex \"  )  ;", "this . tag . setValue (  \" F \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTagOpened ( output )  ;", "assertTagClosed ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" sex \"  )  ;", "assertContainsAttribute ( output ,     \" type \"  ,     \" radio \"  )  ;", "assertContainsAttribute ( output ,     \" value \"  ,     \" F \"  )  ;", "assertAttributeNotPresent ( output ,     \" checked \"  )  ;", "}", "METHOD_END"], "methodName": ["withUncheckedValue"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "List   allPets    =    new   ArrayList (  )  ;", "allPets . add ( new   ItemPet (  \" Rudiger \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Spot \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Checkers \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Fluffy \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Mufty \"  )  )  ;", "this . tag . setItems ( allPets )  ;", "this . tag . setItemValue (  \" name \"  )  ;", "this . tag . setItemLabel (  \" label \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" RUDIGER \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Spot \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" SPOT \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" Checkers \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" CHECKERS \"  ,    spanElement 3  . getStringValue (  )  )  ;", "Element   spanElement 4     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  3  )  )  )  ;", "Element   rElement 4     =     (  ( Element )     ( spanElement 4  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 4  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 4  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 4  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 4  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Fluffy \"  ,    rElement 4  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FLUFFY \"  ,    spanElement 4  . getStringValue (  )  )  ;", "Element   spanElement 5     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  4  )  )  )  ;", "Element   rElement 5     =     (  ( Element )     ( spanElement 5  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 5  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 5  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 5  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 5  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Mufty \"  ,    rElement 5  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" MUFTY \"  ,    spanElement 5  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPets"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" pets \"  )  ;", "List   allPets    =    new   ArrayList (  )  ;", "allPets . add ( new   ItemPet (  \" Rudiger \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Spot \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Checkers \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Fluffy \"  )  )  ;", "allPets . add ( new   ItemPet (  \" Mufty \"  )  )  ;", "this . tag . setItems ( allPets )  ;", "this . tag . setItemLabel (  \" label \"  )  ;", "this . tag . setId (  \" myId \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", "PropertyEditorSupport   editor    =    new   ItemPet . CustomEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( ItemPet . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Rudiger \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" RUDIGER \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Spot \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" SPOT \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" Checkers \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" CHECKERS \"  ,    spanElement 3  . getStringValue (  )  )  ;", "Element   spanElement 4     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  3  )  )  )  ;", "Element   rElement 4     =     (  ( Element )     ( spanElement 4  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 4  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 4  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 4  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 4  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Fluffy \"  ,    rElement 4  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FLUFFY \"  ,    spanElement 4  . getStringValue (  )  )  ;", "Element   spanElement 5     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  4  )  )  )  ;", "Element   rElement 5     =     (  ( Element )     ( spanElement 5  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 5  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 5  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" pets \"  ,    rElement 5  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 5  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" Mufty \"  ,    rElement 5  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" MUFTY \"  ,    spanElement 5  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["collectionOfPetsWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setDynamicAttribute ( null ,     \" type \"  ,     \" email \"  )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals (  \" Attribute   type =  \\  \" email \\  \"    is   not   allowed \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dynamicTypeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "Calendar   cal    =    Calendar . getInstance (  )  ;", "calt ( Calendar . YEAR ,     1  0  )  ;", "calt ( Calendar . MONTH ,     1  0  )  ;", "calt ( Calendar . DATE ,     1  0  )  ;", "calt ( Calendar . HOUR ,     1  0  )  ;", "calt ( Calendar . MINUTE ,     1  0  )  ;", "calt ( Calendar . SECOND ,     1  0  )  ;", "return   cal . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setDisabled ( true )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" Both   tag   and   hidden   element   rendered   incorrectly \"  ,     3  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   spanElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement    =     (  ( Element )     ( spanElement . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" disabled \"  ,    rElement . attribute (  \" disabled \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["hiddenElementOmittedOnDisabled"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setElement (  \" element \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement    =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" element \"  ,    spanElement . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["spanElementCustomizable"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArray"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    rElement 1  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    rElement 1  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    rElement 2  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    rElement 2  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "assertEquals ( dynamicAttribute 1  ,    rElement 3  . attribute ( dynamicAttribute 1  )  . getValue (  )  )  ;", "assertEquals ( dynamicAttribute 2  ,    rElement 3  . attribute ( dynamicAttribute 2  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArrayAndDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setDelimiter (  \"  < br /  >  \"  )  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \" foo \"  ,     \" bar \"  ,     \" baz \"     }  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   delimiterElement 1     =    spanElement 1  . element (  \" br \"  )  ;", "assertNull ( delimiterElement 1  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   delimiterElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" br \"  ,    delimiterElement 2  . getName (  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  1  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   delimiterElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" br \"  ,    delimiterElement 3  . getName (  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  1  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" baz \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueArrayWithDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "Map   m    =    new   LinkedHashMap (  )  ;", "m . put (  \" foo \"  ,     \" FOO \"  )  ;", "m . put (  \" bar \"  ,     \" BAR \"  )  ;", "m . put (  \" baz \"  ,     \" BAZ \"  )  ;", "this . tag . setItems ( m )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FOO \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" BAR \"  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" BAZ \"  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueMap"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "String   delimiter    =     \"     |     \"  ;", "this . tag . setDelimiter ( delimiter )  ;", "this . tag . setPath (  \" stringArray \"  )  ;", "Map   m    =    new   LinkedHashMap (  )  ;", "m . put (  \" foo \"  ,     \" FOO \"  )  ;", "m . put (  \" bar \"  ,     \" BAR \"  )  ;", "m . put (  \" baz \"  ,     \" BAZ \"  )  ;", "this . tag . setItems ( m )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   rElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" foo \"  ,    rElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  \" FOO \"  ,    spanElement 1  . getStringValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   rElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    rElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \" bar \"  ,    rElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  ( delimiter    +     \" BAR \"  )  ,    spanElement 2  . getStringValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   rElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    rElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    rElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    rElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    rElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \" baz \"  ,    rElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "assertEquals (  ( delimiter    +     \" BAZ \"  )  ,    spanElement 3  . getStringValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueMapWithDelimiter"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" stringArray \"  )  ;", "this . tag . setItems ( new   Object [  ]  {     \"          foo \"  ,     \"          bar \"  ,     \"          baz \"     }  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", ". MyStringTrimmerEditor   editor    =    new    . MyStringTrimmerEditor (  )  ;", "bindingResult . getPropertyEditorRegistry (  )  . registerCustomEditor ( String . class ,    editor )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  ,    bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "assertEquals (  3  ,    editor . allProcessedValues . size (  )  )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   spanElement 1     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  0  )  )  )  ;", "Element   radioButtonElement 1     =     (  ( Element )     ( spanElement 1  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    radioButtonElement 1  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    radioButtonElement 1  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    radioButtonElement 1  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    radioButtonElement 1  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          foo \"  ,    radioButtonElement 1  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 2     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  1  )  )  )  ;", "Element   radioButtonElement 2     =     (  ( Element )     ( spanElement 2  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    radioButtonElement 2  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    radioButtonElement 2  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    radioButtonElement 2  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" checked \"  ,    radioButtonElement 2  . attribute (  \" checked \"  )  . getValue (  )  )  ;", "assertEquals (  \"          bar \"  ,    radioButtonElement 2  . attribute (  \" value \"  )  . getValue (  )  )  ;", "Element   spanElement 3     =     (  ( Element )     ( document . getRootElement (  )  . elements (  )  . get (  2  )  )  )  ;", "Element   radioButtonElement 3     =     (  ( Element )     ( spanElement 3  . elements (  )  . get (  0  )  )  )  ;", "assertEquals (  \" input \"  ,    radioButtonElement 3  . getName (  )  )  ;", "assertEquals (  \" radio \"  ,    radioButtonElement 3  . attribute (  \" type \"  )  . getValue (  )  )  ;", "assertEquals (  \" stringArray \"  ,    radioButtonElement 3  . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull (  \" not   checked \"  ,    radioButtonElement 3  . attribute (  \" checked \"  )  )  ;", "assertEquals (  \"          baz \"  ,    radioButtonElement 3  . attribute (  \" value \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiValueWithEditor"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . setPath (  \" name \"  )  ;", "this . doStartTag (  )  ;", "fail (  \" Should   not   be   able   to   render   with   a   null   value   when   binding   to   a   non - boolean .  \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["withNullValue"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanWithEnum   testBean    =    new   BeanWithEnum (  )  ;", "testBean . setEnum ( Enum . VALUE _  2  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  \" testBean \"  ,    testBean )  ;", "this . tag . setPath (  \" testEnum \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =     (  \"  < div >  \"     +     ( getOutput (  )  )  )     +     \"  <  / div >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Node   value 1     =    rootElement . selectSingleNode (  \"  /  / input [  @ value    =     ' VALUE _  1  '  ]  \"  )  ;", "Node   value 2     =    rootElement . selectSingleNode (  \"  /  / input [  @ value    =     ' VALUE _  2  '  ]  \"  )  ;", "assertEquals (  \" Enum :    VALUE _  1  \"  ,    rootElement . selectSingleNode (  (  (  \"  /  / label [  @ for    =     '  \"     +     ( value 1  . valueOf (  \"  @ id \"  )  )  )     +     \"  '  ]  \"  )  )  . getText (  )  )  ;", "assertEquals (  \" Enum :    VALUE _  2  \"  ,    rootElement . selectSingleNode (  (  (  \"  /  / label [  @ for    =     '  \"     +     ( value 2  . valueOf (  \"  @ id \"  )  )  )     +     \"  '  ]  \"  )  )  . getText (  )  )  ;", "assertEquals ( value 2  ,    rootElement . selectSingleNode (  \"  /  / input [  @ checked ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutItemsEnumBindTarget"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanWithEnum   testBean    =    new   BeanWithEnum (  )  ;", "testBean . setEnum ( Enum . VALUE _  2  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  \" testBean \"  ,    testBean )  ;", "this . tag . setPath (  \" testEnum \"  )  ;", "this . tag . setItemLabel (  \" enumLabel \"  )  ;", "this . tag . setItemValue (  \" enumValue \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =     (  \"  < div >  \"     +     ( getOutput (  )  )  )     +     \"  <  / div >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Node   value 1     =    rootElement . selectSingleNode (  \"  /  / input [  @ value    =     ' Value :    VALUE _  1  '  ]  \"  )  ;", "Node   value 2     =    rootElement . selectSingleNode (  \"  /  / input [  @ value    =     ' Value :    VALUE _  2  '  ]  \"  )  ;", "assertEquals (  \" Label :    VALUE _  1  \"  ,    rootElement . selectSingleNode (  (  (  \"  /  / label [  @ for    =     '  \"     +     ( value 1  . valueOf (  \"  @ id \"  )  )  )     +     \"  '  ]  \"  )  )  . getText (  )  )  ;", "assertEquals (  \" Label :    VALUE _  2  \"  ,    rootElement . selectSingleNode (  (  (  \"  /  / label [  @ for    =     '  \"     +     ( value 2  . valueOf (  \"  @ id \"  )  )  )     +     \"  '  ]  \"  )  )  . getText (  )  )  ;", "assertEquals ( value 2  ,    rootElement . selectSingleNode (  \"  /  / input [  @ checked ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withoutItemsEnumBindTargetWithExplicitLabelsAndValues"], "fileName": "org.springframework.web.servlet.tags.form.RadioButtonsTagTests"}, {"methodBody": ["METHOD_START", "{", "BindStatus   bindStatus    =    getBindStatus (  )  ;", "Class <  ?  >    valueType    =    bindStatus . getValueType (  )  ;", "if    (  ( valueType    !  =    null )     &  &     (  . typeRequiresMultiple ( valueType )  )  )     {", "return   true ;", "} else", "if    (  ( bindStatus . getEditor (  )  )     !  =    null )     {", "Object   editorValue    =    bindStatus . getEditor (  )  . getValue (  )  ;", "if    (  ( editorValue    !  =    null )     &  &     (  . typeRequiresMultiple ( editorValue . getClass (  )  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["forceMultiple"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return   this . itemLabel ;", "}", "METHOD_END"], "methodName": ["getItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return   this . itemValue ;", "}", "METHOD_END"], "methodName": ["getItemValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return   this . items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return   this . multiple ;", "}", "METHOD_END"], "methodName": ["getMultiple"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return   this . size ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "Object   multiple    =    getMultiple (  )  ;", "if    ( multiple    !  =    null )     {", "St   stValue    =    multiple . toSt (  )  ;", "return    (  \" multiple \"  . equalsIgnoreCase ( stValue )  )     |  |     ( Boolean . parseBoolean ( stValue )  )  ;", "}", "return   forceMultiple (  )  ;", "}", "METHOD_END"], "methodName": ["isMultiple"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . itemLabel    =    itemLabel ;", "}", "METHOD_END"], "methodName": ["setItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . itemValue    =    itemValue ;", "}", "METHOD_END"], "methodName": ["setItemValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . items    =     ( items    !  =    null )     ?    items    :    SelectTag . EMPTY ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . multiple    =    multiple ;", "}", "METHOD_END"], "methodName": ["setMultiple"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . size    =    size ;", "}", "METHOD_END"], "methodName": ["setSize"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "return    (  ( type . isArray (  )  )     |  |     ( Collection . class . isAssignableFrom ( type )  )  )     |  |     ( Map . class . isAssignableFrom ( type )  )  ;", "}", "METHOD_END"], "methodName": ["typeRequiresMultiple"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "if    ( isMultiple (  )  )     {", "tagWriter . star (  \" input \"  )  ;", "tagWriter . writeAttribute (  \" type \"  ,     \" hidden \"  )  ;", "String   name    =     ( WebDataBinder . DEFAULT _ FIELD _ MARKER _ PREFIX )     +     ( getName (  )  )  ;", "tagWriter . writeAttribute (  \" name \"  ,    name )  ;", "tagWriter . writeAttribute (  \" value \"  ,    processFieldValue ( name ,     \"  1  \"  ,     \" hidden \"  )  )  ;", "tagWriter . endTag (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeHiddenTagIfNecessary"], "fileName": "org.springframework.web.servlet.tags.form.SelectTag"}, {"methodBody": ["METHOD_START", "{", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . tag . setSize (  \"  5  \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "validateOutput ( output ,    sed )  ;", "assertContainsAttribute ( output ,     \" size \"  ,     \"  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["assertList"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < s    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / s >  \"  )  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" s \"  ,    rootElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    rootElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( rootElement . sSingleNode (  \" option [ text (  )     =     ' Rob '  ]  \"  )  )  )  ;", "assertEquals (  \" Rob   node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertStringArray"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Collections . EMPTY _ LIST )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "}", "METHOD_END"], "methodName": ["dynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Collections . EMPTY _ LIST )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  \"  < s   id =  \\  \" country \\  \"    name =  \\  \" country \\  \"  >  <  / s >  \"  ,    output )  ;", "}", "METHOD_END"], "methodName": ["emptyItems"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "Map   map    =    new   TreeMap ( new   Comparator (  )     {", "@ Override", "public   int   compare ( Object   o 1  ,    Object   o 2  )     {", "return    (  ( Country )     ( o 1  )  )  . getName (  )  . compareTo (  (  ( Country )     ( o 2  )  )  . getName (  )  )  ;", "}", "}  )  ;", "map . put ( Country . COUNTRY _ AT ,     . LOCALE _ AT )  ;", "map . put ( Country . COUNTRY _ NL ,     . LOCALE _ NL )  ;", "map . put ( Country . COUNTRY _ US ,    Locale . US )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["getCountryToLocaleMap"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  ]  {     \" Rod \"  ,     \" Rob \"  ,     \" Juergen \"  ,     \" Adrian \"     }  ;", "}", "METHOD_END"], "methodName": ["getNames"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    sexes    =    new   HashMap <  >  (  )  ;", "sexes . put (  \" F \"  ,     \" Female \"  )  ;", "sexes . put (  \" M \"  ,     \" Male \"  )  ;", "return   sexes ;", "}", "METHOD_END"], "methodName": ["getSexes"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "return    (  ( TestBean )     ( getPageContext (  )  . getRequest (  )  . getAttribute ( AbstractHtmlElementTagTests . COMMAND _ NAME )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestBean"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setMultiple (  \" false \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  1  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( sElement . attribute (  \" multiple \"  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipleExplicitlyFalse"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setMultiple (  \" true \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" multiple \"  ,    sElement . attribute (  \" multiple \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   inputElement    =    rootElement . element (  \" input \"  )  ;", "assertNotNull ( inputElement )  ;", "}", "METHOD_END"], "methodName": ["multipleExplicitlyTrue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setSomeList ( new   ArrayList (  )  )  ;", "this . tag . setPath (  \" someList \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" someList \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" multiple \"  ,    sElement . attribute (  \" multiple \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   inputElement    =    rootElement . element (  \" input \"  )  ;", "assertNotNull ( inputElement )  ;", "}", "METHOD_END"], "methodName": ["multipleForCollection"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setMultiple ( false )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  1  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertNull ( sElement . attribute (  \" multiple \"  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipleWithBooleanFalse"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setMultiple ( true )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" multiple \"  ,    sElement . attribute (  \" multiple \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   inputElement    =    rootElement . element (  \" input \"  )  ;", "assertNotNull ( inputElement )  ;", "}", "METHOD_END"], "methodName": ["multipleWithBooleanTrue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setMultiple (  \" multiple \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" name \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "assertEquals (  \" multiple \"  ,    sElement . attribute (  \" multiple \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   inputElement    =    rootElement . element (  \" input \"  )  ;", "assertNotNull ( inputElement )  ;", "}", "METHOD_END"], "methodName": ["multipleWithStringValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" bean . realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", ". TestBeanWrapper   testBean    =    new    . TestBeanWrapper (  )  ;", "testBean . setBean ( getTestBean (  )  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( testBean ,     \" testBean \"  )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( String   text )    throws   IllegalArgumentException    {", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "return    (  ( Country )     ( getValue (  )  )  )  . getName (  )  ;", "}", "}  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" testBean \"  )  ,    bindingResult )  ;", "this . tag . doStartTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < select    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / select >  \"  )  )  ;", "assertTrue ( output . contains (  \" option   value =  \\  \" AT \\  \"    selected =  \\  \" selected \\  \"  > Austria \"  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathWithListAndEditor"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" bean . realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "this . tag . setMultiple (  \" false \"  )  ;", ". TestBeanWrapper   testBean    =    new    . TestBeanWrapper (  )  ;", "TestBeanWithRealCountry   withCountry    =     (  ( TestBeanWithRealCountry )     ( getTestBean (  )  )  )  ;", "withCountry . setRealCountry ( null )  ;", "testBean . setBean ( withCountry )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( testBean ,     \" testBean \"  )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( String   text )    throws   IllegalArgumentException    {", "if    (  ( text    =  =    null )     |  |     (  ( text . length (  )  )     =  =     0  )  )     {", "setValue ( null )  ;", "return ;", "}", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "Country   value    =     (  ( Country )     ( getValue (  )  )  )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "return   value . getName (  )  ;", "}", "}  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" testBean \"  )  ,    bindingResult )  ;", "this . tag . doStartTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < select    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / select >  \"  )  )  ;", "assertFalse ( output . contains (  \" selected =  \\  \" selected \\  \"  \"  )  )  ;", "assertFalse ( output . contains (  \" multiple =  \\  \" multiple \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedPathWithListAndEditorAndNullValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( null )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertEquals (  \"  < s   id =  \\  \" country \\  \"    name =  \\  \" country \\  \"  >  <  / s >  \"  ,    output )  ;", "}", "METHOD_END"], "methodName": ["nullItems"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" s \"  ,    rootElement . getName (  )  )  ;", "assertEquals (  \" country \"  ,    rootElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( rootElement . sSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "Attribute   sedAttr    =    e . attribute (  \" sed \"  )  ;", "if    ( sed )     {", "assertTrue (  (  ( sedAttr    !  =    null )     &  &     (  \" sed \"  . equals ( sedAttr . getValue (  )  )  )  )  )  ;", "} else    {", "assertNull ( sedAttr )  ;", "}", "}", "METHOD_END"], "methodName": ["validateOutput"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . bean . setRealCountry ( Country . COUNTRY _ UK )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", "FormattingConversionService   cs    =    new   FormattingConversionService (  )  ;", "cs . addFormatterForFieldType ( Country . class ,    new   format . Formatter < Country >  (  )     {", "@ Override", "public   String   print ( Country   object ,    Locale   locale )     {", "return   object . getName (  )  ;", "}", "@ Override", "public   Country   parse ( String   text ,    Locale   locale )    throws   ParseException    {", "return   new   Country ( text ,    text )  ;", "}", "}  )  ;", "errors . initConversion ( cs )  ;", "exposeBindingResult ( errors )  ;", "this . tag . setPath (  \" realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  1  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   selectElement    =    rootElement . element (  \" select \"  )  ;", "assertEquals (  \" select \"  ,    selectElement . getName (  )  )  ;", "assertEquals (  \" realCountry \"  ,    selectElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    selectElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( selectElement . selectSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" United   Kingdom \"  ,    e . getText (  )  )  ;", "}", "METHOD_END"], "methodName": ["withElementFormatter"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "PropertyEditor   propertyEditor    =    new   SimpleFloatEditor (  )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( getTestBean (  )  ,    AbstractHtmlElemen . COMMAND _ NAME )  ;", "errors . getPropertyAccessor (  )  . registerCustomEditor ( Float . class ,    propertyEditor )  ;", "exposeBindingResult ( errors )  ;", "this . tag . setPath (  \" myFloat \"  )  ;", "Float [  ]    array    =    new   Float [  ]  {    new   Float (  \"  1  2  .  3  0  \"  )  ,    new   Float (  \"  1  2  .  3  2  \"  )  ,    new   Float (  \"  1  2  .  3  4  \"  )  ,    new   Float (  \"  1  2  .  3  6  \"  )  ,    new   Float (  \"  1  2  .  3  8  \"  )  ,    new   Float (  \"  1  2  .  4  0  \"  )  ,    new   Float (  \"  1  2  .  4  2  \"  )  ,    new   Float (  \"  1  2  .  4  4  \"  )  ,    new   Float (  \"  1  2  .  4  6  \"  )  ,    new   Float (  \"  1  2  .  4  8  \"  )     }  ;", "this . tag . setItems ( array )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < select    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / select >  \"  )  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  \" select \"  ,    rootElement . getName (  )  )  ;", "assertEquals (  \" myFloat \"  ,    rootElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    rootElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,    array . length ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [ text (  )     =     '  1  2  .  3  4 f '  ]  \"  )  )  )  ;", "assertEquals (  \"  '  1  2  .  3  4  '    node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "e    =     (  ( Element )     ( rootElement . selectSingleNode (  \" option [ text (  )     =     '  1  2  .  3  2 f '  ]  \"  )  )  )  ;", "assertNull (  \"  '  1  2  .  3  2  '    node   incorrectly   selected \"  ,    e . attribute (  \" selected \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withFloatCustom"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" someIntegerArray \"  )  ;", "Integer [  ]    array    =    new   Integer [  5  0  ]  ;", "for    ( int   i    =     0  ;    i    <     ( array . length )  ;    i +  +  )     {", "array [ i ]     =    new   Integer ( i )  ;", "}", "this . tag . setItems ( array )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" someIntegerArray \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,    array . length ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [ text (  )     =     '  1  2  '  ]  \"  )  )  )  ;", "assertEquals (  \"  '  1  2  '    node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [ text (  )     =     '  3  4  '  ]  \"  )  )  )  ;", "assertEquals (  \"  '  3  4  '    node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withIntegerArray"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( new   TestBean (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "try    {", "this . tag . doStartTag (  )  ;", "fail (  \" Must   not   be   able   to   use   a   non - Collection   typed   value   as   the   value   of    ' items '  \"  )  ;", "}    catch    ( JspException   expected )     {", "String   message    =    expected . getMessage (  )  ;", "assertTrue ( message . contains (  \" items \"  )  )  ;", "assertTrue ( message . contains (  \" tests . sample . beans . TestBean \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["withInvalidList"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "assertList ( true )  ;", "}", "METHOD_END"], "methodName": ["withList"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( getTestBean (  )  ,     \" testBean \"  )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( String   text )    throws   IllegalArgumentException    {", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "return    (  ( Country )     ( getValue (  )  )  )  . getName (  )  ;", "}", "}  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" testBean \"  )  ,    bindingResult )  ;", "this . tag . doStartTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < s    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / s >  \"  )  )  ;", "assertTrue ( output . contains (  \" option   value =  \\  \" AT \\  \"    sed =  \\  \" sed \\  \"  > Austria \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withListAndEditor"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" name \"  )  ;", "TestBeanWithRealCountry   testBean    =     (  ( TestBeanWithRealCountry )     ( getTestBean (  )  )  )  ;", "testBean . setRealCountry ( null )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( testBean ,     \" testBean \"  )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( String   text )    throws   IllegalArgumentException    {", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "Country   value    =     (  ( Country )     ( getValue (  )  )  )  ;", "if    ( value    =  =    null )     {", "return    \"  \"  ;", "}", "return   value . getName (  )  ;", "}", "}  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" testBean \"  )  ,    bindingResult )  ;", "this . tag . doStartTag (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < s    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / s >  \"  )  )  ;", "assertFalse ( output . contains (  \" sed =  \\  \" sed \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withListAndEditorAndNullValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "validateOutput ( getOutput (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["withListAndNoLabel"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "assertList ( true )  ;", "TransformTag   transformTag    =    new   TransformTag (  )  ;", "transformTag . setValue ( Country . getCountries (  )  . get (  0  )  )  ;", "transformTag . setVar (  \" key \"  )  ;", "transformTag . setParent ( this . tag )  ;", "transformTag . setPageContext ( getPageContext (  )  )  ;", "transformTag . doStartTag (  )  ;", "assertEquals (  \" Austria ( AT )  \"  ,    getPageContext (  )  . findAttribute (  \" key \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withListAndTransformTag"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" realCountry \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( getTestBean (  )  ,     \" testBean \"  )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( String   text )    throws   IllegalArgumentException    {", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "return    (  ( Country )     ( getValue (  )  )  )  . getName (  )  ;", "}", "}  )  ;", "getPageContext (  )  . getRequest (  )  . setAttribute (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +     \" testBean \"  )  ,    bindingResult )  ;", "this . tag . doStartTag (  )  ;", "TransformTag   transformTag    =    new   TransformTag (  )  ;", "transformTag . setValue ( Country . getCountries (  )  . get (  0  )  )  ;", "transformTag . setVar (  \" key \"  )  ;", "transformTag . setParent ( this . tag )  ;", "transformTag . setPageContext ( getPageContext (  )  )  ;", "transformTag . doStartTag (  )  ;", "assertEquals (  \" Austria \"  ,    getPageContext (  )  . findAttribute (  \" key \"  )  )  ;", "}", "METHOD_END"], "methodName": ["withListAndTransformTagAndEditor"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" sex \"  )  ;", "this . tag . setItems ( getSexes (  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "}", "METHOD_END"], "methodName": ["withMap"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "List   list    =    new   ArrayList (  )  ;", "list . add ( Country . COUNTRY _ UK )  ;", "list . add ( Country . COUNTRY _ AT )  ;", "this . bean . setSomeList ( list )  ;", "this . tag . setPath (  \" someList \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" someList \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "assertEquals (  \" United   Kingdom ( UK )  \"  ,    e . getText (  )  )  ;", "e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [  @ value    =     ' AT '  ]  \"  )  )  )  ;", "assertEquals (  \" AT   node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "assertEquals (  \" Austria ( AT )  \"  ,    e . getText (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiList"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "List   list    =    new   ArrayList (  )  ;", "list . add ( Country . COUNTRY _ UK )  ;", "list . add ( Country . COUNTRY _ AT )  ;", "this . bean . setSomeList ( list )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElemen . COMMAND _ NAME )  ;", "errors . getPropertyAccessor (  )  . registerCustomEditor ( List . class ,    new   CustomCollectionEditor ( LinkedList . class )     {", "@ Override", "public   String   getAsText (  )     {", "return   getValue (  )  . toString (  )  ;", "}", "}  )  ;", "exposeBindingResult ( errors )  ;", "this . tag . setPath (  \" someList \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   selectElement    =    rootElement . element (  \" select \"  )  ;", "assertEquals (  \" select \"  ,    selectElement . getName (  )  )  ;", "assertEquals (  \" someList \"  ,    selectElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    selectElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( selectElement . selectSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "e    =     (  ( Element )     ( selectElement . selectSingleNode (  \" option [  @ value    =     ' AT '  ]  \"  )  )  )  ;", "assertEquals (  \" AT   node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiListAndCustomEditor"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "List   list    =    new   ArrayList (  )  ;", "list . add ( Country . COUNTRY _ UK )  ;", "list . add ( Country . COUNTRY _ AT )  ;", "this . bean . setSomeList ( list )  ;", "BeanPropertyBindingResult   errors    =    new   BeanPropertyBindingResult ( this . bean ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", "FormattingConversionService   cs    =    new   FormattingConversionService (  )  ;", "cs . addFormatterForFieldType ( Country . class ,    new   format . Formatter < Country >  (  )     {", "@ Override", "public   String   print ( Country   object ,    Locale   locale )     {", "return   object . getName (  )  ;", "}", "@ Override", "public   Country   parse ( String   text ,    Locale   locale )    throws   ParseException    {", "return   new   Country ( text ,    text )  ;", "}", "}  )  ;", "errors . initConversion ( cs )  ;", "exposeBindingResult ( errors )  ;", "this . tag . setPath (  \" someList \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   selectElement    =    rootElement . element (  \" select \"  )  ;", "assertEquals (  \" select \"  ,    selectElement . getName (  )  )  ;", "assertEquals (  \" someList \"  ,    selectElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    selectElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     4  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( selectElement . selectSingleNode (  \" option [  @ value    =     ' UK '  ]  \"  )  )  )  ;", "assertEquals (  \" UK   node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" United   Kingdom \"  ,    e . getText (  )  )  ;", "e    =     (  ( Element )     ( selectElement . selectSingleNode (  \" option [  @ value    =     ' AT '  ]  \"  )  )  )  ;", "assertEquals (  \" AT   node   not   selected \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" Austria \"  ,    e . getText (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiListAndElementFormatter"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "Map   someMap    =    new   HashMap (  )  ;", "someMap . put (  \" M \"  ,     \" Male \"  )  ;", "someMap . put (  \" F \"  ,     \" Female \"  )  ;", "this . bean . setSomeMap ( someMap )  ;", "this . tag . setPath (  \" someMap \"  )  ;", "this . tag . setItems ( getSexes (  )  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   sElement    =    rootElement . element (  \" s \"  )  ;", "assertEquals (  \" s \"  ,    sElement . getName (  )  )  ;", "assertEquals (  \" someMap \"  ,    sElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    sElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     2  ,    children . size (  )  )  ;", "Element   e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [  @ value    =     ' M '  ]  \"  )  )  )  ;", "assertEquals (  \" M   node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "e    =     (  ( Element )     ( sElement . sSingleNode (  \" option [  @ value    =     ' F '  ]  \"  )  )  )  ;", "assertEquals (  \" F   node   not   sed \"  ,     \" sed \"  ,    e . attribute (  \" sed \"  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMultiMap"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "final   Locale   defaultLocale    =    Locale . getDefault (  )  ;", "Locale . setDefault ( Locale . US )  ;", "try    {", "final   Country   austria    =    Country . COUNTRY _ AT ;", "final   Country   usa    =    Country . COUNTRY _ US ;", "final   Map   someMap    =    new   HashMap (  )  ;", "someMap . put ( austria ,     . LOCALE _ AT )  ;", "someMap . put ( usa ,    Locale . US )  ;", "this . bean . setSomeMap ( someMap )  ;", "this . tag . setPath (  \" someMap \"  )  ;", "this . tag . setItems ( getCountryToLocaleMap (  )  )  ;", "this . tag . setItemValue (  \" isoCode \"  )  ;", "this . tag . setItemLabel (  \" displayLanguage \"  )  ;", "BeanPropertyBindingResult   bindingResult    =    new   BeanPropertyBindingResult ( getTestBean (  )  ,    AbstractHtmlElementTagTests . COMMAND _ NAME )  ;", "bindingResult . getPropertyAccessor (  )  . registerCustomEditor ( Country . class ,    new   PropertyEditorSupport (  )     {", "@ Override", "public   void   setAsText ( final   String   text )    throws   IllegalArgumentException    {", "setValue ( Country . getCountryWithIsoCode ( text )  )  ;", "}", "@ Override", "public   String   getAsText (  )     {", "return    (  ( Country )     ( getValue (  )  )  )  . getIsoCode (  )  ;", "}", "}  )  ;", "exposeBindingResult ( bindingResult )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( SKIP _ BODY ,    result )  ;", "String   output    =    getOutput (  )  ;", "output    =     (  \"  < doc >  \"     +    output )     +     \"  <  / doc >  \"  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StringReader ( output )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "assertEquals (  2  ,    rootElement . elements (  )  . size (  )  )  ;", "Element   selectElement    =    rootElement . element (  \" select \"  )  ;", "assertEquals (  \" select \"  ,    selectElement . getName (  )  )  ;", "assertEquals (  \" someMap \"  ,    selectElement . attribute (  \" name \"  )  . getValue (  )  )  ;", "List   children    =    selectElement . elements (  )  ;", "assertEquals (  \" Incorrect   number   of   children \"  ,     3  ,    children . size (  )  )  ;", "Element   e ;", "e    =     (  ( Element )     ( selectElement . selectSingleNode (  (  (  \" option [  @ value    =     '  \"     +     ( austria . getIsoCode (  )  )  )     +     \"  '  ]  \"  )  )  )  )  ;", "assertNotNull (  (  (  \" Option   node   not   found   with   Country   ISO   code   value    [  \"     +     ( austria . getIsoCode (  )  )  )     +     \"  ]  .  \"  )  ,    e )  ;", "assertEquals (  \" AT   node   not   selected .  \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" AT   Locale   displayLanguage   property   not   used   for   option   label .  \"  ,     . LOCALE _ AT . getDisplayLanguage (  )  ,    e . getData (  )  )  ;", "e    =     (  ( Element )     ( selectElement . selectSingleNode (  (  (  \" option [  @ value    =     '  \"     +     ( usa . getIsoCode (  )  )  )     +     \"  '  ]  \"  )  )  )  )  ;", "assertNotNull (  (  (  \" Option   node   not   found   with   Country   ISO   code   value    [  \"     +     ( usa . getIsoCode (  )  )  )     +     \"  ]  .  \"  )  ,    e )  ;", "assertEquals (  \" US   node   not   selected .  \"  ,     \" selected \"  ,    e . attribute (  \" selected \"  )  . getValue (  )  )  ;", "assertEquals (  \" US   Locale   displayLanguage   property   not   used   for   option   label .  \"  ,    Locale . US . getDisplayLanguage (  )  ,    e . getData (  )  )  ;", "}    finally    {", "Locale . setDefault ( defaultLocale )  ;", "}", "}", "METHOD_END"], "methodName": ["withMultiMapWithItemValueAndItemLabel"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "int   result    =    this . tag . doStartTag (  )  ;", "assertEquals ( EVAL _ BODY _ INCLUDE ,    result )  ;", "BindStatus   value    =     (  ( BindStatus )     ( getPageContext (  )  . getAttribute (  . LIST _ VALUE _ PAGE _ ATTRIBUTE )  )  )  ;", "assertEquals (  \" Selected   country   not   exposed   in   page   context \"  ,     \" UK \"  ,    value . getValue (  )  )  ;", "result    =    this . tag . doEndTag (  )  ;", "assertEquals ( EVAL _ PAGE ,    result )  ;", "this . tag . doFinally (  )  ;", "String   output    =    getOutput (  )  ;", "assertTrue ( output . startsWith (  \"  < select    \"  )  )  ;", "assertTrue ( output . endsWith (  \"  <  / select >  \"  )  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" country \"  )  ;", "}", "METHOD_END"], "methodName": ["withNestedOptions"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   tb    =    getTestBean (  )  ;", "tb . setCountry ( null )  ;", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "assertList ( false )  ;", "}", "METHOD_END"], "methodName": ["withNullValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "TestBean   tb    =    getTestBean (  )  ;", "tb . setCountry (  \" AT \"  )  ;", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "assertList ( false )  ;", "}", "METHOD_END"], "methodName": ["withOtherValue"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" country \"  )  ;", "this . tag . setItems ( Country . getCountries (  )  )  ;", "assertList ( true )  ;", "}", "METHOD_END"], "methodName": ["withResolvedList"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( getNames (  )  )  ;", "assertStringArray (  )  ;", "}", "METHOD_END"], "methodName": ["withResolvedStringArray"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setItems ( getNames (  )  )  ;", "assertStringArray (  )  ;", "}", "METHOD_END"], "methodName": ["withStringArray"], "fileName": "org.springframework.web.servlet.tags.form.SelectTagTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( boundCollection . contains ( candidateValue )  )     {", "return   true ;", "}", "}    catch    ( ClassCastException   ex )     {", "}", "return    . exhaustiveCollectionCompare ( boundCollection ,    candidateValue ,    bindStatus )  ;", "}", "METHOD_END"], "methodName": ["collectionCompare"], "fileName": "org.springframework.web.servlet.tags.form.SelectedValueComparator"}, {"methodBody": ["METHOD_START", "{", "Map < PropertyEditor ,    Object >    convertedValueCache    =    new   HashMap <  >  (  1  )  ;", "PropertyEditor   editor    =    null ;", "boolean   candidateIsString    =    candidateValue   instanceof   String ;", "if    (  ! candidateIsString )     {", "editor    =    bindStatus . findEditor ( candidateValue . getClass (  )  )  ;", "}", "for    ( Object   element    :    collection )     {", "if    (  (  ( editor    =  =    null )     &  &     ( element    !  =    null )  )     &  &    candidateIsString )     {", "editor    =    bindStatus . findEditor ( element . getClass (  )  )  ;", "}", "if    (  . exhaustiveCompare ( element ,    candidateValue ,    editor ,    convertedValueCache )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["exhaustiveCollectionCompare"], "fileName": "org.springframework.web.servlet.tags.form.SelectedValueComparator"}, {"methodBody": ["METHOD_START", "{", "String   candidateDisplayString    =    ValueFormatter . getDisplayString ( candidate ,    editor ,    false )  ;", "if    (  ( boundValue    !  =    null )     &  &     ( boundValue . getClass (  )  . isEnum (  )  )  )     {", "Enum <  ?  >    boundEnum    =     (  ( Enum <  ?  >  )     ( boundValue )  )  ;", "String   enumCodeAsString    =    ObjectUtils . getDisplayString ( boundEnum . name (  )  )  ;", "if    ( enumCodeAsString . equals ( candidateDisplayString )  )     {", "return   true ;", "}", "String   enumLabelAsString    =    ObjectUtils . getDisplayString ( boundEnum . toString (  )  )  ;", "if    ( enumLabelAsString . equals ( candidateDisplayString )  )     {", "return   true ;", "}", "} else", "if    ( ObjectUtils . getDisplayString ( boundValue )  . equals ( candidateDisplayString )  )     {", "return   true ;", "}", "if    (  ( editor    !  =    null )     &  &     ( candidate   instanceof   String )  )     {", "String   candidateAsString    =     (  ( String )     ( candidate )  )  ;", "Object   candidateAsValue ;", "if    (  ( converache    !  =    null )     &  &     ( converache . containsKey ( editor )  )  )     {", "candidateAsValue    =    converache . get ( editor )  ;", "} else    {", "editor . setAsText ( candidateAsString )  ;", "candidateAsValue    =    editor . getValue (  )  ;", "if    ( converache    !  =    null )     {", "converache . put ( editor ,    candidateAsValue )  ;", "}", "}", "if    ( ObjectUtils . nullSafeEquals ( boundValue ,    candidateAsValue )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["exhaustiveCompare"], "fileName": "org.springframework.web.servlet.tags.form.SelectedValueComparator"}, {"methodBody": ["METHOD_START", "{", "if    ( bindStatus    =  =    null )     {", "return   candidateValue    =  =    null ;", "}", "Object   boundValue    =    bindStatus . getValue (  )  ;", "if    ( ObjectUtils . nullSafeEquals ( boundValue ,    candidateValue )  )     {", "return   true ;", "}", "Object   actualValue    =    bindStatus . getActualValue (  )  ;", "if    (  (  ( actualValue    !  =    null )     &  &     ( actualValue    !  =    boundValue )  )     &  &     ( ObjectUtils . nullSafeEquals ( actualValue ,    candidateValue )  )  )     {", "return   true ;", "}", "if    ( actualValue    !  =    null )     {", "boundValue    =    actualValue ;", "} else", "if    ( boundValue    =  =    null )     {", "return   false ;", "}", "boolean   selected    =    false ;", "if    ( boundValue . getClass (  )  . isArray (  )  )     {", "selected    =     . collectionCompare ( CollectionUtils . arrayToList ( boundValue )  ,    candidateValue ,    bindStatus )  ;", "} else", "if    ( boundValue   instanceof   Collection )     {", "selected    =     . collectionCompare (  (  ( Collection <  ?  >  )     ( boundValue )  )  ,    candidateValue ,    bindStatus )  ;", "} else", "if    ( boundValue   instanceof   Map )     {", "selected    =     . mapCompare (  (  ( Map <  ?  ,     ?  >  )     ( boundValue )  )  ,    candidateValue ,    bindStatus )  ;", "}", "if    (  ! selected )     {", "selected    =     . exhaustiveCompare ( boundValue ,    candidateValue ,    bindStatus . getEditor (  )  ,    null )  ;", "}", "return   selected ;", "}", "METHOD_END"], "methodName": ["isSelected"], "fileName": "org.springframework.web.servlet.tags.form.SelectedValueComparator"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( boundMap . containsKey ( candidateValue )  )     {", "return   true ;", "}", "}    catch    ( ClassCastException   ex )     {", "}", "return    . exhaustiveCollectionCompare ( boundMap . keySet (  )  ,    candidateValue ,    bindStatus )  ;", "}", "METHOD_END"], "methodName": ["mapCompare"], "fileName": "org.springframework.web.servlet.tags.form.SelectedValueComparator"}, {"methodBody": ["METHOD_START", "{", "String   attributeName    =     ( TagIdGenerator . PAGE _ CONTEXT _ ATTRIBUTE _ PREFIX )     +    name ;", "Integer   currentCount    =     (  ( Integer )     ( pageContext . getAttribute ( attributeName )  )  )  ;", "currentCount    =     ( currentCount    !  =    null )     ?    currentCount    +     1     :     1  ;", "pageContext . setAttribute ( attributeName ,    currentCount )  ;", "return   name    +    currentCount ;", "}", "METHOD_END"], "methodName": ["nextId"], "fileName": "org.springframework.web.servlet.tags.form.TagIdGenerator"}, {"methodBody": ["METHOD_START", "{", "PageContext   pageContext    =    new   MockPageContext (  )  ;", "assertEquals (  \" foo 1  \"  ,     . nextId (  \" foo \"  ,    pageContext )  )  ;", "assertEquals (  \" foo 2  \"  ,     . nextId (  \" foo \"  ,    pageContext )  )  ;", "assertEquals (  \" foo 3  \"  ,     . nextId (  \" foo \"  ,    pageContext )  )  ;", "assertEquals (  \" foo 4  \"  ,     . nextId (  \" foo \"  ,    pageContext )  )  ;", "assertEquals (  \" bar 1  \"  ,     . nextId (  \" bar \"  ,    pageContext )  )  ;", "}", "METHOD_END"], "methodName": ["assertNextId"], "fileName": "org.springframework.web.servlet.tags.form.TagIdGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "IntStream . rangeClosed (  1  ,     5  )  . forEach (  (    i )     -  >    assertNextId (  )  )  ;", "}", "METHOD_END"], "methodName": ["nextId"], "fileName": "org.springframework.web.servlet.tags.form.TagIdGeneratorTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( inTag (  )  )  )     {", "throw   new   IllegalStateException (  \" Cannot   write   tag   value .    No   open   tag   available .  \"  )  ;", "}", "closeTagAndMarkAsBlock (  )  ;", "this . w . append ( value )  ;", "}", "METHOD_END"], "methodName": ["appendValue"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( currentState (  )  . isBlockTag (  )  )  )     {", "currentState (  )  . markAsBlockTag (  )  ;", "this . w . append (  \"  >  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["closeTagAndMarkAsBlock"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "return   this . tagState . peek (  )  ;", "}", "METHOD_END"], "methodName": ["currentState"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "endTag ( false )  ;", "}", "METHOD_END"], "methodName": ["endTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( inTag (  )  )  )     {", "throw   new   IllegalStateException (  \" Cannot   write   end   of   tag .    No   open   tag   available .  \"  )  ;", "}", "boolean   renderClosingTag    =    true ;", "if    (  !  ( currentState (  )  . isBlockTag (  )  )  )     {", "if    ( enforceClosingTag )     {", "this . w . append (  \"  >  \"  )  ;", "} else    {", "this . w . append (  \"  /  >  \"  )  ;", "renderClosingTag    =    false ;", "}", "}", "if    ( renderClosingTag )     {", "this . w . append (  \"  <  /  \"  )  . append ( currentState (  )  . getTagName (  )  )  . append (  \"  >  \"  )  ;", "}", "this . tagState . pop (  )  ;", "}", "METHOD_END"], "methodName": ["endTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( currentState (  )  . isBlockTag (  )  )     {", "return ;", "}", "closeTagAndMarkAsBlock (  )  ;", "}", "METHOD_END"], "methodName": ["forceBlock"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "return    !  ( this . tagState . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["inTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "this . tagState . push ( new   TagWriter . TagStateEntry ( tagName )  )  ;", "}", "METHOD_END"], "methodName": ["push"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( inTag (  )  )     {", "closeTagAndMarkAsBlock (  )  ;", "}", "push ( tagName )  ;", "this . w . append (  \"  <  \"  )  . append ( tagName )  ;", "}", "METHOD_END"], "methodName": ["startTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( currentState (  )  . isBlockTag (  )  )     {", "throw   new   IllegalStateException (  \" Cannot   write   attributes   after   opening   tag   is   closed .  \"  )  ;", "}", "this . w . append (  \"     \"  )  . append ( attributeName )  . append (  \"  =  \\  \"  \"  )  . append ( attributeValue )  . append (  \"  \\  \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["writeAttribute"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . hasText ( attributeValue )  )     {", "writeAttribute ( attributeName ,    attributeValue )  ;", "}", "}", "METHOD_END"], "methodName": ["writeOptionalAttributeValue"], "fileName": "org.springframework.web.servlet.tags.form.TagWriter"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" span \"  )  ;", "this . writer . appendValue (  \" Rob    \"  )  ;", "this . writer . appendValue (  \" Harrop \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < span > Rob   Harrop <  / span >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["appendingValue"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" textarea \"  )  ;", "this . writer . writeAttribute (  \" width \"  ,     \"  1  0  \"  )  ;", "this . writer . writeAttribute (  \" height \"  ,     \"  2  0  \"  )  ;", "this . writer . appendValue (  \" foobar \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < textarea   width =  \\  \"  1  0  \\  \"    height =  \\  \"  2  0  \\  \"  > foobar <  / textarea >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["blockTagWithAttributes"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" input \"  )  ;", "this . writer . writeAttribute (  \" type \"  ,     \" text \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < input   type =  \\  \" text \\  \"  /  >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" span \"  )  ;", "this . writer . writeAttribute (  \" class \"  ,     \" highlight \"  )  ;", "{", "this . writer . startTag (  \" strong \"  )  ;", "this . writer . appendValue (  \" Rob \"  )  ;", "this . writer . endTag (  )  ;", "}", "this . writer . appendValue (  \"     \"  )  ;", "{", "this . writer . startTag (  \" emphasis \"  )  ;", "this . writer . appendValue (  \" Harrop \"  )  ;", "this . writer . endTag (  )  ;", "}", "this . writer . endTag (  )  ;", "assertEquals (  \"  < span   class =  \\  \" highlight \\  \"  >  < strong > Rob <  / strong >     < emphasis > Harrop <  / emphasis >  <  / span >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["multipleNestedTags"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" span \"  )  ;", "this . writer . writeAttribute (  \" style \"  ,     \" foo \"  )  ;", "this . writer . startTag (  \" strong \"  )  ;", "this . writer . appendValue (  \" Rob   Harrop \"  )  ;", "this . writer . endTag (  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < span   style =  \\  \" foo \\  \"  >  < strong > Rob   Harrop <  / strong >  <  / span >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["nestedTags"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" textarea \"  )  ;", "this . writer . appendValue (  \" foobar \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < textarea > foobar <  / textarea >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleBlockTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" br \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < br /  >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["simpleTag"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "this . writer . startTag (  \" span \"  )  ;", "this . writer . forceBlock (  )  ;", "this . data . write (  \" Rob   Harrop \"  )  ;", "this . writer . endTag (  )  ;", "assertEquals (  \"  < span > Rob   Harrop <  / span >  \"  ,    this . data . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeInterleavedWithForceBlock"], "fileName": "org.springframework.web.servlet.tags.form.TagWriterTests"}, {"methodBody": ["METHOD_START", "{", "return   realCountry ;", "}", "METHOD_END"], "methodName": ["getRealCountry"], "fileName": "org.springframework.web.servlet.tags.form.TestBeanWithRealCountry"}, {"methodBody": ["METHOD_START", "{", "this . realCountry    =    realCountry ;", "}", "METHOD_END"], "methodName": ["setRealCountry"], "fileName": "org.springframework.web.servlet.tags.form.TestBeanWithRealCountry"}, {"methodBody": ["METHOD_START", "{", "return    \" Label :     \"     +     ( name (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEnumLabel"], "fileName": "org.springframework.web.servlet.tags.form.TestEnum"}, {"methodBody": ["METHOD_START", "{", "return    \" Value :     \"     +     ( name (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEnumValue"], "fileName": "org.springframework.web.servlet.tags.form.TestEnum"}, {"methodBody": ["METHOD_START", "{", "return   this . cols ;", "}", "METHOD_END"], "methodName": ["getCols"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "return   this . onselect ;", "}", "METHOD_END"], "methodName": ["getOnselect"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "return   this . rows ;", "}", "METHOD_END"], "methodName": ["getRows"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "this . cols    =    cols ;", "}", "METHOD_END"], "methodName": ["setCols"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "this . onselect    =    onselect ;", "}", "METHOD_END"], "methodName": ["setOnselect"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "this . rows    =    rows ;", "}", "METHOD_END"], "methodName": ["setRows"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTag"}, {"methodBody": ["METHOD_START", "{", "String   onselect    =     \" doSelect (  )  \"  ;", "this . tag . setPath (  \" spouse . name \"  )  ;", "this . tag . setOnselect ( onselect )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" spouse . name \"  )  ;", "assertContainsAttribute ( output ,     \" onselect \"  ,    onselect )  ;", "assertAttributeNotPresent ( output ,     \" readonly \"  )  ;", "}", "METHOD_END"], "methodName": ["complexBind"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "BeanPropertyBindingResult   result    =    new   BeanPropertyBindingResult ( createTestBean (  )  ,     \" testBean \"  )  ;", "result . getPropertyAccessor (  )  . registerCustomEditor ( Float . class ,    new   SimpleFloatEditor (  )  )  ;", "exposeBindingResult ( result )  ;", "this . tag . setPath (  \" myFloat \"  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" myFloat \"  )  ;", "assertBlockTagContains ( output ,     \"  1  2  .  3  4 f \"  )  ;", "}", "METHOD_END"], "methodName": ["customBind"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setReadonly ( true )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertBlockTagContains ( output ,     \"  \\ r \\ nRob \"  )  ;", "}", "METHOD_END"], "methodName": ["firstNewLine"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setReadonly ( true )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" name \"  )  ;", "assertContainsAttribute ( output ,     \" readonly \"  ,     \" readonly \"  )  ;", "assertBlockTagContains ( output ,     \" Rob \"  )  ;", "}", "METHOD_END"], "methodName": ["simpleBind"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "String   dynamicAttribute 1     =     \" attr 1  \"  ;", "String   dynamicAttribute 2     =     \" attr 2  \"  ;", "this . tag . setPath (  \" name \"  )  ;", "this . tag . setReadonly ( true )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "this . tag . setDynamicAttribute ( null ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" name \"  )  ;", "assertContainsAttribute ( output ,     \" readonly \"  ,     \" readonly \"  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 1  ,    dynamicAttribute 1  )  ;", "assertContainsAttribute ( output ,    dynamicAttribute 2  ,    dynamicAttribute 2  )  ;", "assertBlockTagContains ( output ,     \" Rob \"  )  ;", "}", "METHOD_END"], "methodName": ["simpleBindWithDynamicAttributes"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "final   String   NAME    =     \" Rob    \\  \" I   Love   Mangos \\  \"    Harrop \"  ;", "final   String   HTML _ ESCAPED _ NAME    =     \" Rob    & quot ; I   Love   Mangos & quot ;    Harrop \"  ;", "this . tag . setPath (  \" name \"  )  ;", "this . rob . setName ( NAME )  ;", "assertEquals ( SKIP _ BODY ,    this . tag . doStartTag (  )  )  ;", "String   output    =    getOutput (  )  ;", "System . out . println ( output )  ;", "assertContainsAttribute ( output ,     \" name \"  ,     \" name \"  )  ;", "assertBlockTagContains ( output ,    HTML _ ESCAPED _ NAME )  ;", "}", "METHOD_END"], "methodName": ["simpleBindWithHtmlEscaping"], "fileName": "org.springframework.web.servlet.tags.form.TextareaTagTests"}, {"methodBody": ["METHOD_START", "{", "String   displayValue    =    ObjectUtils . getDisplayString ( value )  ;", "return   htmlEscape    ?    HtmlUtils . htmlEscape ( displayValue )     :    displayValue ;", "}", "METHOD_END"], "methodName": ["getDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.ValueFormatter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyEditor    !  =    null )     &  &     (  !  ( value   instanceof   String )  )  )     {", "try    {", "propertyEditor . setValue ( value )  ;", "String   text    =    propertyEditor . getAsText (  )  ;", "if    ( text    !  =    null )     {", "return    . getDisplayString ( text ,    htmlEscape )  ;", "}", "}    catch    ( Throwable   ex )     {", "}", "}", "return    . getDisplayString ( value ,    htmlEscape )  ;", "}", "METHOD_END"], "methodName": ["getDisplayString"], "fileName": "org.springframework.web.servlet.tags.form.ValueFormatter"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultThemeName ;", "}", "METHOD_END"], "methodName": ["getDefaultThemeName"], "fileName": "org.springframework.web.servlet.theme.AbstractThemeResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultThemeName    =    defaultThemeName ;", "}", "METHOD_END"], "methodName": ["setDefaultThemeName"], "fileName": "org.springframework.web.servlet.theme.AbstractThemeResolver"}, {"methodBody": ["METHOD_START", "{", "return   defaultThemeName ;", "}", "METHOD_END"], "methodName": ["getDefaultThemeName"], "fileName": "org.springframework.web.servlet.theme.CookieThemeResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultThemeName    =    defaultThemeName ;", "}", "METHOD_END"], "methodName": ["setDefaultThemeName"], "fileName": "org.springframework.web.servlet.theme.CookieThemeResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . paramName ;", "}", "METHOD_END"], "methodName": ["getParamName"], "fileName": "org.springframework.web.servlet.theme.ThemeChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . paramName    =    paramName ;", "}", "METHOD_END"], "methodName": ["setParamName"], "fileName": "org.springframework.web.servlet.theme.ThemeChangeInterceptor"}, {"methodBody": ["METHOD_START", "{", "internalTest ( new   CookieThemeResolver (  )  ,    true ,    AbstractThemeResolver . ORIGINAL _ DEFAULT _ THEME _ NAME )  ;", "}", "METHOD_END"], "methodName": ["cookieThemeResolver"], "fileName": "org.springframework.web.servlet.theme.ThemeResolverTests"}, {"methodBody": ["METHOD_START", "{", "internalTest ( new   FixedThemeResolver (  )  ,    false ,    AbstractThemeResolver . ORIGINAL _ DEFAULT _ THEME _ NAME )  ;", "}", "METHOD_END"], "methodName": ["fixedThemeResolver"], "fileName": "org.springframework.web.servlet.theme.ThemeResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   context    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( context )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "String   themeName    =    themeResolver . resolveThemeName ( request )  ;", "assertEquals ( themeName ,    defaultName )  ;", "try    {", "themeResolver . setThemeName ( request ,    response ,     . TEST _ THEME _ NAME )  ;", "if    (  ! shouldSet )", "fail (  \" should   not   be   able   to   set   Theme   name \"  )  ;", "themeName    =    themeResolver . resolveThemeName ( request )  ;", "assertEquals (  . TEST _ THEME _ NAME ,    themeName )  ;", "themeResolver . setThemeName ( request ,    response ,    null )  ;", "themeName    =    themeResolver . resolveThemeName ( request )  ;", "assertEquals ( themeName ,    defaultName )  ;", "}    catch    ( UnsupportedOperationException   ex )     {", "if    ( shouldSet )", "fail (  \" should   be   able   to   set   Theme   name \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["internalTest"], "fileName": "org.springframework.web.servlet.theme.ThemeResolverTests"}, {"methodBody": ["METHOD_START", "{", "internalTest ( new   SessionThemeResolver (  )  ,    true ,    AbstractThemeResolver . ORIGINAL _ DEFAULT _ THEME _ NAME )  ;", "}", "METHOD_END"], "methodName": ["sessionThemeResolver"], "fileName": "org.springframework.web.servlet.theme.ThemeResolverTests"}, {"methodBody": ["METHOD_START", "{", "SessionThemeResolver   tr    =    new   SessionThemeResolver (  )  ;", "tr . setDefaultThemeName (  . DEFAULT _ TEST _ THEME _ NAME )  ;", "internalTest ( tr ,    true ,     . DEFAULT _ TEST _ THEME _ NAME )  ;", "}", "METHOD_END"], "methodName": ["sessionThemeResolverWithDefault"], "fileName": "org.springframework.web.servlet.theme.ThemeResolverTests"}, {"methodBody": ["METHOD_START", "{", "logger . debug (  \" Clearing   entire   cache \"  )  ;", "synchronized ( thisCreationCache )     {", "thisAccessCache . clear (  )  ;", "thisCreationCache . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   loadView ( viewName ,    locale )  ;", "}", "METHOD_END"], "methodName": ["createView"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return    ( viewName    +     '  _  '  )     +    locale ;", "}", "METHOD_END"], "methodName": ["getCacheKey"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . cacheLimit ;", "}", "METHOD_END"], "methodName": ["getCacheLimit"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return    ( this . cacheLimit )     >     0  ;", "}", "METHOD_END"], "methodName": ["isCache"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . cacheUnresolved ;", "}", "METHOD_END"], "methodName": ["isCacheUnresolved"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isCache (  )  )  )     {", "logger . warn (  \" View   c   is   SWITCHED   OFF    -  -    removal   not   necessary \"  )  ;", "} else    {", "Object   cacheKey    =    getCacheKey ( viewName ,    locale )  ;", "Object   cachedView ;", "synchronized ( this . viewCreationCache )     {", "this . viewAccessCache . remove ( cacheKey )  ;", "cachedView    =    this . viewCreationCache . remove ( cacheKey )  ;", "}", "if    ( logger . isDebugEnabled (  )  )     {", "if    ( cachedView    =  =    null )     {", "logger . debug (  (  (  \" No   cached   instance   for   view    '  \"     +    cacheKey )     +     \"  '    was   found \"  )  )  ;", "} else    {", "logger . debug (  (  (  \" Cache   for   view    \"     +    cacheKey )     +     \"    has   been   cleared \"  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["removeFromCache"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . cacheLimit    =     ( cache )     ?    AbstractCachingViewResolver . DEFAULT _ CACHE _ LIMIT    :     0  ;", "}", "METHOD_END"], "methodName": ["setCache"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . cacheLimit    =    cacheLimit ;", "}", "METHOD_END"], "methodName": ["setCacheLimit"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . cacheUnresolved    =    cacheUnresolved ;", "}", "METHOD_END"], "methodName": ["setCacheUnresolved"], "fileName": "org.springframework.web.servlet.view.AbstractCachingViewResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( respo . getContentType (  )  )     =  =    null )     {", "respotContentType ( getContentType (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["applyContentType"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . allowRequestOverride    =    allowRequestOverride ;", "}", "METHOD_END"], "methodName": ["setAllowRequestOverride"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . allowSessionOverride    =    allowSessionOverride ;", "}", "METHOD_END"], "methodName": ["setAllowSessionOverride"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . exposeRequestAttributes    =    exposeRequestAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeRequestAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . exposeSessionAttributes    =    exposeSessionAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeSessionAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . exposeSpringMacroHelpers    =    exposeSpringMacroHelpers ;", "}", "METHOD_END"], "methodName": ["setExposeSpringMacroHelpers"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . allowRequestOverride    =    allowRequestOverride ;", "}", "METHOD_END"], "methodName": ["setAllowRequestOverride"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . allowSessionOverride    =    allowSessionOverride ;", "}", "METHOD_END"], "methodName": ["setAllowSessionOverride"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposeRequestAttributes    =    exposeRequestAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeRequestAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposeSessionAttributes    =    exposeSessionAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeSessionAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposeSpringMacroHelpers    =    exposeSpringMacroHelpers ;", "}", "METHOD_END"], "methodName": ["setExposeSpringMacroHelpers"], "fileName": "org.springframework.web.servlet.view.AbstractTemplateViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["checkResource"], "fileName": "org.springframework.web.servlet.view.AbstractUrlBasedView"}, {"methodBody": ["METHOD_START", "{", "return   this . url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.springframework.web.servlet.view.AbstractUrlBasedView"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isUrlRequired"], "fileName": "org.springframework.web.servlet.view.AbstractUrlBasedView"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.springframework.web.servlet.view.AbstractUrlBasedView"}, {"methodBody": ["METHOD_START", "{", "this . staticAttributes . put ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["addStaticAttribute"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" unchecked \"  )", "Map < St ,    Object >    pathVars    =     ( this . exposePathVariables )     ?     (  ( Map < St ,    Object >  )     ( request . getAttribute ( View . PATH _ VARIABLES )  )  )     :    null ;", "int   size    =    this . staticAttributes . size (  )  ;", "size    +  =     ( model    !  =    null )     ?    model . size (  )     :     0  ;", "size    +  =     ( pathVars    !  =    null )     ?    pathVars . size (  )     :     0  ;", "Map < St ,    Object >    mergedModel    =    new   LinkedHashMap <  >  ( size )  ;", "mergedModel . putAll ( this . staticAttributes )  ;", "if    ( pathVars    !  =    null )     {", "mergedModel . putAll ( pathVars )  ;", "}", "if    ( model    !  =    null )     {", "mergedModel . putAll ( model )  ;", "}", "if    (  ( this . requestContextAttribute )     !  =    null )     {", "mergedModel . put ( this . requestContextAttribute ,    createRequestContext ( request ,    response ,    mergedModel )  )  ;", "}", "return   mergedModel ;", "}", "METHOD_END"], "methodName": ["createMergedOutputModel"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   new   RequestContext ( request ,    response ,    getServletContext (  )  ,    model )  ;", "}", "METHOD_END"], "methodName": ["createRequestContext"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   new   ByteArrayOutputStream ( AbstractView . OUTPUT _ BYTE _ ARRAY _ INITIAL _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["createTemporaryOutputStream"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "model . forEach (  (    modelName ,    modelValue )     -  >     {", "if    ( modelValue    !  =    null )     {", "request . setAttribute ( modelName ,    modelValue )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  (  \" Added   model   object    '  \"     +    modelName )     +     \"  '    of   type    [  \"  )     +     ( modelValue . getClass (  )  . getName (  )  )  )     +     \"  ]    to   request   in      with   name    '  \"  )     +     ( getBeanName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "} else    {", "request . removeAttribute ( modelName )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Removed   model   object    '  \"     +    modelName )     +     \"  '    from   request   in      with   name    '  \"  )     +     ( getBeanName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["exposeModelAsRequestAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["generatesDownloadContent"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   this . staticAttributes ;", "}", "METHOD_END"], "methodName": ["getAttributesMap"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   this . beanName ;", "}", "METHOD_END"], "methodName": ["getBeanName"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   this . requestContextAttribute ;", "}", "METHOD_END"], "methodName": ["getRequestContextAttribute"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . exposeContextBeansAsAttributes )     |  |     (  ( this . exposedContextBeanNames )     !  =    null )  )     {", "WebApplicationContext   wac    =    getWebApplicationContext (  )  ;", "Assert . state (  ( wac    !  =    null )  ,     \" No   WebApplicationContext \"  )  ;", "return   new   context . support . ContextExposingHttpServletRequest ( originalRequest ,    wac ,    this . exposedContextBeanNames )  ;", "}", "return   originalRequest ;", "}", "METHOD_END"], "methodName": ["getRequestToExpose"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( this . staticAttributes )  ;", "}", "METHOD_END"], "methodName": ["getStaticAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "return   this . exposePathVariables ;", "}", "METHOD_END"], "methodName": ["isExposePathVariables"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "if    ( generatesDownloadContent (  )  )     {", "respotHeader (  \" Pragma \"  ,     \" private \"  )  ;", "respotHeader (  \" Cache - Control \"  ,     \" private ,    must - revalidate \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareResponse"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( attributes ,    this . staticAttributes )  ;", "}", "METHOD_END"], "methodName": ["setAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "if    ( propString    !  =    null )     {", "StringTokenizer   st    =    new   StringTokenizer ( propString ,     \"  ,  \"  )  ;", "while    ( st . hasMoreTokens (  )  )     {", "String   tok    =    st . nextToken (  )  ;", "int   eqIdx    =    tok . indexOf (  '  =  '  )  ;", "if    ( eqIdx    =  =     (  -  1  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Expected    =    in   attributes   CSV   string    '  \"     +    propString )     +     \"  '  \"  )  )  ;", "}", "if    ( eqIdx    >  =     (  ( tok . length (  )  )     -     2  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" At   least    2    characters    (  [  ]  )    required   in   attributes   CSV   string    '  \"     +    propString )     +     \"  '  \"  )  )  ;", "}", "String   name    =    tok . substring (  0  ,    eqIdx )  ;", "String   value    =    tok . substring (  ( eqIdx    +     1  )  )  ;", "value    =    value . substring (  1  )  ;", "value    =    value . substring (  0  ,     (  ( value . length (  )  )     -     1  )  )  ;", "addStaticAttribute ( name ,    value )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setAttributesCSV"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "if    ( attributes    !  =    null )     {", "attributes . forEach ( this :  : addStaticAttribute )  ;", "}", "}", "METHOD_END"], "methodName": ["setAttributesMap"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "this . contentType    =    contentType ;", "}", "METHOD_END"], "methodName": ["setContentType"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "this . exposeContextBeansAsAttributes    =    exposeContextBeansAsAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeContextBeansAsAttributes"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "this . exposePathVariables    =    exposePathVariables ;", "}", "METHOD_END"], "methodName": ["setExposePathVariables"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "this . exposedContextBeanNames    =    new   HashSet <  >  ( Arrays . asList ( exposedContextBeanNames )  )  ;", "}", "METHOD_END"], "methodName": ["setExposedContextBeanNames"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "this . requestContextAttribute    =    requestContextAttribute ;", "}", "METHOD_END"], "methodName": ["setRequestContextAttribute"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "MediaType   mediaType    =     (  ( MediaType )     ( request . getAttribute ( View . SELECTED _ CONTENT _ TYPE )  )  )  ;", "if    (  ( mediaType    !  =    null )     &  &     ( mediaType . isConcrete (  )  )  )     {", "response . setContentType ( mediaType . toString (  )  )  ;", "} else    {", "response . setContentType ( getContentType (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setResponseContentType"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "response . setContentType ( getContentType (  )  )  ;", "response . setContentLength ( baos . size (  )  )  ;", "SOutputStream   out    =    response . getOutputStream (  )  ;", "baos . writeTo ( out )  ;", "out . flush (  )  ;", "}", "METHOD_END"], "methodName": ["writeToResponse"], "fileName": "org.springframework.web.servlet.view.AbstractView"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "v . setAttributesCSV (  \"  \"  )  ;", "assertEquals (  0  ,    v . getStaticAttributes (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeCSVParsingIgnoresEmptyString"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "v . setAttributesCSV ( null )  ;", "assertEquals (  0  ,    v . getStaticAttributes (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeCSVParsingIgnoresNull"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "v . setAttributesCSV (  \" foo =  [ de ]  ,  \"  )  ;", "assertEquals (  1  ,    v . getStaticAttributes (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeCSVParsingIgoresTrailingComma"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "try    {", "v . setAttributesCSV (  \" fweoiruiu \"  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "try    {", "v . setAttributesCSV (  \" fweoiruiu =  \"  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "try    {", "v . setAttributesCSV (  \" fweoiruiu =  [  \"  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "try    {", "v . setAttributesCSV (  \" fweoiruiu =  [ de ]  ,  =  \"  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["attributeCSVParsingInvalid"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "v . setAttributesCSV (  \" foo =  [ bar ]  , king =  [ kong ]  \"  )  ;", "assertTrue (  (  ( v . getStaticAttributes (  )  . size (  )  )     =  =     2  )  )  ;", "assertTrue ( v . getStaticAttributes (  )  . get (  \" foo \"  )  . equals (  \" bar \"  )  )  ;", "assertTrue ( v . getStaticAttributes (  )  . get (  \" king \"  )  . equals (  \" kong \"  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeCSVParsingValid"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "String   fooval    =     \" owfie         fue &  3  [  ]  [  [  [  2     \\ n \\ n    \\ r       \\ t    8  \\ ufffd 3  \"  ;", "String   kingval    =     \"  \"  ;", "v . setAttributesCSV (  (  (  (  (  \" foo =  (  \"     +    fooval )     +     \"  )  , king =  {  \"  )     +    kingval )     +     \"  }  , f 1  =  [ we ]  \"  )  )  ;", "assertTrue (  (  ( v . getStaticAttributes (  )  . size (  )  )     =  =     3  )  )  ;", "assertTrue ( v . getStaticAttributes (  )  . get (  \" foo \"  )  . equals ( fooval )  )  ;", "assertTrue ( v . getStaticAttributes (  )  . get (  \" king \"  )  . equals ( kingval )  )  ;", "}", "METHOD_END"], "methodName": ["attributeCSVParsingValidWithWeirdCharacters"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "expected . forEach (  (    k ,    v )     -  >    assertEquals (  (  (  \" Values   for   model   key    '  \"     +    k )     +     \"  '    must   match \"  )  ,    expected . get ( k )  ,    actual . get ( k )  )  )  ;", "}", "METHOD_END"], "methodName": ["checkContainsAll"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", ". TestView   tv    =    new    . TestView ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    Object >    pathVars    =    new   HashMap <  >  (  )  ;", "pathVars . put (  \" one \"  ,     \" bar \"  )  ;", "pathVars . put (  \" something \"  ,     \" else \"  )  ;", "request . setAttribute ( View . PATH _ VARIABLES ,    pathVars )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" one \"  ,    new   HashMap <  >  (  )  )  ;", "model . put (  \" two \"  ,    new   Object (  )  )  ;", "tv . render ( model ,    request ,    response )  ;", "checkContainsAll ( model ,    tv . model )  ;", "assertEquals (  3  ,    tv . model . size (  )  )  ;", "assertEquals (  \" else \"  ,    tv . model . get (  \" something \"  )  )  ;", "assertTrue ( tv . initialized )  ;", "}", "METHOD_END"], "methodName": ["dynamicModelOverridesPathVariables"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", ". TestView   tv    =    new    . TestView ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "Properties   p    =    new   Properties (  )  ;", "p . setProperty (  \" one \"  ,     \" bar \"  )  ;", "p . setProperty (  \" something \"  ,     \" else \"  )  ;", "tv . setAttributes ( p )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" one \"  ,    new   HashMap <  >  (  )  )  ;", "model . put (  \" two \"  ,    new   Object (  )  )  ;", "tv . render ( model ,    request ,    response )  ;", "checkContainsAll ( model ,    tv . model )  ;", "assertEquals (  3  ,    tv . model . size (  )  )  ;", "assertEquals (  \" else \"  ,    tv . model . get (  \" something \"  )  )  ;", "assertTrue ( tv . initialized )  ;", "}", "METHOD_END"], "methodName": ["dynamicModelOverridesStaticAttributesIfCollision"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "AbstractView   v    =    new   BaseViewTests . ConcreteView (  )  ;", "v . setAttributes ( null )  ;", "assertEquals (  0  ,    v . getStaticAttributes (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["ignoresNullAttributes"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", ". TestView   tv    =    new    . TestView ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "Properties   p    =    new   Properties (  )  ;", "p . setProperty (  \" one \"  ,     \" bar \"  )  ;", "p . setProperty (  \" something \"  ,     \" else \"  )  ;", "tv . setAttributes ( p )  ;", "Map < String ,    Object >    pathVars    =    new   HashMap <  >  (  )  ;", "pathVars . put (  \" one \"  ,    new   HashMap <  >  (  )  )  ;", "pathVars . put (  \" two \"  ,    new   Object (  )  )  ;", "request . setAttribute ( View . PATH _ VARIABLES ,    pathVars )  ;", "tv . render ( new   HashMap (  )  ,    request ,    response )  ;", "checkContainsAll ( pathVars ,    tv . model )  ;", "assertEquals (  3  ,    tv . model . size (  )  )  ;", "assertEquals (  \" else \"  ,    tv . model . get (  \" something \"  )  )  ;", "assertTrue ( tv . initialized )  ;", "}", "METHOD_END"], "methodName": ["pathVarsOverrideStaticAttributes"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", ". TestView   tv    =    new    . TestView ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "Properties   p    =    new   Properties (  )  ;", "p . setProperty (  \" foo \"  ,     \" bar \"  )  ;", "p . setProperty (  \" something \"  ,     \" else \"  )  ;", "tv . setAttributes ( p )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" one \"  ,    new   HashMap <  >  (  )  )  ;", "model . put (  \" two \"  ,    new   Object (  )  )  ;", "tv . render ( model ,    request ,    response )  ;", "checkContainsAll ( model ,    tv . model )  ;", "checkContainsAll ( p ,    tv . model )  ;", "assertTrue ( tv . initialized )  ;", "}", "METHOD_END"], "methodName": ["renderWithStaticAttributesNoCollision"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", ". TestView   tv    =    new    . TestView ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "tv . setApplicationContext ( wac )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "model . put (  \" something \"  ,    new   Object (  )  )  ;", "tv . render ( model ,    request ,    response )  ;", "checkContainsAll ( model ,    tv . model )  ;", "assertTrue ( tv . initialized )  ;", "}", "METHOD_END"], "methodName": ["renderWithoutStaticAttributes"], "fileName": "org.springframework.web.servlet.view.BaseViewTests"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.BeanNameViewResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( View   candidateView    :    candidateViews )     {", "if    ( candidateView   instanceof   SmartView )     {", "SmartView   smartView    =     (  ( SmartView )     ( candidateView )  )  ;", "if    ( smartView . isRedirectView (  )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Returning   redirect   view    [  \"     +    candidateView )     +     \"  ]  \"  )  )  ;", "}", "return   candidateView ;", "}", "}", "}", "for    ( MediaType   mediaType    :    requestedMediaTypes )     {", "for    ( View   candidateView    :    candidateViews )     {", "if    ( StringUtils . hasText ( candidateView . getType (  )  )  )     {", "MediaType   candidateType    =    MediaType . parseMediaType ( candidateView . getType (  )  )  ;", "if    ( mediaType . isCompatibleWith ( candidateType )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Returning    [  \"     +    candidateView )     +     \"  ]    based   on   requested   media   type    '  \"  )     +    mediaType )     +     \"  '  \"  )  )  ;", "}", "attrs . setAttribute ( View . SELECTED _ CONTENT _ TYPE ,    mediaType ,    SCOPE _ REQUEST )  ;", "return   candidateView ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBestView"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "List < View >    candidateViews    =    new   ArrayList <  >  (  )  ;", "if    (  ( this . viewResolvers )     !  =    null )     {", "Assert . state (  (  ( this . contentNegotiationManager )     !  =    null )  ,     \" No   onManager   set \"  )  ;", "for    ( ViewResolver   viewResolver    :    this . viewResolvers )     {", "View   view    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "if    ( view    !  =    null )     {", "candidateViews . add ( view )  ;", "}", "for    ( MediaType   requestedMediaType    :    requestedMediaTypes )     {", "List < String >    extensions    =    this . contentNegotiationManager . resolveFileExtensions ( requestedMediaType )  ;", "for    ( String   extension    :    extensions )     {", "String   viewNameWithExtension    =     ( viewName    +     '  .  '  )     +    extension ;", "view    =    viewResolver . resolveViewName ( viewNameWithExtension ,    locale )  ;", "if    ( view    !  =    null )     {", "candidateViews . add ( view )  ;", "}", "}", "}", "}", "}", "if    (  !  ( CollectionUtils . isEmpty ( this . defaultViews )  )  )     {", "candidateViews . addAll ( this . defaultViews )  ;", "}", "return   candidateViews ;", "}", "METHOD_END"], "methodName": ["getCandidateViews"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["getContentNegotiationManager"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return    ( this . defaultViews )     !  =    null    ?    Collections . unmodifiableList ( this . defaultViews )     :    Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultViews"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . contentNegotiationManager )     !  =    null )  ,     \" No   ContentNegotiationManager   set \"  )  ;", "try    {", "ServletWebRequest   webRequest    =    new   ServletWebRequest ( request )  ;", "List < MediaType >    acceptableMediaTypes    =    this . contentNegotiationManager . resolveMediaTypes ( webRequest )  ;", "List < MediaType >    producibleMediaTypes    =    getProducibleMediaTypes ( request )  ;", "Set < MediaType >    compatibleMediaTypes    =    new   LinkedHashSet <  >  (  )  ;", "for    ( MediaType   acceptable    :    acceptableMediaTypes )     {", "for    ( MediaType   producible    :    producibleMediaTypes )     {", "if    ( acceptable . isCompatibleWith ( producible )  )     {", "compatibleMediaTypes . add ( getMostSpecificMediaType ( acceptable ,    producible )  )  ;", "}", "}", "}", "List < MediaType >    selectedMediaTypes    =    new   ArrayList ( compatibleMediaTypes )  ;", "MediaType . sortBySpecificityAndQuality ( selectedMediaTypes )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  (  \" Requested   media   types   are    \"     +    selectedMediaTypes )     +     \"    based   on   Accept   header   types    \"  )     +     \" and   producible   media   types    \"  )     +    producibleMediaTypes )     +     \"  )  \"  )  )  ;", "}", "return   selectedMediaTypes ;", "}    catch    ( HttpMediaTypeNotAcceptableException   ex )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getMediaTypes"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "produceType    =    produceType . copyQualityValue ( acceptType )  ;", "return    ( SPECIFICITY _ COMPARATOR . compare ( acceptType ,    produceType )  )     <     0     ?    acceptType    :    produceType ;", "}", "METHOD_END"], "methodName": ["getMostSpecificMediaType"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    mediaTypes    =     (  ( Set < MediaType >  )     ( request . getAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE )  )  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( mediaTypes )  )  )     {", "return   new   ArrayList ( mediaTypes )  ;", "} else    {", "return   Collections . singletonList ( ALL )  ;", "}", "}", "METHOD_END"], "methodName": ["getProducibleMediaTypes"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return    ( this . viewResolvers )     !  =    null    ?    Collections . unmodifiableList ( this . viewResolvers )     :    Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getViewResolvers"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . useNotAcceptableStatusCode ;", "}", "METHOD_END"], "methodName": ["isUseNotAcceptableStatusCode"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . contentNegotiationManager    =    contentNegotiationManager ;", "}", "METHOD_END"], "methodName": ["setContentNegotiationManager"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultViews    =    defaultViews ;", "}", "METHOD_END"], "methodName": ["setDefaultViews"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . useNotAcceptableStatusCode    =    useNotAcceptableStatusCode ;", "}", "METHOD_END"], "methodName": ["setUseNotAcceptableStatusCode"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . viewResolvers    =    viewResolvers ;", "}", "METHOD_END"], "methodName": ["setViewResolvers"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolver"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "viewResolver    =    new    (  )  ;", "viewResolver . setApplicationContext ( wac )  ;", "request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / test \"  )  ;", "RequestContextHolder . setRequestAttributes ( new   ServletRequestAttributes ( request )  )  ;", "}", "METHOD_END"], "methodName": ["createViewResolver"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "Set < MediaType >    producibleTypes    =    Collections . singleton ( APPLICATION _ XHTML _ XML )  ;", "request . setAttribute ( HandlerMapping . PRODUCIBLE _ MEDIA _ TYPES _ ATTRIBUTE ,    producibleTypes )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xml ; q =  0  .  9  , application / xhtml + xml ,  *  /  *  ; q =  0  .  8  \"  )  ;", "v . afterPropertiesSet (  )  ;", "List < MediaType >    result    =    v . getMediaTypes ( request )  ;", "assertEquals (  \" Invalid   content   type \"  ,    new   MediaType (  \" application \"  ,     \" xhtml + xml \"  )  ,    result . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["getMediaTypeAcceptHeaderWithProduces"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   webAppContext    =    new   StaticWebApplicationContext (  )  ;", "webAppContext . setServletContext ( new   MockServletContext (  )  )  ;", "webAppContext . refresh (  )  ;", "InternalResourceViewResolver   nestedResolver    =    new   InternalResourceViewResolver (  )  ;", "nestedResolver . setApplicationContext ( webAppContext )  ;", "nestedResolver . setViewClass ( InternalResourceView . class )  ;", "viewResolver . setViewResolvers ( new   ArrayList <  >  ( Arrays . asList ( nestedResolver )  )  )  ;", "FixedContentNegotiationStrategy   fixedStrategy    =    new   FixedContentNegotiationStrategy ( MediaType . TEXT _ HTML )  ;", "viewResolver . setContentNegotiationManager ( new   accept . ContentNegotiationManager ( fixedStrategy )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertNotNull (  \" Invalid   view \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["nestedViewResolverIsNotSpringBean"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . resetRequestAttributes (  )  ;", "}", "METHOD_END"], "methodName": ["resetRequestContextHolder"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xhtml + xml , application / xml ; q =  0  .  9  ,  *  /  *  ; q =  0  .  8  \"  )  ;", "viewResolverMock    =    mock (  . class )  ;", "viewResolver . sets ( Collections . singletonList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xml \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn ( null )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertNull (  \" Invalid   view \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewContentTypeNull"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xhtml + xml , application / xml ; q =  0  .  9  ,  *  /  *  ; q =  0  .  8  \"  )  ;", "viewResolverMock 1     =    mock (  . class )  ;", "viewResolverMock 2     =    mock (  . class )  ;", "viewResolver . sets ( Arrays . asList ( viewResolverMock 1  ,    viewResolverMock 2  )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock 1     =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   viewMock 2     =    mock ( View . class ,     \" text _ html \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock 1  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 1  )  ;", "given ( viewResolverMock 2  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 2  )  ;", "given ( viewMock 1  . getContentType (  )  )  . willReturn (  \" application / xml \"  )  ;", "given ( viewMock 2  . getContentType (  )  )  . willReturn (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock 2  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameAcceptHeader"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", "viewResolverMock 1     =    mock (  . class )  ;", "viewResolverMock 2     =    mock (  . class )  ;", "viewResolver . sets ( Arrays . asList ( viewResolverMock 1  ,    viewResolverMock 2  )  )  ;", "View   viewMock 1     =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   viewMock 2     =    mock ( View . class ,     \" text _ html \"  )  ;", "View   viewMock 3     =    mock ( View . class ,     \" application _ json \"  )  ;", "List < View >    defaultViews    =    new   ArrayList <  >  (  )  ;", "defaultViews . add ( viewMock 3  )  ;", "viewResolver . setDefaultViews ( defaultViews )  ;", "viewResolver . afterPropertiesSet (  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock 1  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 1  )  ;", "given ( viewResolverMock 2  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 2  )  ;", "given ( viewMock 1  . getContentType (  )  )  . willReturn (  \" application / xml \"  )  ;", "given ( viewMock 2  . getContentType (  )  )  . willReturn (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  )  ;", "given ( viewMock 3  . getContentType (  )  )  . willReturn (  \" application / json \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock 3  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameAcceptHeaderDefaultView"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" text / plain ; q =  0  .  5  ,    application / json \"  )  ;", "viewResolver . setContentNegotiationManager ( new   accept . ContentNegotiationManager ( new   HeaderContentNegotiationStrategy (  )  )  )  ;", "ViewResolver   htmlViewResolver    =    mock ( ViewResolver . class )  ;", "ViewResolver   jsonViewResolver    =    mock ( ViewResolver . class )  ;", "viewResolver . setViewResolvers ( Arrays . asList ( htmlViewResolver ,    jsonViewResolver )  )  ;", "View   htmlView    =    mock ( View . class ,     \" text _ html \"  )  ;", "View   jsonViewMock    =    mock ( View . class ,     \" application _ json \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( htmlViewResolver . resolveViewName ( viewName ,    locale )  )  . willReturn ( htmlView )  ;", "given ( jsonViewResolver . resolveViewName ( viewName ,    locale )  )  . willReturn ( jsonViewMock )  ;", "given ( htmlView . getContentType (  )  )  . willReturn (  \" text / html \"  )  ;", "given ( jsonViewMock . getContentType (  )  )  . willReturn (  \" application / json \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    jsonViewMock ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameAcceptHeaderSortByQuality"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" application / vnd . example - v 2  + xml \"  )  ;", "viewResolverMock    =    mock (  . class )  ;", "viewResolver . sets ( Arrays . asList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xml \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application /  *  + xml \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock ,    result )  ;", "assertEquals ( new   MediaType (  \" application \"  ,     \" vnd . example - v 2  + xml \"  )  ,    request . getAttribute ( View . SELECTED _ CONTENT _ TYPE )  )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameAcceptHeaderWithSuffix"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  \"  / test . html \"  )  ;", "viewResolverMock 1     =    mock (  . class ,     \" viewResolver 1  \"  )  ;", "viewResolverMock 2     =    mock (  . class ,     \" viewResolver 2  \"  )  ;", "viewResolver . sets ( Arrays . asList ( viewResolverMock 1  ,    viewResolverMock 2  )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock 1     =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   viewMock 2     =    mock ( View . class ,     \" text _ html \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock 1  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 1  )  ;", "given ( viewResolverMock 1  . resolveViewName (  ( viewName    +     \"  . html \"  )  ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock 2  . resolveViewName ( viewName ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock 2  . resolveViewName (  ( viewName    +     \"  . html \"  )  ,    locale )  )  . willReturn ( viewMock 2  )  ;", "given ( viewMock 1  . getContentType (  )  )  . willReturn (  \" application / xml \"  )  ;", "given ( viewMock 2  . getContentType (  )  )  . willReturn (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock 2  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameFilename"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  \"  / test . json \"  )  ;", "Map < String ,    MediaType >    mapping    =    Collections . singletonMap (  \" json \"  ,    APPLICATION _ JSON )  ;", "PathExtensionContentNegotiationStrategy   pathStrategy    =    new   PathExtensionContentNegotiationStrategy ( mapping )  ;", "viewResolver . setContentNegotiationManager ( new   accept . ContentNegotiationManager ( pathStrategy )  )  ;", "ViewResolver   viewResolverMock 1     =    mock ( ViewResolver . class )  ;", "ViewResolver   viewResolverMock 2     =    mock ( ViewResolver . class )  ;", "viewResolver . setViewResolvers ( Arrays . asList ( viewResolverMock 1  ,    viewResolverMock 2  )  )  ;", "View   viewMock 1     =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   viewMock 2     =    mock ( View . class ,     \" text _ html \"  )  ;", "View   viewMock 3     =    mock ( View . class ,     \" application _ json \"  )  ;", "List < View >    defaultViews    =    new   ArrayList <  >  (  )  ;", "defaultViews . add ( viewMock 3  )  ;", "viewResolver . setDefaultViews ( defaultViews )  ;", "viewResolver . afterPropertiesSet (  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock 1  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 1  )  ;", "given ( viewResolverMock 1  . resolveViewName (  ( viewName    +     \"  . json \"  )  ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock 2  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 2  )  ;", "given ( viewResolverMock 2  . resolveViewName (  ( viewName    +     \"  . json \"  )  ,    locale )  )  . willReturn ( null )  ;", "given ( viewMock 1  . getContentType (  )  )  . willReturn (  \" application / xml \"  )  ;", "given ( viewMock 2  . getContentType (  )  )  . willReturn (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  )  ;", "given ( viewMock 3  . getContentType (  )  )  . willReturn (  \" application / json \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock 3  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameFilenameDefaultView"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" application / json \"  )  ;", "request . setRequestURI (  \"  / test \"  )  ;", "StaticWebApplicationContext   webAppContext    =    new   StaticWebApplicationContext (  )  ;", "webAppContext . setServletContext ( new   MockServletContext (  )  )  ;", "webAppContext . refresh (  )  ;", "UrlBased   url    =    new   InternalResource (  )  ;", "url . setApplicationContext ( webAppContext )  ;", "xml    =    mock (  . class )  ;", "viewResolver . sets ( Arrays .  <  > asList ( xml ,    url )  )  ;", "View   xmlView    =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   jsonView    =    mock ( View . class ,     \" application _ json \"  )  ;", "viewResolver . setDefaultViews ( Arrays . asList ( jsonView )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "String   viewName    =     \" redirect : anotherTest \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( xml . resolveViewName ( viewName ,    locale )  )  . willReturn ( xmlView )  ;", "given ( jsonView . getContentType (  )  )  . willReturn (  \" application / json \"  )  ;", "View   actualView    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertEquals (  \" Invalid   view \"  ,    RedirectView . class ,    actualView . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameRedirectView"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" application / vnd . ms - excel \"  )  ;", "Map < String ,    MediaType >    mapping    =    Collections . singletonMap (  \" xls \"  ,    MediaType . valueOf (  \" application / vnd . ms - excel \"  )  )  ;", "MappingMediaTypeFileExtensionResolver   extensionsResolver    =    new   MappingMediaTypeFileExtensionResolver ( mapping )  ;", "onManager   manager    =    new   onManager ( new   HeaderonStrategy (  )  )  ;", "manager . addFileExtensionResolvers ( extensionsResolver )  ;", "viewResolver . setonManager ( manager )  ;", "ViewResolver   viewResolverMock    =    mock ( ViewResolver . class )  ;", "viewResolver . setViewResolvers ( Collections . singletonList ( viewResolverMock )  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xls \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock . resolveViewName (  ( viewName    +     \"  . xls \"  )  ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application / vnd . ms - excel \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameWithAcceptHeader"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xhtml + xml , application / xml ; q =  0  .  9  ,  *  /  *  ; q =  0  .  8  \"  )  ;", "MediaType   mediaType    =    new   MediaType (  \" application \"  ,     \" xml \"  )  ;", "FixedContentNegotiationStrategy   fixedStrategy    =    new   FixedContentNegotiationStrategy ( mediaType )  ;", "viewResolver . setContentNegotiationManager ( new   accept . ContentNegotiationManager ( fixedStrategy )  )  ;", "ViewResolver   viewResolverMock 1     =    mock ( ViewResolver . class ,     \" viewResolver 1  \"  )  ;", "ViewResolver   viewResolverMock 2     =    mock ( ViewResolver . class ,     \" viewResolver 2  \"  )  ;", "viewResolver . setViewResolvers ( Arrays . asList ( viewResolverMock 1  ,    viewResolverMock 2  )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock 1     =    mock ( View . class ,     \" application _ xml \"  )  ;", "View   viewMock 2     =    mock ( View . class ,     \" text _ html \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock 1  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 1  )  ;", "given ( viewResolverMock 2  . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock 2  )  ;", "given ( viewMock 1  . getContentType (  )  )  . willReturn (  \" application / xml \"  )  ;", "given ( viewMock 2  . getContentType (  )  )  . willReturn (  \" text / html ; charset = ISO -  8  8  5  9  -  1  \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock 1  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameWithDefaultContentType"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" application \"  )  ;", "v . afterPropertiesSet (  )  ;", "View   result    =    v . resolveViewName (  \" test \"  ,    Locale . ENGLISH )  ;", "assertNull ( result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameWithInvalidAcceptHeader"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  \"  / test . xls \"  )  ;", "viewResolverMock    =    mock (  . class )  ;", "viewResolver . sets ( Collections . singletonList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xls \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock . resolveViewName (  ( viewName    +     \"  . xls \"  )  ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application / vnd . ms - excel \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameWithPathExtension"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addParameter (  \" format \"  ,     \" xls \"  )  ;", "Map < String ,    MediaType >    mapping    =    Collections . singletonMap (  \" xls \"  ,    MediaType . valueOf (  \" application / vnd . ms - excel \"  )  )  ;", "ParameterContentNegotiationStrategy   paramStrategy    =    new   ParameterContentNegotiationStrategy ( mapping )  ;", "viewResolver . setContentNegotiationManager ( new   accept . ContentNegotiationManager ( paramStrategy )  )  ;", "ViewResolver   viewResolverMock    =    mock ( ViewResolver . class )  ;", "viewResolver . setViewResolvers ( Collections . singletonList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xls \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( null )  ;", "given ( viewResolverMock . resolveViewName (  ( viewName    +     \"  . xls \"  )  ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application / vnd . ms - excel \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertSame (  \" Invalid   view \"  ,    viewMock ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNameWithRequestParameter"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xhtml + xml , application / xml ; q =  0  .  9  \"  )  ;", "viewResolverMock    =    mock (  . class )  ;", "viewResolver . sets ( Collections . singletonList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xml \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application / pdf \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertNull (  \" Invalid   view \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNoMatch"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "viewResolver . setUseNotAcceptableStatusCode ( true )  ;", "request . addHeader (  \" Accept \"  ,     \" text / html , application / xhtml + xml , application / xml ; q =  0  .  9  \"  )  ;", "viewResolverMock    =    mock (  . class )  ;", "viewResolver . sets ( Collections . singletonList ( viewResolverMock )  )  ;", "viewResolver . afterPropertiesSet (  )  ;", "View   viewMock    =    mock ( View . class ,     \" application _ xml \"  )  ;", "String   viewName    =     \" view \"  ;", "Locale   locale    =    Locale . ENGLISH ;", "given ( viewResolverMock . resolveViewName ( viewName ,    locale )  )  . willReturn ( viewMock )  ;", "given ( viewMock . getContentType (  )  )  . willReturn (  \" application / pdf \"  )  ;", "View   result    =    viewResolver . resolveViewName ( viewName ,    locale )  ;", "assertNotNull (  \" Invalid   view \"  ,    result )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "result . render ( null ,    request ,    response )  ;", "assertEquals (  \" Invalid   status   code   set \"  ,     4  0  6  ,    response . getStatus (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveViewNoMatchUseUnacceptableStatus"], "fileName": "org.springframework.web.servlet.view.ContentNegotiatingViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setAlwaysUseFullPath ( alwaysUseFullPath )  ;", "}", "METHOD_END"], "methodName": ["setAlwaysUseFullPath"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . prefix    =     ( prefix    !  =    null )     ?    prefix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setPrefix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setRemoveSemicolonContent ( removeSemicolonContent )  ;", "}", "METHOD_END"], "methodName": ["setRemoveSemicolonContent"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . separator    =    separator ;", "}", "METHOD_END"], "methodName": ["setSeparator"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . stripExtension    =    stripExtension ;", "}", "METHOD_END"], "methodName": ["setStripExtension"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . stripLeadingSlash    =    stripLeadingSlash ;", "}", "METHOD_END"], "methodName": ["setStripLeadingSlash"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . stripTrailingSlash    =    stripTrailingSlash ;", "}", "METHOD_END"], "methodName": ["setStripTrailingSlash"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . suffix    =     ( suffix    !  =    null )     ?    suffix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setSuffix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "this . urlPathHelper . setUrlDecode ( urlDecode )  ;", "}", "METHOD_END"], "methodName": ["setUrlDecode"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( urlPathHelper ,     \" UrlPathHelper   must   not   be   null \"  )  ;", "this . urlPathHelper    =    urlPathHelper ;", "}", "METHOD_END"], "methodName": ["setUrlPathHelper"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "String   path    =    lookupPath ;", "if    (  ( this . stripLeadingSlash )     &  &     ( path . startsWith (  . SLASH )  )  )     {", "path    =    path . substring (  1  )  ;", "}", "if    (  ( this . stripTrailingSlash )     &  &     ( path . endsWith (  . SLASH )  )  )     {", "path    =    path . substring (  0  ,     (  ( path . length (  )  )     -     1  )  )  ;", "}", "if    ( this . stripExtension )     {", "path    =    StringUtils . stripFilenameExtension ( path )  ;", "}", "if    (  !  (  . SLASH . equals ( this . separator )  )  )     {", "path    =    StringUtils . replace ( path ,     . SLASH ,    this . separator )  ;", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["transformPath"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"}, {"methodBody": ["METHOD_START", "{", "String   actualViewName    =    this . translator . getViewName ( this . request )  ;", "assertNotNull ( actualViewName )  ;", "assertEquals (  \" Did   not   get   the   expected   viewName   from   the    . getViewName (  .  .  )  \"  ,    expectedViewName ,    actualViewName )  ;", "}", "METHOD_END"], "methodName": ["assertViewName"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "this . translator    =    new   DefaultRequestToViewNameTranslator (  )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . request . setContextPath (  . CONTEXT _ PATH )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     \"  /  \"  )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     ( DefaultRequestToViewNameTranslatorTests . EXTENSION )  )  )  ;", "this . translator . setStripExtension ( false )  ;", "assertViewName (  (  ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )     +     ( DefaultRequestToViewNameTranslatorTests . EXTENSION )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameLeavesExtensionIfSoConfigured"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     \"  /  \"  )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     \"  /  \"  )  )  ;", "this . translator . setStripLeadingSlash ( false )  ;", "assertViewName (  (  \"  /  \"     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameLeavesLeadingSlashIfSoConfigured"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     \"  /  \"  )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     \"  /  \"  )  )  ;", "this . translator . setStripTrailingSlash ( false )  ;", "assertViewName (  (  ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )     +     \"  /  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameLeavesTrailingSlashIfSoConfigured"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     \"  / fiona \"  )     +     ( DefaultRequestToViewNameTranslatorTests . EXTENSION )  )  )  ;", "this . translator . setSeparator (  \"  _  \"  )  ;", "assertViewName (  (  ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )     +     \"  _ fiona \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithCustomSeparator"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     ( DefaultRequestToViewNameTranslatorTests . EXTENSION )  )  )  ;", "assertViewName ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithDefaultConfiguration"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )  )  ;", "assertViewName ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithNoExtension"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )  )  ;", "this . translator . setPrefix ( null )  ;", "assertViewName ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithNullPrefix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )  )  ;", "this . translator . setSuffix ( null )  ;", "assertViewName ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithNullSuffix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "final   String   prefix    =     \" fiona _  \"  ;", "request . setRequestURI (  (  (  . CONTEXT _ PATH )     +     (  . VIEW _ NAME )  )  )  ;", "this . translator . setPrefix ( prefix )  ;", "assertViewName (  ( prefix    +     (  . VIEW _ NAME )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithPrefix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "request . setRequestURI (  (  (  ( DefaultRequestToViewNameTranslatorTests . CONTEXT _ PATH )     +     ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  )     +     \"  ; a = A ; b = B \"  )  )  ;", "assertViewName ( DefaultRequestToViewNameTranslatorTests . VIEW _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithSemicolonContent"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "final   String   suffix    =     \"  . fiona \"  ;", "request . setRequestURI (  (  (  . CONTEXT _ PATH )     +     (  . VIEW _ NAME )  )  )  ;", "this . translator . setSuffix ( suffix )  ;", "assertViewName (  (  (  . VIEW _ NAME )     +    suffix )  )  ;", "}", "METHOD_END"], "methodName": ["testGetViewNameWithSuffix"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "this . t . setUrlPathHelper ( null )  ;", "}    catch    ( IllegalArgumentException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["testTrySetUrlPathHelperToNull"], "fileName": "org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatorTests"}, {"methodBody": ["METHOD_START", "{", "return   new   BindStatus ( new   RequestContext ( this . request )  ,    path ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBindStatus"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return   new   BindStatus ( new   RequestContext ( this . request )  ,    path ,    true )  ;", "}", "METHOD_END"], "methodName": ["getBindStatus"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . contextPath ;", "}", "METHOD_END"], "methodName": ["getContextPath"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return    ( getContextPath (  )  )     +    relativeUrl ;", "}", "METHOD_END"], "methodName": ["getContextUrl"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "UriTemplate   template    =    new   UriTemplate ( relativeUrl )  ;", "return    ( gePath (  )  )     +     ( template . expand ( params )  . toASCIIString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getContextUrl"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . messageMap . get ( code )  ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . messageMap . get ( code )  ;", "return   msg    !  =    null    ?    msg    :    defaultMsg ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return    ( this . messageMap . get ( code )  )     +    args ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . messageMap . get ( code )  ;", "return   msg    !  =    null    ?    msg    +    args    :    defaultMsg ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return   this . themeMessageMap . get ( code )  ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . themeMessageMap . get ( code )  ;", "return   msg    !  =    null    ?    msg    :    defaultMsg ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return    ( this . themeMessageMap . get ( code )  )     +    args ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "String   msg    =    this . themeMessageMap . get ( code )  ;", "return   msg    !  =    null    ?    msg    +    args    :    defaultMsg ;", "}", "METHOD_END"], "methodName": ["getThemeMessage"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "this . contextPath    =    contextPath ;", "}", "METHOD_END"], "methodName": ["setContextPath"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "this . messageMap    =    messageMap ;", "}", "METHOD_END"], "methodName": ["setMessageMap"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "this . themeMessageMap    =    themeMessageMap ;", "}", "METHOD_END"], "methodName": ["setThemeMessageMap"], "fileName": "org.springframework.web.servlet.view.DummyMacroRequestContext"}, {"methodBody": ["METHOD_START", "{", "return   request . getRequestDispatcher ( path )  ;", "}", "METHOD_END"], "methodName": ["getRequestDispatcher"], "fileName": "org.springframework.web.servlet.view.InternalResourceView"}, {"methodBody": ["METHOD_START", "{", "String   path    =    getUrl (  )  ;", "Assert . state (  ( path    !  =    null )  ,     \"  ' url '    not   set \"  )  ;", "if    ( this . preventDispatchLoop )     {", "String   uri    =    request . getRequestURI (  )  ;", "if    ( path . startsWith (  \"  /  \"  )     ?    uri . equals ( path )     :    uri . equals ( StringUtils . applyRelativePath ( uri ,    path )  )  )     {", "throw   new   SException (  (  (  (  (  (  (  \" Circular   view   path    [  \"     +    path )     +     \"  ]  :    would   dispatch   back    \"  )     +     \" to   the   current   handler   URL    [  \"  )     +    uri )     +     \"  ]    again .    Check   your   ViewResolver   setup !     \"  )     +     \"  ( Hint :    This   may   be   the   result   of   an   unspecified   view ,    due   to   default   view   name   generation .  )  \"  )  )  ;", "}", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["prepareForRendering"], "fileName": "org.springframework.web.servlet.view.InternalResourceView"}, {"methodBody": ["METHOD_START", "{", "this . alwaysInclude    =    alwaysInclude ;", "}", "METHOD_END"], "methodName": ["setAlwaysInclude"], "fileName": "org.springframework.web.servlet.view.InternalResourceView"}, {"methodBody": ["METHOD_START", "{", "this . preventDispatchLoop    =    preventDispatchLoop ;", "}", "METHOD_END"], "methodName": ["setPreventDispatchLoop"], "fileName": "org.springframework.web.servlet.view.InternalResourceView"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . alwaysInclude )     |  |     ( WebUtils . isIncludeRequest ( request )  )  )     |  |     ( response . isCommitted (  )  )  ;", "}", "METHOD_END"], "methodName": ["useInclude"], "fileName": "org.springframework.web.servlet.view.InternalResourceView"}, {"methodBody": ["METHOD_START", "{", "this . alwaysInclude    =    alwaysInclude ;", "}", "METHOD_END"], "methodName": ["setAlwaysInclude"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewResolver"}, {"methodBody": ["METHOD_START", "{", "given ( request . getAttribute ( View . PATH _ VARIABLES )  )  . willReturn ( null )  ;", "given ( request . getRequestDispatcher (  . url )  )  . willReturn ( new   MockRequestDispatcher (  . url )  )  ;", "view . setUrl (  . url )  ;", "view . setAlwaysInclude ( true )  ;", "view . render (  . model ,    request ,    response )  ;", "assertEquals (  . url ,    response . getIncludedUrl (  )  )  ;", ". model . forEach (  (    key ,    value )     -  >    verify ( request )  . setAttribute ( key ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["alwaysInclude"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  \" GET \"  ,     \"  / myservlet / handler . do \"  )  ;", "request . setContextPath (  \"  / mycontext \"  )  ;", "request . setServletPath (  \"  / myservlet \"  )  ;", "request . setPathInfo (  \"  ; mypathinfo \"  )  ;", "request . setQueryString (  \"  ? param 1  = value 1  \"  )  ;", "view . setUrl (  . url )  ;", "view . setServletContext ( new   MockServletContext (  )     {", "@ Override", "public   int   getMinorVersion (  )     {", "return    4  ;", "}", "}  )  ;", "view . render (  . model ,    request ,    response )  ;", "assertEquals (  . url ,    response . getForwardedUrl (  )  )  ;", ". model . forEach (  (    key ,    value )     -  >    assertEquals (  (  (  \" Values   for   model   key    '  \"     +    key )     +     \"  '    must   match \"  )  ,    value ,    request . getAttribute ( key )  )  )  ;", "}", "METHOD_END"], "methodName": ["forward"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewTests"}, {"methodBody": ["METHOD_START", "{", "given ( request . getAttribute ( View . PATH _ VARIABLES )  )  . willReturn ( null )  ;", "given ( request . getAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE )  )  . willReturn (  \" somepath \"  )  ;", "given ( request . getRequestDispatcher (  . url )  )  . willReturn ( new   MockRequestDispatcher (  . url )  )  ;", "view . setUrl (  . url )  ;", "view . render (  . model ,    request ,    response )  ;", "assertEquals (  . url ,    response . getIncludedUrl (  )  )  ;", ". model . forEach (  (    key ,    value )     -  >    verify ( request )  . setAttribute ( key ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["includeOnAttribute"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewTests"}, {"methodBody": ["METHOD_START", "{", "given ( request . getAttribute ( View . PATH _ VARIABLES )  )  . willReturn ( null )  ;", "given ( request . getAttribute ( INCLUDE _ REQUEST _ URI _ ATTRIBUTE )  )  . willReturn ( null )  ;", "given ( request . getRequestDispatcher (  . url )  )  . willReturn ( new   MockRequestDispatcher (  . url )  )  ;", "response . setCommitted ( true )  ;", "view . setUrl (  . url )  ;", "view . render (  . model ,    request ,    response )  ;", "assertEquals (  . url ,    response . getIncludedUrl (  )  )  ;", ". model . forEach (  (    k ,    v )     -  >    verify ( request )  . setAttribute ( k ,    v )  )  ;", "}", "METHOD_END"], "methodName": ["includeOnCommitted"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewTests"}, {"methodBody": ["METHOD_START", "{", "view . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["rejectsNullUrl"], "fileName": "org.springframework.web.servlet.view.InternalResourceViewTests"}, {"methodBody": ["METHOD_START", "{", "String   query    =    request . getQueryString (  )  ;", "if    ( StringUtils . hasText ( query )  )     {", "String   fragment    =    null ;", "int   anchorIndex    =    targetUrl . indexOf (  \"  #  \"  )  ;", "if    ( anchorIndex    >     (  -  1  )  )     {", "fragment    =    targetUrl . substring ( anchorIndex )  ;", "targetUrl . delete ( anchorIndex ,    targetUrl . length (  )  )  ;", "}", "if    (  ( targetUrl . toString (  )  . indexOf (  '  ?  '  )  )     <     0  )     {", "targetUrl . append (  '  ?  '  )  . append ( query )  ;", "} else    {", "targetUrl . append (  '  &  '  )  . append ( query )  ;", "}", "if    ( fragment    !  =    null )     {", "targetUrl . append ( fragment )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["appendCurrentQueryParams"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "String   fragment    =    null ;", "int   anchorIndex    =    targetUrl . indexOf (  \"  #  \"  )  ;", "if    ( anchorIndex    >     (  -  1  )  )     {", "fragment    =    targetUrl . substring ( anchorIndex )  ;", "targetUrl . delete ( anchorIndex ,    targetUrl . length (  )  )  ;", "}", "boolean   first    =     ( targetUrl . toString (  )  . indexOf (  '  ?  '  )  )     <     0  ;", "for    ( Map . Entry < String ,    Object >    entry    :    queryProperties ( model )  . entrySet (  )  )     {", "Object   rawValue    =    entry . getValue (  )  ;", "Iterator < Object >    valueIter ;", "if    (  ( rawValue    !  =    null )     &  &     ( rawValue . getClass (  )  . isArray (  )  )  )     {", "valueIter    =    Arrays . asList ( ObjectUtils . toObjectArray ( rawValue )  )  . iterator (  )  ;", "} else", "if    ( rawValue   instanceof   Collection )     {", "valueIter    =     (  ( Collection < Object >  )     ( rawValue )  )  . iterator (  )  ;", "} else    {", "valueIter    =    singleton ( rawValue )  . iterator (  )  ;", "}", "while    ( valueIter . hasNext (  )  )     {", "Object   value    =    valueIter . next (  )  ;", "if    ( first )     {", "targetUrl . append (  '  ?  '  )  ;", "first    =    false ;", "} else    {", "targetUrl . append (  '  &  '  )  ;", "}", "String   encodedKey    =    urlEncode ( entry . getKey (  )  ,    encodingScheme )  ;", "String   encodedValue    =     ( value    !  =    null )     ?    urlEncode ( value . toString (  )  ,    encodingScheme )     :     \"  \"  ;", "targetUrl . append ( encodedKey )  . append (  '  =  '  )  . append ( encodedValue )  ;", "}", "}", "if    ( fragment    !  =    null )     {", "targetUrl . append ( fragment )  ;", "}", "}", "METHOD_END"], "methodName": ["appendQueryProperties"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   targetUrl    =    new   StringBuilder (  )  ;", "String   url    =    getUrl (  )  ;", "Assert . state (  ( url    !  =    null )  ,     \"  ' url '    not   set \"  )  ;", "if    (  ( this . contextRelative )     &  &     ( getUrl (  )  . startsWith (  \"  /  \"  )  )  )     {", "targetUrl . append ( request . getContextPath (  )  )  ;", "}", "targetUrl . append ( getUrl (  )  )  ;", "String   enc    =    this . encodingScheme ;", "if    ( enc    =  =    null )     {", "enc    =    request . getCharacterEncoding (  )  ;", "}", "if    ( enc    =  =    null )     {", "enc    =    WebUtils . DEFAULT _ CHARACTER _ ENCODING ;", "}", "if    (  ( this . expandUriTemplateVariables )     &  &     ( StringUtils . hasText ( targetUrl )  )  )     {", "Map < String ,    String >    variables    =    getCurrentRequestUriVariables ( request )  ;", "targetUrl    =    replaceUriTemplateVariables ( targetUrl . toString (  )  ,    model ,    variables ,    enc )  ;", "}", "if    ( isPropagateQueryProperties (  )  )     {", "appendCurrentQueryParams ( targetUrl ,    request )  ;", "}", "if    ( this . exposeModelAttributes )     {", "appendQueryProperties ( targetUrl ,    model ,    enc )  ;", "}", "return   targetUrl . toString (  )  ;", "}", "METHOD_END"], "methodName": ["createTargetUrl"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "String   name    =    HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ;", "Map < String ,    String >    uriVars    =     (  ( Map < String ,    String >  )     ( request . getAttribute ( name )  )  )  ;", "return   uriVars    !  =    null    ?    uriVars    :    Collections .  < String ,    String > emptyMap (  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentRequestUriVariables"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "return   this . hosts ;", "}", "METHOD_END"], "methodName": ["getHosts"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . statusCode )     !  =    null )     {", "return   this . statusCode ;", "}", "HttpStatus   attributeStatusCode    =     (  ( HttpStatus )     ( request . getAttribute ( VESPONSE _ STATUS _ ATTRIBUTE )  )  )  ;", "if    ( attributeStatusCode    !  =    null )     {", "return   attributeStatusCode ;", "}", "return   HttpStatus . SEE _ OTHER ;", "}", "METHOD_END"], "methodName": ["getHttp11StatusCode"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   false ;", "}", "if    ( isEligibleValue ( value )  )     {", "return   true ;", "}", "if    ( value . getClass (  )  . isArray (  )  )     {", "int   length    =    Array . getLength ( value )  ;", "if    ( length    =  =     0  )     {", "return   false ;", "}", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "Obj   element    =    Array . get ( value ,    i )  ;", "if    (  !  ( isEligibleValue ( element )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "if    ( value   instanceof   Collion )     {", "Collion <  ?  >    coll    =     (  ( Collion <  ?  >  )     ( value )  )  ;", "if    ( coll . isEmpty (  )  )     {", "return   false ;", "}", "for    ( Obj   element    :    coll )     {", "if    (  !  ( isEligibleValue ( element )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isEligibleProperty"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "return    ( value    !  =    null )     &  &     ( BeanUtils . isSimpleValueType ( value . getClass (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isEligibleValue"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "return   this . propagateQueryParams ;", "}", "METHOD_END"], "methodName": ["isPropagateQueryProperties"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "if    ( ObjectUtils . isEmpty ( getHosts (  )  )  )     {", "return   false ;", "}", "St   targetHost    =    UriComponentsBuilder . fromUriSt ( targetUrl )  . build (  )  . getHost (  )  ;", "if    ( StUtils . isEmpty ( targetHost )  )     {", "return   false ;", "}", "for    ( St   host    :    getHosts (  )  )     {", "if    ( targetHost . equals ( host )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isRemoteHost"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    result    =    new   LinkedHashMap <  >  (  )  ;", "model . forEach (  (    name ,    value )     -  >     {", "if    ( isEligibleProperty ( name ,    value )  )     {", "result . put ( name ,    value )  ;", "}", "}  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["queryProperties"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "Matcher   matcher    =     . URI _ TEMPLATE _ VARIABLE _ PATTERN . matcher ( targetUrl )  ;", "int   endLastMatch    =     0  ;", "while    ( matcher . find (  )  )     {", "String   name    =    matcher . group (  1  )  ;", "Object   value    =     ( model . containsKey ( name )  )     ?    model . remove ( name )     :    currentUriVariables . get ( name )  ;", "if    ( value    =  =    null )     {", "throw   new   IllegalArgumentException (  (  (  \" Model   has   no   value   for   key    '  \"     +    name )     +     \"  '  \"  )  )  ;", "}", "result . append ( targetUrl . substring ( endLastMatch ,    matcher . start (  )  )  )  ;", "result . append ( UriUtils . encodePathSegment ( value . toString (  )  ,    encodingScheme )  )  ;", "endLastMatch    =    matcher . end (  )  ;", "}", "result . append ( targetUrl . substring ( endLastMatch ,    targetUrl . length (  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["replaceUriTemplateVariables"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "String   encodedURL    =     ( isRemoteHost ( targetUrl )  )     ?    targetUrl    :    response . encodeRedirectURL ( targetUrl )  ;", "if    ( http 1  0 Compatible )     {", "HttpStatus   attributeStatusCode    =     (  ( HttpStatus )     ( request . getAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE )  )  )  ;", "if    (  ( this . statusCode )     !  =    null )     {", "response . setStatus ( this . statusCode . value (  )  )  ;", "response . setHeader (  \" Location \"  ,    encodedURL )  ;", "} else", "if    ( attributeStatusCode    !  =    null )     {", "response . setStatus ( attributeStatusCode . value (  )  )  ;", "response . setHeader (  \" Location \"  ,    encodedURL )  ;", "} else    {", "response . sendRedirect ( encodedURL )  ;", "}", "} else    {", "HttpStatus   statusCode    =    getHttp 1  1 StatusCode ( request ,    response ,    targetUrl )  ;", "response . setStatus ( statusCode . value (  )  )  ;", "response . setHeader (  \" Location \"  ,    encodedURL )  ;", "}", "}", "METHOD_END"], "methodName": ["sendRedirect"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . contextRelative    =    contextRelative ;", "}", "METHOD_END"], "methodName": ["setContextRelative"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . encodingScheme    =    encodingScheme ;", "}", "METHOD_END"], "methodName": ["setEncodingScheme"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . expandUriTemplateVariables    =    expandUriTemplateVariables ;", "}", "METHOD_END"], "methodName": ["setExpandUriTemplateVariables"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . exposeModelAttributes    =    exposeModelAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeModelAttributes"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . hosts    =    hosts ;", "}", "METHOD_END"], "methodName": ["setHosts"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . http 1  0 Compatible    =    http 1  0 Compatible ;", "}", "METHOD_END"], "methodName": ["setHttp10Compatible"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . propagateQueryParams    =    propagateQueryParams ;", "}", "METHOD_END"], "methodName": ["setPropagateQueryParams"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "this . statusCode    =    statusCode ;", "}", "METHOD_END"], "methodName": ["setStatusCode"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    getWebApplicationContext (  )  ;", "if    ( wac    =  =    null )     {", "wac    =    RequestContextUtils . findWebApplicationContext ( request ,    getSContext (  )  )  ;", "}", "if    (  ( wac    !  =    null )     &  &     ( wac . containsBean ( RequestContextUtils . REQUEST _ DATA _ VALUE _ PROCESSOR _ BEAN _ NAME )  )  )     {", "RequestDataValueProcessor   processor    =    wac . getBean ( RequestContextUtils . REQUEST _ DATA _ VALUE _ PROCESSOR _ BEAN _ NAME ,    RequestDataValueProcessor . class )  ;", "return   processor . processUrl ( request ,    targetUrl )  ;", "}", "return   targetUrl ;", "}", "METHOD_END"], "methodName": ["updateTargetUrl"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "return   URLEncoder . encode ( input ,    encodingScheme )  ;", "}", "METHOD_END"], "methodName": ["urlEncode"], "fileName": "org.springframework.web.servlet.view.RedirectView"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "String   key    =     \" foo \"  ;", "String [  ]    val    =    new   String [  ]  {     \" bar \"  ,     \" baz \"     }  ;", "Map < String ,    String [  ]  >    model    =    new   HashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "try    {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +     ( val [  0  ]  )  )     +     \"  &  \"  )     +    key )     +     \"  =  \"  )     +     ( val [  1  ]  )  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}    catch    ( AssertionError   err )     {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +     ( val [  1  ]  )  )     +     \"  &  \"  )     +    key )     +     \"  =  \"  )     +     ( val [  0  ]  )  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "}", "METHOD_END"], "methodName": ["arrayParam"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com \"  )  ;", "request . setAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE ,    CREATED )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  2  0  1  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeStatusCodeHttp10"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com \"  )  ;", "rv . setHttp 1  0 Compatible ( false )  ;", "request . setAttribute ( View . RESPONSE _ STATUS _ ATTRIBUTE ,    CREATED )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  2  0  1  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["attributeStatusCodeHttp11"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "String   key    =     \" foo \"  ;", "List < String >    val    =    new   ArrayList <  >  (  )  ;", "val . add (  \" bar \"  )  ;", "val . add (  \" baz \"  )  ;", "Map < String ,    List < String >  >    model    =    new   HashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "try    {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +     ( val . get (  0  )  )  )     +     \"  &  \"  )     +    key )     +     \"  =  \"  )     +     ( val . get (  1  )  )  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}    catch    ( AssertionError   err )     {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +     ( val . get (  1  )  )  )     +     \"  &  \"  )     +    key )     +     \"  =  \"  )     +     ( val . get (  0  )  )  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "}", "METHOD_END"], "methodName": ["collectionParam"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \"  / test . html ? id =  1  \"  ;", "doTest ( new   HashMap <  >  (  )  ,    url ,    true ,     (  \"  / context \"     +    url )  )  ;", "}", "METHOD_END"], "methodName": ["contextRelativeQueryParam"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectViewTests . TestRedirectView   rv    =    new   RedirectViewTests . TestRedirectView ( url ,    contextRelative ,    map )  ;", "rv . render ( map ,    request ,    response )  ;", "assertTrue (  \" queryProperties (  )    should   have   been   called .  \"  ,    rv . queryPropertiesCalled )  ;", "assertEquals ( expectedUrl ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \"  / myUrl \"  ;", "doTest ( new   HashMap <  >  (  )  ,    url ,    false ,    url )  ;", "}", "METHOD_END"], "methodName": ["emptyMap"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \"  / myUrl \"  ;", "doTest ( new   HashMap <  >  (  )  ,    url ,    true ,     (  \"  / context \"     +    url )  )  ;", "}", "METHOD_END"], "methodName": ["emptyMapWithContextRelative"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com \"  )  ;", "rv . setStatusCode ( MOVED _ PERMANENTLY )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  3  0  1  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["explicitStatusCodeHttp10"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com \"  )  ;", "rv . setHttp 1  0 Compatible ( false )  ;", "rv . setStatusCode ( MOVED _ PERMANENTLY )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  3  0  1  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["explicitStatusCodeHttp11"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com / path \"  )  ;", "rv . setHttp 1  0 Compatible ( false )  ;", "FlashMap   flashMap    =    new   FlashMap (  )  ;", "flashMap . put (  \" successMessage \"  ,     \" yay !  \"  )  ;", "request . setAttribute ( DispatcherServlet . OUTPUT _ FLASH _ MAP _ ATTRIBUTE ,    flashMap )  ;", "ModelMap   model    =    new   ModelMap (  \" id \"  ,     \"  1  \"  )  ;", "rv . render ( model ,    request ,    response )  ;", "assertEquals (  3  0  3  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com / path ? id =  1  \"  ,    response . getHeader (  \" Location \"  )  )  ;", "assertEquals (  \"  / path \"  ,    flashMap . getTargetRequestPath (  )  )  ;", "assertEquals ( model ,    flashMap . getTargetRequestParams (  )  . toSingleValueMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["flashMap"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com \"  )  ;", "rv . setHttp 1  0 Compatible ( false )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  3  0  3  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["http11"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["noUrlSet"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "String   key    =     \" foo \"  ;", "String   val    =     \" bar \"  ;", "String   key 2     =     \" int 2  \"  ;", "Object   val 2     =     6  1  1  ;", "String   key 3     =     \" tb \"  ;", "Object   val 3     =    new   TestBean (  )  ;", "Map < String ,    Object >    model    =    new   LinkedHashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "model . put ( key 2  ,    val 2  )  ;", "model . put ( key 3  ,    val 3  )  ;", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +    val )     +     \"  &  \"  )     +    key 2  )     +     \"  =  \"  )     +    val 2  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "METHOD_END"], "methodName": ["objectConversion"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com / test . htm # myAnchor \"  ;", "String   key    =     \" foo \"  ;", "String   val    =     \" bar \"  ;", "Map < String ,    String >    model    =    new   HashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "String   expectedUrlForEncoding    =     (  (  (  (  \" http :  /  / url . somewhere . com / test . htm \"     +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +    val )     +     \"  # myAnchor \"  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "METHOD_END"], "methodName": ["paramWithAnchor"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "rv . setPropagateQueryParams ( true )  ;", "rv . setUrl (  \" http :  /  / url . somewhere . com ? foo = bar # bazz \"  )  ;", "request . setQueryString (  \" a = b & c = d \"  )  ;", "rv . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertEquals (  3  0  2  ,    response . getStatus (  )  )  ;", "assertEquals (  \" http :  /  / url . somewhere . com ? foo = bar & a = b & c = d # bazz \"  ,    response . getHeader (  \" Location \"  )  )  ;", "}", "METHOD_END"], "methodName": ["propagateQueryParams"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "RedirectView   rv    =    new   RedirectView (  )  ;", "assertFalse ( rv . isRemoteHost (  \" http :  /  / url . somewhere . com \"  )  )  ;", "assertFalse ( rv . isRemoteHost (  \"  / path \"  )  )  ;", "assertFalse ( rv . isRemoteHost (  \" http :  /  / url . somewhereelse . com \"  )  )  ;", "rv . setHosts ( new   String [  ]  {     \" url . somewhere . com \"     }  )  ;", "assertFalse ( rv . isRemoteHost (  \" http :  /  / url . somewhere . com \"  )  )  ;", "assertFalse ( rv . isRemoteHost (  \"  / path \"  )  )  ;", "assertTrue ( rv . isRemoteHost (  \" http :  /  / url . somewhereelse . com \"  )  )  ;", "}", "METHOD_END"], "methodName": ["remoteHost"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpSequest (  )  ;", "this . request . setContextPath (  \"  / context \"  )  ;", "this . request . setCharacterEncoding ( DEFAULT _ CHARACTER _ ENCODING )  ;", "this . request . setAttribute ( DispatcherSOUTPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   FlashMap (  )  )  ;", "this . request . setAttribute ( DispatcherSFLASH _ MAP _ MANAGER _ ATTRIBUTE ,    new   SessionFlashMapManager (  )  )  ;", "this . response    =    new   MockHttpSesponse (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "String   key    =     \" foo \"  ;", "String   val    =     \" bar \"  ;", "Map < String ,    String >    model    =    new   HashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "String   expectedUrlForEncoding    =     (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +    val ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "METHOD_END"], "methodName": ["singleParam"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "Map < String ,    String >    model    =    Collections . singletonMap (  \" foo \"  ,     \" bar \"  )  ;", ". TestRedirectView   rv    =    new    . TestRedirectView ( url ,    false ,    model )  ;", "rv . setExposeModelAttributes ( false )  ;", "rv . render ( model ,    request ,    response )  ;", "assertEquals ( url ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["singleParamWithoutExposingModelAttributes"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "String   key    =     \" foo \"  ;", "String   val    =     \" bar \"  ;", "String   key 2     =     \" thisIsKey 2  \"  ;", "String   val 2     =     \" andThisIsVal 2  \"  ;", "Map < String ,    String >    model    =    new   HashMap <  >  (  )  ;", "model . put ( key ,    val )  ;", "model . put ( key 2  ,    val 2  )  ;", "try    {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key )     +     \"  =  \"  )     +    val )     +     \"  &  \"  )     +    key 2  )     +     \"  =  \"  )     +    val 2  ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}    catch    ( AssertionError   err )     {", "String   expectedUrlForEncoding    =     (  (  (  (  (  (  ( url    +     \"  ?  \"  )     +    key 2  )     +     \"  =  \"  )     +    val 2  )     +     \"  &  \"  )     +    key )     +     \"  =  \"  )     +    val ;", "doTest ( model ,    url ,    false ,    expectedUrlForEncoding )  ;", "}", "}", "METHOD_END"], "methodName": ["twoParams"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . registerSingleton (  \" requestDataValueProcessor \"  ,    RequestDataValueProcessorWrapper . class )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "RequestDataValueProcessor   mockProcessor    =    mock ( RequestDataValueProcessor . class )  ;", "wac . getBean ( RequestDataValueProcessorWrapper . class )  . setRequestDataValueProcessor ( mockProcessor )  ;", "rv    =    new    (  )  ;", "rv . setApplicationContext ( wac )  ;", "rv . setUrl (  \"  / path \"  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "given ( mockProcessor . processUrl ( request ,     \"  / path \"  )  )  . willReturn (  \"  / path ? key =  1  2  3  \"  )  ;", "rv . render ( new   ModelMap (  )  ,    request ,    response )  ;", "verify ( mockProcessor )  . processUrl ( request ,     \"  / path \"  )  ;", "}", "METHOD_END"], "methodName": ["updateTargetUrl"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . registerSingleton (  \" requestDataValueProcessor \"  ,    RequestDataValueProcessorWrapper . class )  ;", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "ContextLoader   contextLoader    =    new   ContextLoader ( wac )  ;", "contextLoader . initWebApplicationContext ( servletContext )  ;", "try    {", "RequestDataValueProcessor   mockProcessor    =    mock ( RequestDataValueProcessor . class )  ;", "wac . getBean ( RequestDataValueProcessorWrapper . class )  . setRequestDataValueProcessor ( mockProcessor )  ;", "rv    =    new    (  )  ;", "rv . setUrl (  \"  / path \"  )  ;", "given ( mockProcessor . processUrl ( request ,     \"  / path \"  )  )  . willReturn (  \"  / path ? key =  1  2  3  \"  )  ;", "rv . render ( new   ModelMap (  )  ,    request ,    response )  ;", "verify ( mockProcessor )  . processUrl ( request ,     \"  / path \"  )  ;", "}    finally    {", "contextLoader . closeWebApplicationContext ( servletContext )  ;", "}", "}", "METHOD_END"], "methodName": ["updateTargetUrlWithContextLoader"], "fileName": "org.springframework.web.servlet.view.RedirectViewTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \"  / test #  {  ' one '  ,  ' abc '  }  \"  ;", "redirectView    =    new    ( url ,    true )  ;", "redirectView . setExpandUriTemplateVariables ( false )  ;", "redirectView . renderMergedOutputModel ( new   ModelMap (  )  ,    this . request ,    this . response )  ;", "assertEquals ( url ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["dontApplyUriVariables"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "redirectView    =    new    (  \"  \"  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  \"  \"  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyRedirectString"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "this . request    =    new   MockHttpSequest (  )  ;", "this . response    =    new   MockHttpSesponse (  )  ;", "this . request . setAttribute ( DispatcherSOUTPUT _ FLASH _ MAP _ ATTRIBUTE ,    new   FlashMap (  )  )  ;", "this . request . setAttribute ( DispatcherSFLASH _ MAP _ MANAGER _ ATTRIBUTE ,    new   SessionFlashMapManager (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "String   baseUrl    =     \" http :  /  / url . somewhere . com \"  ;", "redirectView    =    new    (  ( baseUrl    +     \"  /  { foo }  \"  )  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  ( baseUrl    +     \"  / bar \"  )  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplate"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "model . put (  \" fooArr \"  ,    new   String [  ]  {     \" baz \"  ,     \" bazz \"     }  )  ;", "redirectView    =    new    (  \"  / foo /  { foo }  \"  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  \"  / foo / bar ? fooArr = baz & fooArr = bazz \"  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateAndArrayQueryParam"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar / bar   baz \"  )  ;", "String   baseUrl    =     \" http :  /  / url . somewhere . com \"  ;", "redirectView    =    new    (  ( baseUrl    +     \"  / context   path /  { foo }  \"  )  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  ( baseUrl    +     \"  / context   path / bar %  2 Fbar %  2  0 baz \"  )  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateEncode"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "new   RedirectView (  \"  /  { foo }  \"  )  . renderMergedOutputModel ( new   ModelMap (  )  ,    this . request ,    this . response )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateNullValue"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" key 1  \"  ,     \" value 1  \"  )  ;", "model . put (  \" name \"  ,     \" value 2  \"  )  ;", "model . put (  \" key 3  \"  ,     \" value 3  \"  )  ;", "Map < String ,    String >    currentRequestUriTemplateVars    =    new   HashMap <  >  (  )  ;", "currentRequestUriTemplateVars . put (  \" var 1  \"  ,     \" v 1  \"  )  ;", "currentRequestUriTemplateVars . put (  \" name \"  ,     \" v 2  \"  )  ;", "currentRequestUriTemplateVars . put (  \" var 3  \"  ,     \" v 3  \"  )  ;", "this . request . setAttribute ( HandlerMapping . URI _ TEMPLATE _ VARIABLES _ ATTRIBUTE ,    currentRequestUriTemplateVars )  ;", "String   url    =     \" http :  /  / url . somewhere . com \"  ;", "redirectView    =    new    (  ( url    +     \"  /  { key 1  }  /  { var 1  }  /  { name }  \"  )  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  ( url    +     \"  / value 1  / v 1  / value 2  ? key 3  = value 3  \"  )  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateReuseCurrentRequestVars"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,    new   Long (  6  1  1  )  )  ;", "redirectView    =    new    (  \"  / foo /  { foo }  \"  )  ;", "redirectView . renderMergedOutputModel ( model ,    this . request ,    this . response )  ;", "assertEquals (  \"  / foo /  6  1  1  \"  ,    this . response . getRedirectedUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["uriTemplateWithObjectConversion"], "fileName": "org.springframework.web.servlet.view.RedirectViewUriTemplateTests"}, {"methodBody": ["METHOD_START", "{", "return   ResourceBundle . getBundle ( basename ,    locale ,    getBundleClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getBundle"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . bundleClassLoader ;", "}", "METHOD_END"], "methodName": ["getBundleClassLoader"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( isCache (  )  )     {", "BeanFactory   cachedFactory    =    this . localeCache . get ( locale )  ;", "if    ( cachedFactory    !  =    null )     {", "return   cachedFactory ;", "}", "}", "List <  >    bundles    =    new   LinkedList <  >  (  )  ;", "for    ( String   basename    :    this . basenames )     {", "bundle    =    getBundle ( basename ,    locale )  ;", "bundles . add ( bundle )  ;", "}", "if    ( isCache (  )  )     {", "BeanFactory   cachedFactory    =    this . bundleCache . get ( bundles )  ;", "if    ( cachedFactory    !  =    null )     {", "this . localeCache . put ( locale ,    cachedFactory )  ;", "return   cachedFactory ;", "}", "}", "GenericWebApplicationContext   factory    =    new   GenericWebApplicationContext (  )  ;", "factory . setParent ( getApplicationContext (  )  )  ;", "factory . setServletContext ( getServletContext (  )  )  ;", "PropertiesBeanDefinitionReader   reader    =    new   PropertiesBeanDefinitionReader ( factory )  ;", "reader . setDefaultParentBean ( this . defaultParentView )  ;", "for    (    bundle    :    bundles )     {", "reader . registerBeanDefinitions ( bundle )  ;", "}", "factory . refresh (  )  ;", "if    ( isCache (  )  )     {", "this . localeCache . put ( locale ,    factory )  ;", "this . bundleCache . put ( bundles ,    factory )  ;", "}", "return   factory ;", "}", "METHOD_END"], "methodName": ["initFactory"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "setBasenames ( basename )  ;", "}", "METHOD_END"], "methodName": ["setBasename"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . basenames    =    basenames ;", "}", "METHOD_END"], "methodName": ["setBasenames"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . bundleClassLoader    =    classLoader ;", "}", "METHOD_END"], "methodName": ["setBundleClassLoader"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . defaultParentView    =    defaultParentView ;", "}", "METHOD_END"], "methodName": ["setDefaultParentView"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . localesToInitialize    =    localesToInitialize ;", "}", "METHOD_END"], "methodName": ["setLocalesToInitialize"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolver"}, {"methodBody": ["METHOD_START", "{", "View   v    =    rb . resolveViewName (  \" debugView \"  ,    Locale . ENGLISH )  ;", "assertThat ( v ,    instanceOf ( InternalView . class )  )  ;", "InternalView   jv    =     (  ( InternalView )     ( v )  )  ;", "assertEquals (  \" debugView   must   have   correct   URL \"  ,     \" jsp / debug / debug . jsp \"  ,    jv . getUrl (  )  )  ;", "Map < String ,    Object >    m    =    jv . getStaticAttributes (  )  ;", "assertEquals (  \" Must   have    2    static   attributes \"  ,     2  ,    m . size (  )  )  ;", "assertEquals (  \" attribute   foo \"  ,     \" bar \"  ,    m . get (  \" foo \"  )  )  ;", "assertEquals (  \" attribute   postcode \"  ,     \" SE 1  0     9 JY \"  ,    m . get (  \" postcode \"  )  )  ;", "assertEquals (  \" Correct   default   content   type \"  ,    AbstractView . DEFAULT _ CONTENT _ TYPE ,    jv . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["debugViewEnglish"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "View   v    =    rb . resolveViewName (  \" debugView \"  ,    Locale . FRENCH )  ;", "assertThat ( v ,    instanceOf ( InternalView . class )  )  ;", "InternalView   jv    =     (  ( InternalView )     ( v )  )  ;", "assertEquals (  \" French   debugView   must   have   correct   URL \"  ,     \" jsp / debug / deboug . jsp \"  ,    jv . getUrl (  )  )  ;", "assertEquals (  \" Correct   overridden    ( XML )    content   type \"  ,     \" text / xml ; charset = ISO -  8  8  5  9  -  1  \"  ,    jv . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["debugViewFrench"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResourceBundleViewResolver   rb    =    new   ResourceBundleViewResolver (  )  ;", "rb . setBasename (  . PROPS _ FILE )  ;", "rb . setCache ( getCache (  )  )  ;", "rb . setDefaultParentView (  \" testParent \"  )  ;", "rb . setLocalesToInitialize ( new   Locale [  ]  {    Locale . ENGLISH ,    Locale . FRENCH    }  )  ;", "rb . setApplicationContext ( wac )  ;", "View   v    =    rb . resolveViewName (  \" debugView \"  ,    Locale . FRENCH )  ;", "assertThat ( v ,    instanceOf ( InternalResourceView . class )  )  ;", "InternalResourceView   jv    =     (  ( InternalResourceView )     ( v )  )  ;", "assertEquals (  \" French   debugView   must   have   correct   URL \"  ,     \" jsp / debug / deboug . jsp \"  ,    jv . getUrl (  )  )  ;", "assertEquals (  \" Correct   overridden    ( XML )    content   type \"  ,     \" text / xml ; charset = ISO -  8  8  5  9  -  1  \"  ,    jv . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["eagerInitialization"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "rb . setBasename (  \" weoriwoierqupowiuer \"  )  ;", "rb . rViewName (  \" debugView \"  ,    Locale . ENGLISH )  ;", "}", "METHOD_END"], "methodName": ["noSuchBasename"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "assertNull ( rb . resolveViewName (  \" xxxxxxweorqiwuopeir \"  ,    Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["noSuchViewEnglish"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "ResourceBundleViewResolverTests . TestView   tv    =     (  ( ResourceBundleViewResolverTests . TestView )     ( rb . resolveViewName (  \" test \"  ,    Locale . ENGLISH )  )  )  ;", "tv    =     (  ( ResourceBundleViewResolverTests . TestView )     ( rb . resolveViewName (  \" test \"  ,    Locale . ENGLISH )  )  )  ;", "tv    =     (  ( ResourceBundleViewResolverTests . TestView )     ( rb . resolveViewName (  \" test \"  ,    Locale . ENGLISH )  )  )  ;", "assertEquals (  \" test   has   correct   name \"  ,     \" test \"  ,    tv . getBeanName (  )  )  ;", "assertEquals (  \" test   should   have   been   initialized   once ,    not    \"  ,     1  ,    tv . initCount )  ;", "}", "METHOD_END"], "methodName": ["onSetContextCalledOnce"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "rb . rViewName (  \" debug . Parent \"  ,    Locale . ENGLISH )  ;", "fail (  \" Should   have   thrown   BeanIsAbstractException \"  )  ;", "}    catch    ( BeanIsAbstractException   ex )     {", "}", "try    {", "rb . rViewName (  \" testParent \"  ,    Locale . ENGLISH )  ;", "fail (  \" Should   have   thrown   BeanIsAbstractException \"  )  ;", "}    catch    ( BeanIsAbstractException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["parentsAreAbstract"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "assumeTrue ( rb . isCache (  )  )  ;", "View   v 1     =    rb . rViewName (  \" debugView \"  ,    Locale . ENGLISH )  ;", "View   v 2     =    rb . rViewName (  \" debugView \"  ,    Locale . UK )  ;", "assertSame ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["sameBundleOnlyCachedOnce"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "rb . setBasename ( ResourceBundleViewResolverTests . PROPS _ FILE )  ;", "rb . setCache ( getCache (  )  )  ;", "rb . setDefaultParentView (  \" testParent \"  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "rb . setApplicationContext ( wac )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.ResourceBundleViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    getApplicationContext (  )  ;", "if    ( context    !  =    null )     {", "Object   initialized    =    context . getAutowireCapableBeanFactory (  )  . initializeBean (  ,    Name )  ;", "if    ( initialized   instanceof   View )     {", "return    (  ( View )     ( initialized )  )  ;", "}", "}", "return    ;", "}", "METHOD_END"], "methodName": ["applyLifecycleMethods"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    viewClass    =    getViewClass (  )  ;", "Assert . state (  ( viewClass    !  =    null )  ,     \" No   view   class \"  )  ;", "Abstract   view    =     (  ( Abstract )     ( BeanUtils . instantiateClass ( viewClass )  )  )  ;", "view . setUrl (  (  (  ( getPrefix (  )  )     +    viewName )     +     ( getSuffix (  )  )  )  )  ;", "String   contentType    =    getContentType (  )  ;", "if    ( contentType    !  =    null )     {", "view . setContentType ( contentType )  ;", "}", "view . setRequestContextAttribute ( getRequestContextAttribute (  )  )  ;", "view . setAttributesMap ( getAttributesMap (  )  )  ;", "Boolean   exposePathVariables    =    getExposePathVariables (  )  ;", "if    ( exposePathVariables    !  =    null )     {", "view . setExposePathVariables ( exposePathVariables )  ;", "}", "Boolean   exposeContextBeansAsAttributes    =    getExposeContextBeansAsAttributes (  )  ;", "if    ( exposeContextBeansAsAttributes    !  =    null )     {", "view . setExposeContextBeansAsAttributes ( exposeContextBeansAsAttributes )  ;", "}", "String [  ]    exposedContextBeanNames    =    getExposedContextBeanNames (  )  ;", "if    ( exposedContextBeanNames    !  =    null )     {", "view . setExposedContextBeanNames ( exposedContextBeanNames )  ;", "}", "return   view ;", "}", "METHOD_END"], "methodName": ["buildView"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "String [  ]    viewNames    =    getViewNames (  )  ;", "return    ( viewNames    =  =    null )     |  |     ( PatternMatchUtils . simpleMatch ( viewNames ,    viewName )  )  ;", "}", "METHOD_END"], "methodName": ["canHandle"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . staticAttributes ;", "}", "METHOD_END"], "methodName": ["getAttributesMap"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . contentType ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . exposeContextBeansAsAttributes ;", "}", "METHOD_END"], "methodName": ["getExposeContextBeansAsAttributes"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . exposePathVariables ;", "}", "METHOD_END"], "methodName": ["getExposePathVariables"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . exposedContextBeanNames ;", "}", "METHOD_END"], "methodName": ["getExposedContextBeanNames"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . prefix ;", "}", "METHOD_END"], "methodName": ["getPrefix"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . redirectHosts ;", "}", "METHOD_END"], "methodName": ["getRedirectHosts"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . requestContextAttribute ;", "}", "METHOD_END"], "methodName": ["getRequestContextAttribute"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . suffix ;", "}", "METHOD_END"], "methodName": ["getSuffix"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . viewClass ;", "}", "METHOD_END"], "methodName": ["getViewClass"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . viewNames ;", "}", "METHOD_END"], "methodName": ["getViewNames"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . redirectContextRelative ;", "}", "METHOD_END"], "methodName": ["isRedirectContextRelative"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   this . redirectHttp 1  0 Compatible ;", "}", "METHOD_END"], "methodName": ["isRedirectHttp10Compatible"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   AbstractUrlBasedView . class ;", "}", "METHOD_END"], "methodName": ["requiredViewClass"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( props ,    this . staticAttributes )  ;", "}", "METHOD_END"], "methodName": ["setAttributes"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( attributes    !  =    null )     {", "this . staticAttributes . putAll ( attributes )  ;", "}", "}", "METHOD_END"], "methodName": ["setAttributesMap"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . contentType    =    contentType ;", "}", "METHOD_END"], "methodName": ["setContentType"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposeContextBeansAsAttributes    =    exposeContextBeansAsAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeContextBeansAsAttributes"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposePathVariables    =    exposePathVariables ;", "}", "METHOD_END"], "methodName": ["setExposePathVariables"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . exposedContextBeanNames    =    exposedContextBeanNames ;", "}", "METHOD_END"], "methodName": ["setExposedContextBeanNames"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . prefix    =     ( prefix    !  =    null )     ?    prefix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setPrefix"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . redirectContextRelative    =    redirectContextRelative ;", "}", "METHOD_END"], "methodName": ["setRedirectContextRelative"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . redirectHosts    =    redirectHosts ;", "}", "METHOD_END"], "methodName": ["setRedirectHosts"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . redirectHttp 1  0 Compatible    =    redirectHttp 1  0 Compatible ;", "}", "METHOD_END"], "methodName": ["setRedirectHttp10Compatible"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . requestContextAttribute    =    requestContextAttribute ;", "}", "METHOD_END"], "methodName": ["setRequestContextAttribute"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . suffix    =     ( suffix    !  =    null )     ?    suffix    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setSuffix"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( viewClass    !  =    null )     &  &     (  !  ( requiredViewClass (  )  . isAssignableFrom ( viewClass )  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" Given   view   class    [  \"     +     ( viewClass . getName (  )  )  )     +     \"  ]    is   not   of   type    [  \"  )     +     ( requiredViewClass (  )  . getName (  )  )  )     +     \"  ]  \"  )  )  ;", "}", "this . viewClass    =    viewClass ;", "}", "METHOD_END"], "methodName": ["setViewClass"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . viewNames    =    viewNames ;", "}", "METHOD_END"], "methodName": ["setViewNames"], "fileName": "org.springframework.web.servlet.view.UrlBasedViewResolver"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( this . viewResolvers )  ;", "}", "METHOD_END"], "methodName": ["getViewResolvers"], "fileName": "org.springframework.web.servlet.view.ViewResolverComposite"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.ViewResolverComposite"}, {"methodBody": ["METHOD_START", "{", "this . viewResolvers . clear (  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( viewResolvers )  )  )     {", "this . viewResolvers . addAll ( viewResolvers )  ;", "}", "}", "METHOD_END"], "methodName": ["setViewResolvers"], "fileName": "org.springframework.web.servlet.view.ViewResolverComposite"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setSContext ( new   MockSContext (  )  )  ;", "wac . refresh (  )  ;", "vr . setPrefix (  \"  / WEB - INF /  \"  )  ;", "vr . setSuffix (  \"  . jsp \"  )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \"  / WEB - INF / example 1  . jsp \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \"  / WEB - INF / example 2  . jsp \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" redirect : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    RedirectView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( RedirectView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" forward : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    InternalResourceView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestUrlBasedViewResolverWithPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "vr . setApplicationContext ( wac )  ;", "vr . setContentType (  \" myContentType \"  )  ;", "vr . setRequestContextAttribute (  \" rc \"  )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 1  \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "assertEquals (  \" Correct   textContentType \"  ,     \" myContentType \"  ,     (  ( InternalResourceView )     ( view )  )  . getContentType (  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 2  \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "assertEquals (  \" Correct   textContentType \"  ,     \" myContentType \"  ,     (  ( InternalResourceView )     ( view )  )  . getContentType (  )  )  ;", "HttpServletRequest   request    =    new   mock . web . test . MockHttpServletRequest ( wac . getServletContext (  )  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "request . setAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE ,    new   FixedThemeResolver (  )  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "model . put (  \" tb \"  ,    tb )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( request . getAttribute (  \" rc \"  )  )    instanceof   RequestContext )  )  ;", "view    =    vr . resolveViewName (  \" redirect : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    RedirectView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( RedirectView )     ( view )  )  . getUrl (  )  )  ;", "assertSame (  \" View   not   initialized   as   bean \"  ,    wac ,     (  ( RedirectView )     ( view )  )  . getApplicationContext (  )  )  ;", "view    =    vr . resolveViewName (  \" forward : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    InternalResourceView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestUrlBasedViewResolverWithoutPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "MutablePropertyValues   pvs 1     =    new   MutablePropertyValues (  )  ;", "pvs 1  . addPropertyValue ( new   PropertyValue (  \" url \"  ,     \"  / example 1  . jsp \"  )  )  ;", "wac . registerSingleton (  \" example 1  \"  ,    InternalResourceView . class ,    pvs 1  )  ;", "MutablePropertyValues   pvs 2     =    new   MutablePropertyValues (  )  ;", "pvs 2  . addPropertyValue ( new   PropertyValue (  \" url \"  ,     \"  / example 2  . jsp \"  )  )  ;", "wac . registerSingleton (  \" example 2  \"  ,    JstlView . class ,    pvs 2  )  ;", "BeanName   vr    =    new   BeanName (  )  ;", "vr . setApplicationContext ( wac )  ;", "wac . refresh (  )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    InternalResourceView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \"  / example 1  . jsp \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \"  / example 2  . jsp \"  ,     (  ( JstlView )     ( view )  )  . getUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["testBeanNameViewResolver"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "InternalResource   vr    =    new   InternalResource (  )  ;", "vr . setViewClass ( JstlView . class )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "View   cached    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "if    ( view    !  =    cached )     {", "fail (  \" Caching   doesn ' t   work \"  )  ;", "}", "vr . removeFromCache (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "cached    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "if    ( view    =  =    cached )     {", "fail (  \" View   wasn ' t   removed   from   cache \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCacheRemoval"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "final   AtomicInteger   count    =    new   AtomicInteger (  )  ;", "AbstractCaching   viewResolver    =    new   AbstractCaching (  )     {", "@ Override", "protected   View   loadView ( String   viewName ,    Locale   locale )    throws   Exception    {", "count . incrementAndGet (  )  ;", "return   null ;", "}", "}  ;", "viewResolver . setCacheUnresolved ( false )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  2  ,    count . intValue (  )  )  ;", "viewResolver . setCacheUnresolved ( true )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "viewResolver . resolveViewName (  \" view \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  3  ,    count . intValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCacheUnresolved"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . refresh (  )  ;", "InternalResource   vr    =    new   InternalResource (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" key 1  \"  ,     \" value 1  \"  )  ;", "vr . setAttributes ( props )  ;", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" key 2  \"  ,    new   Integer (  2  )  )  ;", "vr . setAttributesMap ( map )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 1  \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "Map < String ,    Object >    attributes    =     (  ( InternalResourceView )     ( view )  )  . getStaticAttributes (  )  ;", "assertEquals (  \" value 1  \"  ,    attributes . get (  \" key 1  \"  )  )  ;", "assertEquals ( new   Integer (  2  )  ,    attributes . get (  \" key 2  \"  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 2  \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "attributes    =     (  ( InternalResourceView )     ( view )  )  . getStaticAttributes (  )  ;", "assertEquals (  \" value 1  \"  ,    attributes . get (  \" key 1  \"  )  )  ;", "assertEquals ( new   Integer (  2  )  ,    attributes . get (  \" key 2  \"  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "model . put (  \" tb \"  ,    tb )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( request . getAttribute (  \" rc \"  )  )     =  =    null )  )  ;", "assertEquals (  \" value 1  \"  ,    request . getAttribute (  \" key 1  \"  )  )  ;", "assertEquals ( new   Integer (  2  )  ,    request . getAttribute (  \" key 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithAttributes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "final   StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . registerSingleton (  \" myBean \"  ,    TestBean . class )  ;", "wac . registerSingleton (  \" myBean 2  \"  ,    TestBean . class )  ;", "wac . setServletContext ( sc )  ;", "wac . refresh (  )  ;", "InternalResource   vr    =    new   InternalResource (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" key 1  \"  ,     \" value 1  \"  )  ;", "vr . setAttributes ( props )  ;", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" key 2  \"  ,    new   Integer (  2  )  )  ;", "vr . setAttributesMap ( map )  ;", "vr . setExposeContextBeansAsAttributes ( true )  ;", "vr . setApplicationContext ( wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )     {", "@ Override", "public   RequestDispatcher   getRequestDispatcher ( String   path )     {", "return   new   MockRequestDispatcher ( path )     {", "@ Override", "public   void   forward ( ServletRequest   forwardRequest ,    ServletResponse   forwardResponse )     {", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( forwardRequest . getAttribute (  \" rc \"  )  )     =  =    null )  )  ;", "assertEquals (  \" value 1  \"  ,    forwardRequest . getAttribute (  \" key 1  \"  )  )  ;", "assertEquals ( new   Integer (  2  )  ,    forwardRequest . getAttribute (  \" key 2  \"  )  )  ;", "assertSame ( wac . getBean (  \" myBean \"  )  ,    forwardRequest . getAttribute (  \" myBean \"  )  )  ;", "assertSame ( wac . getBean (  \" myBean 2  \"  )  ,    forwardRequest . getAttribute (  \" myBean 2  \"  )  )  ;", "}", "}  ;", "}", "}  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "view . render ( new   HashMap < String ,    Object >  (  )  ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithContextBeans"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =     (  !  ( Locale . GERMAN . equals ( Locale . getDefault (  )  )  )  )     ?    Locale . GERMAN    :    Locale . FRENCH ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . addMessage (  \" code 1  \"  ,    locale ,     \" messageX \"  )  ;", "wac . refresh (  )  ;", "InternalResource   vr    =    new   InternalResource (  )  ;", "vr . setViewClass ( JstlView . class )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 1  \"  ,     (  ( JstlView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 2  \"  ,     (  ( JstlView )     ( view )  )  . getUrl (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   FixedLocaleResolver ( locale )  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "model . put (  \" tb \"  ,    tb )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( request . getAttribute (  \" rc \"  )  )     =  =    null )  )  ;", "assertEquals ( locale ,    Config . get ( request ,    FMT _ LOCALE )  )  ;", "LocalizationContext   lc    =     (  ( LocalizationContext )     ( Config . get ( request ,    FMT _ LOCALIZATION _ CONTEXT )  )  )  ;", "assertEquals (  \" messageX \"  ,    lc . getResourceBundle (  )  . getString (  \" code 1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithJstl"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "Locale   locale    =     (  !  ( Locale . GERMAN . equals ( Locale . getDefault (  )  )  )  )     ?    Locale . GERMAN    :    Locale . FRENCH ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "sc . addInitParameter ( FMT _ LOCALIZATION _ CONTEXT ,     \" org /  / web / context / WEB - INF / context - messages \"  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . addMessage (  \" code 1  \"  ,    locale ,     \" messageX \"  )  ;", "wac . refresh (  )  ;", "InternalResourceViewResolver   vr    =    new   InternalResourceViewResolver (  )  ;", "vr . setViewClass ( JstlView . class )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 1  \"  ,     (  ( JstlView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    JstlView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" example 2  \"  ,     (  ( JstlView )     ( view )  )  . getUrl (  )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   FixedLocaleResolver ( locale )  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "model . put (  \" tb \"  ,    tb )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( request . getAttribute (  \" rc \"  )  )     =  =    null )  )  ;", "assertEquals ( locale ,    Config . get ( request ,    FMT _ LOCALE )  )  ;", "LocalizationContext   lc    =     (  ( LocalizationContext )     ( Config . get ( request ,    FMT _ LOCALIZATION _ CONTEXT )  )  )  ;", "assertEquals (  \" message 1  \"  ,    lc . getResourceBundle (  )  . getString (  \" code 1  \"  )  )  ;", "assertEquals (  \" message 2  \"  ,    lc . getResourceBundle (  )  . getString (  \" code 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithJstlAndContextParam"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTestUrlBasedViewResolverWithPrefixes ( new   InternalResourceViewResolver (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "final   StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . registerSingleton (  \" myBean \"  ,    TestBean . class )  ;", "wac . registerSingleton (  \" myBean 2  \"  ,    TestBean . class )  ;", "wac . setServletContext ( sc )  ;", "wac . refresh (  )  ;", "InternalResource   vr    =    new   InternalResource (  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" key 1  \"  ,     \" value 1  \"  )  ;", "vr . setAttributes ( props )  ;", "Map < String ,    Object >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" key 2  \"  ,    new   Integer (  2  )  )  ;", "vr . setAttributesMap ( map )  ;", "vr . setExposedContextBeanNames ( new   String [  ]  {     \" myBean 2  \"     }  )  ;", "vr . setApplicationContext ( wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )     {", "@ Override", "public   RequestDispatcher   getRequestDispatcher ( String   path )     {", "return   new   MockRequestDispatcher ( path )     {", "@ Override", "public   void   forward ( ServletRequest   forwardRequest ,    ServletResponse   forwardResponse )     {", "assertTrue (  \" Correct   rc   attribute \"  ,     (  ( forwardRequest . getAttribute (  \" rc \"  )  )     =  =    null )  )  ;", "assertEquals (  \" value 1  \"  ,    forwardRequest . getAttribute (  \" key 1  \"  )  )  ;", "assertEquals ( new   Integer (  2  )  ,    forwardRequest . getAttribute (  \" key 2  \"  )  )  ;", "assertNull ( forwardRequest . getAttribute (  \" myBean \"  )  )  ;", "assertSame ( wac . getBean (  \" myBean 2  \"  )  ,    forwardRequest . getAttribute (  \" myBean 2  \"  )  )  ;", "}", "}  ;", "}", "}  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "View   view    =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "view . render ( new   HashMap < String ,    Object >  (  )  ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithSpecificContextBeans"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "doTestUrlBasedViewResolverWithoutPrefixes ( new   InternalResourceViewResolver (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInternalResourceViewResolverWithoutPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "UrlBasedViewResolver   vr    =    new   UrlBasedViewResolver (  )  ;", "vr . setViewClass ( JstlView . class )  ;", "doTestUrlBasedViewResolverWithPrefixes ( vr )  ;", "}", "METHOD_END"], "methodName": ["testUrlBasedViewResolverWithPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "UrlBasedViewResolver   vr    =    new   UrlBasedViewResolver (  )  ;", "vr . setViewClass ( JstlView . class )  ;", "doTestUrlBasedViewResolverWithoutPrefixes ( vr )  ;", "}", "METHOD_END"], "methodName": ["testUrlBasedViewResolverWithoutPrefixes"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . registerSingleton (  \" testBean \"  ,    TestBean . class )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "TestBean   testBean    =     (  ( TestBean )     ( wac . getBean (  \" testBean \"  )  )  )  ;", "XmlViewResolver   vr    =    new   XmlViewResolver (  )  ;", "vr . setLocation ( new   ClassPathResource (  \" web / servlet / view / views . xml \"  )  )  ;", "vr . setApplicationContext ( wac )  ;", "View   view 1     =    vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "assertTrue (  \" Correct   view   class \"  ,    ViewResolverTests . TestView . class . equals ( view 1  . getClass (  )  )  )  ;", "assertTrue (  \" Correct   URL \"  ,     \"  / example 1  . jsp \"  . equals (  (  ( InternalResourceView )     ( view 1  )  )  . getUrl (  )  )  )  ;", "View   view 2     =    vr . resolveViewName (  \" example 2  \"  ,    Locale . getDefault (  )  )  ;", "assertTrue (  \" Correct   view   class \"  ,    JstlView . class . equals ( view 2  . getClass (  )  )  )  ;", "assertTrue (  \" Correct   URL \"  ,     \"  / example 2 new . jsp \"  . equals (  (  ( InternalResourceView )     ( view 2  )  )  . getUrl (  )  )  )  ;", "ServletContext   sc    =    new   MockServletContext (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "TestBean   tb    =    new   TestBean (  )  ;", "model . put (  \" tb \"  ,    tb )  ;", "HttpServletRequest   request    =    new   mock . web . test . MockHttpServletRequest ( sc )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "request . setAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE ,    new   FixedThemeResolver (  )  )  ;", "view 1  . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   test 1    attribute \"  ,     \" testvalue 1  \"  . equals ( request . getAttribute (  \" test 1  \"  )  )  )  ;", "assertTrue (  \" Correct   test 2    attribute \"  ,    testBean . equals ( request . getAttribute (  \" test 2  \"  )  )  )  ;", "request    =    new   mock . web . test . MockHttpServletRequest ( sc )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "request . setAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE ,    new   FixedThemeResolver (  )  )  ;", "view 2  . render ( model ,    request ,    response )  ;", "assertTrue (  \" Correct   tb   attribute \"  ,    tb . equals ( request . getAttribute (  \" tb \"  )  )  )  ;", "assertTrue (  \" Correct   test 1    attribute \"  ,     \" testvalue 1  \"  . equals ( request . getAttribute (  \" test 1  \"  )  )  )  ;", "assertTrue (  \" Correct   test 2    attribute \"  ,     \" testvalue 2  \"  . equals ( request . getAttribute (  \" test 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testXmlViewResolver"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )     {", "@ Override", "protected   Resource   getResourceByPath ( String   path )     {", "assertTrue (  \" Correct   default   location \"  ,    Xml . DEFAULT _ LOCATION . equals ( path )  )  ;", "return   super . getResourceByPath ( path )  ;", "}", "}  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "Xml   vr    =    new   Xml (  )  ;", "try    {", "vr . setApplicationContext ( wac )  ;", "vr . afterPropertiesSet (  )  ;", "fail (  \" Should   have   thrown   BeanDefinitionStoreException \"  )  ;", "}    catch    ( BeanDefinitionStoreException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testXmlViewResolverDefaultLocation"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )     {", "@ Override", "protected   Resource   getResourceByPath ( String   path )     {", "assertTrue (  \" Correct   default   location \"  ,    Xml . DEFAULT _ LOCATION . equals ( path )  )  ;", "return   super . getResourceByPath ( path )  ;", "}", "}  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "Xml   vr    =    new   Xml (  )  ;", "vr . setCache ( false )  ;", "try    {", "vr . setApplicationContext ( wac )  ;", "}    catch    ( ApplicationContextException   ex )     {", "fail (  (  \" Should   not   have   thrown   ApplicationContextException :     \"     +     ( ex . getMessage (  )  )  )  )  ;", "}", "try    {", "vr . resolveViewName (  \" example 1  \"  ,    Locale . getDefault (  )  )  ;", "fail (  \" Should   have   thrown   BeanDefinitionStoreException \"  )  ;", "}    catch    ( BeanDefinitionStoreException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testXmlViewResolverWithoutCache"], "fileName": "org.springframework.web.servlet.view.ViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . cachedFactory )     !  =    null )     {", "return   this . cachedFactory ;", "}", "ApplicationContext   applicationContext    =    obtainApplicationContext (  )  ;", "Resource   actualLocation    =    this . location ;", "if    ( actualLocation    =  =    null )     {", "actualLocation    =    applicationContext . getResource ( XmlViewResolver . DEFAULT _ LOCATION )  ;", "}", "GenericWebApplicationContext   factory    =    new   GenericWebApplicationContext (  )  ;", "factory . setParent ( applicationContext )  ;", "factory . setServletContext ( getServletContext (  )  )  ;", "XmlBeanDefinitionReader   reader    =    new   XmlBeanDefinitionReader ( factory )  ;", "reader . setEnvironment ( applicationContext . getEnvironment (  )  )  ;", "reader . setEntityResolver ( new   beans . factory . xml . ResourceEntityResolver ( applicationContext )  )  ;", "reader . loadBeanDefinitions ( actualLocation )  ;", "factory . refresh (  )  ;", "if    ( isCache (  )  )     {", "this . cachedFactory    =    factory ;", "}", "return   factory ;", "}", "METHOD_END"], "methodName": ["initFactory"], "fileName": "org.springframework.web.servlet.view.XmlViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . location    =    location ;", "}", "METHOD_END"], "methodName": ["setLocation"], "fileName": "org.springframework.web.servlet.view.XmlViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.web.servlet.view.XmlViewResolver"}, {"methodBody": ["METHOD_START", "{", "String   url    =    getUrl (  )  ;", "Assert . state (  ( url    !  =    null )  ,     \"  ' url '    not   set \"  )  ;", "return   new   com . lowagie . text . pdf . PdfReader ( obtainApplicationContext (  )  . getResource ( url )  . getInputStream (  )  )  ;", "}", "METHOD_END"], "methodName": ["readPdfResource"], "fileName": "org.springframework.web.servlet.view.document.AbstractPdfStamperView"}, {"methodBody": ["METHOD_START", "{", "return    ( PdfWriter . ALLOW _ PRINTING )     |     ( PdfWriter . PageLayoutSinglePage )  ;", "}", "METHOD_END"], "methodName": ["getViewerPreferences"], "fileName": "org.springframework.web.servlet.view.document.AbstractPdfView"}, {"methodBody": ["METHOD_START", "{", "return   new   com . lowagie . text . Document ( PageSize . A 4  )  ;", "}", "METHOD_END"], "methodName": ["newDocument"], "fileName": "org.springframework.web.servlet.view.document.AbstractPdfView"}, {"methodBody": ["METHOD_START", "{", "return   PdfWriter . getInstance ( document ,    os )  ;", "}", "METHOD_END"], "methodName": ["newWriter"], "fileName": "org.springframework.web.servlet.view.document.AbstractPdfView"}, {"methodBody": ["METHOD_START", "{", "writer . setViewerPreferences ( getViewerPreferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["prepareWriter"], "fileName": "org.springframework.web.servlet.view.document.AbstractPdfView"}, {"methodBody": ["METHOD_START", "{", "return   new   HSSFWorkbook (  )  ;", "}", "METHOD_END"], "methodName": ["createWorkbook"], "fileName": "org.springframework.web.servlet.view.document.AbstractXlsView"}, {"methodBody": ["METHOD_START", "{", "ServletOutputStream   out    =    response . getOutputStream (  )  ;", "workbook . write ( out )  ;", "workbook . close (  )  ;", "}", "METHOD_END"], "methodName": ["renderWorkbook"], "fileName": "org.springframework.web.servlet.view.document.AbstractXlsView"}, {"methodBody": ["METHOD_START", "{", "View   excelView    =    new   AbstractXlsView (  )     {", "@ Override", "protected   void   buildExcelDocument ( Map < String ,    Object >    model ,    Workbook   workbook ,    HttpServletRequest   request ,    HttpServletResponse   response )    throws   Exception    {", "Sheet   sheet    =    workbook . createSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . createRow (  0  )  ;", "Cell   cell    =    row . createCell (  0  )  ;", "cell . setCellValue (  \" Test   Value \"  )  ;", "}", "}  ;", "excelView . render ( new   HashMap (  )  ,    request ,    response )  ;", "Workbook   wb    =    new   HSSFWorkbook ( new   ByteArrayInputStream ( response . getContentAsByteArray (  )  )  )  ;", "assertEquals (  \" Test   Sheet \"  ,    wb . getSheetName (  0  )  )  ;", "Sheet   sheet    =    wb . getSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . getRow (  0  )  ;", "Cell   cell    =    row . getCell (  0  )  ;", "assertEquals (  \" Test   Value \"  ,    cell . getStringCellValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testXls"], "fileName": "org.springframework.web.servlet.view.document.XlsViewTests"}, {"methodBody": ["METHOD_START", "{", "View   excelView    =    new   AbstractXlsxStreamingView (  )     {", "@ Override", "protected   void   buildExcelD ( Map < String ,    Object >    model ,    Workbook   workbook ,    HttpServletRequest   request ,    HttpServletResponse   response )    throws   Exception    {", "Sheet   sheet    =    workbook . createSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . createRow (  0  )  ;", "Cell   cell    =    row . createCell (  0  )  ;", "cell . setCellValue (  \" Test   Value \"  )  ;", "}", "}  ;", "excelView . render ( new   HashMap (  )  ,    request ,    response )  ;", "Workbook   wb    =    new   XSSFWorkbook ( new   ByteArrayInputStream ( response . getContentAsByteArray (  )  )  )  ;", "assertEquals (  \" Test   Sheet \"  ,    wb . getSheetName (  0  )  )  ;", "Sheet   sheet    =    wb . getSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . getRow (  0  )  ;", "Cell   cell    =    row . getCell (  0  )  ;", "assertEquals (  \" Test   Value \"  ,    cell . getStringCellValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testXlsxStreamingView"], "fileName": "org.springframework.web.servlet.view.document.XlsViewTests"}, {"methodBody": ["METHOD_START", "{", "View   excelView    =    new   AbstractXlsxView (  )     {", "@ Override", "protected   void   buildExcelD ( Map < String ,    Object >    model ,    Workbook   workbook ,    HttpServletRequest   request ,    HttpServletResponse   response )    throws   Exception    {", "Sheet   sheet    =    workbook . createSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . createRow (  0  )  ;", "Cell   cell    =    row . createCell (  0  )  ;", "cell . setCellValue (  \" Test   Value \"  )  ;", "}", "}  ;", "excelView . render ( new   HashMap (  )  ,    request ,    response )  ;", "Workbook   wb    =    new   XSSFWorkbook ( new   ByteArrayInputStream ( response . getContentAsByteArray (  )  )  )  ;", "assertEquals (  \" Test   Sheet \"  ,    wb . getSheetName (  0  )  )  ;", "Sheet   sheet    =    wb . getSheet (  \" Test   Sheet \"  )  ;", "Row   row    =    sheet . getRow (  0  )  ;", "Cell   cell    =    row . getCell (  0  )  ;", "assertEquals (  \" Test   Value \"  ,    cell . getStringCellValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testXlsxView"], "fileName": "org.springframework.web.servlet.view.document.XlsViewTests"}, {"methodBody": ["METHOD_START", "{", "this . feedType    =    feedType ;", "}", "METHOD_END"], "methodName": ["setFeedType"], "fileName": "org.springframework.web.servlet.view.feed.AbstractAtomFeedView"}, {"methodBody": ["METHOD_START", "{", "return   CompareMatcher . isSimilarTo ( content )  . ignoreWhitespace (  )  ;", "}", "METHOD_END"], "methodName": ["isSimilarTo"], "fileName": "org.springframework.web.servlet.view.feed.AtomFeedViewTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    String >    model    =    new   LinkedHashMap <  >  (  )  ;", "model . put (  \"  2  \"  ,     \" This   is   entry    2  \"  )  ;", "model . put (  \"  1  \"  ,     \" This   is   entry    1  \"  )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content - type \"  ,     \" application / atom + xml \"  ,    response . getContentType (  )  )  ;", "String   expected    =     \"  < feed   xmlns =  \\  \" http :  /  / www . w 3  . org /  2  0  0  5  / Atom \\  \"  >  \"     +     (  (  (  \"  < title > Test   Feed <  / title >  \"     +     \"  < entry >  < title >  2  <  / title >  < summary > This   is   entry    2  <  / summary >  <  / entry >  \"  )     +     \"  < entry >  < title >  1  <  / title >  < summary > This   is   entry    1  <  / summary >  <  / entry >  \"  )     +     \"  <  / feed >  \"  )  ;", "assertThat ( response . getContentAsString (  )  ,     . isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.feed.AtomFeedViewTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    String >    model    =    new   LinkedHashMap <  >  (  )  ;", "model . put (  \"  2  \"  ,     \" This   is   entry    2  \"  )  ;", "model . put (  \"  1  \"  ,     \" This   is   entry    1  \"  )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content - type \"  ,     \" application / rss + xml \"  ,    response . getContentType (  )  )  ;", "String   expected    =     \"  < rss   version =  \\  \"  2  .  0  \\  \"  >  \"     +     (  (  (  (  (  \"  < channel >  < title > Test   Feed <  / title >  \"     +     \"  < link > http :  /  / example . com <  / link >  \"  )     +     \"  < description > Test   feed   description <  / description >  \"  )     +     \"  < item >  < title >  2  <  / title >  < description > This   is   entry    2  <  / description >  <  / item >  \"  )     +     \"  < item >  < title >  1  <  / title >  < description > This   is   entry    1  <  / description >  <  / item >  \"  )     +     \"  <  / channel >  <  / rss >  \"  )  ;", "assertThat ( response . getContentAsString (  )  ,    isSimilarTo ( expected )  . ignoreWhitespace (  )  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.feed.RssFeedViewTests"}, {"methodBody": ["METHOD_START", "{", "this . configuration    =    configuration ;", "}", "METHOD_END"], "methodName": ["setConfiguration"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"}, {"methodBody": ["METHOD_START", "{", "DefaultListableBeanFactory   beanFactory    =    new   DefaultListableBeanFactory (  )  ;", "RootBeanDefinition   loaderDef    =    new   RootBeanDefinition ( SpringTemplateLoader . class )  ;", "loaderDef . getConstructorArgumentValues (  )  . addGenericArgumentValue ( new   DefaultResourceLoader (  )  )  ;", "loaderDef . getConstructorArgumentValues (  )  . addGenericArgumentValue (  \"  / freemarker \"  )  ;", "RootBeanDefinition   configDef    =    new   RootBeanDefinition ( Configuration . class )  ;", "configDef . getPropertyValues (  )  . add (  \" templateLoader \"  ,    loaderDef )  ;", "beanFactory . registerBeanDefinition (  \" f \"  ,    configDef )  ;", "beanFactory . getBean ( Configuration . class )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerConfigurationAsBean"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerConfigurationFactoryBean   fcfb    =    new   FreeMarkerConfigurationFactoryBean (  )  ;", "fcfb . setConfigLocation ( new   FileSystemResource (  \" myprops . properties \"  )  )  ;", "Properties   props    =    new   Properties (  )  ;", "props . setProperty (  \" myprop \"  ,     \"  / mydir \"  )  ;", "fcfb . setFreemarkerSettings ( props )  ;", "fcfb . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerConfigurationFactoryBeanWithConfigLocation"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerConfigurationFactoryBean   fcfb    =    new   FreeMarkerConfigurationFactoryBean (  )  ;", "fcfb . setTemplateLoaderPath (  \" file :  / mydir \"  )  ;", "Properties   settings    =    new   Properties (  )  ;", "settings . setProperty (  \" localized _ lookup \"  ,     \" false \"  )  ;", "fcfb . setFreemarkerSettings ( settings )  ;", "fcfb . setResourceLoader ( new   ResourceLoader (  )     {", "@ Override", "public   Resource   getResource ( String   location )     {", "if    (  !  (  (  \" file :  / mydir \"  . equals ( location )  )     |  |     (  \" file :  / mydir / test \"  . equals ( location )  )  )  )     {", "throw   new   IllegalArgumentException ( location )  ;", "}", "return   new   ByteArrayResource (  \" test \"  . getBytes (  )  ,     \" test \"  )  ;", "}", "@ Override", "public   ClassLoader   getClassLoader (  )     {", "return   getClass (  )  . getClassLoader (  )  ;", "}", "}  )  ;", "fcfb . afterPropertiesSet (  )  ;", "assertThat ( fcfb . getObject (  )  ,    instanceOf ( Configuration . class )  )  ;", "Configuration   fc    =    fcfb . getObject (  )  ;", "Template   ft    =    fc . getTemplate (  \" test \"  )  ;", "assertEquals (  \" test \"  ,    FreeMarkerTemplateUtils . processTemplateIntoString ( ft ,    new   HashMap (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerConfigurationFactoryBeanWithNonFileResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerConfigurationFactoryBean   fcfb    =    new   FreeMarkerConfigurationFactoryBean (  )  ;", "fcfb . setTemplateLoaderPath (  \" file :  / mydir \"  )  ;", "fcfb . afterPropertiesSet (  )  ;", "Configuration   cfg    =    fcfb . getObject (  )  ;", "assertTrue (  (  ( cfg . getTemplateLoader (  )  )    instanceof   SpringTemplateLoader )  )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerConfigurationFactoryBeanWithResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   resource    =    new   ClassPathResource (  \" test . ftl \"  ,    getClass (  )  )  ;", "assertTrue ( resource . exists (  )  )  ;", "St   all    =    FileCopyUtils . copyToSt ( new   InputStreamReader ( resource . getInputStream (  )  )  )  ;", "all    =    all . replace (  \"  \\ r \\ n \"  ,     \"  \\ n \"  )  ;", "St [  ]    macros    =    StUtils . delimitedListToStArray ( all ,     \"  \\ n \\ n \"  )  ;", "for    ( St   macro    :    macros )     {", "if    ( macro . startsWith ( name )  )     {", "return   macro . subst ( macro . indexOf (  \"  \\ n \"  )  )  . trim (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["fetchMacro"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "String   macro    =    fetchMacro ( name )  ;", "assertNotNull ( macro )  ;", "FileSystemResource   resource    =    new   FileSystemResource (  (  ( System . getProperty (  \" tmpdir \"  )  )     +     \"  / tmp . ftl \"  )  )  ;", "FileCopyUtils . copy (  (  \"  <  # import    \\  \" spring . ftl \\  \"    as   spring    /  >  \\ n \"     +    macro )  ,    new   FileWriter ( resource . getPath (  )  )  )  ;", "DummyMacroRequestContext   rc    =    new   DummyMacroRequestContext ( request )  ;", "Map < String ,    String >    msgMap    =    new   HashMap <  >  (  )  ;", "msgMap . put (  \" hello \"  ,     \" Howdy \"  )  ;", "msgMap . put (  \" world \"  ,     \" Mundo \"  )  ;", "rc . setMessageMap ( msgMap )  ;", "Map < String ,    String >    themeMsgMap    =    new   HashMap <  >  (  )  ;", "themeMsgMap . put (  \" hello \"  ,     \" Howdy !  \"  )  ;", "themeMsgMap . put (  \" world \"  ,     \" Mundo !  \"  )  ;", "rc . setThemeMessageMap ( themeMsgMap )  ;", "rc . setContextPath (  \"  / springtest \"  )  ;", "TestBean   darren    =    new   TestBean (  \" Darren \"  ,     9  9  )  ;", "TestBean   fred    =    new   TestBean (  \" Fred \"  )  ;", "fred . setJedi ( true )  ;", "darren . setSpouse ( fred )  ;", "darren . setJedi ( true )  ;", "darren . setStringArray ( new   String [  ]  {     \" John \"  ,     \" Fred \"     }  )  ;", "request . setAttribute (  \" command \"  ,    darren )  ;", "Map < String ,    String >    names    =    new   HashMap <  >  (  )  ;", "names . put (  \" Darren \"  ,     \" Darren   Davison \"  )  ;", "names . put (  \" John \"  ,     \" John   Doe \"  )  ;", "names . put (  \" Fred \"  ,     \" Fred   Bloggs \"  )  ;", "names . put (  \" Rob & Harrop \"  ,     \" Rob   Harrop \"  )  ;", "Configuration   config    =    fc . getConfiguration (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" command \"  ,    darren )  ;", "model . put (  \" springMacroRequestContext \"  ,    rc )  ;", "model . put (  \" msgArgs \"  ,    new   Object [  ]  {     \" World \"     }  )  ;", "model . put (  \" nameOptionMap \"  ,    names )  ;", "model . put (  \" options \"  ,    names . values (  )  )  ;", "View   view    =    new   View (  )  ;", "view . setBeanName (  \" myView \"  )  ;", "view . setUrl (  \" tmp . ftl \"  )  ;", "view . setExposeSpringMacroHelpers ( false )  ;", "view . setConfiguration ( config )  ;", "view . setServletContext ( new   MockServletContext (  )  )  ;", "view . render ( model ,    request ,    response )  ;", "String   output    =    response . getContentAsString (  )  ;", "output    =    output . replace (  \"  \\ r \\ n \"  ,     \"  \\ n \"  )  ;", "return   output . trim (  )  ;", "}", "METHOD_END"], "methodName": ["getMacroOutput"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "ServletContext   sc    =    new   MockServletContext (  )  ;", "wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "fc    =    new   Configurer (  )  ;", "fc . setTemplateLoaderPaths (  \" classpath :  /  \"  ,     (  \" file :  /  /  \"     +     ( System . getProperty (  \" tmpdir \"  )  )  )  )  ;", "fc . setServletContext ( sc )  ;", "fc . afterPropertiesSet (  )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" freeMarkerConfigurer \"  ,    fc )  ;", "wac . refresh (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "request . setAttribute ( DispatcherServlet . THEME _ RESOLVER _ ATTRIBUTE ,    new   FixedThemeResolver (  )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  9  9  \"  ,    getMacroOutput (  \" AGE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAge"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" hi   planet \"  ,    getMacroOutput (  \" DEFAULTMESSAGE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultMessage"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" hi !    planet !  \"  ,    getMacroOutput (  \" DEFAULTTHEME \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultTheme"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerView   fv    =    new   FreeMarkerView (  )     {", "@ Override", "@ SuppressWarnings (  \" rawtypes \"  )", "protected   void   processTemplate ( Template   template ,    SimpleHash   fmModel ,    HttpServletResponse   response )    throws   TemplateException    {", "Map   model    =    fmModel . toMap (  )  ;", "assertTrue (  (  ( model . get ( FreeMarkerView . SPRING _ MACRO _ REQUEST _ CONTEXT _ ATTRIBUTE )  )    instanceof   RequestContext )  )  ;", "RequestContext   rc    =     (  ( RequestContext )     ( model . get ( FreeMarkerView . SPRING _ MACRO _ REQUEST _ CONTEXT _ ATTRIBUTE )  )  )  ;", "BindStatus   status    =    rc . getBindStatus (  \" tb . name \"  )  ;", "assertEquals (  \" name \"  ,    status . getExpression (  )  )  ;", "assertEquals (  \" juergen \"  ,    status . getValue (  )  )  ;", "}", "}  ;", "fv . setUrl (  . TEMPLATE _ FILE )  ;", "fv . setApplicationContext ( wac )  ;", "fv . setExposeSpringMacroHelpers ( true )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" tb \"  ,    new   TestBean (  \" juergen \"  ,     9  9  )  )  ;", "fv . render ( model ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["testExposeSpringMacroHelpers"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" text \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \" Darren \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm1"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" hidden \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \" Darren \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm10"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" text \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \" Darren \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm11"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" hidden \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \" Darren \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm12"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" password \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \"  \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  3  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm13"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "String   output    =    getMacroOutput (  \" FORM 1  5  \"  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . startsWith (  \"  < input   type =  \\  \" hidden \\  \"    name =  \\  \"  _ name \\  \"    value =  \\  \" on \\  \"  /  >  \"  )  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . contains (  \"  < input   type =  \\  \" checkbox \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"     /  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm15"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "String   output    =    getMacroOutput (  \" FORM 1  6  \"  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . startsWith (  \"  < input   type =  \\  \" hidden \\  \"    name =  \\  \"  _ jedi \\  \"    value =  \\  \" on \\  \"  /  >  \"  )  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . contains (  \"  < input   type =  \\  \" checkbox \\  \"    id =  \\  \" jedi \\  \"    name =  \\  \" jedi \\  \"    checked =  \\  \" checked \\  \"     /  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm16"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" text \\  \"    id =  \\  \" spouses 0  . name \\  \"    name =  \\  \" spouses [  0  ]  . name \\  \"    value =  \\  \" Fred \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 1  7  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm17"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "String   output    =    getMacroOutput (  \" FORM 1  8  \"  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . startsWith (  \"  < input   type =  \\  \" hidden \\  \"    name =  \\  \"  _ spouses [  0  ]  . jedi \\  \"    value =  \\  \" on \\  \"  /  >  \"  )  )  ;", "assertTrue (  (  \" Wrong   output :     \"     +    output )  ,    output . contains (  \"  < input   type =  \\  \" checkbox \\  \"    id =  \\  \" spouses 0  . jedi \\  \"    name =  \\  \" spouses [  0  ]  . jedi \\  \"    checked =  \\  \" checked \\  \"     /  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm18"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" text \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \" Darren \\  \"    class =  \\  \" myCssClass \\  \"              >  \"  ,    getMacroOutput (  \" FORM 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm2"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < textarea   id =  \\  \" name \\  \"    name =  \\  \" name \\  \"     >  \\ nDarren <  / textarea >  \"  ,    getMacroOutput (  \" FORM 3  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm3"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < textarea   id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    rows =  1  0    cols =  3  0  >  \\ nDarren <  / textarea >  \"  ,    getMacroOutput (  \" FORM 4  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm4"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  < input   type =  \\  \" password \\  \"    id =  \\  \" name \\  \"    name =  \\  \" name \\  \"    value =  \\  \"  \\  \"                 >  \"  ,    getMacroOutput (  \" FORM 9  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testForm9"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Howdy   Mundo \"  ,    getMacroOutput (  \" MESSAGE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMessage"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Howdy [ World ]  \"  ,    getMacroOutput (  \" MESSAGEARGS \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMessageArgs"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Hi \"  ,    getMacroOutput (  \" MESSAGEARGSWITHDEFAULTMESSAGE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMessageArgsWithDefaultMessage"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Darren \"  ,    getMacroOutput (  \" NAME \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testName"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "final   String   helperTool    =     \" wrongType \"  ;", "FreeMarkerView   fv    =    new   FreeMarkerView (  )     {", "@ Override", "protected   void   processTemplate ( Template   template ,    SimpleHash   model ,    HttpServletResponse   response )     {", "fail (  )  ;", "}", "}  ;", "fv . setUrl (  . TEMPLATE _ FILE )  ;", "fv . setApplicationContext ( wac )  ;", "fv . setExposeSpringMacroHelpers ( true )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( FreeMarkerView . SPRING _ MACRO _ REQUEST _ CONTEXT _ ATTRIBUTE ,    helperTool )  ;", "try    {", "fv . render ( model ,    request ,    response )  ;", "}    catch    ( Exception   ex )     {", "assertTrue (  ( ex   instanceof   ServletException )  )  ;", "assertTrue ( ex . getMessage (  )  . contains ( FreeMarkerView . SPRING _ MACRO _ REQUEST _ CONTEXT _ ATTRIBUTE )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSpringMacroRequestContextAttributeUsed"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Howdy !    Mundo !  \"  ,    getMacroOutput (  \" THEME \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testTheme"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Howdy !  [ World ]  \"  ,    getMacroOutput (  \" THEMEARGS \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testThemeArgs"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Hi !  \"  ,    getMacroOutput (  \" THEMEARGSWITHDEFAULTMESSAGE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testThemeArgsWithDefaultMessage"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  / springtest / aftercontext . html \"  ,    getMacroOutput (  \" URL \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUrl"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \"  / springtest / aftercontext / bar ? spam = bucket \"  ,    getMacroOutput (  \" URLPARAMS \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUrlParams"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerMacroTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   BeanFactoryUtils . beanOfTypeIncludingAncestors ( obtainApplicationContext (  )  ,    FreeMarkerConfig . class ,    true ,    false )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "throw   new   context . ApplicationContextException (  (  \" Must   define   a   single   FreeMarkerConfig   bean   in   this   web   application   context    \"     +     (  \"  ( may   be   inherited )  :    FreeMarkerConfigurer   is   the   usual   implementation .     \"     +     \" This   bean   may   be   given   any   name .  \"  )  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["autodetectConfiguration"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "HttpSession   session    =    request . getSession ( false )  ;", "if    ( session    !  =    null )     {", "return   new   ext . servlet . HttpSessionHashModel ( session ,    getObjectWrapper (  )  )  ;", "} else    {", "return   new   ext . servlet . HttpSessionHashModel ( null ,    request ,    response ,    getObjectWrapper (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["buildSessionModel"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "AllHttpScopesHashModel   fmModel    =    new   AllHttpScopesHashModel ( getObjectWrapper (  )  ,    getServletContext (  )  ,    request )  ;", "fmModel . put ( KEY _ JSP _ TAGLIBS ,    this . taglibFactory )  ;", "fmModel . put ( KEY _ APPLICATION ,    this . servletContextHashModel )  ;", "fmModel . put ( KEY _ SESSION ,    buildSessionModel ( request ,    response )  )  ;", "fmModel . put ( KEY _ REQUEST ,    new   ext . servlet . HttpRequestHashModel ( request ,    response ,    getObjectWrapper (  )  )  )  ;", "fmModel . put ( KEY _ REQUEST _ PARAMETERS ,    new   ext . servlet . HttpRequestParametersHashModel ( request )  )  ;", "fmModel . putAll ( model )  ;", "return   fmModel ;", "}", "METHOD_END"], "methodName": ["buildTemplateModel"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "exposeModelAsRequestAttributes ( model ,    request )  ;", "SimpleHash   fmModel    =    buildTemplateModel ( model ,    request ,    response )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  (  (  \" Rendering   FreeMarker   template    [  \"     +     ( getUrl (  )  )  )     +     \"  ]    in       '  \"  )     +     ( getBeanName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "Locale   locale    =    RequestContextUtils . getLocale ( request )  ;", "processTemplate ( getTemplate ( locale )  ,    fmModel ,    response )  ;", "}", "METHOD_END"], "methodName": ["doRender"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "return   this . configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "return   this . encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "ObjectWrapper   ow    =    obtainConfiguration (  )  . getObjectWrapper (  )  ;", "return   ow    !  =    null    ?    ow    :    new   template . DefaultObjectWrapperBuilder ( Configuration . DEFAULT _ INCOMPATIBLE _ IMPROVEMENTS )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectWrapper"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "return    ( getEncoding (  )  )     !  =    null    ?    obtainConfiguration (  )  . getTemplate ( name ,    locale ,    getEncoding (  )  )     :    obtainConfiguration (  )  . getTemplate ( name ,    locale )  ;", "}", "METHOD_END"], "methodName": ["getTemplate"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "String   url    =    getUrl (  )  ;", "Assert . state (  ( url    !  =    null )  ,     \"  ' url '    not   set \"  )  ;", "return   getTemplate ( url ,    locale )  ;", "}", "METHOD_END"], "methodName": ["getTemplate"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    getConfiguration (  )  ;", "Ast . state (  ( configuration    !  =    null )  ,     \" No   Configuration   set \"  )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["obtainConfiguration"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "template . process ( model ,    response . getWriter (  )  )  ;", "}", "METHOD_END"], "methodName": ["processTemplate"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "this . configuration    =    configuration ;", "}", "METHOD_END"], "methodName": ["setConfiguration"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerView"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "FreeMarkerConfigurer   configurer    =    new   FreeMarkerConfigurer (  )  ;", "configurer . setConfiguration ( new    . TestConfiguration (  )  )  ;", "configurer . setServletContext ( sc )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . getBeanFactory (  )  . registerSingleton (  \" configurer \"  ,    configurer )  ;", "wac . refresh (  )  ;", "FreeMarkerViewResolver   vr    =    new   FreeMarkerViewResolver (  \" prefix _  \"  ,     \"  _ suffix \"  )  ;", "vr . setApplicationContext ( wac )  ;", "View   view    =    vr . resolveViewName (  \" test \"  ,    Locale . CANADA )  ;", "assertEquals (  \" Correct   view   class \"  ,    FreeMarkerView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" prefix _ test _ suffix \"  ,     (  ( FreeMarkerView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" non - existing \"  ,    Locale . CANADA )  ;", "assertNull ( view )  ;", "view    =    vr . resolveViewName (  \" redirect : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    RedirectView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( RedirectView )     ( view )  )  . getUrl (  )  )  ;", "view    =    vr . resolveViewName (  \" forward : myUrl \"  ,    Locale . getDefault (  )  )  ;", "assertEquals (  \" Correct   view   class \"  ,    InternalResourceView . class ,    view . getClass (  )  )  ;", "assertEquals (  \" Correct   URL \"  ,     \" myUrl \"  ,     (  ( InternalResourceView )     ( view )  )  . getUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["freeMarkerViewResolver"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerView   fv    =    new   FreeMarkerView (  )  ;", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "Map < String ,    FreeMarkerConfig >    configs    =    new   HashMap <  >  (  )  ;", "FreeMarkerConfigurer   configurer    =    new   FreeMarkerConfigurer (  )  ;", "configurer . setConfiguration ( new    . TestConfiguration (  )  )  ;", "configurer . setServletContext ( sc )  ;", "configs . put (  \" configurer \"  ,    configurer )  ;", "given ( wac . getBeansOfType ( FreeMarkerConfig . class ,    true ,    false )  )  . willReturn ( configs )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( sc )  ;", "fv . setUrl (  \" templateName \"  )  ;", "fv . setApplicationContext ( wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . US )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "response . setContentType (  \" myContentType \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" myattr \"  ,     \" myvalue \"  )  ;", "fv . render ( model ,    request ,    response )  ;", "assertEquals (  \" myContentType \"  ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["keepExistingContentType"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerView   fv    =    new   FreeMarkerView (  )  ;", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "given ( wac . getBeansOfType ( FreeMarkerConfig . class ,    true ,    false )  )  . willReturn ( new   HashMap (  )  )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( new   MockServletContext (  )  )  ;", "fv . setUrl (  \" anythingButNull \"  )  ;", "exception . expect ( ApplicationContextException . class )  ;", "exception . expectMessage ( containsString (  \" FreeMarkerConfig \"  )  )  ;", "fv . setApplicationContext ( wac )  ;", "}", "METHOD_END"], "methodName": ["noFreeMarkerConfig"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerView   fv    =    new   FreeMarkerView (  )  ;", "exception . expect ( IllegalArgumentException . class )  ;", "exception . expectMessage ( containsString (  \" url \"  )  )  ;", "fv . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["noTemplateName"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests"}, {"methodBody": ["METHOD_START", "{", "FreeMarkerView   fv    =    new   FreeMarkerView (  )  ;", "WebApplicationContext   wac    =    mock ( WebApplicationContext . class )  ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "Map < String ,    FreeMarkerConfig >    configs    =    new   HashMap <  >  (  )  ;", "FreeMarkerConfigurer   configurer    =    new   FreeMarkerConfigurer (  )  ;", "configurer . setConfiguration ( new    . TestConfiguration (  )  )  ;", "configurer . setServletContext ( sc )  ;", "configs . put (  \" configurer \"  ,    configurer )  ;", "given ( wac . getBeansOfType ( FreeMarkerConfig . class ,    true ,    false )  )  . willReturn ( configs )  ;", "given ( wac . getServletContext (  )  )  . willReturn ( sc )  ;", "fv . setUrl (  \" templateName \"  )  ;", "fv . setApplicationContext ( wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( Locale . US )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "request . setAttribute ( DispatcherServlet . LOCALE _ RESOLVER _ ATTRIBUTE ,    new   AcceptHeaderLocaleResolver (  )  )  ;", "HttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" myattr \"  ,     \" myvalue \"  )  ;", "fv . render ( model ,    request ,    response )  ;", "assertEquals ( AbstractView . DEFAULT _ CONTENT _ TYPE ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["validTemplateName"], "fileName": "org.springframework.web.servlet.view.freemarker.FreeMarkerViewTests"}, {"methodBody": ["METHOD_START", "{", "String [  ]    paths    =    StringUtils . commaDelimitedListToStringArray ( getResourceLoaderPath (  )  )  ;", "List < URL >    urls    =    new   ArrayList <  >  (  )  ;", "for    ( String   path    :    paths )     {", "Resource [  ]    resources    =    getApplicationContext (  )  . getResources ( path )  ;", "if    (  ( resources . length )     >     0  )     {", "for    ( Resource   resource    :    resources )     {", "if    ( resource . exists (  )  )     {", "urls . add ( resource . getURL (  )  )  ;", "}", "}", "}", "}", "ClassLoader   classLoader    =    getApplicationContext (  )  . getClassLoader (  )  ;", "Assert . state (  ( classLoader    !  =    null )  ,     \" No   ClassLoader \"  )  ;", "return    !  ( urls . isEmpty (  )  )     ?    new   URLClassLoader ( urls . toArray ( new   URL [  0  ]  )  ,    classLoader )     :    classLoader ;", "}", "METHOD_END"], "methodName": ["createTemplateClassLoader"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . templateEngine )     =  =    null )     {", "ClassLoader   templateClassLoader    =    createTemplateClassLoader (  )  ;", "this . templateEngine    =    new   MarkupTemplateEngine ( templateClassLoader ,    this ,    new    . LocaleTemplateResolver (  )  )  ;", "}", "return   this . templateEngine ;", "}", "METHOD_END"], "methodName": ["createTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . applicationContext )     !  =    null )  ,     \" No   ApplicationContext   set \"  )  ;", "return   this . applicationContext ;", "}", "METHOD_END"], "methodName": ["getApplicationContext"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   this . resourceLoaderPath ;", "}", "METHOD_END"], "methodName": ["getResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . templateEngine )     !  =    null )  ,     \" No   MarkupTemplateEngine   set \"  )  ;", "return   this . templateEngine ;", "}", "METHOD_END"], "methodName": ["getTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "MarkupTemplateEngine . TemplateResource   resource    =    TemplateResource . parse ( templatePath )  ;", "Locale   locale    =    LocaleContextHolder . getLocale (  )  ;", "URL   url    =    classLoader . getResource ( resource . withLocale ( locale . toString (  )  . replace (  \"  -  \"  ,     \"  _  \"  )  )  . toString (  )  )  ;", "if    ( url    =  =    null )     {", "url    =    classLoader . getResource ( resource . withLocale ( locale . getLanguage (  )  )  . toString (  )  )  ;", "}", "if    ( url    =  =    null )     {", "url    =    classLoader . getResource ( resource . withLocale ( null )  . toString (  )  )  ;", "}", "if    ( url    =  =    null )     {", "throw   new   IOException (  (  \" Unable   to   load   template :  \"     +    templatePath )  )  ;", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["resolveTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . resourceLoaderPath    =    resourceLoaderPath ;", "}", "METHOD_END"], "methodName": ["setResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . templateEngine    =    templateEngine ;", "}", "METHOD_END"], "methodName": ["setTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . configurer . setApplicationContext ( this . applicationContext )  ;", "this . configurer . setCacheTemplates ( false )  ;", "this . configurer . afterPropertiesSet (  )  ;", "TemplateEngine   engine    =    this . configurer . getTemplateEngine (  )  ;", "assertNotNull ( engine )  ;", "assertEquals ( MarkupTemplateEngine . class ,    engine . getClass (  )  )  ;", "MarkupTemplateEngine   markupEngine    =     (  ( MarkupTemplateEngine )     ( engine )  )  ;", "TemplateConfiguration   configuration    =    markupEngine . getTemplateConfiguration (  )  ;", "assertNotNull ( configuration )  ;", "assertFalse ( configuration . isCacheTemplates (  )  )  ;", "}", "METHOD_END"], "methodName": ["customTemplateConfiguration"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . setApplicationContext ( this . applicationContext )  ;", "this . configurer . setTemplateEngine ( new    . TestTemplateEngine (  )  )  ;", "this . configurer . afterPropertiesSet (  )  ;", "TemplateEngine   engine    =    this . configurer . getTemplateEngine (  )  ;", "assertNotNull ( engine )  ;", "assertEquals (  . TestTemplateEngine . class ,    engine . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["customTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . setApplicationContext ( this . applicationContext )  ;", "this . configurer . afterPropertiesSet (  )  ;", "TemplateEngine   engine    =    this . configurer . getTemplateEngine (  )  ;", "assertNotNull ( engine )  ;", "assertEquals ( MarkupTemplateEngine . class ,    engine . getClass (  )  )  ;", "MarkupTemplateEngine   markupEngine    =     (  ( MarkupTemplateEngine )     ( engine )  )  ;", "TemplateConfiguration   configuration    =    markupEngine . getTemplateConfiguration (  )  ;", "assertNotNull ( configuration )  ;", "assertEquals (  . class ,    configuration . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "LocaleContextHolder . setLocale ( Locale . US )  ;", "this . configurer . resolveTemplate ( getClass (  )  . getClassLoader (  )  ,     (  (  . TEMPLATE _ PREFIX )     +     \" missing . tpl \"  )  )  ;", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["failMissingTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . setApplicationContext ( this . applicationContext )  ;", "ClassLoader   classLoader    =    this . configurer . createTemplateClassLoader (  )  ;", "assertNotNull ( classLoader )  ;", "URLClassLoader   urlClassLoader    =     (  ( URLClassLoader )     ( classLoader )  )  ;", "assertThat ( Arrays . asList ( urlClassLoader . getURLs (  )  )  ,    Matchers . hasSize (  1  )  )  ;", "assertThat ( Arrays . asList ( urlClassLoader . getURLs (  )  )  . get (  0  )  . toString (  )  ,    Matchers . endsWith (  \" org / springframework / web / servlet / view / groovy /  \"  )  )  ;", "this . configurer . setResourceLoaderPath (  (  (  . RESOURCE _ LOADER _ PATH )     +     \"  , classpath : org / springframework / web / servlet / view /  \"  )  )  ;", "classLoader    =    this . configurer . createTemplateClassLoader (  )  ;", "assertNotNull ( classLoader )  ;", "urlClassLoader    =     (  ( URLClassLoader )     ( classLoader )  )  ;", "assertThat ( Arrays . asList ( urlClassLoader . getURLs (  )  )  ,    Matchers . hasSize (  2  )  )  ;", "assertThat ( Arrays . asList ( urlClassLoader . getURLs (  )  )  . get (  0  )  . toString (  )  ,    Matchers . endsWith (  \" org / springframework / web / servlet / view / groovy /  \"  )  )  ;", "assertThat ( Arrays . asList ( urlClassLoader . getURLs (  )  )  . get (  1  )  . toString (  )  ,    Matchers . endsWith (  \" org / springframework / web / servlet / view /  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parentLoader"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "LocaleContextHolder . setLocale ( Locale . US )  ;", "URL   url    =    this . configurer . resolveTemplate ( getClass (  )  . getClassLoader (  )  ,     (  (  . TEMPLATE _ PREFIX )     +     \" i 1  8 n . tpl \"  )  )  ;", "Assert . assertNotNull ( url )  ;", "Assert . assertThat ( url . getPath (  )  ,    Matchers . containsString (  \" i 1  8 n . tpl \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveI18nDefaultLocale"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "LocaleContextHolder . setLocale ( Locale . GERMANY )  ;", "URL   url    =    this . configurer . resolveTemplate ( getClass (  )  . getClassLoader (  )  ,     (  (  . TEMPLATE _ PREFIX )     +     \" i 1  8 n . tpl \"  )  )  ;", "Assert . assertNotNull ( url )  ;", "Assert . assertThat ( url . getPath (  )  ,    Matchers . containsString (  \" i 1  8 n _ de _ DE . tpl \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveI18nFullLocale"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "LocaleContextHolder . setLocale ( Locale . FRANCE )  ;", "URL   url    =    this . configurer . resolveTemplate ( getClass (  )  . getClassLoader (  )  ,     (  (  . TEMPLATE _ PREFIX )     +     \" i 1  8 n . tpl \"  )  )  ;", "Assert . assertNotNull ( url )  ;", "Assert . assertThat ( url . getPath (  )  ,    Matchers . containsString (  \" i 1  8 n _ fr . tpl \"  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveI18nPartialLocale"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    this . configurer . resolveTemplate ( getClass (  )  . getClassLoader (  )  ,     (  ( GroovyMarkupConfigurerTests . TEMPLATE _ PREFIX )     +     \" test . tpl \"  )  )  ;", "Assert . assertNotNull ( url )  ;", "}", "METHOD_END"], "methodName": ["resolveSampleTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "this . applicationContext    =    new   StaticApplicationContext (  )  ;", "this . configurer    =    new   GroovyMarkupConfigurer (  )  ;", "this . configurer . setResourceLoaderPath (  . RESOURCE _ LOADER _ PATH )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   BeanFactoryUtils . beanOfTypeIncludingAncestors ( obtainApplicationContext (  )  ,    GroovyMarkupConfig . class ,    true ,    false )  . getTemplateEngine (  )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "throw   new   context . ApplicationContextException (  (  \" Expected   a   single   GroovyMarkupConfig   bean   in   the   current    \"     +     (  \" Servlet   web   application   context   or   the   parent   root   context :    GroovyMarkupConfigurer   is    \"     +     \" the   usual   implementation .    This   bean   may   have   any   name .  \"  )  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["autodetectMarkupTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupView"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . engine )     !  =    null )  ,     \" No   MarkupTemplateEngine   set \"  )  ;", "try    {", "return   this . engine . createTemplateByPath ( viewUrl )  ;", "}    catch    ( ClassNotFoundException   ex )     {", "Throwable   cause    =     (  ( ex . getCause (  )  )     !  =    null )     ?    ex . getCause (  )     :    ex ;", "throw   new   NestedServletException (  (  (  (  (  \" Could   not   find   class   while   rendering   Groovy   Markup   view   with   name    '  \"     +     ( getUrl (  )  )  )     +     \"  '  :     \"  )     +     ( ex . getMessage (  )  )  )     +     \"  '  \"  )  ,    cause )  ;", "}", "}", "METHOD_END"], "methodName": ["getTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupView"}, {"methodBody": ["METHOD_START", "{", "this . engine    =    engine ;", "}", "METHOD_END"], "methodName": ["setTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupView"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupViewResolver   resolver    =    new   GroovyMarkupViewResolver (  )  ;", "String   cacheKey    =     (  ( String )     ( resolver . getCacheKey (  \" test \"  ,    Locale . US )  )  )  ;", "Assert . assertNotNull ( cacheKey )  ;", "Assert . assertEquals (  \" test _ en _ US \"  ,    cacheKey )  ;", "}", "METHOD_END"], "methodName": ["cacheKey"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupViewResolver   resolver    =    new   GroovyMarkupViewResolver (  )  ;", "Assert . assertEquals ( GroovyMarkupView . class ,    resolver . requiredViewClass (  )  )  ;", "DirectFieldAccessor   viewAccessor    =    new   DirectFieldAccessor ( resolver )  ;", "Class <  ?  >    viewClass    =     (  ( Class <  ?  >  )     ( viewAccessor . getPropertyValue (  \" viewClass \"  )  )  )  ;", "Assert . assertEquals ( GroovyMarkupView . class ,    viewClass )  ;", "}", "METHOD_END"], "methodName": ["viewClass"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    createViewWithUrl (  \" i 1  8 n . tpl \"  )  ;", "assertTrue ( view . checkResource ( Locale . FRENCH )  )  ;", "}", "METHOD_END"], "methodName": ["checkI18nResource"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    createViewWithUrl (  \" i 1  8 n . tpl \"  )  ;", "assertTrue ( view . checkResource ( Locale . CHINESE )  )  ;", "}", "METHOD_END"], "methodName": ["checkI18nResourceMissingLocale"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    createViewWithUrl (  \" missing . tpl \"  )  ;", "assertFalse ( view . checkResource ( Locale . US )  )  ;", "}", "METHOD_END"], "methodName": ["checkMissingResource"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    createViewWithUrl (  \" test . tpl \"  )  ;", "assertTrue ( view . checkResource ( Locale . US )  )  ;", "}", "METHOD_END"], "methodName": ["checkResource"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . GroovyMarkupConfiguration . class )  ;", "ctx . refresh (  )  ;", "GroovyMarkupView   view    =    new   GroovyMarkupView (  )  ;", "view . setUrl ( viewUrl )  ;", "view . setApplicationContext ( ctx )  ;", "view . afterPropertiesSet (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["createViewWithUrl"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    new   GroovyMarkupView (  )  ;", "view . setTemplateEngine ( new    . TestTemplateEngine (  )  )  ;", "view . setApplicationContext ( this . webAppContext )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( view )  ;", "TemplateEngine   engine    =     (  ( TemplateEngine )     ( accessor . getPropertyValue (  \" engine \"  )  )  )  ;", "assertNotNull ( engine )  ;", "assertEquals (  . TestTemplateEngine . class ,    engine . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["customTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    new   GroovyMarkupView (  )  ;", "view . setTemplateEngine ( new    . TestTemplateEngine (  )  )  ;", "view . setApplicationContext ( this . webAppContext )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( view )  ;", "TemplateEngine   engine    =     (  ( TemplateEngine )     ( accessor . getPropertyValue (  \" engine \"  )  )  )  ;", "assertNotNull ( engine )  ;", "assertEquals (  . TestTemplateEngine . class ,    engine . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["detectTemplateEngine"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    new   GroovyMarkupView (  )  ;", "given ( this . webAppContext . getBeansOfType ( GroovyMarkupConfig . class ,    true ,    false )  )  . willReturn ( new   HashMap (  )  )  ;", "view . setUrl (  \" sampleView \"  )  ;", "try    {", "view . setApplicationContext ( this . webAppContext )  ;", "fail (  )  ;", "}    catch    ( ApplicationContextException   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" GroovyMarkupConfig \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["missingGroovyMarkupConfig"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" name \"  ,     \" Spring \"  )  ;", "MockHttpSResponse   response    =    renderViewWithModel (  \" i 1  8 n . tpl \"  ,    model ,    Locale . FRANCE )  ;", "assertEquals (  \"  < p > Bonjour   Spring <  / p >  \"  ,    response . getContentAsString (  )  )  ;", "response    =    renderViewWithModel (  \" i 1  8 n . tpl \"  ,    model ,    Locale . GERMANY )  ;", "assertEquals (  \"  < p > Include   German <  / p >  < p > Hallo   Spring <  / p >  \"  ,    response . getContentAsString (  )  )  ;", "response    =    renderViewWithModel (  \" i 1  8 n . tpl \"  ,    model ,    new   Locale (  \" es \"  )  )  ;", "assertEquals (  \"  < p > Include   Default <  / p >  < p > Hola   Spring <  / p >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderI18nTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "MockHttpSResponse   response    =    renderViewWithModel (  \" content . tpl \"  ,    model ,    Locale . US )  ;", "assertEquals (  \"  < html >  < head >  < title > Layout   example <  / title >  <  / head >  < body >  < p > This   is   the   body <  / p >  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderLayoutTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" name \"  ,     \" Spring \"  )  ;", "MockHttpSResponse   response    =    renderViewWithModel (  \" test . tpl \"  ,    model ,    Locale . US )  ;", "assertThat ( response . getContentAsString (  )  ,    Matchers . containsString (  \"  < h 1  > Hello   Spring <  / h 1  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["renderMarkupTemplate"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "GroovyMarkupView   view    =    createViewWithUrl ( viewUrl )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( locale )  ;", "LocaleContextHolder . setLocale ( locale )  ;", "view . renderMergedTemplateModel ( model ,    request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["renderViewWithModel"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    mock ( WebApplicationContext . class )  ;", "thisContext    =    new   MockServletContext (  )  ;", "thisContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . webAppContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . prettyPrint )     !  =    null )     {", "this . objectMapper . configure ( SerializationFeature . INDENT _ OUTPUT ,    this . prettyPrint )  ;", "}", "}", "METHOD_END"], "methodName": ["configurePrettyPrint"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    filterModel ( model )  ;", "Class <  ?  >    serializationView    =     (  ( Class <  ?  >  )     ( model . get ( JsonView . class . getName (  )  )  )  )  ;", "FilterProvider   filters    =     (  ( FilterProvider )     ( model . get ( FilterProvider . class . getName (  )  )  )  )  ;", "if    (  ( serializationView    !  =    null )     |  |     ( filters    !  =    null )  )     {", "MappingValue   container    =    new   MappingValue ( value )  ;", "if    ( serializationView    !  =    null )     {", "container . setSerializationView ( serializationView )  ;", "}", "if    ( filters    !  =    null )     {", "container . setFilters ( filters )  ;", "}", "value    =    container ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["filterAndWrapModel"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "return   this . encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "return   this . objectMapper ;", "}", "METHOD_END"], "methodName": ["getObjectMapper"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "this . disableCaching    =    disableCaching ;", "}", "METHOD_END"], "methodName": ["setDisableCaching"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( encoding ,     \"  ' encoding '    must   not   be   null \"  )  ;", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "this . objectMapper    =    objectMapper ;", "configurePrettyPt (  )  ;", "}", "METHOD_END"], "methodName": ["setObjectMapper"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "this . prettyPrint    =    prettyPrint ;", "configurePrettyPrint (  )  ;", "}", "METHOD_END"], "methodName": ["setPrettyPrint"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "this . updateContentLength    =    updateContentLength ;", "}", "METHOD_END"], "methodName": ["setUpdateContentLength"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "JsonGenerator   generator    =    this . objectMapper . getFactory (  )  . createGenerator ( stream ,    this . encoding )  ;", "writePrefix ( generator ,    object )  ;", "Class <  ?  >    serializationView    =    null ;", "FilterProvider   filters    =    null ;", "Object   value    =    object ;", "if    ( value   instanceof   MappingValue )     {", "MappingValue   container    =     (  ( MappingValue )     ( value )  )  ;", "value    =    container . getValue (  )  ;", "serializationView    =    container . getSerializationView (  )  ;", "filters    =    container . getFilters (  )  ;", "}", "if    ( serializationView    !  =    null )     {", "this . objectMapper . writerWithView ( serializationView )  . writeValue ( generator ,    value )  ;", "} else", "if    ( filters    !  =    null )     {", "this . objectMapper . writer ( filters )  . writeValue ( generator ,    value )  ;", "} else    {", "this . objectMapper . writeValue ( generator ,    value )  ;", "}", "writeSuffix ( generator ,    object )  ;", "generator . flush (  )  ;", "}", "METHOD_END"], "methodName": ["writeContent"], "fileName": "org.springframework.web.servlet.view.json.AbstractJackson2View"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . jsonpParameterNames )     !  =    null )     {", "for    ( String   name    :    this . jsonpParameterNames )     {", "String   value    =    request . getParameter ( name )  ;", "if    ( StringUtils . isEmpty ( value )  )     {", "continue ;", "}", "if    (  !  ( isValidJsonpQueryParam ( value )  )  )     {", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Ignoring   invalid   jsonp   parameter   value :     \"     +    value )  )  ;", "}", "continue ;", "}", "return   value ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getJsonpParameterValue"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "return   this . modelKeys ;", "}", "METHOD_END"], "methodName": ["getModelKeys"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "return   MappingJackson 2 JsonView . CALLBACK _ PARAM _ PATTERN . matcher ( value )  . matches (  )  ;", "}", "METHOD_END"], "methodName": ["isValidJsonpQueryParam"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "this . extractValueFromSingleKeyModel    =    extractValueFromSingleKeyModel ;", "}", "METHOD_END"], "methodName": ["setExtractValueFromSingleKeyModel"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "this . jsonPrefix    =    jsonPrefix ;", "}", "METHOD_END"], "methodName": ["setJsonPrefix"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "this . jsonpParameterNames    =    jsonpParameterNames ;", "}", "METHOD_END"], "methodName": ["setJsonpParameterNames"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "this . modelKeys    =    modelKeys ;", "}", "METHOD_END"], "methodName": ["setModelKeys"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "this . jsonPrefix    =     ( prefixJson )     ?     \"  )  ]  }  '  ,     \"     :    null ;", "}", "METHOD_END"], "methodName": ["setPrefixJson"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView"}, {"methodBody": ["METHOD_START", "{", "view . setExtractValueFromSingleKeyModel ( true )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", ". TestBeanSimple   bean    =    new    . TestBeanSimple (  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "Object   actual    =    view . filterModel ( model )  ;", "assertSame ( bean ,    actual )  ;", "}", "METHOD_END"], "methodName": ["filterSingleKeyModel"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setExtractValueFromSingleKeyModel ( true )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", ". TestBeanSimple   bean 1     =    new    . TestBeanSimple (  )  ;", ". TestBeanSimple   bean 2     =    new    . TestBeanSimple (  )  ;", "model . put (  \" foo 1  \"  ,    bean 1  )  ;", "model . put (  \" foo 2  \"  ,    bean 2  )  ;", "Object   actual    =    view . filterModel ( model )  ;", "assertTrue (  ( actual   instanceof   Map )  )  ;", "assertSame ( bean 1  ,     (  ( Map )     ( actual )  )  . get (  \" foo 1  \"  )  )  ;", "assertSame ( bean 2  ,     (  ( Map )     ( actual )  )  . get (  \" foo 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["filterTwoKeyModel"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Must   not   expose   path   variables \"  ,    false ,    view . isExposePathVariables (  )  )  ;", "}", "METHOD_END"], "methodName": ["isExposePathVars"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setDisableCaching ( false )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "view . render ( model ,    request ,    response )  ;", "assertNull ( response . getHeader (  \" Cache - Control \"  )  )  ;", "}", "METHOD_END"], "methodName": ["renderCaching"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Set < String >    attrs    =    new   HashSet <  >  (  )  ;", "attrs . add (  \" foo \"  )  ;", "attrs . add (  \" baz \"  )  ;", "attrs . add (  \" nil \"  )  ;", "setModelKeys ( attrs )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" foo \"  )  ;", "model . put (  \" bar \"  ,     \" bar \"  )  ;", "model . put (  \" baz \"  ,     \" baz \"  )  ;", "render ( model ,    request ,    response )  ;", "String   result    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( result . length (  )  )     >     0  )  )  ;", "assertTrue ( result . contains (  \"  \\  \" foo \\  \"  :  \\  \" foo \\  \"  \"  )  )  ;", "assertTrue ( result . contains (  \"  \\  \" baz \\  \"  :  \\  \" baz \\  \"  \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderOnlyIncludedAttributes"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 JsonViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  (  ( response . getContentAsString (  )  . length (  )  )     >     0  )  )  ;", "assertEquals ( response . getContentAsString (  )  . length (  )  ,    response . getContentLength (  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBean"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setPrefixJson ( false )  ;", "renderSimpleBean (  )  ;", "assertFalse ( response . getContentAsString (  )  . startsWith (  \"  )  ]  }  '  ,     \"  )  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBeanNotPrefixed"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setPrefixJson ( true )  ;", "renderSimpleBean (  )  ;", "assertTrue ( response . getContentAsString (  )  . startsWith (  \"  )  ]  }  '  ,     \"  )  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBeanPrefixed"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "MappingJackson 2 JsonViewTests . TestSimpleBeanFiltered   bean    =    new   MappingJackson 2 JsonViewTests . TestSimpleBeanFiltered (  )  ;", "bean . setProperty 1  (  \" value \"  )  ;", "bean . setProperty 2  (  \" value \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "FilterProvider   filters    =    new   SimpleFilterProvider (  )  . addFilter (  \" myJacksonFilter \"  ,    SimpleBeanPropertyFilter . serializeAllExcept (  \" property 2  \"  )  )  ;", "model . put ( FilterProvider . class . getName (  )  ,    filters )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "String   content    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( content . length (  )  )     >     0  )  )  ;", "assertEquals ( content . length (  )  ,    response . getContentLength (  )  )  ;", "assertThat ( content ,    containsString (  \"  \\  \" property 1  \\  \"  :  \\  \" value \\  \"  \"  )  )  ;", "assertThat ( content ,    not ( containsString (  \"  \\  \" property 2  \\  \"  :  \\  \" value \\  \"  \"  )  )  )  ;", "assertFalse ( content . contains ( FilterProvider . class . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBeanWithFilters"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 JsonViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "model . put ( JsonView . class . getName (  )  ,    MappingJackson 2 JsonViewTests . MyJacksonView 1  . class )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "String   content    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( content . length (  )  )     >     0  )  )  ;", "assertEquals ( content . length (  )  ,    response . getContentLength (  )  )  ;", "assertTrue ( content . contains (  \" foo \"  )  )  ;", "assertFalse ( content . contains (  \" boo \"  )  )  ;", "assertFalse ( content . contains ( JsonView . class . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBeanWithJsonView"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" no - store \"  ,    response . getHeader (  \" Cache - Control \"  )  )  ;", "assertEquals (  . DEFAULT _ CONTENT _ TYPE ,    response . getContentType (  )  )  ;", "String   jsonResult    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( jsonResult . length (  )  )     >     0  )  )  ;", "assertEquals ( jsonResult . length (  )  ,    response . getContentLength (  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleMap"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setPrefixJson ( true )  ;", "renderSimpleMap (  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleMapPrefixed"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 JsonViewTests . TestBeanSimpleAnnotated (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  (  ( response . getContentAsString (  )  . length (  )  )     >     0  )  )  ;", "assertEquals (  \"  {  \\  \" foo \\  \"  :  {  \\  \" testBeanSimple \\  \"  :  \\  \" custom \\  \"  }  }  \"  ,    response . getContentAsString (  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderWithCustomSerializerLocatedByAnnotation"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "SerializerFactory   factory    =    new   MappingJackson 2 JsonViewTests . DelegatingSerializerFactory ( null )  ;", "ObjectMapper   mapper    =    new   ObjectMapper (  )  ;", "mapper . setSerializerFactory ( factory )  ;", "view . setObjectMapper ( mapper )  ;", "Object   bean    =    new   MappingJackson 2 JsonViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "model . put (  \" bar \"  ,    new   MappingJackson 2 JsonViewTests . TestChildBean (  )  )  ;", "view . render ( model ,    request ,    response )  ;", "String   result    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( result . length (  )  )     >     0  )  )  ;", "assertTrue ( result . contains (  \"  \\  \" foo \\  \"  :  {  \\  \" testBeanSimple \\  \"  :  \\  \" custom \\  \"  }  \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderWithCustomSerializerLocatedByFactory"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "testJsonp (  \" jsonp \"  ,     \" callback \"  ,    true )  ;", "testJsonp (  \" jsonp \"  ,     \"  _ callback \"  ,    true )  ;", "testJsonp (  \" jsonp \"  ,     \"  _ Call . bAcK \"  ,    true )  ;", "testJsonp (  \" jsonp \"  ,     \"  0  1  2  3  4  5  6  7  8  9 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ _  .  \"  ,    true )  ;", "testJsonp (  \" jsonp \"  ,     \"  < script >  \"  ,    false )  ;", "testJsonp (  \" jsonp \"  ,     \"  ! foo ! bar \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["renderWithJsonp"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "ModelMap   model    =    new   ModelMap (  \" foo \"  ,    new   MappingJackson 2 JsonViewTests . TestBeanSimple (  )  )  ;", "view . setPrettyPrint ( true )  ;", "view . render ( model ,    request ,    response )  ;", "String   result    =    response . getContentAsString (  )  . replace (  \"  \\ r \\ n \"  ,     \"  \\ n \"  )  ;", "assertTrue (  (  \" Pretty   printing   not   applied :  \\ n \"     +    result )  ,    result . startsWith (  \"  {  \\ n       \\  \" foo \\  \"     :     {  \\ n             \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderWithPrettyPrint"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "render ( model ,    request ,    response )  ;", "assertEquals (  \" application / json \"  ,    response . getContentType (  )  )  ;", "request . setAttribute ( View . SELECTED _ CONTENT _ TYPE ,    new   MediaType (  \" application \"  ,     \" vnd . example - v 2  + xml \"  )  )  ;", "render ( model ,    request ,    response )  ;", "assertEquals (  \" application / vnd . example - v 2  + xml \"  ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderWithSelectedContentType"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "request    =    new   MockHttpServletRequest (  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "jsContext    =    ContextFactory . getGlobal (  )  . enterContext (  )  ;", "jsScope    =    jsContext . initStandardObjects (  )  ;", "view    =    new    (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "this . request    =    new   MockHttpSRequest (  )  ;", "this . request . addParameter (  \" otherparam \"  ,     \" value \"  )  ;", "this . request . addParameter ( paramName ,    paramValue )  ;", "this . response    =    new   MockHttpSResponse (  )  ;", "this . view . render ( model ,    this . request ,    this . response )  ;", "String   content    =    this . response . getContentAsString (  )  ;", "if    ( validValue )     {", "assertEquals (  (  (  \"  /  *  *  /  \"     +    paramValue )     +     \"  (  {  \\  \" foo \\  \"  :  \\  \" bar \\  \"  }  )  ;  \"  )  ,    content )  ;", "} else    {", "assertEquals (  \"  {  \\  \" foo \\  \"  :  \\  \" bar \\  \"  }  \"  ,    content )  ;", "}", "}", "METHOD_END"], "methodName": ["testJsonp"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "String    =    response . getContentAsString (  )  ;", "DirectFieldAccessor   viewAccessor    =    new   DirectFieldAccessor ( view )  ;", "String   refix    =     (  ( String )     ( viewAccessor . getPropertyValue (  \" refix \"  )  )  )  ;", "if    ( refix    !  =    null )     {", "=    substring (  5  )  ;", "}", "Object   jsResult    =    jsContext . evaluateString ( jsScope ,     (  (  \"  (  \"     +        +     \"  )  \"  )  ,     \" JSON   Stream \"  ,     1  ,    null )  ;", "assertNotNull (  \" Json   Result   did   not   eval   as   valid   JavaScript \"  ,    jsResult )  ;", "assertEquals (  \" application /  ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateResult"], "fileName": "org.springframework.web.servlet.view.json.MappingJackson2JsonViewTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . ScriptTemplatingConfiguration . class )  ;", "ctx . refresh (  )  ;", "ScriptTemplateView   view    =    new   ScriptTemplateView (  )  ;", "view . setApplicationContext ( ctx )  ;", "view . setUrl ( viewUrl )  ;", "view . afterPropertiesSet (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["createViewWithUrl"], "fileName": "org.springframework.web.servlet.view.script.JRubyScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateView   view    =    createViewWithUrl ( viewUrl )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "view . renderMergedOutputModel ( model ,    request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.script.JRubyScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" title \"  ,     \" Layout   example \"  )  ;", "model . put (  \" body \"  ,     \" This   is   the   body \"  )  ;", "String   url    =     \" org /  / web / servlet / view / script / jruby / template . erb \"  ;", "MockHttpServletResponse   response    =    render ( url ,    model )  ;", "assertEquals (  \"  < html >  < head >  < title > Layout   example <  / title >  <  / head >  < body >  < p > This   is   the   body <  / p >  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplate"], "fileName": "org.springframework.web.servlet.view.script.JRubyScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    mock ( WebApplicationContext . class )  ;", "thisContext    =    new   MockServletContext (  )  ;", "thisContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . webAppContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.script.JRubyScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . ScriptTemplatingConfiguration . class )  ;", "ctx . refresh (  )  ;", "ScriptTemplateView   view    =    new   ScriptTemplateView (  )  ;", "view . setApplicationContext ( ctx )  ;", "view . setUrl ( viewUrl )  ;", "view . afterPropertiesSet (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["createViewWithUrl"], "fileName": "org.springframework.web.servlet.view.script.JythonScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateView   view    =    createViewWithUrl ( viewUrl )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "view . renderMergedOutputModel ( model ,    request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.script.JythonScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" title \"  ,     \" Layout   example \"  )  ;", "model . put (  \" body \"  ,     \" This   is   the   body \"  )  ;", "String   url    =     \" org /  / web / servlet / view / script / jython / template . html \"  ;", "MockHttpServletResponse   response    =    render ( url ,    model )  ;", "assertEquals (  \"  < html >  < head >  < title > Layout   example <  / title >  <  / head >  < body >  < p > This   is   the   body <  / p >  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplate"], "fileName": "org.springframework.web.servlet.view.script.JythonScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    mock ( WebApplicationContext . class )  ;", "thisContext    =    new   MockServletContext (  )  ;", "thisContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . webAppContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.script.JythonScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( configuration )  ;", "ctx . refresh (  )  ;", "View   view    =    new   View (  )  ;", "view . setApplicationContext ( ctx )  ;", "view . setUrl ( viewUrl )  ;", "view . afterPropertiesSet (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["createViewWithUrl"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateView   view    =    createViewWithUrl ( viewUrl ,    configuration )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . addPreferredLocale ( locale )  ;", "view . renderMergedOutputModel ( model ,    request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" Foo \"  )  ;", "String   url    =     \" org / springframework / web / servlet / view / script / kotlin / template . kts \"  ;", "MockHttpServletResponse   response    =    render ( url ,    model ,    Locale . ENGLISH ,     . ScriptTemplatingConfiguration . class )  ;", "assertEquals (  \"  < html >  < body >  \\ n < p > Hello   Foo <  / p >  \\ n <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplateWithEnglishLocale"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" Foo \"  )  ;", "String   url    =     \" org / springframework / web / servlet / view / script / kotlin / template . kts \"  ;", "MockHttpServletResponse   response    =    render ( url ,    model ,    Locale . FRENCH ,     . ScriptTemplatingConfiguration . class )  ;", "assertEquals (  \"  < html >  < body >  \\ n < p > Bonjour   Foo <  / p >  \\ n <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplateWithFrenchLocale"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" header \"  ,     \"  < html >  < body >  \"  )  ;", "model . put (  \" hello \"  ,     \" Hello \"  )  ;", "model . put (  \" foo \"  ,     \" Foo \"  )  ;", "model . put (  \" footer \"  ,     \"  <  / body >  <  / html >  \"  )  ;", "MockHttpServletResponse   response    =    render (  \" org / springframework / web / servlet / view / script / kotlin / eval . kts \"  ,    model ,    Locale . ENGLISH ,     . ScriptTemplatingConfigurationWithoutRenderFunction . class )  ;", "assertEquals (  \"  < html >  < body >  \\ n < p > Hello   Foo <  / p >  \\ n <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplateWithoutRenderFunction"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    mock ( WebApplicationContext . class )  ;", "thisContext    =    new   MockServletContext (  )  ;", "thisContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . webAppContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.script.KotlinScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( configuration )  ;", "ctx . refresh (  )  ;", "View   view    =    new   View (  )  ;", "view . setApplicationContext ( ctx )  ;", "view . setUrl ( viewUrl )  ;", "view . afterPropertiesSet (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["createViewWithUrl"], "fileName": "org.springframework.web.servlet.view.script.NashornScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateView   view    =    createViewWithUrl ( viewUrl ,    configuration )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "view . renderMergedOutputModel ( model ,    request ,    response )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.script.NashornScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" title \"  ,     \" Layout   example \"  )  ;", "model . put (  \" body \"  ,     \" This   is   the   body \"  )  ;", "String   url    =     \" org / springframework / web / servlet / view / script / nashorn / template . html \"  ;", "MockHttpServletResponse   response    =    render ( url ,    model ,     . ScriptTemplatingConfiguration . class )  ;", "assertEquals (  \"  < html >  < head >  < title > Layout   example <  / title >  <  / head >  < body >  < p > This   is   the   body <  / p >  <  / body >  <  / html >  \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplate"], "fileName": "org.springframework.web.servlet.view.script.NashornScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "String   url    =     \" org / springframework / web / servlet / view / script / nashorn / template . html \"  ;", "MockHttpServletResponse   response    =    render ( url ,    null ,     . ScriptTemplatingWithUrlConfiguration . class )  ;", "assertEquals (  (  (  \"  < html >  < head >  < title > Check   url   parameter <  / title >  <  / head >  < body >  < p >  \"     +    url )     +     \"  <  / p >  <  / body >  <  / html >  \"  )  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderTemplateWithUrl"], "fileName": "org.springframework.web.servlet.view.script.NashornScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "this . webAppContext    =    mock ( WebApplicationContext . class )  ;", "thisContext    =    new   MockServletContext (  )  ;", "thisContext . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . webAppContext )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.script.NashornScriptTemplateTests"}, {"methodBody": ["METHOD_START", "{", "return   this . applicationContext ;", "}", "METHOD_END"], "methodName": ["getApplicationContext"], "fileName": "org.springframework.web.servlet.view.script.RenderingContext"}, {"methodBody": ["METHOD_START", "{", "return   this . locale ;", "}", "METHOD_END"], "methodName": ["getLocale"], "fileName": "org.springframework.web.servlet.view.script.RenderingContext"}, {"methodBody": ["METHOD_START", "{", "return   this . templateLoader ;", "}", "METHOD_END"], "methodName": ["getTemplateLoader"], "fileName": "org.springframework.web.servlet.view.script.RenderingContext"}, {"methodBody": ["METHOD_START", "{", "return   this . url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.springframework.web.servlet.view.script.RenderingContext"}, {"methodBody": ["METHOD_START", "{", "this . charset    =    charset ;", "}", "METHOD_END"], "methodName": ["setCharset"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . contentType    =    contentType ;", "}", "METHOD_END"], "methodName": ["setContentType"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . engine    =    engine ;", "}", "METHOD_END"], "methodName": ["setEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . engineName    =    engineName ;", "}", "METHOD_END"], "methodName": ["setEngineName"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . renderFunction    =    renderFunction ;", "}", "METHOD_END"], "methodName": ["setRenderFunction"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . renderObject    =    renderObject ;", "}", "METHOD_END"], "methodName": ["setRenderObject"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . resourceLoaderPath    =    resourceLoaderPath ;", "}", "METHOD_END"], "methodName": ["setResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . scripts    =    scriptNames ;", "}", "METHOD_END"], "methodName": ["setScripts"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . sharedEngine    =    sharedEngine ;", "}", "METHOD_END"], "methodName": ["setSharedEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   BeanFactoryUtils . beanOfTypeIncludingAncestors ( obtainApplicationContext (  )  ,    ScriptTemplateConfig . class ,    true ,    false )  ;", "}    catch    ( NoSuchBeanDefinitionException   ex )     {", "throw   new   context . ApplicationContextException (  (  \" Expected   a   single   ScriptTemplateConfig   bean   in   the   current    \"     +     (  \" Servlet   web   application   context   or   the   parent   root   context :    ScriptTemplateConfigurer   is    \"     +     \" the   usual   implementation .    This   bean   may   have   any   name .  \"  )  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["autodetectViewConfig"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "ScriptEngineManager   scriptEngineManager    =    this . scriptEngineManager ;", "if    ( scriptEngineManager    =  =    null )     {", "scriptEngineManager    =    new   ScriptEngineManager ( obtainApplicationContext (  )  . getClassLoader (  )  )  ;", "this . scriptEngineManager    =    scriptEngineManager ;", "}", "ScriptEngine   engine    =    StandardScriptUtils . retrieveEngineByName ( scriptEngineManager ,    engineName )  ;", "loadScripts ( engine )  ;", "return   engine ;", "}", "METHOD_END"], "methodName": ["createEngineFromName"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "if    ( Boolean . FALSE . equals ( this . sharedEngine )  )     {", "Map < Object ,    ScriptEngine >    engines    =     . enginesHolder . get (  )  ;", "if    ( engines    =  =    null )     {", "engines    =    new   HashMap <  >  (  4  )  ;", ". enginesHolder . set ( engines )  ;", "}", "Assert . state (  (  ( this . engineName )     !  =    null )  ,     \" No   engine   name   specified \"  )  ;", "Object   engineKey    =     (  !  ( ObjectUtils . isEmpty ( this . scripts )  )  )     ?    new    . EngineKey ( this . engineName ,    this . scripts )     :    this . engineName ;", "ScriptEngine   engine    =    engines . get ( engineKey )  ;", "if    ( engine    =  =    null )     {", "engine    =    createEngineFromName ( engineName )  ;", "engines . put ( engineKey ,    engine )  ;", "}", "return   engine ;", "} else    {", "Assert . state (  (  ( this . engine )     !  =    null )  ,     \" No   shared   engine   available \"  )  ;", "return   this . engine ;", "}", "}", "METHOD_END"], "methodName": ["getEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . resourceLoaderPaths )     !  =    null )     {", "for    ( St   path    :    this . resourceLoaderPaths )     {", "Resource   resource    =    obtainApplicationContext (  )  . getResource (  ( path    +    location )  )  ;", "if    ( resource . exists (  )  )     {", "return   resource ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    getResource ( path )  ;", "if    ( resource    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \"    resource    [  \"     +    path )     +     \"  ]    not   found \"  )  )  ;", "}", "InputStreamReader   reader    =     (  ( this . charset )     !  =    null )     ?    new   InputStreamReader ( resource . getInputStream (  )  ,    this . charset )     :    new   InputStreamReader ( resource . getInputStream (  )  )  ;", "return   FileCopyUtils . copyToString ( reader )  ;", "}", "METHOD_END"], "methodName": ["getTemplate"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( ObjectUtils . isEmpty ( this . scripts )  )  )     {", "for    ( String   script    :    this . scripts )     {", "Resource   resource    =    getResource ( script )  ;", "if    ( resource    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Script   resource    [  \"     +    script )     +     \"  ]    not   found \"  )  )  ;", "}", "try    {", "engine . eval ( new   InputStreamReader ( resource . getInputStream (  )  )  )  ;", "}    catch    ( Throwable   ex )     {", "throw   new   IllegalStateException (  (  (  \" Failed   to   evaluate   script    [  \"     +    script )     +     \"  ]  \"  )  ,    ex )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["loadScripts"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . charset    =    charset ;", "}", "METHOD_END"], "methodName": ["setCharset"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . engine    =    engine ;", "}", "METHOD_END"], "methodName": ["setEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . engineName    =    engineName ;", "}", "METHOD_END"], "methodName": ["setEngineName"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . renderFunction    =    functionName ;", "}", "METHOD_END"], "methodName": ["setRenderFunction"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . renderObject    =    renderObject ;", "}", "METHOD_END"], "methodName": ["setRenderObject"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "String [  ]    paths    =    StringUtils . commaDelimitedListToStringArray ( resourceLoaderPath )  ;", "this . resourceLoaderPaths    =    new   String [  ( paths . length )     +     1  ]  ;", "this . resourceLoaderPaths [  0  ]     =     \"  \"  ;", "for    ( int   i    =     0  ;    i    <     ( paths . length )  ;    i +  +  )     {", "String   path    =    paths [ i ]  ;", "if    (  (  !  ( path . endsWith (  \"  /  \"  )  )  )     &  &     (  !  ( path . endsWith (  \"  :  \"  )  )  )  )     {", "path    =    path    +     \"  /  \"  ;", "}", "this . resourceLoaderPaths [  ( i    +     1  )  ]     =    path ;", "}", "}", "METHOD_END"], "methodName": ["setResourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . scripts    =    scripts ;", "}", "METHOD_END"], "methodName": ["setScripts"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "this . sharedEngine    =    sharedEngine ;", "}", "METHOD_END"], "methodName": ["setSharedEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateView"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateViewResolver   resolver    =    new   ScriptTemplateViewResolver (  )  ;", "Assert . assertEquals ( ScriptTemplateView . class ,    resolver . requiredViewClass (  )  )  ;", "DirectFieldAccessor   viewAccessor    =    new   DirectFieldAccessor ( resolver )  ;", "Class <  ?  >    viewClass    =     (  ( Class <  ?  >  )     ( viewAccessor . getPropertyValue (  \" viewClass \"  )  )  )  ;", "Assert . assertEquals ( ScriptTemplateView . class ,    viewClass )  ;", "}", "METHOD_END"], "methodName": ["viewClass"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "this . wac . setServletContext ( servletContext )  ;", "this . wac . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . wac )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "this . view . setEngine ( mock (  . InvocableScriptEngine . class )  )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . view . setResourceLoaderPath (  \" classpath : org / springframework / web / servlet / view / script /  \"  )  ;", "this . view . setUrl (  \" empty . txt \"  )  ;", "this . view . setApplicationContext ( this . wac )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  (  (  ( MediaType . TEXT _ HTML _ VALUE )     +     \"  ; charset =  \"  )     +     ( StandardCharsets . UTF _  8  )  )  ,    response . getHeader ( CONTENT _ TYPE )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "this . view . setContentType ( TEXT _ PLAIN _ VALUE )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  (  (  ( MediaType . TEXT _ PLAIN _ VALUE )     +     \"  ; charset =  \"  )     +     ( StandardCharsets . UTF _  8  )  )  ,    response . getHeader ( CONTENT _ TYPE )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "this . view . setCharset ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  (  (  ( MediaType . TEXT _ PLAIN _ VALUE )     +     \"  ; charset =  \"  )     +     ( StandardCharsets . ISO _  8  8  5  9  _  1  )  )  ,    response . getHeader ( CONTENT _ TYPE )  )  ;", "}", "METHOD_END"], "methodName": ["contentType"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "ScriptEngine   engine    =    mock ( ScriptTemplateViewTests . InvocableScriptEngine . class )  ;", "given ( engine . get (  \" key \"  )  )  . willReturn (  \" value \"  )  ;", "this . view . setEngine ( engine )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . view . setApplicationContext ( this . wac )  ;", "engine    =    this . view . getEngine (  )  ;", "assertNotNull ( engine )  ;", "assertEquals (  \" value \"  ,    engine . get (  \" key \"  )  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( this . view )  ;", "assertNull ( accessor . getPropertyValue (  \" renderObject \"  )  )  ;", "assertEquals (  \" render \"  ,    accessor . getPropertyValue (  \" renderFunction \"  )  )  ;", "assertEquals ( StandardCharsets . UTF _  8  ,    accessor . getPropertyValue (  \" charset \"  )  )  ;", "}", "METHOD_END"], "methodName": ["customEngineAndRenderFunction"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "ScriptTemplateViewTests . InvocableScriptEngine   engine    =    mock ( ScriptTemplateViewTests . InvocableScriptEngine . class )  ;", "this . configurer . setEngine ( engine )  ;", "this . configurer . setRenderObject (  \" Template \"  )  ;", "this . configurer . setRenderFunction (  \" render \"  )  ;", "this . configurer . setContentType ( TEXT _ PLAIN _ VALUE )  ;", "this . configurer . setCharset ( StandardCharsets . ISO _  8  8  5  9  _  1  )  ;", "this . configurer . setSharedEngine ( true )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( this . view )  ;", "this . view . setApplicationContext ( this . wac )  ;", "assertEquals ( engine ,    accessor . getPropertyValue (  \" engine \"  )  )  ;", "assertEquals (  \" Template \"  ,    accessor . getPropertyValue (  \" renderObject \"  )  )  ;", "assertEquals (  \" render \"  ,    accessor . getPropertyValue (  \" renderFunction \"  )  )  ;", "assertEquals ( TEXT _ PLAIN _ VALUE ,    accessor . getPropertyValue (  \" contentType \"  )  )  ;", "assertEquals ( StandardCharsets . ISO _  8  8  5  9  _  1  ,    accessor . getPropertyValue (  \" charset \"  )  )  ;", "assertEquals ( true ,    accessor . getPropertyValue (  \" sharedEngine \"  )  )  ;", "}", "METHOD_END"], "methodName": ["detectScriptTemplateConfigWithEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer . setEngineName (  \" nashorn \"  )  ;", "this . configurer . setRenderObject (  \"  \"  )  ;", "this . configurer . setRenderFunction (  \" render \"  )  ;", "DirectFieldAccessor   accessor    =    new   DirectFieldAccessor ( this . view )  ;", "this . view . setApplicationContext ( this . wac )  ;", "assertEquals (  \" nashorn \"  ,    accessor . getPropertyValue (  \" engineName \"  )  )  ;", "assertNotNull ( accessor . getPropertyValue (  \" engine \"  )  )  ;", "assertEquals (  \"  \"  ,    accessor . getPropertyValue (  \" renderObject \"  )  )  ;", "assertEquals (  \" render \"  ,    accessor . getPropertyValue (  \" renderFunction \"  )  )  ;", "assertEquals ( TEXT _ HTML _ VALUE ,    accessor . getPropertyValue (  \" contentType \"  )  )  ;", "assertEquals ( StandardCharsets . UTF _  8  ,    accessor . getPropertyValue (  \" charset \"  )  )  ;", "}", "METHOD_END"], "methodName": ["detectScriptTemplateConfigWithEngineName"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . view . setEngine ( mock ( ScriptTemplateViewTests . InvocableScriptEngine . class )  )  ;", "this . view . setEngineName (  \" test \"  )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . expectedException . expect ( IllegalArgumentException . class )  ;", "this . view . setApplicationContext ( this . wac )  ;", "this . expectedException . expectMessage ( contains (  \"  ' engine '    or    ' engineName '  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["engineAndEngineNameBothDefined"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . view . setEngine ( mock ( ScriptTemplateViewTests . InvocableScriptEngine . class )  )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . view . setSharedEngine ( false )  ;", "this . expectedException . expect ( IllegalArgumentException . class )  ;", "this . view . setApplicationContext ( this . wac )  ;", "this . expectedException . expectMessage ( contains (  \" sharedEngine \"  )  )  ;", "}", "METHOD_END"], "methodName": ["engineSetterAndNonSharedEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . expectedException . expect ( ApplicationContextException . class )  ;", "this . view . setApplicationContext ( new   StaticApplicationContext (  )  )  ;", "this . expectedException . expectMessage ( contains (  \" Config \"  )  )  ;", "}", "METHOD_END"], "methodName": ["missingScriptTemplateConfig"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "this . wac . setServletContext ( servletContext )  ;", "this . wac . refresh (  )  ;", "this . view . setResourceLoaderPath (  \" classpath : org / springframework / web / servlet / view / script /  \"  )  ;", "this . view . setUrl (  \" missing . txt \"  )  ;", "this . view . setEngine ( mock (  . InvocableScriptEngine . class )  )  ;", "this . configurer . setRenderFunction (  \" render \"  )  ;", "this . view . setApplicationContext ( this . wac )  ;", "assertFalse ( this . view . checkResource ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["missingTemplate"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . view . setEngine ( mock ( ScriptEngine . class )  )  ;", "this . view . setApplicationContext ( this . wac )  ;", "}", "METHOD_END"], "methodName": ["nonInvocableScriptEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . view . setEngine ( mock ( ScriptEngine . class )  )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . expectedException . expect ( IllegalArgumentException . class )  ;", "this . view . setApplicationContext ( this . wac )  ;", "}", "METHOD_END"], "methodName": ["nonInvocableScriptEngineWithRenderFunction"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "int   iterations    =     2  0  ;", "thisetEngineName (  \" nashorn \"  )  ;", "thisetRenderFunction (  \" render \"  )  ;", "thisetSharedEngine ( false )  ;", "thisetApplicationContext ( this . wac )  ;", "ExecutorService   executor    =    Executors . newFixedThreadPool (  4  )  ;", "List < Future < Boolean >  >    results    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <    iterations ;    i +  +  )     {", "results . add ( executor . submit (  (  )     -  >     ( view . getEngine (  )  )     !  =    null )  )  ;", "}", "assertEquals ( iterations ,    results . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <    iterations ;    i +  +  )     {", "assertTrue ( results . get ( i )  . get (  )  )  ;", "}", "executor . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["nonSharedEngine"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "this . wac . setServletContext ( servletContext )  ;", "this . wac . refresh (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    this . wac )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", ". InvocableScriptEngine   engine    =    mock (  . InvocableScriptEngine . class )  ;", "when ( engine . invokeFunction ( any (  )  ,    any (  )  ,    any (  )  ,    any (  )  )  )  . thenReturn (  \" foo \"  )  ;", "this . view . setEngine ( engine )  ;", "this . view . setRenderFunction (  \" render \"  )  ;", "this . view . setApplicationContext ( this . wac )  ;", "this . view . setUrl (  \" org / springframework / web / servlet / view / script / empty . txt \"  )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  \" foo \"  ,    response . getContentAsString (  )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "this . view . setResourceLoaderPath (  \" classpath : org / springframework / web / servlet / view / script /  \"  )  ;", "this . view . setUrl (  \" empty . txt \"  )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  \" foo \"  ,    response . getContentAsString (  )  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "this . view . setResourceLoaderPath (  \" classpath : org / springframework / web / servlet / view / script \"  )  ;", "this . view . setUrl (  \" empty . txt \"  )  ;", "this . view . render ( model ,    request ,    response )  ;", "assertEquals (  \" foo \"  ,    response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["resourceLoaderPath"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . configurer    =    new   ScriptTemplateConfigurer (  )  ;", "this . wac    =    new   StaticWebApplicationContext (  )  ;", "this . wac . getBeanFactory (  )  . registerSingleton (  \" scriptTemplateConfigurer \"  ,    this . configurer )  ;", "this . view    =    new    (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.web.servlet.view.script.ScriptTemplateViewTests"}, {"methodBody": ["METHOD_START", "{", "this . checkRefresh    =    checkRefresh ;", "}", "METHOD_END"], "methodName": ["setCheckRefresh"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    ( completeAutoload )     {", "try    {", "this . tilesInitializer    =    new    . SpringCompleteAutoloadTilesInitializer (  )  ;", "}    catch    ( Throwable   ex )     {", "throw   new   IllegalStateException (  \" Tiles - Extras    3  .  0    not   available \"  ,    ex )  ;", "}", "} else    {", "this . tilesInitializer    =    null ;", "}", "}", "METHOD_END"], "methodName": ["setCompleteAutoload"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . definitions    =    definitions ;", "}", "METHOD_END"], "methodName": ["setDefinitions"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . definitionsFactoryClass    =    definitionsFactoryClass ;", "}", "METHOD_END"], "methodName": ["setDefinitionsFactoryClass"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . preparerFactoryClass    =    preparerFactoryClass ;", "}", "METHOD_END"], "methodName": ["setPreparerFactoryClass"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . tilesInitializer    =    tilesInitializer ;", "}", "METHOD_END"], "methodName": ["setTilesInitializer"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . useMutableTilesContainer    =    useMutableTilesContainer ;", "}", "METHOD_END"], "methodName": ["setUseMutableTilesContainer"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "this . validateDefinitions    =    validateDefinitions ;", "}", "METHOD_END"], "methodName": ["setValidateDefinitions"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurer"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "tc    =    new    (  )  ;", "tc . setDefinitions (  \"  / org / springframework / web / servlet / view / tiles 3  / tiles - definitions . xml \"  )  ;", "tc . setCheckRefresh ( true )  ;", "tc . setServletContext ( servletContext )  ;", "tc . afterPropertiesSet (  )  ;", "ApplicationContext   tilesContext    =    ServletUtil . getApplicationContext ( servletContext )  ;", "BasicTilesContainer   container    =     (  ( BasicTilesContainer )     ( TilesAccess . getContainer ( tilesContext )  )  )  ;", "Request   requestContext    =    new   ServletRequest ( container . getApplicationContext (  )  ,    new   MockHttpServletRequest (  )  ,    new   MockHttpServletResponse (  )  )  ;", "assertNotNull ( container . getDefinitionsFactory (  )  . getDefinition (  \" test \"  ,    requestContext )  )  ;", "tc . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["simpleBootstrap"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesConfigurerTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ServletRequest ( this . applicationContext ,    request ,    response )     {", "@ Override", "public   Locale   getRequestLocale (  )     {", "return   RequestContextUtils . getLocale ( request )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createTilesRequest"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesView"}, {"methodBody": ["METHOD_START", "{", "this . alwaysInclude    =    alwaysInclude ;", "}", "METHOD_END"], "methodName": ["setAlwaysInclude"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesView"}, {"methodBody": ["METHOD_START", "{", "this . exposeJstlAttributes    =    exposeJstlAttributes ;", "}", "METHOD_END"], "methodName": ["setExposeJstlAttributes"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesView"}, {"methodBody": ["METHOD_START", "{", "this . renderer    =    renderer ;", "}", "METHOD_END"], "methodName": ["setRenderer"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesView"}, {"methodBody": ["METHOD_START", "{", "this . alwaysInclude    =    alwaysInclude ;", "}", "METHOD_END"], "methodName": ["setAlwaysInclude"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . renderer    =    renderer ;", "}", "METHOD_END"], "methodName": ["setRenderer"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewResolver"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( new   MockServletContext (  )  )  ;", "wac . refresh (  )  ;", "this . renderer    =    mock ( Renderer . class )  ;", "this . viewResolver    =    new    (  )  ;", "this . viewResolver . setRenderer ( this . renderer )  ;", "this . viewResolver . setApplicationContext ( wac )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "given ( this . renderer . isRenderable ( eq (  \"  / template . test \"  )  ,    isA ( Request . class )  )  )  . willReturn ( true )  ;", "given ( this . renderer . isRenderable ( eq (  \"  / nonexistent . test \"  )  ,    isA ( Request . class )  )  )  . willReturn ( false )  ;", "assertTrue (  (  ( this . v . resolveViewName (  \"  / template . test \"  ,    Locale . ITALY )  )    instanceof   TilesView )  )  ;", "assertNull ( this . v . resolveViewName (  \"  / nonexistent . test \"  ,    Locale . ITALY )  )  ;", "verify ( this . renderer )  . isRenderable ( eq (  \"  / template . test \"  )  ,    isA ( Request . class )  )  ;", "verify ( this . renderer )  . isRenderable ( eq (  \"  / nonexistent . test \"  )  ,    isA ( Request . class )  )  ;", "}", "METHOD_END"], "methodName": ["testResolve"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "view . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertNull ( request . getAttribute ( FORCE _ INCLUDE _ ATTRIBUTE _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["alwaysIncludeDefaults"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setAlwaysInclude ( true )  ;", "view . render ( new   HashMap (  )  ,    request ,    response )  ;", "assertTrue (  (  ( Boolean )     ( request . getAttribute ( FORCE _ INCLUDE _ ATTRIBUTE _ NAME )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["alwaysIncludeEnabled"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" modelAttribute \"  ,     \" modelValue \"  )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" modelValue \"  ,    request . getAttribute (  \" modelAttribute \"  )  )  ;", "verify ( renderer )  . render ( eq (  . VIEW _ PATH )  ,    isA ( Request . class )  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( servletContext )  ;", "wac . refresh (  )  ;", "request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( DispatcherServlet . WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "renderer    =    mock ( Renderer . class )  ;", "view    =    new   TilesView (  )  ;", "view . setServletContext ( servletContext )  ;", "view . setRenderer ( renderer )  ;", "view . setUrl (  . VIEW _ PATH )  ;", "view . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.tiles3.TilesViewTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Must   not   expose   path   variables \"  ,    false ,    view . isExposePathVariables (  )  )  ;", "}", "METHOD_END"], "methodName": ["isExposePathVars"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setDisableCaching ( false )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "view . render ( model ,    request ,    response )  ;", "assertNull ( response . getHeader (  \" Cache - Control \"  )  )  ;", "}", "METHOD_END"], "methodName": ["renderCaching"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   TreeMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" foo \"  )  ;", "model . put (  \" bar \"  ,     \" bar \"  )  ;", "render ( model ,    request ,    response )  ;", "fail (  )  ;", "}", "METHOD_END"], "methodName": ["renderModelWithMultipleKeys"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "view . setModelKey (  \" bar \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" foo \"  )  ;", "model . put (  \" bar \"  ,     \" bar \"  )  ;", "model . put (  \" baz \"  ,     \" baz \"  )  ;", "view . render ( model ,    request ,    response )  ;", "String   result    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( result . length (  )  )     >     0  )  )  ;", "assertFalse ( result . contains (  \" foo \"  )  )  ;", "assertTrue ( result . contains (  \" bar \"  )  )  ;", "assertFalse ( result . contains (  \" baz \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderOnlySpecifiedModelKey"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 XmlViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  (  ( response . getContentAsString (  )  . length (  )  )     >     0  )  )  ;", "assertEquals ( response . getContentAsString (  )  . length (  )  ,    response . getContentLength (  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBean"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 XmlViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "model . put ( JsonView . class . getName (  )  ,    MappingJackson 2 XmlViewTests . MyJacksonView 1  . class )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "String   content    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( content . length (  )  )     >     0  )  )  ;", "assertEquals ( content . length (  )  ,    response . getContentLength (  )  )  ;", "assertTrue ( content . contains (  \" foo \"  )  )  ;", "assertFalse ( content . contains (  \" boo \"  )  )  ;", "assertFalse ( content . contains ( JsonView . class . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleBeanWithJsonView"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" bindingResult \"  ,    mock ( BindingResult . class ,     \" binding _ result \"  )  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "view . setUpdateContentLength ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" no - store \"  ,    response . getHeader (  \" Cache - Control \"  )  )  ;", "assertEquals (  . DEFAULT _ CONTENT _ TYPE ,    response . getContentType (  )  )  ;", "String   jsonResult    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( jsonResult . length (  )  )     >     0  )  )  ;", "assertEquals ( jsonResult . length (  )  ,    response . getContentLength (  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderSimpleMap"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   bean    =    new   MappingJackson 2 XmlViewTests . TestBeanSimpleAnnotated (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "view . render ( model ,    request ,    response )  ;", "assertTrue (  (  ( response . getContentAsString (  )  . length (  )  )     >     0  )  )  ;", "assertTrue ( response . getContentAsString (  )  . contains (  \"  < testBeanSimple > custom <  / testBeanSimple >  \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderWithCustomSerializerLocatedByAnnotation"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "SerializerFactory   factory    =    new   MappingJackson 2 XmlViewTests . DelegatingSerializerFactory ( null )  ;", "XmlMapper   mapper    =    new   XmlMapper (  )  ;", "mapper . setSerializerFactory ( factory )  ;", "view . setObjectMapper ( mapper )  ;", "Object   bean    =    new   MappingJackson 2 XmlViewTests . TestBeanSimple (  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,    bean )  ;", "view . render ( model ,    request ,    response )  ;", "String   result    =    response . getContentAsString (  )  ;", "assertTrue (  (  ( result . length (  )  )     >     0  )  )  ;", "assertTrue ( result . contains (  \" custom <  / testBeanSimple >  \"  )  )  ;", "validateResult (  )  ;", "}", "METHOD_END"], "methodName": ["renderWithCustomSerializerLocatedByFactory"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" foo \"  ,     \" bar \"  )  ;", "render ( model ,    request ,    response )  ;", "assertEquals (  \" application / xml \"  ,    response . getContentType (  )  )  ;", "request . setAttribute ( View . SELECTED _ CONTENT _ TYPE ,    new   MediaType (  \" application \"  ,     \" vnd . example - v 2  + xml \"  )  )  ;", "render ( model ,    request ,    response )  ;", "assertEquals (  \" application / vnd . example - v 2  + xml \"  ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderWithSelectedContentType"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "request    =    new   MockHttpServletRequest (  )  ;", "response    =    new   MockHttpServletResponse (  )  ;", "jsContext    =    ContextFactory . getGlobal (  )  . enterContext (  )  ;", "jsScope    =    jsContext . initStandardObjects (  )  ;", "view    =    new    (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   xmlResult    =    jsContext . evaluateString ( jsScope ,     (  (  \"  (  \"     +     ( response . getContentAsString (  )  )  )     +     \"  )  \"  )  ,     \" XML   Stream \"  ,     1  ,    null )  ;", "assertNotNull (  \" XML   Result   did   not   eval   as   valid   JavaScript \"  ,    xmlResult )  ;", "assertEquals (  \" application / xml \"  ,    response . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateResult"], "fileName": "org.springframework.web.servlet.view.xml.MappingJackson2XmlViewTests"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . marshaller )     !  =    null )  ,     \" No   Marshaller   set \"  )  ;", "Class <  ?  >    classToCheck    =    value . getClass (  )  ;", "if    ( value   instanceof   JAXBElement )     {", "classToCheck    =     (  ( JAXBElement <  ?  >  )     ( value )  )  . getDeclaredType (  )  ;", "}", "return   this . marshaller . supports ( classToCheck )  ;", "}", "METHOD_END"], "methodName": ["isEligibleForMarshalling"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . modelKey )     !  =    null )     {", "Object   value    =    model . get ( this . modelKey )  ;", "if    ( value    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Model   contains   no   object   with   key    [  \"     +     ( this . modelKey )  )     +     \"  ]  \"  )  )  ;", "}", "if    (  !  ( isEligibleFor ( this . modelKey ,    value )  )  )     {", "throw   new   IllegalStateException (  (  (  (  (  \" Model   object    [  \"     +    value )     +     \"  ]    retrieved   via   key    [  \"  )     +     ( this . modelKey )  )     +     \"  ]    is   not   supported   by   the   Marshaller \"  )  )  ;", "}", "return   value ;", "}", "for    ( Map . Entry < String ,    Object >    entry    :    model . entrySet (  )  )     {", "Object   value    =    entry . getValue (  )  ;", "if    (  (  ( value    !  =    null )     &  &     (  (  ( model . size (  )  )     =  =     1  )     |  |     (  !  ( value   instanceof   BindingResult )  )  )  )     &  &     ( isEligibleFor ( entry . getKey (  )  ,    value )  )  )     {", "return   value ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["locateToBeMarshalled"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingView"}, {"methodBody": ["METHOD_START", "{", "this . marshaller    =    marshaller ;", "}", "METHOD_END"], "methodName": ["setMarshaller"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingView"}, {"methodBody": ["METHOD_START", "{", "this . modelKey    =    modelKey ;", "}", "METHOD_END"], "methodName": ["setModelKey"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingView"}, {"methodBody": ["METHOD_START", "{", "marshallerMock    =    mock ( Marshaller . class )  ;", "view    =    new    ( marshallerMock )  ;", "}", "METHOD_END"], "methodName": ["createView"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Invalid   content   type \"  ,     \" application / xml \"  ,    view . getContentType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Must   not   expose   path   variables \"  ,    false ,    view . isExposePathVariables (  )  )  ;", "}", "METHOD_END"], "methodName": ["isExposePathVars"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Must   not   expose   path   variables \"  ,    false ,    new   MarshallingView (  )  . isExposePathVariables (  )  )  ;", "}", "METHOD_END"], "methodName": ["isExposePathVarsDefaultConstructor"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "view . setModelKey (  \" invalidKey \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "try    {", "view . render ( model ,    request ,    response )  ;", "fail (  \" IllegalStateException   expected \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderInvalidModelKey"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "view . setModelKey ( modelKey )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( Object . class )  )  . willReturn ( true )  ;", "marshallerMock . marshal ( eq ( toBeMarshalled )  ,    isA ( StreamResult . class )  )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content   type \"  ,     \" application / xml \"  ,    response . getContentType (  )  )  ;", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderModelKey"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "view . setModelKey ( modelKey )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( Object . class )  )  . willReturn ( false )  ;", "try    {", "view . render ( model ,    request ,    response )  ;", "fail (  \" IllegalStateException   expected \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["renderModelKeyUnsupported"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "String   toBeMarshalled    =     \" value \"  ;", "String   modelKey    =     \" key \"  ;", "view . setModelKey ( modelKey )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    new   JAXBElement <  >  ( new   QName (  \" model \"  )  ,    String . class ,    toBeMarshalled )  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( String . class )  )  . willReturn ( true )  ;", "marshallerMock . marshal ( eq ( toBeMarshalled )  ,    isA ( StreamResult . class )  )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content   type \"  ,     \" application / xml \"  ,    response . getContentType (  )  )  ;", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderModelKeyWithJaxbElement"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( Object . class )  )  . willReturn ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content   type \"  ,     \" application / xml \"  ,    response . getContentType (  )  )  ;", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "verify ( marshallerMock )  . marshal ( eq ( toBeMarshalled )  ,    isA ( StreamResult . class )  )  ;", "}", "METHOD_END"], "methodName": ["renderNoModelKey"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "Map < String ,    Object >    model    =    new   LinkedHashMap <  >  (  )  ;", "model . put (  (  ( BindingResult . MODEL _ KEY _ PREFIX )     +    modelKey )  ,    new   BeanPropertyBindingResult ( toBeMarshalled ,    modelKey )  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( BeanPropertyBindingResult . class )  )  . willReturn ( true )  ;", "given ( marshallerMock . supports ( Object . class )  )  . willReturn ( true )  ;", "view . render ( model ,    request ,    response )  ;", "assertEquals (  \" Invalid   content   type \"  ,     \" application / xml \"  ,    response . getContentType (  )  )  ;", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "verify ( marshallerMock )  . marshal ( eq ( toBeMarshalled )  ,    isA ( StreamResult . class )  )  ;", "}", "METHOD_END"], "methodName": ["renderNoModelKeyAndBindingResultFirst"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "String   modelKey    =     \" key \"  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    null )  ;", "MockHttpSRequest   request    =    new   MockHttpSRequest (  )  ;", "MockHttpSResponse   response    =    new   MockHttpSResponse (  )  ;", "try    {", "view . render ( model ,    request ,    response )  ;", "fail (  \" IllegalStateException   expected \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "assertEquals (  \" Invalid   content   length \"  ,     0  ,    response . getContentLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderNullModelValue"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "Object   toBeMarshalled    =    new   Object (  )  ;", "String   modelKey    =     \" key \"  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put ( modelKey ,    toBeMarshalled )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "given ( marshallerMock . supports ( Object . class )  )  . willReturn ( false )  ;", "try    {", "view . render ( model ,    request ,    response )  ;", "fail (  \" IllegalStateException   expected \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testRenderUnsupportedModel"], "fileName": "org.springframework.web.servlet.view.xml.MarshallingViewTests"}, {"methodBody": ["METHOD_START", "{", "if    ( source   instanceof   StreamSource )     {", "StreamSource   streamSource    =     (  ( StreamSource )     ( source )  )  ;", "if    (  ( streamSource . getReader (  )  )     !  =    null )     {", "try    {", "streamSource . getReader (  )  . close (  )  ;", "}    catch    ( IOException   ex )     {", "}", "}", "if    (  ( streamSource . getInputStream (  )  )     !  =    null )     {", "try    {", "streamSource . getInputStream (  )  . close (  )  ;", "}    catch    ( IOException   ex )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["closeSourceIfNecessary"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "if    ( this . indent )     {", "TransformerUtils . enableIndent ( transformer )  ;", "} else    {", "TransformerUtils . disableIndent ( transformer )  ;", "}", "}", "METHOD_END"], "methodName": ["configureIndentation"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "String   contentType    =    getContentType (  )  ;", "String   mediaType    =    transformer . getOutputProperty ( OutputKeys . MEDIA _ TYPE )  ;", "String   encoding    =    transformer . getOutputProperty ( OutputKeys . ENCODING )  ;", "if    ( StringUtils . hasText ( mediaType )  )     {", "contentType    =    mediaType ;", "}", "if    ( StringUtils . hasText ( encoding )  )     {", "if    (  ( contentType    !  =    null )     &  &     (  !  ( contentType . toLowerCase (  )  . contains ( CONTENT _ TYPE _ CHARSET _ PREFIX )  )  )  )     {", "contentType    =     ( contentType    +     ( WebUtils . CONTENT _ TYPE _ CHARSET _ PREFIX )  )     +    encoding ;", "}", "}", "response . setContentType ( contentType )  ;", "}", "METHOD_END"], "methodName": ["configureResponse"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "copyModelParameters ( model ,    transformer )  ;", "copyOutputProperties ( transformer )  ;", "configureIndentation ( transformer )  ;", "}", "METHOD_END"], "methodName": ["configureTransformer"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "if    ( source   instanceof   Source )     {", "return    (  ( Source )     ( source )  )  ;", "} else", "if    ( source   instanceof   Document )     {", "return   new   DOMSource (  (  ( Document )     ( source )  )  . getDocumentElement (  )  )  ;", "} else", "if    ( source   instanceof   Node )     {", "return   new   DOMSource (  (  ( Node )     ( source )  )  )  ;", "} else", "if    ( source   instanceof   Reader )     {", "return   new   StreamSource (  (  ( Reader )     ( source )  )  )  ;", "} else", "if    ( source   instanceof   InputStream )     {", "return   new   StreamSource (  (  ( InputStream )     ( source )  )  )  ;", "} else", "if    ( source   instanceof   core . io . Resource )     {", "core . io . Resource   resource    =     (  ( core . io . Resource )     ( source )  )  ;", "return   new   StreamSource ( resource . getInputStream (  )  ,    resource . getURI (  )  . toASCIIString (  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  \" Value    '  \"     +    source )     +     \"  '    cannot   be   converted   to   XSLT   Source \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["convertSource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "model . forEach ( transformer :  : setParameter )  ;", "}", "METHOD_END"], "methodName": ["copyModelParameters"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . outputProperties )     !  =    null )     {", "Enumeration <  ?  >    en    =    this . outputProperties . propertyNames (  )  ;", "while    ( en . hasMoreElements (  )  )     {", "St   name    =     (  ( St )     ( en . nextElement (  )  )  )  ;", "transformer . setOutputProperty ( name ,    this . outputProperties . getProperty ( name )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["copyOutputProperties"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "return   new   StreamResult ( response . getOutputStream (  )  )  ;", "}", "METHOD_END"], "methodName": ["createResult"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "Transformer   transformer    =    templates . newTransformer (  )  ;", "if    (  ( this . uriResolver )     !  =    null )     {", "transformertURIResolver ( this . uriResolver )  ;", "}", "return   transformer ;", "}", "METHOD_END"], "methodName": ["createTransformer"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "return   new   Class <  ?  >  [  ]  {    Source . class ,    Document . class ,    Node . class ,    Reader . class ,    InputStream . class ,    Resource . class    }  ;", "}", "METHOD_END"], "methodName": ["getSourceTypes"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "String   url    =    getUrl (  )  ;", "Assert . state (  ( url    !  =    null )  ,     \"  ' url '    not   set \"  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Loading   XSLT   stylesheet   from    '  \"     +    url )     +     \"  '  \"  )  )  ;", "}", "try    {", "Resource   resource    =    obtainApplicationContext (  )  . getResource ( url )  ;", "return   new   StreamSource ( resource . getInputStream (  )  ,    resource . getURI (  )  . toASCIIString (  )  )  ;", "}    catch    ( IOException   ex )     {", "throw   new   ApplicationContextException (  (  (  \" Can ' t   load   XSLT   stylesheet   from    '  \"     +    url )     +     \"  '  \"  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["getStylesheetSource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . transformerFactory )     !  =    null )  ,     \" No   TransformerFactory   available \"  )  ;", "return   this . transformerFactory ;", "}", "METHOD_END"], "methodName": ["getTransformerFactory"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "Source   stylesheetSource    =    getStylesheetSource (  )  ;", "try    {", "Templates   templates    =    getTransformerFactory (  )  . newTemplates ( stylesheetSource )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Load   templates    '  \"     +    templates )     +     \"  '  \"  )  )  ;", "}", "return   templates ;", "}    catch    ( TransformerConfigurationException   ex )     {", "throw   new   ApplicationContextException (  (  (  \" Can ' t   load   stylesheet   from    '  \"     +     ( getUrl (  )  )  )     +     \"  '  \"  )  ,    ex )  ;", "}    finally    {", "closeSourceIfNecessary ( stylesheetSource )  ;", "}", "}", "METHOD_END"], "methodName": ["loadTemplates"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . sourceKey )     !  =    null )     {", "return   convertSource ( model . get ( this . sourceKey )  )  ;", "}", "Object   source    =    CollectionUtils . findValueOfType ( model . values (  )  ,    getSourceTypes (  )  )  ;", "return   source    !  =    null    ?    convertSource ( source )     :    null ;", "}", "METHOD_END"], "methodName": ["locateSource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "if    ( transformerFactoryClass    !  =    null )     {", "try    {", "return   ReflectionUtils . accessibleConstructor ( transformerFactoryClass )  . newInstance (  )  ;", "}    catch    ( Exception   ex )     {", "throw   new   TransformerFactoryConfigurationError ( ex ,     \" Could   not   instantiate   TransformerFactory \"  )  ;", "}", "} else    {", "return   TransformerFactory . newInstance (  )  ;", "}", "}", "METHOD_END"], "methodName": ["newTransformerFactory"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . cacheTemplates    =    cacheTemplates ;", "}", "METHOD_END"], "methodName": ["setCacheTemplates"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . errorListener    =     ( errorListener    !  =    null )     ?    errorListener    :    new   SimpleTransformErrorListener ( logger )  ;", "}", "METHOD_END"], "methodName": ["setErrorListener"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . indent    =    indent ;", "}", "METHOD_END"], "methodName": ["setIndent"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . outputProperties    =    outputProperties ;", "}", "METHOD_END"], "methodName": ["setOutputProperties"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . sourceKey    =    sourceKey ;", "}", "METHOD_END"], "methodName": ["setSourceKey"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . transformerFactoryClass    =    transformerFactoryClass ;", "}", "METHOD_END"], "methodName": ["setTransformerFactoryClass"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . uriResolver    =    uriResolver ;", "}", "METHOD_END"], "methodName": ["setUriResolver"], "fileName": "org.springframework.web.servlet.view.xslt.XsltView"}, {"methodBody": ["METHOD_START", "{", "this . cacheTemplates    =    cacheTemplates ;", "}", "METHOD_END"], "methodName": ["setCacheTemplates"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . errorListener    =    errorListener ;", "}", "METHOD_END"], "methodName": ["setErrorListener"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . indent    =    indent ;", "}", "METHOD_END"], "methodName": ["setIndent"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . outputProperties    =    outputProperties ;", "}", "METHOD_END"], "methodName": ["setOutputProperties"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . sourceKey    =    sourceKey ;", "}", "METHOD_END"], "methodName": ["setSourceKey"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "this . uriResolver    =    uriResolver ;", "}", "METHOD_END"], "methodName": ["setUriResolver"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolver"}, {"methodBody": ["METHOD_START", "{", "StaticApplicationContext   ctx    =    new   StaticApplicationContext (  )  ;", "String   prefix    =    ClassUtils . classPackageAsResourcePath ( getClass (  )  )  ;", "String   suffix    =     \"  . xsl \"  ;", "String   viewName    =     \" products \"  ;", "viewResolver    =    new    (  )  ;", "viewResolver . setPrefix ( prefix )  ;", "viewResolver . setSuffix ( suffix )  ;", "viewResolver . setApplicationContext ( ctx )  ;", "XsltView   view    =     (  ( XsltView )     ( viewResolver . resolveViewName ( viewName ,    Locale . ENGLISH )  )  )  ;", "assertNotNull (  \" View   should   not   be   null \"  ,    view )  ;", "assertEquals (  \" Incorrect   URL \"  ,     (  ( prefix    +    viewName )     +    suffix )  ,    view . getUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveView"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewResolverTests"}, {"methodBody": ["METHOD_START", "{", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   document    =    reader . read ( new   StReader ( output )  )  ;", "List   nodes    =    document . getRootElement (  )  . selectNodes (  \"  / html / body / table / tr \"  )  ;", "Element   tr 1     =     (  ( Element )     ( nodes . get (  0  )  )  )  ;", "assertRowElement ( tr 1  ,     \"  1  \"  ,     \" Whatsit \"  ,     \"  1  2  .  9  9  \"  )  ;", "Element   tr 2     =     (  ( Element )     ( nodes . get (  1  )  )  )  ;", "assertRowElement ( tr 2  ,     \"  2  \"  ,     \" Thingy \"  ,     \"  1  3  .  9  9  \"  )  ;", "Element   tr 3     =     (  ( Element )     ( nodes . get (  2  )  )  )  ;", "assertRowElement ( tr 3  ,     \"  3  \"  ,     \" Gizmo \"  ,     \"  1  4  .  9  9  \"  )  ;", "Element   tr 4     =     (  ( Element )     ( nodes . get (  3  )  )  )  ;", "assertRowElement ( tr 4  ,     \"  4  \"  ,     \" Cranktoggle \"  ,     \"  1  1  .  9  9  \"  )  ;", "}", "METHOD_END"], "methodName": ["assertHtmlOutput"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "Element   idElem    =     (  ( Element )     ( elem . elements (  )  . get (  0  )  )  )  ;", "Element   nElem    =     (  ( Element )     ( elem . elements (  )  . get (  1  )  )  )  ;", "Element   priceElem    =     (  ( Element )     ( elem . elements (  )  . get (  2  )  )  )  ;", "assertEquals (  \" ID   incorrect .  \"  ,    id ,    idElem . getText (  )  )  ;", "assertEquals (  \" N   incorrect .  \"  ,    n ,    nElem . getText (  )  )  ;", "assertEquals (  \" Price   incorrect .  \"  ,    price ,    priceElem . getText (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertRowElement"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "XsltView   view    =    getXsltView ( XsltViewTests . HTML _ OUTPUT )  ;", "view . render ( model ,    this . request ,    this . response )  ;", "assertHtmlOutput ( this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestWithModel"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   dbf    =    DocumentBuilderFactory . newInstance (  )  ;", "DocumentBuilder   builder    =    dbf . newDocumentBuilder (  )  ;", "Document   document    =    builder . parse ( getProductDataResource (  )  . getInputStream (  )  )  ;", "return   document ;", "}", "METHOD_END"], "methodName": ["getDomDocument"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ClassPathResource (  \" productData . xml \"  ,    getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProductDataResource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "XsltView   view    =    new   XsltView (  )  ;", "view . setUrl ( templatePath )  ;", "view . setApplicationContext ( new   StaticApplicationContext (  )  )  ;", "view . initApplicationContext (  )  ;", "return   view ;", "}", "METHOD_END"], "methodName": ["getXsltView"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "Source   source    =    new   StreamSource ( getProductDataResource (  )  . getInputStream (  )  )  ;", "doWithModel ( Collections . singletonMap (  \" someKey \"  ,    source )  )  ;", "}", "METHOD_END"], "methodName": ["simpleTransformWithSource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "XsltView   view    =    getXsltView ( XsltViewTests . HTML _ OUTPUT )  ;", "Source   source    =    new   StreamSource ( getProductDataResource (  )  . getInputStream (  )  )  ;", "view . render ( Collections . singletonMap (  \" someKey \"  ,    source )  ,    this . request ,    this . response )  ;", "assertTrue ( this . response . getContentType (  )  . startsWith (  \" text / html \"  )  )  ;", "assertEquals (  \" UTF -  8  \"  ,    this . response . getCharacterEncoding (  )  )  ;", "}", "METHOD_END"], "methodName": ["testContentTypeCarriedFromTemplate"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" someKey \"  ,    getProductDataResource (  )  )  ;", "model . put (  \" title \"  ,     \" Product   List \"  )  ;", "doTestWithModel ( model )  ;", "assertTrue (  (  ( this . response . getContentAsString (  )  . indexOf (  \" Product   List \"  )  )     >     (  -  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testModelParametersCarriedAcross"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    getDomDocument (  )  ;", "doWithModel ( Collections . singletonMap (  \" someKey \"  ,    document )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTransformWithDocument"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "doTestWithModel ( Collections . singletonMap (  \" someKey \"  ,    getProductDataResource (  )  . getInputStream (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTransformWithInputStream"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    getDomDocument (  )  ;", "doWithModel ( Collections . singletonMap (  \" someKey \"  ,    document . getDocumentElement (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTransformWithNode"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "doTestWithModel ( Collections . singletonMap (  \" someKey \"  ,    new   InputStreamReader ( getProductDataResource (  )  . getInputStream (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTransformWithReader"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "doTestWithModel ( Collections . singletonMap (  \" someKey \"  ,    getProductDataResource (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTransformWithResource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "XsltView   view    =    getXsltView ( XsltViewTests . HTML _ OUTPUT )  ;", "view . setSourceKey (  \" actualData \"  )  ;", "view . addStaticAttribute (  \" title \"  ,     \" Product   List \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" actualData \"  ,    getProductDataResource (  )  )  ;", "model . put (  \" otherData \"  ,    new   ClassPathResource (  \" dummyData . xsl \"  ,    getClass (  )  )  )  ;", "view . render ( model ,    this . request ,    this . response )  ;", "assertHtmlOutput ( this . response . getContentAsString (  )  )  ;", "assertTrue (  (  ( this . response . getContentAsString (  )  . indexOf (  \" Product   List \"  )  )     >     (  -  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testStaticAttributesCarriedAcross"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "XsltView   view    =    getXsltView ( XsltViewTests . HTML _ OUTPUT )  ;", "view . setSourceKey (  \" actualData \"  )  ;", "Map < String ,    Object >    model    =    new   HashMap <  >  (  )  ;", "model . put (  \" actualData \"  ,    getProductDataResource (  )  )  ;", "model . put (  \" otherData \"  ,    new   ClassPathResource (  \" dummyData . xsl \"  ,    getClass (  )  )  )  ;", "view . render ( model ,    this . request ,    this . response )  ;", "assertHtmlOutput ( this . response . getContentAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWithSourceKey"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "final   XsltView   view    =    getXsltView ( XsltViewTests . HTML _ OUTPUT )  ;", "view . render ( Collections . emptyMap (  )  ,    request ,    response )  ;", "}", "METHOD_END"], "methodName": ["withNoSource"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "final   XsltView   view    =    new   XsltView (  )  ;", "view . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["withoutUrl"], "fileName": "org.springframework.web.servlet.view.xslt.XsltViewTests"}, {"methodBody": ["METHOD_START", "{", "NestedServletException   exception    =    new   NestedServletException (  \" foo \"  )  ;", "assertEquals (  \" foo \"  ,    exception . getMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNestedServletExceptionString"], "fileName": "org.springframework.web.util.NestedServletExceptionTests"}, {"methodBody": ["METHOD_START", "{", "NestedServletException   exception    =    new   NestedServletException (  \" foo \"  ,    null )  ;", "assertEquals (  \" foo \"  ,    exception . getMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNestedServletExceptionStringNullThrowable"], "fileName": "org.springframework.web.util.NestedServletExceptionTests"}, {"methodBody": ["METHOD_START", "{", "Throwable   cause    =    new   RuntimeException (  )  ;", "exception    =    new    (  \" foo \"  ,    cause )  ;", "assertEquals ( NestedExceptionUtils . buildMessage (  \" foo \"  ,    cause )  ,    exception . getMessage (  )  )  ;", "assertEquals ( cause ,    exception . getCause (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNestedServletExceptionStringThrowable"], "fileName": "org.springframework.web.util.NestedServletExceptionTests"}]