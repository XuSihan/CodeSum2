[{"methodBody": ["METHOD_START", "{", "return   this . identifier ;", "}", "METHOD_END"], "methodName": ["getIdentifier"], "fileName": "org.springframework.orm.ObjectOptimisticLockingFailureException"}, {"methodBody": ["METHOD_START", "{", "return    ( this . persistentClass )    instanceof   Class    ?     (  ( Class <  ?  >  )     ( this . persistentClass )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getPersistentClass"], "fileName": "org.springframework.orm.ObjectOptimisticLockingFailureException"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . persistentClass )    instanceof   Class )     {", "return    (  ( Class <  ?  >  )     ( this . persistentClass )  )  . getName (  )  ;", "}", "return    ( this . persistentClass )     !  =    null    ?    this . persistentClass . toSt (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getPersistentClassName"], "fileName": "org.springframework.orm.ObjectOptimisticLockingFailureException"}, {"methodBody": ["METHOD_START", "{", "return   this . identifier ;", "}", "METHOD_END"], "methodName": ["getIdentifier"], "fileName": "org.springframework.orm.ObjectRetrievalFailureException"}, {"methodBody": ["METHOD_START", "{", "return    ( this . persistentClass )    instanceof   Class    ?     (  ( Class <  ?  >  )     ( this . persistentClass )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getPersistentClass"], "fileName": "org.springframework.orm.ObjectRetrievalFailureException"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . persistentClass )    instanceof   Class )     {", "return    (  ( Class <  ?  >  )     ( this . persistentClass )  )  . getName (  )  ;", "}", "return    ( this . persistentClass )     !  =    null    ?    this . persistentClass . toSt (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getPersistentClassName"], "fileName": "org.springframework.orm.ObjectRetrievalFailureException"}, {"methodBody": ["METHOD_START", "{", "return   SessionFactoryUtils . convertHibernateAccessException ( ex )  ;", "}", "METHOD_END"], "methodName": ["convertHibernateAccessException"], "fileName": "org.springframework.orm.hibernate5.HibernateExceptionTranslator"}, {"methodBody": ["METHOD_START", "{", "return    (  ( JDBCException )     ( getCause (  )  )  )  . getSQLException (  )  ;", "}", "METHOD_END"], "methodName": ["getSQLException"], "fileName": "org.springframework.orm.hibernate5.HibernateJdbcException"}, {"methodBody": ["METHOD_START", "{", "return    (  ( JDBCException )     ( getCause (  )  )  )  . getSQL (  )  ;", "}", "METHOD_END"], "methodName": ["getSql"], "fileName": "org.springframework.orm.hibernate5.HibernateJdbcException"}, {"methodBody": ["METHOD_START", "{", "return    (  ( QueryException )     ( getCause (  )  )  )  . getQueryString (  )  ;", "}", "METHOD_END"], "methodName": ["getQueryString"], "fileName": "org.springframework.orm.hibernate5.HibernateQueryException"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   Collection )     {", "queryObject . setPaterList ( paramName ,     (  ( Collection <  ?  >  )     ( value )  )  )  ;", "} else", "if    ( value   instanceof   Object [  ]  )     {", "queryObject . setPaterList ( paramName ,     (  ( Object [  ]  )     ( value )  )  )  ;", "} else    {", "queryObject . setPater ( paramName ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["applyNamedParameterToQuery"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "if    (  ( isCheckWriteOperations (  )  )     &  &     ( SessionFactoryUtils . getFlushMode ( session )  . lessThan ( COMMIT )  )  )     {", "throw   new   InvalidDataAccessApiUsageException (  (  \" Write   operations   are   not   allowed   in   read - only   mode    ( FlushMode . MANUAL )  :     \"     +     \" Turn   your   Session   into   FlushMode . COMMIT / AUTO   or   remove    ' readOnly '    marker   from   transaction   definition .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkWriteOperationAllowed"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Session )     ( Proxy . newProxyInstance ( session . getClass (  )  . getClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Session . class    }  ,    new   HibernateTemplate . CloseSuppressingInvocationHandler ( session )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createSessionProxy"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "String [  ]    filterNames    =    getFilterNames (  )  ;", "if    ( filterNames    !  =    null )     {", "for    ( String   filterName    :    filterNames )     {", "session . disableFilter ( filterName )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["disableFilters"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( action ,     \" Callback   object   must   not   be   null \"  )  ;", "Session   session    =    null ;", "boolean   isNew    =    false ;", "try    {", "session    =    obtainSessionFactory (  )  . getCurrentSession (  )  ;", "}    catch    ( Exception   ex )     {", "logger . debug (  \" Could   not   retrieve   pre - bound      session \"  ,    ex )  ;", "}", "if    ( session    =  =    null )     {", "session    =    obtainSessionFactory (  )  . openSession (  )  ;", "session . setFlushMode ( MANUAL )  ;", "isNew    =    true ;", "}", "try    {", "enableFilters ( session )  ;", "Session   sessionToExpose    =     ( enforceNativeSession    |  |     ( isExposeNativeSession (  )  )  )     ?    session    :    createSessionProxy ( session )  ;", "return   action . doIn ( sessionToExpose )  ;", "}    catch    ( Exception   ex )     {", "throw   SessionFactoryUtils . convertAccessException ( ex )  ;", "}    catch    ( PersistenceException   ex )     {", "if    (  ( ex . getCause (  )  )    instanceof   Exception )     {", "throw   SessionFactoryUtils . convertAccessException (  (  ( Exception )     ( ex . getCause (  )  )  )  )  ;", "}", "throw   ex ;", "}    catch    ( RuntimeException   ex )     {", "throw   ex ;", "}    finally    {", "if    ( isNew )     {", "SessionFactoryUtils . closeSession ( session )  ;", "} else    {", "disableFilters ( session )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["doExecute"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "String [  ]    filterNames    =    getFilterNames (  )  ;", "if    ( filterNames    !  =    null )     {", "for    ( String   filterName    :    filterNames )     {", "session . enableFilter ( filterName )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["enableFilters"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   doExecute ( action ,    true )  ;", "}", "METHOD_END"], "methodName": ["executeWithNativeSession"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . fetchSize ;", "}", "METHOD_END"], "methodName": ["getFetchSize"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . filterNames ;", "}", "METHOD_END"], "methodName": ["getFilterNames"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . maxResults ;", "}", "METHOD_END"], "methodName": ["getMaxResults"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . queryCacheRegion ;", "}", "METHOD_END"], "methodName": ["getQueryCacheRegion"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionFactory ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . cacheQueries ;", "}", "METHOD_END"], "methodName": ["isCacheQueries"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . checkWriteOperations ;", "}", "METHOD_END"], "methodName": ["isCheckWriteOperations"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   this . exposeNativeSession ;", "}", "METHOD_END"], "methodName": ["isExposeNativeSession"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  ( result    !  =    null )  ,     \" No   result \"  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["nonNull"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "SessionFactory   sessionFactory    =    getSessionFactory (  )  ;", "Assert . st (  ( sessionFactory    !  =    null )  ,     \" No   SessionFactory   set \"  )  ;", "return   sessionFactory ;", "}", "METHOD_END"], "methodName": ["obtainSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "if    ( isCacheQueries (  )  )     {", "criteria . setCacheable ( true )  ;", "if    (  ( getQueryCacheRegion (  )  )     !  =    null )     {", "criteria . setCacheRegion ( getQueryCacheRegion (  )  )  ;", "}", "}", "if    (  ( getFetchSize (  )  )     >     0  )     {", "criteria . setFetchSize ( getFetchSize (  )  )  ;", "}", "if    (  ( getMaxResults (  )  )     >     0  )     {", "criteria . setMaxResults ( getMaxResults (  )  )  ;", "}", "SessionHolder   sessionHolder    =     (  ( SessionHolder )     ( TransactionSynchronizationManager . getResource ( obtainSessionFactory (  )  )  )  )  ;", "if    (  ( sessionHolder    !  =    null )     &  &     ( sessionHolder . hasTimeout (  )  )  )     {", "criteria . setTimeout ( sessionHolder . getTimeToLiveInSeconds (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareCriteria"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "if    ( isCacheQueries (  )  )     {", "queryObject . setCacheable ( true )  ;", "if    (  ( getQueryCacheRegion (  )  )     !  =    null )     {", "queryObject . setCacheRegion ( getQueryCacheRegion (  )  )  ;", "}", "}", "if    (  ( getFetchSize (  )  )     >     0  )     {", "queryObject . setFetchSize ( getFetchSize (  )  )  ;", "}", "if    (  ( getMaxResults (  )  )     >     0  )     {", "queryObject . setMaxResults ( getMaxResults (  )  )  ;", "}", "SessionHolder   sessionHolder    =     (  ( SessionHolder )     ( TransactionSynchronizationManager . getResource ( obtainSessionFactory (  )  )  )  )  ;", "if    (  ( sessionHolder    !  =    null )     &  &     ( sessionHolder . hasTimeout (  )  )  )     {", "queryObject . setTimeout ( sessionHolder . getTimeToLiveInSeconds (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareQuery"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  ( result    !  =    null )  ,     \" No   Hibernate   Query \"  )  ;", "return    (  ( Query )     ( result )  )  ;", "}", "METHOD_END"], "methodName": ["queryObject"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . cacheQueries    =    cacheQueries ;", "}", "METHOD_END"], "methodName": ["setCacheQueries"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . checkWriteOperations    =    checkWriteOperations ;", "}", "METHOD_END"], "methodName": ["setCheckWriteOperations"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . exposeNativeSession    =    exposeNativeSession ;", "}", "METHOD_END"], "methodName": ["setExposeNativeSession"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . fetchSize    =    fetchSize ;", "}", "METHOD_END"], "methodName": ["setFetchSize"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . filterNames    =    filterNames ;", "}", "METHOD_END"], "methodName": ["setFilterNames"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . maxResults    =    maxResults ;", "}", "METHOD_END"], "methodName": ["setMaxResults"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . queryCacheRegion    =    queryCacheRegion ;", "}", "METHOD_END"], "methodName": ["setQueryCacheRegion"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "this . sessionFactory    =    sessionFactory ;", "}", "METHOD_END"], "methodName": ["setSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTemplate"}, {"methodBody": ["METHOD_START", "{", "return   SessionFactoryUtils . convertHibernateAccessException ( ex )  ;", "}", "METHOD_END"], "methodName": ["convertHibernateAccessException"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "session . disconnect (  )  ;", "}", "METHOD_END"], "methodName": ["disconnectOnCompletion"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . dataSource ;", "}", "METHOD_END"], "methodName": ["getDataSource"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . entityInterceptor )    instanceof   Interceptor )     {", "return    (  ( Interceptor )     ( entityInterceptor )  )  ;", "} else", "if    (  ( this . entityInterceptor )    instanceof   St )     {", "if    (  ( this . beanFactory )     =  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   get   entity   interceptor   via   bean   name   if   no   bean   factory   set \"  )  ;", "}", "St   beanName    =     (  ( St )     ( this . entityInterceptor )  )  ;", "return   this . beanFactory . getBean ( beanName ,    Interceptor . class )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getEntityInterceptor"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionFactory ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( session   instanceof   SessionImplementor )  )     {", "return   session . isConnected (  )  ;", "}", "return    (  ( SessionImplementor )     ( session )  )  . getJdbcCoordinator (  )  . getLogicalConne (  )  . isPhysicallyConnected (  )  ;", "}", "METHOD_END"], "methodName": ["isPhysicallyConnected"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( session   instanceof   SessionImplementor )  )     {", "return   true ;", "}", "ConneReleaseMode   releaseMode    =     (  ( SessionImplementor )     ( session )  )  . getJdbcCoordinator (  )  . getConneReleaseMode (  )  ;", "return   ON _ CLOSE . equals ( releaseMode )  ;", "}", "METHOD_END"], "methodName": ["isSameConnectionForEntireSession"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "SessionFactory   sessionFactory    =    getSessionFactory (  )  ;", "Assert . state (  ( sessionFactory    !  =    null )  ,     \" No   SessionFactory   set \"  )  ;", "return   sessionFactory ;", "}", "METHOD_END"], "methodName": ["obtainSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . allowResultAccessAfterCompletion    =    allowResultAccessAfterCompletion ;", "}", "METHOD_END"], "methodName": ["setAllowResultAccessAfterCompletion"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . autodetectDataSource    =    autodetectDataSource ;", "}", "METHOD_END"], "methodName": ["setAutodetectDataSource"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dataSource    !  =    null )     &  &     ( dataSource   instanceof   TransactionAwareDataSourceProxy )  )     {", "this . dataSource    =     (  ( TransactionAwareDataSourceProxy )     ( dataSource )  )  . getTargetDataSource (  )  ;", "} else    {", "this . dataSource    =    dataSource ;", "}", "}", "METHOD_END"], "methodName": ["setDataSource"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . entityInterceptor    =    entityInterceptor ;", "}", "METHOD_END"], "methodName": ["setEntityInterceptor"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . entityInterceptor    =    entityInterceptorBeanName ;", "}", "METHOD_END"], "methodName": ["setEntityInterceptorBeanName"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . hibernateManagedSession    =    hibernateManagedSession ;", "}", "METHOD_END"], "methodName": ["setHibernateManagedSession"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . prepareConnection    =    prepareConnection ;", "}", "METHOD_END"], "methodName": ["setPrepareConnection"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . sessionFactory    =    sessionFactory ;", "}", "METHOD_END"], "methodName": ["setSessionFactory"], "fileName": "org.springframework.orm.hibernate5.HibernateTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return    ( this . bootstrapExecutor )     !  =    null    ?    sfb . buildSessionFactory ( this . bootstrapExecutor )     :    sfb . buildSessionFactory (  )  ;", "}", "METHOD_END"], "methodName": ["buildSessionFactory"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . configuration )     =  =    null )     {", "throw   new   IllegalStateException (  \" Configuration   not   initialized   yet \"  )  ;", "}", "return   this . configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . hibernateProperties )     =  =    null )     {", "this . hibernateProperties    =    new   Properties (  )  ;", "}", "return   this . hibernateProperties ;", "}", "METHOD_END"], "methodName": ["getHibernateProperties"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . metadataSourcesAccessed    =    true ;", "if    (  ( this . metadataSources )     =  =    null )     {", "BootstrapServiceRegistryBuilder   builder    =    new   BootstrapServiceRegistryBuilder (  )  ;", "if    (  ( this . resourcePatternResolver )     !  =    null )     {", "builder    =    builder . applyClassLoader ( this . resourcePatternResolver . getClassLoader (  )  )  ;", "}", "this . metadataSources    =    new   MetadataSources ( builder . build (  )  )  ;", "}", "return   this . metadataSources ;", "}", "METHOD_END"], "methodName": ["getMetadataSources"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . resourcePatternResolver )     =  =    null )     {", "this . resourcePatternResolver    =    new   PathMatchingResourcePatternResolver (  )  ;", "}", "return   this . resourcePatternResolver ;", "}", "METHOD_END"], "methodName": ["getResourceLoader"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . annotatedClasses    =    annotatedClasses ;", "}", "METHOD_END"], "methodName": ["setAnnotatedClasses"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . annotatedPackages    =    annotatedPackages ;", "}", "METHOD_END"], "methodName": ["setAnnotatedPackages"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . bootstrapExecutor    =    bootstrapExecutor ;", "}", "METHOD_END"], "methodName": ["setBootstrapExecutor"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . cacheableMappingLocations    =    cacheableMappingLocations ;", "}", "METHOD_END"], "methodName": ["setCacheableMappingLocations"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . configLocations    =    new   Resource [  ]  {    configLocation    }  ;", "}", "METHOD_END"], "methodName": ["setConfigLocation"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . configLocations    =    configLocations ;", "}", "METHOD_END"], "methodName": ["setConfigLocations"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . currentTenantIdentifierResolver    =    currentTenantIdentifierResolver ;", "}", "METHOD_END"], "methodName": ["setCurrentTenantIdentifierResolver"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . dataSource    =    dataSource ;", "}", "METHOD_END"], "methodName": ["setDataSource"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . entityInterceptor    =    entityInterceptor ;", "}", "METHOD_END"], "methodName": ["setEntityInterceptor"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . entityTypeFilters    =    entityTypeFilters ;", "}", "METHOD_END"], "methodName": ["setEntityTypeFilters"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . hibernateProperties    =    hibernateProperties ;", "}", "METHOD_END"], "methodName": ["setHibernateProperties"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . implicitNamingStrategy    =    implicitNamingStrategy ;", "}", "METHOD_END"], "methodName": ["setImplicitNamingStrategy"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . jtaTransactionManager    =    jtaTransactionManager ;", "}", "METHOD_END"], "methodName": ["setJtaTransactionManager"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . mappingDirectoryLocations    =    mappingDirectoryLocations ;", "}", "METHOD_END"], "methodName": ["setMappingDirectoryLocations"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . mappingJarLocations    =    mappingJarLocations ;", "}", "METHOD_END"], "methodName": ["setMappingJarLocations"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . mappingLocations    =    mappingLocations ;", "}", "METHOD_END"], "methodName": ["setMappingLocations"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . mappingResources    =    mappingResources ;", "}", "METHOD_END"], "methodName": ["setMappingResources"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( metadataSources ,     \" MetadataSources   must   not   be   null \"  )  ;", "this . metadataSourcesAcced    =    true ;", "this . metadataSources    =    metadataSources ;", "}", "METHOD_END"], "methodName": ["setMetadataSources"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . multiTenantConnectionProvider    =    multiTenantConnectionProvider ;", "}", "METHOD_END"], "methodName": ["setMultiTenantConnectionProvider"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . packagesToScan    =    packagesToScan ;", "}", "METHOD_END"], "methodName": ["setPackagesToScan"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . physicalNamingStrategy    =    physicalNamingStrategy ;", "}", "METHOD_END"], "methodName": ["setPhysicalNamingStrategy"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBean"}, {"methodBody": ["METHOD_START", "{", "for    ( Class <  ?  >    annotatedClass    :    annotatedClasses )     {", "addAnnotatedClass ( annotatedClass )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addAnnotatedClasses"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( String   annotatedPackage    :    annotatedPackages )     {", "addPackage ( annotatedPackage )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addPackages"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( bootstrapExecutor ,     \" AsyncTaskExecutor   must   not   be   null \"  )  ;", "return    (  ( SessionFactory )     ( Proxy . newProxyInstance ( this . resourcePatternResolver . getClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    SessionFactoryImplementor . class ,    InfrastructureProxy . class    }  ,    new    . BootstrapSessionFactoryInvocationHandler ( bootstrapExecutor )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["buildSessionFactory"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . entityTypeFilters )     !  =    null )     {", "for    ( TypeFilter   filter    :    this . entityTypeFilters )     {", "if    ( filter . match ( reader ,    reader )  )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesEntityTypeFilter"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "Set < String >    entityClassNames    =    new   TreeSet <  >  (  )  ;", "Set < String >    converterClassNames    =    new   TreeSet <  >  (  )  ;", "Set < String >    packageNames    =    new   TreeSet <  >  (  )  ;", "try    {", "for    ( String   pkg    :    packagesToScan )     {", "String   pattern    =     (  ( ResourcePatternResolver . CLASSPATH _ ALL _ URL _ PREFIX )     +     ( ClassUtils . convertClassNameToResourcePath ( pkg )  )  )     +     (  . RESOURCE _ PATTERN )  ;", "Resource [  ]    resources    =    this . resourcePatternResolver . getResources ( pattern )  ;", "MetadataReaderFactory   readerFactory    =    new   CachingMetadataReaderFactory ( this . resourcePatternResolver )  ;", "for    ( Resource   resource    :    resources )     {", "if    ( resource . isReadable (  )  )     {", "MetadataReader   reader    =    readerFactory . getMetadataReader ( resource )  ;", "String   className    =    reader . getClassMetadata (  )  . getClassName (  )  ;", "if    ( matchesEntityTypeFilter ( reader ,    readerFactory )  )     {", "entityClassNames . add ( className )  ;", "} else", "if    (  . CONVERTER _ TYPE _ FILTER . match ( reader ,    readerFactory )  )     {", "converterClassNames . add ( className )  ;", "} else", "if    ( className . endsWith (  . PACKAGE _ INFO _ SUFFIX )  )     {", "packageNames . add ( className . substring (  0  ,     (  ( className . length (  )  )     -     (  . PACKAGE _ INFO _ SUFFIX . length (  )  )  )  )  )  ;", "}", "}", "}", "}", "}    catch    ( IOException   ex )     {", "throw   new   MappingException (  \" Failed   to   scan   classpath   for   unlisted   classes \"  ,    ex )  ;", "}", "try    {", "ClassLoader   cl    =    this . resourcePatternResolver . getClassLoader (  )  ;", "for    ( String   className    :    entityClassNames )     {", "addAnnotatedClass ( ClassUtils . forName ( className ,    cl )  )  ;", "}", "for    ( String   className    :    converterClassNames )     {", "addAttributeConverter (  (  ( Class <  ?    extends   AttributeConverter <  ?  ,     ?  >  >  )     ( ClassUtils . forName ( className ,    cl )  )  )  )  ;", "}", "for    ( String   packageName    :    packageNames )     {", "addPackage ( packageName )  ;", "}", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   MappingException (  \" Failed   to   load   annotated   classes   from   classpath \"  ,    ex )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["scanPackages"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "this . entityTypeFilters    =    entityTypeFilters ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setEntityTypeFilters"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( jtaTransactionManager ,     \" Transaction   manager   reference   must   not   be   null \"  )  ;", "if    ( jtaTransactionManager   instanceof   JtaTransactionManager )     {", "boolean   webspherePresent    =    ClassUtils . isPresent (  \" com . ibm . wsspi . uow . UOWManager \"  ,    getClass (  )  . getClassLoader (  )  )  ;", "if    ( webspherePresent )     {", "getProperties (  )  . put ( JTA _ PLATFORM ,     \" WebSphereExtendedJtaPlatform \"  )  ;", "} else    {", "JtaTransactionManager   jtaTm    =     (  ( JtaTransactionManager )     ( jtaTransactionManager )  )  ;", "if    (  ( jtaTm . getTransactionManager (  )  )     =  =    null )     {", "throw   new   IllegalArgumentException (  \" Can   only   apply   JtaTransactionManager   which   has   a   TransactionManager   reference   set \"  )  ;", "}", "getProperties (  )  . put ( JTA _ PLATFORM ,    new   ConfigurableJtaPlatform ( jtaTm . getTransactionManager (  )  ,    jtaTm . getUserTransaction (  )  ,    jtaTm . getTransactionSynchronizationRegistry (  )  )  )  ;", "}", "} else", "if    ( jtaTransactionManager   instanceof   TransactionManager )     {", "getProperties (  )  . put ( JTA _ PLATFORM ,    new   ConfigurableJtaPlatform (  (  ( TransactionManager )     ( jtaTransactionManager )  )  ,    null ,    null )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unknown   transaction   manager   type :     \"     +     ( jtaTransactionManager . getClass (  )  . getName (  )  )  )  )  ;", "}", "try    {", "AvailableSettings . class . getField (  \" CONNECTION _ HANDLING \"  )  ;", "getProperties (  )  . put (  . connection . handling _ mode \"  ,     \" DELAYED _ ACQUISITION _ AND _ RELEASE _ AFTER _ STATEMENT \"  )  ;", "}    catch    ( NoSuchFieldException   ex )     {", "try    {", "AvailableSettings . class . getField (  \" ACQUIRE _ CONNECTIONS \"  )  ;", "getProperties (  )  . put (  . connection . release _ mode \"  ,     \" AFTER _ STATEMENT \"  )  ;", "}    catch    ( NoSuchFieldException   ex 2  )     {", "}", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["setJtaTransactionManager"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "getProperties (  )  . put ( MULTI _ TENANT _ CONNECTION _ PROVIDER ,    multiTenantConnectionProvider )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMultiTenantConnectionProvider"], "fileName": "org.springframework.orm.hibernate5.LocalSessionFactoryBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( session    !  =    null )     {", "try    {", "session . close (  )  ;", "}    catch    ( HibernateException   ex )     {", ". logger . debug (  \" Could   not   close   Hibernate   Session \"  ,    ex )  ;", "}    catch    ( Throwable   ex )     {", ". logger . debug (  \" Unexpected   exception   on   closing   Hibernate   Session \"  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["closeSession"], "fileName": "org.springframework.orm.hibernate5.SessionFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   JDBCConnectionException )     {", "return   new   dao . DataAccessResourceFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   SQLGrammarException )     {", "SQLGrammarException   jdbcEx    =     (  ( SQLGrammarException )     ( ex )  )  ;", "return   new   dao . InvalidDataAccessResourceUsageException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   QueryTimeoutException )     {", "QueryTimeoutException   jdbcEx    =     (  ( QueryTimeoutException )     ( ex )  )  ;", "return   new   dao . QueryTimeoutException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   LockAcquisitionException )     {", "LockAcquisitionException   jdbcEx    =     (  ( LockAcquisitionException )     ( ex )  )  ;", "return   new   dao . CannotAcquireLockException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PessimisticLockException )     {", "PessimisticLockException   jdbcEx    =     (  ( PessimisticLockException )     ( ex )  )  ;", "return   new   dao . PessimisticLockingFailureException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   ConstraintViolationException )     {", "ConstraintViolationException   jdbcEx    =     (  ( ConstraintViolationException )     ( ex )  )  ;", "return   new   dao . DataIntegrityViolationException (  (  (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  ;    constraint    [  \"  )     +     ( jdbcEx . getConstraintName (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   DataException )     {", "DataException   jdbcEx    =     (  ( DataException )     ( ex )  )  ;", "return   new   dao . DataIntegrityViolationException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   JDBCException )     {", "return   new   HibernateJdbcException (  (  ( JDBCException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   QueryException )     {", "return   new   HibernateQueryException (  (  ( QueryException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   NonUniqueResultException )     {", "return   new   dao . IncorrectResultSizeDataAccessException ( ex . getMessage (  )  ,     1  ,    ex )  ;", "}", "if    ( ex   instanceof   NonUniqueObjectException )     {", "return   new   dao . DuplicateKeyException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PropertyValueException )     {", "return   new   dao . DataIntegrityViolationException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PersistentObjectException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   TransientObjectException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   ObjectDeletedException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   UnresolvableObjectException )     {", "return   new   HibernateObjectRetrievalFailureException (  (  ( UnresolvableObjectException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   WrongClassException )     {", "return   new   HibernateObjectRetrievalFailureException (  (  ( WrongClassException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   StaleObjectStateException )     {", "return   new   HibernateOptimisticLockingFailureException (  (  ( StaleObjectStateException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   StaleStateException )     {", "return   new   HibernateOptimisticLockingFailureException (  (  ( StaleStateException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   OptimisticEntityLockException )     {", "return   new   HibernateOptimisticLockingFailureException (  (  ( OptimisticEntityLockException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   PessimisticEntityLockException )     {", "if    (  ( ex . getCause (  )  )    instanceof   LockAcquisitionException )     {", "return   new   dao . CannotAcquireLockException ( ex . getMessage (  )  ,    ex . getCause (  )  )  ;", "}", "return   new   dao . PessimisticLockingFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "return   new   HibernateSystemException ( ex )  ;", "}", "METHOD_END"], "methodName": ["convertHibernateAccessException"], "fileName": "org.springframework.orm.hibernate5.SessionFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( synch )     {", ". logger . debug (  \" Flushing   Hibernate   Session   on   transaction   synchronization \"  )  ;", "} else    {", ". logger . debug (  \" Flushing   Hibernate   Session   on   explicit   request \"  )  ;", "}", "try    {", "session . flush (  )  ;", "}    catch    ( HibernateException   ex )     {", "throw    . convertHibernateAccessException ( ex )  ;", "}    catch    ( PersistenceException   ex )     {", "if    (  ( ex . getCause (  )  )    instanceof   HibernateException )     {", "throw    . convertHibernateAccessException (  (  ( HibernateException )     ( ex . getCause (  )  )  )  )  ;", "}", "throw   ex ;", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "org.springframework.orm.hibernate5.SessionFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "Method   getProperties    =    ClassUtils . getMethodIfAvailable ( sessionFactory . getClass (  )  ,     \" getProperties \"  )  ;", "if    ( getProperties    !  =    null )     {", "Map <  ?  ,     ?  >    props    =     (  ( Map <  ?  ,     ?  >  )     ( ReflectionUtils . invokeMethod ( getProperties ,    sessionFactory )  )  )  ;", "if    ( props    !  =    null )     {", "Object   dataSourceValue    =    props . get ( DATASOURCE )  ;", "if    ( dataSourceValue   instanceof   DataSource )     {", "return    (  ( DataSource )     ( dataSourceValue )  )  ;", "}", "}", "}", "if    ( sessionFactory   instanceof   SessionFactoryImplementor )     {", "SessionFactoryImplementor   sfi    =     (  ( SessionFactoryImplementor )     ( sessionFactory )  )  ;", "try    {", "ConnectionProvider   cp    =    sfi . getServiceRegistry (  )  . getService ( ConnectionProvider . class )  ;", "if    ( cp    !  =    null )     {", "return   cp . unwrap ( DataSource . class )  ;", "}", "}    catch    ( UnknownServiceException   ex )     {", "if    (  . logger . isDebugEnabled (  )  )     {", ". logger . debug (  (  \" No   ConnectionProvider   found    -    cannot   determine   DataSource   for   SessionFactory :     \"     +    ex )  )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getDataSource"], "fileName": "org.springframework.orm.hibernate5.SessionFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "FlushMode   flushMode    =     (  ( FlushMode )     ( ReflectionUtils . invokeMethod ( SessionFactoryUtils . getFlushMode ,    session )  )  )  ;", "Assert . state (  ( flushMode    !  =    null )  ,     \" No   FlushMode   from   Session \"  )  ;", "return   flushMode ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.springframework.orm.hibernate5.SessionFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "return   this . previousFlushMode ;", "}", "METHOD_END"], "methodName": ["getPreviousFlushMode"], "fileName": "org.springframework.orm.hibernate5.SessionHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . session ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "org.springframework.orm.hibernate5.SessionHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . transaction ;", "}", "METHOD_END"], "methodName": ["getTransaction"], "fileName": "org.springframework.orm.hibernate5.SessionHolder"}, {"methodBody": ["METHOD_START", "{", "this . previousFlushMode    =    previousFlushMode ;", "}", "METHOD_END"], "methodName": ["setPreviousFlushMode"], "fileName": "org.springframework.orm.hibernate5.SessionHolder"}, {"methodBody": ["METHOD_START", "{", "this . transaction    =    transaction ;", "}", "METHOD_END"], "methodName": ["setTransaction"], "fileName": "org.springframework.orm.hibernate5.SessionHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionHolder . getSession (  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentSession"], "fileName": "org.springframework.orm.hibernate5.SpringSessionSynchronization"}, {"methodBody": ["METHOD_START", "{", "this . timeoutInProgress    =    false ;", "this . errorInProgress    =    false ;", "TransactionSynchronizationManager . bindResource ( this . sessionFactory ,    this . sessionHolder )  ;", "}", "METHOD_END"], "methodName": ["bindSession"], "fileName": "org.springframework.orm.hibernate5.support.AsyncRequestInterceptor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . timeoutInProgress )     |  |     ( this . errorInProgress )  )     {", ". logger . debug (  \" Closing   Hibernate   Session   after   async   request   timeout / error \"  )  ;", "SessionFactoryUtils . closeSession ( this . sessionHolder . getSession (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["closeSession"], "fileName": "org.springframework.orm.hibernate5.support.AsyncRequestInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   new   HibernateTemplate ( sessionFactory )  ;", "}", "METHOD_END"], "methodName": ["createHibernateTemplate"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "SessionFactory   sessionFactory    =    getSessionFactory (  )  ;", "Assert . st (  ( sessionFactory    !  =    null )  ,     \" No   SessionFactory   set \"  )  ;", "return   sessionFactory . getCurrentSession (  )  ;", "}", "METHOD_END"], "methodName": ["currentSession"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . hibernateTemplate ;", "}", "METHOD_END"], "methodName": ["getHibernateTemplate"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "return    ( this . hibernateTemplate )     !  =    null    ?    this . hibernateTemplate . getSessionFactory (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "this . hibernateTemplate    =    hibernateTemplate ;", "}", "METHOD_END"], "methodName": ["setHibernateTemplate"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . hibernateTemplate )     =  =    null )     |  |     ( sessionFactory    !  =     ( this . hibernateTemplate . getSessionFactory (  )  )  )  )     {", "this . hibernateTemplate    =    createHibernateTemplate ( sessionFactory )  ;", "}", "}", "METHOD_END"], "methodName": ["setSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.HibernateDaoSupport"}, {"methodBody": ["METHOD_START", "{", "CallableProcessingInterceptor   cpi    =    asyncManager . getCallableInterceptor ( key )  ;", "if    ( cpi    =  =    null )     {", "return   false ;", "}", "(  ( AsyncRequestInterceptor )     ( cpi )  )  . bind (  )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["applySessionBindingInterceptor"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionFactoryBeanName ;", "}", "METHOD_END"], "methodName": ["getSessionFactoryBeanName"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Using   SessionFactory    '  \"     +     ( getSessionFactoryBeanName (  )  )  )     +     \"  '    for    \"  )  )  ;", "}", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( getServletContext (  )  )  ;", "return   wac . getBean ( getSessionFactoryBeanName (  )  ,    SessionFactory . class )  ;", "}", "METHOD_END"], "methodName": ["lookupSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "return   lookupSessionFactory (  )  ;", "}", "METHOD_END"], "methodName": ["lookupSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "try    {", "Session   session    =    sessionFactory . openSession (  )  ;", "session . setFlushMode ( MANUAL )  ;", "return   session ;", "}    catch    ( HibernateException   ex )     {", "throw   new   dao . DataAccessResourceFailureException (  \" Could   not   open   Hibernate   Session \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["openSession"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "this . sessionFactoryBeanName    =    sessionFactoryBeanName ;", "}", "METHOD_END"], "methodName": ["setSessionFactoryBeanName"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewFilter"}, {"methodBody": ["METHOD_START", "{", "CallableProcessingInterceptor   cpi    =    asyncManager . getCallableInterceptor ( key )  ;", "if    ( cpi    =  =    null )     {", "return   false ;", "}", "(  ( AsyncRequestInterceptor )     ( cpi )  )  . bindSession (  )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["applySessionBindingInterceptor"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "String   participateAttributeName    =    getParticipateAttributeName (  )  ;", "Integer   count    =     (  ( Integer )     ( request . getAttribute ( participateAttributeName ,    SCOPE _ REQUEST )  )  )  ;", "if    ( count    =  =    null )     {", "return   false ;", "}", "if    ( count    >     1  )     {", "request . setAttribute ( participateAttributeName ,     ( count    -     1  )  ,    SCOPE _ REQUEST )  ;", "} else    {", "request . removeAttribute ( participateAttributeName ,    SCOPE _ REQUEST )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["decrementParticipateCount"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "return    ( obtainSessionFactory (  )  . toString (  )  )     +     ( OpenSessionInViewInterceptor . PARTICIPATE _ SUFFIX )  ;", "}", "METHOD_END"], "methodName": ["getParticipateAttributeName"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionFactory ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "SessionFactory   sf    =    getSessionFactory (  )  ;", "Assert . state (  ( sf    !  =    null )  ,     \" No   SessionFactory   set \"  )  ;", "return   sf ;", "}", "METHOD_END"], "methodName": ["obtainSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "Session   session    =    obtainSessionFactory (  )  . openSession (  )  ;", "session . setFlushMode ( MANUAL )  ;", "return   session ;", "}    catch    ( HibernateException   ex )     {", "throw   new   dao . DataAccessResourceFailureException (  \" Could   not   open   Hibernate   Session \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["openSession"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . sessionFactory    =    sessionFactory ;", "}", "METHOD_END"], "methodName": ["setSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   this . sessionFactory ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["openSession"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInterceptor"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "if    ( session    =  =    null )     {", "try    {", "session    =    sessionFactory . openSession (  )  ;", "session . setFlushMode ( MANUAL )  ;", "}    catch    ( HibernateException   ex )     {", "throw   new   dao . DataAccessResourceFailureException (  \" Could   not   open   Hibernate   Session \"  ,    ex )  ;", "}", "}", "return   session ;", "}", "METHOD_END"], "methodName": ["openSession"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . sessionFactory    =    sessionFactory ;", "}", "METHOD_END"], "methodName": ["setSessionFactory"], "fileName": "org.springframework.orm.hibernate5.support.OpenSessionInterceptor"}, {"methodBody": ["METHOD_START", "{", "String   INSERT _ PERSON    =     \" INSERT   INTO   PERSON    ( ID ,    FIRST _ NAME ,    LAST _ NAME )    VALUES    (  ?  ,     ?  ,     ?  )  \"  ;", "jdbcTemplate . update ( INSERT _ PERSON ,     1  ,    firstName ,     \" Blair \"  )  ;", "}", "METHOD_END"], "methodName": ["insertPerson"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "Query   query    =    shared . createQuery (  \" It ' s   raining   toads \"  )  ;", "query . executeUpdate (  )  ;", "fail (  \" Should   have   thrown   a   RuntimeException \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testBogusQuery"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( entityManagerFactory )  )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( sharedEntityManager )  )  ;", "}", "METHOD_END"], "methodName": ["testCanSerializeProxies"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Proxy . isProxyClass ( entityManagerFactory . getClass (  )  )  )  ;", "assertTrue (  \" Must   have   introduced   config   interface \"  ,     (  ( entityManagerFactory )    instanceof   fo )  )  ;", "fo   emfi    =     (  ( fo )     ( entityManagerFactory )  )  ;", "assertNotNull (  \" PersistenceUnitInfo   must   be   available \"  ,    emfi . getPersistenceUnitInfo (  )  )  ;", "assertNotNull (  \" Raw   EntityManagerFactory   must   be   available \"  ,    emfi . getNativeEntityManagerFactory (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerFactoryImplementsEntityManagerFactoryInfo"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Proxy . isProxyClass ( sharedEntityManager . getClass (  )  )  )  ;", "Query   q    =    sharedEntityManager . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertTrue (  \" Should   be   open   to   start   with \"  ,    sharedEntityManager . isOpen (  )  )  ;", "sharedEntityManager . close (  )  ;", "assertTrue (  \" Close   should   have   been   silently   ignored \"  ,    sharedEntityManager . isOpen (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyIsProxy"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "shared . getTransaction (  )  ;", "fail (  \" Should   not   be   able   to   create   transactions   on   container   managed    \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyRejectsProgrammaticTxManagement"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "Person   notThere    =    shared . getReference ( Person . class ,     6  6  6  )  ;", "notThere . getFirstName (  )  ;", "fail (  \" Should   have   thrown   an   EntityNotFoundException \"  )  ;", "}    catch    ( EntityNotFoundException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testGetReferenceWhenNoRow"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Should   be   no   people   from   previous   transactions \"  ,     0  ,    countRowsInTable (  \" person \"  )  )  ;", "Person   p    =    new   Person (  )  ;", "p . setFirstName (  \" Tony \"  )  ;", "p . setLastName (  \" Blair \"  )  ;", "em . persist ( p )  ;", "em . flush (  )  ;", "assertEquals (  \"  1    row   must   have   been   inserted \"  ,     1  ,    countRowsInTable (  \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInstantiateAndSave"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testInstantiateAndSave ( sharedEntityManager )  ;", "}", "METHOD_END"], "methodName": ["testInstantiateAndSaveWithSharedEmProxy"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testJdbcTx 2  (  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcTx1_1"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testJdbcTx 2  (  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcTx1_2"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testJdbcTx 2  (  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcTx1_3"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Any   previous   tx   must   have   been   rolled   back \"  ,     0  ,    countRowsInTable (  \" person \"  )  )  ;", "executeSqlScript (  \"  / org /  / orm / jpa / insertPerson . sql \"  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcTx2"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "Person   tony    =    new   Person (  )  ;", "tony . setFirstName (  \" Tony \"  )  ;", "tony . setLastName (  \" Blair \"  )  ;", "tony . setDriversLicense ( new   DriversLicense (  \"  8  4  3  9 DK \"  )  )  ;", "sharedEntityManager . persist ( tony )  ;", "setComplete (  )  ;", "endTransaction (  )  ;", "startNewTransaction (  )  ;", "sharedEntityManager . clear (  )  ;", "Person   newTony    =    e . createEntityManager (  )  . getReference ( Person . class ,    tony . getId (  )  )  ;", "assertNotSame ( newTony ,    tony )  ;", "endTransaction (  )  ;", "assertNotNull ( newTony . getDriversLicense (  )  )  ;", "newTony . getDriversLicense (  )  . getSerialNumber (  )  ;", "}    finally    {", "deleteFromTables (  \" person \"  ,     \" drivers _ license \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testLazyLoading"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "String   firstName    =     \" Tony \"  ;", "insertPerson ( firstName )  ;", "assertTrue ( Proxy . isProxyClass ( shared . getClass (  )  )  )  ;", "Query   q    =    shared . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertEquals (  1  ,    people . size (  )  )  ;", "assertEquals ( firstName ,    people . get (  0  )  . getFirstName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleResults"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertEquals (  0  ,    people . size (  )  )  ;", "try    {", "assertNull ( q . getSingleResult (  )  )  ;", "fail (  \" Should   have   thrown   NoResultException \"  )  ;", "}    catch    ( NoResultException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testQueryNoPersons"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertEquals (  0  ,    people . size (  )  )  ;", "try    {", "assertNull ( q . getSingleResult (  )  )  ;", "fail (  \" Should   have   thrown   NoResultException \"  )  ;", "}    catch    ( NoResultException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testQueryNoPersonsNotTransactional"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    SharedEntityManagerCreator . createSharedEntityManager ( entityManagerFactory )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "q . setFlushMode ( AUTO )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "try    {", "assertNull ( q . getSingleResult (  )  )  ;", "fail (  \" Should   have   thrown   NoResultException \"  )  ;", "}    catch    ( NoResultException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testQueryNoPersonsShared"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "endTransaction (  )  ;", "EntityManager   em    =    SharedEntityManagerCreator . createSharedEntityManager ( e )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "q . setFlushMode ( AUTO )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertEquals (  0  ,    people . size (  )  )  ;", "try    {", "assertNull ( q . getSingleResult (  )  )  ;", "fail (  \" Should   have   thrown   IllegalStateException \"  )  ;", "}    catch    ( Exception   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" closed \"  )  )  ;", "}", "q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "q . setFlushMode ( AUTO )  ;", "try    {", "assertNull ( q . getSingleResult (  )  )  ;", "fail (  \" Should   have   thrown   NoResultException \"  )  ;", "}    catch    ( NoResultException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testQueryNoPersonsSharedNotTransactional"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Should   be   no   people   from   previous   transactions \"  ,     0  ,    countRowsInTable (  \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testStateClean"], "fileName": "org.springframework.orm.jpa.AbstractContainerEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf ;", "try    {", "emf    =    createNativeEntityManagerFactory (  )  ;", "}    catch    ( PersistenceException   ex )     {", "if    (  ( ex . getClass (  )  )     =  =     ( PersistenceException . class )  )     {", "Throwable   cause    =    ex . getCause (  )  ;", "if    ( cause    !  =    null )     {", "String   message    =    ex . getMessage (  )  ;", "String   causeString    =    cause . toString (  )  ;", "if    (  !  ( message . endsWith ( causeString )  )  )     {", "throw   new   PersistenceException (  (  ( message    +     \"  ;    nested   exception   is    \"  )     +    causeString )  ,    cause )  ;", "}", "}", "}", "throw   ex ;", "}", "JpaVendorAdapter   jpaVendorAdapter    =    getJpaVendorAdapter (  )  ;", "if    ( jpaVendorAdapter    !  =    null )     {", "jpaVendorAdapter . postProcessEntityManagerFactory ( emf )  ;", "}", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  \" Initialized   JPA   EntityManagerFactory   for   persistence   unit    '  \"     +     ( getPersistenceUnitName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "return   emf ;", "}", "METHOD_END"], "methodName": ["buildNativeEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?  >  >    ifcs    =    new   LinkedHashSet <  >  (  )  ;", "Class <  ?  >    entityManagerFactoryInterface    =    this . entityManagerFactoryInterface ;", "if    ( entityManagerFactoryInterface    !  =    null )     {", "ifcs . add ( entityManagerFactoryInterface )  ;", "} else", "if    ( emf    !  =    null )     {", "ifcs . addAll ( ClassUtils . getAllInterfacesForClassAsSet ( emf . getClass (  )  ,    this . beanClassLoader )  )  ;", "} else    {", "ifcs . add ( EntityManagerFactory . class )  ;", "}", "ifcs . add ( EntityManagerFactoryInfo . class )  ;", "try    {", "return    (  ( EntityManagerFactory )     ( Proxy . newProxyInstance ( this . beanClassLoader ,    ClassUtils . toClassArray ( ifcs )  ,    new    . ManagedEntityManagerFactoryInvocationHandler ( this )  )  )  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "if    ( entityManagerFactoryInterface    !  =    null )     {", "throw   new   IllegalStateException (  (  (  (  \" EntityManagerFactory   interface    [  \"     +    entityManagerFactoryInterface )     +     \"  ]    seems   to   conflict   with   Spring ' s   EntityManagerFactoryInfo   mixin    -    consider   resetting   the    \"  )     +     \"  ' entityManagerFactoryInterface '    property   to   plain    [ EntityManagerFactory ]  \"  )  ,    ex )  ;", "} else    {", "throw   new   IllegalStateException (  (  \" Conflicting   EntityManagerFactory   interfaces    -     \"     +     (  \" consider   specifying   the    ' jpaVendorAdapter '    or    ' entityManagerFactoryInterface '    property    \"     +     \" to   select   a   specific   EntityManagerFactory   interface   to   proceed   with \"  )  )  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createEntityManagerFactoryProxy"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "return   this . bootstrapExecutor ;", "}", "METHOD_END"], "methodName": ["getBootstrapExecutor"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "return   this . jpaPropertyMap ;", "}", "METHOD_END"], "methodName": ["getJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "return   this . jpaVendorAdapter ;", "}", "METHOD_END"], "methodName": ["getJpaVendorAdapter"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if    ( method . getDeclaringClass (  )  . isAssignableFrom ( EntityManagerFactoryInfo . class )  )     {", "return   method . invoke ( this ,    args )  ;", "} else", "if    (  (  (  ( method . getName (  )  . equals (  \" createEntityManager \"  )  )     &  &     ( args    !  =    null )  )     &  &     (  ( args . length )     >     0  )  )     &  &     (  ( args [  0  ]  )     =  =     ( SYNCHRONIZED )  )  )     {", "EntityManager   rawEntityManager    =     (  ( args . length )     >     1  )     ?    getNativeEntityManagerFactory (  )  . createEntityManager (  (  ( Map <  ?  ,     ?  >  )     ( args [  1  ]  )  )  )     :    getNativeEntityManagerFactory (  )  . createEntityManager (  )  ;", "return   ExtendedEntityManagerCreator . createApplicationManagedEntityManager ( rawEntityManager ,    this ,    true )  ;", "}", "if    ( args    !  =    null )     {", "for    ( int   i    =     0  ;    i    <     ( args . length )  ;    i +  +  )     {", "Object   arg    =    args [ i ]  ;", "if    (  ( arg   instanceof   Query )     &  &     ( Proxy . isProxyClass ( arg . getClass (  )  )  )  )     {", "try    {", "args [ i ]     =     (  ( Query )     ( arg )  )  . unwrap ( null )  ;", "}    catch    ( RuntimeException   ex )     {", "}", "}", "}", "}", "Object   retVal    =    method . invoke ( getNativeEntityManagerFactory (  )  ,    args )  ;", "if    ( retVal   instanceof   EntityManager )     {", "EntityManager   rawEntityManager    =     (  ( EntityManager )     ( retVal )  )  ;", "retVal    =    ExtendedEntityManagerCreator . createApplicationManagedEntityManager ( rawEntityManager ,    this ,    false )  ;", "}", "return   retVal ;", "}", "METHOD_END"], "methodName": ["invokeProxyMethod"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "throw   new   NotSerializableException (  (  \" An   EntityManagerFactoryBean   itself   is   not   deserializable    -     \"     +     \" just   a   SerializedEntityManagerFactoryBeanReference   is \"  )  )  ;", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . bootstrapExecutor    =    bootstrapExecutor ;", "}", "METHOD_END"], "methodName": ["setBootstrapExecutor"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerFactoryInterface    =    emfInterface ;", "}", "METHOD_END"], "methodName": ["setEntityManagerFactoryInterface"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerInterface    =    emInterface ;", "}", "METHOD_END"], "methodName": ["setEntityManagerInterface"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . jpaDialect    =    jpaDialect ;", "}", "METHOD_END"], "methodName": ["setJpaDialect"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( jpaProperties ,    this . jpaPropertyMap )  ;", "}", "METHOD_END"], "methodName": ["setJpaProperties"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if   Properties    !  =    null )     {", "thisPropertyMap . putAllProperties )  ;", "}", "}", "METHOD_END"], "methodName": ["setJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . jpaVendorAdapter    =    jpaVendorAdapter ;", "}", "METHOD_END"], "methodName": ["setJpaVendorAdapter"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . persistenceProvider    =    persistenceProvider ;", "}", "METHOD_END"], "methodName": ["setPersistenceProvider"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . persistenceProvider    =    BeanUtils . instantiateClass ( persistenceProviderClass )  ;", "}", "METHOD_END"], "methodName": ["setPersistenceProviderClass"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitName    =    persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . beanFactory )     !  =    null )     &  &     (  ( this . beanName )     !  =    null )  )     {", "return   new    . SerializedEntityManagerFactoryBeanReference ( this . beanFactory ,    this . beanName )  ;", "} else    {", "throw   new   NotSerializableException (  \" EntityManagerFactoryBean   does   not   run   within   a   BeanFactory \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeReplace"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( EntityManagerFactory . class . isAssignableFrom ( demf . getObjectType (  )  )  )  ;", "Object   gotObject    =    demf . getObject (  )  ;", "assertTrue (  \" Object   created   by   factory   implements   EntityManagerFactoryInfo \"  ,     ( gotObject   instanceof   EntityManagerFactoryInfo )  )  ;", "EntityManagerFactoryInfo   emfi    =     (  ( EntityManagerFactoryInfo )     ( demf . getObject (  )  )  )  ;", "assertSame (  \" Successive   invocations   of   getObject (  )    return   same   object \"  ,    emfi ,    demf . getObject (  )  )  ;", "assertSame ( emfi ,    demf . getObject (  )  )  ;", "assertSame ( emfi . getNativeEntityManagerFactory (  )  ,     . mockEmf )  ;", "}", "METHOD_END"], "methodName": ["checkInvariants"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "AbstractEntityManagerFactoryBeanTests . mockEmf    =    mock ( EntityManagerFactory . class )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isActualTransactionActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( AbstractEntityManagerFactoryIntegrationTests . applicationContext )     !  =    null )     {", "AbstractEntityManagerFactoryIntegrationTests . applicationContext . close (  )  ;", "AbstractEntityManagerFactoryIntegrationTests . applicationContext    =    null ;", "}", "}", "METHOD_END"], "methodName": ["closeContext"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return   this . jdbcTemplate . queryForObject (  (  \" SELECT   COUNT (  0  )    FROM    \"     +    tableName )  ,    Integer . class )  ;", "}", "METHOD_END"], "methodName": ["countRowsInTable"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Query   query    =    em . createNativeQuery (  (  \" SELECT   COUNT (  0  )    FROM    \"     +    tableName )  )  ;", "return    (  ( Number )     ( query . getSingleResult (  )  )  )  . intValue (  )  ;", "}", "METHOD_END"], "methodName": ["countRowsInTable"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createContainerManagedEntityManager ( this . entityManagerFactory )  ;", "}", "METHOD_END"], "methodName": ["createContainerManagedEntityManager"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "for    ( String   tableName    :    tableNames )     {", "this . jdbcTemplate . update (  (  \" DELETE   FROM    \"     +    tableName )  )  ;", "}", "this . zappedTables    =    true ;", "}", "METHOD_END"], "methodName": ["deleteFromTables"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "final   boolean   commit    =    this . complete ;", "if    (  ( this . transactionStatus )     !  =    null )     {", "try    {", "if    ( commit )     {", "this . transaction . commit ( this . transactionStatus )  ;", "} else    {", "this . transaction . rollback ( this . transactionStatus )  ;", "}", "}    finally    {", "this . transactionStatus    =    null ;", "}", "}", "}", "METHOD_END"], "methodName": ["endTransaction"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    AbstractEntityManagerFactoryIntegrationTests . applicationContext . getResource ( sqlResourcePath )  ;", "new   ResourceDatabasePopulator ( resource )  . execute ( this . jdbcTemplate . getDataSource (  )  )  ;", "}", "METHOD_END"], "methodName": ["executeSqlScript"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return   AbstractEntityManagerFactoryIntegrationTests . ECLIPSELINK _ CONFIG _ LOCATIONS ;", "}", "METHOD_END"], "methodName": ["getConfigLocations"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . transactionManager )     =  =    null )     {", "throw   new   IllegalStateException (  \" No   transaction   manager   set \"  )  ;", "}", "if    ( this . zappedTables )     {", "throw   new   IllegalStateException (  \" Cannot   set   complete   after   deleting   tables \"  )  ;", "}", "this . complete    =    true ;", "}", "METHOD_END"], "methodName": ["setComplete"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . jdbcTemplate    =    new   JdbcTemplate ( dataSource )  ;", "}", "METHOD_END"], "methodName": ["setDataSource"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerFactory    =    entityManagerFactory ;", "this . sharedEntityManager    =    SharedEntityManagerCreator . createSharedEntityManager ( this . entityManagerFactory )  ;", "}", "METHOD_END"], "methodName": ["setEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . transactionManager    =    transactionManager ;", "}", "METHOD_END"], "methodName": ["setTransactionManager"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( AbstractEntityManagerFactoryIntegrationTests . applicationContext )     =  =    null )     {", "AbstractEntityManagerFactoryIntegrationTests . applicationContext    =    new   ClassPathXmlApplicationContext ( getConfigLocations (  )  )  ;", "}", "AbstractEntityManagerFactoryIntegrationTests . applicationContext . getAutowireCapableBeanFactory (  )  . autowireBean ( this )  ;", "if    (  (  ( this . transactionManager )     !  =    null )     &  &     (  ( this . transactionDefinition )     !  =    null )  )     {", "startNewTransaction (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . transactionStatus    =    this . transactionManager . getTransaction ( this . transactionDefinition )  ;", "}", "METHOD_END"], "methodName": ["startNewTransaction"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( this . transactionStatus )     !  =    null )     &  &     (  !  ( this . transactionStatus . isCompleted (  )  )  )  )     {", "endTransaction (  )  ;", "}", "assertTrue ( TransactionSynchronization . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronization . isSynchronizationActive (  )  )  ;", "assertFalse ( TransactionSynchronization . isCurrentTransactionReadOnly (  )  )  ;", "assertFalse ( TransactionSynchronization . isActualTransactionActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.orm.jpa.AbstractEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "em . createQuery (  \" delete   from   Person   p \"  )  . executeUpdate (  )  ;", "}", "METHOD_END"], "methodName": ["deleteAllPeopleUsingEntityManager"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "testStateClean (  )  ;", "Person   p    =    new   Person (  )  ;", "p . setFirstName (  \" Tony \"  )  ;", "p . setLastName (  \" Blair \"  )  ;", "em . persist ( p )  ;", "em . flush (  )  ;", "assertEquals (  \"  1    row   must   have   been   inserted \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["doInstantiateAndSave"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "try    {", "doInstantiateAndSave ( em )  ;", "fail (  \" Should   have   thrown   TransactionRequiredException \"  )  ;", "}    catch    ( TransactionRequiredException   ex )     {", "}", "deleteAllPeopleUsingEntityManager ( shar )  ;", "setComplete (  )  ;", "}", "METHOD_END"], "methodName": ["testCannotFlushWithoutGettingTransaction"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "doInstantiateAndSave ( em )  ;", "setComplete (  )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   committed   back \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "deleteFromTables (  \" person \"  )  ;", "}", "METHOD_END"], "methodName": ["testCommitOccurs"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyAcceptsProgrammaticTxJoining"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "assertTrue ( Proxy . isProxyClass ( em . getClass (  )  )  )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertNotNull ( people )  ;", "assertTrue (  \" Should   be   open   to   start   with \"  ,    em . isOpen (  )  )  ;", "em . close (  )  ;", "assertFalse (  \" Close   should   work   on   application   managed   EM \"  ,    em . isOpen (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyIsProxy"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "doInstantiateAndSave ( em )  ;", "}", "METHOD_END"], "methodName": ["testInstantiateAndSave"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "doInstantiateAndSave ( em )  ;", "endTransaction (  )  ;", "assertFalse ( em . getTransaction (  )  . isActive (  )  )  ;", "startNewTransaction (  )  ;", "assertFalse ( em . contains ( new   Person (  )  )  )  ;", "assertFalse ( em . getTransaction (  )  . isActive (  )  )  ;", "em . joinTransaction (  )  ;", "assertTrue ( em . getTransaction (  )  . isActive (  )  )  ;", "doInstantiateAndSave ( em )  ;", "setComplete (  )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   committed   back \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "startNewTransaction (  )  ;", "em . joinTransaction (  )  ;", "deleteAllPeopleUsingEntityManager ( em )  ;", "assertEquals (  \" People   have   been   killed \"  ,     0  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "setComplete (  )  ;", "}", "METHOD_END"], "methodName": ["testReuseInNewTransaction"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "doInstantiateAndSave ( em )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   been   rolled   back \"  ,     0  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRollbackOccurs"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Should   be   no   people   from   previous   transactions \"  ,     0  ,    countRowsInTable (  \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testStateClean"], "fileName": "org.springframework.orm.jpa.ApplicationManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" Should   be   no   people   from   previous   transactions \"  ,     0  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "Person   p    =    new   Person (  )  ;", "p . setFirstName (  \" Tony \"  )  ;", "p . setLastName (  \" Blair \"  )  ;", "em . persist ( p )  ;", "em . flush (  )  ;", "assertEquals (  \"  1    row   must   have   been   inserted \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["doInstantiateAndSave"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RuntimeException   in 1     =    new   RuntimeException (  \" in 1  \"  )  ;", "PersistenceException   in 2     =    new   PersistenceException (  )  ;", "assertNull (  \" No   transl   here \"  ,    pet . translateExceptionIfPossible ( in 1  )  )  ;", "DataAccessException   dex    =    pet . translateExceptionIfPossible ( in 2  )  ;", "assertNotNull ( dex )  ;", "assertSame ( in 2  ,    dex . getCause (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestExceptionTranslationWithDialectFound"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    createContainerManagedEntityManager (  )  ;", "doInstantiateAndSave ( em )  ;", "setComplete (  )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   committed   back \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "deleteFromTables (  \" person \"  )  ;", "}", "METHOD_END"], "methodName": ["testCommitOccurs"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "createContainerManagedEntityManager (  )  . joinTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["testContainerEntityManagerProxyAllowsJoinTransactionInTransaction"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "endTransaction (  )  ;", "try    {", "create (  )  . joinTransaction (  )  ;", "fail (  \" Should   have   thrown   a   TransactionRequiredException \"  )  ;", "}    catch    ( TransactionRequiredException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testContainerEntityManagerProxyRejectsJoinTransactionWithoutTransaction"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    createContainerManagedEntityManager (  )  ;", "assertTrue ( Proxy . isProxyClass ( em . getClass (  )  )  )  ;", "Query   q    =    em . createQuery (  \" select   p   from   Person   as   p \"  )  ;", "List < Person >    people    =    q . getResultList (  )  ;", "assertTrue ( people . isEmpty (  )  )  ;", "assertTrue (  \" Should   be   open   to   start   with \"  ,    em . isOpen (  )  )  ;", "try    {", "em . close (  )  ;", "fail (  \" Close   should   not   work   on   container   managed   EM \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "assertTrue ( em . isOpen (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyIsProxy"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "create (  )  . getTransaction (  )  ;", "fail (  \" Should   have   thrown   an   IllegalStateException \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testEntityManagerProxyRejectsProgrammaticTxManagement"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull (  \" Dialect   must   have   been   set \"  ,    entityManagerFactoryBean . getJpaDialect (  )  )  ;", "doTestExceptionTranslationWithDialectFound ( entityManagerFactoryBean )  ;", "}", "METHOD_END"], "methodName": ["testExceptionTranslationWithDialectFoundOnEntityManagerFactoryBean"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "doTestExceptionTranslationWithDialectFound (  (  ( EntityManagerFactoryInfo )     ( entityManagerFactory )  )  . getJpaDialect (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExceptionTranslationWithDialectFoundOnIntroducedEntityManagerInfo"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    createContainerManagedEntityManager (  )  ;", "doInstantiateAndSave ( em )  ;", "}", "METHOD_END"], "methodName": ["testInstantiateAndSave"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    createContainerManagedEntityManager (  )  ;", "doInstantiateAndSave ( em )  ;", "endTransaction (  )  ;", "startNewTransaction (  )  ;", "assertFalse ( em . contains ( new   Person (  )  )  )  ;", "doInstantiateAndSave ( em )  ;", "setComplete (  )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   committed   back \"  ,     1  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "deleteFromTables (  \" person \"  )  ;", "}", "METHOD_END"], "methodName": ["testReuseInNewTransaction"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    createContainerManagedEntityManager (  )  ;", "doInstantiateAndSave ( em )  ;", "endTransaction (  )  ;", "assertEquals (  \" Tx   must   have   been   rolled   back \"  ,     0  ,    countRowsInTable ( em ,     \" person \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRollbackOccurs"], "fileName": "org.springframework.orm.jpa.ContainerManagedEntityManagerIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "TransactionDefinition   definition    =    new   DefaultTransactionDefinition (  )  ;", "EntityManager   entityManager    =    mock ( EntityManager . class )  ;", "EntityTransaction   entityTx    =    mock ( EntityTransaction . class )  ;", "given ( entityManager . getTransaction (  )  )  . willReturn ( entityTx )  ;", "dialect . beginTransaction ( entityManager ,    definition )  ;", "}", "METHOD_END"], "methodName": ["testDefaultBeginTransaction"], "fileName": "org.springframework.orm.jpa.DefaultJpaDialectTests"}, {"methodBody": ["METHOD_START", "{", "DefaultTransactionDefinition   definition    =    new   DefaultTransactionDefinition (  )  ;", "definition . setIsolationLevel ( ISOLATION _ REPEATABLE _ READ )  ;", "try    {", "dialect . beginTransaction ( null ,    definition )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( TransactionException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testDefaultTransactionDefinition"], "fileName": "org.springframework.orm.jpa.DefaultJpaDialectTests"}, {"methodBody": ["METHOD_START", "{", "OptimisticLockException   ex    =    new   OptimisticLockException (  )  ;", "assertEquals ( EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( ex )  . getCause (  )  ,    d . translateExceptionIfPossible ( ex )  . getCause (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTranslateException"], "fileName": "org.springframework.orm.jpa.DefaultJpaDialectTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    obtainEntityManagerFactory (  )  ;", "Map < String ,    Object >    properties    =    getJpaPropertyMap (  )  ;", "return    !  ( CollectionUtils . isEmpty ( properties )  )     ?    emf . createEntityManager ( properties )     :    emf . createEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["createEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "return   this . entityManagerFactory ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "return   this . jpaPropertyMap ;", "}", "METHOD_END"], "methodName": ["getJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "return   this . persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    obtainEntityManagerFactory (  )  ;", "return   EntityManagerFactoryUtils . getTransactionalEntityManager ( emf ,    getJpaPropertyMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    getEntityManagerFactory (  )  ;", "Assert . state (  ( emf    !  =    null )  ,     \" No   EntityManagerFactory   set \"  )  ;", "return   emf ;", "}", "METHOD_END"], "methodName": ["obtainEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerFactory    =    emf ;", "}", "METHOD_END"], "methodName": ["setEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( jpaProperties ,    this . jpaPropertyMap )  ;", "}", "METHOD_END"], "methodName": ["setJpaProperties"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "if   Properties    !  =    null )     {", "thisPropertyMap . putAllProperties )  ;", "}", "}", "METHOD_END"], "methodName": ["setJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitName    =    persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryAccessor"}, {"methodBody": ["METHOD_START", "{", "AbstractEntityManagerFactoryBeanTests . DummyEntityManagerFactoryBean   demf    =    new   AbstractEntityManagerFactoryBeanTests . DummyEntityManagerFactoryBean ( AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "demf . afterPropertiesSet (  )  ;", "checkInvariants ( demf )  ;", "demf . destroy (  )  ;", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testHookIsCalled"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryBeanSupportTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerHolder   emHolder    =     (  ( EntityManagerHolder )     ( TransactionSynchronizationManager . getResource ( emf )  )  )  ;", "if    (  ( emHolder    !  =    null )     &  &     ( emHolder . hasTimeout (  )  )  )     {", "int   timeoutValue    =     (  ( int )     ( emHolder . getTimeToLiveInMillis (  )  )  )  ;", "try    {", "query . setHint (  \" timeout \"  ,    timeoutValue )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "}", "METHOD_END"], "methodName": ["applyTransactionTimeout"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( emf   instanceof   EntityManagerFactoryInfo )     {", "EntityManagerFactoryInfo   emfInfo    =     (  ( EntityManagerFactoryInfo )     ( emf )  )  ;", "JpaDialect   jpaDialect    =    emfInfo . getJpaDialect (  )  ;", "if    ( jpaDialect    !  =    null )     {", "jpaDialect . cleanupTransaction ( transactionData )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanupTransaction"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( em    !  =    null )     {", ". logger . debug (  \" Closing   JPA   EntityManager \"  )  ;", "try    {", "if    ( em . isOpen (  )  )     {", "em . close (  )  ;", "}", "}    catch    ( PersistenceException   ex )     {", ". logger . debug (  \" Could   not   close   JPA   EntityManager \"  ,    ex )  ;", "}    catch    ( Throwable   ex )     {", ". logger . debug (  \" Unexpected   exception   on   closing   JPA   EntityManager \"  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["closeEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   IllegalStateException )     {", "return   new   InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   IllegalArgumentException )     {", "return   new   InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   EntityNotFoundException )     {", "return   new   JpaObjectRetrievalFailureException (  (  ( EntityNotFoundException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   NoResultException )     {", "return   new   EmptyResultDataAccessException ( ex . getMessage (  )  ,     1  ,    ex )  ;", "}", "if    ( ex   instanceof   NonUniqueResultException )     {", "return   new   IncorrectResultSizeDataAccessException ( ex . getMessage (  )  ,     1  ,    ex )  ;", "}", "if    ( ex   instanceof   QueryTimeoutException )     {", "return   new   dao . QueryTimeoutException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   LockTimeoutException )     {", "return   new   CannotAcquireLockException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PessimisticLockException )     {", "return   new   PessimisticLockingFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   OptimisticLockException )     {", "return   new   JpaOptimisticLockingFailureException (  (  ( OptimisticLockException )     ( ex )  )  )  ;", "}", "if    ( ex   instanceof   EntityExistsException )     {", "return   new   DataIntegrityViolationException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   TransactionRequiredException )     {", "return   new   InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PersistenceException )     {", "return   new   JpaSystemException ( ex )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["convertJpaAccessExceptionIfPossible"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "return   EntityManagerFactoryUtils . doGetTransactionalEntityManager ( emf ,    properties ,    true )  ;", "}", "METHOD_END"], "methodName": ["doGetTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( emf ,     \" No   EntityManagerFactory   specified \"  )  ;", "EntityManagerHolder   emHolder    =     (  ( EntityManagerHolder )     ( TransactionSynchronizationManager . getResource ( emf )  )  )  ;", "if    ( emHolder    !  =    null )     {", "if    ( synchronizedWithTransaction )     {", "if    (  !  ( emHolder . isSynchronizedWithTransaction (  )  )  )     {", "if    ( TransactionSynchronizationManager . isActualTransactionActive (  )  )     {", "try    {", "emHolder . getEntityManager (  )  . joinTransaction (  )  ;", "}    catch    ( TransactionRequiredException   ex )     {", ". logger . debug (  \" Could   not   join   transaction   because   none   was   actually   active \"  ,    ex )  ;", "}", "}", "if    ( TransactionSynchronizationManager . isSynchronizationActive (  )  )     {", "Object   transactionData    =     . prepareTransaction ( emHolder . getEntityManager (  )  ,    emf )  ;", "TransactionSynchronizationManager . registerSynchronization ( new    . TransactionalEntityManagerSynchronization ( emHolder ,    emf ,    transactionData ,    false )  )  ;", "emHolder . setSynchronizedWithTransaction ( true )  ;", "}", "}", "emHolder . requested (  )  ;", "return   emHolder . getEntityManager (  )  ;", "} else    {", "if    (  ( emHolder . isTransactionActive (  )  )     &  &     (  !  ( emHolder . isOpen (  )  )  )  )     {", "if    (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )     {", "return   null ;", "}", "TransactionSynchronizationManager . unbindResource ( emf )  ;", "} else    {", "return   emHolder . getEntityManager (  )  ;", "}", "}", "} else", "if    (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )     {", "return   null ;", "}", ". logger . debug (  \" Opening   JPA   EntityManager \"  )  ;", "EntityManager   em    =    null ;", "if    (  ! synchronizedWithTransaction )     {", "try    {", "em    =    emf . createEntityManager ( UNSYNCHRONIZED ,    properties )  ;", "}    catch    ( AbstractMethodError   err )     {", "}", "}", "if    ( em    =  =    null )     {", "em    =     (  !  ( CollectionUtils . isEmpty ( properties )  )  )     ?    emf . createEntityManager ( properties )     :    emf . createEntityManager (  )  ;", "}", ". logger . debug (  \" Registering   transaction   synchronization   for   JPA   EntityManager \"  )  ;", "emHolder    =    new   EntityManagerHolder ( em )  ;", "if    ( synchronizedWithTransaction )     {", "Object   transactionData    =     . prepareTransaction ( em ,    emf )  ;", "TransactionSynchronizationManager . registerSynchronization ( new    . TransactionalEntityManagerSynchronization ( emHolder ,    emf ,    transactionData ,    true )  )  ;", "emHolder . setSynchronizedWithTransaction ( true )  ;", "} else    {", "TransactionSynchronizationManager . registerSynchronization ( new    . TransactionScopedEntityManagerSynchronization ( emHolder ,    emf )  )  ;", "}", "TransactionSynchronizationManager . bindResource ( emf ,    emHolder )  ;", "return   em ;", "}", "METHOD_END"], "methodName": ["doGetTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( beanFactory ,     \" ListableBeanFactory   must   not   be   null \"  )  ;", "if    ( StringUtils . hasLength ( unitName )  )     {", "String [  ]    candidateNames    =    BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( beanFactory ,     . class )  ;", "for    ( String   candidateName    :    candidateNames )     {", "emf    =     (  (  )     ( beanFactory . getBean ( candidateName )  )  )  ;", "if    (  ( emf   instanceof   Info )     &  &     ( unitName . equals (  (  ( Info )     ( emf )  )  . getPersistenceUnitName (  )  )  )  )     {", "return   emf ;", "}", "}", "return   beanFactory . getBean ( unitName ,     . class )  ;", "} else    {", "return   beanFactory . getBean (  . class )  ;", "}", "}", "METHOD_END"], "methodName": ["findEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "return   EntityManagerFactoryUtils . getTransactionalEntityManager ( emf ,    null )  ;", "}", "METHOD_END"], "methodName": ["getTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . doGetTransactionalEntityManager ( emf ,    properties ,    true )  ;", "}    catch    ( PersistenceException   ex )     {", "throw   new   DataAccessResourceFailureException (  \" Could   not   obtain   JPA   EntityManager \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["getTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( emf   instanceof   EntityManagerFactoryInfo )     {", "EntityManagerFactoryInfo   emfInfo    =     (  ( EntityManagerFactoryInfo )     ( emf )  )  ;", "JpaDialect   jpaDialect    =    emfInfo . getJpaDialect (  )  ;", "if    ( jpaDialect    !  =    null )     {", "return   jpaDialect . prepareTransaction ( em ,    TransactionSynchronizationManager . isCurrentTransactionReadOnly (  )  ,    TransactionSynchronizationManager . getCurrentTransactionName (  )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["prepareTransaction"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtils"}, {"methodBody": ["METHOD_START", "{", "EntityNotFoundException   entityNotFound    =    new   EntityNotFoundException (  )  ;", "assertSame ( JpaObjectRetrievalFailureException . class ,     . convertJpaAccessExceptionIfPossible ( entityNotFound )  . getClass (  )  )  ;", "NoResultException   noResult    =    new   NoResultException (  )  ;", "assertSame ( EmptyResultDataAccessException . class ,     . convertJpaAccessExceptionIfPossible ( noResult )  . getClass (  )  )  ;", "NonUniqueResultException   nonUniqueResult    =    new   NonUniqueResultException (  )  ;", "assertSame ( IncorrectResultSizeDataAccessException . class ,     . convertJpaAccessExceptionIfPossible ( nonUniqueResult )  . getClass (  )  )  ;", "OptimisticLockException   optimisticLock    =    new   OptimisticLockException (  )  ;", "assertSame ( JpaOptimisticLockingFailureException . class ,     . convertJpaAccessExceptionIfPossible ( optimisticLock )  . getClass (  )  )  ;", "EntityExistsException   entityExists    =    new   EntityExistsException (  \" foo \"  )  ;", "assertSame ( DataIntegrityViolationException . class ,     . convertJpaAccessExceptionIfPossible ( entityExists )  . getClass (  )  )  ;", "TransactionRequiredException   transactionRequired    =    new   TransactionRequiredException (  \" foo \"  )  ;", "assertSame ( InvalidDataAccessApiUsageException . class ,     . convertJpaAccessExceptionIfPossible ( transactionRequired )  . getClass (  )  )  ;", "PersistenceException   unknown    =    new   PersistenceException (  )     {  }  ;", "assertSame ( JpaSystemException . class ,     . convertJpaAccessExceptionIfPossible ( unknown )  . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["testConvertJpaPersistenceException"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "try    {", ". doGetTransactionalEntityManager ( null ,    null )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "EntityManagerFactory   factory    =    mock ( EntityManagerFactory . class )  ;", "assertNull (  . doGetTransactionalEntityManager ( factory ,    null )  )  ;", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDoGetEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "EntityManagerFactory   factory    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   manager    =    mock ( EntityManager . class )  ;", "TransactionSynchronizationManager . initSynchronization (  )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "assertSame ( manager ,     . doGetTransactionalEntityManager ( factory ,    null )  )  ;", "assertSame ( manager ,     (  ( EntityManagerHolder )     ( TransactionSynchronizationManager . unbindResource ( factory )  )  )  . getEntityManager (  )  )  ;", "}    finally    {", "TransactionSynchronizationManager . clearSynchronization (  )  ;", "}", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDoGetEntityManagerWithTx"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "UnsupportedOperationException   userRuntimeException    =    new   UnsupportedOperationException (  )  ;", "assertNull (  \" Exception   should   not   be   wrapped \"  ,     . convertJpaAccessExceptionIfPossible ( userRuntimeException )  )  ;", "}", "METHOD_END"], "methodName": ["testDoesNotTranslateUnfamiliarException"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "IllegalArgumentException   iae    =    new   IllegalArgumentException (  )  ;", "DataAccessException   dex    =     . convertJpaAccessExceptionIfPossible ( iae )  ;", "assertSame ( iae ,    dex . getCause (  )  )  ;", "assertTrue (  ( dex   instanceof   InvalidDataAccessApiUsageException )  )  ;", "}", "METHOD_END"], "methodName": ["testTranslatesIllegalArgumentException"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "IllegalStateException   ise    =    new   IllegalStateException (  )  ;", "DataAccessException   dex    =     . convertJpaAccessExceptionIfPossible ( ise )  ;", "assertSame ( ise ,    dex . getCause (  )  )  ;", "assertTrue (  ( dex   instanceof   InvalidDataAccessApiUsageException )  )  ;", "}", "METHOD_END"], "methodName": ["testTranslatesIllegalStateException"], "fileName": "org.springframework.orm.jpa.EntityManagerFactoryUtilsTests"}, {"methodBody": ["METHOD_START", "{", "return   this . entityManager ;", "}", "METHOD_END"], "methodName": ["getEntityManager"], "fileName": "org.springframework.orm.jpa.EntityManagerHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . savepointManager ;", "}", "METHOD_END"], "methodName": ["getSavepointManager"], "fileName": "org.springframework.orm.jpa.EntityManagerHolder"}, {"methodBody": ["METHOD_START", "{", "return   this . transactionActive ;", "}", "METHOD_END"], "methodName": ["isTransactionActive"], "fileName": "org.springframework.orm.jpa.EntityManagerHolder"}, {"methodBody": ["METHOD_START", "{", "this . savepointManager    =    savepointManager ;", "}", "METHOD_END"], "methodName": ["setSavepointManager"], "fileName": "org.springframework.orm.jpa.EntityManagerHolder"}, {"methodBody": ["METHOD_START", "{", "this . transactionActive    =    transactionActive ;", "}", "METHOD_END"], "methodName": ["setTransactionActive"], "fileName": "org.springframework.orm.jpa.EntityManagerHolder"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createProxy ( rawEntityManager ,    emfInfo ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["createApplicationManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createProxy ( rawEntityManager ,    emfInfo ,    false ,    synchronizedWithTransaction )  ;", "}", "METHOD_END"], "methodName": ["createApplicationManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createProxy ( rawEntityManager ,    emfInfo ,    true ,    true )  ;", "}", "METHOD_END"], "methodName": ["createContainerManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createContainerManagedEntityManager ( emf ,    null ,    true )  ;", "}", "METHOD_END"], "methodName": ["createContainerManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtendedEntityManagerCreator . createContainerManagedEntityManager ( emf ,    properties ,    true )  ;", "}", "METHOD_END"], "methodName": ["createContainerManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( emf ,     \" EntityManagerFactory   must   not   be   null \"  )  ;", "if    ( emf   instanceof   EntityManagerFactoryInfo )     {", "EntityManagerFactoryInfo   emfInfo    =     (  ( EntityManagerFactoryInfo )     ( emf )  )  ;", "EntityManagerFactory   nativeEmf    =    emfInfo . getNativeEntityManagerFactory (  )  ;", "EntityManager   rawEntityManager    =     (  !  ( CollectionUtils . isEmpty ( properties )  )  )     ?    nativeEmf . createEntityManager ( properties )     :    nativeEmf . createEntityManager (  )  ;", "return    . createProxy ( rawEntityManager ,    emfInfo ,    true ,    synchronizedWithTransaction )  ;", "} else    {", "EntityManager   rawEntityManager    =     (  !  ( CollectionUtils . isEmpty ( properties )  )  )     ?    emf . createEntityManager ( properties )     :    emf . createEntityManager (  )  ;", "return    . createProxy ( rawEntityManager ,    null ,    null ,    null ,    null ,    true ,    synchronizedWithTransaction )  ;", "}", "}", "METHOD_END"], "methodName": ["createContainerManagedEntityManager"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( rawEm ,     \" EntityManager   must   not   be   null \"  )  ;", "Set < Class <  ?  >  >    ifcs    =    new   LinkedHashSet <  >  (  )  ;", "if    ( emIfc    !  =    null )     {", "ifcs . add ( emIfc )  ;", "} else    {", "ifcs . addAll ( ClassUtils . getAllInterfacesForClassAsSet ( rawEm . getClass (  )  ,    cl )  )  ;", "}", "ifcs . add ( EntityManagerProxy . class )  ;", "return    (  ( EntityManager )     ( Proxy . newProxyInstance (  ( cl    !  =    null    ?    cl    :     . class . getClassLoader (  )  )  ,    ClassUtils . toClassArray ( ifcs )  ,    new    . ExtendedEntityManagerInvocationHandler ( rawEm ,    exceptionTranslator ,    jta ,    containerManaged ,    synchronizedWithTransaction )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( emfInfo ,     \" EntityManagerFactoryInfo   must   not   be   null \"  )  ;", "JpaDialect   jpaDialect    =    emfInfo . getJpaDialect (  )  ;", "PersistenceUnitInfo   pui    =    emfInfo . getPersistenceUnitInfo (  )  ;", "Boolean   jta    =     ( pui    !  =    null )     ?     ( pui . getTransactionType (  )  )     =  =     ( PersistenceUnitTransactionType . JTA )     :    null ;", "return    . createProxy ( rawEntityManager ,    emfInfo . getEntityManagerInterface (  )  ,    emfInfo . getBeanClassLoader (  )  ,    jpaDialect ,    jta ,    containerManaged ,    synchronizedWithTransaction )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "org.springframework.orm.jpa.ExtendedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "if    ( txObject . isNewEntityManagerHolder (  )  )     {", "EntityManager   em    =    txObject . getEntityManagerHolder (  )  . getEntityManager (  )  ;", "try    {", "if    ( em . get (  )  . isActive (  )  )     {", "em . get (  )  . rollback (  )  ;", "}", "}    catch    ( Throwable   ex )     {", "logger . debug (  \" Could   not   rollback   EntityManager   after   failed   transaction   begin \"  ,    ex )  ;", "}    finally    {", "EntityManagerFactoryUtils . closeEntityManager ( em )  ;", "}", "txObject . setEntityManagerHolder ( null ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["closeEntityManagerAfterFailedBegin"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    obtainEntityManagerFactory (  )  ;", "if    ( emf   instanceof   EntityManagerFactoryInfo )     {", "emf    =     (  ( EntityManagerFactoryInfo )     ( emf )  )  . getNativeEntityManagerFactory (  )  ;", "}", "Map < String ,    Object >    properties    =    getJpaPropertyMap (  )  ;", "return    !  ( CollectionUtils . isEmpty ( properties )  )     ?    emf . createEntityManager ( properties )     :    emf . createEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["createEntityManagerForTransaction"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . dataSource ;", "}", "METHOD_END"], "methodName": ["getDataSource"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . entityManagerFactory ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . jpaDialect ;", "}", "METHOD_END"], "methodName": ["getJpaDialect"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . jpaPropertyMap ;", "}", "METHOD_END"], "methodName": ["getJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "return   this . persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    getEntityManagerFactory (  )  ;", "Assert . state (  ( emf    !  =    null )  ,     \" No   EntityManagerFactory   set \"  )  ;", "return   emf ;", "}", "METHOD_END"], "methodName": ["obtainEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dataSource    !  =    null )     &  &     ( dataSource   instanceof   TransactionAwareDataSourceProxy )  )     {", "this . dataSource    =     (  ( TransactionAwareDataSourceProxy )     ( dataSource )  )  . getTargetDataSource (  )  ;", "} else    {", "this . dataSource    =    dataSource ;", "}", "}", "METHOD_END"], "methodName": ["setDataSource"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerFactory    =    emf ;", "}", "METHOD_END"], "methodName": ["setEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . jpaDialect    =     ( jpaDialect    !  =    null )     ?    jpaDialect    :    new   DefaultJpaDialect (  )  ;", "}", "METHOD_END"], "methodName": ["setJpaDialect"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . mergePropertiesIntoMap ( jpaProperties ,    this . jpaPropertyMap )  ;", "}", "METHOD_END"], "methodName": ["setJpaProperties"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "if   Properties    !  =    null )     {", "thisPropertyMap . putAllProperties )  ;", "}", "}", "METHOD_END"], "methodName": ["setJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitName    =    persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.JpaTransactionManager"}, {"methodBody": ["METHOD_START", "{", "factory    =    mock ( EntityManagerFactory . class )  ;", "manager    =    mock ( EntityManager . class )  ;", "tx    =    mock ( EntityTransaction . class )  ;", "tm    =    new    ( factory )  ;", "tt    =    new   TransactionTemplate ( tm )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setIsolationLevel ( ISOLATION _ SERIALIZABLE )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "try    {", "tt . execute ( new   CallbackWithoutResult (  )     {", "@ Override", "protected   void   doInWithoutResult ( Status   status )     {", "}", "}  )  ;", "fail (  \" Should   have   thrown   InvalidIsolationLevelException \"  )  ;", "}    catch    ( InvalidIsolationLevelException   ex )     {", "}", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidIsolation"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "return   tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "}", "}  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testParticipatingTransactionWithCommit"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ REQUIRES _ NEW )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "given ( manager . get (  )  )  . willReturn ( tx )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "return   tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager ,    times (  2  )  )  . close (  )  ;", "verify ( tx ,    times (  2  )  )  . begin (  )  ;", "}", "METHOD_END"], "methodName": ["testParticipatingTransactionWithRequiresNew"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ REQUIRES _ NEW )  ;", "given ( manager . get (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "SynchronizationManager . bindResource ( factory ,    new   EntityManagerHolder ( manager )  )  ;", "try    {", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  ;", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "return   tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "}    finally    {", "SynchronizationManager . unbindResource ( factory )  ;", "}", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx ,    times (  2  )  )  . begin (  )  ;", "verify ( tx ,    times (  2  )  )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testParticipatingTransactionWithRequiresNewAndPrebound"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . isActive (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "try    {", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "return   tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  ;", "throw   new   RuntimeException (  \" some   exception \"  )  ;", "}", "}  )  ;", "}", "}  )  ;", "fail (  \" Should   have   propagated   RuntimeException \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "}", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . setRollbackOnly (  )  ;", "verify ( tx )  . rollback (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testParticipatingTransactionWithRollback"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . isActive (  )  )  . willReturn ( true )  ;", "given ( tx . getRollbackOnly (  )  )  . willReturn ( true )  ;", "willThrow ( new   RollbackException (  )  )  . given ( tx )  . commit (  )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "try    {", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "return   tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  . flush (  )  ;", "status . setRollbackOnly (  )  ;", "return   null ;", "}", "}  )  ;", "}", "}  )  ;", "fail (  \" Should   have   thrown   TransactionSystemException \"  )  ;", "}    catch    ( TransactionSystemException   tse )     {", "assertTrue (  (  ( tse . getCause (  )  )    instanceof   RollbackException )  )  ;", "}", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( tx )  . setRollbackOnly (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testParticipatingTransactionWithRollbackOnly"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "given ( manager . get (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertFalse ( SynchronizationManager . hasResource ( factory )  )  ;", "Template   tt 2     =    new   Template ( tm )  ;", "tt 2  . setPropagationBehavior ( PROPAGATION _ REQUIRES _ NEW )  ;", "return   tt 2  . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testPropagationSupportsAndRequiresNew"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "given ( manager . get (  )  )  . willReturn ( tx )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  ;", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "Template   tt 2     =    new   Template ( tm )  ;", "tt 2  . setPropagationBehavior ( PROPAGATION _ REQUIRES _ NEW )  ;", "return   tt 2  . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager ,    times (  2  )  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testPropagationSupportsAndRequiresNewAndEarlyAccess"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "Object   result    =    tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommit"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "TransactionSynchronizationManager . bindResource ( factory ,    new   EntityManagerHolder ( manager )  )  ;", "try    {", "Object   result    =    tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertTrue ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  ;", "return   l ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "}    finally    {", "TransactionSynchronizationManager . unbindResource ( factory )  ;", "}", "verify ( tx )  . begin (  )  ;", "verify ( tx )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithPrebound"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "SynchronizationManager . bindResource ( factory ,    new   EntityManagerHolder ( manager )  )  ;", "try    {", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "assertTrue ( SynchronizationManager . isSynchronizationActive (  )  )  ;", "assertTrue (  (  !  ( status . isNew (  )  )  )  )  ;", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "}    finally    {", "SynchronizationManager . unbindResource ( factory )  ;", "}", "verify ( manager )  . flush (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithPreboundAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "Object   result    =    tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue ( SynchronizationManager . isSynchronizationActive (  )  )  ;", "assertTrue (  (  !  ( status . isNew (  )  )  )  )  ;", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithPropagationSupports"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . getRollbackOnly (  )  )  . willReturn ( true )  ;", "willThrow ( new   RollbackException (  )  )  . given ( tx )  . commit (  )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "try    {", "Object   result    =    tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  . flush (  )  ;", "return   l ;", "}", "}  )  ;", "assertSame ( l ,    result )  ;", "}    catch    ( TransactionSystemException   tse )     {", "assertTrue (  (  ( tse . getCause (  )  )    instanceof   RollbackException )  )  ;", "}", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithRollbackException"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "tt . execute ( new   TransactionCallbackWithoutResult (  )     {", "@ Override", "public   void   doInTransactionWithoutResult ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "status . flush (  )  ;", "}", "}  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionFlush"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . isActive (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "try    {", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  ;", "throw   new   RuntimeException (  \" some   exception \"  )  ;", "}", "}  )  ;", "fail (  \" Should   have   propagated   RuntimeException \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "assertEquals (  \" some   exception \"  ,    ex . getMessage (  )  )  ;", "}", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . rollback (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollback"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . isActive (  )  )  . willReturn ( true )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  . flush (  )  ;", "status . setRollbackOnly (  )  ;", "return   l ;", "}", "}  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( tx )  . rollback (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollbackOnly"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "final   List < String >    l    =    new   ArrayList <  >  (  )  ;", "l . add (  \" test \"  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "try    {", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  ;", "throw   new   RuntimeException (  \" some   exception \"  )  ;", "}", "}  )  ;", "fail (  \" Should   have   propagated   RuntimeException \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "}", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollbackWithAlreadyRolledBack"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( tx . isActive (  )  )  . willReturn ( true )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "TransactionSynchronizationManager . bindResource ( factory ,    new   EntityManagerHolder ( manager )  )  ;", "try    {", "tt . execute ( new   TransactionCallback (  )     {", "@ Override", "public   Object   doInTransaction ( TransactionStatus   status )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertTrue ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "EntityManagerFactoryUtils . getTransactionalEntityManager ( factory )  ;", "status . setRollbackOnly (  )  ;", "return   null ;", "}", "}  )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertTrue (  (  !  ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "}    finally    {", "TransactionSynchronizationManager . unbindResource ( factory )  ;", "}", "verify ( tx )  . begin (  )  ;", "verify ( tx )  . rollback (  )  ;", "verify ( manager )  . clear (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollbackWithPrebound"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "SynchronizationManager . bindResource ( factory ,    new   EntityManagerHolder ( manager )  )  ;", "try    {", "tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "assertTrue ( SynchronizationManager . isSynchronizationActive (  )  )  ;", "assertTrue (  (  !  ( status . isNew (  )  )  )  )  ;", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "status . setRollbackOnly (  )  ;", "return   null ;", "}", "}  )  ;", "assertTrue ( SynchronizationManager . hasResource ( factory )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "}    finally    {", "SynchronizationManager . unbindResource ( factory )  ;", "}", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . clear (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollbackWithPreboundAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue ( SynchronizationManager . isSynchronizationActive (  )  )  ;", "assertTrue (  (  !  ( status . isNew (  )  )  )  )  ;", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "status . setRollbackOnly (  )  ;", "return   null ;", "}", "}  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollbackWithPropagationSupports"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "tt . setPropagationBehavior ( PROPAGATION _ REQUIRES _ NEW )  ;", "EntityManager   manager 2     =    mock ( EntityManager . class )  ;", "Entity   tx 2     =    mock ( Entity . class )  ;", "given ( manager . get (  )  )  . willReturn ( tx )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager ,    manager 2  )  ;", "given ( manager 2  . get (  )  )  . willReturn ( tx 2  )  ;", "given ( manager 2  . isOpen (  )  )  . willReturn ( true )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "SynchronizationManager . registerSynchronization ( new   SynchronizationAdapter (  )     {", "@ Override", "public   void   afterCompletion ( int   status )     {", "tt . execute ( new   Callback (  )     {", "@ Override", "public   Object   doIn ( Status   status )     {", "EntityManagerFactoryUtils . getalEntityManager ( factory )  . flush (  )  ;", "return   null ;", "}", "}  )  ;", "}", "}  )  ;", "return   null ;", "}", "}  )  ;", "assertTrue (  (  !  ( SynchronizationManager . hasResource ( factory )  )  )  )  ;", "assertTrue (  (  !  ( SynchronizationManager . isSynchronizationActive (  )  )  )  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( tx 2  )  . begin (  )  ;", "verify ( tx 2  )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "verify ( manager 2  )  . flush (  )  ;", "verify ( manager 2  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionWithRequiresNewInAfterCompletion"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isActualTransactionActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["verifyTransactionSynchronizationManagerState"], "fileName": "org.springframework.orm.jpa.JpaTransactionManagerTests"}, {"methodBody": ["METHOD_START", "{", "return   EntityManagerFactory . class ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactoryInterface"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   EntityManager . class ;", "}", "METHOD_END"], "methodName": ["getEntityManagerInterface"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getJpaDialect"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyMap (  )  ;", "}", "METHOD_END"], "methodName": ["getJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   getJpaPropertyMap (  )  ;", "}", "METHOD_END"], "methodName": ["getJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getPersistenceProviderRootPackage"], "fileName": "org.springframework.orm.jpa.JpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getPersistenceUnitName (  )  )     !  =    null )     {", "return   persistenceUnit . obtainPersistenceUnitInfo ( getPersistenceUnitName (  )  )  ;", "} else    {", "return   persistenceUnit . obtainDefaultPersistenceUnitInfo (  )  ;", "}", "}", "METHOD_END"], "methodName": ["determinePersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setDataSourceLookup ( new   SingleDataSourceLookup ( dataSource )  )  ;", "this . internalPersistenceUnitManager . setDefaultDataSource ( dataSource )  ;", "}", "METHOD_END"], "methodName": ["setDataSource"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setDataSourceLookup ( new   SingleDataSourceLookup ( jtaDataSource )  )  ;", "this . internalPersistenceUnitManager . setDefaultJtaDataSource ( jtaDataSource )  ;", "}", "METHOD_END"], "methodName": ["setJtaDataSource"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setMappingResources ( mappingResources )  ;", "}", "METHOD_END"], "methodName": ["setMappingResources"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setPackagesToScan ( packagesToScan )  ;", "}", "METHOD_END"], "methodName": ["setPackagesToScan"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitManager    =    persistenceUnitManager ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitManager"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setPersistenceUnitPostProcessors ( postProcessors )  ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitPostProcessors"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setDefaultPersistenceUnitRootLocation ( defaultPersistenceUnitRootLocation )  ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitRootLocation"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setPersistenceXmlLocation ( persistenceXmlLocation )  ;", "}", "METHOD_END"], "methodName": ["setPersistenceXmlLocation"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setSharedCacheMode ( sharedCacheMode )  ;", "}", "METHOD_END"], "methodName": ["setSharedCacheMode"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . internalPersistenceUnitManager . setValidationMode ( validationMode )  ;", "}", "METHOD_END"], "methodName": ["setValidationMode"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"}, {"methodBody": ["METHOD_START", "{", "LocalContainerEntityManagerFactoryBeanTests . actualPui    =    null ;", "LocalContainerEntityManagerFactoryBeanTests . actualProps    =    null ;", "LocalContainerEntityManagerFactoryBean   containerEmfb    =    new   LocalContainerEntityManagerFactoryBean (  )  ;", "containerEmfb . setPersistenceUnitName ( entityManagerName )  ;", "containerEmfb . setPersistenceProviderClass ( LocalContainerEntityManagerFactoryBeanTests . DummyContainerPersistenceProvider . class )  ;", "if    ( props    !  =    null )     {", "containerEmfb . setJpaProperties ( props )  ;", "}", "containerEmfb . setLoadTimeWeaver ( new   InstrumentationLoadTimeWeaver (  )  )  ;", "containerEmfb . setPersistenceXmlLocation ( persistenceXml )  ;", "containerEmfb . afterPropertiesSet (  )  ;", "assertEquals ( entityManagerName ,    LocalContainerEntityManagerFactoryBeanTests . actualPui . getPersistenceUnitName (  )  )  ;", "if    ( props    !  =    null )     {", "assertEquals ( props ,    LocalContainerEntityManagerFactoryBeanTests . actualProps )  ;", "}", "return   containerEmfb ;", "}", "METHOD_END"], "methodName": ["createEntityManagerFactoryBean"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "LocalContainerEntityManagerFactoryBean   emfb    =    createEntityManagerFactoryBean (  \" org / springframework / orm / jpa / domain / persistence . xml \"  ,    null ,     \" Person \"  )  ;", "return   emfb ;", "}", "METHOD_END"], "methodName": ["parseValidPersistenceUnit"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "Object   testEntity    =    new   Object (  )  ;", "EntityManager   sharedEm    =    mock ( EntityManager . class )  ;", "given ( sharedEm . getTransaction (  )  )  . willReturn ( new    . NoOpEntityTransaction (  )  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( sharedEm ,    mockEm )  ;", "LocalContainerEntityManagerFactoryBean   cefb    =    parseValidPersistenceUnit (  )  ;", "MutablePersistenceUnitInfo   pui    =     (  ( MutablePersistenceUnitInfo )     ( cefb . getPersistenceUnitInfo (  )  )  )  ;", "pui . setTransactionType ( JTA )  ;", "JpaTransactionManager   jpatm    =    new   JpaTransactionManager (  )  ;", "jpatm . setEntityManagerFactory ( cefb . getObject (  )  )  ;", "TransactionStatus   txStatus    =    jpatm . getTransaction ( new   DefaultTransactionAttribute (  )  )  ;", "EntityManagerFactory   emf    =    cefb . getObject (  )  ;", "assertSame (  \" EntityManagerFactory   reference   must   be   cached   after   init \"  ,    emf ,    cefb . getObject (  )  )  ;", "assertNotSame (  \" EMF   must   be   proxied \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf ,    emf )  ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "assertFalse ( em . contains ( testEntity )  )  ;", "jpatm . commit ( txStatus )  ;", "cefb . destroy (  )  ;", "verify ( mockEm )  . joinTransaction (  )  ;", "verify ( mockEm )  . contains ( testEntity )  ;", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testApplicationManagedEntityManagerWithJtaTransaction"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "Object   testEntity    =    new   Object (  )  ;", "EntityTransaction   mockTx    =    mock ( EntityTransaction . class )  ;", "EntityManager   sharedEm    =    mock ( EntityManager . class )  ;", "given ( sharedEm . getTransaction (  )  )  . willReturn ( new    . NoOpEntityTransaction (  )  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( mockEm . getTransaction (  )  )  . willReturn ( mockTx )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( sharedEm ,    mockEm )  ;", "LocalContainerEntityManagerFactoryBean   cefb    =    parseValidPersistenceUnit (  )  ;", "JpaTransactionManager   jpatm    =    new   JpaTransactionManager (  )  ;", "jpatm . setEntityManagerFactory ( cefb . getObject (  )  )  ;", "TransactionStatus   txStatus    =    jpatm . getTransaction ( new   DefaultTransactionAttribute (  )  )  ;", "EntityManagerFactory   emf    =    cefb . getObject (  )  ;", "assertSame (  \" EntityManagerFactory   reference   must   be   cached   after   init \"  ,    emf ,    cefb . getObject (  )  )  ;", "assertNotSame (  \" EMF   must   be   proxied \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf ,    emf )  ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "assertFalse ( em . contains ( testEntity )  )  ;", "jpatm . commit ( txStatus )  ;", "cefb . destroy (  )  ;", "verify ( mockTx )  . begin (  )  ;", "verify ( mockTx )  . commit (  )  ;", "verify ( mockEm )  . contains ( testEntity )  ;", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testApplicationManagedEntityManagerWithTransaction"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "Object   testEntity    =    new   Object (  )  ;", "EntityTransaction   mockTx    =    mock ( EntityTransaction . class )  ;", "willThrow ( new   OptimisticLockException (  )  )  . given ( mockTx )  . commit (  )  ;", "EntityManager   sharedEm    =    mock ( EntityManager . class )  ;", "given ( sharedEm . getTransaction (  )  )  . willReturn ( new    . NoOpEntityTransaction (  )  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( mockEm . getTransaction (  )  )  . willReturn ( mockTx )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( sharedEm ,    mockEm )  ;", "LocalContainerEntityManagerFactoryBean   cefb    =    parseValidPersistenceUnit (  )  ;", "JpaTransactionManager   jpatm    =    new   JpaTransactionManager (  )  ;", "jpatm . setEntityManagerFactory ( cefb . getObject (  )  )  ;", "TransactionStatus   txStatus    =    jpatm . getTransaction ( new   DefaultTransactionAttribute (  )  )  ;", "EntityManagerFactory   emf    =    cefb . getObject (  )  ;", "assertSame (  \" EntityManagerFactory   reference   must   be   cached   after   init \"  ,    emf ,    cefb . getObject (  )  )  ;", "assertNotSame (  \" EMF   must   be   proxied \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf ,    emf )  ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "em . joinTransaction (  )  ;", "assertFalse ( em . contains ( testEntity )  )  ;", "try    {", "jpatm . commit ( txStatus )  ;", "fail (  \" Should   have   thrown   OptimisticLockingFailureException \"  )  ;", "}    catch    ( OptimisticLockingFailureException   ex )     {", "}", "cefb . destroy (  )  ;", "verify ( mockTx )  . begin (  )  ;", "verify ( mockEm )  . contains ( testEntity )  ;", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testApplicationManagedEntityManagerWithTransactionAndCommitException"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "Object   testEntity    =    new   Object (  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "cefb    =    parseValidPersistenceUnit (  )  ;", "EntityManagerFactory   emf    =    cefb . getObject (  )  ;", "assertSame (  \" EntityManagerFactory   reference   must   be   cached   after   init \"  ,    emf ,    cefb . getObject (  )  )  ;", "assertNotSame (  \" EMF   must   be   proxied \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf ,    emf )  ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "assertFalse ( em . contains ( testEntity )  )  ;", "cefb . destroy (  )  ;", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testApplicationManagedEntityManagerWithoutTransaction"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "LocalContainerEntityManagerFactoryBean   cefb    =    parseValidPersistenceUnit (  )  ;", "EntityManagerFactory   emf    =    cefb . getObject (  )  ;", "assertSame (  \" EntityManagerFactory   reference   must   be   cached   after   init \"  ,    emf ,    cefb . getObject (  )  )  ;", "assertNotSame (  \" EMF   must   be   proxied \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf ,    emf )  ;", "assertTrue ( emf . equals ( emf )  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "bf . setSerializationId (  \" emf - bf \"  )  ;", "bf . registerSingleton (  \" emf \"  ,    cefb )  ;", "cefb . setBeanFactory ( bf )  ;", "cefb . setBeanName (  \" emf \"  )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( emf )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityManagerFactoryIsProxied"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "LocalContainerEntityManagerFactoryBean   cefb    =    parseValidPersistenceUnit (  )  ;", "cefb . getObject (  )  ;", "assertNull (  \" No   dialect   set \"  ,    cefb . getJpaDialect (  )  )  ;", "RuntimeException   in 1     =    new   RuntimeException (  \" in 1  \"  )  ;", "PersistenceException   in 2     =    new   PersistenceException (  )  ;", "assertNull (  \" No   translation   here \"  ,    cefb . translateExceptionIfPossible ( in 1  )  )  ;", "DataAccessException   dex    =    cefb . translateExceptionIfPossible ( in 2  )  ;", "assertNotNull ( dex )  ;", "assertSame ( in 2  ,    dex . getCause (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExceptionTranslationWithNoDialect"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "create (  \" org / springframework / orm / jpa / domain / persistence . xml \"  ,    null ,     \" call   me   Bob \"  )  ;", "fail (  \" Should   not   create   factory   with   this   name \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testInvalidPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "LocalContainerEntityManagerFactoryBean   containerEmfb    =    new   LocalContainerEntityManagerFactoryBean (  )  ;", "String   entityManagerName    =     \" call   me   Bob \"  ;", "containerEmfb . setPersistenceUnitName ( entityManagerName )  ;", "containerEmfb . setPersistenceProviderClass (  . DummyContainerPersistenceProvider . class )  ;", "try    {", "containerEmfb . afterPropertiesSet (  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testRejectsMissingPersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "parseValidPersistenceUnit (  )  ;", "}", "METHOD_END"], "methodName": ["testValidPersistenceUnit"], "fileName": "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "LocalEntityManagerFactoryBeanTests . actualName    =    null ;", "LocalEntityManagerFactoryBeanTests . actualProps    =    null ;", "LocalEntityManagerFactoryBean   lemfb    =    new   LocalEntityManagerFactoryBean (  )  ;", "String   entityManagerName    =     \" call   me   Bob \"  ;", "lemfb . setPersistenceUnitName ( entityManagerName )  ;", "lemfb . setPersistenceProviderClass ( LocalEntityManagerFactoryBeanTests . DummyPersistenceProvider . class )  ;", "if    ( props    !  =    null )     {", "lemfb . setJpaProperties ( props )  ;", "}", "lemfb . afterPropertiesSet (  )  ;", "assertSame ( entityManagerName ,    LocalEntityManagerFactoryBeanTests . actualName )  ;", "if    ( props    !  =    null )     {", "assertEquals ( props ,    LocalEntityManagerFactoryBeanTests . actualProps )  ;", "}", "checkInvariants ( lemfb )  ;", "lemfb . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["testValidUsage"], "fileName": "org.springframework.orm.jpa.LocalEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "testValidUsage ( null )  ;", "}", "METHOD_END"], "methodName": ["testValidUsageWithDefaultProperties"], "fileName": "org.springframework.orm.jpa.LocalEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "testValidUsage ( new   Properties (  )  )  ;", "}", "METHOD_END"], "methodName": ["testValidUsageWithExplicitProperties"], "fileName": "org.springframework.orm.jpa.LocalEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "verify ( AbstractEntityManagerFactoryBeanTests . mockEmf )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["verifyClosed"], "fileName": "org.springframework.orm.jpa.LocalEntityManagerFactoryBeanTests"}, {"methodBody": ["METHOD_START", "{", "return   SharedEntityManagerCreator . createSharedEntityManager ( emf ,    null ,    true )  ;", "}", "METHOD_END"], "methodName": ["createSharedEntityManager"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   SharedEntityManagerCreator . createSharedEntityManager ( emf ,    properties ,    true )  ;", "}", "METHOD_END"], "methodName": ["createSharedEntityManager"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    emIfc    =     ( emf   instanceof   EntityManagerFactoryInfo )     ?     (  ( EntityManagerFactoryInfo )     ( emf )  )  . getEntityManagerInterface (  )     :    EntityManager . class ;", "return    . createSharedEntityManager ( emf ,    properties ,    synchronizedWithTransaction ,     ( emIfc    =  =    null    ?     . NO _ ENTITY _ MANAGER _ INTERFACES    :    new   Class <  ?  >  [  ]  {    emIfc    }  )  )  ;", "}", "METHOD_END"], "methodName": ["createSharedEntityManager"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   cl    =    null ;", "if    ( emf   instanceof   EntityManagerFactoryInfo )     {", "cl    =     (  ( EntityManagerFactoryInfo )     ( emf )  )  . getBeanClassLoader (  )  ;", "}", "Class <  ?  >  [  ]    ifcs    =    new   Class <  ?  >  [  ( entityManagerInterfaces . length )     +     1  ]  ;", "System . arraycopy ( entityManagerInterfaces ,     0  ,    ifcs ,     0  ,    entityManagerInterfaces . length )  ;", "ifcs [ entityManagerInterfaces . length ]     =    EntityManagerProxy . class ;", "return    (  ( EntityManager )     ( Proxy . newProxyInstance (  ( cl    !  =    null    ?    cl    :     . class . getClassLoader (  )  )  ,    ifcs ,    new    . SharedEntityManagerInvocationHandler ( emf ,    properties ,    synchronizedWithTransaction )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createSharedEntityManager"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "return   SharedEntityManagerCreator . createSharedEntityManager ( emf ,    properties ,    true ,    entityManagerInterfaces )  ;", "}", "METHOD_END"], "methodName": ["createSharedEntityManager"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreator"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class ,    withSettings (  )  . extraInterfaces ( EntityManagerFactoryInfo . class )  )  ;", "assertThat (  . createSharedEntityManager ( emf )  ,    is ( notNullValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["proxyingWorksIfInfoReturnsNullEntityManagerInterface"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . flush (  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnFlush"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . joinTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnJoinTransaction"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . merge ( new   Object (  )  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnMerge"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . persist ( new   Object (  )  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnPersist"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . refresh ( new   Object (  )  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnRefresh"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    mock ( EntityManagerFactory . class )  ;", "EntityManager   em    =     . createSharedEntityManager ( emf )  ;", "em . remove ( new   Object (  )  )  ;", "}", "METHOD_END"], "methodName": ["transactionRequiredExceptionOnRemove"], "fileName": "org.springframework.orm.jpa.SharedEntityManagerCreatorTests"}, {"methodBody": ["METHOD_START", "{", "return   serial _ number ;", "}", "METHOD_END"], "methodName": ["getSerialNumber"], "fileName": "org.springframework.orm.jpa.domain.DriversLicense"}, {"methodBody": ["METHOD_START", "{", "return   this . driversLicense ;", "}", "METHOD_END"], "methodName": ["getDriversLicense"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   this . first _ name ;", "}", "METHOD_END"], "methodName": ["getFirstName"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   this . last _ name ;", "}", "METHOD_END"], "methodName": ["getLastName"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   testBean ;", "}", "METHOD_END"], "methodName": ["getTestBean"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . driversLicense    =    driversLicense ;", "}", "METHOD_END"], "methodName": ["setDriversLicense"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . first _ name    =    firstName ;", "}", "METHOD_END"], "methodName": ["setFirstName"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . last _ name    =    lastName ;", "}", "METHOD_END"], "methodName": ["setLastName"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . testBean    =    testBean ;", "}", "METHOD_END"], "methodName": ["setTestBean"], "fileName": "org.springframework.orm.jpa.domain.Person"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactoryInfo   emfi    =     (  ( EntityManagerFactoryInfo )     ( entityManagerFactory )  )  ;", "assertTrue ( emfi . getNativeEntityManagerFactory (  )  . getClass (  )  . getName (  )  . endsWith (  \" EntityManagerFactoryImpl \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCanCastNativeEntityManagerFactoryToEclipseLinkEntityManagerFactoryImpl"], "fileName": "org.springframework.orm.jpa.eclipselink.EclipseLinkEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( sharedEntityManager )    instanceof   JpaEntityManager )  )  ;", "JpaEntityManager   eclipsel    =     (  ( JpaEntityManager )     ( sharedEntityManager )  )  ;", "assertNotNull ( eclipsel . getActiveSession (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCanCastSharedEntityManagerProxyToEclipseLinkEntityManager"], "fileName": "org.springframework.orm.jpa.eclipselink.EclipseLinkEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactoryInfo   emfi    =     (  ( EntityManagerFactoryInfo )     ( entityManagerFactory )  )  ;", "assertTrue (  (  ( emfi . getNativeEntityManagerFactory (  )  )    instanceof    )  )  ;", "assertTrue (  (  ( emfi . getNativeEntityManagerFactory (  )  )    instanceof   SessionFactory )  )  ;", "}", "METHOD_END"], "methodName": ["testCanCastNativeEntityManagerFactoryToHibernateEntityManagerFactoryImpl"], "fileName": "org.springframework.orm.jpa.hibernate.HibernateEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( sharedEntityManager )    instanceof   HibernateEntityManager )  )  ;", "assertTrue (  (  (  (  ( EntityManagerProxy )     ( sharedEntityManager )  )  . getTargetEntityManager (  )  )    instanceof   Session )  )  ;", "}", "METHOD_END"], "methodName": ["testCanCastSharedEntityManagerProxyToHibernateEntityManager"], "fileName": "org.springframework.orm.jpa.hibernate.HibernateEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    entityManagerFactory . createEntityManager (  )  ;", "EntityManager   proxy    =    ProxyFactory . getProxy ( EntityManager . class ,    new   SingletonTargetSource ( em )  )  ;", "assertTrue (  ( em   instanceof    )  )  ;", "assertFalse (  ( proxy   instanceof    )  )  ;", "assertTrue (  (  ( proxy . unwrap (  . class )  )     !  =    null )  )  ;", "assertSame ( em ,    proxy . unwrap (  . class )  )  ;", "assertSame ( em . getDelegate (  )  ,    proxy . getDelegate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCanUnwrapAopProxy"], "fileName": "org.springframework.orm.jpa.hibernate.HibernateEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    this . entityManagerFactory 2  . createEntityManager (  )  ;", "try    {", "em . createQuery (  \" select   tb   from   TestBean \"  )  ;", "fail (  \" Should   have   thrown   IllegalArgumentException \"  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", "}    finally    {", "em . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testEntityManagerFactory2"], "fileName": "org.springframework.orm.jpa.hibernate.HibernateMultiEntityManagerFactoryIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "SpringPersistenceUnitInfo   scannedUnit    =    new   SpringPersistenceUnitInfo (  )  ;", "if    (  ( this . defaultPersistenceUnitName )     !  =    null )     {", "scannedUnit . setPersistenceUnitName ( this . defaultPersistenceUnitName )  ;", "}", "scannedUnit . setExcludeUnlistedClasses ( true )  ;", "if    (  ( this . packagesToScan )     !  =    null )     {", "for    ( String   pkg    :    this . packagesToScan )     {", "scanPackage ( scannedUnit ,    pkg )  ;", "}", "}", "if    (  ( this . mappingResources )     !  =    null )     {", "for    ( String   mappingFileName    :    this . mappingResources )     {", "scannedUnit . addMappingFileName ( mappingFileName )  ;", "}", "} else    {", "Resource   ormXml    =    getOrmXmlForDefaultPersistenceUnit (  )  ;", "if    ( ormXml    !  =    null )     {", "scannedUnit . addMappingFileName (  . DEFAULT _ ORM _ XML _ RESOURCE )  ;", "if    (  ( scannedUnit . getPersistenceUnitRootUrl (  )  )     =  =    null )     {", "try    {", "scannedUnit . setPersistenceUnitRootUrl ( PersistenceUnitReader . determinePersistenceUnitRootUrl ( ormXml )  )  ;", "}    catch    ( IOException   ex )     {", "logger . debug (  \" Failed   to   determine   persistence   unit   root   URL   from   orm . xml   location \"  ,    ex )  ;", "}", "}", "}", "}", "return   scannedUnit ;", "}", "METHOD_END"], "methodName": ["buildDefaultPersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . defaultPersistenceUnitRootLocation )     =  =    null )     {", "return   null ;", "}", "try    {", "URL   url    =    this . resourcePatternResolver . getResource ( this . defaultPersistenceUnitRootLocation )  . getURL (  )  ;", "return   ResourceUtils . isJarURL ( url )     ?    ResourceUtils . extractJarFileURL ( url )     :    url ;", "}    catch    ( IOException   ex )     {", "throw   new   PersistenceException (  \" Unable   to   resolve   persistence   unit   root   URL \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["determineDefaultPersistenceUnitRootUrl"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   this . dataSourceLookup ;", "}", "METHOD_END"], "methodName": ["getDataSourceLookup"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultDataSource ;", "}", "METHOD_END"], "methodName": ["getDefaultDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   this . defaultJtaDataSource ;", "}", "METHOD_END"], "methodName": ["getDefaultJtaDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   this . loadTimeWeaver ;", "}", "METHOD_END"], "methodName": ["getLoadTimeWeaver"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "Resource   ormXml    =    this . resourcePatternResolver . getResource (  (  ( this . defaultPersistenceUnitRootLocation )     +     ( DefaultPersistenceUnitManager . DEFAULT _ ORM _ XML _ RESOURCE )  )  )  ;", "if    ( ormXml . exists (  )  )     {", "try    {", "Resource   persistenceXml    =    ormXml . createRelative ( DefaultPersistenceUnitManager . PERSISTENCE _ XML _ FILENAME )  ;", "if    (  !  ( persistenceXml . exists (  )  )  )     {", "return   ormXml ;", "}", "}    catch    ( IOException   ex )     {", "return   ormXml ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getOrmXmlForDefaultPersistenceUnit"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitInfo   pui    =    this . persistenceUnitInfos . get ( persistenceUnitName )  ;", "return    (  ( MutablePersistenceUnitInfo )     ( pui )  )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   this . persistenceUnitPostProcessors ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitPostProcessors"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isPersistenceUnitOverrideAllowed"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "for    ( TypeFilter   filter    :    DefaultPersistenceUnitManager . entityTypeFilters )     {", "if    ( filter . match ( reader ,    readerFactory )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesFilter"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitPostProcessor [  ]    postProcessors    =    getPersistenceUnitPostProcessors (  )  ;", "if    ( postProcessors    !  =    null )     {", "for    ( PersistenceUnitPostProcessor   postProcessor    :    postProcessors )     {", "postProcessor . postProcessPersistenceUnitInfo ( pui )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["postProcessPersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitInfoNames . clear (  )  ;", "this . persistenceUnitInfos . clear (  )  ;", "List < SpringPersistenceUnitInfo >    puis    =    readPersistenceUnitInfos (  )  ;", "for    ( SpringPersistenceUnitInfo   pui    :    puis )     {", "if    (  ( pui . getPersistenceUnitRootUrl (  )  )     =  =    null )     {", "pui . setPersistenceUnitRootUrl ( determineRootUrl (  )  )  ;", "}", "if    (  (  ( pui . getJtaDataSource (  )  )     =  =    null )     &  &     (  ( this . defaultJtaDataSource )     !  =    null )  )     {", "pui . setJtaDataSource ( this . defaultJtaDataSource )  ;", "}", "if    (  (  ( pui . getNonJtaDataSource (  )  )     =  =    null )     &  &     (  ( this . defaultDataSource )     !  =    null )  )     {", "pui . setNonJtaDataSource ( this . defaultDataSource )  ;", "}", "if    (  ( this . sharedCacheMode )     !  =    null )     {", "pui . setSharedCacheMode ( this . sharedCacheMode )  ;", "}", "if    (  ( this . validationMode )     !  =    null )     {", "pui . setValidationMode ( this . validationMode )  ;", "}", "if    (  ( this . loadTimeWeaver )     !  =    null )     {", "pui . init ( this . loadTimeWeaver )  ;", "} else    {", "pui . init ( this . resourcePatternResolver . getClassLoader (  )  )  ;", "}", "postProcessPersistenceUnitInfo ( pui )  ;", "String   name    =    pui . getPersistenceUnitName (  )  ;", "if    (  (  !  ( this . persistenceUnitInfoNames . add ( name )  )  )     &  &     (  !  ( isPersistenceUnitOverrideAllowed (  )  )  )  )     {", "StringBuilder   msg    =    new   StringBuilder (  )  ;", "msg . append (  \" Conflicting   persistence   unit   definitions   for   name    '  \"  )  . append ( name )  . append (  \"  '  :     \"  )  ;", "msg . append ( pui . getPersistenceUnitRootUrl (  )  )  . append (  \"  ,     \"  )  ;", "msg . append ( this . persistenceUnitInfos . get ( name )  . getPersistenceUnitRootUrl (  )  )  ;", "throw   new   IllegalStateException ( msg . toString (  )  )  ;", "}", "this . persistenceUnitInfos . put ( name ,    pui )  ;", "}", "}", "METHOD_END"], "methodName": ["preparePersistenceUnitInfos"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "List < SpringPersistenceUnitInfo >    infos    =    new   LinkedList <  >  (  )  ;", "String   defaultName    =    this . defaultPersistenceUnitName ;", "boolean   buildDefaultUnit    =     (  ( this . packagesToScan )     !  =    null )     |  |     (  ( this . mappingResources )     !  =    null )  ;", "boolean   foundDefaultUnit    =    false ;", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( this . resourcePatternResolver ,    this . dataSourceLookup )  ;", "SpringPersistenceUnitInfo [  ]    readInfos    =    reader . readPersistenceUnitInfos ( this . persistenceXmlLocations )  ;", "for    ( SpringPersistenceUnitInfo   readInfo    :    readInfos )     {", "infos . add ( readInfo )  ;", "if    (  ( defaultName    !  =    null )     &  &     ( defaultName . equals ( readInfo . getPersistenceUnitName (  )  )  )  )     {", "foundDefaultUnit    =    true ;", "}", "}", "if    ( buildDefaultUnit )     {", "if    ( foundDefaultUnit )     {", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  (  \" Found   explicit   default   unit   with   name    '  \"     +    defaultName )     +     \"  '    in   persistence . xml    -     \"  )     +     \" overriding   local   default   unit   settings    (  ' packagesToScan '  /  ' mappingResources '  )  \"  )  )  ;", "}", "} else    {", "infos . add ( buildInfo (  )  )  ;", "}", "}", "return   infos ;", "}", "METHOD_END"], "methodName": ["readPersistenceUnitInfos"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . componentsIndex )     !  =    null )     {", "Set < String >    candidates    =    new   HashSet <  >  (  )  ;", "for    ( AnnotationTypeFilter   filter    :     . entityTypeFilters )     {", "candidates . addAll ( this . componentsIndex . getCandidateTypes ( pkg ,    filter . getAnnotationType (  )  . getName (  )  )  )  ;", "}", "candidates . forEach ( scannedUnit :  : addManagedClassName )  ;", "Set < String >    managedPackages    =    this . componentsIndex . getCandidateTypes ( pkg ,     \" package - info \"  )  ;", "managedPackages . forEach ( scannedUnit :  : addManagedPackage )  ;", "return ;", "}", "try    {", "String   pattern    =     (  ( ResourcePatternResolver . CLASSPATH _ ALL _ URL _ PREFIX )     +     ( ClassUtils . convertClassNameToResourcePath ( pkg )  )  )     +     (  . CLASS _ RESOURCE _ PATTERN )  ;", "Resource [  ]    resources    =    this . resourcePatternResolver . getResources ( pattern )  ;", "MetadataReaderFactory   readerFactory    =    new   CachingMetadataReaderFactory ( this . resourcePatternResolver )  ;", "for    ( Resource   resource    :    resources )     {", "if    ( resource . isReadable (  )  )     {", "MetadataReader   reader    =    readerFactory . getMetadataReader ( resource )  ;", "String   className    =    reader . getClassMetadata (  )  . getClassName (  )  ;", "if    ( matchesFilter ( reader ,    readerFactory )  )     {", "scannedUnit . addManagedClassName ( className )  ;", "if    (  ( scannedUnit . getPersistenceUnitRootUrl (  )  )     =  =    null )     {", "URL   url    =    resource . getURL (  )  ;", "if    ( ResourceUtils . isJarURL ( url )  )     {", "scannedUnit . setPersistenceUnitRootUrl ( ResourceUtils . extractJarFileURL ( url )  )  ;", "}", "}", "} else", "if    ( className . endsWith (  . PACKAGE _ INFO _ SUFFIX )  )     {", "scannedUnit . addManagedPackage ( className . substring (  0  ,     (  ( className . length (  )  )     -     (  . PACKAGE _ INFO _ SUFFIX . length (  )  )  )  )  )  ;", "}", "}", "}", "}    catch    ( IOException   ex )     {", "throw   new   PersistenceException (  \" Failed   to   scan   classpath   for   unlisted   entity   classes \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["scanPackage"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . dataSourceLookup    =     ( dataSourceLookup    !  =    null )     ?    dataSourceLookup    :    new   JndiDataSourceLookup (  )  ;", "}", "METHOD_END"], "methodName": ["setDataSourceLookup"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . dataSourceLookup    =    new   MapDataSourceLookup ( dataSources )  ;", "}", "METHOD_END"], "methodName": ["setDataSources"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . defaultDataSource    =    defaultDataSource ;", "}", "METHOD_END"], "methodName": ["setDefaultDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . defaultJtaDataSource    =    defaultJtaDataSource ;", "}", "METHOD_END"], "methodName": ["setDefaultJtaDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . defaultPersistenceUnitName    =    defaultPersistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setDefaultPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . defaultPersistenceUnitRootLocation    =    defaultPersistenceUnitRootLocation ;", "}", "METHOD_END"], "methodName": ["setDefaultPersistenceUnitRootLocation"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . mappingResources    =    mappingResources ;", "}", "METHOD_END"], "methodName": ["setMappingResources"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . packagesToScan    =    packagesToScan ;", "}", "METHOD_END"], "methodName": ["setPackagesToScan"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitPostProcessors    =    postProcessors ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitPostProcessors"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . persistenceXmlLocations    =    new   String [  ]  {    persistenceXmlLocation    }  ;", "}", "METHOD_END"], "methodName": ["setPersistenceXmlLocation"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . persistenceXmlLocations    =    persistenceXmlLocations ;", "}", "METHOD_END"], "methodName": ["setPersistenceXmlLocations"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . sharedCacheMode    =    sharedCacheMode ;", "}", "METHOD_END"], "methodName": ["setSharedCacheMode"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . validationMode    =    validationMode ;", "}", "METHOD_END"], "methodName": ["setValidationMode"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"}, {"methodBody": ["METHOD_START", "{", "this . manager . preparePersistenceUnitInfos (  )  ;", "return    (  ( SpringPersistenceUnitInfo )     ( this . manager . obtainInfo (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultPersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManagerTests"}, {"methodBody": ["METHOD_START", "{", "this . manager . setPackagesToScan (  \" domain \"  )  ;", "this . manager . setResourceLoader ( new   DefaultResourceLoader ( CandidateComponentsTestClassLoader . index ( getClass (  )  . getClassLoader (  )  ,    new   ClassPathResource (  \" spring . components \"  ,    Person . class )  )  )  )  ;", "testDefaultDomain (  )  ;", "}", "METHOD_END"], "methodName": ["defaultDomainWithIndex"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManagerTests"}, {"methodBody": ["METHOD_START", "{", "this . manager . setPackagesToScan (  \" domain \"  )  ;", "this . manager . setResourceLoader ( new   DefaultResourceLoader ( CandidateComponentsTestClassLoader . disableIndex ( getClass (  )  . getClassLoader (  )  )  )  )  ;", "testDefaultDomain (  )  ;", "}", "METHOD_END"], "methodName": ["defaultDomainWithScan"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManagerTests"}, {"methodBody": ["METHOD_START", "{", "SpringPersistenceUnitInfo   puInfo    =    buildDefaultPersistenceUnitInfo (  )  ;", "assertThat ( puInfo . getManagedClassNames (  )  ,    containsInAnyOrder (  \" domain . Person \"  ,     \" domain . DriversLicense \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultDomain"], "fileName": "org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManagerTests"}, {"methodBody": ["METHOD_START", "{", "this . jarFileUrls . add ( jarFileUrl )  ;", "}", "METHOD_END"], "methodName": ["addJarFileUrl"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . managedClassNames . add ( managedClassName )  ;", "}", "METHOD_END"], "methodName": ["addManagedClassName"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . managedPackages . add ( packageName )  ;", "}", "METHOD_END"], "methodName": ["addManagedPackage"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . mappingFileNames . add ( mappingFileName )  ;", "}", "METHOD_END"], "methodName": ["addMappingFileName"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . properties . setProperty ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["addProperty"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "return   this . persistenceProviderPackageName ;", "}", "METHOD_END"], "methodName": ["getPersistenceProviderPackageName"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . excludeUnlistedClasses    =    excludeUnlistedClasses ;", "}", "METHOD_END"], "methodName": ["setExcludeUnlistedClasses"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . jtaDataSource    =    jtaDataSource ;", "}", "METHOD_END"], "methodName": ["setJtaDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . nonJtaDataSource    =    nonJtaDataSource ;", "}", "METHOD_END"], "methodName": ["setNonJtaDataSource"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . persistenceProviderClassName    =    persistenceProviderClassName ;", "}", "METHOD_END"], "methodName": ["setPersistenceProviderClassName"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitName    =    persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitRootUrl    =    persistenceUnitRootUrl ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitRootUrl"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . persistenceXMLSchemaVersion    =    persistenceXMLSchemaVersion ;", "}", "METHOD_END"], "methodName": ["setPersistenceXMLSchemaVersion"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( properties ,     \" Properties   must   not   be   null \"  )  ;", "this . properties    =    properties ;", "}", "METHOD_END"], "methodName": ["setProperties"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . sharedCacheMode    =    sharedCacheMode ;", "}", "METHOD_END"], "methodName": ["setSharedCacheMode"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . transactionType    =    transactionType ;", "}", "METHOD_END"], "methodName": ["setTransactionType"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . validationMode    =    validationMode ;", "}", "METHOD_END"], "methodName": ["setValidationMode"], "fileName": "org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   dbf    =    DocumentBuilderFactory . newInstance (  )  ;", "dbf . setNamespaceAware ( true )  ;", "DocumentBuilder   parser    =    dbf . newDocumentBuilder (  )  ;", "parser . setErrorHandler ( handler )  ;", "return   parser . parse ( stream )  ;", "}", "METHOD_END"], "methodName": ["buildDocument"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "URL   originalURL    =    resource . getURL (  )  ;", "if    ( ResourceUtils . isJarURL ( originalURL )  )     {", "return   ResourceUtils . extractJarFileURL ( originalURL )  ;", "}", "String   urlToString    =    originalURL . toExternalForm (  )  ;", "if    (  !  ( urlToString . contains (  . META _ INF )  )  )     {", "if    (  . logger . isInfoEnabled (  )  )     {", ". logger . info (  (  (  ( resource . getFilename (  )  )     +     \"    should   be   located   inside   META - INF   directory ;    cannot   determine   persistence   unit   root   URL   for    \"  )     +    resource )  )  ;", "}", "return   null ;", "}", "if    (  ( urlToString . lastIndexOf (  . META _ INF )  )     =  =     (  ( urlToString . lastIndexOf (  '  /  '  )  )     -     (  1     +     (  . META _ INF . length (  )  )  )  )  )     {", "if    (  . logger . isInfoEnabled (  )  )     {", ". logger . info (  (  (  ( resource . getFilename (  )  )     +     \"    is   not   located   in   the   root   of   META - INF   directory ;    cannot   determine   persistence   unit   root   URL   for    \"  )     +    resource )  )  ;", "}", "return   null ;", "}", "String   persistenceUnitRoot    =    urlToString . substring (  0  ,    urlToString . lastIndexOf (  . META _ INF )  )  ;", "if    ( persistenceUnitRoot . endsWith (  \"  /  \"  )  )     {", "persistenceUnitRoot    =    persistenceUnitRoot . substring (  0  ,     (  ( persistenceUnitRoot . length (  )  )     -     1  )  )  ;", "}", "return   new   URL ( persistenceUnitRoot )  ;", "}", "METHOD_END"], "methodName": ["determinePersistenceUnitRootUrl"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "Element   persistence    =    document . getDocumentElement (  )  ;", "String   version    =    persistence . getAttribute (  . PERSISTENCE _ VERSION )  ;", "URL   rootUrl    =     . determinePersistenceUnitRootUrl ( resource )  ;", "List < Element >    units    =    DomUtils . getChildElementsByTagName ( persistence ,     . PERSISTENCE _ UNIT )  ;", "for    ( Element   unit    :    units )     {", "infos . add ( parsePersistenceUnitInfo ( unit ,    version ,    rootUrl )  )  ;", "}", "return   infos ;", "}", "METHOD_END"], "methodName": ["parseDocument"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "List < Element >    jars    =    DomUtils . getChildElementsByTagName ( persistenceUnit ,    PersistenceUnitReader . JAR _ FILE _ URL )  ;", "for    ( Element   element    :    jars )     {", "String   value    =    DomUtils . getTextValue ( element )  . trim (  )  ;", "if    ( StringUtils . hasText ( value )  )     {", "Resource [  ]    resources    =    this . resourcePatternResolver . getResources ( value )  ;", "boolean   found    =    false ;", "for    ( Resource   resource    :    resources )     {", "if    ( resource . exists (  )  )     {", "found    =    true ;", "unitInfo . addJarFileUrl ( resource . getURL (  )  )  ;", "}", "}", "if    (  ! found )     {", "URL   rootUrl    =    unitInfo . getPersistenceUnitRootUrl (  )  ;", "if    ( rootUrl    !  =    null )     {", "unitInfo . addJarFileUrl ( new   URL ( rootUrl ,    value )  )  ;", "} else    {", "PersistenceUnitReader . logger . warn (  (  (  (  (  \" Cannot   resolve   jar - file   entry    [  \"     +    value )     +     \"  ]    in   persistence   unit    '  \"  )     +     ( unitInfo . getPersistenceUnitName (  )  )  )     +     \"  '    without   root   URL \"  )  )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseJarFiles"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "List < Element >    classes    =    DomUtils . getChildElementsByTagName ( persistenceUnit ,    PersistenceUnitReader . MANAGED _ CLASS _ NAME )  ;", "for    ( Element   element    :    classes )     {", "String   value    =    DomUtils . getTextValue ( element )  . trim (  )  ;", "if    ( StringUtils . hasText ( value )  )", "unitInfo . addManagedClassName ( value )  ;", "}", "}", "METHOD_END"], "methodName": ["parseManagedClasses"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "List < Element >    files    =    DomUtils . getChildElementsByTagName ( persistenceUnit ,    PersistenceUnitReader . MAPPING _ FILE _ NAME )  ;", "for    ( Element   element    :    files )     {", "String   value    =    DomUtils . getTextValue ( element )  . trim (  )  ;", "if    ( StringUtils . hasText ( value )  )     {", "unitInfo . addMappingFileName ( value )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseMappingFiles"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "SpringPersistenceUnitInfo   unitInfo    =    new   SpringPersistenceUnitInfo (  )  ;", "unitInfo . setPersistenceXMLSchemaVersion ( version )  ;", "unitInfo . setPersistenceUnitRootUrl ( rootUrl )  ;", "unitInfo . setPersistenceUnitName ( persistenceUnit . getAttribute (  . UNIT _ NAME )  . trim (  )  )  ;", "String   txType    =    persistenceUnit . getAttribute (  . TRANSACTION _ TYPE )  . trim (  )  ;", "if    ( StringUtils . hasText ( txType )  )     {", "unitInfo . setTransactionType ( PersistenceUnitTransactionType . valueOf ( txType )  )  ;", "}", "String   jtaDataSource    =    DomUtils . getChildElementValueByTagName ( persistenceUnit ,     . JTA _ DATA _ SOURCE )  ;", "if    ( StringUtils . hasText ( jtaDataSource )  )     {", "unitInfo . setJtaDataSource ( this . dataSourceLookup . getDataSource ( jtaDataSource . trim (  )  )  )  ;", "}", "String   nonJtaDataSource    =    DomUtils . getChildElementValueByTagName ( persistenceUnit ,     . NON _ JTA _ DATA _ SOURCE )  ;", "if    ( StringUtils . hasText ( nonJtaDataSource )  )     {", "unitInfo . setNonJtaDataSource ( this . dataSourceLookup . getDataSource ( nonJtaDataSource . trim (  )  )  )  ;", "}", "String   provider    =    DomUtils . getChildElementValueByTagName ( persistenceUnit ,     . PROVIDER )  ;", "if    ( StringUtils . hasText ( provider )  )     {", "unitInfo . setPersistenceProviderClassName ( provider . trim (  )  )  ;", "}", "Element   excludeUnlistedClasses    =    DomUtils . getChildElementByTagName ( persistenceUnit ,     . EXCLUDE _ UNLISTED _ CLASSES )  ;", "if    ( excludeUnlistedClasses    !  =    null )     {", "String   excludeText    =    DomUtils . getTextValue ( excludeUnlistedClasses )  ;", "unitInfo . setExcludeUnlistedClasses (  (  (  !  ( StringUtils . hasText ( excludeText )  )  )     |  |     ( Boolean . valueOf ( excludeText )  )  )  )  ;", "}", "String   cacheMode    =    DomUtils . getChildElementValueByTagName ( persistenceUnit ,     . SHARED _ CACHE _ MODE )  ;", "if    ( StringUtils . hasText ( cacheMode )  )     {", "unitInfo . setSharedCacheMode ( SharedCacheMode . valueOf ( cacheMode )  )  ;", "}", "String   validationMode    =    DomUtils . getChildElementValueByTagName ( persistenceUnit ,     . VALIDATION _ MODE )  ;", "if    ( StringUtils . hasText ( validationMode )  )     {", "unitInfo . setValidationMode ( ValidationMode . valueOf ( validationMode )  )  ;", "}", "parseProperties ( persistenceUnit ,    unitInfo )  ;", "parseManagedClasses ( persistenceUnit ,    unitInfo )  ;", "parseMappingFiles ( persistenceUnit ,    unitInfo )  ;", "parseJarFiles ( persistenceUnit ,    unitInfo )  ;", "return   unitInfo ;", "}", "METHOD_END"], "methodName": ["parsePersistenceUnitInfo"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "Element   propRoot    =    DomUtils . getChildElementByTagName ( persistenceUnit ,    PersistenceUnitReader . PROPERTIES )  ;", "if    ( propRoot    =  =    null )     {", "return ;", "}", "List < Element >    properties    =    DomUtils . getChildElementsByTagName ( propRoot ,     \" property \"  )  ;", "for    ( Element   property    :    properties )     {", "String   name    =    property . getAttribute (  \" name \"  )  ;", "String   value    =    property . getAttribute (  \" value \"  )  ;", "unitInfo . addProperty ( name ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProperties"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "return   readPersistenceUnitInfos ( new   String [  ]  {    persistenceXmlLocation    }  )  ;", "}", "METHOD_END"], "methodName": ["readPersistenceUnitInfos"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "ErrorHandler   handler    =    new   SimpleSaxErrorHandler ( PersistenceUnitReader . logger )  ;", "List < SpringPersistenceUnitInfo >    infos    =    new   LinkedList <  >  (  )  ;", "String   resourceLocation    =    null ;", "try    {", "for    ( String   location    :    persistenceXmlLocations )     {", "Resource [  ]    resources    =    this . resourcePatternResolver . getResources ( location )  ;", "for    ( Resource   resource    :    resources )     {", "resourceLocation    =    resource . toString (  )  ;", "InputStream   stream    =    resource . getInputStream (  )  ;", "try    {", "Document   document    =    buildDocument ( handler ,    stream )  ;", "parseDocument ( resource ,    document ,    infos )  ;", "}    finally    {", "stream . close (  )  ;", "}", "}", "}", "}    catch    ( IOException   ex )     {", "throw   new   IllegalArgumentException (  (  \" Cannot   parse   persistence   unit   from    \"     +    resourceLocation )  ,    ex )  ;", "}    catch    ( SAXException   ex )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   XML   in   persistence   unit   from    \"     +    resourceLocation )  ,    ex )  ;", "}    catch    ( ParserConfigurationException   ex )     {", "throw   new   IllegalArgumentException (  (  \" Internal   error   parsing   persistence   unit   from    \"     +    resourceLocation )  )  ;", "}", "return   infos . toArray ( new   SpringPersistenceUnitInfo [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["readPersistenceUnitInfos"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 1  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExample1"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 2  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement 2  \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  1  ,    info [  0  ]  . getMappingFileNames (  )  . size (  )  )  ;", "assertEquals (  \" mappings . xml \"  ,    info [  0  ]  . getMappingFileNames (  )  . get (  0  )  )  ;", "assertEquals (  0  ,    info [  0  ]  . getProperties (  )  . keySet (  )  . size (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExample2"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 3  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement 3  \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  2  ,    info [  0  ]  . getJarFileUrls (  )  . size (  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  0  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order - supplemental . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  1  )  )  ;", "assertEquals (  0  ,    info [  0  ]  . getProperties (  )  . keySet (  )  . size (  )  )  ;", "assertNull ( info [  0  ]  . getJtaDataSource (  )  )  ;", "assertNull ( info [  0  ]  . getNonJtaDataSource (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExample3"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "SimpleNamingContextBuilder   builder    =    SimpleNamingContextBuilder . emptyActivatedContextBuilder (  )  ;", "DataSource   ds    =    new   DriverManagerDataSource (  )  ;", "builder . bind (  \" java : comp / env / jdbc / MyDB \"  ,    ds )  ;", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 4  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement 4  \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  1  ,    info [  0  ]  . getMappingFileNames (  )  . size (  )  )  ;", "assertEquals (  \" order - mappings . xml \"  ,    info [  0  ]  . getMappingFileNames (  )  . get (  0  )  )  ;", "assertEquals (  3  ,    info [  0  ]  . getManagedClassNames (  )  . size (  )  )  ;", "assertEquals (  \" com . acme . Order \"  ,    info [  0  ]  . getManagedClassNames (  )  . get (  0  )  )  ;", "assertEquals (  \" com . acme . Customer \"  ,    info [  0  ]  . getManagedClassNames (  )  . get (  1  )  )  ;", "assertEquals (  \" com . acme . Item \"  ,    info [  0  ]  . getManagedClassNames (  )  . get (  2  )  )  ;", "assertTrue (  \" Exclude   unlisted   should   be   true   when   no   value .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "assertSame ( RESOURCE _ LOCAL ,    info [  0  ]  . getTransactionType (  )  )  ;", "assertEquals (  0  ,    info [  0  ]  . getProperties (  )  . keySet (  )  . size (  )  )  ;", "builder . clear (  )  ;", "}", "METHOD_END"], "methodName": ["testExample4"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 5  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement 5  \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  2  ,    info [  0  ]  . getMappingFileNames (  )  . size (  )  )  ;", "assertEquals (  \" order 1  . xml \"  ,    info [  0  ]  . getMappingFileNames (  )  . get (  0  )  )  ;", "assertEquals (  \" order 2  . xml \"  ,    info [  0  ]  . getMappingFileNames (  )  . get (  1  )  )  ;", "assertEquals (  2  ,    info [  0  ]  . getJarFileUrls (  )  . size (  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  0  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order - supplemental . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  1  )  )  ;", "assertEquals (  \" com . acme . AcmePersistence \"  ,    info [  0  ]  . getPersistenceProviderClassName (  )  )  ;", "assertEquals (  0  ,    info [  0  ]  . getProperties (  )  . keySet (  )  . size (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExample5"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - example 6  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" pu \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  0  ,    info [  0  ]  . getProperties (  )  . keySet (  )  . size (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExample6"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "DataSource   ds    =    new   DriverManagerDataSource (  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - complex . xml \"  ;", "MapDataSourceLookup   dataSourceLookup    =    new   MapDataSourceLookup (  )  ;", "Map < String ,    DataSource >    dataSources    =    new   HashMap <  >  (  )  ;", "dataSources . put (  \" jdbc / MyPartDB \"  ,    ds )  ;", "dataSources . put (  \" jdbc / MyDB \"  ,    ds )  ;", "dataSourceLookup . setDataSources ( dataSources )  ;", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    dataSourceLookup )  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertEquals (  2  ,    info . length )  ;", "PersistenceUnitInfo   pu 1     =    info [  0  ]  ;", "assertEquals (  \" pu 1  \"  ,    pu 1  . getPersistenceUnitName (  )  )  ;", "assertEquals (  \" com . acme . AcmePersistence \"  ,    pu 1  . getPersistenceProviderClassName (  )  )  ;", "assertEquals (  1  ,    pu 1  . getMappingFileNames (  )  . size (  )  )  ;", "assertEquals (  \" ormap 2  . xml \"  ,    pu 1  . getMappingFileNames (  )  . get (  0  )  )  ;", "assertEquals (  1  ,    pu 1  . getJarFileUrls (  )  . size (  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order . jar \"  )  . getURL (  )  ,    pu 1  . getJarFileUrls (  )  . get (  0  )  )  ;", "assertFalse ( pu 1  . excludeUnlistedClasses (  )  )  ;", "assertSame ( RESOURCE _ LOCAL ,    pu 1  . getTransactionType (  )  )  ;", "Properties   props    =    pu 1  . getProperties (  )  ;", "assertEquals (  2  ,    props . keySet (  )  . size (  )  )  ;", "assertEquals (  \" on \"  ,    props . getProperty (  \" com . acme . persistence . sql - logging \"  )  )  ;", "assertEquals (  \" bar \"  ,    props . getProperty (  \" foo \"  )  )  ;", "assertNull ( pu 1  . getNonJtaDataSource (  )  )  ;", "assertSame ( ds ,    pu 1  . getJtaDataSource (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    pu 1  . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   pu 2     =    info [  1  ]  ;", "assertSame ( JTA ,    pu 2  . getTransactionType (  )  )  ;", "assertEquals (  \" com . acme . AcmePersistence \"  ,    pu 2  . getPersistenceProviderClassName (  )  )  ;", "assertEquals (  1  ,    pu 2  . getMappingFileNames (  )  . size (  )  )  ;", "assertEquals (  \" order 2  . xml \"  ,    pu 2  . getMappingFileNames (  )  . get (  0  )  )  ;", "assertTrue ( pu 2  . excludeUnlistedClasses (  )  )  ;", "assertNull ( pu 2  . getJtaDataSource (  )  )  ;", "assertEquals ( ds ,    pu 2  . getNonJtaDataSource (  )  )  ;", "assertTrue (  \" Exclude   unlisted   should   be   true   when   no   value .  \"  ,    pu 2  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExampleComplex"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - invalid . xml \"  ;", "try    {", "reader . readPersistenceUnitInfos ( resource )  ;", "fail (  \" expected   invalid   document   exception \"  )  ;", "}    catch    ( RuntimeException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["testInvalidPersistence"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - exclude -  1  .  0  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  \" The   number   of   persistence   units   is   incorrect .  \"  ,     4  ,    info . length )  ;", "PersistenceUnitInfo   noExclude    =    info [  0  ]  ;", "assertNotNull (  \" noExclude   should   not   be   null .  \"  ,    noExclude )  ;", "assertEquals (  \" noExclude   name   is   not   correct .  \"  ,     \" NoExcludeElement \"  ,    noExclude . getPersistenceUnitName (  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    noExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   emptyExclude    =    info [  1  ]  ;", "assertNotNull (  \" emptyExclude   should   not   be   null .  \"  ,    emptyExclude )  ;", "assertEquals (  \" emptyExclude   name   is   not   correct .  \"  ,     \" EmptyExcludeElement \"  ,    emptyExclude . getPersistenceUnitName (  )  )  ;", "assertTrue (  \" emptyExclude   should   be   true .  \"  ,    emptyExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   trueExclude    =    info [  2  ]  ;", "assertNotNull (  \" trueExclude   should   not   be   null .  \"  ,    trueExclude )  ;", "assertEquals (  \" trueExclude   name   is   not   correct .  \"  ,     \" TrueExcludeElement \"  ,    trueExclude . getPersistenceUnitName (  )  )  ;", "assertTrue (  \" trueExclude   should   be   true .  \"  ,    trueExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   falseExclude    =    info [  3  ]  ;", "assertNotNull (  \" falseExclude   should   not   be   null .  \"  ,    falseExclude )  ;", "assertEquals (  \" falseExclude   name   is   not   correct .  \"  ,     \" FalseExcludeElement \"  ,    falseExclude . getPersistenceUnitName (  )  )  ;", "assertFalse (  \" falseExclude   should   be   false .  \"  ,    falseExclude . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJpa1ExcludeUnlisted"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - exclude -  2  .  0  . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  \" The   number   of   persistence   units   is   incorrect .  \"  ,     4  ,    info . length )  ;", "PersistenceUnitInfo   noExclude    =    info [  0  ]  ;", "assertNotNull (  \" noExclude   should   not   be   null .  \"  ,    noExclude )  ;", "assertEquals (  \" noExclude   name   is   not   correct .  \"  ,     \" NoExcludeElement \"  ,    noExclude . getPersistenceUnitName (  )  )  ;", "assertFalse (  \" Exclude   unlisted   still   defaults   to   false   in    2  .  0  .  \"  ,    noExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   emptyExclude    =    info [  1  ]  ;", "assertNotNull (  \" emptyExclude   should   not   be   null .  \"  ,    emptyExclude )  ;", "assertEquals (  \" emptyExclude   name   is   not   correct .  \"  ,     \" EmptyExcludeElement \"  ,    emptyExclude . getPersistenceUnitName (  )  )  ;", "assertTrue (  \" emptyExclude   should   be   true .  \"  ,    emptyExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   trueExclude    =    info [  2  ]  ;", "assertNotNull (  \" trueExclude   should   not   be   null .  \"  ,    trueExclude )  ;", "assertEquals (  \" trueExclude   name   is   not   correct .  \"  ,     \" TrueExcludeElement \"  ,    trueExclude . getPersistenceUnitName (  )  )  ;", "assertTrue (  \" trueExclude   should   be   true .  \"  ,    trueExclude . excludeUnlistedClasses (  )  )  ;", "PersistenceUnitInfo   falseExclude    =    info [  3  ]  ;", "assertNotNull (  \" falseExclude   should   not   be   null .  \"  ,    falseExclude )  ;", "assertEquals (  \" falseExclude   name   is   not   correct .  \"  ,     \" FalseExcludeElement \"  ,    falseExclude . getPersistenceUnitName (  )  )  ;", "assertFalse (  \" falseExclude   should   be   false .  \"  ,    falseExclude . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJpa2ExcludeUnlisted"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / META - INF / persistence . xml \"  ;", "PersistenceUnitInfo [  ]    info    =    reader . readPersistenceUnitInfos ( resource )  ;", "assertNotNull ( info )  ;", "assertEquals (  1  ,    info . length )  ;", "assertEquals (  \" OrderManagement \"  ,    info [  0  ]  . getPersistenceUnitName (  )  )  ;", "assertEquals (  2  ,    info [  0  ]  . getJarFileUrls (  )  . size (  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  0  )  )  ;", "assertEquals ( new   ClassPathResource (  \" order - supplemental . jar \"  )  . getURL (  )  ,    info [  0  ]  . getJarFileUrls (  )  . get (  1  )  )  ;", "assertFalse (  \" Exclude   unlisted   should   default   false   in    1  .  0  .  \"  ,    info [  0  ]  . excludeUnlistedClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMetaInfCase"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitReader   reader    =    new   PersistenceUnitReader ( new   PathMatchingResourcePatternResolver (  )  ,    new   JndiDataSourceLookup (  )  )  ;", "String   resource    =     \"  / org /  / orm / jpa / persistence - no - schema . xml \"  ;", "try    {", "reader . readPersistenceUnitInfos ( resource )  ;", "fail (  \" expected   invalid   document   exception \"  )  ;", "}    catch    ( RuntimeException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["testNoSchemaPersistence"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    PersistenceUnitReader . determinePersistenceUnitRootUrl ( new   ClassPathResource (  \"  / org / springframework / orm / jpa / persistence - no - schema . xml \"  )  )  ;", "assertNull ( url )  ;", "url    =    PersistenceUnitReader . determinePersistenceUnitRootUrl ( new   ClassPathResource (  \"  / org / springframework / orm / jpa / META - INF / persistence . xml \"  )  )  ;", "assertTrue (  \" the   containing   folder   should   have   been   returned \"  ,    url . toString (  )  . endsWith (  \"  / org / springframework / orm / jpa \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceUnitRootUrl"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   archive    =    new   ClassPathResource (  \"  / org / springframework / orm / jpa / jpa - archive . jar \"  )  ;", "String   newRoot    =     (  \" jar :  \"     +     ( archive . getURL (  )  . toExternalForm (  )  )  )     +     \"  !  / META - INF / persist . xml \"  ;", "Resource   insideArchive    =    new   UrlResource ( newRoot )  ;", "assertTrue ( insideArchive . exists (  )  )  ;", "URL   url    =    PersistenceUnitReader . determinePersistenceUnitRootUrl ( insideArchive )  ;", "assertTrue (  \" the   archive   location   should   have   been   returned \"  ,    archive . getURL (  )  . sameFile ( url )  )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceUnitRootUrlWithJar"], "fileName": "org.springframework.orm.jpa.persistenceunit.PersistenceXmlParsingTests"}, {"methodBody": ["METHOD_START", "{", "this . classLoader    =    classLoader ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( loadTimeWeaver ,     \" LoadTimeWeaver   must   not   be   null \"  )  ;", "this . loadTimeWeaver    =    loadTimeWeaver ;", "this . classLoader    =    loadTimeWeaver . gestrumentableClassLoader (  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo"}, {"methodBody": ["METHOD_START", "{", "this . timeoutInProgress    =    false ;", "this . errorInProgress    =    false ;", "TransactionSynchronizationManager . bindResource ( this . emFactory ,    this . emHolder )  ;", "}", "METHOD_END"], "methodName": ["bindEntityManager"], "fileName": "org.springframework.orm.jpa.support.AsyncRequestInterceptor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . timeoutInProgress )     |  |     ( this . errorInProgress )  )     {", ". logger . debug (  \" Closing   JPA   EntityManager   after   async   request   timeout / error \"  )  ;", "EntityManagerFactoryUtils . closeEntityManager ( emHolder . getEntityManager (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["closeEntityManager"], "fileName": "org.springframework.orm.jpa.support.AsyncRequestInterceptor"}, {"methodBody": ["METHOD_START", "{", "CallableProcessingInterceptor   cpi    =    asyncManager . getCallableInterceptor ( key )  ;", "if    ( cpi    =  =    null )     {", "return   false ;", "}", "(  ( AsyncRequestInterceptor )     ( cpi )  )  . bind (  )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["applyEntityManagerBindingInterceptor"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "return   emf . createEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["createEntityManager"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "return   this . entityManagerFactoryBeanName ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactoryBeanName"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "return   this . persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "WebApplicationContext   wac    =    WebApplicationContextUtils . getRequiredWebApplicationContext ( getServletContext (  )  )  ;", "String   emfBeanName    =    getEntityManagerFactoryBeanName (  )  ;", "String   puName    =    getPersistenceUnitName (  )  ;", "if    ( StringUtils . hasLength ( emfBeanName )  )     {", "return   wac . getBean ( emfBeanName ,    EntityManagerFactory . class )  ;", "} else", "if    (  (  !  ( StringUtils . hasLength ( puName )  )  )     &  &     ( wac . containsBean (  . DEFAULT _ ENTITY _ MANAGER _ FACTORY _ BEAN _ NAME )  )  )     {", "return   wac . getBean (  . DEFAULT _ ENTITY _ MANAGER _ FACTORY _ BEAN _ NAME ,    EntityManagerFactory . class )  ;", "} else    {", "return   findEntityManagerFactory ( wac ,    puName )  ;", "}", "}", "METHOD_END"], "methodName": ["lookupEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   emf    =    this . entityManagerFactory ;", "if    ( emf    =  =    null )     {", "emf    =    lookupEntityManagerFactory (  )  ;", "this . entityManagerFactory    =    emf ;", "}", "return   emf ;", "}", "METHOD_END"], "methodName": ["lookupEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "this . entityManagerFactoryBeanName    =    entityManagerFactoryBeanName ;", "}", "METHOD_END"], "methodName": ["setEntityManagerFactoryBeanName"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnitName    =    persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter"}, {"methodBody": ["METHOD_START", "{", "CallableProcessingInterceptor   cpi    =    asyncManager . getCallableInterceptor ( key )  ;", "if    ( cpi    =  =    null )     {", "return   false ;", "}", "(  ( AsyncRequestInterceptor )     ( cpi )  )  . bind (  )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["applyEntityManagerBindingInterceptor"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "String   participateAttributeName    =    getParticipateAttributeName (  )  ;", "Integer   count    =     (  ( Integer )     ( request . getAttribute ( participateAttributeName ,    SCOPE _ REQUEST )  )  )  ;", "if    ( count    =  =    null )     {", "return   false ;", "}", "if    ( count    >     1  )     {", "request . setAttribute ( participateAttributeName ,     ( count    -     1  )  ,    SCOPE _ REQUEST )  ;", "} else    {", "request . removeAttribute ( participateAttributeName ,    SCOPE _ REQUEST )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["decrementParticipateCount"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "return    ( obtainEntityManagerFactory (  )  . toString (  )  )     +     ( OpenEntityManagerInViewInterceptor . PARTICIPATE _ SUFFIX )  ;", "}", "METHOD_END"], "methodName": ["getParticipateAttributeName"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor"}, {"methodBody": ["METHOD_START", "{", "factory    =    mock ( EntityManagerFactory . class )  ;", "manager    =    mock ( EntityManager . class )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "this . request    =    new   MockHttpServletRequest (  )  ;", "this . request . setAsyncSupported ( true )  ;", "this . response    =    new   MockHttpServletResponse (  )  ;", "this . webRequest    =    new   web . context . request . ServletWebRequest ( this . request )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isActualTransactionActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "final   EntityManagerFactory   factory 2     =    mock ( EntityManagerFactory . class )  ;", "final   EntityManager   manager 2     =    mock ( EntityManager . class )  ;", "given ( factory 2  . createEntityManager (  )  )  . willReturn ( manager 2  )  ;", "given ( manager 2  . isOpen (  )  )  . willReturn ( true )  ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    factory )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" myEntityManagerFactory \"  ,    factory 2  )  ;", "wac . refresh (  )  ;", "sc . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "MockHttpServletResponse   response    =    new   MockHttpServletResponse (  )  ;", "MockFilterConfig   filterConfig    =    new   MockFilterConfig ( wac . getServletContext (  )  ,     \" filter \"  )  ;", "MockFilterConfig   filterConfig 2     =    new   MockFilterConfig ( wac . getServletContext (  )  ,     \" filter 2  \"  )  ;", "filterConfig 2  . addInitParameter (  \" entityManagerFactoryBeanName \"  ,     \" myEntityManagerFactory \"  )  ;", "final   Filter   filter    =    new   Filter (  )  ;", "filter . init ( filterConfig )  ;", "final   Filter   filter 2     =    new   Filter (  )  ;", "filter 2  . init ( filterConfig 2  )  ;", "final   FilterChain   filterChain    =    new   FilterChain (  )     {", "@ Override", "public   void   doFilter ( ServletRequest   servletRequest ,    ServletResponse   servletResponse )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "servletRequest . setAttribute (  \" invoked \"  ,    Boolean . TRUE )  ;", "}", "}  ;", "final   FilterChain   filterChain 2     =    new   FilterChain (  )     {", "@ Override", "public   void   doFilter ( ServletRequest   servletRequest ,    ServletResponse   servletResponse )    throws   IOException ,    ServletException    {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "filter . doFilter ( servletRequest ,    servletResponse ,    filterChain )  ;", "}", "}  ;", "FilterChain   filterChain 3     =    new   PassThroughFilterChain ( filter 2  ,    filterChain 2  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "filter 2  . doFilter ( request ,    response ,    filterChain 3  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "assertNotNull ( request . getAttribute (  \" invoked \"  )  )  ;", "verify ( manager )  . close (  )  ;", "verify ( manager 2  )  . close (  )  ;", "wac . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewFilter"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "final   EntityManagerFactory   factory 2     =    mock ( EntityManagerFactory . class )  ;", "final   EntityManager   manager 2     =    mock ( EntityManager . class )  ;", "given ( factory 2  . createEntityManager (  )  )  . willReturn ( manager 2  )  ;", "given ( manager 2  . isOpen (  )  )  . willReturn ( true )  ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "StaticWebApplicationContext   wac    =    new   StaticWebApplicationContext (  )  ;", "wac . setServletContext ( sc )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    factory )  ;", "wac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" myEntityManagerFactory \"  ,    factory 2  )  ;", "wac . refresh (  )  ;", "sc . setAttribute ( ROOT _ WEB _ APPLICATION _ CONTEXT _ ATTRIBUTE ,    wac )  ;", "MockFilterConfig   filterConfig    =    new   MockFilterConfig ( wac . getServletContext (  )  ,     \" filter \"  )  ;", "MockFilterConfig   filterConfig 2     =    new   MockFilterConfig ( wac . getServletContext (  )  ,     \" filter 2  \"  )  ;", "filterConfig 2  . addInitParameter (  \" entityManagerFactoryBeanName \"  ,     \" myEntityManagerFactory \"  )  ;", "final   OpenEntityManagerInViewFilter   filter    =    new   OpenEntityManagerInViewFilter (  )  ;", "filter . init ( filterConfig )  ;", "final   OpenEntityManagerInViewFilter   filter 2     =    new   OpenEntityManagerInViewFilter (  )  ;", "filter 2  . init ( filterConfig 2  )  ;", "final   AtomicInteger   count    =    new   AtomicInteger (  0  )  ;", "final   FilterChain   filterChain    =    new   FilterChain (  )     {", "@ Override", "public   void   doFilter ( ServletRequest   servletRequest ,    ServletResponse   servletResponse )     {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "servletRequest . setAttribute (  \" invoked \"  ,    Boolean . TRUE )  ;", "count . incrementAndGet (  )  ;", "}", "}  ;", "final   AtomicInteger   count 2     =    new   AtomicInteger (  0  )  ;", "final   FilterChain   filterChain 2     =    new   FilterChain (  )     {", "@ Override", "public   void   doFilter ( ServletRequest   servletRequest ,    ServletResponse   servletResponse )    throws   IOException ,    ServletException    {", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "filter . doFilter ( servletRequest ,    servletResponse ,    filterChain )  ;", "count 2  . incrementAndGet (  )  ;", "}", "}  ;", "FilterChain   filterChain 3     =    new   PassThroughFilterChain ( filter 2  ,    filterChain 2  )  ;", "AsyncWebRequest   asyncWebRequest    =    mock ( AsyncWebRequest . class )  ;", "given ( asyncWebRequest . isAsyncStarted (  )  )  . willReturn ( true )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( this . request )  ;", "asyncManager . setTaskExecutor ( new    . SyncTaskExecutor (  )  )  ;", "asyncManager . setAsyncWebRequest ( asyncWebRequest )  ;", "asyncManager . startCallableProcessing ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )    throws   Exception    {", "return    \" anything \"  ;", "}", "}  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "filter 2  . doFilter ( this . request ,    this . response ,    filterChain 3  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "assertEquals (  1  ,    count . get (  )  )  ;", "assertEquals (  1  ,    count 2  . get (  )  )  ;", "assertNotNull ( request . getAttribute (  \" invoked \"  )  )  ;", "verify ( asyncWebRequest ,    times (  2  )  )  . addCompletionHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest )  . addTimeoutHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest ,    times (  2  )  )  . addCompletionHandler ( any ( Runnable . class )  )  ;", "verify ( asyncWebRequest )  . startAsync (  )  ;", "reset ( asyncWebRequest )  ;", "given ( asyncWebRequest . isAsyncStarted (  )  )  . willReturn ( false )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "filter . doFilter ( this . request ,    this . response ,    filterChain 3  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory 2  )  )  ;", "assertEquals (  2  ,    count . get (  )  )  ;", "assertEquals (  2  ,    count 2  . get (  )  )  ;", "verify ( this . manager )  . close (  )  ;", "verify ( manager 2  )  . close (  )  ;", "wac . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewFilterAsyncScenario"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "OpenEntityManagerInViewInterceptor   interceptor    =    new   OpenEntityManagerInViewInterceptor (  )  ;", "interceptor . setEntityManagerFactory ( this . factory )  ;", "MockServletContext   sc    =    new   MockServletContext (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest ( sc )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( this . factory )  )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewInterceptor"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "OpenEntityManagerInViewInterceptor   interceptor    =    new   OpenEntityManagerInViewInterceptor (  )  ;", "interceptor . setEntityManagerFactory ( factory )  ;", "given ( this . factory . createEntityManager (  )  )  . willReturn ( this . manager )  ;", "interceptor . preHandle ( this . webRequest )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( this . factory )  )  ;", "AsyncWebRequest   asyncWebRequest    =    new   StandardServletAsyncWebRequest ( this . request ,    this . response )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( this . request )  ;", "asyncManager . setTaskExecutor ( new    . SyncTaskExecutor (  )  )  ;", "asyncManager . setAsyncWebRequest ( asyncWebRequest )  ;", "asyncManager . startCallableProcessing ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )    throws   Exception    {", "return    \" anything \"  ;", "}", "}  )  ;", "interceptor . afterConcurrentHandlingStarted ( this . webRequest )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( this . factory )  )  ;", "given ( this . manager . isOpen (  )  )  . willReturn ( true )  ;", "MockAsyncContext   asyncContext    =     (  ( MockAsyncContext )     ( this . request . getAsyncContext (  )  )  )  ;", "for    ( AsyncListener   listener    :    asyncContext . getListeners (  )  )     {", "listener . onError ( new   AsyncEvent ( asyncContext ,    new   Exception (  )  )  )  ;", "}", "for    ( AsyncListener   listener    :    asyncContext . getListeners (  )  )     {", "listener . onComplete ( new   AsyncEvent ( asyncContext )  )  ;", "}", "verify ( this . manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewInterceptorAsyncErrorScenario"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "OpenEntityManagerInViewInterceptor   interceptor    =    new   OpenEntityManagerInViewInterceptor (  )  ;", "interceptor . setEntityManagerFactory ( factory )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( this . manager )  ;", "interceptor . preHandle ( this . webRequest )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "AsyncWebRequest   asyncWebRequest    =    new   StandardServletAsyncWebRequest ( this . request ,    this . response )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( this . webRequest )  ;", "asyncManager . setTaskExecutor ( new    . SyncTaskExecutor (  )  )  ;", "asyncManager . setAsyncWebRequest ( asyncWebRequest )  ;", "asyncManager . startCallableProcessing ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )    throws   Exception    {", "return    \" anything \"  ;", "}", "}  )  ;", "interceptor . afterConcurrentHandlingStarted ( this . webRequest )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "interceptor . preHandle ( this . webRequest )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "asyncManager . clearConcurrentResult (  )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . preHandle ( new   ServletWebRequest ( request )  )  ;", "interceptor . postHandle ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . afterCompletion ( new   ServletWebRequest ( request )  ,    null )  ;", "interceptor . postHandle ( this . webRequest ,    null )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "given ( this . manager . isOpen (  )  )  . willReturn ( true )  ;", "interceptor . afterCompletion ( this . webRequest ,    null )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( factory )  )  ;", "verify ( this . manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewInterceptorAsyncScenario"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "OpenEntityManagerInViewInterceptor   interceptor    =    new   OpenEntityManagerInViewInterceptor (  )  ;", "interceptor . setEntityManagerFactory ( factory )  ;", "given ( this . factory . createEntityManager (  )  )  . willReturn ( this . manager )  ;", "interceptor . preHandle ( this . webRequest )  ;", "assertTrue ( TransactionSynchronizationManager . hasResource ( this . factory )  )  ;", "AsyncWebRequest   asyncWebRequest    =    new   StandardServletAsyncWebRequest ( this . request ,    this . response )  ;", "WebAsyncManager   asyncManager    =    WebAsyncUtils . getAsyncManager ( this . request )  ;", "asyncManager . setTaskExecutor ( new    . SyncTaskExecutor (  )  )  ;", "asyncManager . setAsyncWebRequest ( asyncWebRequest )  ;", "asyncManager . startCallableProcessing ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )    throws   Exception    {", "return    \" anything \"  ;", "}", "}  )  ;", "interceptor . afterConcurrentHandlingStarted ( this . webRequest )  ;", "assertFalse ( TransactionSynchronizationManager . hasResource ( this . factory )  )  ;", "given ( this . manager . isOpen (  )  )  . willReturn ( true )  ;", "MockAsyncContext   asyncContext    =     (  ( MockAsyncContext )     ( this . request . getAsyncContext (  )  )  )  ;", "for    ( AsyncListener   listener    :    asyncContext . getListeners (  )  )     {", "listener . onTimeout ( new   AsyncEvent ( asyncContext )  )  ;", "}", "for    ( AsyncListener   listener    :    asyncContext . getListeners (  )  )     {", "listener . onComplete ( new   AsyncEvent ( asyncContext )  )  ;", "}", "verify ( this . manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testOpenEntityManagerInViewInterceptorAsyncTimeoutScenario"], "fileName": "org.springframework.orm.jpa.support.OpenEntityManagerInViewTests"}, {"methodBody": ["METHOD_START", "{", "LinkedList < InjectionMetadata . InjectedElement >    elements    =    new   LinkedList <  >  (  )  ;", "Class <  ?  >    targetClass    =    clazz ;", "do    {", "final   LinkedList < InjectionMetadata . InjectedElement >    currElements    =    new   LinkedList <  >  (  )  ;", "ReflectionUtils . doWithLocalFields ( targetClass ,     (    field )     -  >     {", "if    (  ( field . isAnnotationPresent (  . class )  )     |  |     ( field . isAnnotationPresent (  . class )  )  )     {", "if    ( Modifier . isStatic ( field . getModifiers (  )  )  )     {", "throw   new   IllegalStateException (  \"    annotations   are   not   supported   on   static   fields \"  )  ;", "}", "currElements . add ( new   Element ( field ,    field ,    null )  )  ;", "}", "}  )  ;", "ReflectionUtils . doWithLocalMethods ( targetClass ,     (    method )     -  >     {", "Method   bridgedMethod    =    BridgeMethodResolver . findBridgedMethod ( method )  ;", "if    (  !  ( BridgeMethodResolver . isVisibilityBridgeMethodPair ( method ,    bridgedMethod )  )  )     {", "return ;", "}", "if    (  (  ( bridgedMethod . isAnnotationPresent (  . class )  )     |  |     ( bridgedMethod . isAnnotationPresent (  . class )  )  )     &  &     ( method . equals ( ClassUtils . getMostSpecificMethod ( method ,    clazz )  )  )  )     {", "if    ( Modifier . isStatic ( method . getModifiers (  )  )  )     {", "throw   new   IllegalStateException (  \"    annotations   are   not   supported   on   static   methods \"  )  ;", "}", "if    (  ( method . getParameterCount (  )  )     !  =     1  )     {", "throw   new   IllegalStateException (  (  \"    annotation   requires   a   single - arg   method :     \"     +    method )  )  ;", "}", "PropertyDescriptor   pd    =    BeanUtils . findPropertyForMethod ( bridgedMethod ,    clazz )  ;", "currElements . add ( new   Element ( method ,    bridgedMethod ,    pd )  )  ;", "}", "}  )  ;", "elements . addAll (  0  ,    currElements )  ;", "targetClass    =    targetClass . getSuperclass (  )  ;", "}    while    (  ( targetClass    !  =    null )     &  &     ( targetClass    !  =     ( Object . class )  )     )  ;", "return   new   InjectionMetadata ( clazz ,    elements )  ;", "}", "METHOD_END"], "methodName": ["buildPersistenceMetadata"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . beanFactory )     !  =    null )  ,     \" ListableBeanFactory   required   for   EntityManagerFactory   bean   lookup \"  )  ;", "if    (  ( this . beanFactory )    instanceof   ConfigurableListableBeanFactory )     {", "ConfigurableListableBeanFactory   clbf    =     (  ( ConfigurableListableBeanFactory )     ( this . beanFactory )  )  ;", "NamedBeanHolder < EntityManagerFactory >    emfHolder    =    clbf . resolveNamedBean ( EntityManagerFactory . class )  ;", "if    ( requestingBeanName    !  =    null )     {", "clbf . registerDependentBean ( emfHolder . getBeanName (  )  ,    requestingBeanName )  ;", "}", "return   emfHolder . getBeanInstance (  )  ;", "} else    {", "return   this . beanFactory . getBean ( EntityManagerFactory . class )  ;", "}", "}", "METHOD_END"], "methodName": ["findDefaultEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "String   unitNameForLookup    =     ( unitName    !  =    null )     ?    unitName    :     \"  \"  ;", "if    (  \"  \"  . equals ( unitNameForLookup )  )     {", "unitNameForLookup    =    this . defaultUnitName ;", "}", "if    (  !  (  \"  \"  . equals ( unitNameForLookup )  )  )     {", "return   findNamedEntityManagerFactory ( unitNameForLookup ,    requestingBeanName )  ;", "} else    {", "return   findDefaultEntityManagerFactory ( requestingBeanName )  ;", "}", "}", "METHOD_END"], "methodName": ["findEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . beanFactory )     !  =    null )  ,     \" ListableBeanFactory   required   for   EntityManagerFactory   bean   lookup \"  )  ;", "EntityManagerFactory   emf    =    EntityManagerFactoryUtils . findEntityManagerFactory ( this . beanFactory ,    unitName )  ;", "if    (  ( requestingBeanName    !  =    null )     &  &     (  ( this . beanFactory )    instanceof   ConfigurableBeanFactory )  )     {", "(  ( ConfigurableBeanFactory )     ( this . beanFactory )  )  . registerDependentBean ( unitName ,    requestingBeanName )  ;", "}", "return   emf ;", "}", "METHOD_END"], "methodName": ["findNamedEntityManagerFactory"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "String   cacheKey    =     ( StringUtils . hasLength ( beanName )  )     ?    beanName    :    clazz . getName (  )  ;", "InjectionMetadata   metadata    =    this . injectionMetadataCache . get ( cacheKey )  ;", "if    ( InjectionMetadata . needsRefresh ( metadata ,    clazz )  )     {", "synchronized ( this . injectionMetadataCache )     {", "metadata    =    this . injectionMetadataCache . get ( cacheKey )  ;", "if    ( InjectionMetadata . needsRefresh ( metadata ,    clazz )  )     {", "if    ( metadata    !  =    null )     {", "metadata . clear ( pvs )  ;", "}", "metadata    =    buildMetadata ( clazz )  ;", "this . injectionMetadataCache . put ( cacheKey ,    metadata )  ;", "}", "}", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["findPersistenceMetadata"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    contexts    =     ( extended )     ?    this . extendedPersistenceContexts    :    this . persistenceContexts ;", "if    ( contexts    !  =    null )     {", "String   unitNameForLookup    =     ( unitName    !  =    null )     ?    unitName    :     \"  \"  ;", "if    (  \"  \"  . equals ( unitNameForLookup )  )     {", "unitNameForLookup    =    this . defaultPersistenceUnitName ;", "}", "String   jndiName    =    contexts . get ( unitNameForLookup )  ;", "if    (  (  ( jndiName    =  =    null )     &  &     (  \"  \"  . equals ( unitNameForLookup )  )  )     &  &     (  ( contexts . size (  )  )     =  =     1  )  )     {", "jndiName    =    contexts . values (  )  . iterator (  )  . next (  )  ;", "}", "if    ( jndiName    !  =    null )     {", "try    {", "return   lookup ( jndiName ,    EntityManager . class )  ;", "}    catch    ( Exception   ex )     {", "throw   new   IllegalStateException (  (  (  \" Could   not   obtain   EntityManager    [  \"     +    jndiName )     +     \"  ]    from   JNDI \"  )  ,    ex )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPersistenceContext"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . persistenceUnits )     !  =    null )     {", "String   unitNameForLookup    =     ( unitName    !  =    null )     ?    unitName    :     \"  \"  ;", "if    (  \"  \"  . equals ( unitNameForLookup )  )     {", "unitNameForLookup    =    this . defaultUnitName ;", "}", "String   jndiName    =    this . persistenceUnits . get ( unitNameForLookup )  ;", "if    (  (  ( jndiName    =  =    null )     &  &     (  \"  \"  . equals ( unitNameForLookup )  )  )     &  &     (  ( this . persistenceUnits . size (  )  )     =  =     1  )  )     {", "jndiName    =    this . persistenceUnits . values (  )  . iterator (  )  . next (  )  ;", "}", "if    ( jndiName    !  =    null )     {", "try    {", "return   lookup ( jndiName ,    EntityManagerFactory . class )  ;", "}    catch    ( Exception   ex )     {", "throw   new   IllegalStateException (  (  (  \" Could   not   obtain   EntityManagerFactory    [  \"     +    jndiName )     +     \"  ]    from   JNDI \"  )  ,    ex )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnit"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "return   new   PersistenceAnnotationBeanPostProcessor . LocatorDelegate (  )  . lookup ( jndiName ,    requiredType )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . defaultPersistenceUnitName    =     ( unitName    !  =    null )     ?    unitName    :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["setDefaultPersistenceUnitName"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . extendedPersistenceContexts    =    extendedPersistenceContexts ;", "}", "METHOD_END"], "methodName": ["setExtendedPersistenceContexts"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . jndiEnvironment    =    jndiEnvironment ;", "}", "METHOD_END"], "methodName": ["setJndiEnvironment"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . jndiEnvironment    =    jndiTemplate ;", "}", "METHOD_END"], "methodName": ["setJndiTemplate"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . persistenceContexts    =    persistenceContexts ;", "}", "METHOD_END"], "methodName": ["setPersistenceContexts"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . persistenceUnits    =    persistenceUnits ;", "}", "METHOD_END"], "methodName": ["setPersistenceUnits"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "this . resourceRef    =    resourceRef ;", "}", "METHOD_END"], "methodName": ["setResourceRef"], "fileName": "org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"}, {"methodBody": ["METHOD_START", "{", "factory    =    mock ( EntityManagerFactory . class )  ;", "manager    =    mock ( EntityManager . class )  ;", "tx    =    mock ( EntityTransaction . class )  ;", "JpaTransactionManager   tm    =    new   JpaTransactionManager ( factory )  ;", "tt    =    new   TransactionTemplate ( tm )  ;", "given ( factory . createEntityManager (  )  )  . willReturn ( manager )  ;", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "bean    =    new    . EntityManagerHoldingBean (  )  ;", "@ SuppressWarnings (  \" serial \"  )", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new   PersistenceAnnotationBeanPostProcessor (  )     {", "@ Override", "protected   EntityManagerFactory   findEntityManagerFactory (  @ Nullable", "String   unitName ,    String   requestingBeanName )     {", "return   factory ;", "}", "}  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    bean ,     \" bean \"  )  ;", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isSynchronizationActive (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isCurrenReadOnly (  )  )  ;", "assertFalse ( TransactionSynchronizationManager . isActualTransactionActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManager . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx ,    times (  2  )  )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManager"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagaBehavior ( PROPAGATION _ SUPPORTS )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManager . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( manager )  . flush (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManagerAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManagerUnsynchronized"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagaBehavior ( PROPAGATION _ SUPPORTS )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( manager )  . flush (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManagerUnsynchronizedAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManagerUnsynchronized . joinTransaction (  )  ;", "bean . extendedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx ,    times (  2  )  )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManagerUnsynchronizedJoined"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagationBehavior ( PROPAGATION _ SUPPORTS )  ;", "tt . execute (  (    status )     -  >     {", "bean . extendedEntityManagerUnsynchronized . join (  )  ;", "bean . extendedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( manager )  . flush (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithExtendedEntityManagerUnsynchronizedJoinedAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . sharedEntityManager . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithSharedEntityManager"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagaBehavior ( PROPAGATION _ SUPPORTS )  ;", "tt . execute (  (    status )     -  >     {", "bean . sharedEntityManager . clear (  )  ;", "return   null ;", "}  )  ;", "verify ( manager )  . clear (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithSharedEntityManagerAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . sharedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager ,    times (  2  )  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithSharedEntityManagerUnsynchronized"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . isOpen (  )  )  . willReturn ( true )  ;", "tt . setPropagaBehavior ( PROPAGATION _ SUPPORTS )  ;", "tt . execute (  (    status )     -  >     {", "bean . sharedEntityManagerUnsynchronized . clear (  )  ;", "return   null ;", "}  )  ;", "verify ( manager )  . clear (  )  ;", "verify ( manager )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithSharedEntityManagerUnsynchronizedAndPropagationSupports"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "given ( manager . getTransaction (  )  )  . willReturn ( tx )  ;", "tt . execute (  (    status )     -  >     {", "bean . sharedEntityManagerUnsynchronized . joinTransaction (  )  ;", "bean . sharedEntityManagerUnsynchronized . flush (  )  ;", "return   null ;", "}  )  ;", "verify ( tx )  . commit (  )  ;", "verify ( manager )  . flush (  )  ;", "verify ( manager ,    times (  2  )  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionCommitWithSharedEntityManagerUnsynchronizedJoined"], "fileName": "org.springframework.orm.jpa.support.PersistenceContextTransactionTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( defaultSetterInjected . getEntityManager (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultPersistenceContextSetterInjection"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( namedSetterInjected . getEntityManagerFactory (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetterInjectionOfNamedPersistenceContext"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "try    {", "pabpp . postProcessPropertyValues ( null ,    null ,    new    . FieldOfWrongTypeAnnotatedWithPersistenceUnit (  )  ,     \" bean \"  )  ;", "fail (  \" Can ' t   inject   this   field \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testFieldOfWrongTypeAnnotatedWithPersistenceUnit"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPrivatePersistenceContextField   existingBean 1     =    new    . DefaultPrivatePersistenceContextField (  )  ;", "gac . getAutowireCapableBeanFactory (  )  . autowireBean ( existingBean 1  )  ;", "assertNotNull ( existingBean 1  . em )  ;", ". DefaultPublicPersistenceContextSetter   existingBean 2     =    new    . DefaultPublicPersistenceContextSetter (  )  ;", "gac . getAutowireCapableBeanFactory (  )  . autowireBean ( existingBean 2  )  ;", "assertNotNull ( existingBean 2  . em )  ;", "}", "METHOD_END"], "methodName": ["testInjectionIntoExistingObjects"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new    . MockPersistenceAnnotationBeanPostProcessor (  )  ;", ". DefaultPrivatePersistenceContextFieldExtended   dppcf    =    new    . DefaultPrivatePersistenceContextFieldExtended (  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    dppcf ,     \" bean \"  )  ;", "assertNotNull ( dppcf . em )  ;", "}", "METHOD_END"], "methodName": ["testNoPropertiesPassedIn"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "EntityManager   mockEm 2     =    mock ( EntityManager . class )  ;", "EntityManager   mockEm 3     =    mock ( EntityManager . class )  ;", "Map < String ,    String >    persistenceContexts    =    new   HashMap <  >  (  )  ;", "persistenceContexts . put (  \"  \"  ,     \" pc 1  \"  )  ;", "persistenceContexts . put (  \" Person \"  ,     \" pc 2  \"  )  ;", "Map < String ,    String >    extendedPersistenceContexts    =    new   HashMap <  >  (  )  ;", "extendedPersistenceContexts . put (  \"  \"  ,     \" pc 3  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pc 1  \"  ,    mockEm )  ;", "jt . addObject (  \" java : comp / env / pc 2  \"  ,    mockEm 2  )  ;", "jt . addObject (  \" java : comp / env / pc 3  \"  ,    mockEm 3  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceContexts ( persistenceContexts )  ;", "bpp . setExtendedPersistenceContexts ( extendedPersistenceContexts )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextField . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextFieldNamedPerson . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextFieldNamedPerson . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", ". DefaultPrivatePersistenceContextField   bean 1     =     (  (  . DefaultPrivatePersistenceContextField )     ( bf . getBean (  . DefaultPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", ". DefaultPrivatePersistenceContextFieldNamedPerson   bean 2     =     (  (  . DefaultPrivatePersistenceContextFieldNamedPerson )     ( bf . getBean (  . DefaultPrivatePersistenceContextFieldNamedPerson . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceContextSetter   bean 3     =     (  (  . DefaultPublicPersistenceContextSetter )     ( bf . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertSame ( mockEm ,    bean 1  . em )  ;", "assertSame ( mockEm 2  ,    bean 2  . em )  ;", "assertSame ( mockEm 3  ,    bean 3  . em )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceContextsFromJndi"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "EntityManager   mockEm 2     =    mock ( EntityManager . class )  ;", "EntityManager   mockEm 3     =    mock ( EntityManager . class )  ;", "Map < String ,    String >    persistenceContexts    =    new   HashMap <  >  (  )  ;", "persistenceContexts . put (  \" System \"  ,     \" pc 1  \"  )  ;", "persistenceContexts . put (  \" Person \"  ,     \" pc 2  \"  )  ;", "Map < String ,    String >    extendedPersistenceContexts    =    new   HashMap <  >  (  )  ;", "extendedPersistenceContexts . put (  \" System \"  ,     \" pc 3  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pc 1  \"  ,    mockEm )  ;", "jt . addObject (  \" java : comp / env / pc 2  \"  ,    mockEm 2  )  ;", "jt . addObject (  \" java : comp / env / pc 3  \"  ,    mockEm 3  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceContexts ( persistenceContexts )  ;", "bpp . setExtendedPersistenceContexts ( extendedPersistenceContexts )  ;", "bpp . setDefaultPersistenceUnitName (  \" System \"  )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextField . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextFieldNamedPerson . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextFieldNamedPerson . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", ". DefaultPrivatePersistenceContextField   bean 1     =     (  (  . DefaultPrivatePersistenceContextField )     ( bf . getBean (  . DefaultPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", ". DefaultPrivatePersistenceContextFieldNamedPerson   bean 2     =     (  (  . DefaultPrivatePersistenceContextFieldNamedPerson )     ( bf . getBean (  . DefaultPrivatePersistenceContextFieldNamedPerson . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceContextSetter   bean 3     =     (  (  . DefaultPublicPersistenceContextSetter )     ( bf . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertSame ( mockEm ,    bean 1  . em )  ;", "assertSame ( mockEm 2  ,    bean 2  . em )  ;", "assertSame ( mockEm 3  ,    bean 3  . em )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceContextsFromJndiWithDefaultUnit"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", ". EntityManagerFactoryWithInfo   mockEmf 2     =    mock (  . EntityManagerFactoryWithInfo . class )  ;", "Map < String ,    String >    persistenceUnits    =    new   HashMap <  >  (  )  ;", "persistenceUnits . put (  \"  \"  ,     \" pu 1  \"  )  ;", "persistenceUnits . put (  \" Person \"  ,     \" pu 2  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pu 1  \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "jt . addObject (  \" java : comp / env / pu 2  \"  ,    mockEmf 2  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceUnits ( persistenceUnits )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextField . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", ". DefaultPublicPersistenceUnitSetter   bean    =     (  (  . DefaultPublicPersistenceUnitSetter )     ( bf . getBean (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceUnitSetterNamedPerson   bean 2     =     (  (  . DefaultPublicPersistenceUnitSetterNamedPerson )     ( bf . getBean (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  )  )  )  ;", ". DefaultPrivatePersistenceContextField   bean 3     =     (  (  . DefaultPrivatePersistenceContextField )     ( bf . getBean (  . DefaultPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceContextSetter   bean 4     =     (  (  . DefaultPublicPersistenceContextSetter )     ( bf . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "assertSame ( mockEmf 2  ,    bean 2  . emf )  ;", "assertNotNull ( bean 3  . em )  ;", "assertNotNull ( bean 4  . em )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceUnitsFromJndi"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceInjectionTests . EntityManagerFactoryWithInfo   mockEmf 2     =    mock ( PersistenceInjectionTests . EntityManagerFactoryWithInfo . class )  ;", "Map < String ,    String >    persistenceUnits    =    new   HashMap <  >  (  )  ;", "persistenceUnits . put (  \" System \"  ,     \" pu 1  \"  )  ;", "persistenceUnits . put (  \" Person \"  ,     \" pu 2  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pu 1  \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "jt . addObject (  \" java : comp / env / pu 2  \"  ,    mockEmf 2  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceUnits ( persistenceUnits )  ;", "bpp . setDefaultPersistenceUnitName (  \" System \"  )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class )  )  ;", "bf . registerBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  ,    new   RootBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class )  )  ;", "PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter   bean    =     (  ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter )     ( bf . getBean ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", "PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson   bean 2     =     (  ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson )     ( bf . getBean ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "assertSame ( mockEmf 2  ,    bean 2  . emf )  ;", "}", "METHOD_END"], "methodName": ["testPersistenceUnitsFromJndiWithDefaultUnit"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "AbstractEntityManagerFactoryBeanTests . mockEmf    =    mock ( EntityManagerFactory . class ,    withSettings (  )  . serializable (  )  )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextField . class )  )  ;", "gac . registerBeanDefinition (  . FactoryBeanWithPersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . FactoryBeanWithPersistenceContextField . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPrivatePersistenceContextField   bean    =     (  (  . DefaultPrivatePersistenceContextField )     ( gac . getBean (  . DefaultPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", ". FactoryBeanWithPersistenceContextField   bean 2     =     (  (  . FactoryBeanWithPersistenceContextField )     ( gac . getBean (  (  \"  &  \"     +     (  . FactoryBeanWithPersistenceContextField . class . getName (  )  )  )  )  )  )  ;", "assertNotNull ( bean . em )  ;", "assertNotNull ( bean 2  . em )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( bean . em )  )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( bean 2  . em )  )  ;", "}", "METHOD_END"], "methodName": ["testPrivatePersistenceContextField"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPrivatePersistenceUnitField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceUnitField . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPrivatePersistenceUnitField   bean    =     (  (  . DefaultPrivatePersistenceUnitField )     ( gac . getBean (  . DefaultPrivatePersistenceUnitField . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "}", "METHOD_END"], "methodName": ["testPrivatePersistenceUnitField"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultVendorSpecificPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultVendorSpecificPrivatePersistenceContextField . class )  )  ;", "gac . refresh (  )  ;", ". DefaultVendorSpecificPrivatePersistenceContextField   bean    =     (  (  . DefaultVendorSpecificPrivatePersistenceContextField )     ( gac . getBean (  . DefaultVendorSpecificPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", "assertNotNull ( bean . em )  ;", "}", "METHOD_END"], "methodName": ["testPrivateVendorSpecificPersistenceContextField"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . put (  \" foo \"  ,     \" bar \"  )  ;", "EntityManager   em    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager ( props )  )  . willReturn ( em )  ;", "given ( em . getDelegate (  )  )  . willReturn ( new   Object (  )  )  ;", "given ( em . isOpen (  )  )  . willReturn ( true )  ;", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new    . MockPersistenceAnnotationBeanPostProcessor (  )  ;", ". DefaultPrivatePersistenceContextFieldWithProperties   transactionalFieldWithProperties    =    new    . DefaultPrivatePersistenceContextFieldWithProperties (  )  ;", ". DefaultPrivatePersistenceContextField   transactionalField    =    new    . DefaultPrivatePersistenceContextField (  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    transactionalFieldWithProperties ,     \" bean 1  \"  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    transactionalField ,     \" bean 2  \"  )  ;", "assertNotNull ( transactionalFieldWithProperties . em )  ;", "assertNotNull ( transactionalField . em )  ;", "assertNotNull ( transactionalFieldWithProperties . em . getDelegate (  )  )  ;", "try    {", "TransactionSynchronizationManager . bindResource ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    new   EntityManagerHolder ( em )  )  ;", "assertNotNull ( transactionalField . em . getDelegate (  )  )  ;", "verify ( em )  . close (  )  ;", "}    finally    {", "TransactionSynchronizationManager . unbindResource ( AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "}", "}", "METHOD_END"], "methodName": ["testPropertiesForSharedEntityManager1"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . put (  \" foo \"  ,     \" bar \"  )  ;", "EntityManager   em    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( em )  ;", "given ( em . getDelegate (  )  )  . willReturn ( new   Object (  )  ,     2  )  ;", "given ( em . isOpen (  )  )  . willReturn ( true )  ;", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new    . MockPersistenceAnnotationBeanPostProcessor (  )  ;", ". DefaultPrivatePersistenceContextFieldWithProperties   transactionalFieldWithProperties    =    new    . DefaultPrivatePersistenceContextFieldWithProperties (  )  ;", ". DefaultPrivatePersistenceContextField   transactionalField    =    new    . DefaultPrivatePersistenceContextField (  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    transactionalFieldWithProperties ,     \" bean 1  \"  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    transactionalField ,     \" bean 2  \"  )  ;", "assertNotNull ( transactionalFieldWithProperties . em )  ;", "assertNotNull ( transactionalField . em )  ;", "assertNotNull ( transactionalField . em . getDelegate (  )  )  ;", "try    {", "TransactionSynchronizationManager . bindResource ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    new   EntityManagerHolder ( em )  )  ;", "assertNotNull ( transactionalFieldWithProperties . em . getDelegate (  )  )  ;", "verify ( em )  . close (  )  ;", "}    finally    {", "TransactionSynchronizationManager . unbindResource ( AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "}", "}", "METHOD_END"], "methodName": ["testPropertiesForSharedEntityManager2"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . put (  \" foo \"  ,     \" bar \"  )  ;", "EntityManager   em    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager ( props )  )  . willReturn ( em )  ;", "given ( em . getDelegate (  )  )  . willReturn ( new   Object (  )  )  ;", "given ( em . isOpen (  )  )  . willReturn ( true )  ;", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new    . MockPersistenceAnnotationBeanPostProcessor (  )  ;", ". DefaultPrivatePersistenceContextFieldWithProperties   transactionalField    =    new    . DefaultPrivatePersistenceContextFieldWithProperties (  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    transactionalField ,     \" bean \"  )  ;", "assertNotNull ( transactionalField . em )  ;", "assertNotNull ( transactionalField . em . getDelegate (  )  )  ;", "verify ( em )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testPropertiesForTransactionalEntityManager"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . put (  \" foo \"  ,     \" bar \"  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager ( props )  )  . willReturn ( mockEm )  ;", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new    . MockPersistenceAnnotationBeanPostProcessor (  )  ;", ". DefaultPrivatePersistenceContextFieldExtendedWithProps   dppcf    =    new    . DefaultPrivatePersistenceContextFieldExtendedWithProps (  )  ;", "pabpp . postProcessPropertyValues ( null ,    null ,    dppcf ,     \" bean \"  )  ;", "assertNotNull ( dppcf . em )  ;", "}", "METHOD_END"], "methodName": ["testPropertiesPassedIn"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceContextSetter   bean    =     (  (  . DefaultPublicPersistenceContextSetter )     ( gac . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertNotNull ( bean . em )  ;", "}", "METHOD_END"], "methodName": ["testPublicExtendedPersistenceContextSetter"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class ,    withSettings (  )  . serializable (  )  )  ;", "given ( mockEm . isOpen (  )  )  . willReturn ( true )  ;", ". EntityManagerFactoryWithInfo   mockEmf    =    mock (  . EntityManagerFactoryWithInfo . class )  ;", "given ( mockEmf . getNativeEntityManagerFactory (  )  )  . willReturn ( mockEmf )  ;", "given ( mockEmf . getJpaDialect (  )  )  . willReturn ( new   DefaultJpaDialect (  )  )  ;", "given ( mockEmf . getEntityManagerInterface (  )  )  . willReturn (  (  ( Class )     ( EntityManager . class )  )  )  ;", "given ( mockEmf . getBeanClassLoader (  )  )  . willReturn ( getClass (  )  . getClassLoader (  )  )  ;", "given ( mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceContextSetter   bean    =     (  (  . DefaultPublicPersistenceContextSetter )     ( gac . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertNotNull ( bean . em )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( bean . em )  )  ;", "}", "METHOD_END"], "methodName": ["testPublicExtendedPersistenceContextSetterWithEntityManagerInfoAndSerialization"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm 2     =    mock ( EntityManager . class )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "RootBeanDefinition   bd    =    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  ;", "bd . getPropertyValues (  )  . add (  \" entityManager \"  ,    mockEm 2  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    bd )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceContextSetter   bean    =     (  (  . DefaultPublicPersistenceContextSetter )     ( gac . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertSame ( mockEm 2  ,    bean . em )  ;", "}", "METHOD_END"], "methodName": ["testPublicExtendedPersistenceContextSetterWithOverriding"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceInjectionTests . DummyInvocationHandler   ih    =    new   PersistenceInjectionTests . DummyInvocationHandler (  )  ;", "Object   mockEm    =    Proxy . newProxyInstance ( getClass (  )  . getClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    EntityManager . class    }  ,    ih )  ;", "given ( AbstractEntityManagerFactoryBeanTests . mockEmf . createEntityManager (  )  )  . willReturn (  (  ( EntityManager )     ( mockEm )  )  )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "SimpleMapScope   myScope    =    new   SimpleMapScope (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerScope (  \" myScope \"  ,    myScope )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "RootBeanDefinition   bd    =    new   RootBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceContextSetter . class )  ;", "bd . setScope (  \" myScope \"  )  ;", "gac . registerBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    bd )  ;", "gac . refresh (  )  ;", "PersistenceInjectionTests . DefaultPublicPersistenceContextSetter   bean    =     (  ( PersistenceInjectionTests . DefaultPublicPersistenceContextSetter )     ( gac . getBean ( PersistenceInjectionTests . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertNotNull ( bean . em )  ;", "assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( bean . em )  )  ;", "SimpleMapScope   serialized    =     (  ( SimpleMapScope )     ( SerializationTestUtils . serializeAndDeserialize ( myScope )  )  )  ;", "serialized . close (  )  ;", "assertTrue ( PersistenceInjectionTests . DummyInvocationHandler . closed )  ;", "PersistenceInjectionTests . DummyInvocationHandler . closed    =    false ;", "}", "METHOD_END"], "methodName": ["testPublicExtendedPersistenceContextSetterWithSerialization"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceUnitSetter   bean    =     (  (  . DefaultPublicPersistenceUnitSetter )     ( gac . getBean (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "}", "METHOD_END"], "methodName": ["testPublicPersistenceUnitSetter"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceInjectionTests . EntityManagerFactoryWithInfo   mockEmf 2     =    mock ( PersistenceInjectionTests . EntityManagerFactoryWithInfo . class )  ;", "given ( mockEmf 2  . getPersistenceUnitName (  )  )  . willReturn (  \" Person \"  )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory 2  \"  ,    mockEmf 2  )  ;", "RootBeanDefinition   processorDef    =    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  ;", "processorDef . getPropertyValues (  )  . add (  \" defaultPersistenceUnitName \"  ,     \" entityManagerFactory \"  )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    processorDef )  ;", "gac . registerBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class )  )  ;", "gac . registerBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  ,    new   RootBeanDefinition ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class )  )  ;", "gac . refresh (  )  ;", "PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter   bean    =     (  ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter )     ( gac . getBean ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", "PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson   bean 2     =     (  ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson )     ( gac . getBean ( PersistenceInjectionTests . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "assertSame ( mockEmf 2  ,    bean 2  . emf )  ;", "}", "METHOD_END"], "methodName": ["testPublicPersistenceUnitSetterWithMultipleUnitsIdentifiedThroughUnitName"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   mockEmf 2     =    mock ( EntityManagerFactory . class )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "RootBeanDefinition   bd    =    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class )  ;", "bd . getPropertyValues (  )  . add (  \" emf \"  ,    mockEmf 2  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    bd )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceUnitSetter   bean    =     (  (  . DefaultPublicPersistenceUnitSetter )     ( gac . getBean (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", "assertSame ( mockEmf 2  ,    bean . emf )  ;", "}", "METHOD_END"], "methodName": ["testPublicPersistenceUnitSetterWithOverriding"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   mockEmf 2     =    mock ( EntityManagerFactory . class )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory 2  \"  ,    mockEmf 2  )  ;", "gac . registerAlias (  \" entityManagerFactory 2  \"  ,     \" Person \"  )  ;", "RootBeanDefinition   processorDef    =    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  ;", "processorDef . getPropertyValues (  )  . add (  \" defaultPersistenceUnitName \"  ,     \" entityManagerFactory \"  )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    processorDef )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class )  )  ;", "gac . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class )  )  ;", "gac . refresh (  )  ;", ". DefaultPublicPersistenceUnitSetter   bean    =     (  (  . DefaultPublicPersistenceUnitSetter )     ( gac . getBean (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceUnitSetterNamedPerson   bean 2     =     (  (  . DefaultPublicPersistenceUnitSetterNamedPerson )     ( gac . getBean (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "assertSame ( mockEmf 2  ,    bean 2  . emf )  ;", "}", "METHOD_END"], "methodName": ["testPublicPersistenceUnitSetterWithUnitIdentifiedThroughBeanName"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManagerFactory   mockEmf 2     =    mock ( EntityManagerFactory . class )  ;", "EntityManager   mockEm 2     =    mock ( EntityManager . class )  ;", "given ( mockEmf 2  . createEntityManager (  )  )  . willReturn ( mockEm 2  )  ;", "GenericApplicationContext   gac    =    new   GenericApplicationContext (  )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" entityManagerFactory \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "gac . getDefaultListableBeanFactory (  )  . registerSingleton (  \" unit 2  \"  ,    mockEmf 2  )  ;", "gac . registerBeanDefinition (  \" annotationProcessor \"  ,    new   RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor . class )  )  ;", "gac . registerBeanDefinition (  . SpecificPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . SpecificPublicPersistenceContextSetter . class )  )  ;", "gac . refresh (  )  ;", ". SpecificPublicPersistenceContextSetter   bean    =     (  (  . SpecificPublicPersistenceContextSetter )     ( gac . getBean (  . SpecificPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertNotNull ( bean . getEntityManager (  )  )  ;", "bean . getEntityManager (  )  . flush (  )  ;", "verify ( mockEm 2  )  . getTransaction (  )  ;", "verify ( mockEm 2  )  . flush (  )  ;", "}", "METHOD_END"], "methodName": ["testPublicSpecificExtendedPersistenceContextSetter"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "try    {", "pabpp . postProcessPropertyValues ( null ,    null ,    new    . SetterOfWrongTypeAnnotatedWithPersistenceUnit (  )  ,     \" bean \"  )  ;", "fail (  \" Can ' t   inject   this   setter \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testSetterOfWrongTypeAnnotatedWithPersistenceUnit"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "PersistenceAnnotationBeanPostProcessor   pabpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "try    {", "pabpp . postProcessPropertyValues ( null ,    null ,    new    . SetterWithNoArgs (  )  ,     \" bean \"  )  ;", "fail (  \" Can ' t   inject   this   setter \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["testSetterWithNoArgs"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "EntityManager   mockEm 2     =    mock ( EntityManager . class )  ;", "Map < String ,    String >    persistenceContexts    =    new   HashMap <  >  (  )  ;", "persistenceContexts . put (  \" System \"  ,     \" pc 1  \"  )  ;", "Map < String ,    String >    extendedPersistenceContexts    =    new   HashMap <  >  (  )  ;", "extendedPersistenceContexts . put (  \" System \"  ,     \" pc 2  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pc 1  \"  ,    mockEm )  ;", "jt . addObject (  \" java : comp / env / pc 2  \"  ,    mockEm 2  )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceContexts ( persistenceContexts )  ;", "bpp . setExtendedPersistenceContexts ( extendedPersistenceContexts )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition (  . DefaultPrivatePersistenceContextField . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPrivatePersistenceContextField . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceContextSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceContextSetter . class )  )  ;", ". DefaultPrivatePersistenceContextField   bean 1     =     (  (  . DefaultPrivatePersistenceContextField )     ( bf . getBean (  . DefaultPrivatePersistenceContextField . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceContextSetter   bean 2     =     (  (  . DefaultPublicPersistenceContextSetter )     ( bf . getBean (  . DefaultPublicPersistenceContextSetter . class . getName (  )  )  )  )  ;", "assertSame ( mockEm ,    bean 1  . em )  ;", "assertSame ( mockEm 2  ,    bean 2  . em )  ;", "}", "METHOD_END"], "methodName": ["testSinglePersistenceContextFromJndi"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    persistenceUnits    =    new   HashMap <  >  (  )  ;", "persistenceUnits . put (  \" Person \"  ,     \" pu 1  \"  )  ;", "ExpectedLookupTemplate   jt    =    new   ExpectedLookupTemplate (  )  ;", "jt . addObject (  \" java : comp / env / pu 1  \"  ,    AbstractEntityManagerFactoryBeanTests . mockEmf )  ;", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "PersistenceAnnotationBeanPostProcessor   bpp    =    new   PersistenceAnnotationBeanPostProcessor (  )  ;", "bpp . setPersistenceUnits ( persistenceUnits )  ;", "bpp . setJndiTemplate ( jt )  ;", "bf . addBeanPostProcessor ( bpp )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetter . class )  )  ;", "bf . registerBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  ,    new   RootBeanDefinition (  . DefaultPublicPersistenceUnitSetterNamedPerson . class )  )  ;", ". DefaultPublicPersistenceUnitSetter   bean    =     (  (  . DefaultPublicPersistenceUnitSetter )     ( bf . getBean (  . DefaultPublicPersistenceUnitSetter . class . getName (  )  )  )  )  ;", ". DefaultPublicPersistenceUnitSetterNamedPerson   bean 2     =     (  (  . DefaultPublicPersistenceUnitSetterNamedPerson )     ( bf . getBean (  . DefaultPublicPersistenceUnitSetterNamedPerson . class . getName (  )  )  )  )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean . emf )  ;", "assertSame ( AbstractEntityManagerFactoryBeanTests . mockEmf ,    bean 2  . emf )  ;", "}", "METHOD_END"], "methodName": ["testSinglePersistenceUnitFromJndi"], "fileName": "org.springframework.orm.jpa.support.PersistenceInjectionTests"}, {"methodBody": ["METHOD_START", "{", "Assert . notNull ( entityManagerInterface ,     \"  ' entityManagerInterface '    must   not   be   null \"  )  ;", "this . entityManagerInterface    =    entityManagerInterface ;", "}", "METHOD_END"], "methodName": ["setEntityManagerInterface"], "fileName": "org.springframework.orm.jpa.support.SharedEntityManagerBean"}, {"methodBody": ["METHOD_START", "{", "this . synchronizedWithTransaction    =    synchronizedWithTransaction ;", "}", "METHOD_END"], "methodName": ["setSynchronizedWithTransaction"], "fileName": "org.springframework.orm.jpa.support.SharedEntityManagerBean"}, {"methodBody": ["METHOD_START", "{", "Object   o    =    new   Object (  )  ;", "EntityManager   mockEm    =    mock ( EntityManager . class )  ;", "given ( mockEm . isOpen (  )  )  . willReturn ( true )  ;", "mockEmf    =    mock (  . class )  ;", "given ( mockEmf . createEntityManager (  )  )  . willReturn ( mockEm )  ;", "SharedEntityManagerBean   proxyFactoryBean    =    new   SharedEntityManagerBean (  )  ;", "proxyFactoryBean . set ( mockEmf )  ;", "proxyFactoryBean . afterPropertiesSet (  )  ;", "assertTrue ( EntityManager . class . isAssignableFrom ( proxyFactoryBean . getObjectType (  )  )  )  ;", "assertTrue ( proxyFactoryBean . isSingleton (  )  )  ;", "EntityManager   proxy    =    proxyFactoryBean . getObject (  )  ;", "assertSame ( proxy ,    proxyFactoryBean . getObject (  )  )  ;", "assertFalse ( proxy . contains ( o )  )  ;", "assertTrue (  ( proxy   instanceof   EntityManagerProxy )  )  ;", "EntityManagerProxy   emProxy    =     (  ( EntityManagerProxy )     ( proxy )  )  ;", "try    {", "emProxy . getTargetEntityManager (  )  ;", "fail (  \" Should   have   thrown   IllegalStateException   outside   of   transaction \"  )  ;", "}    catch    ( IllegalStateException   ex )     {", "}", "TransactionSynchronizationManager . bindResource ( mockEmf ,    new   EntityManagerHolder ( mockEm )  )  ;", "try    {", "assertSame ( mockEm ,    emProxy . getTargetEntityManager (  )  )  ;", "}    finally    {", "TransactionSynchronizationManager . unbindResource ( mockEmf )  ;", "}", "assertTrue ( TransactionSynchronizationManager . getResourceMap (  )  . isEmpty (  )  )  ;", "verify ( mockEm )  . contains ( o )  ;", "verify ( mockEm )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testValidUsage"], "fileName": "org.springframework.orm.jpa.support.SharedEntityManagerFactoryTests"}, {"methodBody": ["METHOD_START", "{", "return   this . database ;", "}", "METHOD_END"], "methodName": ["getDatabase"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . databasePlatform ;", "}", "METHOD_END"], "methodName": ["getDatabasePlatform"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . generateDdl ;", "}", "METHOD_END"], "methodName": ["isGenerateDdl"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . showSql ;", "}", "METHOD_END"], "methodName": ["isShowSql"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . database    =    database ;", "}", "METHOD_END"], "methodName": ["setDatabase"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . databasePlatform    =    databasePlatform ;", "}", "METHOD_END"], "methodName": ["setDatabasePlatform"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . generateDdl    =    generateDdl ;", "}", "METHOD_END"], "methodName": ["setGenerateDdl"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . showSql    =    showSql ;", "}", "METHOD_END"], "methodName": ["setShowSql"], "fileName": "org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . lazyDatabaseTransaction    =    lazyDatabaseTransaction ;", "}", "METHOD_END"], "methodName": ["setLazyDatabaseTransaction"], "fileName": "org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect"}, {"methodBody": ["METHOD_START", "{", "switch    ( database )     {", "case   DB 2     :", "return   TargetDatabase . DB 2  ;", "case   DERBY    :", "return   TargetDatabase . Derby ;", "case   HSQL    :", "return   TargetDatabase . HSQL ;", "case   INFORMIX    :", "return   TargetDatabase . Infix ;", "case   MYSQL    :", "return   TargetDatabase . MySQL 4  ;", "case   ORACLE    :", "return   TargetDatabase . Oracle ;", "case   POSTGRESQL    :", "return   TargetDatabase . PostgreSQL ;", "case   SQL _ SERVER    :", "return   TargetDatabase . SQLServer ;", "case   SYBASE    :", "return   TargetDatabase . Sybase ;", "default    :", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["determineTargetDatabaseName"], "fileName": "org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   JDBCConnectionException )     {", "return   new   dao . DataAccessResourceFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   SQLGrammarException )     {", "SQLGrammarException   jdbcEx    =     (  ( SQLGrammarException )     ( ex )  )  ;", "return   new   dao . InvalidDataAccessResourceUsageException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   QueryTimeoutException )     {", "QueryTimeoutException   jdbcEx    =     (  ( QueryTimeoutException )     ( ex )  )  ;", "return   new   dao . QueryTimeoutException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   LockAcquisitionException )     {", "LockAcquisitionException   jdbcEx    =     (  ( LockAcquisitionException )     ( ex )  )  ;", "return   new   dao . CannotAcquireLockException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PessimisticLockException )     {", "PessimisticLockException   jdbcEx    =     (  ( PessimisticLockException )     ( ex )  )  ;", "return   new   dao . PessimisticLockingFailureException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   ConstraintViolationException )     {", "ConstraintViolationException   jdbcEx    =     (  ( ConstraintViolationException )     ( ex )  )  ;", "return   new   dao . DataIntegrityViolationException (  (  (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  ;    constraint    [  \"  )     +     ( jdbcEx . getConstraintName (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   DataException )     {", "DataException   jdbcEx    =     (  ( DataException )     ( ex )  )  ;", "return   new   dao . DataIntegrityViolationException (  (  (  (  ( ex . getMessage (  )  )     +     \"  ;    SQL    [  \"  )     +     ( jdbcEx . getSQL (  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "if    ( ex   instanceof   QueryException )     {", "return   new   dao . InvalidDataAccessResourceUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   NonUniqueResultException )     {", "return   new   dao . IncorrectResultSizeDataAccessException ( ex . getMessage (  )  ,     1  ,    ex )  ;", "}", "if    ( ex   instanceof   NonUniqueObjectException )     {", "return   new   dao . DuplicateKeyException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PropertyValueException )     {", "return   new   dao . DataIntegrityViolationException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PersistentObjectException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   TransientObjectException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   ObjectDeletedException )     {", "return   new   dao . InvalidDataAccessApiUsageException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   UnresolvableObjectException )     {", "UnresolvableObjectException   hibEx    =     (  ( UnresolvableObjectException )     ( ex )  )  ;", "return   new   ObjectRetrievalFailureException ( hibEx . getEntityName (  )  ,    hibEx . getIdentifier (  )  ,    ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   WrongClassException )     {", "WrongClassException   hibEx    =     (  ( WrongClassException )     ( ex )  )  ;", "return   new   ObjectRetrievalFailureException ( hibEx . getEntityName (  )  ,    hibEx . getIdentifier (  )  ,    ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   StaleObjectStateException )     {", "StaleObjectStateException   hibEx    =     (  ( StaleObjectStateException )     ( ex )  )  ;", "return   new   ObjectOptimisticLockingFailureException ( hibEx . getEntityName (  )  ,    hibEx . getIdentifier (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   StaleStateException )     {", "return   new   ObjectOptimisticLockingFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   OptimisticEntityLockException )     {", "return   new   ObjectOptimisticLockingFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "if    ( ex   instanceof   PessimisticEntityLockException )     {", "if    (  ( ex . getCause (  )  )    instanceof   LockAcquisitionException )     {", "return   new   dao . CannotAcquireLockException ( ex . getMessage (  )  ,    ex . getCause (  )  )  ;", "}", "return   new   dao . PessimisticLockingFailureException ( ex . getMessage (  )  ,    ex )  ;", "}", "return   new   JpaSystemException ( ex )  ;", "}", "METHOD_END"], "methodName": ["convertHibernateAccessException"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaDialect"}, {"methodBody": ["METHOD_START", "{", "return   entityManager . unwrap ( Session . class )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaDialect"}, {"methodBody": ["METHOD_START", "{", "FlushMode   flushMode    =     (  ( FlushMode )     ( ReflectionUtils . invokeMethod ( HibernateJpaDialect . getFlushMode ,    session )  )  )  ;", "Assert . state (  ( flushMode    !  =    null )  ,     \" No   FlushMode   from   Session \"  )  ;", "if    ( readOnly )     {", "if    (  !  ( flushMode . equals ( MANUAL )  )  )     {", "session . setFlushMode ( MANUAL )  ;", "return   flushMode ;", "}", "} else    {", "if    ( flushMode . lessThan ( COMMIT )  )     {", "session . setFlushMode ( AUTO )  ;", "return   flushMode ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["prepareFlushMode"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaDialect"}, {"methodBody": ["METHOD_START", "{", "this . prepareConnection    =    prepareConnection ;", "}", "METHOD_END"], "methodName": ["setPrepareConnection"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaDialect"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    jpaProperties    =    new   HashMap <  >  (  )  ;", "if    (  ( getDatabasePlatform (  )  )     !  =    null )     {", "jpaProperties . put ( DIALECT ,    getDatabasePlatform (  )  )  ;", "} else    {", "Class <  ?  >    databaseDialectClass    =    determineDatabaseDialectClass ( getDatabase (  )  )  ;", "if    ( databaseDialectClass    !  =    null )     {", "jpaProperties . put ( DIALECT ,    databaseDialectClass . getName (  )  )  ;", "}", "}", "if    ( isGenerateDdl (  )  )     {", "jpaProperties . put ( HBM 2 DDL _ AUTO ,     \" update \"  )  ;", "}", "if    ( isShowSql (  )  )     {", "jpaProperties . put ( SHOW _ SQL ,     \" true \"  )  ;", "}", "if    ( connectionReleaseOnClose )     {", "try    {", "AvailableSettings . class . getField (  \" CONNECTION _ HANDLING \"  )  ;", "jpaProperties . put (  \" h . connection . handling _ mode \"  ,     \" DELAYED _ ACQUISITION _ AND _ HOLD \"  )  ;", "}    catch    ( NoSuchFieldException   ex )     {", "try    {", "AvailableSettings . class . getField (  \" ACQUIRE _ CONNECTIONS \"  )  ;", "jpaProperties . put (  \" h . connection . release _ mode \"  ,     \" ON _ CLOSE \"  )  ;", "}    catch    ( NoSuchFieldException   ex 2  )     {", "}", "}", "}", "return   jpaProperties ;", "}", "METHOD_END"], "methodName": ["buildJpaPropertyMap"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "switch    ( database )     {", "case   DB 2     :", "return   DB 2 Dialect . class ;", "case   DERBY    :", "return   DerbyTenSeDialect . class ;", "case   H 2     :", "return   H 2 Dialect . class ;", "case   HSQL    :", "return   HSQLDialect . class ;", "case   INFORMIX    :", "return   InformixDialect . class ;", "case   MYSQL    :", "return   MySQL 5 Dialect . class ;", "case   ORACLE    :", "return   Oracle 1  2 cDialect . class ;", "case   POSTGRESQL    :", "return   PostgreSQL 9  5 Dialect . class ;", "case   SQL _ SERVER    :", "return   SQLServer 2  0  1  2 Dialect . class ;", "case   SYBASE    :", "return   SybaseDialect . class ;", "default    :", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["determineDatabaseDialectClass"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"}, {"methodBody": ["METHOD_START", "{", "this . jpaDialect . setPrepareConnection ( prepareConnection )  ;", "}", "METHOD_END"], "methodName": ["setPrepareConnection"], "fileName": "org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"}]