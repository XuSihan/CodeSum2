[{"methodBody": ["METHOD_START", "{", "VirtualFile   virtualFile    =    vfs . findFileByPath ( root . getCanonicalPath (  )  )  ;", "assert   virtualFile    !  =    null ;", "getProject (  )  . addSourcesToClasspath ( virtualFile )  ;", "}", "METHOD_END"], "methodName": ["addDirectoryToClassPath"], "fileName": "org.jetbrains.uast.test.env.TestCoreEnvironment"}, {"methodBody": ["METHOD_START", "{", "getProjectEnvironment (  )  . addJarToClassPath ( root )  ;", "}", "METHOD_END"], "methodName": ["addJar"], "fileName": "org.jetbrains.uast.test.env.TestCoreEnvironment"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestCoreEnvironment . sEnvironment )     !  =    null )     {", "return   TestCoreEnvironment . sEnvironment ;", "}", "synchronized ( TestCoreEnvironment . APPLICATION _ LOCK )     {", "if    (  ( TestCoreEnvironment . sEnvironment )     !  =    null )     {", "return   TestCoreEnvironment . sEnvironment ;", "}", "Disposable   parentDisposable    =    Disposer . newDisposable (  )  ;", "Extensions . cleanRootArea ( parentDisposable )  ;", "TestCoreEnvironment . registerAppExtensionPoints (  )  ;", "JavaCoreApplicationEnvironment   coreEnvironment    =    new   JavaCoreApplicationEnvironment ( parentDisposable )  ;", "coreEnvironment . registerApplicationService ( JavaClassSupers . class ,    new   JavaClassSupersImpl (  )  )  ;", "TestCoreEnvironment . sEnvironment    =    coreEnvironment ;", "Disposer . register ( parentDisposable ,    new   Disposable (  )     {", "@ Override", "public   void   dispose (  )     {", "synchronized ( TestCoreEnvironment . APPLICATION _ LOCK )     {", "JavaCoreApplicationEnvironment   environment    =    TestCoreEnvironment . sEnvironment ;", "TestCoreEnvironment . sEnvironment    =    null ;", "Disposer . dispose ( environment . getParentDisposable (  )  )  ;", "ZipHandler . clearFileAccessorCache (  )  ;", "}", "}", "}  )  ;", "return   TestCoreEnvironment . sEnvironment ;", "}", "}", "METHOD_END"], "methodName": ["getCoreEnvironment"], "fileName": "org.jetbrains.uast.test.env.TestCoreEnvironment"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mProjectEnvironment )     !  =    null )     {", "return   mProjectEnvironment ;", "}", "synchronized (  . APPLICATION _ LOCK )     {", "if    (  ( mProjectEnvironment )     !  =    null )     {", "return   mProjectEnvironment ;", "}", "JavaCoreApplicationEnvironment   coreEnvironment    =     . getCoreEnvironment (  )  ;", "mProjectEnvironment    =    new    . TestJavaCoreProjectEnvironment ( coreEnvironment )  ;", "Disposer . register ( mDisposable ,    new   Disposable (  )     {", "@ Override", "public   void   dispose (  )     {", "mProjectEnvironment    =    null ;", "}", "}  )  ;", "return   mProjectEnvironment ;", "}", "}", "METHOD_END"], "methodName": ["getProjectEnvironment"], "fileName": "org.jetbrains.uast.test.env.TestCoreEnvironment"}, {"methodBody": ["METHOD_START", "{", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    EP _ NAME ,    FileTypeExtensionPoint . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    FileContextProvider . EP _ NAME ,    FileContextProvider . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    MetaDataContributor . EP _ NAME ,    MetaDataContributor . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    PsiAugmentProvider . EP _ NAME ,    PsiAugmentProvider . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    JavaMainMethodProvider . EP _ NAME ,    JavaMainMethodProvider . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    ContainerProvider . EP _ NAME ,    ContainerProvider . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    ClsCustomNavigationPolicy . EP _ NAME ,    ClsCustomNavigationPolicy . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    ClassFileDecompilers . EP _ NAME ,    Decompiler . class )  ;", "CoreApplicationEnvironment . registerExtensionPoint ( Extensions . getRootArea (  )  ,    MetaLanguage . EP _ NAME ,    MetaLanguage . class )  ;", "}", "METHOD_END"], "methodName": ["registerAppExtensionPoints"], "fileName": "org.jetbrains.uast.test.env.TestCoreEnvironment"}]