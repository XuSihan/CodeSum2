[{"methodBody": ["METHOD_START", "{", "final   String   socketBindingName    =    model . get ( Attribute . SOCKET _ BINDING . getLocalName (  )  )  . asString (  )  ;", "final   String   serverName    =    model . get ( Attribute . SERVER . getLocalName (  )  )  . asString (  )  ;", "final   String   hostName    =    model . get ( Attribute . HOST . getLocalName (  )  )  . asString (  )  ;", "final   CoordinatorService   coordinatorService    =    new   CoordinatorService (  )  ;", "final   ServiceBuilder < CoordinatorService >    coordinatorServiceBuilder    =    context . getServiceTarget (  )  . addService ( Extension . COORDINATOR ,    coordinatorService )  . addDependency ( JBOSS _ BINDING _ NAME . append ( socketBindingName )  ,    SocketBinding . class ,    coordinatorService . getInjectedSocketBinding (  )  )  . addDependency ( UndertowService . virtualHostName ( serverName ,    hostName )  ,    Host . class ,    coordinatorService . getInjectedHost (  )  )  ;", "coordinatorServiceBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["registerCoordinatorService"], "fileName": "org.wildfly.extension.rts.RTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "public   void   execute ( final   DeploymentProcessorTarget   processorTarget )     {", "processorTarget . addDeploymentProcessor ( Extension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ RTS _ PROVIDERS ,    new   InboundBridgeDeploymentProcessor (  )  )  ;", "}", "}  ,    RUNTIME )  ;", "}", "METHOD_END"], "methodName": ["registerDeploymentProcessors"], "fileName": "org.wildfly.extension.rts.RTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   InboundBridgeService   inboundBridgeService    =    new   InboundBridgeService (  )  ;", "final   ServiceBuilder < InboundBridgeService >    inboundBridgeServiceBuilder    =    context . getServiceTarget (  )  . addService ( Extension . INBOUND _ BRIDGE ,    inboundBridgeService )  . addDependency ( JBOSS _ TXN _ ARJUNA _ RECOVERY _ MANAGER )  . addDependency ( Extension . PARTICIPANT )  ;", "inboundBridgeServiceBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["registerInboundBridgeService"], "fileName": "org.wildfly.extension.rts.RTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   socketBindingName    =    model . get ( Attribute . SOCKET _ BINDING . getLocalName (  )  )  . asString (  )  ;", "final   String   serverName    =    model . get ( Attribute . SERVER . getLocalName (  )  )  . asString (  )  ;", "final   String   hostName    =    model . get ( Attribute . HOST . getLocalName (  )  )  . asString (  )  ;", "final   ParticipantService   participantService    =    new   ParticipantService (  )  ;", "final   ServiceBuilder < ParticipantService >    participantServiceBuilder    =    context . getServiceTarget (  )  . addService ( Extension . PARTICIPANT ,    participantService )  . addDependency ( JBOSS _ BINDING _ NAME . append ( socketBindingName )  ,    SocketBinding . class ,    participantService . getInjectedSocketBinding (  )  )  . addDependency ( UndertowService . virtualHostName ( serverName ,    hostName )  ,    Host . class ,    participantService . getInjectedHost (  )  )  ;", "participantServiceBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["registerParticipantService"], "fileName": "org.wildfly.extension.rts.RTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   socketBindingName    =    model . get ( Attribute . SOCKET _ BINDING . getLocalName (  )  )  . asString (  )  ;", "final   String   serverName    =    model . get ( Attribute . SERVER . getLocalName (  )  )  . asString (  )  ;", "final   String   hostName    =    model . get ( Attribute . HOST . getLocalName (  )  )  . asString (  )  ;", "final   VolatileParticipantService   volatileParticipantService    =    new   VolatileParticipantService (  )  ;", "final   ServiceBuilder < VolatileParticipantService >    volatileParticipantServiceBuilder    =    context . getServiceTarget (  )  . addService ( Extension . VOLATILE _ PARTICIPANT ,    volatileParticipantService )  . addDependency ( JBOSS _ BINDING _ NAME . append ( socketBindingName )  ,    SocketBinding . class ,    volatileParticipantService . getInjectedSocketBinding (  )  )  . addDependency ( UndertowService . virtualHostName ( serverName ,    hostName )  ,    Host . class ,    volatileParticipantService . getInjectedHost (  )  )  ;", "volatileParticipantServiceBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["registerVolatileParticipantService"], "fileName": "org.wildfly.extension.rts.RTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =     ( RTSSubsystemExtension . SUBSYSTEM _ NAME )     +     ( keyPrefix    =  =    null    ?     \"  \"     :     \"  .  \"     +    keyPrefix )  ;", "return   new   StandardResourceDescriptionResolver ( prefix ,    RTSSubsystemExtension . RESOURCE _ NAME ,    RTSSubsystemExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.wildfly.extension.rts.RTSSubsystemExtension"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   SERVER    :", "Definition . SERVER . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "case   HOST    :", "Definition . HOST . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "case   SOCKET _ BINDING    :", "Definition . SOCKET _ BINDING . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseServletElement"], "fileName": "org.wildfly.extension.rts.RTSSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.wildfly.extension.rts.configuration.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.wildfly.extension.rts.configuration.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   getLocalName (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.wildfly.extension.rts.configuration.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.wildfly.extension.rts.configuration.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.wildfly.extension.rts.configuration.Element"}, {"methodBody": ["METHOD_START", "{", "final   CompositeIndex   index    =    deploymentUnit . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "if    ( index    =  =    null )     {", "return   false ;", "}", "final   List < AnnotationInstance >    pathAnnotations    =    index . getAnnotations (  . PATH _ DOT _ NAME )  ;", "for    ( AnnotationInstance   annotationInstance    :    pathAnnotations )     {", "final   Object   target    =    annotationInstance . target (  )  ;", "if    ( target   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( target )  )  ;", "if    (  ( classInfo . annotations (  )  . get (  . TRANSACTIONAL _ DOT _ NAME )  )     !  =    null )     {", "return   true ;", "}", "if    (  ( classInfo . annotations (  )  . get (  . TRANSACTION _ ATTRIBUTE _ DOT _ NAME )  )     !  =    null )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isBridgeRequired"], "fileName": "org.wildfly.extension.rts.deployment.InboundBridgeDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ResteasyDeploymentData   resteasyDeploymentData    =    deploymentUnit . getAttachment ( RESTEASY _ DEPLOYMENT _ DATA )  ;", "if    ( resteasyDeploymentData    !  =    null )     {", "for    ( final   String   provider    :     . PROVIDERS )     {", "resteasyDeploymentData . getScannedProviderClasses (  )  . add ( provider )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["registerProviders"], "fileName": "org.wildfly.extension.rts.deployment.InboundBridgeDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "DeploymentManager   manager    =    Factory . newInstance (  )  . addDeployment ( deploymentInfo )  ;", "manager . deploy (  )  ;", "deployment    =    manager . getDeployment (  )  ;", "try    {", "injectedHost . getValue (  )  . registerDeployment ( deployment ,    manager . start (  )  )  ;", "}    catch    ( letException   e )     {", "RTSLogger . ROOT _ LOGGER . warn ( e . getMessage (  )  ,    e )  ;", "deployment    =    null ;", "}", "}", "METHOD_END"], "methodName": ["deployServlet"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "final   String   address    =    injectedSocketBinding . getValue (  )  . getAddress (  )  . getHostAddress (  )  ;", "final   int   port    =    injectedSocketBinding . getValue (  )  . getolutePort (  )  ;", "if    (  ( injectedSocketBinding . getValue (  )  . getAddress (  )  )    instanceof   Inet 4 Address )     {", "return    (  (  \" http :  /  /  \"     +    address )     +     \"  :  \"  )     +    port ;", "} else    {", "return    (  (  \" http :  /  /  [  \"     +    address )     +     \"  ]  :  \"  )     +    port ;", "}", "}", "METHOD_END"], "methodName": ["getBaseUrl"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentInfo   deploymentInfo    =    new   DeploymentInfo (  )  ;", "deploymentInfo . setClassLoader ( ParticipantSclass . getClassLoader (  )  )  ;", "deploymentInfo . setContextPath ( contextPath )  ;", "deploymentInfo . setDeploymentName ( name )  ;", "deploymentInfo . addServlets ( getResteasyServlet (  )  )  ;", "deploymentInfo . addListener ( getResteasyListener (  )  )  ;", "deploymentInfo . addListener ( getRestATListener (  )  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    initialParameters . entrySet (  )  )     {", "deploymentInfo . addInitParameter ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "return   deploymentInfo ;", "}", "METHOD_END"], "methodName": ["getDeploymentInfo"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "return   injectedHost ;", "}", "METHOD_END"], "methodName": ["getInjectedHost"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "return   injectedSocketBinding ;", "}", "METHOD_END"], "methodName": ["getInjectedSocketBinding"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "final   ListenerInfo   listenerInfo    =    new   ListenerInfo ( ContextListener . class )  ;", "return   listenerInfo ;", "}", "METHOD_END"], "methodName": ["getRestATListener"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "final   ListenerInfo   listenerInfo    =    new   ListenerInfo ( ResteasyBootstrap . class )  ;", "return   listenerInfo ;", "}", "METHOD_END"], "methodName": ["getResteasyListener"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "final   ServletInfo   servletInfo    =    new   ServletInfo (  \" Resteasy \"  ,    HttpServletDispatcher . class )  ;", "servletInfo . addMapping (  \"  /  *  \"  )  ;", "return   servletInfo ;", "}", "METHOD_END"], "methodName": ["getResteasyServlet"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deployment )     !  =    null )     {", "injectedHost . getValue (  )  . unregisterDeployment ( deployment )  ;", "deployment    =    null ;", "}", "}", "METHOD_END"], "methodName": ["undeployServlet"], "fileName": "org.wildfly.extension.rts.service.AbstractRTSService"}, {"methodBody": ["METHOD_START", "{", "undeployServlet (  )  ;", "final   Map < String ,    String >    initialParameters    =    new   HashMap < String ,    String >  (  )  ;", "initialParameters . put (  \" Application \"  ,    CoordinatorApplication . class . getName (  )  )  ;", "final   DeploymentInfo   coordinatorDeploymentInfo    =    getDeploymentInfo (  . DEPLOYMENT _ NAME ,     . CONTEXT _ PATH ,    initialParameters )  ;", "deployServlet ( coordinatorDeploymentInfo )  ;", "}", "METHOD_END"], "methodName": ["deployCoordinator"], "fileName": "org.wildfly.extension.rts.service.CoordinatorService"}, {"methodBody": ["METHOD_START", "{", "final   RecoveryManager   recoveryManager    =    RecoveryManager . manager (  )  ;", "for    ( RecoveryModule   recoveryModule    :    recoveryManager . getModules (  )  )     {", "if    ( recoveryModule   instanceof   XARecoveryModule )     {", "orphanFilter    =    new   OrphanFilter (  )  ;", "(  ( XARecoveryModule )     ( recoveryModule )  )  . addXAResourceOrphanFilter ( orphanFilter )  ;", "(  ( XARecoveryModule )     ( recoveryModule )  )  . addSerializableXAResourceDeserializer ( new    (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDeserializerAndOrphanFilter"], "fileName": "org.wildfly.extension.rts.service.InboundBridgeService"}, {"methodBody": ["METHOD_START", "{", "final   RecoveryManager   recoveryManager    =    RecoveryManager . manager (  )  ;", "recoveryModule    =    new   RecoveryModule (  )  ;", "recoveryManager . addModule ( recoveryModule )  ;", "}", "METHOD_END"], "methodName": ["addRecoveryModule"], "fileName": "org.wildfly.extension.rts.service.InboundBridgeService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( orphanFilter )     =  =    null )     {", "return ;", "}", "final   RecoveryManager   recoveryManager    =    RecoveryManager . manager (  )  ;", "for    ( RecoveryModule   recoveryModule    :    recoveryManager . getModules (  )  )     {", "if    ( recoveryModule   instanceof   XARecoveryModule )     {", "(  ( XARecoveryModule )     ( recoveryModule )  )  . removeXAResourceOrphanFilter ( orphanFilter )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeOrphanFilter"], "fileName": "org.wildfly.extension.rts.service.InboundBridgeService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( recoveryModule )     =  =    null )     {", "return ;", "}", "final   RecoveryManager   recoveryManager    =    RecoveryManager . manager (  )  ;", "recoveryManager . removeModule ( recoveryModule ,    false )  ;", "}", "METHOD_END"], "methodName": ["removeRecoveryModule"], "fileName": "org.wildfly.extension.rts.service.InboundBridgeService"}, {"methodBody": ["METHOD_START", "{", "undeployServlet (  )  ;", "final   Map < String ,    String >    initialParameters    =    new   HashMap < String ,    String >  (  )  ;", "initialParameters . put (  \" Application \"  ,    ParticipantApplication . class . getName (  )  )  ;", "final   DeploymentInfo   participantDeploymentInfo    =    getDeploymentInfo (  . DEPLOYMENT _ NAME ,     . CONTEXT _ PATH ,    initialParameters )  ;", "deployServlet ( participantDeploymentInfo )  ;", "}", "METHOD_END"], "methodName": ["deployParticipant"], "fileName": "org.wildfly.extension.rts.service.ParticipantService"}, {"methodBody": ["METHOD_START", "{", "undeployServlet (  )  ;", "final   Map < String ,    String >    initialParameters    =    new   HashMap < String ,    String >  (  )  ;", "initialParameters . put (  \" Application \"  ,    VolatileParticipantApplication . class . getName (  )  )  ;", "final   DeploymentInfo   participantDeploymentInfo    =    getDeploymentInfo (  . DEPLOYMENT _ NAME ,     . CONTEXT _ PATH ,    initialParameters )  ;", "deployServlet ( participantDeploymentInfo )  ;", "}", "METHOD_END"], "methodName": ["deployParticipant"], "fileName": "org.wildfly.extension.rts.service.VolatileParticipantService"}]