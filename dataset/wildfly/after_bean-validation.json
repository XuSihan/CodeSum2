[{"methodBody": ["METHOD_START", "{", "if    ( moduleDescription    =  =    null )     {", "return ;", "}", "final   ServiceTarget   serviceTarget    =    phaseContext . getServiceTarget (  )  ;", "if    (  ( mentTypeMarker . isType ( WAR ,    deploymentUnit )  )     |  |     ( mentTypeMarker . isType ( APPLICATION _ CLIENT ,    deploymentUnit )  )  )     {", "final   ServiceName   moduleContextServiceName    =    ContextNames . contextServiceNameOfModule ( moduleDescription . getApplicationName (  )  ,    moduleDescription . getModuleName (  )  )  ;", "bindServices ( factory ,    serviceTarget ,    moduleDescription ,    moduleDescription . getModuleName (  )  ,    moduleContextServiceName )  ;", "}", "for    ( ComponentDescription   component    :    moduleDescription . getComponentDescriptions (  )  )     {", "if    (  ( component . getNamingMode (  )  )     =  =     ( ComponentNamingMode . CREATE )  )     {", "final   ServiceName   compContextServiceName    =    ContextNames . contextServiceNameOfComponent ( moduleDescription . getApplicationName (  )  ,    moduleDescription . getModuleName (  )  ,    component . getComponentName (  )  )  ;", "bindServices ( factory ,    serviceTarget ,    moduleDescription ,    component . getComponentName (  )  ,    compContextServiceName )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["bindFactoryToJndi"], "fileName": "org.jboss.as.ee.beanvalidation.BeanValidationFactoryDeployer"}, {"methodBody": ["METHOD_START", "{", "BinderService   validatorFactoryBindingService    =    new   BinderService (  \" ValidatorFactory \"  )  ;", "validatorFactoryBindingService . getManagedObjectInjector (  )  . inject ( new   naming . ValueManagedReferenceFactory ( new   ImmediateValue < Object >  ( factory )  )  )  ;", "serviceTarget . addService ( contextServiceName . append (  \" ValidatorFactory \"  )  ,    validatorFactoryBindingService )  . addDependency ( contextServiceName ,    ServiceBasedNamingStore . class ,    validatorFactoryBindingService . getNamingStoreInjector (  )  )  . install (  )  ;", "BinderService   validatorBindingService    =    new   BinderService (  \" Validator \"  )  ;", "validatorBindingService . getManagedObjectInjector (  )  . inject ( new   ValidatorJndiInjectable ( factory )  )  ;", "serviceTarget . addService ( contextServiceName . append (  \" Validator \"  )  ,    validatorBindingService )  . addDependency ( contextServiceName ,    ServiceBasedNamingStore . class ,    validatorBindingService . getNamingStoreInjector (  )  )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["bindServices"], "fileName": "org.jboss.as.ee.beanvalidation.BeanValidationFactoryDeployer"}, {"methodBody": ["METHOD_START", "{", "ValidatorFactory   result    =    delegate ;", "if    ( result    =  =    null )     {", "synchronized ( this )     {", "result    =    delegate ;", "if    ( result    =  =    null )     {", "delegate    =    result    =    initFactory (  )  ;", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactory"}, {"methodBody": ["METHOD_START", "{", "final   ClassLoader   oldTCCL    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( classLoader )  ;", "return   Validation . byDefaultProvider (  )  . providerResolver ( new   WildFlyProviderResolver (  )  )  . configure (  )  . build (  )  ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( oldTCCL )  ;", "}", "}", "METHOD_END"], "methodName": ["initFactory"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactory"}, {"methodBody": ["METHOD_START", "{", "synchronized ( this )     {", "delegate    =    v ;", "}", "}", "METHOD_END"], "methodName": ["replaceDelegate"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactory"}, {"methodBody": ["METHOD_START", "{", "validatorFactory    =    new   LazyValidatorFactory ( WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  )  ;", "}", "METHOD_END"], "methodName": ["setupValidatorFactory"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase"}, {"methodBody": ["METHOD_START", "{", "HibernateValidatorFactory   hibernateValidatorFactory    =    validatorFactory . unwrap ( HibernateValidatorFactory . class )  ;", "assertNotNull (  \"    should   delegate   to   the   HV   factory   by   default \"  ,    hibernateValidatorFactory )  ;", "Validator   validator    =    validatorFactory . getValidator (  )  ;", "assertNotNull (  \"    should   provide   a   validator \"  ,    validator )  ;", "}", "METHOD_END"], "methodName": ["testHibernateValidatorIsUsedAsProviderByDefault"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase"}, {"methodBody": ["METHOD_START", "{", "Validator   validator    =    validatorFactory . getValidator (  )  ;", "assertNotNull (  \"    should   provide   a   validator \"  ,    validator )  ;", "assertTrue (  \" Validator   should   be   of   type   created   by   XML - configured   provider \"  ,     ( validator   instanceof   MyValidatorImpl )  )  ;", "}", "METHOD_END"], "methodName": ["testSpecificProviderCanBeConfiguredInValidationXml"], "fileName": "org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   WildFlySecurityManager . doUnchecked ( new   PrivilegedAction < List < VProvider <  ?  >  >  >  (  )     {", "@ Override", "public   List < VProvider <  ?  >  >    run (  )     {", "return   loadProviders ( classLoader )  ;", "}", "}  )  ;", "} else    {", "return   loadProviders ( classLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["getValidationProviders"], "fileName": "org.jboss.as.ee.beanvalidation.WildFlyProviderResolver"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" rawtypes \"  )", "Iterator < VProvider >    providerIterator    =    ServiceLoader . load ( VProvider . class ,    classLoader )  . iterator (  )  ;", "LinkedList < VProvider <  ?  >  >    providers    =    new   LinkedList < VProvider <  ?  >  >  (  )  ;", "while    ( providerIterator . hasNext (  )  )     {", "try    {", "VProvider <  ?  >    provider    =    providerIterator . next (  )  ;", "if    ( provider . getClass (  )  . getName (  )  . equals (  \" HibernateValidator \"  )  )     {", "providers . addFirst ( provider )  ;", "} else    {", "providers . add ( provider )  ;", "}", "}    catch    ( ServiceConfigurationError   e )     {", "}", "}", "return   providers ;", "}", "METHOD_END"], "methodName": ["loadProviders"], "fileName": "org.jboss.as.ee.beanvalidation.WildFlyProviderResolver"}, {"methodBody": ["METHOD_START", "{", "providerResolver    =    new   WildFlyProviderResolver (  )  ;", "}", "METHOD_END"], "methodName": ["setupProviderResolver"], "fileName": "org.jboss.as.ee.beanvalidation.WildFlyProviderResolverTestCase"}, {"methodBody": ["METHOD_START", "{", "List < ValidationProvider <  ?  >  >    validationProviders    =    providerResolver . getValidationProviders (  )  ;", "assertEquals (  2  ,    validationProviders . size (  )  )  ;", "assertEquals ( HibernateValidator . class . getName (  )  ,    validationProviders . get (  0  )  . getClass (  )  . getName (  )  )  ;", "assertEquals ( MyValidationProvider . class . getName (  )  ,    validationProviders . get (  1  )  . getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHibernateValidatorIsFirstProviderInList"], "fileName": "org.jboss.as.ee.beanvalidation.WildFlyProviderResolverTestCase"}, {"methodBody": ["METHOD_START", "{", "List < ValidationProvider <  ?  >  >    validationProviders    =    providerResolver . getValidationProviders (  )  ;", "assertEquals (  2  ,    validationProviders . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testValidationProvidersCanBeLoadedIfContextLoaderIsNull"], "fileName": "org.jboss.as.ee.beanvalidation.WildFlyProviderResolverTestCase"}, {"methodBody": ["METHOD_START", "{", "return   run ( GetContextClassLoaderAction . getInstance (  )  )  ;", "}", "METHOD_END"], "methodName": ["getContextClassLoader"], "fileName": "org.jboss.as.ee.beanvalidation.testutil.ContextClassLoaderRule"}, {"methodBody": ["METHOD_START", "{", "return   run ( new   ContextClassLoaderRule . NewClassLoaderInstanceAction < T >  ( clazz ,    parent )  )  ;", "}", "METHOD_END"], "methodName": ["newClassLoaderInstance"], "fileName": "org.jboss.as.ee.beanvalidation.testutil.ContextClassLoaderRule"}, {"methodBody": ["METHOD_START", "{", "return    !  ( WildFlySecurityManager . isChecking (  )  )     ?    action . run (  )     :    AccessController . doPrivileged ( action )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.jboss.as.ee.beanvalidation.testutil.ContextClassLoaderRule"}, {"methodBody": ["METHOD_START", "{", "run ( new   SetContextClassLoaderAction ( classLoader )  )  ;", "}", "METHOD_END"], "methodName": ["setContextClassLoader"], "fileName": "org.jboss.as.ee.beanvalidation.testutil.ContextClassLoaderRule"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( BeanValidationExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    BeanValidationExtension . RESOURCE _ NAME ,    BeanValidationExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResolver"], "fileName": "org.wildfly.extension.beanvalidation.BeanValidationExtension"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.wildfly.extension.beanvalidation.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.wildfly.extension.beanvalidation.Namespace"}]