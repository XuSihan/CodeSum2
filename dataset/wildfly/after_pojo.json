[{"methodBody": ["METHOD_START", "{", "return    ( state . ordinal (  )  )     <     ( ordinal (  )  )  ;", "}", "METHOD_END"], "methodName": ["isAfter"], "fileName": "org.jboss.as.pojo.BeanState"}, {"methodBody": ["METHOD_START", "{", "return    ( state . ordinal (  )  )     >     ( ordinal (  )  )  ;", "}", "METHOD_END"], "methodName": ["isBefore"], "fileName": "org.jboss.as.pojo.BeanState"}, {"methodBody": ["METHOD_START", "{", "return   BeanState . values (  )  [  (  ( ordinal (  )  )     +     1  )  ]  ;", "}", "METHOD_END"], "methodName": ["next"], "fileName": "org.jboss.as.pojo.BeanState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( beansXmlFile    =  =    null )     |  |     (  ( beansXmlFile . exists (  )  )     =  =    false )  )", "return ;", "InputStream   xmlStream    =    null ;", "try    {", "xmlStream    =    beansXmlFile . openStream (  )  ;", "final   XMLStreamReader   reader    =    inputFactory . createXMLStreamReader ( xmlStream )  ;", "final   ParseResult < XmlDescriptor >    result    =    new   ParseResult < XmlDescriptor >  (  )  ;", "xmlMapper . parseDocument ( result ,    reader )  ;", "final   XmlDescriptor   xmlDescriptor    =    result . getResult (  )  ;", "if    ( xmlDescriptor    !  =    null )", "unit . addToAttachmentList ( XmlDescriptor . ATTACHMENT _ KEY ,    xmlDescriptor )  ;", "else", "throw   PojoLogger . ROOT _ LOGGER . failedToParse ( beansXmlFile )  ;", "}    catch    ( DeploymentUnitProcessingException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "throw   PojoLogger . ROOT _ LOGGER . parsingException ( beansXmlFile ,    e )  ;", "}    finally    {", "VFSUtils . safeClose ( xmlStream )  ;", "}", "}", "METHOD_END"], "methodName": ["parseDescriptor"], "fileName": "org.jboss.as.pojo.KernelDeploymentParsingProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( root    =  =    null )     |  |     (  ( root . exists (  )  )     =  =    false )  )", "return ;", "Collection < VirtualFile >    beans ;", "final   String   name    =    root . getName (  )  ;", "if    ( name . endsWith (  \" jboss - beans . xml \"  )  )     {", "beans    =    Collections . singleton ( root )  ;", "} else    {", "VirtualFileFilter   filter    =    new   SuffixMatchFilter (  \" jboss - beans . xml \"  )  ;", "beans    =    new   ArrayList < VirtualFile >  (  )  ;", "try    {", "VirtualFile   metainf    =    root . getChild (  \" META - INF \"  )  ;", "if    ( metainf . exists (  )  )", "beans . addAll ( metainf . getChildren ( filter )  )  ;", "VirtualFile   webinf    =    root . getChild (  \" WEB - INF \"  )  ;", "if    ( webinf . exists (  )  )     {", "beans . addAll ( webinf . getChildren ( filter )  )  ;", "metainf    =    webinf . getChild (  \" classes / META - INF \"  )  ;", "if    ( metainf . exists (  )  )", "beans . addAll ( metainf . getChildren ( filter )  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UnitProcessingException ( e )  ;", "}", "}", "for    ( VirtualFile   beansXmlFile    :    beans )", "parseDescriptor ( unit ,    beansXmlFile )  ;", "}", "METHOD_END"], "methodName": ["parseDescriptors"], "fileName": "org.jboss.as.pojo.KernelDeploymentParsingProcessor"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.jboss.as.pojo.ParseResult"}, {"methodBody": ["METHOD_START", "{", "this . result    =    result ;", "}", "METHOD_END"], "methodName": ["setResult"], "fileName": "org.jboss.as.pojo.ParseResult"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   List < KernelDeploymentXmlDescriptor >    kdXmlDescriptors    =    unit . getAttachment ( KernelDeploymentXmlDescriptor . ATTACHMENT _ KEY )  ;", "if    (  ( kdXmlDescriptors    =  =    null )     |  |     ( kdXmlDescriptors . isEmpty (  )  )  )", "return ;", "final   Module   module    =    unit . getAttachment ( MODULE )  ;", "if    ( module    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . noModuleFound ( unit )  ;", "final   ServiceTarget   serviceTarget    =    phaseContext . getServiceTarget (  )  ;", "final   DeploymentReflectionIndex   index    =    unit . getAttachment ( REFLECTION _ INDEX )  ;", "if    ( index    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . missingReflectionIndex ( unit )  ;", "for    ( KernelDeploymentXmlDescriptor   kdXmlDescriptor    :    kdXmlDescriptors )     {", "final   List < BeanMetaDataConfig >    beanConfigs    =    kdXmlDescriptor . getBeans (  )  ;", "for    ( final   BeanMetaDataConfig   beanConfig    :    beanConfigs )     {", "describeBean ( module ,    serviceTarget ,    index ,    beanConfig )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.pojo.ParsedKernelDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   BeanState   state    =    BeanState . NOT _ INSTALLED ;", "final   ServiceName   describedServiceName    =    BeanMetaDataConfig . toBeanName ( beanConfig . getName (  )  ,    state . next (  )  )  ;", "final   DescribedPojoPhase   describedService    =    new   DescribedPojoPhase ( dIndex ,    beanConfig )  ;", "final   ServiceBuilder   describedServiceBuilder    =    serviceTarget . addService ( describedServiceName ,    describedService )  ;", "describedService . registerAliases ( describedServiceBuilder )  ;", "final   ConfigVisitor   visitor    =    new   DefaultConfigVisitor ( describedServiceBuilder ,    state ,    module ,    dIndex )  ;", "beanConfig . visit ( visitor )  ;", "describedServiceBuilder . setInitialMode ( beanConfig . getMode (  )  . getMode (  )  )  ;", "describedServiceBuilder . install (  )  ;", "}", "METHOD_END"], "methodName": ["describeBean"], "fileName": "org.jboss.as.pojo.ParsedKernelDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return   new   StandardResourceDescriptionResolver ( keyPrefix ,    PojoExtension . RESOURCE _ NAME ,    PojoExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.pojo.PojoExtension"}, {"methodBody": ["METHOD_START", "{", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "public   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "processorTarget . addDeploymentProcessor ( Extension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ POJO _ DEPLOYMENT ,    new   KernelDeploymentParsingProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( Extension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    POST _ MODULE _ POJO ,    new   KernelDeploymentModuleProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( Extension . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ POJO _ DEPLOYMENT ,    new   ParsedKernelDeploymentProcessor (  )  )  ;", "}", "}  ,    RUNTIME )  ;", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.pojo.PojoSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "model . setEmptyObject (  )  ;", "}", "METHOD_END"], "methodName": ["populateModel"], "fileName": "org.jboss.as.pojo.PojoSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getCurrentNodes"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitor"}, {"methodBody": ["METHOD_START", "{", "nodes . push ( node )  ;", "try    {", "for    ( Node   child    :    node . getChildren ( this )  )     {", "child . visit ( this )  ;", "}", "}    finally    {", "nodes . pop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitor"}, {"methodBody": ["METHOD_START", "{", "List < ConfigVisitorNode >    nodes    =    new   ArrayList < ConfigVisitorNode >  (  )  ;", "addChildren ( visitor ,    nodes )  ;", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "Type [  ]    tp    =    type . getActualTypeArguments (  )  ;", "if    (  ( index    +     1  )     >     ( tp . length )  )", "return   null ;", "return   tp [ index ]  ;", "}", "METHOD_END"], "methodName": ["getComponentType"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultBeanInfo ( DeploymentReflectionIndex . create (  )  ,    clazz )  ;", "}", "METHOD_END"], "methodName": ["getTempBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultBeanInfo ( visitor . getReflectionIndex (  )  ,    clazz )  ;", "}", "METHOD_END"], "methodName": ["getTempBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "return   AbstractConfigVisitorNode . getTempBeanInfo ( visitor ,    AbstractConfigVisitorNode . getType ( visitor ,    className )  )  ;", "}", "METHOD_END"], "methodName": ["getTempBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "if    ( className    !  =    null )     {", "try    {", "return   v . getModule (  )  . getClassLoader (  )  . loadClass ( className )  ;", "}    catch    ( Exception   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "visitor . visit ( this )  ;", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.jboss.as.pojo.descriptor.AbstractConfigVisitorNode"}, {"methodBody": ["METHOD_START", "{", "Module   module    =    bmd . getModule (  )  . getInjectedModule (  )  . getValue (  )  ;", "final   SecurityManager   sm    =    System . getSecurityManager (  )  ;", "ClassLoader   moduleClassLoader ;", "if    ( sm    =  =    null )     {", "moduleClassLoader    =    module . getClassLoader (  )  ;", "} else    {", "moduleClassLoader    =    AccessController . doPrivileged (  (  ( PrivilegedAction < ClassLoader >  )     (  (  )     -  >    module . getClassLoader (  )  )  )  )  ;", "}", "Class <  ?  >    beanClass    =    moduleClassLoader . loadClass ( bmd . getBeanClass (  )  )  ;", "DeploymentReflectionIndex   index ;", "if    ( sm    =  =    null )     {", "index    =    DeploymentReflectionIndex . create (  )  ;", "} else    {", "index    =    AccessController . doPrivileged (  (  ( PrivilegedAction < DeploymentReflectionIndex >  )     (  (  )     -  >    DeploymentReflectionIndex . create (  )  )  )  )  ;", "}", "BeanInfo   beanInfo    =    new   DefaultBeanInfo ( index ,    beanClass )  ;", "Object   result    =    BeanUtils . instantiat ( bmd ,    beanInfo ,    index ,    module )  ;", "BeanUtils . configure ( bmd ,    beanInfo ,    module ,    result ,    false )  ;", "BeanUtils . dispatchLifecycleJoinpoint ( beanInfo ,    result ,    bmd . getCreate (  )  ,     \" create \"  )  ;", "BeanUtils . dispatchLifecycleJoinpoint ( beanInfo ,    result ,    bmd . getStart (  )  ,     \" start \"  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.pojo.descriptor.BaseBeanFactory"}, {"methodBody": ["METHOD_START", "{", "this . bmd    =    bmd ;", "}", "METHOD_END"], "methodName": ["setBmd"], "fileName": "org.jboss.as.pojo.descriptor.BaseBeanFactory"}, {"methodBody": ["METHOD_START", "{", "BeanState   state    =    visitor . getState (  )  ;", "if    ( state    =  =     ( BeanState . NOT _ INSTALLED )  )", "nodes . add ( module )  ;", "if    (  (  ( constructor )     !  =    null )     &  &     ( state    =  =     ( BeanState . DESCRIBED )  )  )", "nodes . add ( constructor )  ;", "if    (  (  ( properties )     !  =    null )     &  &     ( state    =  =     ( BeanState . INSTANTIATED )  )  )", "nodes . addAll ( properties )  ;", "if    (  (  ( create )     !  =    null )     &  &     ( state    =  =     ( BeanState . CONFIGURED )  )  )", "nodes . add ( create )  ;", "if    (  (  ( destroy )     !  =    null )     &  &     ( state    =  =     ( BeanState . CONFIGURED )  )  )", "nodes . add ( destroy )  ;", "if    (  (  ( start )     !  =    null )     &  &     ( state    =  =     ( BeanState . CREATE )  )  )", "nodes . add ( start )  ;", "if    (  (  ( stop )     !  =    null )     &  &     ( state    =  =     ( BeanState . CREATE )  )  )", "nodes . add ( stop )  ;", "if    (  ( installs )     !  =    null )", "nodes . addAll ( installs )  ;", "if    (  ( uninstalls )     !  =    null )", "nodes . addAll ( uninstalls )  ;", "if    (  ( incallbacks )     !  =    null )", "nodes . addAll ( incallbacks )  ;", "if    (  ( uncallbacks )     !  =    null )", "nodes . addAll ( uncallbacks )  ;", "if    (  ( depends )     !  =    null )", "nodes . addAll ( depends )  ;", "}", "METHOD_END"], "methodName": ["addChildren"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   aliases ;", "}", "METHOD_END"], "methodName": ["getAliases"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   beanClass ;", "}", "METHOD_END"], "methodName": ["getBeanClass"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   constructor ;", "}", "METHOD_END"], "methodName": ["getConstructor"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   create ;", "}", "METHOD_END"], "methodName": ["getCreate"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   depends ;", "}", "METHOD_END"], "methodName": ["getDepends"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   destroy ;", "}", "METHOD_END"], "methodName": ["getDestroy"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   incallbacks ;", "}", "METHOD_END"], "methodName": ["getIncallbacks"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   installs ;", "}", "METHOD_END"], "methodName": ["getInstalls"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mode )     =  =    null )", "mode    =    Mode . PASSIVE ;", "return   mode ;", "}", "METHOD_END"], "methodName": ["getMode"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   start ;", "}", "METHOD_END"], "methodName": ["getStart"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   stop ;", "}", "METHOD_END"], "methodName": ["getStop"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   uncallbacks ;", "}", "METHOD_END"], "methodName": ["getUncallbacks"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   uninstalls ;", "}", "METHOD_END"], "methodName": ["getUninstalls"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . aliases    =    aliases ;", "}", "METHOD_END"], "methodName": ["setAliases"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . beanClass    =    beanClass ;", "}", "METHOD_END"], "methodName": ["setBeanClass"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . constructor    =    constructor ;", "}", "METHOD_END"], "methodName": ["setConstructor"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . create    =    create ;", "}", "METHOD_END"], "methodName": ["setCreate"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . depends    =    depends ;", "}", "METHOD_END"], "methodName": ["setDepends"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . destroy    =    destroy ;", "}", "METHOD_END"], "methodName": ["setDestroy"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . incallbacks    =    incallbacks ;", "}", "METHOD_END"], "methodName": ["setIncallbacks"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . installs    =    installs ;", "}", "METHOD_END"], "methodName": ["setInstalls"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . mode    =    mode ;", "}", "METHOD_END"], "methodName": ["setMode"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . module    =    module ;", "}", "METHOD_END"], "methodName": ["setModule"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . properties    =    properties ;", "}", "METHOD_END"], "methodName": ["setProperties"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . start    =    start ;", "}", "METHOD_END"], "methodName": ["setStart"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . stop    =    stop ;", "}", "METHOD_END"], "methodName": ["setStop"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . uncallbacks    =    uncallbacks ;", "}", "METHOD_END"], "methodName": ["setUncallbacks"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "this . uninstalls    =    uninstalls ;", "}", "METHOD_END"], "methodName": ["setUninstalls"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( state    =  =    null )", "state    =    BeanState . INSTALLED ;", "return    . JBOSS _ POJO . append ( name )  . append ( state . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["toBeanName"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "String   clName ;", "ClassLoader   classLoader    =    clazz . getClassLoader (  )  ;", "if    ( classLoader    !  =    null )", "clName    =    classLoader . toString (  )  ;", "else", "clName    =     \" SystemClassLoader \"  ;", "if    ( state    =  =    null )", "state    =    BeanState . INSTALLED ;", "return    . JBOSS _ POJO . append ( clName ,    clazz . getName (  )  ,    state . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["toInstancesName"], "fileName": "org.jboss.as.pojo.descriptor.BeanMetaDataConfig"}, {"methodBody": ["METHOD_START", "{", "return   methodName ;", "}", "METHOD_END"], "methodName": ["getMethodName"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "return   signature ;", "}", "METHOD_END"], "methodName": ["getSignature"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "return   whenRequired ;", "}", "METHOD_END"], "methodName": ["getWhenRequired"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "this . methodName    =    methodName ;", "}", "METHOD_END"], "methodName": ["setMethodName"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "this . signature    =    signature ;", "}", "METHOD_END"], "methodName": ["setSignature"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "this . state    =    state ;", "}", "METHOD_END"], "methodName": ["setState"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "this . whenRequired    =    whenRequired ;", "}", "METHOD_END"], "methodName": ["setWhenRequired"], "fileName": "org.jboss.as.pojo.descriptor.CallbackConfig"}, {"methodBody": ["METHOD_START", "{", "values . add ( value )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "org.jboss.as.pojo.descriptor.CollectionConfig"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( collectionType )     !  =    null )     {", "return    (  (  < Object >  )     ( collectionType . newInstance (  )  )  )  ;", "} else    {", "return   createDefaultInstance (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   PojoLogger . ROOT _ LOGGER . cannotInstantiate ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createInstance"], "fileName": "org.jboss.as.pojo.descriptor.CollectionConfig"}, {"methodBody": ["METHOD_START", "{", "Collection < Object >    result    =    createInstance (  )  ;", "for    ( ValueConfig   vc    :    values )     {", "result . add ( vc . getValue ( componentType )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getClassValue"], "fileName": "org.jboss.as.pojo.descriptor.CollectionConfig"}, {"methodBody": ["METHOD_START", "{", "Type   ct    =    componentType ;", "if    (  ( ct    =  =    null )     &  &     ( type    !  =    null )  )", "ct    =    AbstractConfigVisitorNode . getComponentType ( type ,     0  )  ;", "< Object >    result    =    createInstance (  )  ;", "for    ( ValueConfig   vc    :    values )     {", "result . add ( vc . getValue ( ct )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getPtValue"], "fileName": "org.jboss.as.pojo.descriptor.CollectionConfig"}, {"methodBody": ["METHOD_START", "{", "this . elementType    =    elementType ;", "}", "METHOD_END"], "methodName": ["setElementType"], "fileName": "org.jboss.as.pojo.descriptor.CollectionConfig"}, {"methodBody": ["METHOD_START", "{", "return   factory ;", "}", "METHOD_END"], "methodName": ["getFactory"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "return   factoryClass ;", "}", "METHOD_END"], "methodName": ["getFactoryClass"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "return   factoryMethod ;", "}", "METHOD_END"], "methodName": ["getFactoryMethod"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "return   parameters ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . factory    =    factory ;", "}", "METHOD_END"], "methodName": ["setFactory"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . factoryClass    =    factoryClass ;", "}", "METHOD_END"], "methodName": ["setFactoryClass"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . factoryMethod    =    factoryMethod ;", "}", "METHOD_END"], "methodName": ["setFactoryMethod"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . parameters    =    parameters ;", "}", "METHOD_END"], "methodName": ["setParameters"], "fileName": "org.jboss.as.pojo.descriptor.ConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependency    =    dependency ;", "}", "METHOD_END"], "methodName": ["setDependency"], "fileName": "org.jboss.as.pojo.descriptor.DependsConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyState    =    dependencyState ;", "}", "METHOD_END"], "methodName": ["setDependencyState"], "fileName": "org.jboss.as.pojo.descriptor.DependsConfig"}, {"methodBody": ["METHOD_START", "{", "this . service    =    service ;", "}", "METHOD_END"], "methodName": ["setService"], "fileName": "org.jboss.as.pojo.descriptor.DependsConfig"}, {"methodBody": ["METHOD_START", "{", "this . whenRequired    =    whenRequired ;", "}", "METHOD_END"], "methodName": ["setWhenRequired"], "fileName": "org.jboss.as.pojo.descriptor.DependsConfig"}, {"methodBody": ["METHOD_START", "{", "return   beanInfo . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.FactoryConfig"}, {"methodBody": ["METHOD_START", "{", "return   value . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getClassValue"], "fileName": "org.jboss.as.pojo.descriptor.FactoryConfig"}, {"methodBody": ["METHOD_START", "{", "throw   PojoLogger . ROOT _ LOGGER . tooDynamicFromFactory (  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.jboss.as.pojo.descriptor.FactoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . bean    =    dependency ;", "}", "METHOD_END"], "methodName": ["setBean"], "fileName": "org.jboss.as.pojo.descriptor.FactoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . state    =    state ;", "}", "METHOD_END"], "methodName": ["setState"], "fileName": "org.jboss.as.pojo.descriptor.FactoryConfig"}, {"methodBody": ["METHOD_START", "{", "BeanInfo   bi    =    beanInfo . getOptionalValue (  )  ;", "if    ( bi    =  =    null )     {", "bi    =    AbstractVisitorNode . getTempBeanInfo ( bean . getClass (  )  )  ;", "}", "return   bi ;", "}", "METHOD_END"], "methodName": ["getBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "Object   result    =    value . getValue (  )  ;", "if    ( result   instanceof   Set )     {", "Set   set    =     (  ( Set )     ( result )  )  ;", "if    (  ( set . size (  )  )     !  =     1  )", "throw   logging . PojoLogger . ROOT _ LOGGER . invalidMatchSize ( set ,    type )  ;", "result    =    set . iterator (  )  . next (  )  ;", "}", "if    (  ( property )     !  =    null )     {", "Method   getter    =    getBeanInfo ( result )  . getGetter ( property ,    type )  ;", "try    {", "return   getter . invoke ( result )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}", "} else    {", "return   result ;", "}", "}", "METHOD_END"], "methodName": ["getClassValue"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . bean    =    dependency ;", "}", "METHOD_END"], "methodName": ["setBean"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . property    =    property ;", "}", "METHOD_END"], "methodName": ["setProperty"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . service    =    service ;", "}", "METHOD_END"], "methodName": ["setService"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . state    =    state ;", "}", "METHOD_END"], "methodName": ["setState"], "fileName": "org.jboss.as.pojo.descriptor.InjectedValueConfig"}, {"methodBody": ["METHOD_START", "{", "return   bean ;", "}", "METHOD_END"], "methodName": ["getBean"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "return   beanInfo ;", "}", "METHOD_END"], "methodName": ["getBeanInfo"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "return   dependency ;", "}", "METHOD_END"], "methodName": ["getDependency"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "return   whenRequired ;", "}", "METHOD_END"], "methodName": ["getWhenRequired"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependency    =    dependency ;", "}", "METHOD_END"], "methodName": ["setDependency"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyState    =    dependencyState ;", "}", "METHOD_END"], "methodName": ["setDependencyState"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "this . whenRequired    =    whenRequired ;", "}", "METHOD_END"], "methodName": ["setWhenRequired"], "fileName": "org.jboss.as.pojo.descriptor.InstallConfig"}, {"methodBody": ["METHOD_START", "{", "return   beanFactoriesCount ;", "}", "METHOD_END"], "methodName": ["getBeanFactoriesCount"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   beans ;", "}", "METHOD_END"], "methodName": ["getBeans"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   mode ;", "}", "METHOD_END"], "methodName": ["getMode"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "( beanFactoriesCount )  +  +  ;", "}", "METHOD_END"], "methodName": ["incrementBeanFactoryCount"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . beans    =    beans ;", "}", "METHOD_END"], "methodName": ["setBeans"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . mode    =    mode ;", "}", "METHOD_END"], "methodName": ["setMode"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "final   String   alias    =    parseTextElement ( reader )  ;", "if    (  ( alias    =  =    null )     |  |     (  ( alias . trim (  )  . length (  )  )     =  =     0  )  )", "throw   logging . PojoLogger . ROOT _ LOGGER . nullOrEmptyAlias (  )  ;", "return   alias ;", "}", "METHOD_END"], "methodName": ["parseAlias"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "BeanMetaDataConfig   beanConfig    =    new   BeanMetaDataConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . NAME )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   NAME    :", "beanConfig . setName ( attributeValue )  ;", "break ;", "case   CLASS    :", "beanConfig . setBeanClass ( attributeValue )  ;", "break ;", "case   MODE    :", "beanConfig . setMode ( ModeConfig . of ( attributeValue )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . COMMENT    :", "break ;", "case   XMLStreamConstants . END _ ELEMENT    :", "return   beanConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   ALIAS    :", "Set < String >    aliases    =    beanConfig . getAliases (  )  ;", "if    ( aliases    =  =    null )     {", "aliases    =    new   HashSet < String >  (  )  ;", "beanConfig . setAliases ( aliases )  ;", "}", "aliases . add ( parseAlias ( reader )  )  ;", "break ;", "case   CLASSLOADER    :", "beanConfig . setModule ( parseModuleConfig ( reader )  )  ;", "break ;", "case   CONSTRUCTOR    :", "beanConfig . setConstructor ( parseConstructor ( reader )  )  ;", "break ;", "case   PROPERTY    :", "Set < PropertyConfig >    properties    =    beanConfig . getProperties (  )  ;", "if    ( properties    =  =    null )     {", "properties    =    new   HashSet < PropertyConfig >  (  )  ;", "beanConfig . setProperties ( properties )  ;", "}", "properties . add ( parseProperty ( reader )  )  ;", "break ;", "case   INSTALL    :", "List < InstallConfig >    installs    =    beanConfig . getInstalls (  )  ;", "if    ( installs    =  =    null )     {", "installs    =    new   ArrayList < InstallConfig >  (  )  ;", "beanConfig . setInstalls ( installs )  ;", "}", "installs . add ( parseInstall ( reader )  )  ;", "break ;", "case   UNINSTALL    :", "List < InstallConfig >    uninstalls    =    beanConfig . getUninstalls (  )  ;", "if    ( uninstalls    =  =    null )     {", "uninstalls    =    new   ArrayList < InstallConfig >  (  )  ;", "beanConfig . setUninstalls ( uninstalls )  ;", "}", "uninstalls . add ( parseInstall ( reader )  )  ;", "break ;", "case   INCALLBACK    :", "List < CallbackConfig >    incallbacks    =    beanConfig . getIncallbacks (  )  ;", "if    ( incallbacks    =  =    null )     {", "incallbacks    =    new   ArrayList < CallbackConfig >  (  )  ;", "beanConfig . setIncallbacks ( incallbacks )  ;", "}", "incallbacks . add ( parseCallback ( reader )  )  ;", "break ;", "case   UNCALLBACK    :", "List < CallbackConfig >    uncallbacks    =    beanConfig . getUncallbacks (  )  ;", "if    ( uncallbacks    =  =    null )     {", "uncallbacks    =    new   ArrayList < CallbackConfig >  (  )  ;", "beanConfig . setUncallbacks ( uncallbacks )  ;", "}", "uncallbacks . add ( parseCallback ( reader )  )  ;", "break ;", "case   DEPENDS    :", "Set < DependsConfig >    depends    =    beanConfig . getDepends (  )  ;", "if    ( depends    =  =    null )     {", "depends    =    new   HashSet < DependsConfig >  (  )  ;", "beanConfig . setDepends ( depends )  ;", "}", "depends . add ( parseDepends ( reader )  )  ;", "break ;", "case   CREATE    :", "beanConfig . setCreate ( parseLifecycle ( reader ,     \" create \"  )  )  ;", "break ;", "case   START    :", "beanConfig . setStart ( parseLifecycle ( reader ,     \" start \"  )  )  ;", "break ;", "case   STOP    :", "beanConfig . setStop ( parseLifecycle ( reader ,     \" stop \"  )  )  ;", "break ;", "case   DESTROY    :", "beanConfig . setDestroy ( parseLifecycle ( reader ,     \" destroy \"  )  )  ;", "break ;", "case   UNKNOWN    :", "throw   unexpectedElement ( reader )  ;", "}", "break ;", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseBean"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   CallbackConfig   callbackConfig    =    new   CallbackConfig (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . METHOD )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   STATE    :", "callbackConfig . setWhenRequired ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   TARGET _ STATE    :", "callbackConfig . setState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   METHOD    :", "callbackConfig . setMethodName ( attributeValue )  ;", "break ;", "case   SIGNATURE    :", "callbackConfig . setSignature ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   callbackConfig ;", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCallback"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   CLASS    :", "config . setType ( attributeValue )  ;", "break ;", "case   ELEMENT    :", "config . setElementType ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   config ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   VALUE    :", "config . addValue ( parseValue ( reader )  )  ;", "break ;", "case   INJECT    :", "config . addValue ( parseInject ( reader )  )  ;", "break ;", "case   VALUE _ FACTORY    :", "config . addValue ( parseValueFactory ( reader )  )  ;", "break ;", "case   LIST    :", "config . addValue ( parseList ( reader )  )  ;", "break ;", "case   SET    :", "config . addValue ( parseSet ( reader )  )  ;", "break ;", "case   MAP    :", "config . addValue ( parseMap ( reader )  )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCollection"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   ConstructorConfig   ctorConfig    =    new   ConstructorConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   FACTORY _ CLASS    :", "case   FACTORY _ CLASS _ LEGACY    :", "ctorConfig . setFactoryClass ( attributeValue )  ;", "break ;", "case   FACTORY _ METHOD    :", "case   FACTORY _ METHOD _ LEGACY    :", "ctorConfig . setFactoryMethod ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "List < ValueConfig >    parameters    =    new   ArrayList < ValueConfig >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "ctorConfig . setParameters ( parameters . toArray ( new   ValueConfig [ parameters . size (  )  ]  )  )  ;", "return   ctorConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   FACTORY    :", "ctorConfig . setFactory ( parseFactory ( reader )  )  ;", "break ;", "case   PARAMETER    :", "ValueConfig   p    =    parseParameter ( reader )  ;", "p . setIndex ( parameters . size (  )  )  ;", "parameters . add ( p )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseConstructor"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   DependsConfig   dependsConfig    =    new   DependsConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   STATE    :", "dependsConfig . setWhenRequired ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   TARGET _ STATE    :", "dependsConfig . setDependencyState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   SERVICE    :", "dependsConfig . setService ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "String   dependency    =    parseTextElement ( reader )  ;", "if    (  ( dependency    =  =    null )     |  |     (  ( dependency . trim (  )  . length (  )  )     =  =     0  )  )", "throw   nullOrEmptyDependency (  )  ;", "dependsConfig . setDependency ( dependency )  ;", "return   dependsConfig ;", "}", "METHOD_END"], "methodName": ["parseDepends"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "ValueConfig [  ]    entry    =    new   ValueConfig [  2  ]  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   entry ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   KEY    :", "entry [  0  ]     =    parseValueValue ( reader )  ;", "break ;", "case   VALUE    :", "entry [  1  ]     =    parseValueValue ( reader )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseEntry"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   FactoryConfig   factoryConfig    =    new   FactoryConfig (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . BEAN )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   BEAN    :", "factoryConfig . setBean ( attributeValue )  ;", "break ;", "case   STATE    :", "factoryConfig . setState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   factoryConfig ;", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseFactory"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   InjectedValueConfig   injectedValueConfig    =    new   InjectedValueConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   BEAN    :", "injectedValueConfig . setBean ( attributeValue )  ;", "break ;", "case   STATE    :", "injectedValueConfig . setState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   SERVICE    :", "injectedValueConfig . setService ( attributeValue )  ;", "break ;", "case   PROPERTY    :", "injectedValueConfig . setProperty ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   injectedValueConfig ;", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseInject"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   InstallConfig   installConfig    =    new   InstallConfig (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . METHOD )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   STATE    :", "installConfig . setWhenRequired ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   TARGET _ STATE    :", "installConfig . setDependencyState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "case   BEAN    :", "installConfig . setDependency ( attributeValue )  ;", "break ;", "case   METHOD    :", "installConfig . setMethodName ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "List < ValueConfig >    parameters    =    new   ArrayList < ValueConfig >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "installConfig . setParameters ( parameters . toArray ( new   ValueConfig [ parameters . size (  )  ]  )  )  ;", "return   installConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   PARAMETER    :", "ValueConfig   p    =    parseParameter ( reader )  ;", "p . setIndex ( parameters . size (  )  )  ;", "parameters . add ( p )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseInstall"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   LifecycleConfig   lifecycleConfig    =    new   LifecycleConfig (  )  ;", "lifecycleConfig . setMethodName ( defaultMethodName )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   METHOD    :", "lifecycleConfig . setMethodName ( attributeValue )  ;", "break ;", "case   IGNORED    :", "lifecycleConfig . setIgnored ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "List < ValueConfig >    parameters    =    new   ArrayList < ValueConfig >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "lifecycleConfig . setParameters ( parameters . toArray ( new   ValueConfig [ parameters . size (  )  ]  )  )  ;", "return   lifecycleConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   PARAMETER    :", "ValueConfig   p    =    parseParameter ( reader )  ;", "p . setIndex ( parameters . size (  )  )  ;", "parameters . add ( p )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseLifecycle"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   parseCollection ( reader ,    new   ListConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseList"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "MapConfig   mapConfig    =    new   MapConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   CLASS    :", "mapConfig . setType ( attributeValue )  ;", "break ;", "case   KEY _ ELEMENT    :", "mapConfig . setKeyType ( attributeValue )  ;", "break ;", "case   VALUE _ ELEMENT    :", "mapConfig . setValueType ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   mapConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   ENTRY    :", "ValueConfig [  ]    entry    =    parseEntry ( reader )  ;", "mapConfig . put ( entry [  0  ]  ,    entry [  1  ]  )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseMap"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   ModuleConfig   moduleConfig    =    new   ModuleConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . NAME )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   NAME    :", "moduleConfig . setModuleName ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "return   moduleConfig ;", "}", "METHOD_END"], "methodName": ["parseModuleConfig"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "ValueConfig   valueConfig    =    null ;", "String   type    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   CLASS    :", "type    =    attributeValue ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . CHARACTERS    :", "final   StringValueConfig   svc    =    new   StringValueConfig (  )  ;", "svc . setValue ( reader . getText (  )  )  ;", "valueConfig    =    svc ;", "break ;", "case   XMLStreamConstants . END _ ELEMENT    :", "if    ( valueConfig    =  =    null )", "throw   new   XMLStreamException ( missingValue (  )  ,    reader . getLocation (  )  )  ;", "if    (  ( valueConfig . getType (  )  )     =  =    null )", "valueConfig . setType ( type )  ;", "return   valueConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   VALUE    :", "valueConfig    =    parseValue ( reader )  ;", "break ;", "case   INJECT    :", "valueConfig    =    parseInject ( reader )  ;", "break ;", "case   VALUE _ FACTORY    :", "valueConfig    =    parseValueFactory ( reader )  ;", "break ;", "case   LIST    :", "valueConfig    =    parseList ( reader )  ;", "break ;", "case   SET    :", "valueConfig    =    parseSet ( reader )  ;", "break ;", "case   MAP    :", "valueConfig    =    parseMap ( reader )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseParameter"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   PropertyConfig   property    =    new   PropertyConfig (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . NAME )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   NAME    :", "property . setPropertyName ( attributeValue )  ;", "break ;", "case   CLASS    :", "property . setType ( attributeValue )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   property ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   VALUE    :", "property . setValue ( parseValue ( reader )  )  ;", "break ;", "case   INJECT    :", "property . setValue ( parseInject ( reader )  )  ;", "break ;", "case   VALUE _ FACTORY    :", "property . setValue ( parseValueFactory ( reader )  )  ;", "break ;", "case   LIST    :", "property . setValue ( parseList ( reader )  )  ;", "break ;", "case   SET    :", "property . setValue ( parseSet ( reader )  )  ;", "break ;", "case   MAP    :", "property . setValue ( parseMap ( reader )  )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseProperty"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   parseCollection ( reader ,    new   SetConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseSet"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "String   value    =    null ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   value ;", "case   XMLStreamConstants . CHARACTERS    :", "value    =    reader . getText (  )  ;", "break ;", "default    :", "throw   unexpectedEle ( reader )  ;", "}", "}", "throw   unexpectedEle ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseTextElement"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   StringValueConfig   valueConfig    =    new   StringValueConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   CLASS    :", "valueConfig . setType ( attributeValue )  ;", "break ;", "case   REPLACE    :", "valueConfig . setReplaceProperties ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "case   TRIM    :", "valueConfig . setTrim ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "valueConfig . setValue ( parseTextElement ( reader )  )  ;", "return   valueConfig ;", "}", "METHOD_END"], "methodName": ["parseValue"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   ValueFactoryConfig   valueFactoryConfig    =    new   ValueFactoryConfig (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . BEAN ,     . Attribute . METHOD )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   BEAN    :", "valueFactoryConfig . setBean ( attributeValue )  ;", "break ;", "case   METHOD    :", "valueFactoryConfig . setMethod ( attributeValue )  ;", "break ;", "case   STATE    :", "valueFactoryConfig . setState ( BeanState . valueOf ( attributeValue . toUpperCase ( Locale . ENGLISH )  )  )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( required . isEmpty (  )  )     =  =    false )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "List < ValueConfig >    parameters    =    new   ArrayList < ValueConfig >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "valueFactoryConfig . setParameters ( parameters . toArray ( new   ValueConfig [ parameters . size (  )  ]  )  )  ;", "return   valueFactoryConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   PARAMETER    :", "ValueConfig   p    =    parseParameter ( reader )  ;", "p . setIndex ( parameters . size (  )  )  ;", "parameters . add ( p )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseValueFactory"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "ValueConfig   value    =    null ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "if    ( value    =  =    null )", "throw   new   XMLStreamException ( missingValue (  )  ,    reader . getLocation (  )  )  ;", "return   value ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   VALUE    :", "value    =    parseValue ( reader )  ;", "break ;", "case   INJECT    :", "value    =    parseInject ( reader )  ;", "break ;", "case   VALUE _ FACTORY    :", "value    =    parseValueFactory ( reader )  ;", "break ;", "case   LIST    :", "value    =    parseList ( reader )  ;", "break ;", "case   SET    :", "value    =    parseSet ( reader )  ;", "break ;", "case   MAP    :", "value    =    parseMap ( reader )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "break ;", "case   XMLStreamConstants . CHARACTERS    :", "StringValueConfig   svc    =    new   StringValueConfig (  )  ;", "svc . setValue ( reader . getText (  )  )  ;", "value    =    svc ;", "break ;", "}", "}", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseValueValue"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   new   BeanFactoryMetaDataConfig ( bean )  ;", "}", "METHOD_END"], "methodName": ["toBeanFactory"], "fileName": "org.jboss.as.pojo.descriptor.KernelDeploymentXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   methodName ;", "}", "METHOD_END"], "methodName": ["getMethodName"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "return   parameters ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "return   ignored ;", "}", "METHOD_END"], "methodName": ["isIgnored"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "this . ignored    =    ignored ;", "}", "METHOD_END"], "methodName": ["setIgnored"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "this . methodName    =    methodName ;", "}", "METHOD_END"], "methodName": ["setMethodName"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "this . parameters    =    parameters ;", "}", "METHOD_END"], "methodName": ["setParameters"], "fileName": "org.jboss.as.pojo.descriptor.LifecycleConfig"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( mapType )     !  =    null )     {", "return    (  (  < Object ,    Object >  )     ( mapType . newInstance (  )  )  )  ;", "} else    {", "return   new   Hash (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   PojoLogger . ROOT _ LOGGER . cannotInstantiate ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createInstance"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "Map < Object ,    Object >    result    =    createInstance (  )  ;", "for    ( Map . Entry < Value ,    Value >    entry    :    map . entrySet (  )  )     {", "result . put ( entry . getKey (  )  . getValue ( keyClass )  ,    entry . getValue (  )  . getValue ( valueClass )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getClassValue"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "Type   kt    =    keyClass ;", "if    (  ( kt    =  =    null )     &  &     ( type    !  =    null )  )", "kt    =    AbstractVisitorNode . getComponentType ( type ,     0  )  ;", "Type   vt    =    valueClass ;", "if    (  ( vt    =  =    null )     &  &     ( type    !  =    null )  )", "vt    =    AbstractVisitorNode . getComponentType ( type ,     1  )  ;", "Map < Object ,    Object >    result    =    createInstance (  )  ;", "for    ( Map . Entry < Value ,    Value >    entry    :    map . entrySet (  )  )     {", "result . put ( entry . getKey (  )  . getValue ( kt )  ,    entry . getValue (  )  . getValue ( vt )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getPtValue"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "map . put ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "this . keyType    =    keyType ;", "}", "METHOD_END"], "methodName": ["setKeyType"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "this . valueType    =    valueType ;", "}", "METHOD_END"], "methodName": ["setValueType"], "fileName": "org.jboss.as.pojo.descriptor.MapConfig"}, {"methodBody": ["METHOD_START", "{", "return   mode ;", "}", "METHOD_END"], "methodName": ["getMode"], "fileName": "org.jboss.as.pojo.descriptor.ModeConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . nullValue (  )  ;", "final   ModeConfig   controllerMode    =    ModeConfig . MAP . get ( value . toLowerCase ( Locale . ENGLISH )  )  ;", "return   controllerMode    =  =    null    ?    ModeConfig . PASSIVE    :    controllerMode ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.jboss.as.pojo.descriptor.ModeConfig"}, {"methodBody": ["METHOD_START", "{", "return   injectedModule ;", "}", "METHOD_END"], "methodName": ["getInjectedModule"], "fileName": "org.jboss.as.pojo.descriptor.ModuleConfig"}, {"methodBody": ["METHOD_START", "{", "return   moduleName ;", "}", "METHOD_END"], "methodName": ["getModuleName"], "fileName": "org.jboss.as.pojo.descriptor.ModuleConfig"}, {"methodBody": ["METHOD_START", "{", "this . moduleName    =    moduleName ;", "}", "METHOD_END"], "methodName": ["setModuleName"], "fileName": "org.jboss.as.pojo.descriptor.ModuleConfig"}, {"methodBody": ["METHOD_START", "{", "return   propertyName ;", "}", "METHOD_END"], "methodName": ["getPropertyName"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "this . propertyName    =    propertyName ;", "}", "METHOD_END"], "methodName": ["setPropertyName"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value )     =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . nullValue (  )  ;", "this . beanInfo    =    visitor . getBeanInfo (  )  ;", "super . visit ( visitor )  ;", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.jboss.as.pojo.descriptor.PropertyConfig"}, {"methodBody": ["METHOD_START", "{", "this . replaceProperties    =    replaceProperties ;", "}", "METHOD_END"], "methodName": ["setReplaceProperties"], "fileName": "org.jboss.as.pojo.descriptor.StringValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . trim    =    trim ;", "}", "METHOD_END"], "methodName": ["setTrim"], "fileName": "org.jboss.as.pojo.descriptor.StringValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.jboss.as.pojo.descriptor.StringValueConfig"}, {"methodBody": ["METHOD_START", "{", "return   index ;", "}", "METHOD_END"], "methodName": ["getIndex"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( type . getRawType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPtValue"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "if    (  ( type    =  =    null )     |  |     ( type   instanceof   Class )  )     {", "return   getClassValue (  (  ( Class )     ( type )  )  )  ;", "} else", "if    ( type   instanceof   ParameterizedType )     {", "ParameterizedType   pt    =     (  ( ParameterizedType )     ( type )  )  ;", "return   getPtValue ( pt )  ;", "} else    {", "throw   logging . PojoLogger . ROOT _ LOGGER . unknownType ( type )  ;", "}", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . index    =    index ;", "}", "METHOD_END"], "methodName": ["setIndex"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.jboss.as.pojo.descriptor.ValueConfig"}, {"methodBody": ["METHOD_START", "{", "try    {", "ReflectionJoinpoint   joinpoint    =    new   ReflectionJoinpoint ( beanInfo . get (  )  ,    method )  ;", "joinpoint . setTarget ( value )  ;", "joinpoint . setParameters ( parameters )  ;", "return   joinpoint . dispatch (  )  ;", "}    catch    ( Throwable   t )     {", "throw   new   IllegalArgumentException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["getClassValue"], "fileName": "org.jboss.as.pojo.descriptor.ValueFactoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . method    =    method ;", "}", "METHOD_END"], "methodName": ["setMethod"], "fileName": "org.jboss.as.pojo.descriptor.ValueFactoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . parameters    =    parameters ;", "}", "METHOD_END"], "methodName": ["setParameters"], "fileName": "org.jboss.as.pojo.descriptor.ValueFactoryConfig"}, {"methodBody": ["METHOD_START", "{", "return   parameters ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "org.jboss.as.pojo.service.AbstractJoinpoint"}, {"methodBody": ["METHOD_START", "{", "this . parameters    =    parameters ;", "}", "METHOD_END"], "methodName": ["setParameters"], "fileName": "org.jboss.as.pojo.service.AbstractJoinpoint"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( parameters )     =  =    null )     |  |     (  ( parameters . length )     =  =     0  )  )", "return   new   Object [  0  ]  ;", "if    (  ( types    =  =    null )     |  |     (  ( types . length )     !  =     ( parameters . length )  )  )", "throw   logging . PojoLogger . ROOT _ LOGGER . wrongTypeSize (  )  ;", "try    {", "Object [  ]    result    =    new   Object [ parameters . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( parameters . length )  ;    i +  +  )     {", "if    (  ( parameters [ i ]  )     !  =    null )", "result [ i ]     =    Configurator . convertValue ( Configurator . toClass ( types [ i ]  )  ,    parameters [ i ]  . getValue ( types [ i ]  )  ,    true ,    true )  ;", "}", "return   result ;", "}    catch    ( Throwable   t )     {", "throw   new   IllegalArgumentException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["toObjects"], "fileName": "org.jboss.as.pojo.service.AbstractJoinpoint"}, {"methodBody": ["METHOD_START", "{", "List < CallbackConfig >    configs    =     ( install )     ?    getBeanConfig (  )  . getIncallbacks (  )     :    getBeanConfig (  )  . getUncallbacks (  )  ;", "if    ( configs    !  =    null )     {", "for    ( CallbackConfig   cc    :    configs )     {", "if    (  ( cc . getWhenRequired (  )  )     =  =     ( getLifecycleState (  )  )  )     {", "Callback   callback    =    new   Callback ( getBeanInfo (  )  ,    getBean (  )  ,    cc )  ;", "if    ( install )", "InstancesSaddIncallback ( callback )  ;", "else", "InstancesSaddUncallback ( callback )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addCallbacks"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "if    ( uninstalls    =  =    null )", "return ;", "for    ( int   j    =    Math . min ( index ,     (  ( uninstalls . size (  )  )     -     1  )  )  ;    j    >  =     0  ;    j -  -  )     {", "try    {", "uninstalls . get ( j )  . dispatch (  )  ;", "}    catch    ( Throwable   t )     {", "Logger . ROOT _ LOGGER . ignoreUninstallError ( uninstalls . get ( j )  ,    t )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["considerUninstalls"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "String   methodName    =    config . getMethodName (  )  ;", "if    ( methodName    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . nullMethodName (  )  ;", "ValueConfig [  ]    parameters    =    config . getParameters (  )  ;", "String [  ]    types    =    Configurator . getTypes ( parameters )  ;", "String   dependency    =    config . getDependency (  )  ;", "Value < Object >    target    =     ( dependency    !  =    null )     ?    config . getBean (  )     :    new   ImmediateValue < Object >  ( getBean (  )  )  ;", "BeanInfo   beanInfo    =     ( dependency    !  =    null )     ?    config . getBeanInfo (  )  . getValue (  )     :    getBeanInfo (  )  ;", "Method   method    =    beanInfo . findMethod ( methodName ,    types )  ;", "MethodJoinpoint   joinpoint    =    new   MethodJoinpoint ( method )  ;", "joinpoint . setTarget ( target )  ;", "joinpoint . setParameters ( parameters )  ;", "return   joinpoint ;", "}", "METHOD_END"], "methodName": ["createJoinpoint"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "List < Joinpoint >    installs    =    getInstalls (  )  ;", "if    ( installs . isEmpty (  )  )", "return ;", "int   i    =     0  ;", "try    {", "for    ( i    =     0  ;    i    <     ( installs . size (  )  )  ;    i +  +  )", "installs . get ( i )  . dispatch (  )  ;", "}    catch    ( Throwable   t )     {", "considerUninstalls ( getUninstalls (  )  ,    i )  ;", "throw   new   StartException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["executeInstalls"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "considerUninstalls ( getUninstalls (  )  ,    Integer . MAX _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["executeUninstalls"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   bean ;", "}", "METHOD_END"], "methodName": ["getBean"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   beanConfig ;", "}", "METHOD_END"], "methodName": ["getBeanConfig"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   beanInfo ;", "}", "METHOD_END"], "methodName": ["getBeanInfo"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   index ;", "}", "METHOD_END"], "methodName": ["getIndex"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "List < InstallConfig >    installs    =    getBeanConfig (  )  . getInstalls (  )  ;", "return   installs    !  =    null    ?    toJoinpoints ( installs )     :    Collections .  < Joinpoint > emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getInstalls"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "List < InstallConfig >    uninstalls    =    getBeanConfig (  )  . getUninstalls (  )  ;", "return   uninstalls    !  =    null    ?    toJoinpoints ( uninstalls )     :    Collections .  < Joinpoint > emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getUninstalls"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    aliases    =    beanConfig . getAliases (  )  ;", "if    ( aliases    !  =    null )     {", "for    ( String   alias    :    aliases )     {", "ServiceName   asn    =    BeanMetaDataConfig . toBeanName ( alias ,    next )  ;", "Builder . addAliases ( asn )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["registerAliases"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "List < CallbackConfig >    configs    =     ( install )     ?    getBeanConfig (  )  . getIncallbacks (  )     :    getBeanConfig (  )  . getUncallbacks (  )  ;", "if    ( configs    !  =    null )     {", "for    ( CallbackConfig   cc    :    configs )     {", "if    (  ( cc . getWhenRequired (  )  )     =  =     ( getLifecycleState (  )  )  )     {", "Callback   callback    =    new   Callback ( getBeanInfo (  )  ,    getBean (  )  ,    cc )  ;", "if    ( install )", "InstancesSremoveIncallback ( callback )  ;", "else", "InstancesSremoveUncallback ( callback )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["removeCallbacks"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "this . bean    =    bean ;", "}", "METHOD_END"], "methodName": ["setBean"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "this . beanConfig    =    beanConfig ;", "}", "METHOD_END"], "methodName": ["setBeanConfig"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "this . beanInfo    =    beanInfo ;", "}", "METHOD_END"], "methodName": ["setBeanInfo"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "this . index    =    index ;", "}", "METHOD_END"], "methodName": ["setIndex"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "this . module    =    module ;", "}", "METHOD_END"], "methodName": ["setModule"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( module )     !  =    null )     {", "final   ClassLoader   previous    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "WildFlySecurityManagertCurrentContextClassLoaderPrivileged ( module . getClassLoader (  )  )  ;", "try    {", "startInternal ( context )  ;", "}    finally    {", "WildFlySecurityManagertCurrentContextClassLoaderPrivileged ( previous )  ;", "}", "} e    {", "startInternal ( context )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "try    {", "executeInstalls (  )  ;", "if    ( getLifecycleState (  )  . isAfter ( BeanState . DESCRIBED )  )     {", "addCallbacks ( true )  ;", "addCallbacks ( false )  ;", "ServiceRegistry   registry    =    context . getController (  )  . getServiceContainer (  )  ;", "InstancesService . addInstance ( registry ,    context . getChildTarget (  )  ,    getLifecycleState (  )  ,    getBean (  )  )  ;", "}", "final      nextPhase    =    createNextPhase (  )  ;", "if    ( nextPhase    !  =    null )     {", "final   BeanState   state    =    getLifecycleState (  )  ;", "final   BeanState   next    =    state . next (  )  ;", "final   BeanMetaDataConfig   beanConfig    =    getBeanConfig (  )  ;", "final   ServiceName   name    =    BeanMetaDataConfig . toBeanName ( beanConfig . getName (  )  ,    next )  ;", "final   ServiceTarget   serviceTarget    =    context . getChildTarget (  )  ;", "final   ServiceBuilder   serviceBuilder    =    serviceTarget . addService ( name ,    nextPhase )  ;", "registerAliases ( serviceBuilder ,    next )  ;", "final   ConfigVisitor   visitor    =    new   DefaultConfigVisitor ( serviceBuilder ,    state ,    getModule (  )  ,    getIndex (  )  ,    getBeanInfo (  )  )  ;", "beanConfig . visit ( visitor )  ;", "nextPhase . setModule ( getModule (  )  )  ;", "nextPhase . setBeanConfig ( getBeanConfig (  )  )  ;", "nextPhase . setIndex ( getIndex (  )  )  ;", "nextPhase . setBeanInfo ( getBeanInfo (  )  )  ;", "nextPhase . setBean ( getBean (  )  )  ;", "serviceBuilder . install (  )  ;", "}", "}    catch    ( Throwable   t )     {", "throw   new   StartException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["startInternal"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( module )     !  =    null )     {", "final   ClassLoader   previous    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "WildFlySecurityManagertCurrentContextClassLoaderPrivileged ( module . getClassLoader (  )  )  ;", "try    {", "stopInternal ( context )  ;", "}    finally    {", "WildFlySecurityManagertCurrentContextClassLoaderPrivileged ( previous )  ;", "}", "} e    {", "stopInternal ( context )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "if    ( getLifecycleState (  )  . isAfter ( BeanState . DESCRIBED )  )     {", "InstancesSremoveInstance ( context . getController (  )  . getSontainer (  )  ,    getLifecycleState (  )  ,    getBean (  )  )  ;", "removeCallbacks ( true )  ;", "removeCallbacks ( false )  ;", "}", "executeUninstalls (  )  ;", "}", "METHOD_END"], "methodName": ["stopInternal"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "List < Joinpoint >    joinpoints    =    new   ArrayList < Joinpoint >  (  )  ;", "for    ( InllConfig   ic    :    inlls )     {", "if    (  ( ic . getWhenRequired (  )  )     =  =     ( getLifecycleState (  )  )  )", "joinpointdd ( createJoinpoint ( ic )  )  ;", "}", "return   joinpoints ;", "}", "METHOD_END"], "methodName": ["toJoinpoints"], "fileName": "org.jboss.as.pojo.service.AbstractPojoPhase"}, {"methodBody": ["METHOD_START", "{", "Set < PropertyConfig >    properties    =    beanConfig . getProperties (  )  ;", "if    ( properties    !  =    null )     {", "List < PropertyConfig >    used    =    new   ArrayList < PropertyConfig >  (  )  ;", "for    ( PropertyConfig   pc    :    properties )     {", "try    {", ". configure ( beanInfo ,    module ,    bean ,    pc ,    nullify )  ;", "used . add ( pc )  ;", "}    catch    ( Throwable   t )     {", "if    ( nullify    =  =    false )     {", "for    ( PropertyConfig   upc    :    used )     {", "try    {", ". configure ( beanInfo ,    module ,    bean ,    upc ,    true )  ;", "}    catch    ( Throwable   ignored )     {", "}", "}", "throw   new   StartException ( t )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.jboss.as.pojo.service.BeanUtils"}, {"methodBody": ["METHOD_START", "{", "ValueConfig   value    =    pc . getValue (  )  ;", "Class <  ?  >    clazz    =    null ;", "String   type    =    pc . getType (  )  ;", "if    ( type    =  =    null )", "type    =    value . getType (  )  ;", "if    ( type    !  =    null )", "clazz    =    module . getClassLoader (  )  . loadClass ( type )  ;", "Method   setter    =    beanInfo . getSetter ( pc . getPropertyName (  )  ,    clazz )  ;", "MethodJoinpoint   joinpoint    =    new   MethodJoinpoint ( setter )  ;", "ValueConfig   param    =     ( nullify    =  =    false )     ?    value    :    null ;", "joinpoint . setParameters ( new   ValueConfig [  ]  {    param    }  )  ;", "joinpoint . setTarget ( new   msc . value . ImmediateValue < Object >  ( bean )  )  ;", "joinpoint . dispatch (  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.jboss.as.pojo.service.BeanUtils"}, {"methodBody": ["METHOD_START", "{", "Method   method ;", "ValueConfig [  ]    params    =    null ;", "if    ( config    =  =    null )     {", "try    {", "method    =    beanInfo . getMethod ( defaultMethod )  ;", "}    catch    ( Exception   t )     {", "PojoLogger . ROOT _ LOGGER . tracef ( t ,     \" Ignoring   default    % s   invocation .  \"  ,    defaultMethod )  ;", "return   null ;", "}", "} else    {", "String   methodName    =    config . getMethodName (  )  ;", "if    ( methodName    =  =    null )     {", "methodName    =    defaultMethod ;", "}", "ValueConfig [  ]    parameters    =    config . getParameters (  )  ;", "String [  ]    types    =    Configurator . getTypes ( parameters )  ;", "method    =    beanInfo . findMethod ( methodName ,    types )  ;", "params    =    parameters ;", "}", "MethodJoinpoint   joinpoint    =    new   MethodJoinpoint ( method )  ;", "joinpoint . setTarget ( new   msc . value . ImmediateValue < Object >  ( bean )  )  ;", "joinpoint . setParameters ( params )  ;", "return   joinpoint ;", "}", "METHOD_END"], "methodName": ["createJoinpoint"], "fileName": "org.jboss.as.pojo.service.BeanUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( config    !  =    null )     &  &     ( config . isIgnored (  )  )  )", "return ;", "Joinpoint   joinpoint    =     . createJoinpoint ( beanInfo ,    bean ,    config ,    defaultMethod )  ;", "if    ( joinpoint    !  =    null )", "joinpoint . dispatch (  )  ;", "}", "METHOD_END"], "methodName": ["dispatchLifecycleJoinpoint"], "fileName": "org.jboss.as.pojo.service.BeanUtils"}, {"methodBody": ["METHOD_START", "{", "Joinpoint   instantiateJoinpoint    =    null ;", "ValueConfig [  ]    parameters    =    new   ValueConfig [  0  ]  ;", "String [  ]    types    =    Configurator . NO _ PARAMS _ TYPES ;", "ConstructorConfig   ctorConfig    =    beanConfig . getConstructor (  )  ;", "if    ( ctorConfig    !  =    null )     {", "parameters    =    ctorConfig . getParameters (  )  ;", "types    =    Configurator . getTypes ( parameters )  ;", "String   factoryClass    =    ctorConfig . getFactoryClass (  )  ;", "FactoryConfig   factory    =    ctorConfig . getFactory (  )  ;", "if    (  ( factoryClass    !  =    null )     |  |     ( factory    !  =    null )  )     {", "String   factoryMethod    =    ctorConfig . getFactoryMethod (  )  ;", "if    ( factoryMethod    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . missingFactoryMethod ( beanConfig )  ;", "if    ( factoryClass    !  =    null )     {", "Class <  ?  >    factoryClazz    =    Class . forName ( factoryClass ,    false ,    module . getClassLoader (  )  )  ;", "Method   method    =    Configurator . findMethod ( index ,    factoryClazz ,    factoryMethod ,    types ,    true ,    true ,    true )  ;", "MethodJoinpoint   mj    =    new   MethodJoinpoint ( method )  ;", "mj . setTarget ( new   ImmediateValue < Object >  ( null )  )  ;", "mj . setParameters ( parameters )  ;", "instantiateJoinpoint    =    mj ;", "} else", "if    ( factory    !  =    null )     {", "ReflectionJoinpoint   rj    =    new   ReflectionJoinpoint ( factory . getBeanInfo (  )  ,    factoryMethod ,    types )  ;", "rj . setTarget ( new   ImmediateValue < Object >  ( factory . getValue ( null )  )  )  ;", "rj . setParameters ( parameters )  ;", "instantiateJoinpoint    =    rj ;", "}", "}", "}", "if    ( instantiateJoinpoint    =  =    null )     {", "if    ( beanInfo    =  =    null )", "throw   new   StartException ( logging . PojoLogger . ROOT _ LOGGER . missingBeanInfo ( beanConfig )  )  ;", "Constructor   ctor    =     (  ( types . length )     =  =     0  )     ?    beanInfo . getConstructor (  )     :    beanInfo . findConstructor ( types )  ;", "ConstructorJoinpoint   constructorJoinpoint    =    new   ConstructorJoinpoint ( ctor )  ;", "constructorJoinpoint . setParameters ( parameters )  ;", "instantiateJoinpoint    =    constructorJoinpoint ;", "}", "return   instantiateJoinpoint . dispatch (  )  ;", "}", "METHOD_END"], "methodName": ["instantiateBean"], "fileName": "org.jboss.as.pojo.service.BeanUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   bean    :    InstancesService . getBeans ( getType (  )  ,    getState (  )  )  )", "dispatch ( bean )  ;", "}", "METHOD_END"], "methodName": ["dispatch"], "fileName": "org.jboss.as.pojo.service.Callback"}, {"methodBody": ["METHOD_START", "{", "MethodJoinpoint   joinpoint    =    new   MethodJoinpoint ( getMethod (  )  )  ;", "joinpoint . setTarget ( new   msc . value . ImmediateValue < Object >  ( bean )  )  ;", "ValueConfig   param    =    new   ValueConfig (  )     {", "protected   Object   getClassValue ( Class <  ?  >    type )     {", "return   dependency ;", "}", "}  ;", "joinpoint . setParameters ( new   ValueConfig [  ]  {    param    }  )  ;", "joinpoint . dispatch (  )  ;", "}", "METHOD_END"], "methodName": ["dispatch"], "fileName": "org.jboss.as.pojo.service.Callback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( method )     =  =    null )     {", "final   Method   m    =    beanInfo . findMethod ( config . getMethodName (  )  ,    config . getSignature (  )  )  ;", "if    (  ( m . getParameterTypes (  )  . length )     !  =     1  )", "throw   logging . PojoLogger . ROOT _ LOGGER . illegalParameterLength ( m )  ;", "method    =    m ;", "}", "return   method ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.jboss.as.pojo.service.Callback"}, {"methodBody": ["METHOD_START", "{", "return   config . getState (  )  ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.jboss.as.pojo.service.Callback"}, {"methodBody": ["METHOD_START", "{", "return   getMethod (  )  . getParameterTypes (  )  [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.jboss.as.pojo.service.Callback"}, {"methodBody": ["METHOD_START", "{", "if    ( clazz    =  =    null )", "return   value ;", "if    ( value    =  =    null )", "return   null ;", "Class <  ?  >    valueClass    =    value . getClass (  )  ;", "if    ( valueClass    =  =     ( String . class )  )     {", "String   string    =     (  ( String )     ( value )  )  ;", "if    ( trim )", "string    =    string . trim (  )  ;", "if    ( replaceProperties )", "value    =    common . beans . property . PropertiesValueResolver . replaceProperties ( string )  ;", "}", "if    ( clazz . isAssignableFrom ( valueClass )  )", "return   value ;", "if    ( clazz . isEnum (  )  )     {", "Class <  ?    extends   Enum >    eclazz    =    clazz . asSubclass ( Enum . class )  ;", "return   Enum . valueOf ( eclazz ,    value . toString (  )  )  ;", "}", "if    ( valueClass    =  =     ( String . class )  )     {", "PropertyEditor   editor    =    PropertyEditorManager . findEditor ( clazz )  ;", "if    ( editor    !  =    null )     {", "editor . setAsText (  (  ( String )     ( value )  )  )  ;", "return   editor . getValue (  )  ;", "}", "}", "try    {", "Method   method    =    clazz . getMethod (  \" valueOf \"  ,    valueClass )  ;", "int   modifiers    =    method . getModifiers (  )  ;", "if    (  (  ( Modifier . isPublic ( modifiers )  )     &  &     ( Modifier . isStatic ( modifiers )  )  )     &  &     ( clazz . isAssignableFrom ( method . getReturnType (  )  )  )  )", "return   method . invoke ( null ,    value )  ;", "}    catch    ( Exception   ignored )     {", "}", "if    ( valueClass    =  =     ( String . class )  )     {", "try    {", "Constructor   constructor    =    clazz . getConstructor ( valueClass )  ;", "if    ( Modifier . isPublic ( constructor . getModifiers (  )  )  )", "return   constructor . newInstance ( value )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["convertValue"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Configurator . simpleCheck ( typeNames ,    typeInfos )  )     =  =    false )", "return   false ;", "for    ( int   i    =     0  ;    i    <     ( typeNames . length )  ;     +  + i )     {", "if    (  (  ( typeNames [ i ]  )     !  =    null )     &  &     (  ( typeNames [ i ]  . equals ( typeInfos [ i ]  . getName (  )  )  )     =  =    false )  )", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )", "throw   PojoLogger . ROOT _ LOGGER . nullName (  )  ;", "if    ( classInfo    =  =    null )", "throw   PojoLogger . ROOT _ LOGGER . nullClassInfo (  )  ;", "if    ( paramTypes    =  =    null )", "paramTypes    =     . NO _ PARAMS _ TYPES ;", "Class   current    =    classInfo ;", "while    ( current    !  =    null )     {", "ClassReflectionIndex   cri    =    index . getClassIndex ( classInfo )  ;", "Method   result    =     . locateMethod ( cri ,    name ,    paramTypes ,    isStatic ,    isPublic ,    strict )  ;", "if    ( result    !  =    null )", "return   result ;", "current    =    current . getSuperclass (  )  ;", "}", "throw   PojoLogger . ROOT _ LOGGER . methodNotFound ( name ,    Arrays . toString ( paramTypes )  ,    classInfo . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["findMethod"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( values    =  =    null )     |  |     (  ( values . length )     =  =     0  )  )", "return    . NO _ PARAMS _ TYPES ;", "String [  ]    types    =    new   String [ values . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( types . length )  ;    i +  +  )", "types [ i ]     =    values [ i ]  . getType (  )  ;", "return   types ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "Collection < Method >    methods    =    classInfo . getMethods (  )  ;", "if    ( methods    !  =    null )     {", "for    ( Method   method    :    methods )     {", "if    (  (  ( name . equals ( method . getName (  )  )  )     &  &     (  . equals ( paramTypes ,    method . getParameterTypes (  )  )  )  )     &  &     (  ( strict    =  =    false )     |  |     (  (  ( Modifier . isStatic ( method . getModifiers (  )  )  )     =  =    isStatic )     &  &     (  ( Modifier . isPublic ( method . getModifiers (  )  )  )     =  =    isPublic )  )  )  )", "return   method ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["locateMethod"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "return    (  ( typeNames    !  =    null )     &  &     ( typeInfos    !  =    null )  )     &  &     (  ( typeNames . length )     =  =     ( typeInfos . length )  )  ;", "}", "METHOD_END"], "methodName": ["simpleCheck"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   Class )     {", "return    (  ( Class )     ( type )  )  ;", "} else", "if    ( type   instanceof   ParameterizedType )     {", "ParameterizedType   pt    =     (  ( ParameterizedType )     ( type )  )  ;", "return   Configurator . toClass ( pt . getRawType (  )  )  ;", "} else    {", "throw   logging . PojoLogger . ROOT _ LOGGER . unknownType ( type )  ;", "}", "}", "METHOD_END"], "methodName": ["toClass"], "fileName": "org.jboss.as.pojo.service.Configurator"}, {"methodBody": ["METHOD_START", "{", "BeanUtils . configure ( getBeanConfig (  )  ,    getBeanInfo (  )  ,    getModule (  )  ,    getBean (  )  ,    nullify )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.jboss.as.pojo.service.ConfiguredPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   lookup ( new   DefaultBeanInfo . Lookup < Constructor < T >  >  (  )     {", "public   Constructor < T >    lookup ( ClassReflectionIndex   index )     {", "final   Constructor   ctor    =    index . getConstructor ( parameterTypes )  ;", "if    ( ctor    =  =    null )", "throw   logging . PojoLogger . ROOT _ LOGGER . ctorNotFound ( toString ( parameterTypes )  ,    beanClass . getName (  )  )  ;", "return   ctor ;", "}", "}  ,     0  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["getConstructor"], "fileName": "org.jboss.as.pojo.service.DefaultBeanInfo"}, {"methodBody": ["METHOD_START", "{", "int   size ;", "synchronized ( indexes )     {", "size    =    indexes . size (  )  ;", "for    ( int   i    =    start ;     ( i    <    depth )     &  &     ( i    <    size )  ;    i +  +  )     {", "U   res    =    lookup . lookup ( indexes . get ( i )  )  ;", "if    ( res    !  =    null )", "return   res ;", "}", "}", "if    (  ( currentClass )     =  =    null )", "return   null ;", "synchronized ( indexes )     {", "ClassReflectionIndex   cri    =    index . getClassIndex ( currentClass )  ;", "indexes . add ( cri )  ;", "currentClass    =    currentClass . getSuperclass (  )  ;", "}", "return   lookup ( lookup ,    size ,    depth )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.jboss.as.pojo.service.DefaultBeanInfo"}, {"methodBody": ["METHOD_START", "{", "BeanInfo   beanInfo    =    getBeanInfo (  )  ;", "if    ( beanInfo    =  =    null )", "throw   new   IllegalStateException ( logging . PojoLogger . ROOT _ LOGGER . missingBeanInfo ( getBeanConfig (  )  )  )  ;", "return   beanInfo ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.pojo.service.DescribedPojoPhase"}, {"methodBody": ["METHOD_START", "{", "registerAliases ( serviceBuilder ,    getLifecycleState (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerAliases"], "fileName": "org.jboss.as.pojo.service.DescribedPojoPhase"}, {"methodBody": ["METHOD_START", "{", "try    {", "setModule ( getBeanConfig (  )  . getModule (  )  . getInjectedModule (  )  . getValue (  )  )  ;", "String   beanCla =    getBeanConfig (  )  . getBeanCla )  ;", "if    ( beanCla !  =    null )     {", "Claclazz    =    ClaforName ( beanCla   false ,    getModule (  )  . getClaoader (  )  )  ;", "setBeanInfo ( new   DefaultBeanInfo ( getIndex (  )  ,    clazz )  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   StartException ( e )  ;", "}", "super . startInternal ( context )  ;", "}", "METHOD_END"], "methodName": ["startInternal"], "fileName": "org.jboss.as.pojo.service.DescribedPojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   field ;", "}", "METHOD_END"], "methodName": ["getField"], "fileName": "org.jboss.as.pojo.service.FieldJoinpoint"}, {"methodBody": ["METHOD_START", "{", "final   Class <  ?  >    type    =    callback . getType (  )  ;", "synchronized ( type )     {", "if    ( map    =  =     (  . incallbacks )  )     {", "try    {", "callback . dispatch (  )  ;", "}    catch    ( Throwable   t )     {", "PojoLogger . ROOT _ LOGGER . errorAtIncallback ( callback ,    t )  ;", "}", "}", "TypeBeanStateKey   key    =    new   TypeBeanStateKey ( type ,    callback . getState (  )  )  ;", "List < Callback >    callbacks    =    map . get ( key )  ;", "if    ( callbacks    =  =    null )     {", "callbacks    =    new   ArrayList < Callback >  (  )  ;", "map . put ( key ,    callbacks )  ;", "}", "callbacks . add ( callback )  ;", "}", "}", "METHOD_END"], "methodName": ["addCallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . addCallback ( InstancesService . incallbacks ,    callback )  ;", "}", "METHOD_END"], "methodName": ["addIncallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "if    ( clazz    =  =    null )", "return ;", "ServiceName   name    =    BeanMetaDataConfig . toInstancesName ( clazz ,    state )  ;", "ServiceBuilder < Set < Object >  >    builder    =    target . addService ( name ,    new    ( clazz )  )  ;", "service    =     . putIfAbsent ( registry ,    name ,    builder )  ;", "synchronized ( clazz )     {", "service . instances . add ( bean )  ;", "TypeBeanStateKey   key    =    new   TypeBeanStateKey ( clazz ,    state )  ;", "if    (  (  . beans . containsKey ( key )  )     =  =    false )", ". beans . put ( key ,    service . instances )  ;", ". invokeCallbacks (  . incallbacks ,    state ,    clazz ,    bean )  ;", "}", ". addInstance ( registry ,    target ,    state ,    clazz . getSuperclass (  )  ,    bean )  ;", "Class <  ?  >  [  ]    ifaces    =    clazz . getInterfaces (  )  ;", "for    ( Class <  ?  >    iface    :    ifaces )", ". addInstance ( registry ,    target ,    state ,    iface ,    bean )  ;", "}", "METHOD_END"], "methodName": ["addInstance"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . addInstance ( registry ,    target ,    state ,    bean . getClass (  )  ,    bean )  ;", "}", "METHOD_END"], "methodName": ["addInstance"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . addCallback ( InstancesService . uncallbacks ,    callback )  ;", "}", "METHOD_END"], "methodName": ["addUncallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "synchronized ( type )     {", "TypeBeanStateKey   key    =    new   TypeBeanStateKey ( type ,    state )  ;", "Set < Object >    objects    =     . beans . get ( key )  ;", "return   objects    !  =    null    ?    Collections . unmodifiableSet ( objects )     :    Collections . emptySet (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getBeans"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "synchronized ( clazz )     {", "TypeBeanStateKey   key    =    new   TypeBeanStateKey ( clazz ,    te )  ;", "List < Callback >    callbacks    =    map . get ( key )  ;", "if    ( callbacks    !  =    null )     {", "for    ( Callback   c    :    callbacks )     {", "try    {", "c . dispatch ( bean )  ;", "}    catch    ( Throwable   t )     {", "PojoLogger . ROOT _ LOGGER . invokingCallback ( c ,    t )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["invokeCallbacks"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "for    (  ;     ;  )     {", "try    {", "ServiceController   sc    =    registry . getService ( name )  ;", "if    ( sc    =  =    null )     {", "sc    =    builder . install (  )  ;", "}", "return    (  (  )     ( sc . getService (  )  )  )  ;", "}    catch    ( DuplicateServiceException   ignored )     {", "}    catch    ( Exception   e )     {", "throw   new   StartException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["putIfAbsent"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "final   Class <  ?  >    type    =    callback . getType (  )  ;", "synchronized ( type )     {", "TypeBeanStateKey   key    =    new   TypeBeanStateKey ( type ,    callback . getState (  )  )  ;", "List < Callback >    callbacks    =    map . get ( key )  ;", "if    ( callbacks    !  =    null )     {", "callbacks . remove ( callback )  ;", "if    ( callbacks . isEmpty (  )  )", "map . remove ( key )  ;", "}", "if    ( map    =  =     (  . uncallbacks )  )     {", "try    {", "callback . dispatch (  )  ;", "}    catch    ( Throwable   t )     {", "PojoLogger . ROOT _ LOGGER . errorAtUncallback ( callback ,    t )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["removeCallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . removeCallback ( InstancesService . incallbacks ,    callback )  ;", "}", "METHOD_END"], "methodName": ["removeIncallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "if    ( clazz    =  =    null )", "return ;", "ServiceController   controller    =    registry . getService ( BeanMetaDataConfig . toInstancesName ( clazz ,    state )  )  ;", "if    ( controller    !  =    null )     {", "service    =     (  (  )     ( controller . getService (  )  )  )  ;", "synchronized ( clazz )     {", "service . instances . remove ( bean )  ;", ". invokeCallbacks (  . uncallbacks ,    state ,    clazz ,    bean )  ;", "if    ( service . instances . isEmpty (  )  )     {", ". beans . remove ( new   TypeBeanStateKey ( clazz ,    state )  )  ;", "controller . setMode ( REMOVE )  ;", "}", "}", "}", ". removeInstance ( registry ,    state ,    clazz . getSuperclass (  )  ,    bean )  ;", "Class <  ?  >  [  ]    ifaces    =    clazz . getInterfaces (  )  ;", "for    ( Class <  ?  >    iface    :    ifaces )", ". removeInstance ( registry ,    state ,    iface ,    bean )  ;", "}", "METHOD_END"], "methodName": ["removeInstance"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . removeInstance ( registry ,    state ,    bean . getClass (  )  ,    bean )  ;", "}", "METHOD_END"], "methodName": ["removeInstance"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "InstancesService . removeCallback ( InstancesService . uncallbacks ,    callback )  ;", "}", "METHOD_END"], "methodName": ["removeUncallback"], "fileName": "org.jboss.as.pojo.service.InstancesService"}, {"methodBody": ["METHOD_START", "{", "BeanUtils . dispatchLifecycleJoinpoint ( getBeanInfo (  )  ,    getBean (  )  ,    config ,    defaultMethod )  ;", "}", "METHOD_END"], "methodName": ["dispatchJoinpoint"], "fileName": "org.jboss.as.pojo.service.LifecyclePojoPhase"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.jboss.as.pojo.service.TargetJoinpoint"}, {"methodBody": ["METHOD_START", "{", "this . target    =    target ;", "}", "METHOD_END"], "methodName": ["setTarget"], "fileName": "org.jboss.as.pojo.service.TargetJoinpoint"}]