[{"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.jboss.as.mail.extension.Credentials"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.jboss.as.mail.extension.Credentials"}, {"methodBody": ["METHOD_START", "{", "return   protocol ;", "}", "METHOD_END"], "methodName": ["getProtocol"], "fileName": "org.jboss.as.mail.extension.CustomServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   provider . getSession (  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.mail.extension.DirectMailSessionService"}, {"methodBody": ["METHOD_START", "{", "MailLogger . ROOT _ LOGGER . trace (  \" start .  .  .  \"  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.mail.extension.DirectMailSessionService"}, {"methodBody": ["METHOD_START", "{", "MailLogger . ROOT _ LOGGER . trace (  \" stop .  .  .  \"  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.mail.extension.DirectMailSessionService"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( MailExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    MailExtension . RESOURCE _ NAME ,    MailExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.mail.extension.MailExtension"}, {"methodBody": ["METHOD_START", "{", "if    ( serverConfig    !  =    null )     {", "ModelNode   filteredModelNode    =    model ;", "if    (  ( modelFilter    !  =    null )     &  &     (  ( modelFilter . length )     >     0  )  )     {", "for    ( String   path    :    modelFilter )     {", "if    ( filteredModelNode . get ( path )  . isDefined (  )  )", "filteredModelNode    =    filteredModelNode . get ( path )  ;", "else", "break ;", "}", "}", "ModelNode   value    =    rverDefinition . CREDENTIAL _ REFERENCE . resolveModelAttribute ( context ,    filteredModelNode )  ;", "if    ( value . isDefined (  )  )     {", "serverConfig . getCredentialSourceSupplierInjector (  )  . inject ( CredentialReference . getCredentialSourceSupplier ( context ,    rverDefinition . CREDENTIAL _ REFERENCE ,    filteredModelNode ,    serviceBuilder )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addCredentialStoreReference"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "if    ( server    !  =    null )     {", "final   String   ref    =    server . getOutgoingSocketBinding (  )  ;", "mBuilder . addCapabilityRequirement ( MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ CAPABILITY _ NAME ,    OutboundSocketBinding . class ,    service . getSocketBindingInjector ( ref )  ,    ref )  ;", "}", "}", "METHOD_END"], "methodName": ["addOutboundSocketDependency"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "MailSessionConfig   cfg    =    new   MailSessionConfig (  )  ;", "cfg . setJndiName ( MailSessionDefinition . JNDI _ NAME . resolveModelAttribute ( operationContext ,    model )  . asString (  )  )  ;", "cfg . setDebug ( MailSessionDefinition . DEBUG . resolveModelAttribute ( operationContext ,    model )  . asBoolean (  )  )  ;", "if    ( MailSessionDefinition . FROM . resolveModelAttribute ( operationContext ,    model )  . isDefined (  )  )     {", "cfg . setFrom ( MailSessionDefinition . FROM . resolveModelAttribute ( operationContext ,    model )  . asString (  )  )  ;", "}", "if    ( model . hasDefined ( MailSubsystemModel . SERVER _ TYPE )  )     {", "ModelNode   server    =    model . get ( MailSubsystemModel . SERVER _ TYPE )  ;", "if    ( server . hasDefined ( MailSubsystemModel . SMTP )  )     {", "cfg . setSmtpServer (  . readServerConfig ( operationContext ,    server . get ( MailSubsystemModel . SMTP )  )  )  ;", "}", "if    ( server . hasDefined ( MailSubsystemModel . POP 3  )  )     {", "cfg . setPop 3 Server (  . readServerConfig ( operationContext ,    server . get ( MailSubsystemModel . POP 3  )  )  )  ;", "}", "if    ( server . hasDefined ( MailSubsystemModel . IMAP )  )     {", "cfg . setImapServer (  . readServerConfig ( operationContext ,    server . get ( MailSubsystemModel . IMAP )  )  )  ;", "}", "}", "if    ( model . hasDefined ( MailSubsystemModel . CUSTOM )  )     {", "for    ( Property   server    :    model . get ( MailSubsystemModel . CUSTOM )  . asPropertyList (  )  )     {", "cfg . addCustomServer (  . readCustomServerConfig ( server . getName (  )  ,    operationContext ,    server . getValue (  )  )  )  ;", "}", "}", "return   cfg ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   jndiName ;", "if    (  !  ( rawJndiName . startsWith (  \" java :  \"  )  )  )     {", "jndiName    =     \" java :  / mail /  \"     +    rawJndiName ;", "} else    {", "jndiName    =    rawJndiName ;", "}", "return   jndiName ;", "}", "METHOD_END"], "methodName": ["getJndiName"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   rawJndiName    =    MailSessionDefinition . JNDI _ NAME . resolveModelAttribute ( context ,    modelNode )  . asString (  )  ;", "return    . getJndiName ( rawJndiName )  ;", "}", "METHOD_END"], "methodName": ["getJndiName"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   jndiName    =    MailSessionAdd . getJndiName ( fullModel ,    context )  ;", "final   CapabilityServiceTarget   serviceTarget    =    context . getCapabilityServiceTarget (  )  ;", "final   MailSessionConfig   config    =    MailSessionAdd . from ( context ,    fullModel )  ;", "final   MailSessionService   service    =    new   MailSessionService ( config )  ;", "final   CapabilityServiceBuilder < Session >    mailSessionBuilder    =    serviceTarget . addCapability ( MailSessionDefinition . SESSION _ CAPABILITY . fromBaseCapability ( address . getLastElement (  )  . getValue (  )  )  ,    service )  ;", "MailSessionAdd . addOutboundSocketDependency ( service ,    mailSessionBuilder ,    config . getImapServer (  )  )  ;", "MailSessionAdd . addCredentialStoreReference ( config . getImapServer (  )  ,    context ,    fullModel ,    mailSessionBuilder ,    MailSubsystemModel . IMAP _ SERVER _ PATH . getKey (  )  ,    MailSubsystemModel . IMAP _ SERVER _ PATH . getValue (  )  )  ;", "MailSessionAdd . addOutboundSocketDependency ( service ,    mailSessionBuilder ,    config . getPop 3 Server (  )  )  ;", "MailSessionAdd . addCredentialStoreReference ( config . getPop 3 Server (  )  ,    context ,    fullModel ,    mailSessionBuilder ,    MailSubsystemModel . POP 3  _ SERVER _ PATH . getKey (  )  ,    MailSubsystemModel . POP 3  _ SERVER _ PATH . getValue (  )  )  ;", "MailSessionAdd . addOutboundSocketDependency ( service ,    mailSessionBuilder ,    config . getSmtpServer (  )  )  ;", "MailSessionAdd . addCredentialStoreReference ( config . getSmtpServer (  )  ,    context ,    fullModel ,    mailSessionBuilder ,    MailSubsystemModel . SMTP _ SERVER _ PATH . getKey (  )  ,    MailSubsystemModel . SMTP _ SERVER _ PATH . getValue (  )  )  ;", "for    ( CustomServerConfig   server    :    config . getCustomServers (  )  )     {", "if    (  ( server . getOutgoingSocketBinding (  )  )     !  =    null )     {", "MailSessionAdd . addOutboundSocketDependency ( service ,    mailSessionBuilder ,    server )  ;", "}", "MailSessionAdd . addCredentialStoreReference ( server ,    context ,    fullModel ,    mailSessionBuilder ,    MailSubsystemModel . CUSTOM _ SERVER _ PATH . getKey (  )  ,    server . getProtocol (  )  )  ;", "}", "mailSessionBuilder . addAliases ( MailSessionAdd . MAIL _ SESSION _ SERVICE _ NAME . append ( address . getLastElement (  )  . getValue (  )  )  )  ;", "final   ManagedReferenceFactory   valueManagedReferenceFactory    =    new   MailSessionManagedReferenceFactory ( service )  ;", "final   ContextNames . BindInfo   bindInfo    =    ContextNames . bindInfoFor ( jndiName )  ;", "final   BinderService   binderService    =    new   BinderService ( bindInfo . getBindName (  )  )  ;", "final   ServiceBuilder <  ?  >    binderBuilder    =    serviceTarget . addService ( bindInfo . getBinderServiceName (  )  ,    binderService )  . addInjection ( binderService . getManagedObjectInjector (  )  ,    valueManagedReferenceFactory )  . addDependency ( bindInfo . getParentContextServiceName (  )  ,    ServiceBasedNamingStore . class ,    binderService . getNamingStoreInjector (  )  )  . addListener ( new   AbstractServiceListener < Object >  (  )     {", "public   void   transition ( final   ServiceController <  ?    extends   Object >    controller ,    final   ServiceController . Transition   transition )     {", "switch    ( transition )     {", "case   STARTING _ to _ UP    :", "{", "MailLogger . ROOT _ LOGGER . boundMailSession ( jndiName )  ;", "break ;", "}", "case   START _ REQUESTED _ to _ DOWN    :", "{", "MailLogger . ROOT _ LOGGER . unboundMailSession ( jndiName )  ;", "break ;", "}", "case   REMOVING _ to _ REMOVED    :", "{", "MailLogger . ROOT _ LOGGER . removedMailSession ( jndiName )  ;", "break ;", "}", "}", "}", "}  )  ;", "mailSessionBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "binderBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["installRuntimeServices"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "if    ( model . get ( MailSubsystemModel . USER _ NAME )  . isDefined (  )  )     {", "String   un    =    rverDefinition . USERNAME . resolveModelAttribute ( operationContext ,    model )  . asString (  )  ;", "String   pw    =    rverDefinition . PASSWORD . resolveModelAttribute ( operationContext ,    model )  . asStringOrNull (  )  ;", "ModelNode   value    =    rverDefinition . CREDENTIAL _ REFERENCE . resolveValue ( operationContext ,    model )  ;", "String   secret    =    null ;", "if    ( value . isDefined (  )  )     {", "secret    =    CredentialReference . credentialReferencePartAsStringIfDefined ( value ,    CLEAR _ TEXT )  ;", "}", "if    ( secret    !  =    null )     {", "return   new   Credentials ( un ,    secret )  ;", "} else    {", "return   new   Credentials ( un ,    pw )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["readCredentials"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   socketModel    =    MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ REF _ OPTIONAL . resolveModelAttribute ( operationContext ,    model )  ;", "final   String   socket    =     ( socketModel . isDefined (  )  )     ?    socketModel . asString (  )     :    null ;", "final   Credentials   credentials    =     . readCredentials ( operationContext ,    model )  ;", "boolean   ssl    =    MailServerDefinition . SSL . resolveModelAttribute ( operationContext ,    model )  . asBoolean (  )  ;", "boolean   tls    =    MailServerDefinition . TLS . resolveModelAttribute ( operationContext ,    model )  . asBoolean (  )  ;", "Map < String ,    String >    properties    =    MailServerDefinition . PROPERTIES . unwrap ( operationContext ,    model )  ;", "return   new   CustomServerConfig ( protocol ,    socket ,    credentials ,    ssl ,    tls ,    properties )  ;", "}", "METHOD_END"], "methodName": ["readCustomServerConfig"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   socket    =    MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ REF . resolveModelAttribute ( operationContext ,    model )  . asString (  )  ;", "final   Credentials   credentials    =     . readCredentials ( operationContext ,    model )  ;", "boolean   ssl    =    MailServerDefinition . SSL . resolveModelAttribute ( operationContext ,    model )  . asBoolean (  )  ;", "boolean   tls    =    MailServerDefinition . TLS . resolveModelAttribute ( operationContext ,    model )  . asBoolean (  )  ;", "return   new   ServerConfig ( socket ,    credentials ,    ssl ,    tls ,    null )  ;", "}", "METHOD_END"], "methodName": ["readServerConfig"], "fileName": "org.jboss.as.mail.extension.MailSessionAdd"}, {"methodBody": ["METHOD_START", "{", "final   int   i    =    customServers . length ;", "customServers    =    Arrays . copyOf ( customServers ,     ( i    +     1  )  )  ;", "customServers [ i ]     =    customServer ;", "}", "METHOD_END"], "methodName": ["addCustomServer"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   customServers ;", "}", "METHOD_END"], "methodName": ["getCustomServers"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   from ;", "}", "METHOD_END"], "methodName": ["getFrom"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   imapServer ;", "}", "METHOD_END"], "methodName": ["getImapServer"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   jndiName ;", "}", "METHOD_END"], "methodName": ["getJndiName"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   pop 3 Server ;", "}", "METHOD_END"], "methodName": ["getPop3Server"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   smtpServer ;", "}", "METHOD_END"], "methodName": ["getSmtpServer"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "return   debug ;", "}", "METHOD_END"], "methodName": ["isDebug"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . customServers    =    customServer ;", "}", "METHOD_END"], "methodName": ["setCustomServers"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . debug    =    debug ;", "}", "METHOD_END"], "methodName": ["setDebug"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . from    =    from ;", "}", "METHOD_END"], "methodName": ["setFrom"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . imapServer    =    imapServer ;", "}", "METHOD_END"], "methodName": ["setImapServer"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . jndiName    =    jndiName ;", "}", "METHOD_END"], "methodName": ["setJndiName"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . pop 3 Server    =    pop 3 Server ;", "}", "METHOD_END"], "methodName": ["setPop3Server"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "this . smtpServer    =    smtpServer ;", "}", "METHOD_END"], "methodName": ["setSmtpServer"], "fileName": "org.jboss.as.mail.extension.MailSessionConfig"}, {"methodBody": ["METHOD_START", "{", "final   SessionProvider   provider    =    SessionProviderFactory . create ( metaData )  ;", "return   new   InjectionSource ( metaData . getName (  )  ,    provider )  ;", "}", "METHOD_END"], "methodName": ["getResourceDefinitionInjectionSource"], "fileName": "org.jboss.as.mail.extension.MailSessionDefinitionDescriptorProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   EEModuleDescription   eeModuleDescription    =    deploymentUnit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "try    {", "Service   mailSessionService    =    new   DirectService ( provider )  ;", "start ( mailSessionService ,    jndiName ,    eeModuleDescription ,    context ,    phaseContext . getServiceTarget (  )  ,    serviceBuilder ,    injector )  ;", "}    catch    ( Exception   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getResourceValue"], "fileName": "org.jboss.as.mail.extension.MailSessionDefinitionInjectionSource"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   mailSessionServiceName    =    MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  )  . append (  \" MailSessionDefinition \"  ,    moduleDescription . getApplicationName (  )  ,    moduleDescription . getModuleName (  )  ,    jndiName )  ;", "final   ServiceBuilder <  ?  >    mailSessionServiceBuilder    =    serviceTarget . addService ( mailSessionServiceName ,    mailSessionService )  ;", "final   ContextNames . BindInfo   bindInfo    =    ContextNames . bindInfoForEnvEntry ( context . getApplicationName (  )  ,    context . getModuleName (  )  ,    context . getComponentName (  )  ,     (  !  ( context . isCompUsesModule (  )  )  )  ,    jndiName )  ;", "final   MailSessionManagedReferenceFactory   referenceFactoryService    =    new   MailSessionManagedReferenceFactory ( mailSessionService )  ;", "final   BinderService   binderService    =    new   BinderService ( bindInfo . getBindName (  )  ,    this )  ;", "final   ServiceBuilder < ManagedReferenceFactory >    binderBuilder    =    serviceTarget . addService ( bindInfo . getBinderServiceName (  )  ,    binderService )  . addInjection ( binderService . getManagedObjectInjector (  )  ,    referenceFactoryService )  . addDependency ( bindInfo . getParentContextServiceName (  )  ,    ServiceBasedNamingStore . class ,    binderService . getNamingStoreInjector (  )  )  . addListener ( new   AbstractServiceListener < ManagedReferenceFactory >  (  )     {", "@ Override", "public   void   transition ( final   ServiceController <  ?    extends   ManagedReferenceFactory >    controller ,    final   ServiceController . Transition   transition )     {", "switch    ( transition )     {", "case   STARTING _ to _ UP    :", "{", "MailLogger . ROOT _ LOGGER . boundMailSession ( jndiName )  ;", "break ;", "}", "case   START _ REQUESTED _ to _ DOWN    :", "{", "MailLogger . ROOT _ LOGGER . unboundMailSession ( jndiName )  ;", "break ;", "}", "case   REMOVING _ to _ REMOVED    :", "{", "MailLogger . ROOT _ LOGGER . debugf (  \" Removed   Mail   Session    [  % s ]  \"  ,    jndiName )  ;", "break ;", "}", "}", "}", "}  )  ;", "mailSessionServiceBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "binderBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "valueSourceServiceBuilder . addDependency ( bindInfo . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    injector )  ;", "}", "METHOD_END"], "methodName": ["startMailSession"], "fileName": "org.jboss.as.mail.extension.MailSessionDefinitionInjectionSource"}, {"methodBody": ["METHOD_START", "{", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.jboss.as.mail.extension.MailSessionService"}, {"methodBody": ["METHOD_START", "{", "return   new   MapInjector ( socketBindings ,    name )  ;", "}", "METHOD_END"], "methodName": ["getSocketBindingInjector"], "fileName": "org.jboss.as.mail.extension.MailSessionService"}, {"methodBody": ["METHOD_START", "{", "return   provider . getSession (  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.mail.extension.MailSessionService"}, {"methodBody": ["METHOD_START", "{", "MailLogger . ROOT _ LOGGER . trace (  \" start .  .  .  \"  )  ;", "provider    =    ProviderFactory . create ( config ,    socketBindings )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.mail.extension.MailSessionService"}, {"methodBody": ["METHOD_START", "{", "MailLogger . ROOT _ LOGGER . trace (  \" stop .  .  .  \"  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.mail.extension.MailSessionService"}, {"methodBody": ["METHOD_START", "{", "return   new   MailSubsystemTestBase . DefaultInitializer (  )  ;", "}", "METHOD_END"], "methodName": ["createAdditionalInitialization"], "fileName": "org.jboss.as.mail.extension.MailSubsystem10TestCase"}, {"methodBody": ["METHOD_START", "{", "List < ModelNode >    operations    =    super . parse ( getSubsystemXml (  )  )  ;", "Assert . assertEquals (  7  ,    operations . size (  )  )  ;", "ModelNode   addSubsystem    =    operations . get (  0  )  ;", "Assert . assertEquals ( ModelDescriptionConstants . ADD ,    addSubsystem . get ( ModelDescriptionConstants . OP )  . asString (  )  )  ;", "PathAddress   addr    =    PathAddress . pathAddress ( addSubsystem . get ( ModelDescriptionConstants . OP _ ADDR )  )  ;", "Assert . assertEquals (  1  ,    addr . size (  )  )  ;", "PathElement   element    =    addr . getElement (  0  )  ;", "Assert . assertEquals ( ModelDescriptionConstants . SUBSYSTEM ,    element . getKey (  )  )  ;", "Assert . assertEquals ( MailExtension . SUBSYSTEM _ NAME ,    element . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testParseSubsystem"], "fileName": "org.jboss.as.mail.extension.MailSubsystem10TestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" subsystem _  1  _  1  . xml \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["test11"], "fileName": "org.jboss.as.mail.extension.MailSubsystem20TestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" subsystem _  1  _  2  . xml \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["test12"], "fileName": "org.jboss.as.mail.extension.MailSubsystem20TestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" subsystem _  1  _  1  _ expressions . xml \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testExpressions"], "fileName": "org.jboss.as.mail.extension.MailSubsystem20TestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( new   MailSubsystemTestBase . DefaultInitializer (  )  )  . setSubsystemXml ( getSubsystemXml (  )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "if    (  !  ( mainServices . isSuccessfulBoot (  )  )  )     {", "Assert . fail ( mainServices . getBootError (  )  . toString (  )  )  ;", "}", "ServiceController <  ?  >    javaMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" defaultMail \"  )  )  ;", "setMode ( ACTIVE )  ;", "Session   session    =     (  ( Session )     ( getValue (  )  )  )  ;", "Assert . assertNotNull (  \" session   should   not   be   null \"  ,    session )  ;", "Properties   properties    =    session . getProperties (  )  ;", "Assert . assertNotNull (  \" smtp   host   should   be   set \"  ,    properties . getProperty (  \" mail . smtp . host \"  )  )  ;", "Assert . assertNotNull (  \" pop 3    host   should   be   set \"  ,    properties . getProperty (  \" mail . pop 3  . host \"  )  )  ;", "Assert . assertNotNull (  \" imap   host   should   be   set \"  ,    properties . getProperty (  \" mail . imap . host \"  )  )  ;", "ServiceController <  ?  >    defaultMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" default 2  \"  )  )  ;", "session    =     (  ( Session )     ( defaultMailService . getValue (  )  )  )  ;", "Assert . assertEquals (  \" Debug   should   be   true \"  ,    true ,    session . getDebug (  )  )  ;", "ServiceController <  ?  >    customMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" custom \"  )  )  ;", "session    =     (  ( Session )     ( customMailService . getValue (  )  )  )  ;", "properties    =    session . getProperties (  )  ;", "String   host    =    properties . getProperty (  \" mail . smtp . host \"  )  ;", "Assert . assertNotNull (  \" smtp   host   should   be   set \"  ,    host )  ;", "Assert . assertEquals (  \" mail . example . com \"  ,    host )  ;", "Assert . assertEquals (  \" localhost \"  ,    properties . get (  \" mail . pop 3  . host \"  )  )  ;", "Assert . assertEquals (  \" some - custom - prop - value \"  ,    properties . get (  \" mail . pop 3  . custom _ prop \"  )  )  ;", "Assert . assertEquals (  \" fully - qualified - prop - name \"  ,    properties . get (  \" some . fully . qualified . property \"  )  )  ;", "MailSessionService   service    =     (  ( MailSessionService )     ( customMailService . getService (  )  )  )  ;", "Credentials   credentials    =    service . getConfig (  )  . getCustomServers (  )  [  0  ]  . getCredentials (  )  ;", "Assert . assertEquals ( credentials . getUsername (  )  ,     \" username \"  )  ;", "Assert . assertEquals ( credentials . getPassword (  )  ,     \" password \"  )  ;", "}", "METHOD_END"], "methodName": ["testRuntime"], "fileName": "org.jboss.as.mail.extension.MailSubsystem20TestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( new   MailSubsystemTestBase . DefaultInitializer (  )  )  . setSubsystemXml ( getSubsystemXml (  )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "if    (  !  ( mainServices . isSuccessfulBoot (  )  )  )     {", "Assert . fail ( mainServices . getBootError (  )  . toString (  )  )  ;", "}", "ServiceController <  ?  >    javaMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" defaultMail \"  )  )  ;", "setMode ( ACTIVE )  ;", "Session   session    =     (  ( Session )     ( getValue (  )  )  )  ;", "Assert . assertNotNull (  \" session   should   not   be   null \"  ,    session )  ;", "Properties   properties    =    session . getProperties (  )  ;", "Assert . assertNotNull (  \" smtp   host   should   be   set \"  ,    properties . getProperty (  \" mail . smtp . host \"  )  )  ;", "Assert . assertNotNull (  \" pop 3    host   should   be   set \"  ,    properties . getProperty (  \" mail . pop 3  . host \"  )  )  ;", "Assert . assertNotNull (  \" imap   host   should   be   set \"  ,    properties . getProperty (  \" mail . imap . host \"  )  )  ;", "PasswordAuthentication   auth    =    session . requestPasswordAuthentication ( InetAddress . getLocalHost (  )  ,     2  5  ,     \" smtp \"  ,     \"  \"  ,     \"  \"  )  ;", "Assert . assertEquals (  \" nobody \"  ,    auth . getUserName (  )  )  ;", "Assert . assertEquals (  \" pass \"  ,    auth . getPassword (  )  )  ;", "ServiceController <  ?  >    defaultMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" default 2  \"  )  )  ;", "session    =     (  ( Session )     ( defaultMailService . getValue (  )  )  )  ;", "Assert . assertEquals (  \" Debug   should   be   true \"  ,    true ,    session . getDebug (  )  )  ;", "ServiceController <  ?  >    customMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" custom \"  )  )  ;", "session    =     (  ( Session )     ( customMailService . getValue (  )  )  )  ;", "properties    =    session . getProperties (  )  ;", "String   host    =    properties . getProperty (  \" mail . smtp . host \"  )  ;", "Assert . assertNotNull (  \" smtp   host   should   be   set \"  ,    host )  ;", "Assert . assertEquals (  \" mail . example . com \"  ,    host )  ;", "Assert . assertEquals (  \" localhost \"  ,    properties . get (  \" mail . pop 3  . host \"  )  )  ;", "Assert . assertEquals (  \" some - custom - prop - value \"  ,    properties . get (  \" mail . pop 3  . custom _ prop \"  )  )  ;", "Assert . assertEquals (  \" fully - qualified - prop - name \"  ,    properties . get (  \" some . fully . qualified . property \"  )  )  ;", "MailSessionService   service    =     (  ( MailSessionService )     ( customMailService . getService (  )  )  )  ;", "Credentials   credentials    =    service . getConfig (  )  . getCustomServers (  )  [  0  ]  . getCredentials (  )  ;", "Assert . assertEquals ( credentials . getUsername (  )  ,     \" username \"  )  ;", "Assert . assertEquals ( credentials . getPassword (  )  ,     \" password \"  )  ;", "}", "METHOD_END"], "methodName": ["testRuntime"], "fileName": "org.jboss.as.mail.extension.MailSubsystem30TestCase"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   operation    =    Util . createAddOperation ( parent )  ;", "list . add ( operation )  ;", "String   name    =    null ;", "for    ( int   i    =     0  ;    i    <     ( reader . getAttributeCount (  )  )  ;    i +  +  )     {", "String   attr    =    reader . getAttributeLocalName ( i )  ;", "String   value    =    reader . getAttributeValue ( i )  ;", "switch    ( attr )     {", "case   Model . OUTBOUND _ SOCKET _ BINDING _ REF    :", "MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ REF _ OPTIONAL . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   Model . SSL    :", "MailServerDefinition . SSL . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   Model . TLS    :", "MailServerDefinition . TLS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   Model . NAME    :", "name    =    value ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   String   element    =    reader . getLocalName (  )  ;", "switch    ( element )     {", "case   Model . LOGIN    :", "{", "for    ( int   i    =     0  ;    i    <     ( reader . getAttributeCount (  )  )  ;    i +  +  )     {", "String   att    =    reader . getAttributeLocalName ( i )  ;", "String   value    =    reader . getAttributeValue ( i )  ;", "if    ( att . equals ( Model . USER _ NAME )  )     {", "MailServerDefinition . USERNAME . parseAndSetParameter ( value ,    operation ,    reader )  ;", "} else", "if    ( att . equals ( Model . PASSWORD )  )     {", "MailServerDefinition . PASSWORD . parseAndSetParameter ( value ,    operation ,    reader )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "break ;", "}", "case   Model . PROPERTY    :", "{", "final   String [  ]    array    =    requireAttributes ( reader ,    NAME . getLocalName (  )  ,    VALUE . getLocalName (  )  )  ;", "MailServerDefinition . PROPERTIES . parseAndAddParameterElement ( array [  0  ]  ,    array [  1  ]  ,    operation ,    reader )  ;", "ParseUtils . requireNoContent ( reader )  ;", "break ;", "}", "default    :", "{", "throw   ParseUtils . unexpectedElement ( reader )  ;", "}", "}", "}", "if    ( name    =  =    null )     {", "throw   ParseUtils . missingRequired ( reader ,    Collections . singleton ( Model . NAME )  )  ;", "}", "PathAddress   address    =    parent . append ( Model . CUSTOM ,    name )  ;", "operation . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( address . toModelNode (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseCustomServerConfig"], "fileName": "org.jboss.as.mail.extension.MailSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   String   element    =    reader . getLocalName (  )  ;", "switch    ( element )     {", "case   Model . LOGIN    :", "{", "for    ( int   i    =     0  ;    i    <     ( reader . getAttributeCount (  )  )  ;    i +  +  )     {", "String   att    =    reader . getAttributeLocalName ( i )  ;", "String   value    =    reader . getAttributeValue ( i )  ;", "if    ( att . equals ( Model . USER _ NAME )  )     {", "MailServerDefinition . USERNAME . parseAndSetParameter ( value ,    operation ,    reader )  ;", "} else", "if    ( att . equals ( Model . PASSWORD )  )     {", "MailServerDefinition . PASSWORD . parseAndSetParameter ( value ,    operation ,    reader )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "break ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseLogin"], "fileName": "org.jboss.as.mail.extension.MailSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "String   jndiName    =    null ;", "final   ModelNode   operation    =    new   ModelNode (  )  ;", "for    ( int   i    =     0  ;    i    <     ( reader . getAttributeCount (  )  )  ;    i +  +  )     {", "String   attr    =    reader . getAttributeLocalName ( i )  ;", "String   value    =    reader . getAttributeValue ( i )  ;", "switch    ( attr )     {", "case   Model . JNDI _ NAME    :", "jndiName    =    value ;", "MailSessionDefinition . JNDI _ NAME . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   Model . DEBUG    :", "MailSessionDefinition . DEBUG . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   Model . FROM    :", "MailSessionDefinition . FROM . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "}", "}", "if    ( jndiName    =  =    null )     {", "throw   ParseUtils . missingRequired ( reader ,    Collections . singleton ( MailSessionDefinition . JNDI _ NAME )  )  ;", "}", "final   PathAddress   address    =    parent . append ( Model . MAIL _ SESSION ,    jndiName )  ;", "operation . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( address . toModelNode (  )  )  ;", "operation . get ( ModelDescriptionConstants . OP )  . set ( ModelDescriptionConstants . ADD )  ;", "list . add ( operation )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "switch    ( Namespace . forUri ( reader . getNamespaceURI (  )  )  )     {", "case   MAIL _  1  _  0     :", "case   MAIL _  1  _  1     :", "case   MAIL _  1  _  2     :", "{", "final   String   element    =    reader . getLocalName (  )  ;", "switch    ( element )     {", "case   Model . SMTP _ SERVER    :", "{", "parseServerConfig ( reader ,    Model . SMTP ,    address ,    list )  ;", "break ;", "}", "case   Model . POP 3  _ SERVER    :", "{", "parseServerConfig ( reader ,    Model . POP 3  ,    address ,    list )  ;", "break ;", "}", "case   Model . IMAP _ SERVER    :", "{", "parseServerConfig ( reader ,    Model . IMAP ,    address ,    list )  ;", "break ;", "}", "case   Model . CUSTOM _ SERVER    :", "{", "parseCustomServerConfig ( reader ,    address ,    list )  ;", "break ;", "}", "default    :", "{", "reader . handleAny ( list )  ;", "break ;", "}", "}", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseMailSession"], "fileName": "org.jboss.as.mail.extension.MailSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "PathAddress   address    =    parent . append ( MailSubsystemModel . SERVER _ TYPE ,    name )  ;", "final   ModelNode   operation    =    Util . createAddOperation ( address )  ;", "list . add ( operation )  ;", "String   socketBindingRef    =    null ;", "for    ( int   i    =     0  ;    i    <     ( reader . getAttributeCount (  )  )  ;    i +  +  )     {", "String   attr    =    reader . getAttributeLocalName ( i )  ;", "String   value    =    reader . getAttributeValue ( i )  ;", "switch    ( attr )     {", "case   MailSubsystemModel . OUTBOUND _ SOCKET _ BINDING _ REF    :", "socketBindingRef    =    value ;", "MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ REF . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   MailSubsystemModel . SSL    :", "MailServerDefinition . SSL . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   MailSubsystemModel . TLS    :", "MailServerDefinition . TLS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    ( socketBindingRef    =  =    null )     {", "throw   ParseUtils . missingRequired ( reader ,    Collections . singleton ( MailServerDefinition . OUTBOUND _ SOCKET _ BINDING _ REF )  )  ;", "}", "parseLogin ( reader ,    operation )  ;", "}", "METHOD_END"], "methodName": ["parseServerConfig"], "fileName": "org.jboss.as.mail.extension.MailSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "final   PathAddress   address    =    PathAddress . pathAddress ( MailExtension . SUBSYSTEM _ PATH )  ;", "list . add ( Util . createAddOperation ( address )  )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "switch    ( Namespace . forUri ( reader . getNamespaceURI (  )  )  )     {", "case   MAIL _  1  _  0     :", "case   MAIL _  1  _  1     :", "case   MAIL _  1  _  2     :", "{", "final   String   element    =    reader . getLocalName (  )  ;", "switch    ( element )     {", "case   Model . MAIL _ SESSION    :", "{", "parseMailSession ( reader ,    list ,    address )  ;", "break ;", "}", "default    :", "{", "reader . handleAny ( list )  ;", "break ;", "}", "}", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readElement"], "fileName": "org.jboss.as.mail.extension.MailSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( ModelDescriptionConstants . FAILED . equals ( rsp . get ( ModelDescriptionConstants . OUTCOME )  . asString (  )  )  )  )     {", "Assert . fail (  \" Should   have   failed !  \"  )  ;", "}", "return   rsp ;", "}", "METHOD_END"], "methodName": ["checkForFailure"], "fileName": "org.jboss.as.mail.extension.MailSubsystemTestBase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( result . get ( FAILURE _ DESCRIPTION )  . asString (  )  ,     \" success \"  ,    result . get ( OUTCOME )  . asString (  )  )  ;", "if    ( result . hasDefined ( RESPONSE _ HEADERS )  )     {", "boolean   reload    =    result . get ( RESPONSE _ HEADERS ,    OPERATION _ REQUIRES _ RELOAD )  . asBoolean ( false )  ;", "Assert . assertFalse (  \" Operation   should   not   return   requires   reload \"  ,    reload )  ;", "}", "}", "METHOD_END"], "methodName": ["checkResult"], "fileName": "org.jboss.as.mail.extension.MailSubsystemTestBase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( new   MailSubsystemTestBase . DefaultInitializer (  )  )  . setSubsystemXml ( getSubsystemXml (  )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "if    (  !  ( mainServices . isSuccessfulBoot (  )  )  )     {", "Assert . fail ( mainServices . getBootError (  )  . toString (  )  )  ;", "}", "PathAddress   sessionAddress    =    PathAddress . pathAddress ( MailExtension . SUBSYSTEM _ PATH ,    PathElement . pathElement ( MailExtension . MAIL _ SESSION _ PATH . getKey (  )  ,     \" defaultMail \"  )  )  ;", "ModelNode   result ;", "ModelNode   removeServerOp    =    Util . createRemoveOperation ( sessionAddress . append (  \" server \"  ,     \" imap \"  )  )  ;", "removeServerOp . get ( ModelDescriptionConstants . OPERATION _ HEADERS )  . get ( ModelDescriptionConstants . ALLOW _ RESOURCE _ SERVICE _ RESTART )  . set ( true )  ;", "result    =    mainServices . executeOperation ( removeServerOp )  ;", "checkResult ( result )  ;", "ModelNode   addServerOp    =    Util . createAddOperation ( sessionAddress . append (  \" server \"  ,     \" imap \"  )  )  ;", "addServerOp . get ( ModelDescriptionConstants . OPERATION _ HEADERS )  . get ( ModelDescriptionConstants . ALLOW _ RESOURCE _ SERVICE _ RESTART )  . set ( true )  ;", "addServerOp . get (  \" outbound - socket - binding - ref \"  )  . set (  \" mail - imap \"  )  ;", "addServerOp . get (  \" username \"  )  . set (  \" user \"  )  ;", "addServerOp . get (  \" password \"  )  . set (  \" pswd \"  )  ;", "result    =    mainServices . executeOperation ( addServerOp )  ;", "checkResult ( result )  ;", "checkResult ( mainServices . executeOperation ( removeServerOp )  )  ;", "checkResult ( mainServices . executeOperation ( addServerOp )  )  ;", "ModelNode   writeOp    =    Util . createEmptyOperation ( ModelDescriptionConstants . WRITE _ ATTRIBUTE _ OPERATION ,    sessionAddress )  ;", "writeOp . get ( ModelDescriptionConstants . OPERATION _ HEADERS )  . get ( ModelDescriptionConstants . ALLOW _ RESOURCE _ SERVICE _ RESTART )  . set ( true )  ;", "writeOp . get (  \" name \"  )  . set (  \" debug \"  )  ;", "writeOp . get (  \" value \"  )  . set ( false )  ;", "result    =    mainServices . executeOperation ( writeOp )  ;", "checkResult ( result )  ;", "ServiceController <  ?  >    javaMailService    =    mainServices . getContainer (  )  . getService ( MailSessionDefinition . SESSION _ CAPABILITY . getCapabilityServiceName (  \" defaultMail \"  )  )  ;", "setMode ( ACTIVE )  ;", "Session   session    =     (  ( Session )     ( getValue (  )  )  )  ;", "Assert . assertNotNull (  \" session   should   not   be   null \"  ,    session )  ;", "Properties   properties    =    session . getProperties (  )  ;", "Assert . assertNotNull (  \" smtp   host   should   be   set \"  ,    properties . getProperty (  \" mail . smtp . host \"  )  )  ;", "Assert . assertNotNull (  \" imap   host   should   be   set \"  ,    properties . getProperty (  \" mail . imap . host \"  )  )  ;", "PathAddress   nonExisting    =    PathAddress . pathAddress ( MailExtension . SUBSYSTEM _ PATH ,    PathElement . pathElement ( MailExtension . MAIL _ SESSION _ PATH . getKey (  )  ,     \" non - existing - session \"  )  )  ;", "ModelNode   addSession    =    Util . createAddOperation ( nonExisting )  ;", "addSession . get (  \" jndi - name \"  )  . set (  \" java :  / bah \"  )  ;", "checkResult ( mainServices . executeOperation ( addSession )  )  ;", "removeServerOp    =    Util . createRemoveOperation ( nonExisting . append (  \" server \"  ,     \" imap \"  )  )  ;", "result    =    mainServices . executeOperation ( removeServerOp )  ;", "checkForFailure ( result )  ;", "}", "METHOD_END"], "methodName": ["testOperations"], "fileName": "org.jboss.as.mail.extension.MailSubsystemTestBase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    this . createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXml ( xml )  ;", "builder . createLegacyKernelServicesBuilder ( MANAGEMENT ,    controllerVersion ,    version )  . addMavenResourceURL ( mavenResourceURLs )  . skipReverseControllerCheck (  )  . dontPersistXml (  )  ;", "KernelServices   services    =    builder . build (  )  ;", "Assert . assertTrue (  (  ( ModelTestControllerVerASTER )     +     \"    boot   failed \"  )  ,    services . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue (  (  ( controllerVersion . getMavenGavVersion (  )  )     +     \"    boot   failed \"  )  ,    services . getLegacyServices ( version )  . isSuccessfulBoot (  )  )  ;", "return   services ;", "}", "METHOD_END"], "methodName": ["buildKernelServices"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "return   this . buildKernelServices ( this . getSubsystemXml (  )  ,    controllerVersion ,    version ,    mavenResourceURLs )  ;", "}", "METHOD_END"], "methodName": ["buildKernelServices"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "String   artifact    =     ( controller . getCoreVersion (  )  . equals ( controller . getMavenGavVersion (  )  )  )     ?     \" jboss - as - mail \"     :     \" wildfly - mail \"  ;", "return    (  (  (  ( controller . getMavenGroupId (  )  )     +     \"  :  \"  )     +    artifact )     +     \"  :  \"  )     +     ( controller . getMavenGavVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMailGav"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    targetVersion )  . configureReverseControllerCheck ( createAdditionalInitialization (  )  ,    null )  . addMavenResourceURL (  . getMailGav ( controllerVersion )  )  . dontPersistXml (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "assertTrue ( mainServices . getLegacyServices ( targetVersion )  . isSuccessfulBoot (  )  )  ;", "List < ModelNode >    ops    =    builder . parseXmlResource (  \" mail _  3  _  0  - reject . xml \"  )  ;", "PathAddress   sessionAddress    =    PathAddress . pathAddress ( MailExtension . SUBSYSTEM _ PATH )  . append ( MailExtension . MAIL _ SESSION _ PATH )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    targetVersion ,    ops ,    new   FailedOperationTransformationConfig (  )  . addFailedAttribute ( sessionAddress . append (  \" server \"  )  ,    new   FailedOperationTransformationConfig . NewAttributesConfig ( MailServerDefinition . CREDENTIAL _ REFERENCE )  )  . addFailedAttribute ( sessionAddress . append (  \" custom \"  )  ,    new   FailedOperationTransformationConfig . NewAttributesConfig ( MailServerDefinition . CREDENTIAL _ REFERENCE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectingTransformers"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectingTransformers ( EAP _  6  _  4  _  0  ,    MailTransformers . MODEL _ VERSION _ EAP 6 X )  ;", "}", "METHOD_END"], "methodName": ["testRejectingTransformersEAP_6_4_0"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectingTransformers ( EAP _  7  _  0  _  0  ,    MailTransformers . MODEL _ VERSION _ EAP 7  0  )  ;", "}", "METHOD_END"], "methodName": ["testRejectingTransformersEAP_7_0_0"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServices   services    =    this . buildKernelServices ( controller ,    version ,    MailTransformersTestCase . getMailGav ( controller )  )  ;", "checkSubsystemModelTransformation ( services ,    version ,    null ,    false )  ;", "ModelNode   transformed    =    services . readTransformedModel ( version )  ;", "assertNotNull ( transformed )  ;", "}", "METHOD_END"], "methodName": ["testTransformation"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformation ( EAP _  6  _  4  _  0  ,    MailTransformers . MODEL _ VERSION _ EAP 6 X )  ;", "}", "METHOD_END"], "methodName": ["testTransformerEAP640"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformation ( EAP _  7  _  0  _  0  ,    MailTransformers . MODEL _ VERSION _ EAP 7  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformerEAP700"], "fileName": "org.jboss.as.mail.extension.MailTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.mail.extension.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.mail.extension.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   credentialSourceSupplierInjector ;", "}", "METHOD_END"], "methodName": ["getCredentialSourceSupplierInjector"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "ExceptionSupplier < CredentialSource ,    Exception >    credentialSourceSupplier    =    credentialSourceSupplierInjector . getOptionalValue (  )  ;", "if    ( credentialSourceSupplier    !  =    null )     {", "try    {", "CredentialSource   credentialSource    =    credentialSourceSupplier . get (  )  ;", "if    ( credentialSource    =  =    null )     {", "return   credentials ;", "}", "char [  ]    password    =    credentialSource . getCredential ( PasswordCredential . class )  . getPassword ( ClearPassword . class )  . getPassword (  )  ;", "return   new   Credentials ( credentials . getUsername (  )  ,    new   String ( password )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "} else    {", "return   credentials ;", "}", "}", "METHOD_END"], "methodName": ["getCredentials"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   outgoingSocketBinding ;", "}", "METHOD_END"], "methodName": ["getOutgoingSocketBinding"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   sslEnabled ;", "}", "METHOD_END"], "methodName": ["isSslEnabled"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   tlsEnabled ;", "}", "METHOD_END"], "methodName": ["isTlsEnabled"], "fileName": "org.jboss.as.mail.extension.ServerConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   SessionProviderFactory . ManagedSession ( config ,    socketBindings )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.mail.extension.SessionProviderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   SessionProviderFactory . DirectSessionProvider ( mailSessionMetaData )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.mail.extension.SessionProviderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   StringBuilder (  \" mail .  \"  )  . append ( protocol )  . append (  \"  . host \"  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getHostKey"], "fileName": "org.jboss.as.mail.extension.SessionProviderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   StringBuilder (  \" mail .  \"  )  . append ( protocol )  . append (  \"  . port \"  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPortKey"], "fileName": "org.jboss.as.mail.extension.SessionProviderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   StringBuilder (  \" mail .  \"  )  . append ( protocol )  . append (  \"  .  \"  )  . append ( name )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPropKey"], "fileName": "org.jboss.as.mail.extension.SessionProviderFactory"}]