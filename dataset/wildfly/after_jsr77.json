[{"methodBody": ["METHOD_START", "{", "throw   JSR 7  7 Logger . ROOT _ LOGGER . onlyRequiredInLocalView (  )  ;", "}", "METHOD_END"], "methodName": ["createInstance"], "fileName": "org.jboss.as.jsr77.ejb.BaseManagementEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "throw   JSR 7  7 Logger . ROOT _ LOGGER . onlyRequiredInLocalView (  )  ;", "}", "METHOD_END"], "methodName": ["createInstance"], "fileName": "org.jboss.as.jsr77.ejb.BaseManagementEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Map < String ,    Method >  >    methods    =    this . methods ;", "if    ( methods    !  =    null )     {", "return   methods ;", "}", "synchronized ( this )     {", "methods    =    this . methods ;", "if    ( methods    =  =    null )     {", "methods    =    initMethods (  )  ;", "this . methods    =    methods ;", "}", "}", "return   methods ;", "}", "METHOD_END"], "methodName": ["getMethods"], "fileName": "org.jboss.as.jsr77.ejb.BaseManagementEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "map . put ( m . getName (  )  ,    Collections . singletonMap ( DescriptorUtils . methodDescriptor ( m )  ,    m )  )  ;", "}", "METHOD_END"], "methodName": ["addMethod"], "fileName": "org.jboss.as.jsr77.ejb.ManagementHomeEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "map . put ( m . getName (  )  ,    Collections . singletonMap ( DescriptorUtils . methodDescriptor ( m )  ,    m )  )  ;", "}", "METHOD_END"], "methodName": ["addMethod"], "fileName": "org.jboss.as.jsr77.ejb.ManagementRemoteEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "if    ( index    >  =     ( params . length )  )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . wrongParamLength ( index ,    params . length )  ;", "}", "Object   o    =    params [ index ]  ;", "if    ( o    =  =    null )     {", "return   null ;", "}", "try    {", "return   clazz . cast ( o )  ;", "}    catch    ( Exception   e )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . wrongParamType ( index ,    clazz . getName (  )  ,    o . getClass (  )  . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getParameter"], "fileName": "org.jboss.as.jsr77.ejb.ManagementRemoteEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "if    ( method    =  =     ( queryNames )  )     {", "return   server . queryNames ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( QueryExp . class ,    params ,     1  )  )  ;", "} else", "if    ( method    =  =     ( isRegistered )  )     {", "return   server . isRegistered ( getParameter ( ObjectName . class ,    params ,     0  )  )  ;", "} else", "if    ( method    =  =     ( getMBeanCount )  )     {", "return   server . getMBeanCount (  )  ;", "} else", "if    ( method    =  =     ( getMBeanInfo )  )     {", "return   server . getMBeanInfo ( getParameter ( ObjectName . class ,    params ,     0  )  )  ;", "} else", "if    ( method    =  =     ( getAttribute )  )     {", "return   server . getAttribute ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( String . class ,    params ,     1  )  )  ;", "} else", "if    ( method    =  =     ( getAttributes )  )     {", "return   server . getAttributes ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( String [  ]  . class ,    params ,     1  )  )  ;", "} else", "if    ( method    =  =     ( setAttribute )  )     {", "server . setAttribute ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( class ,    params ,     1  )  )  ;", "} else", "if    ( method    =  =     ( setAttributes )  )     {", "return   server . setAttributes ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( class ,    params ,     1  )  )  ;", "} else", "if    ( method    =  =     ( invoke )  )     {", "return   server . invoke ( getParameter ( ObjectName . class ,    params ,     0  )  ,    getParameter ( String . class ,    params ,     1  )  ,    getParameter ( Object [  ]  . class ,    params ,     2  )  ,    getParameter ( String [  ]  . class ,    params ,     3  )  )  ;", "} else", "if    ( method    =  =     ( getDefaultDomain )  )     {", "return   server . getDefaultDomain (  )  ;", "} else", "if    ( method    =  =     ( getListenerRegistry )  )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . notYetImplemented (  )  ;", "} else", "if    ( method    =  =     ( remove )  )     {", "return   null ;", "}", "throw   JSR 7  7 Logger . ROOT _ LOGGER . unknownMethod ( method )  ;", "}", "METHOD_END"], "methodName": ["invokeInternal"], "fileName": "org.jboss.as.jsr77.ejb.ManagementRemoteEjbComponentView"}, {"methodBody": ["METHOD_START", "{", "return   new   MBeanAttributeInfo ( name ,    type ,    description ,    true ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["createRoMBeanAttributeInfo"], "fileName": "org.jboss.as.jsr77.managedobject.BaseHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( attribute . equals ( BaseHandler . ATTR _ NAME )  )     {", "return   name . toString (  )  ;", "} else", "if    (  (  ( attribute . equals ( BaseHandler . ATTR _ STATE _ MANAGEABLE )  )     |  |     ( attribute . equals ( BaseHandler . ATTR _ STATISTICS _ PROVIDER )  )  )     |  |     ( attribute . equals ( BaseHandler . ATTR _ EVENT _ PROVIDER )  )  )     {", "return   false ;", "}", "throw   JSR 7  7 Logger . ROOT _ LOGGER . noAttributeCalled ( attribute )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jsr77.managedobject.BaseHandler"}, {"methodBody": ["METHOD_START", "{", "Set < MBeanAttributeInfo >    attributes    =    new   HashSet < MBeanAttributeInfo >  (  )  ;", "attributes . add ( createRoMBeanAttributeInfo (  . ATTR _ NAME ,    String . class . getName (  )  ,    JSR 7  7 Logger . ROOT _ LOGGER . attrInfoAttrName (  )  )  )  ;", "attributes . add ( createRoMBeanAttributeInfo (  . ATTR _ STATE _ MANAGEABLE ,    Boolean . TYPE . getName (  )  ,    JSR 7  7 Logger . ROOT _ LOGGER . attrInfoStateManageable (  )  )  )  ;", "attributes . add ( createRoMBeanAttributeInfo (  . ATTR _ STATISTICS _ PROVIDER ,    Boolean . TYPE . getName (  )  ,    JSR 7  7 Logger . ROOT _ LOGGER . attrInfoStatisticsProvider (  )  )  )  ;", "attributes . add ( createRoMBeanAttributeInfo (  . ATTR _ EVENT _ PROVIDER ,    Boolean . TYPE . getName (  )  ,    JSR 7  7 Logger . ROOT _ LOGGER . attrInfoEventProvider (  )  )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["getAttributeInfos"], "fileName": "org.jboss.as.jsr77.managedobject.BaseHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( objName    !  =    null )     {", "ObjectName   Name    =    ObjectNameBuilder . createObjectName ( objName )  ;", "if    (  ( Name    !  =    null )     &  &     (  ( name    =  =    null )     |  |     ( name . apply ( Name )  )  )  )     {", "names . add ( Name )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addMatchingObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEDeployedObjectHandlers"}, {"methodBody": ["METHOD_START", "{", "String   type    =    null ;", "if    ( deploymentName . endsWith (  \"  . ear \"  )  )     {", "type    =     . J 2 EE _ TYPE _ J 2 EE _ APPLICATION ;", "} else", "if    ( deploymentName . endsWith (  \"  . war \"  )  )     {", "type    =     . J 2 EE _ TYPE _ WEB _ MODULE ;", "} else", "if    ( deploymentName . endsWith (  \"  . jar \"  )  )     {", "if    ( deploymentName . endsWith (  \" client . jar \"  )  )     {", "type    =     . J 2 EE _ TYPE _ APP _ CLIENT _ MODULE ;", "} else", "if    (  ( subsystem    !  =    null )     &  &     ( subsystem . equals (  \" ejb 3  \"  )  )  )     {", "type    =     . J 2 EE _ TYPE _ EJB _ MODULE ;", "}", "} else", "if    ( deploymentName . endsWith (  \"  . rar \"  )  )     {", "type    =     . J 2 EE _ TYPE _ RA _ MODULE ;", "}", "if    ( type    =  =    null )     {", "return   null ;", "}", "final   ObjectNameBuilder   builder    =    ObjectNameBuilder . createServerChild ( type ,    deploymentName )  ;", "if    ( appName    !  =    null )     {", "builder . append (  . J 2 EE _ TYPE _ J 2 EE _ APPLICATION ,    appName )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["createObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEDeployedObjectHandlers"}, {"methodBody": ["METHOD_START", "{", "final   String   j 2 eeType    =    name . getKeyProperty ( Handler . J 2 EE _ TYPE )  ;", "final   String   namePart    =    name . getKeyProperty ( Handler . NAME )  ;", "final   String   appName    =    name . getKeyProperty (  . J 2 EE _ TYPE _ J 2 EE _ APPLICATION )  ;", "final   String   mainDeployment ;", "final   String   subDeployment ;", "if    ( appName    =  =    null )     {", "mainDeployment    =    namePart ;", "subDeployment    =    null ;", "} else    {", "mainDeployment    =    appName ;", "subDeployment    =    namePart ;", "}", "if    ( mainDeployment    !  =    null )     {", "ModelNode   deploymentNode    =    null ;", "ModelNode   deployments    =    reader . getDeploymentModel (  )  ;", "if    ( deployments . isDefined (  )  )     {", "for    ( ModelNode   deployment    :    deployments . asList (  )  )     {", "deployment    =    deployment . get ( RESULT )  ;", "if    ( mainDeployment . equals ( deployment . get ( Handler . NAME )  . asString (  )  )  )     {", "String   actualDeployment    =    mainDeployment ;", "deploymentNode    =    deployment ;", "if    (  !  ( deploymentNode . isDefined (  )  )  )     {", "break ;", "}", "if    ( subDeployment    !  =    null )     {", "actualDeployment    =    subDeployment ;", "deploymentNode    =    deploymentNode . get ( SUBDEPLOYMENT ,    subDeployment )  ;", "if    (  !  ( deploymentNode . isDefined (  )  )  )     {", "break ;", "}", "}", "J 2 EEDeployedObjectHandler   handler ;", "if    (  ( j 2 eeType . equals (  . J 2 EE _ TYPE _ J 2 EE _ APPLICATION )  )     &  &     ( actualDeployment . endsWith (  \"  . ear \"  )  )  )     {", "handler    =     . J 2 EEApplicationHandler . INSTANCE ;", "} else", "if    (  ( j 2 eeType . equals (  . J 2 EE _ TYPE _ APP _ CLIENT _ MODULE )  )     &  &     ( actualDeployment . endsWith (  \"  . jar \"  )  )  )     {", "handler    =     . AppClientModuleHandler . INSTANCE ;", "} else", "if    (  (  ( j 2 eeType . equals (  . J 2 EE _ TYPE _ EJB _ MODULE )  )     &  &     ( actualDeployment . endsWith (  \"  . jar \"  )  )  )     &  &     (  ( deploymentNode . hasDefined ( SUBSYSTEM )  )     &  &     ( deploymentNode . get ( SUBSYSTEM )  . asString (  )  . equals (  \" ejb 3  \"  )  )  )  )     {", "handler    =     . EJBModuleHandler . INSTANCE ;", "} else", "if    (  ( j 2 eeType . equals (  . J 2 EE _ TYPE _ WEB _ MODULE )  )     &  &     ( actualDeployment . endsWith (  \"  . war \"  )  )  )     {", "handler    =     . WebModuleHandler . INSTANCE ;", "} else    {", "break ;", "}", "reader . setDeploymentModel ( deploymentNode )  ;", "return   handler ;", "}", "}", "}", "}", "throw   JSR 7  7 Logger . ROOT _ LOGGER . couldNotFindJ 2 eeType ( j 2 eeType )  ;", "}", "METHOD_END"], "methodName": ["findHandler"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEDeployedObjectHandlers"}, {"methodBody": ["METHOD_START", "{", "if    ( attribute . equals ( J 2 EEDomainHandler . ATTR _ SERVERS )  )     {", "return   new   String [  ]  {    J 2 EEServerHandler . INSTANCE . getObjectName (  )     }  ;", "}", "return   super . getAttribute ( reader ,    name ,    attribute )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEDomainHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( attribute . equals ( J 2 EEServerHandler . ATTR _ DEPLOYED _ OBJECTS )  )     {", "return   new   String [  0  ]  ;", "} else", "if    ( attribute . equals ( J 2 EEServerHandler . ATTR _ RESOURCES )  )     {", "return   new   String [  0  ]  ;", "} else", "if    ( attribute . equals ( J 2 EEServerHandler . ATTR _ JAVA _ VMS )  )     {", "return   new   String [  ]  {    JVMHandler . INSTANCE . getObjectName (  )     }  ;", "} else", "if    ( attribute . equals ( J 2 EEServerHandler . ATTR _ SERVER _ VENDOR )  )     {", "return    \" JBoss \"  ;", "} else", "if    ( attribute . equals ( J 2 EEServerHandler . ATTR _ SERVER _ VERSION )  )     {", "return   AS _ VERSION ;", "}", "return   super . getAttribute ( reader ,    name ,    attribute )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEServerHandler"}, {"methodBody": ["METHOD_START", "{", "return   objectName ;", "}", "METHOD_END"], "methodName": ["getObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.J2EEServerHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( attribute . equals ( JVMHandler . ATTR _ JVM _ NAME )  )     {", "return   WildFlySecurityManager . getPropertyPrivileged (  \" version \"  ,    null )  ;", "} else", "if    ( attribute . equals ( JVMHandler . ATTR _ JAVA _ VENDOR )  )     {", "return   WildFlySecurityManager . getPropertyPrivileged (  \" vendor \"  ,    null )  ;", "} else", "if    ( attribute . equals ( JVMHandler . ATTR _ NODE )  )     {", "try    {", "return   controller . interfaces . InetAddressUtil . getLocalHost (  )  . getHostName (  )  ;", "}    catch    ( UnknownHostException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "return   super . getAttribute ( reader ,    name ,    attribute )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jsr77.managedobject.JVMHandler"}, {"methodBody": ["METHOD_START", "{", "return   objectName ;", "}", "METHOD_END"], "methodName": ["getObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.JVMHandler"}, {"methodBody": ["METHOD_START", "{", "Handler   handler    =    handlers . get ( name . getKeyProperty ( Handler . J 2 EE _ TYPE )  )  ;", "if    ( handler    =  =    null )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . noMBeanCalled ( name )  ;", "}", "return   handler . getAttribute ( new   ModelReader ( controller )  ,    name ,    attribute )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "return   getHandlersForName (  . IllAcceptAnythingNameMatcher . INSTANCE )  ;", "}", "if    (  !  ( isMyDomain ( name )  )  )     {", "return   Collections . emptySet (  )  ;", "}", "String   property    =    name . getKeyProperty ( Handler . J 2 EE _ TYPE )  ;", "if    ( property    !  =    null )     {", "if    ( property . contains (  \"  *  \"  )  )     {", "return   getHandlersForName ( new    . WildcardPatternNameMatcher ( Pattern . compile ( property . replace (  \"  *  \"  ,     \"  .  *  \"  )  )  )  )  ;", "}", "return   getHandlersForName ( new    . ExactNameMatcher ( property )  )  ;", "}", "if    ( name . isPropertyListPattern (  )  )     {", "return   getHandlersForName (  . IllAcceptAnythingNameMatcher . INSTANCE )  ;", "}", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["getHandlers"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "Set < Handler >    result    =    null ;", "for    ( Map . Entry < String ,    Handler >    handlerEntry    :    this . handlers . entrySet (  )  )     {", "if    ( matcher . matches ( handlerEntry . getKey (  )  )  )     {", "if    ( result    =  =    null )     {", "result    =    new   HashSet < Handler >  (  )  ;", "}", "result . add ( handlerEntry . getValue (  )  )  ;", "}", "}", "return   result    =  =    null    ?    Collections .  < Handler > emptySet (  )     :    result ;", "}", "METHOD_END"], "methodName": ["getHandlersForName"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "return   queryNames ( controller ,    null ,    null )  . size (  )  ;", "}", "METHOD_END"], "methodName": ["getMBeanCount"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "Handler   handler    =    handlers . get ( name . getKeyProperty ( Handler . J 2 EE _ TYPE )  )  ;", "if    ( handler    =  =    null )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . noMBeanCalled ( name )  ;", "}", "return   handler . getMBeanInfo ( new   ModelReader ( controller )  ,    name )  ;", "}", "METHOD_END"], "methodName": ["getMBeanInfo"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( objectName . isDomainPattern (  )  )  )     {", "return   objectName . getDomain (  )  . equals ( Constants . JMX _ DOMAIN )  ;", "}", "Pattern   p    =    Pattern . compile ( objectName . getDomain (  )  . replace (  \"  *  \"  ,     \"  .  *  \"  )  )  ;", "return   p . matcher ( Constants . JMX _ DOMAIN )  . matches (  )  ;", "}", "METHOD_END"], "methodName": ["isMyDomain"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "Handler   handler    =    handlers . get ( name . getKeyProperty ( Handler . J 2 EE _ TYPE )  )  ;", "if    ( handler    =  =    null )     {", "return   false ;", "}", "return   handler . queryObjectNames ( new   ModelReader ( controller )  ,    name ,    null )  . contains ( name )  ;", "}", "METHOD_END"], "methodName": ["isRegistered"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "Set < ObjectName >    result    =    new   HashSet < ObjectName >  (  )  ;", "for    ( Handler   handler    :    ges ( name )  )     {", "Set < ObjectName >    foundNames    =    handler . queryObjectNames ( new   ModelReader ( controller )  ,    name ,    query )  ;", "if    ( name    =  =    null )     {", "result . addAll ( foundNames )  ;", "} else    {", "for    ( ObjectName   found    :    foundNames )     {", "if    ( name . apply ( found )  )     {", "result . add ( found )  ;", "}", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["queryNames"], "fileName": "org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry"}, {"methodBody": ["METHOD_START", "{", "ModelNode   result    =    controller . execute ( operation ,    logging ,    COMMIT ,    null )  ;", "if    ( result . hasDefined ( FAILURE _ DESCRIPTION )  )     {", "throw   new   RuntimeException ( result . get ( FAILURE _ DESCRIPTION )  . toString (  )  )  ;", "}", "return   result . require ( RESULT )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.jsr77.managedobject.ModelReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deploymentModel )     =  =    null )     {", "ModelNode   operation    =    new   ModelNode (  )  ;", "operation . get ( OP )  . set ( READ _ RESOURCE _ OPERATION )  ;", "operation . get ( RECURSIVE )  . set ( true )  ;", "operation . get ( OP _ ADDR )  . set ( PathAddress . pathAddress ( PathElement . pathElement ( DEPLOYMENT )  )  . toModelNode (  )  )  ;", "deploymentModel    =    execute ( operation )  ;", "}", "return   deploymentModel ;", "}", "METHOD_END"], "methodName": ["getDeploymentModel"], "fileName": "org.jboss.as.jsr77.managedobject.ModelReader"}, {"methodBody": ["METHOD_START", "{", "this . deploymentModel    =    deploymentModel ;", "}", "METHOD_END"], "methodName": ["setDeploymentModel"], "fileName": "org.jboss.as.jsr77.managedobject.ModelReader"}, {"methodBody": ["METHOD_START", "{", "sb . append (  (  (  (  \"  ,  \"     +    key )     +     \"  =  \"  )     +    value )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new    ( name )  ;", "}    catch    ( Exception   e )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . couldNotCreate ( e ,    name )  ;", "}", "}", "METHOD_END"], "methodName": ["createObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   ObjectNameBuilder ( j 2 eeType ,    name )  ;", "}", "METHOD_END"], "methodName": ["createPlain"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   ObjectNameBuilder ( j 2 eeType ,    name )  . append ( J 2 EEServerHandler . J 2 EE _ TYPE ,    J 2 EEServerHandler . DEFAULT _ SERVER _ TYPE )  ;", "}", "METHOD_END"], "methodName": ["createServerChild"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new    ( toString (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   JSR 7  7 Logger . ROOT _ LOGGER . invalid ( e ,    toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toObjectName"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.jsr77.managedobject.ObjectNameBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   StandardResourceDescriptionResolver ( keyPrefix ,    JSR 7  7 ManagementExtension . RESOURCE _ NAME ,    JSR 7  7 ManagementExtension . class . getClassLoader (  )  ,    true ,    true )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.jsr77.subsystem.JSR77ManagementExtension"}, {"methodBody": ["METHOD_START", "{", "return    !  ( WildFlySecurityManager . isChecking (  )  )     ?    clazz . getClassLoader (  )     :    AccessController . doPrivileged ( new   GetClassLoaderAction ( clazz )  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "org.jboss.as.jsr77.subsystem.SecurityActions"}]