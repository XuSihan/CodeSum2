[{"methodBody": ["METHOD_START", "{", "return   ASHelper . getMSCService ( WSServices . CONFIG _ SERVICE ,    ServerConfig . class )  ;", "}", "METHOD_END"], "methodName": ["getServerConfig"], "fileName": "org.jboss.as.webservices.config.ServerConfigFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "wsDeploymentCount . decrementAndGet (  )  ;", "}", "METHOD_END"], "methodName": ["decrementWSDeploymentCount"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   getServerEnvironment (  )  . getHomeDir (  )  ;", "}", "METHOD_END"], "methodName": ["getHomeDir"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   injectedMBeanServer ;", "}", "METHOD_END"], "methodName": ["getMBeanServerInjector"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   getServerEnvironment (  )  . getServerDataDir (  )  ;", "}", "METHOD_END"], "methodName": ["getServerDataDir"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   injectedServerEnvironment . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getServerEnvironment"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   injectedServerEnvironment ;", "}", "METHOD_END"], "methodName": ["getServerEnvironmentInjector"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   getServerEnvironment (  )  . getServerTempDir (  )  ;", "}", "METHOD_END"], "methodName": ["getServerTempDir"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "UndertowService   us    =    getUndertowService (  )  ;", "if    ( us    !  =    null )     {", "for    ( Server   server    :    getUndertowService (  )  . getServers (  )  )     {", "if    (  (  ( info . getServerInstanceName (  )  )     !  =    null )     &  &     (  !  ( server . getName (  )  . equals ( info . getServerInstanceName (  )  )  )  )  )     {", "continue ;", "}", "for    ( Host   undertowHost    :    server . getHosts (  )  )     {", "if    ( undertowHost . getName (  )  . equals ( info . getHost (  )  )  )     {", "return   undertowHost ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getUndertowHost"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   injectedUndertowService . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getUndertowService"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   injectedUndertowService ;", "}", "METHOD_END"], "methodName": ["getUndertowServiceInjector"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "wsDeploymentCount . incrementAndGet (  )  ;", "}", "METHOD_END"], "methodName": ["incrementWSDeploymentCount"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return    ( wsDeploymentCount . get (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isModifiable"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   ServerConfigImpl (  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "clientConfigStore . setWrapperConfig ( config ,    reload )  ;", "}", "METHOD_END"], "methodName": ["setClientConfigWrapper"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setModifySOAPAddress ( flag ,     ( forceUpdate    ?    null    :    modifySOAPAddressUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setModifySOAPAddress"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setWebServiceHost ( host ,     ( forceUpdate    ?    null    :    webServiceHostUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setWebServiceHost"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setWebServicePathRewriteRule ( path ,     ( forceUpdate    ?    null    :    webServicePathRewriteRuleUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setWebServicePathRewriteRule"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setWebServicePort ( port ,     ( forceUpdate    ?    null    :    webServicePortUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setWebServicePort"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setWebServiceSecurePort ( port ,     ( forceUpdate    ?    null    :    webServiceSecurePortUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setWebServiceSecurePort"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "setWebServiceUriScheme ( scheme ,     ( forceUpdate    ?    null    :    webServiceUriSchemeUCH )  )  ;", "}", "METHOD_END"], "methodName": ["setWebServiceUriScheme"], "fileName": "org.jboss.as.webservices.config.ServerConfigImpl"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImpl   sc    =    ServerConfigImplTestCase . newServerConfigImpl (  )  ;", "sc . create (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "cb 1  . setAttribute ( sc )  ;", "sc . incrementWSDeploymentCount (  )  ;", "assertFalse ( sc . isModifiable (  )  )  ;", "try    {", "cb 1  . setAttribute ( sc )  ;", "fail (  )  ;", "}    catch    ( DisabledOperationException   e )     {", "assertTrue (  (  \" Expected   WFLYWS 0  0  6  4    message ,    but   got    \"     +     ( e . getMessage (  )  )  )  ,    e . getMessage (  )  . contains (  \" WFLYWS 0  0  6  4  \"  )  )  ;", "}", "sc . decrementWSDeploymentCount (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "try    {", "cb 1  . setAttribute ( sc )  ;", "fail (  )  ;", "}    catch    ( DisabledOperationException   e )     {", "assertTrue (  (  \" Expected   WFLYWS 0  0  6  3    message ,    but   got    \"     +     ( e . getMessage (  )  )  )  ,    e . getMessage (  )  . contains (  \" WFLYWS 0  0  6  3  \"  )  )  ;", "}", "for    ( ServerConfigImplTestCase . Callback   cb    :    otherCbs )     {", "cb . setAttribute ( sc )  ;", "}", "}", "METHOD_END"], "methodName": ["internalTestMultipleAttributeUpdate"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImpl   sc    =    ServerConfigImplTestCase . newServerConfigImpl (  )  ;", "sc . create (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "cb . setAttribute ( sc )  ;", "sc . incrementWSDeploymentCount (  )  ;", "assertFalse ( sc . isModifiable (  )  )  ;", "try    {", "cb . setAttribute ( sc )  ;", "fail (  )  ;", "}    catch    ( DisabledOperationException   e )     {", "assertTrue (  (  \" Expected   WFLYWS 0  0  6  4    message ,    but   got    \"     +     ( e . getMessage (  )  )  )  ,    e . getMessage (  )  . contains (  \" WFLYWS 0  0  6  4  \"  )  )  ;", "}", "sc . decrementWSDeploymentCount (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "try    {", "cb . setAttribute ( sc )  ;", "fail (  )  ;", "}    catch    ( DisabledOperationException   e )     {", "assertTrue (  (  \" Expected   WFLYWS 0  0  6  3    message ,    but   got    \"     +     ( e . getMessage (  )  )  )  ,    e . getMessage (  )  . contains (  \" WFLYWS 0  0  6  3  \"  )  )  ;", "}", "sc . create (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "cb . setAttribute ( sc )  ;", "}", "METHOD_END"], "methodName": ["internalTestSingleAttributeUpdate"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImpl   sc    =    ServerConfigImpl . newInstance (  )  ;", "sc . getMBeanServerInjector (  )  . setValue ( new   ImmediateValue < MBeanServer >  ( null )  )  ;", "return   sc ;", "}", "METHOD_END"], "methodName": ["newServerConfigImpl"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "Thread . currentThread (  )  . setContextClassLoader ( ServerConfigImplTestCase . origTCCL )  ;", "ServerConfigImplTestCase . origTCCL    =    null ;", "}", "METHOD_END"], "methodName": ["restoreStackConfigFactory"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    ServerConfigImplTestCase . class . getResource (  \" util /  \"  )  ;", "ServerConfigImplTestCase . origTCCL    =    Thread . currentThread (  )  . getContextClassLoader (  )  ;", "Thread . currentThread (  )  . setContextClassLoader ( new   URLClassLoader ( new   URL [  ]  {    url    }  )  )  ;", "}", "METHOD_END"], "methodName": ["setStackConfigFactory"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImpl   sc    =    ServerConfigImplTestCase . newServerConfigImpl (  )  ;", "sc . create (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "sc . incrementWSDeploymentCount (  )  ;", "assertFalse ( sc . isModifiable (  )  )  ;", "sc . decrementWSDeploymentCount (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "sc . incrementWSDeploymentCount (  )  ;", "sc . incrementWSDeploymentCount (  )  ;", "assertFalse ( sc . isModifiable (  )  )  ;", "sc . create (  )  ;", "assertTrue ( sc . isModifiable (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsModifiable"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImplTestCase . Callback   cbA    =    new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setModifySOAPAddress ( true )  ;", "}", "}  ;", "ServerConfigImplTestCase . Callback   cbB    =    new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServiceHost (  \" foo \"  )  ;", "}", "}  ;", "ServerConfigImplTestCase . Callback   cbC    =    new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServicePort (  9  7  6  )  ;", "}", "}  ;", "ServerConfigImplTestCase . Callback   cbD    =    new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServiceSecurePort (  5  4  3  5  )  ;", "}", "}  ;", "ServerConfigImplTestCase . Callback   cbE    =    new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServicePathRewriteRule (  \" MY / TEST / PATH \"  )  ;", "}", "}  ;", "internalTestMultipleAttributeUpdate ( cbA ,    new   ServerConfigImplTestCase . Callback [  ]  {    cbB ,    cbC ,    cbD ,    cbE    }  )  ;", "internalTestMultipleAttributeUpdate ( cbB ,    new   ServerConfigImplTestCase . Callback [  ]  {    cbA ,    cbC ,    cbD ,    cbE    }  )  ;", "internalTestMultipleAttributeUpdate ( cbC ,    new   ServerConfigImplTestCase . Callback [  ]  {    cbA ,    cbB ,    cbD ,    cbE    }  )  ;", "internalTestMultipleAttributeUpdate ( cbD ,    new   ServerConfigImplTestCase . Callback [  ]  {    cbA ,    cbB ,    cbC ,    cbE    }  )  ;", "internalTestMultipleAttributeUpdate ( cbE ,    new   ServerConfigImplTestCase . Callback [  ]  {    cbA ,    cbB ,    cbC ,    cbD    }  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleAttributesUpdate"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "internalTestSingleAttributeUpdate ( new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setModifySOAPAddress ( true )  ;", "}", "}  )  ;", "internalTestSingleAttributeUpdate ( new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServiceHost (  \" foo \"  )  ;", "}", "}  )  ;", "internalTestSingleAttributeUpdate ( new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServicePort (  9  7  6  )  ;", "}", "}  )  ;", "internalTestSingleAttributeUpdate ( new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServiceSecurePort (  5  4  3  5  )  ;", "}", "}  )  ;", "internalTestSingleAttributeUpdate ( new   ServerConfigImplTestCase . Callback (  )     {", "@ Override", "public   void   setAttribute ( ServerConfig   sc )    throws   Exception    {", "sc . setWebServicePathRewriteRule (  \" MY / TEST / PATH \"  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testSingleAttributeUpdate"], "fileName": "org.jboss.as.webservices.config.ServerConfigImplTestCase"}, {"methodBody": ["METHOD_START", "{", "return   host ;", "}", "METHOD_END"], "methodName": ["getHost"], "fileName": "org.jboss.as.webservices.config.ServerHostInfo"}, {"methodBody": ["METHOD_START", "{", "return   serverInstanceName ;", "}", "METHOD_END"], "methodName": ["getServerInstanceName"], "fileName": "org.jboss.as.webservices.config.ServerHostInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   WebServerInfoImpl ( ASHelper . getMSCService ( SERVICE _ NAME ,    CommonWebServer . class )  )  ;", "}", "METHOD_END"], "methodName": ["newWebServerInfo"], "fileName": "org.jboss.as.webservices.config.WebServerInfoFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   webServer . getPort ( protocol ,    secure )  ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.jboss.as.webservices.config.WebServerInfoImpl"}, {"methodBody": ["METHOD_START", "{", "final   EEModuleDescription   moduleDescription    =    ASHelper . getRequiredAttachment ( unit ,    Attachments . EE _ MODULE _ DESCRIPTION )  ;", "moduleDescription . removeComponent ( componentName ,    componentClassName )  ;", "ComponentDescription   componentDescription    =    new   WSComponentDescription ( componentName ,    componentClassName ,    moduleDescription ,    unit . getSName (  )  )  ;", "moduleDescription . addComponent ( componentDescription )  ;", "final   SName   endpointSName    =    EndpointS . getSName ( unit ,    dependsOnEndpointClassName )  ;", "componentDescription . addDependency ( endpointSName ,    REQUIRED )  ;", "return   componentDescription ;", "}", "METHOD_END"], "methodName": ["createComponentDescription"], "fileName": "org.jboss.as.webservices.deployers.AbstractIntegrationProcessorJAXWS"}, {"methodBody": ["METHOD_START", "{", "return    ( clazz . annotations (  )  . containsKey ( DotNames . STATELESS _ ANNOTATION )  )     |  |     ( clazz . annotations (  )  . containsKey ( DotNames . SINGLETON _ ANNOTATION )  )  ;", "}", "METHOD_END"], "methodName": ["isEjb3"], "fileName": "org.jboss.as.webservices.deployers.AbstractIntegrationProcessorJAXWS"}, {"methodBody": ["METHOD_START", "{", "final   ViewDescription   pojoView    =    new   ViewDescription ( componentDescription ,    componentClassName )  ;", "componentDescription . getViews (  )  . add ( pojoView )  ;", "pojoView . getConfigurators (  )  . add ( new   ViewConfigurator (  )     {", "@ Override", "public   void   configure ( DeploymentPhaseContext   context ,    ComponentConfiguration   componentConfiguration ,    ViewDescription   description ,    ViewConfiguration   configuration )    throws   DeploymentUnitingException    {", "configuration . addViewInterceptor ( AccessCheckingInterceptor . getFactory (  )  ,    CHECKING _ INTERCEPTOR )  ;", "configuration . addViewInterceptor ( WSComponentInstanceAssociationInterceptor . FACTORY ,    ASSOCIATING _ INTERCEPTOR )  ;", "}", "}  )  ;", "return   pojoView . getServiceName (  )  ;", "}", "METHOD_END"], "methodName": ["registerView"], "fileName": "org.jboss.as.webservices.deployers.AbstractIntegrationProcessorJAXWS"}, {"methodBody": ["METHOD_START", "{", "if    (  ( aspect )     =  =    null )     {", "try    {", "if    (  ( clazz )     =  =    null )     {", "clazz    =     (  ( Class <  ?    extends   Aspect >  )     ( ClassLoaderProvider . getDefaultProvider (  )  . getServerIntegrationClassLoader (  )  . loadClass ( aspectClass )  )  )  ;", "}", "aspect    =    clazz . newInstance (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   UnitProcessingException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["ensureAspectInitialized"], "fileName": "org.jboss.as.webservices.deployers.AspectDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isWebServiceDeployment"], "fileName": "org.jboss.as.webservices.deployers.AspectDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    null ;", "if    (  ( vf    !  =    null )     &  &     ( vf . exists (  )  )  )     {", "try    {", "url    =    vfFileURL (  )  ;", "}    catch    ( MalformedURLException   e )     {", "}", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["asFileURL"], "fileName": "org.jboss.as.webservices.deployers.ConfigResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Endpoint   ep    :    dep . getService (  )  . getEndpoints (  )  )     {", "ep . ses ( Collections .  < RecordProcessor > emptyList (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.webservices.deployers.EndpointRecordProcessorDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "EndpointServiceDeploymentAspect   clone    =    new   EndpointServiceDeploymentAspect (  )  ;", "clone . setLast ( isLast (  )  )  ;", "clone . setProvides ( getProvides (  )  )  ;", "clone . setRelativeOrder ( getRelativeOrder (  )  )  ;", "clone . setRequires ( getRequires (  )  )  ;", "clone . setStopServices ( stopServices )  ;", "return   clone ;", "}", "METHOD_END"], "methodName": ["clone"], "fileName": "org.jboss.as.webservices.deployers.EndpointServiceDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "this . stopServices    =    stopServices ;", "}", "METHOD_END"], "methodName": ["setStopServices"], "fileName": "org.jboss.as.webservices.deployers.EndpointServiceDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ResourceRoot   deploymentRoot    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "final   URL   jbURL    =    getJBossWebServicesDescriptorURL ( deploymentRoot )  ;", "if    ( jbURL    !  =    null )     {", "final   JBossWebservicesPropertyReplaceFactory   webservicesFactory    =    new   JBossWebservicesPropertyReplaceFactory ( jbURL ,    JBossDescriptorPropertyReplacement . propertyReplacer ( unit )  )  ;", "final   JBossWebservicesMetaData   jbossWebservicesMD    =    webservicesFactory . load ( jbURL )  ;", "unit . putAttachment ( WSAttachmentKeys . JBOSS _ WEBSERVICES _ METADATA _ KEY ,    jbossWebservicesMD )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.deployers.JBossWebservicesDescriptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "VirtualFile   jwsdd    =    deploymentRoot . getRoot (  )  . getChild (  \" WEB - INF / jboss - webservices . xml \"  )  ;", "if    (  !  ( jwsdd . exists (  )  )  )     {", "jwsdd    =    deploymentRoot . getRoot (  )  . getChild (  \" META - INF / jboss - webservices . xml \"  )  ;", "}", "try    {", "return   jwsdd . exists (  )     ?    jwsdd . toURL (  )     :    null ;", "}    catch    ( IOException   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotGetURLForDescriptor ( e ,    jwsdd . getPathName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getJBossWebServicesDescriptorURL"], "fileName": "org.jboss.as.webservices.deployers.JBossWebservicesDescriptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ModuleSpecification   moduleSpec    =    unit . getAttachment ( MODULE _ SPECIFICATION )  ;", "for    ( ModuleDependency   dep    :    moduleSpec . getUserDependencies (  )  )     {", "final   String   id    =    dep . getIdentifier (  )  . getName (  )  ;", "if    (  . cxfExportingModules . contains ( id )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasCxfModuleDependency"], "fileName": "org.jboss.as.webservices.deployers.WSClassVerificationProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WSClassVerificationProcessor . hasCxfModuleDependency ( unit )  )  )     {", "final   CompositeIndex   index    =    unit . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "final   DotName [  ]    dotNames    =    new   DotName [  ]  {    DotNames . WEB _ SERVICE _ ANNOTATION ,    DotNames . WEB _ SERVICE _ PROVIDER _ ANNOTATION    }  ;", "for    ( final   DotName   dotName    :    dotNames )     {", "for    ( AnnotationInstance   ai    :    index . getAnnotations ( dotName )  )     {", "AnnotationTarget   at    =    ai . target (  )  ;", "if    ( at   instanceof   ClassInfo )     {", "final   ClassInfo   clazz    =     (  ( ClassInfo )     ( ai . target (  )  )  )  ;", "for    ( DotName   dn    :    clazz . annotations (  )  . keySet (  )  )     {", "if    ( dn . toString (  )  . startsWith (  \" cxf \"  )  )     {", "WSLogger . ROOT _ LOGGER . missingModuleDependency ( dn . toString (  )  ,    clazz . name (  )  . toString (  )  ,     \" cxf \"  )  ;", "}", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["verifyApacheCXFModuleDependencyRequirement"], "fileName": "org.jboss.as.webservices.deployers.WSClassVerificationProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( WSLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Verifying   web      endpoint   class    % s \"  ,    pojoEndpoint . getClassName (  )  )  ;", "}", "try    {", "final   Class <  ?  >    endpointClass    =    moduleClassLoader . loadClass ( pojoEndpoint . getClassName (  )  )  ;", "final   WebService   webServiceAnnotation    =    endpointClass . getAnnotation ( WebService . class )  ;", "if    ( webServiceAnnotation    !  =    null )     {", "verifyJwsEndpoint ( endpointClass ,    webServiceAnnotation ,    moduleClassLoader ,    deploymentReflectionIndex )  ;", "}", "}    catch    ( ClassNotFoundException   e )     {", "throw   WSLogger . ROOT _ LOGGER . endpointClassNotFound ( pojoEndpoint . getClassName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyEndpoint"], "fileName": "org.jboss.as.webservices.deployers.WSClassVerificationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   endpointInterfaceClassName    =    webServiceAnnotation . endpointInterface (  )  ;", "try    {", "final   Class <  ?  >    endpointInterfaceClass    =     (  ( endpointInterfaceClassName . length (  )  )     >     0  )     ?    moduleClassLoader . loadClass ( endpointInterfaceClassName )     :    null ;", "final   JwsWebServiceEndpointVerifier   wsEndpointVerifier    =    new   JwsWebServiceEndpointVerifier ( endpointClass ,    endpointInterfaceClass ,    deploymentReflectionIndex )  ;", "wsEndpointVerifier . verify (  )  ;", "if    ( wsEndpointVerifier . failed (  )  )     {", "wsEndpointVerifier . logFailures (  )  ;", "throw   WSLogger . ROOT _ LOGGER . jwsWebServiceFailed ( endpointClass )  ;", "}", "}    catch    ( ClassNotFoundException   e )     {", "throw   WSLogger . ROOT _ LOGGER . declaredEndpointInterfaceClassNotFound ( endpointInterfaceClassName ,    endpointClass )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyJwsEndpoint"], "fileName": "org.jboss.as.webservices.deployers.WSClassVerificationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "final   ModuleSpecification   moduleSpec    =    unit . getAttachment ( MODULE _ SPECIFICATION )  ;", "if    ( addJBossWSDependencies )     {", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . JBOSSWS _ API ,    false ,    true ,    true ,    false )  )  ;", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . JBOSSWS _ SPI ,    false ,    true ,    true ,    false )  )  ;", "}", "for    ( ModuleIdentifier   api    :     . JAVAEE _ APIS )     {", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,    api ,    false ,    false ,    true ,    false )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.deployers.WSDependenciesProcessor"}, {"methodBody": ["METHOD_START", "{", "return   endpointConfigMap . get ( endpointClass )  ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.jboss.as.webservices.deployers.WSEndpointConfigMapping"}, {"methodBody": ["METHOD_START", "{", "return    ( endpointConfigMap . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.webservices.deployers.WSEndpointConfigMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  ( endpointClass    =  =    null )     |  |     ( config    =  =    null )  )     {", "throw   new   IllegalArgumentException (  )  ;", "}", "e . put ( endpointClass ,    config )  ;", "}", "METHOD_END"], "methodName": ["registerEndpointConfig"], "fileName": "org.jboss.as.webservices.deployers.WSEndpointConfigMapping"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    securityRoles    =    new   HashSet < String >  (  )  ;", "final   EjbJarMetaData   ejbJarMD    =    unit . getAttachment ( EJB _ JAR _ METADATA )  ;", "if    (  ( ejbJarMD    !  =    null )     &  &     (  ( ejbJarMD . getAssemblyDescriptor (  )  )     !  =    null )  )     {", "final   List < SecurityRoleMetaData >    securityRoleMetaDatas    =    ejbJarMD . getAssemblyDescriptor (  )  . getAny ( SecurityRoleMetaData . class )  ;", "if    ( securityRoleMetaDatas    !  =    null )     {", "for    ( final   SecurityRoleMetaData   securityRoleMetaData    :    securityRoleMetaDatas )     {", "securityRoles . add ( securityRoleMetaData . getRoleName (  )  )  ;", "}", "}", "final   SecurityRolesMetaData   securityRolesMD    =    ejbJarMD . getAssemblyDescriptor (  )  . getSecurityRoles (  )  ;", "if    (  ( securityRolesMD    !  =    null )     &  &     (  ( securityRolesMD . size (  )  )     >     0  )  )     {", "for    ( final   SecurityRoleMetaData   securityRoleMD    :    securityRolesMD )     {", "securityRoles . add ( securityRoleMD . getRoleName (  )  )  ;", "}", "}", "}", "if    ( webSClassInfo . annotations (  )  . containsKey ( DotNames . ROLES _ ALLOWED _ ANNOTATION )  )     {", "final   List < AnnotationInstance >    allowedRoles    =    webSClassInfo . annotations (  )  . get ( DotNames . ROLES _ ALLOWED _ ANNOTATION )  ;", "for    ( final   AnnotationInstance   allowedRole    :    allowedRoles )     {", "if    ( allowedRole . target (  )  . equals ( webSClassInfo )  )     {", "for    ( final   String   roleName    :    allowedRole . value (  )  . asStringArray (  )  )     {", "securityRoles . add ( roleName )  ;", "}", "}", "}", "}", "if    ( webSClassInfo . annotations (  )  . containsKey ( DotNames . DECLARE _ ROLES _ ANNOTATION )  )     {", "final   List < AnnotationInstance >    declareRoles    =    webSClassInfo . annotations (  )  . get ( DotNames . DECLARE _ ROLES _ ANNOTATION )  ;", "for    ( final   AnnotationInstance   declareRole    :    declareRoles )     {", "if    ( declareRole . target (  )  . equals ( webSClassInfo )  )     {", "for    ( final   String   roleName    :    declareRole . value (  )  . asStringArray (  )  )     {", "securityRoles . add ( roleName )  ;", "}", "}", "}", "}", "if    ( webSClassInfo . annotations (  )  . containsKey ( DotNames . PERMIT _ ALL _ ANNOTATION )  )     {", "for    ( AnnotationInstance   permitAll    :    webSClassInfo . annotations (  )  . get ( DotNames . PERMIT _ ALL _ ANNOTATION )  )     {", "if    ( permitAll . target (  )  . equals ( webSClassInfo )  )     {", "securityRoles . add (  \"  *  \"  )  ;", "break ;", "}", "}", "}", "if    ( securityRoles . isEmpty (  )  )     {", "securityRoles . add (  \"  *  \"  )  ;", "}", "return   Collections . unmodifiableSet ( securityRoles )  ;", "}", "METHOD_END"], "methodName": ["getDeclaredSecurityRoles"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_EJB"}, {"methodBody": ["METHOD_START", "{", "final   List < SessionBeanComponentDescription >    sessionBeans    =    new   LinkedList < SessionBeanComponentDescription >  (  )  ;", "for    ( final   ComponentDescription   componentDescription    :    componentDescriptions )     {", "if    ( componentDescription   instanceof   SessionBeanComponentDescription )     {", "sessionBeans . add (  (  ( SessionBeanComponentDescription )     ( componentDescription )  )  )  ;", "}", "}", "return   sessionBeans ;", "}", "METHOD_END"], "methodName": ["getSessionBeans"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_EJB"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( webServiceClassInfo . annotations (  )  . containsKey ( DotNames . WEB _ CONTEXT _ ANNOTATION )  )  )", "return   new    . WebContextAnnotationWrapper ( null )  ;", "final   AnnotationInstance   webContextAnnotation    =    webServiceClassInfo . annotations (  )  . get ( DotNames . WEB _ CONTEXT _ ANNOTATION )  . get (  0  )  ;", "return   new    . WebContextAnnotationWrapper ( webContextAnnotation )  ;", "}", "METHOD_END"], "methodName": ["getWebContextWrapper"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_EJB"}, {"methodBody": ["METHOD_START", "{", "final   EEModuleDescription   moduleDescription    =    ASHelper . getRequiredAttachment ( unit ,    Attachments . EE _ MODULE _ DESCRIPTION )  ;", "final   JAXWSDeployment   jaxwsDeployment    =    ASHelper . getJaxwsDeployment ( unit )  ;", "for    ( EEModuleClassDescription   description    :    moduleDescription . getClassDescriptions (  )  )     {", "@ SuppressWarnings (  \" unchecked \"  )", "ClassAnnotationInformation   classAnnotationInfo    =    description . getAnnotationInformation ( annotationType )  ;", "if    (  ( classAnnotationInfo    !  =    null )     &  &     (  !  ( classAnnotationInfo . getClassLevelAnnotations (  )  . isEmpty (  )  )  )  )     {", "Object   obj    =    classAnnotationInfo . getClassLevelAnnotations (  )  . get (  0  )  ;", "AnnotationTarget   target    =    null ;", "if    ( obj   instanceof   WebServiceAnnotationInfo )     {", "target    =     (  ( WebServiceAnnotationInfo )     ( obj )  )  . getTarget (  )  ;", "} else", "if    ( obj   instanceof   WebServiceProviderAnnotationInfo )     {", "target    =     (  ( WebServiceProviderAnnotationInfo )     ( obj )  )  . getTarget (  )  ;", "} else    {", "return ;", "}", "final   ClassInfo   webServiceClassInfo    =     (  ( ClassInfo )     ( target )  )  ;", "final   String   webServiceClassName    =    webServiceClassInfo . name (  )  . toString (  )  ;", "final   List < ComponentDescription >    componentDescriptions    =    moduleDescription . getComponentsByClassName ( webServiceClassName )  ;", "final   List < SessionBeanComponentDescription >    sessionBeans    =     . getSessionBeans ( componentDescriptions )  ;", "final   Set < String >    securityRoles    =     . getDeclaredSecurityRoles ( unit ,    webServiceClassInfo )  ;", "final    . WebContextAnnotationWrapper   webCtx    =     . getWebContextWrapper ( webServiceClassInfo )  ;", "final   String   authMethod    =    webCtx . getAuthMethod (  )  ;", "final   boolean   isSecureWsdlAccess    =    webCtx . isSecureWsdlAccess (  )  ;", "final   String   transportGuarantee    =    webCtx . getTransportGuarantee (  )  ;", "final   String   realmName    =    webCtx . getRealmName (  )  ;", "for    ( final   SessionBeanComponentDescription   sessionBean    :    sessionBeans )     {", "if    (  ( sessionBean . isStateless (  )  )     |  |     ( sessionBean . isSingleton (  )  )  )     {", "final   EJBViewDescription   ejbViewDescription    =    sessionBean . addWebserviceEndpointView (  )  ;", "final   ServiceName   ejbViewName    =    ejbViewDescription . getServiceName (  )  ;", "jaxwsDeployment . addEndpoint ( new   EJBEndpoint ( sessionBean ,    ejbViewName ,    securityRoles ,    authMethod ,    realmName ,    isSecureWsdlAccess ,    transportGuarantee )  )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["processAnnotation"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_EJB"}, {"methodBody": ["METHOD_START", "{", "Set < String >    handl =    resolver . getAllHandlconfig )  ;", "if    ( mapping    !  =    null )     {", "Set < String >    hch    =    mapping . getHandlendpointClassName )  ;", "if    ( hch    !  =    null )     {", "handladdAll ( hch )  ;", "}", "}", "return   handl", "}", "METHOD_END"], "methodName": ["getHandlers"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_HANDLER"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   ejbContextServiceName    =    ejbEndpoint . getContextServiceName (  )  ;", "final   DeploymentDescriptorEnvironment   ejbEnv    =    ejbEndpoint . getDeploymentDescriptorEnvironment (  )  ;", "jaxwsHandlerDescription . setContextServiceName ( ejbContextServiceName )  ;", "jaxwsHandlerDescription . setDeploymentDescriptorEnvironment ( ejbEnv )  ;", "jaxwsHandlerDescription . addDependency ( ejbContextServiceName ,    REQUIRED )  ;", "}", "METHOD_END"], "methodName": ["propagateNamingContext"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_HANDLER"}, {"methodBody": ["METHOD_START", "{", "WSEndpointConfigMapping   mapping    =    unit . getAttachment ( WSAttachmentKeys . WS _ ENDPOINT _ CONFIG _ MAPPING _ KEY )  ;", "if    ( mapping    =  =    null )     {", "mapping    =    new   WSEndpointConfigMapping (  )  ;", "unit . putAttachment ( WSAttachmentKeys . WS _ ENDPOINT _ CONFIG _ MAPPING _ KEY ,    mapping )  ;", "}", "mapping . registerEndpointConfig ( endpointClassName ,    config )  ;", "}", "METHOD_END"], "methodName": ["registerConfigMapping"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_HANDLER"}, {"methodBody": ["METHOD_START", "{", "final   AttachmentList < ResourceRoot >    resourceRoots    =    new   AttachmentList < ResourceRoot >  ( ResourceRoot . class )  ;", "final   ResourceRoot   root    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "resourceRootdd ( root )  ;", "final   AttachmentList < ResourceRoot >    otherResourceRoots    =    unit . getAttachment ( RESOURCE _ ROOTS )  ;", "if    ( otherResourceRoots    !  =    null )     {", "resourceRootddAll ( otherResourceRoots )  ;", "}", "for    ( final   ResourceRoot   resourceRoot    :    resourceRoots )     {", "VirtualFile   file    =    resourceRoot . getRoot (  )  . getChild ( wsdlPath )  ;", "if    ( file . exists (  )  )", "return   resourceRoot ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getWsdlResourceRoot"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_JMS"}, {"methodBody": ["METHOD_START", "{", "ClassInfo   classInfo    =    null ;", "ClassAnnotationInformation < WebService ,    WebServiceAnnotationInfo >    annotationInfo    =    classDescription . getAnnotationInformation ( WebService . class )  ;", "if    ( annotationInfo    !  =    null )     {", "classInfo    =     (  ( ClassInfo )     ( annotationInfo . getClassLevelAnnotations (  )  . get (  0  )  . getTarget (  )  )  )  ;", "} else    {", "ClassAnnotationInformation < WebServiceProvider ,    WebServiceProviderAnnotationInfo >    providreInfo    =    classDescription . getAnnotationInformation ( WebServiceProvider . class )  ;", "classInfo    =     (  ( ClassInfo )     ( providreInfo . getClassLevelAnnotations (  )  . get (  0  )  . getTarget (  )  )  )  ;", "}", "if    (  ( AbstractIntegrationProcessorJAXWS . isEjb 3  ( classInfo )  )     |  |     (  . isJmsEndpoint ( unit ,    classInfo )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_POJO"}, {"methodBody": ["METHOD_START", "{", "final   JBossWebMetaData   jbossWebMD    =    ASHelper . getJBossWebMetaData ( unit )  ;", "for    ( final   ServletMappingMetaData   servletMappingMD    :    jbossWebMD . getServletMappings (  )  )     {", "if    ( servletName . equals ( servletMappingMD . getServletName (  )  )  )     {", "return   servletMappingMD . getUrlPatterns (  )  . get (  0  )  ;", "}", "}", "throw   new   IllegalStateException (  )  ;", "}", "METHOD_END"], "methodName": ["getUrlPattern"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_POJO"}, {"methodBody": ["METHOD_START", "{", "final   String   endpointClassName    =    classInfo . name (  )  . toString (  )  ;", "final   JMSEndpointsMetaData   jmsEndpointsMD    =    ASHelper . getRequiredAttachment ( unit ,    WSAttachmentKeys . JMS _ ENDPOINT _ METADATA _ KEY )  ;", "for    ( final   JMSEndpointMetaData   endpoint    :    jmsEndpointsMD . getEndpointsMetaData (  )  )     {", "if    ( endpointClassName . equals ( endpoint . getImplementor (  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isJmsEndpoint"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_POJO"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( DeploymentTypeMarker . isType ( WAR ,    unit )  )  )     {", "return ;", "}", "final   Map < String ,    EEModuleClassDescription >    classDescriptionMap    =    new   HashMap < String ,    EEModuleClassDescription >  (  )  ;", "final   CompositeIndex   index    =    unit . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "for    ( EEModuleClassDescription   classDescritpion    :    moduleDescription . getClassDescriptions (  )  )     {", "if    (  ( ASHelper . isJaxwsEndpoint ( classDescritpion ,    index )  )     &  &     (  !  ( exclude ( unit ,    classDescritpion )  )  )  )     {", "classDescriptionMap . put ( classDescritpion . getClassName (  )  ,    classDescritpion )  ;", "}", "}", "final   JBossWebMetaData   jbossWebMD    =    ASHelper . getJBossWebMetaData ( unit )  ;", "final   JAXWSDeployment   jaxwsDeployment    =    ASHelper . getJaxwsDeployment ( unit )  ;", "if    ( jbossWebMD    !  =    null )     {", "final   Set < String >    matchedEps    =    new   HashSet < String >  (  )  ;", "for    ( final   ServletMetaData   servletMD    :    WebMetaDataHelper . getServlets ( jbossWebMD )  )     {", "final   String   endpointClassName    =    ASHelper . getEndpointClassName ( servletMD )  ;", "final   String   endpointName    =    ASHelper . getEndpointName ( servletMD )  ;", "if    (  ( classDescriptionMap . containsKey ( endpointClassName )  )     |  |     ( matchedEps . contains ( endpointClassName )  )  )     {", "final   ComponentDescription   pojoComponent    =    AbstractIntegrationProcessorJAXWS . createComponentDescription ( unit ,    endpointName ,    endpointClassName ,    endpointName )  ;", "final   ServiceName   pojoViewName    =    AbstractIntegrationProcessorJAXWS . registerView ( pojoComponent ,    endpointClassName )  ;", "final   String   urlPattern    =     . getUrlPattern ( endpointName ,    unit )  ;", "jaxwsDeployment . addEndpoint ( new   POJOEndpoint ( endpointName ,    endpointClassName ,    pojoViewName ,    urlPattern )  )  ;", "classDescriptionMap . remove ( endpointClassName )  ;", "matchedEps . add ( endpointClassName )  ;", "} else    {", "if    (  (  ( unit . getParent (  )  )     !  =    null )     &  &     ( DeploymentTypeMarker . isType ( EAR ,    unit . getParent (  )  )  )  )     {", "final   EEModuleDescription   eeModuleDescription    =    unit . getParent (  )  . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "final   CompositeIndex   parentIndex    =    unit . getParent (  )  . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "for    ( EEModuleClassDescription   classDescription    :    eeModuleDescription . getClassDescriptions (  )  )     {", "if    (  ( classDescription . getClassName (  )  . equals ( endpointClassName )  )     &  &     ( ASHelper . isJaxwsEndpoint ( classDescription ,    parentIndex )  )  )     {", "final   ComponentDescription   pojoComponent    =    AbstractIntegrationProcessorJAXWS . createComponentDescription ( unit ,    endpointName ,    endpointClassName ,    endpointName )  ;", "final   ServiceName   pojoViewName    =    AbstractIntegrationProcessorJAXWS . registerView ( pojoComponent ,    endpointClassName )  ;", "final   String   urlPattern    =     . getUrlPattern ( endpointName ,    unit )  ;", "jaxwsDeployment . addEndpoint ( new   POJOEndpoint ( endpointName ,    endpointClassName ,    pojoViewName ,    urlPattern )  )  ;", "}", "}", "}", "}", "}", "}", "for    ( EEModuleClassDescription   classDescription    :    classDescriptionMap . values (  )  )     {", "ClassInfo   classInfo    =    null ;", "String   serviceName    =    null ;", "String   urlPattern    =    null ;", "EJBEndpoint   ejbEndpoint    =    ASHelper . getWebserviceMetadataEJBEndpoint ( jaxwsDeployment ,    classDescription . getClassName (  )  )  ;", "if    ( ejbEndpoint    !  =    null )     {", "urlPattern    =    UrlPatternUtils . getUrlPatternByPortComponentURI ( ASHelper . getJBossWebserviceMetaDataPortComponent ( unit ,    ejbEndpoint . getName (  )  )  )  ;", "}", "if    ( urlPattern    =  =    null )     {", "final   ClassAnnotationInformation < WebContext ,    WebContextAnnotationInfo >    annotationWebContext    =    classDescription . getAnnotationInformation ( WebContext . class )  ;", "if    ( annotationWebContext    !  =    null )     {", "WebContextAnnotationInfo   wsInfo    =    annotationWebContext . getClassLevelAnnotations (  )  . get (  0  )  ;", "if    (  ( wsInfo    !  =    null )     &  &     (  ( wsInfo . getUrlPattern (  )  . length (  )  )     >     0  )  )     {", "urlPattern    =    wsInfo . getUrlPattern (  )  ;", "}", "}", "}", "if    ( urlPattern    =  =    null )     {", "final   ClassAnnotationInformation < WebService ,    WebServiceAnnotationInfo >    annotationInfo    =    classDescription . getAnnotationInformation ( WebService . class )  ;", "if    ( annotationInfo    !  =    null )     {", "WebServiceAnnotationInfo   wsInfo    =    annotationInfo . getClassLevelAnnotations (  )  . get (  0  )  ;", "serviceName    =    wsInfo . getServiceName (  )  ;", "classInfo    =     (  ( ClassInfo )     ( wsInfo . getTarget (  )  )  )  ;", "urlPattern    =    UrlPatternUtils . getUrlPattern ( classInfo . name (  )  . local (  )  ,    serviceName )  ;", "if    ( jaxwsDeployment . contains ( urlPattern )  )     {", "urlPattern    =    UrlPatternUtils . getUrlPattern ( classInfo . name (  )  . local (  )  ,    serviceName ,    wsInfo . getName (  )  )  ;", "}", "}", "final   ClassAnnotationInformation < WebServiceProvider ,    WebServiceProviderAnnotationInfo >    annotationProviderInfo    =    classDescription . getAnnotationInformation ( WebServiceProvider . class )  ;", "if    ( annotationProviderInfo    !  =    null )     {", "WebServiceProviderAnnotationInfo   wsInfo    =    annotationProviderInfo . getClassLevelAnnotations (  )  . get (  0  )  ;", "serviceName    =    wsInfo . getServiceName (  )  ;", "classInfo    =     (  ( ClassInfo )     ( wsInfo . getTarget (  )  )  )  ;", "}", "}", "if    ( classInfo    !  =    null )     {", "final   String   endpointClassName    =    classDescription . getClassName (  )  ;", "final   ComponentDescription   pojoComponent    =    AbstractIntegrationProcessorJAXWS . createComponentDescription ( unit ,    endpointClassName ,    endpointClassName ,    endpointClassName )  ;", "final   ServiceName   pojoViewName    =    AbstractIntegrationProcessorJAXWS . registerView ( pojoComponent ,    endpointClassName )  ;", "if    ( urlPattern    =  =    null )     {", "urlPattern    =    UrlPatternUtils . getUrlPattern ( classInfo . name (  )  . local (  )  ,    serviceName )  ;", "}", "jaxwsDeployment . addEndpoint ( new   POJOEndpoint ( endpointClassName ,    pojoViewName ,    UrlPatternUtils . getUrlPattern ( urlPattern )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processAnnotation"], "fileName": "org.jboss.as.webservices.deployers.WSIntegrationProcessorJAXWS_POJO"}, {"methodBody": ["METHOD_START", "{", "final   DotName [  ]    dotNames    =    new   DotName [  ]  {    DotNames . WEB _ SERVICE _ ANNOTATION ,    DotNames . WEB _ SERVICE _ PROVIDER _ ANNOTATION    }  ;", "for    ( final   DotName   dotName    :    dotNames )     {", "final   List < AnnotationInstance >    wsAnnotations    =    index . getAnnotations ( dotName )  ;", "if    (  !  ( wsAnnotations . isEmpty (  )  )  )     {", "for    ( final   AnnotationInstance   wsAnnotation    :    wsAnnotations )     {", "final   AnnotationTarget   target    =    wsAnnotation . target (  )  ;", "if    ( target   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( target )  )  ;", "if    ( ASHelper . isJaxwsEndpoint ( classInfo ,    index )  )     {", "return   true ;", "}", "}", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasWSEndpoints"], "fileName": "org.jboss.as.webservices.deployers.WSLibraryFilterProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isWebServiceDeployment"], "fileName": "org.jboss.as.webservices.deployers.WSModelDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "phaseContext . addDependency ( WSServices . CONFIG _ SERVICE ,    WSAttachmentKeys . SERVER _ CONFIG _ KEY )  ;", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.deployers.WSServiceDependenciesProcessor"}, {"methodBody": ["METHOD_START", "{", "return   authMethod ;", "}", "METHOD_END"], "methodName": ["getAuthMethod"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   contextRoot ;", "}", "METHOD_END"], "methodName": ["getContextRoot"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   transportGuarantee ;", "}", "METHOD_END"], "methodName": ["getTransportGuarantee"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   urlPattern ;", "}", "METHOD_END"], "methodName": ["getUrlPattern"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   virtualHost ;", "}", "METHOD_END"], "methodName": ["getVirtualHost"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   secureWSDLAccess ;", "}", "METHOD_END"], "methodName": ["isSecureWSDLAccess"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "AnnotationValue   value    =    annotation . value ( property )  ;", "return   value    =  =    null    ?    false    :    Boolean . getBoolean ( value . asString (  )  )  ;", "}", "METHOD_END"], "methodName": ["asBoolean"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInformationFactory"}, {"methodBody": ["METHOD_START", "{", "AnnotationValue   value    =    annotation . value ( property )  ;", "return   value    =  =    null    ?     \"  \"     :    value . asString (  )  ;", "}", "METHOD_END"], "methodName": ["asString"], "fileName": "org.jboss.as.webservices.deployers.WebContextAnnotationInformationFactory"}, {"methodBody": ["METHOD_START", "{", "return   endpointInterface ;", "}", "METHOD_END"], "methodName": ["getEndpointInterface"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   portName ;", "}", "METHOD_END"], "methodName": ["getPortName"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   serviceName ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   targetNamespace ;", "}", "METHOD_END"], "methodName": ["getTargetNamespace"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   wsdlLocation ;", "}", "METHOD_END"], "methodName": ["getWsdlLocation"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "AnnotationValue   value    =    annotation . value ( property )  ;", "return   value    =  =    null    ?     \"  \"     :    value . asString (  )  ;", "}", "METHOD_END"], "methodName": ["asString"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationInformationFactory"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   EEModuleDescription   eeModuleDescription    =    deploymentUnit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "final   CompositeIndex   index    =    deploymentUnit . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "if    (  ( index    =  =    null )     |  |     ( eeModuleDescription    =  =    null )  )     {", "return ;", "}", "for    ( final   ClassAnnotationInformationFactory   factory    :    factories )     {", "final   Map < String ,    ClassAnnotationInformation <  ?  ,     ?  >  >    data    =    factory . creatInformation ( index ,    PropertyReplacers . noop (  )  )  ;", "for    ( Map . Entry < String ,    ClassAnnotationInformation <  ?  ,     ?  >  >    entry    :    data . entrySet (  )  )     {", "EEModuleClassDescription   clazz    =    eeModuleDescription . addOrGetLocalClassDescription ( entry . getKey (  )  )  ;", "clazz . addAnnotationInformation ( entry . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.deployers.WebServiceAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   portName ;", "}", "METHOD_END"], "methodName": ["getPortName"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   serviceName ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   targetNamespace ;", "}", "METHOD_END"], "methodName": ["getTargetNamespace"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "return   wsdlLocation ;", "}", "METHOD_END"], "methodName": ["getWsdlLocation"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInfo"}, {"methodBody": ["METHOD_START", "{", "AnnotationValue   value    =    annotation . value ( property )  ;", "return   value    =  =    null    ?     \"  \"     :    value . asString (  )  ;", "}", "METHOD_END"], "methodName": ["asString"], "fileName": "org.jboss.as.webservices.deployers.WebServiceProviderAnnotationInformationFactory"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ResourceRoot   deploymentRoot    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "final   URL   wURL    =    getWebServicesDescriptorURL ( deploymentRoot )  ;", "if    ( wURL    !  =    null )     {", "final   WebservicesPropertyReplaceFactory   webservicesFactory    =    new   WebservicesPropertyReplaceFactory ( wURL ,    JBossDescriptorPropertyReplacement . propertyReplacer ( unit )  )  ;", "final   WebservicesMetaData   webservicesMD    =    webservicesFactory . load ( wURL )  ;", "unit . putAttachment ( WSAttachmentKeys . WEBSERVICES _ METADATA _ KEY ,    webservicesMD )  ;", "if    ( hasJaxRpcMapping ( webservicesMD )  )     {", "throw   WSLogger . ROOT _ LOGGER . jaxRpcNotSupported (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.deployers.WebservicesDescriptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "VirtualFile   wsdd    =    deploymentRoot . getRoot (  )  . getChild (  \" WEB - INF / webservices . xml \"  )  ;", "if    (  !  ( wsdd . exists (  )  )  )     {", "wsdd    =    deploymentRoot . getRoot (  )  . getChild (  \" META - INF / webservices . xml \"  )  ;", "}", "try    {", "return   wsdd . exists (  )     ?    wsdd . toURL (  )     :    null ;", "}    catch    ( IOException   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotGetURLForDescriptor ( e ,    wsdd . getPathName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getWebServicesDescriptorURL"], "fileName": "org.jboss.as.webservices.deployers.WebservicesDescriptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( WebserviceDescriptionMetaData   wsdmd    :    webservicesMD . getWebserviceDescriptions (  )  )     {", "if    (  ( wsdmd . getJaxrpcMappingFile (  )  )     !  =    null )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasJaxRpcMapping"], "fileName": "org.jboss.as.webservices.deployers.WebservicesDescriptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   new   unified   WS   deployment   model   for    % s \"  ,    unit )  ;", "final   ResourceRoot   deploymentRoot    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "final   VirtualFile   root    =     ( deploymentRoot    !  =    null )     ?    deploymentRoot . getRoot (  )     :    null ;", "final   ClassLoader   classLoader ;", "final   Module   module    =    unit . getAttachment ( MODULE )  ;", "if    ( module    =  =    null )     {", "classLoader    =    unit . getAttachment ( WSAttachmentKeys . CLASSLOADER _ KEY )  ;", "if    ( classLoader    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . classLoaderResolutionFailed ( unit )  ;", "}", "} else    {", "classLoader    =    module . getClassLoader (  )  ;", "}", "ArchiveDeployment   parentDep    =    null ;", "if    (  ( unit . getParent (  )  )     !  =    null )     {", "final   Module   parentModule    =    unit . getParent (  )  . getAttachment ( MODULE )  ;", "if    ( parentModule    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . classLoaderResolutionFailed ( deploymentRoot )  ;", "}", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   new   unified   WS   deployment   model   for    % s \"  ,    unit . getParent (  )  )  ;", "parentDep    =    this . newDeployment ( null ,    unit . getParent (  )  . getName (  )  ,    parentModule . getClassLoader (  )  ,    null )  ;", "}", "final   UnifiedVirtualFile   uvf    =     ( root    !  =    null )     ?    new   VirtualFileAdaptor ( root )     :    new   ResourceLoaderAdapter ( classLoader )  ;", "final   ArchiveDeployment   dep    =    this . newDeployment ( parentDep ,    unit . getName (  )  ,    classLoader ,    uvf )  ;", "dep . addAttachment ( AnnotationsInfo . class ,    new   JandexAnnotationsInfo ( unit )  )  ;", "return   dep ;", "}", "METHOD_END"], "methodName": ["newDeployment"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( parent    !  =    null )     {", "return    (  ( ArchiveDeployment )     ( this . dFactory . newDeployment ( parent ,    name ,    loader ,    rootFile )  )  )  ;", "} else    {", "return    (  ( ArchiveDeployment )     ( this . dFactory . newDeployment ( name ,    loader ,    rootFile )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["newDeployment"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "final   ArchiveDeployment   dep ;", "if    ( unit . hasAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  )     {", "dep    =     (  ( ArchiveDeployment )     ( unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  )  )  ;", "} else    {", "dep    =    newDeployment ( unit )  ;", "propagateAttachments ( unit ,    dep )  ;", "}", "this . build ( dep ,    unit )  ;", "}", "METHOD_END"], "methodName": ["newDeploymentModel"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( endpointName    =  =    null )", "throw   logging . WSLogger . ROOT _ LOGGER . nullEndpointName (  )  ;", "if    ( endpointClass    =  =    null )", "throw   logging . WSLogger . ROOT _ LOGGER . nullEndpointClass (  )  ;", "final   Endpoint   endpoint    =    this . deploymentModelFactory . newHttpEndpoint ( endpointClass )  ;", "endpoint . setShortName ( endpointName )  ;", "endpoint . setType ( endpointType )  ;", "dep . getService (  )  . addEndpoint ( endpoint )  ;", "return   endpoint ;", "}", "METHOD_END"], "methodName": ["newHttpEndpoint"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( endpointName    =  =    null )", "throw   logging . WSLogger . ROOT _ LOGGER . nullEndpointName (  )  ;", "if    ( endpointClass    =  =    null )", "throw   logging . WSLogger . ROOT _ LOGGER . nullEndpointClass (  )  ;", "final   Endpoint   endpoint    =    deploymentModelFactory . newJMSEndpoint ( endpointClass )  ;", "endpoint . setAddress ( soapAddress )  ;", "endpoint . setShortName ( endpointName )  ;", "endpoint . setType ( endpointType )  ;", "dep . getService (  )  . addEndpoint ( endpoint )  ;", "return   endpoint ;", "}", "METHOD_END"], "methodName": ["newJMSEndpoint"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "dep . addAttachment ( DeploymentUnit . class ,    unit )  ;", "unit . putAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY ,    dep )  ;", "final   JBossWebMetaData   webMD    =    ASHelper . getJBossWebMetaData ( unit )  ;", "dep . addAttachment ( JBossWebMetaData . class ,    webMD )  ;", "final   WebservicesMetaData   MD    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . WEBSERVICES _ METADATA _ KEY )  ;", "dep . addAttachment ( WebservicesMetaData . class ,    MD )  ;", "JBossWebservicesMetaData   jbossWebservicesMD    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . JBOSS _ WEBSERVICES _ METADATA _ KEY )  ;", "if    (  ( unit . getParent (  )  )     !  =    null )     {", "jbossWebservicesMD    =    JBossWebservicesMetaData . merge ( ASHelper . getOptionalAttachment ( unit . getParent (  )  ,    WSAttachmentKeys . JBOSS _ WEBSERVICES _ METADATA _ KEY )  ,    jbossWebservicesMD )  ;", "}", "dep . addAttachment ( JBossWebservicesMetaData . class ,    jbossWebservicesMD )  ;", "final   JAXWSDeployment   jaxwsDeployment    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . JAXWS _ ENDPOINTS _ KEY )  ;", "dep . addAttachment ( JAXWSDeployment . class ,    jaxwsDeployment )  ;", "final   EjbJarMetaData   ejbJarMD    =    ASHelper . getOptionalAttachment ( unit ,    EJB _ JAR _ METADATA )  ;", "dep . addAttachment ( EjbJarMetaData . class ,    ejbJarMD )  ;", "final   RejectionRule   rr    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . REJECTION _ RULE _ KEY )  ;", "if    ( rr    !  =    null )     {", "dep . addAttachment ( RejectionRule . class ,    rr )  ;", "}", "}", "METHOD_END"], "methodName": ["propagateAttachments"], "fileName": "org.jboss.as.webservices.deployers.deployment.AbstractDeploymentModelBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "Enumeration < URL >    urls    =     . class . getClassLoader (  )  . getResources ( resourcePath )  ;", "if    (  ( urls    !  =    null )     &  &     ( urls . hasMoreElements (  )  )  )     {", "URL   url    =    urls . nextElement (  )  ;", "InputStream   is    =    null ;", "try    {", "is    =    url . openStream (  )  ;", "return   WSDeploymentAspectParser . parse ( is ,    cl )  ;", "}    finally    {", "if    ( is    !  =    null )     {", "try    {", "is . close (  )  ;", "}    catch    ( Exception   e )     {", "}", "}", "}", "} else    {", "WSLogger . ROOT _ LOGGER . cannotLoadDeploymentAspectsDefinitionFile ( resourcePath )  ;", "return   Collections . emptyList (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotLoadDeploymentAspectsDefinitionFile ( e ,    resourcePath )  ;", "}", "}", "METHOD_END"], "methodName": ["getDeploymentAspects"], "fileName": "org.jboss.as.webservices.deployers.deployment.DeploymentAspectsProvider"}, {"methodBody": ["METHOD_START", "{", "if    (  ( DeploymentAspectsProvider . aspects )     =  =    null )     {", "final   List < DeploymentAspect >    deploymentAspects    =    new   LinkedList < DeploymentAspect >  (  )  ;", "final   ClassLoaderProvider   provider    =    ClassLoaderProvider . getDefaultProvider (  )  ;", "final   ClassLoader   cl    =    provider . getServerIntegrationClassLoader (  )  ;", "deploymentAspects . addAll ( DeploymentAspectsProvider . getDeploymentAspects ( cl ,     \"  / META - INF / stack - agnostic - deployment - aspects . xml \"  )  )  ;", "deploymentAspects . addAll ( DeploymentAspectsProvider . getDeploymentAspects ( cl ,     \"  / META - INF / stack - specific - deployment - aspects . xml \"  )  )  ;", "DeploymentAspectsProvider . aspects    =    DeploymentAspectSorter . getInstance (  )  . sort ( deploymentAspects )  ;", "}", "return   DeploymentAspectsProvider . aspects ;", "}", "METHOD_END"], "methodName": ["getSortedDeploymentAspects"], "fileName": "org.jboss.as.webservices.deployers.deployment.DeploymentAspectsProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( WSDeploymentBuilder . isJaxwsPojoDeployment ( unit )  )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Detected   JAXWS   POJO   deployment \"  )  ;", "WSDeploymentBuilder . JAXWS _ JSE . newDeploymentModel ( unit )  ;", "}", "if    ( WSDeploymentBuilder . isJaxwsJmsDeployment ( unit )  )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Detected   JAXWS   JMS   deployment \"  )  ;", "WSDeploymentBuilder . JAXWS _ JMS . newDeploymentModel ( unit )  ;", "}", "if    ( WSDeploymentBuilder . isJaxwsEjbDeployment ( unit )  )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Detected   JAXWS   EJB   deployment \"  )  ;", "WSDeploymentBuilder . JAXWS _ EJB . newDeploymentModel ( unit )  ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.webservices.deployers.deployment.WSDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   WSDeploymentBuilder . SINGLETON ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.webservices.deployers.deployment.WSDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( ASHelper . getJaxwsEjbs ( unit )  . size (  )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["isJaxwsEjbDeployment"], "fileName": "org.jboss.as.webservices.deployers.deployment.WSDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "final   JMSEndpointsMetaData   jmsEndpointsMD    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . JMS _ ENDPOINT _ METADATA _ KEY )  ;", "if    ( jmsEndpointsMD    !  =    null )     {", "return    ( jmsEndpointsMD . getEndpointsMetaData (  )  . size (  )  )     >     0  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isJaxwsJmsDeployment"], "fileName": "org.jboss.as.webservices.deployers.deployment.WSDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( ASHelper . getJaxwsPojos ( unit )  . size (  )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["isJaxwsPojoDeployment"], "fileName": "org.jboss.as.webservices.deployers.deployment.WSDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.webservices.dmr.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.webservices.dmr.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.webservices.dmr.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.webservices.dmr.Element"}, {"methodBody": ["METHOD_START", "{", "return   node . hasDefined ( propertyName )     ?    node . get ( propertyName )  . asString (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAttributeValue"], "fileName": "org.jboss.as.webservices.dmr.HandlerChainAdd"}, {"methodBody": ["METHOD_START", "{", "synchronized ( list )     {", "if    ( value    !  =    null )     {", "list . add ( value )  ;", "}", "super . i ( value )  ;", "}", "}", "METHOD_END"], "methodName": ["inject"], "fileName": "org.jboss.as.webservices.dmr.ListInjector"}, {"methodBody": ["METHOD_START", "{", "synchronized ( list )     {", "try    {", "final   Value < T >    storedValue    =     . getStoredValue (  )  ;", "if    ( storedValue    !  =    null )", "list . remove ( storedValue . getValue (  )  )  ;", "}    finally    {", "super . uninject (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["uninject"], "fileName": "org.jboss.as.webservices.dmr.ListInjector"}, {"methodBody": ["METHOD_START", "{", "return   endpoint . getName (  )  . getKeyProperty ( SEPID _ PROPERTY _ CONTEXT )  ;", "}", "METHOD_END"], "methodName": ["getContext"], "fileName": "org.jboss.as.webservices.dmr.ModelDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   sb    =    new   StringBuilder (  )  ;", "sb . append ( getContext ( endpoint )  )  ;", "sb . append (  '  :  '  )  ;", "sb . append ( getName ( endpoint )  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.jboss.as.webservices.dmr.ModelDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "return   endpoint . getName (  )  . getKeyProperty ( SEPID _ PROPERTY _ ENDPOINT )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.dmr.ModelDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.webservices.dmr.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.webservices.dmr.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   WSServices . CLIENT _ CONFIG _ SERVICE . append ( configName )  ;", "}", "METHOD_END"], "methodName": ["getClientConfigServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "return   Constants . ENDPOINT _ CONFIG . equals ( configType )     ?    PackageUtils . getEndpointConfigServiceName ( configName )     :    PackageUtils . getClientConfigServiceName ( configName )  ;", "}", "METHOD_END"], "methodName": ["getConfigServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "return   WSServices . ENDPOINT _ CONFIG _ SERVICE . append ( configName )  ;", "}", "METHOD_END"], "methodName": ["getEndpointConfigServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "return   configServiceName . append ( handlerChainType )  . append ( handlerChainId )  ;", "}", "METHOD_END"], "methodName": ["getHandlerChainServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "return   handlerChainServiceName . append ( Constants . HANDLER )  . append ( handlerName )  ;", "}", "METHOD_END"], "methodName": ["getHandlerServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "return   configServiceName . append ( Constants . PROPERTY )  . append ( propertyName )  ;", "}", "METHOD_END"], "methodName": ["getPropertyServiceName"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "final   List < ServiceName >    childrenServiceNames    =    new   LinkedList < ServiceName >  (  )  ;", "final   Resource   resource    =    context . readResourceFromRoot ( address ,    false )  ;", "final   ServiceName   sn    =    baseServiceName . append ( childType )  ;", "for    ( String   name    :    resource . getChildrenNames ( childType )  )     {", "childrenServiceNames . add ( sn . append ( name )  )  ;", "}", "return   childrenServiceNames ;", "}", "METHOD_END"], "methodName": ["getServiceNameDependencies"], "fileName": "org.jboss.as.webservices.dmr.PackageUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WSDeploymentActivator . isModularEnvironment (  )  )  )     {", "return ;", "}", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ WS _ REF _ DESCRIPTOR ,    new   WSRefDDProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ WS _ REF _ ANNOTATION ,    new   WSRefAnnotationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ WS ,    new   WSDependenciesProcessor (  (  ! appclient )  )  )  ;", "if    (  ! appclient )     {", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ WEBSERVICES _ CONTEXT _ INJECTION ,    new   WebServicesContextJndiSetupProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ WEBSERVICES _ LIBRARY _ FILTER ,    new   WSLibraryFilterProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ WEBSERVICES _ XML ,    new   WebservicesDescriptorDeploymentProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JBOSS _ WEBSERVICES _ XML ,    new   JBossWebservicesDescriptorDeploymentProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ WEBSERVICES _ ANNOTATION ,    new   WebServiceAnnotationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JAXWS _ EJB _ INTEGRATION ,    new   WSIntegrationProcessorJAXWS _ EJB (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JAXWS _ HANDLER _ CHAIN _ ANNOTATION ,    new   WSHandlerChainAnnotationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ WS _ JMS _ INTEGRATION ,    new   WSIntegrationProcessorJAXWS _ JMS (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JAXWS _ ENDPOINT _ CREATE _ COMPONENT _ DESCRIPTIONS ,    new   WSIntegrationProcessorJAXWS _ POJO (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JAXWS _ HANDLER _ CREATE _ COMPONENT _ DESCRIPTIONS ,    new   WSIntegrationProcessorJAXWS _ HANDLER (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ WS _ SERVICES _ DEPS ,    new   WSServiceDependenciesProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ WS _ VERIFICATION ,    new   WSClassVerificationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ WS _ VERIFICATION ,    new   GracefulShutdownIntegrationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ WS _ UNIVERSAL _ META _ DATA _ MODEL ,    new   WSModelDeploymentProcessor (  )  )  ;", "WSDeploymentActivator . addDeploymentProcessors ( processorTarget ,    INSTALL ,    INSTALL _ WS _ DEPLOYMENT _ ASPECTS )  ;", "}", "}", "METHOD_END"], "methodName": ["activate"], "fileName": "org.jboss.as.webservices.dmr.WSDeploymentActivator"}, {"methodBody": ["METHOD_START", "{", "int   index    =     1  ;", "List < spect >    aspects    =    spectsProvider . getSortedspects (  )  ;", "for    ( final   spect   da    :    aspects )     {", "if    ( WSLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Installing   aspect    % s \"  ,    da . getClass (  )  . getName (  )  )  ;", "}", "processorTarget . addDeploymentProcessor ( WSExtension . SUBSYSTEM _ NAME ,    phase ,     ( priority    +     ( index +  +  )  )  ,    new   AspectDeploymentProcessor ( da )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addDeploymentProcessors"], "fileName": "org.jboss.as.webservices.dmr.WSDeploymentActivator"}, {"methodBody": ["METHOD_START", "{", "try    {", "ModuleClassLoaderProvider . getDefaultProvider (  )  . getServerIntegrationClassLoader (  )  ;", "return   true ;", "}    catch    ( Exception   e )     {", "WSLogger . ROOT _ LOGGER . couldNoeSubsystem ( e )  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["isModularEnvironment"], "fileName": "org.jboss.as.webservices.dmr.WSDeploymentActivator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentSContainer . getSContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.dmr.WSEndpointMetrics"}, {"methodBody": ["METHOD_START", "{", "if    ( context . isNormalServer (  )  )     {", "context . addStep ( new   OperationStepHandler (  )     {", "public   void   execute ( OperationContext   context ,    ModelNode   operation )    throws   OperationFailedException    {", "final   ServiceRegistry   registry    =    context . getServiceRegistry ( false )  ;", "if    ( registry    !  =    null )     {", "try    {", "context . getResult (  )  . set ( getEndpointMetricsFragment ( operation ,    registry )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   OperationFailedException (  (  (  (  . getFallbackMessage (  )  )     +     \"  :     \"  )     +     ( e . getMessage (  )  )  )  )  ;", "}", "} else    {", "context . getResult (  )  . set (  . getFallbackMessage (  )  )  ;", "}", "}", "}  ,    RUNTIME )  ;", "} else    {", "context . getResult (  )  . set (  . getFallbackMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.webservices.dmr.WSEndpointMetrics"}, {"methodBody": ["METHOD_START", "{", "final   PathAddress   address    =    PathAddress . pathAddress ( operation . require ( OP _ ADDR )  )  ;", "String   endpointId ;", "try    {", "endpointId    =    URLDecoder . decode ( address . getLastElement (  )  . getValue (  )  ,     \" UTF -  8  \"  )  ;", "}    catch    ( final   UnsupportedEncodingException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "final   String   metricName    =    operation . require ( NAME )  . asString (  )  ;", "final   String   webContext    =    endpointId . substring (  0  ,    endpointId . indexOf (  \"  :  \"  )  )  ;", "final   String   endpointName    =    endpointId . substring (  (  ( endpointId . indexOf (  \"  :  \"  )  )     +     1  )  )  ;", "ServiceName   endpointServiceName    =    WSServices . ENDPOINT _ SERVICE . append (  (  \" context =  \"     +    webContext )  )  . append ( endpointName )  ;", "ServiceController < Endpoint >    service    =     (  ( ServiceController < Endpoint >  )     (  . currentServiceContainer (  )  . getService ( endpointServiceName )  )  )  ;", "Endpoint   endpoint    =    service . getValue (  )  ;", "if    ( endpoint    =  =    null )     {", "throw   new   OperationFailedException ( WSLogger . ROOT _ LOGGER . noMetricsAvailable (  )  )  ;", "}", "final   ModelNode   result    =    new   ModelNode (  )  ;", "final   EndpointMetrics   endpointMetrics    =    endpoint . getEndpointMetrics (  )  ;", "if    (  . MIN _ PROCESSING _ TIME . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getMinProcessingTime (  )  )  ;", "} else", "if    (  . MAX _ PROCESSING _ TIME . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getMaxProcessingTime (  )  )  ;", "} else", "if    (  . AVERAGE _ PROCESSING _ TIME . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getAverageProcessingTime (  )  )  ;", "} else", "if    (  . TOTAL _ PROCESSING _ TIME . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getTotalProcessingTime (  )  )  ;", "} else", "if    (  . REQUEST _ COUNT . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getRequestCount (  )  )  ;", "} else", "if    (  . RESPONSE _ COUNT . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getResponseCount (  )  )  ;", "} else", "if    (  . FAULT _ COUNT . getName (  )  . equals ( metricName )  )     {", "result . set ( endpointMetrics . getFaultCount (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getEndpointMetricsFragment"], "fileName": "org.jboss.as.webservices.dmr.WSEndpointMetrics"}, {"methodBody": ["METHOD_START", "{", "return   WSLogger . ROOT _ LOGGER . noMetricsAvailable (  )  ;", "}", "METHOD_END"], "methodName": ["getFallbackMessage"], "fileName": "org.jboss.as.webservices.dmr.WSEndpointMetrics"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( WSExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    WSExtension . RESOURCE _ NAME ,    WSExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.webservices.dmr.WSExtension"}, {"methodBody": ["METHOD_START", "{", "if    ( resolvedValue . equals ( getAttributeDefinition ( attributeName )  . resolveValue ( context ,    currentValue )  )  )     {", "return   true ;", "}", "if    (  !  ( currentValue . isDefined (  )  )  )     {", "return   resolvedValue . equals ( getAttributeDefinition ( attributeName )  . getDefaultValue (  )  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSameValue"], "fileName": "org.jboss.as.webservices.dmr.WSServerConfigAttributeHandler"}, {"methodBody": ["METHOD_START", "{", "ServerConfigImpl   config    =     (  ( ServerConfigImpl )     ( context . getServiceRegistry ( false )  . getRequiredService ( WSServices . CONFIG _ SERVICE )  . getValue (  )  )  )  ;", "try    {", "if    ( Constants . MODIFY _ WSDL _ ADDRESS . equals ( attributeName )  )     {", "final   boolean   modifyWSDLAddress    =     ( value    !  =    null )     &  &     ( Boolean . parseBoolean ( value )  )  ;", "config . setModifySOAPAddress ( modifyWSDLAddress ,    isRevert )  ;", "} else", "if    ( Constants . WSDL _ HOST . equals ( attributeName )  )     {", "final   String   host    =     ( value    !  =    null )     ?    value    :    null ;", "try    {", "config . setWebServiceHost ( host ,    isRevert )  ;", "}    catch    ( final   UnknownHostException   e )     {", "throw   new   controller . OperationFailedException ( e . getMessage (  )  ,    e )  ;", "}", "} else", "if    ( Constants . WSDL _ PORT . equals ( attributeName )  )     {", "final   int   port    =     ( value    !  =    null )     ?    Integer . parseInt ( value )     :     -  1  ;", "config . setWebServicePort ( port ,    isRevert )  ;", "} else", "if    ( Constants . WSDL _ SECURE _ PORT . equals ( attributeName )  )     {", "final   int   securePort    =     ( value    !  =    null )     ?    Integer . parseInt ( value )     :     -  1  ;", "config . setWebServiceSecurePort ( securePort ,    isRevert )  ;", "} else", "if    ( Constants . WSDL _ PATH _ REWRITE _ RULE . equals ( attributeName )  )     {", "final   String   path    =     ( value    !  =    null )     ?    value    :    null ;", "config . setWebServicePathRewriteRule ( path ,    isRevert )  ;", "} else", "if    ( Constants . WSDL _ URI _ SCHEME . equals ( attributeName )  )     {", "if    (  (  ( value    =  =    null )     |  |     ( value . equals (  \" http \"  )  )  )     |  |     ( value . equals (  \" https \"  )  )  )     {", "config . setWebServiceUriScheme ( value ,    isRevert )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  ( attributeName    +     \"     =     \"  )     +    value )  )  ;", "}", "} else", "if    ( Constants . STATISTICS _ ENABLED . equals ( attributeName )  )     {", "final   boolean   enabled    =     ( value    !  =    null )     ?    Boolean . parseBoolean ( value )     :    false ;", "config . setStatisticsEnabled ( enabled )  ;", "} else    {", "throw   new   IllegalArgumentException ( attributeName )  ;", "}", "}    catch    ( DisabledOperationException   doe )     {", "if    (  ! isRevert )     {", "return   false ;", "} else    {", "throw   doe ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["updateServerConfig"], "fileName": "org.jboss.as.webservices.dmr.WSServerConfigAttributeHandler"}, {"methodBody": ["METHOD_START", "{", "throw   unexpectedElement ( reader )  ;", "}", "METHOD_END"], "methodName": ["handleUnknownElement"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "requireNoAttributes ( reader )  ;", "return   reader . getElementText (  )  . trim (  )  ;", "}", "METHOD_END"], "methodName": ["parseElementNoAttributes"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "String   handlerName    =    null ;", "final   ModelNode   operation    =    Util . createAddOperation (  )  ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "handlerName    =    value ;", "break ;", "case   CLASS    :", "Attributes . CLASS . parseAndSetParameter ( value ,    operation ,    r )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( r ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( r )  ;", "operation . get ( OP _ ADDR )  . set ( parentAddress . append ( Constants . HANDLER ,    handlerName )  . toModelNode (  )  )  ;", "operations . add ( operation )  ;", "}", "METHOD_END"], "methodName": ["parseHandler"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   operation    =    Util . createAddOperation (  )  ;", "String   handlerChainId    =    null ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "handlerChainId    =    value ;", "break ;", "case   PROTOCOL _ BINDINGS    :", "Attributes . PROTOCOL _ BINDINGS . parseAndSetParameter ( value ,    operation ,    r )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( r ,    i )  ;", "}", "}", "final   String   handlerChainType    =     ( isPreHandlerChain )     ?    Constants . PRE _ HANDLER _ CHAIN    :    Constants . POST _ HANDLER _ CHAIN ;", "PathAddress   address    =    parentAddress . append ( handlerChainType ,    handlerChainId )  ;", "operation . get ( OP _ ADDR )  . set ( address . toModelNode (  )  )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "final   List < ModelNode >    addHandlerOperations    =    new   LinkedList < ModelNode >  (  )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  ( element    !  =     ( Element . HANDLER )  )     &  &     (  !  ( encountered . add ( element )  )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   HANDLER    :", "{", "parseHandler ( r ,    addHandlerOperations ,    address )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "operationList . add ( operation )  ;", "operationList . addAll ( addHandlerOperations )  ;", "}", "METHOD_END"], "methodName": ["parseHandlerChain"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   operation    =    Util . createAddOperation ( null )  ;", "String   propertyName    =    null ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "propertyName    =    value ;", "break ;", "case   VALUE    :", "Attributes . VALUE . parseAndSetParameter ( value ,    operation ,    r )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( r ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( r )  ;", "operation . get ( OP _ ADDR )  . set ( parentAddress . append ( Constants . PROPERTY ,    propertyName )  . toModelNode (  )  )  ;", "return   operation ;", "}", "METHOD_END"], "methodName": ["parseProperty"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "requireNoAttributes ( reader )  ;", "}", "METHOD_END"], "methodName": ["readAttributes"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "final   List < ModelNode >    configs    =    new   ArrayList < ModelNode >  (  )  ;", "String   configName    =    null ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "configName    =    value ;", "break ;", "default    :", "throw   unexpectedAttribute ( r ,    i )  ;", "}", "}", "final   PathAddress   address    =    parentAddress . append (  ( client    ?    Constants . CLIENT _ CONFIG    :    Constants . ENDPOINT _ CONFIG )  ,    configName )  ;", "final   ModelNode   node    =    Util . createAddOperation ( address )  ;", "configs . add ( node )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  (  (  ( element    !  =     ( Element . PRE _ HANDLER _ CHAIN )  )     &  &     ( element    !  =     ( Element . POST _ HANDLER _ CHAIN )  )  )     &  &     ( element    !  =     ( Element . PROPERTY )  )  )     &  &     (  !  ( encountered . add ( element )  )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   PRE _ HANDLER _ CHAIN    :", "{", "parseHandlerChain ( r ,    configs ,    true ,    address )  ;", "break ;", "}", "case   POST _ HANDLER _ CHAIN    :", "{", "parseHandlerChain ( r ,    configs ,    false ,    address )  ;", "break ;", "}", "case   PROPERTY    :", "{", "final   ModelNode   operation    =    parseProperty ( r ,    address )  ;", "configs . add ( operation )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "return   configs ;", "}", "METHOD_END"], "methodName": ["readConfig"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystem11Reader"}, {"methodBody": ["METHOD_START", "{", "final   ServerConfigImpl   config    =    ServerConfigImpl . newInstance (  )  ;", "try    {", "ModelNode   wsdlHost    =    Attributes . WSDL _ HOST . resolveModelAttribute ( context ,    configuration )  ;", "config . setWebSHost (  ( wsdlHost . isDefined (  )     ?    wsdlHost . asString (  )     :    null )  )  ;", "}    catch    ( UnknownHostException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "if    (  ! appclient )     {", "config . setModifySOAPAddress ( Attributes . MODIFY _ WSDL _ ADDRESS . resolveModelAttribute ( context ,    configuration )  . asBoolean (  )  )  ;", "config . setStatisticsEnabled ( Attributes . STATISTICS _ ENABLED . resolveModelAttribute ( context ,    configuration )  . asBoolean (  )  )  ;", "}", "if    ( configuration . hasDefined ( Constants . WSDL _ PORT )  )     {", "config . setWebSPort ( Attributes . WSDL _ PORT . resolveModelAttribute ( context ,    configuration )  . asInt (  )  )  ;", "}", "if    ( configuration . hasDefined ( Constants . WSDL _ SECURE _ PORT )  )     {", "config . setWebSSecurePort ( Attributes . WSDL _ SECURE _ PORT . resolveModelAttribute ( context ,    configuration )  . asInt (  )  )  ;", "}", "if    ( configuration . hasDefined ( Constants . WSDL _ URI _ SCHEME )  )     {", "config . setWebSUriScheme ( Attributes . WSDL _ URI _ SCHEME . resolveModelAttribute ( context ,    configuration )  . asString (  )  )  ;", "}", "if    ( configuration . hasDefined ( Constants . WSDL _ PATH _ REWRITE _ RULE )  )     {", "config . setWebSPathRewriteRule ( Attributes . WSDL _ PATH _ REWRITE _ RULE . resolveModelAttribute ( context ,    configuration )  . asString (  )  )  ;", "}", "return   config ;", "}", "METHOD_END"], "methodName": ["createServerConfig"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   List < ServiceName >    serviceNames    =    new   ArrayList < ServiceName >  (  )  ;", "final   Resource   subsystemResource    =    context . readResourceFromRoot ( PathAddress . pathAddress ( WSExtension . SUBSYSTEM _ PATH )  ,    false )  ;", ". readConfigServiceNames ( serviceNames ,    subsystemResource ,    Constants . CLIENT _ CONFIG )  ;", ". readConfigServiceNames ( serviceNames ,    subsystemResource ,    Constants . ENDPOINT _ CONFIG )  ;", "if    (  ! appclient )     {", "serviceNames . add ( SERVICE _ NAME )  ;", "}", "return   serviceNames ;", "}", "METHOD_END"], "methodName": ["getServerConfigDependencies"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "Resource   root    =    context . readResourceFromRoot ( PathAddress . pathAddress ( EMPTY _ ADDRESS )  ,    false )  ;", "return   root . hasChild ( PathElement . pathElement ( SUBSYSTEM ,    SUBSYSTEM _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["isJMXSubsystemAvailable"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . activatingWebservicesExtension (  )  ;", "ModuleClassLoaderProvider . register (  )  ;", "final   boolean   appclient    =     ( context . getProcessType (  )  )     =  =     ( ProcessType . APPLICATION _ CLIENT )  ;", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "protected   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "WSDeploymentActivator . activate ( processorTarget ,    appclient )  ;", "}", "}  ,    RUNTIME )  ;", "ServiceTarget   serviceTarget    =    context . getServiceTarget (  )  ;", "final   boolean   jmxAvailable    =     . isJMXSubsystemAvailable ( context )  ;", "if    ( appclient    &  &     ( model . hasDefined ( Constants . WSDL _ HOST )  )  )     {", "ServerConfigImpl   serverConfig    =     . createServerConfig ( model ,    true ,    context )  ;", "ServerConfigService . install ( serviceTarget ,    serverConfig ,     . getServerConfigDependencies ( context ,    appclient )  ,    jmxAvailable ,    false )  ;", "}", "if    (  ! appclient )     {", "ServerConfigImpl   serverConfig    =     . createServerConfig ( model ,    false ,    context )  ;", "ServerConfigService . install ( serviceTarget ,    serverConfig ,     . getServerConfigDependencies ( context ,    appclient )  ,    jmxAvailable ,    true )  ;", "}", "XTSClientIntegrationService . install ( serviceTarget )  ;", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    subsystemResource . getChildrenNames ( configType )  )     {", "ServiceName   configServiceName    =     ( Constants . CLIENT _ CONFIG . equals ( configType )  )     ?    PackageUtils . getClientConfigServiceName ( name )     :    PackageUtils . getEndpointConfigServiceName ( name )  ;", "serviceNames . add ( configServiceName )  ;", "}", "}", "METHOD_END"], "methodName": ["readConfigServiceNames"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "requireNoAttributes ( reader )  ;", "return   reader . getElementText (  )  . trim (  )  ;", "}", "METHOD_END"], "methodName": ["parseElementNoAttributes"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "String   handlerName    =    null ;", "String   handlerClass    =    null ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   HANDLER _ NAME    :", "{", "handlerName    =    parseElementNoAttributes ( r )  ;", "break ;", "}", "case   HANDLER _ CLASS    :", "{", "handlerClass    =    parseElementNoAttributes ( r )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "final   ModelNode   operation    =    new   ModelNode (  )  ;", "final   String   handlerChainType    =     ( isPreHandlerChain )     ?    Constants . PRE _ HANDLER _ CHAIN    :    Constants . POST _ HANDLER _ CHAIN ;", "operation . get ( OP )  . set ( ADD )  ;", "operation . get ( OP _ ADDR )  . add ( SUBSYSTEM ,    WSExtension . SUBSYSTEM _ NAME )  . add ( Constants . ENDPOINT _ CONFIG ,    configName )  . add ( handlerChainType ,    handlerChainId )  . add ( Constants . HANDLER ,    handlerName )  ;", "operation . get ( Constants . CLASS )  . set ( handlerClass )  ;", "operations . add ( operation )  ;", "}", "METHOD_END"], "methodName": ["parseHandler"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "String   handlerChainId    =    null ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ID    :", "handlerChainId    =    value ;", "break ;", "default    :", "throw   unexpectedAttribute ( r ,    i )  ;", "}", "}", "if    ( handlerChainId    =  =    null )     {", "handlerChainId    =     \" auto - generated -  \"     +     ( System . currentTimeMillis (  )  )  ;", "}", "String   protocolBindings    =    null ;", "final   List < ModelNode >    addHandlerOperations    =    new   LinkedList < ModelNode >  (  )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  ( element    !  =     ( Element . HANDLER )  )     &  &     (  !  ( encountered . add ( element )  )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   PROTOCOL _ BINDINGS    :", "{", "protocolBindings    =    parseElementNoAttributes ( r )  ;", "break ;", "}", "case   HANDLER    :", "{", "parseHandler ( r ,    configName ,    handlerChainId ,    isPreHandlerChain ,    addHandlerOperations )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "final   ModelNode   operation    =    new   ModelNode (  )  ;", "final   String   handlerChainType    =     ( isPreHandlerChain )     ?    Constants . PRE _ HANDLER _ CHAIN    :    Constants . POST _ HANDLER _ CHAIN ;", "operation . get ( OP )  . set ( ADD )  ;", "operation . get ( OP _ ADDR )  . add ( SUBSYSTEM ,    WSExtension . SUBSYSTEM _ NAME )  . add ( Constants . ENDPOINT _ CONFIG ,    configName )  . add ( handlerChainType ,    handlerChainId )  ;", "if    ( protocolBindings    !  =    null )     {", "operation . get ( Constants . PROTOCOL _ BINDINGS )  . set ( protocolBindings )  ;", "}", "operationList . add ( operation )  ;", "operationList . addAll ( addHandlerOperations )  ;", "}", "METHOD_END"], "methodName": ["parseHandlerChain"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "ModelNode   chainsNode    =    new   ModelNode (  )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  ( element    !  =     ( Element . HANDLER _ CHAIN )  )     &  &     (  !  ( encountered . add ( element )  )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   HANDLER _ CHAIN    :", "{", "parseHandlerChain ( r ,    configName ,    operationList ,    isPreHandlerChain )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "return   chainsNode ;", "}", "METHOD_END"], "methodName": ["parseHandlerChains"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "String   propertyName    =    null ;", "String   propertyValue    =    null ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   PROPERTY _ NAME    :", "{", "propertyName    =    parseElementNoAttributes ( r )  ;", "break ;", "}", "case   PROPERTY _ VALUE    :", "{", "propertyValue    =    parseElementNoAttributes ( r )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "final   ModelNode   operation    =    new   ModelNode (  )  ;", "operation . get ( OP )  . set ( ADD )  ;", "operation . get ( OP _ ADDR )  . add ( SUBSYSTEM ,    WSExtension . SUBSYSTEM _ NAME )  . add ( Constants . ENDPOINT _ CONFIG ,    configName )  . add ( Constants . PROPERTY ,    propertyName )  ;", "if    ( propertyValue    !  =    null )     {", "operation . get ( Constants . VALUE )  . set ( propertyValue )  ;", "}", "return   operation ;", "}", "METHOD_END"], "methodName": ["parseProperty"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "String   configName    =    null ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "if    (  ( element    !  =     ( Element . PROPERTY )  )     &  &     (  !  ( encountered . add ( element )  )  )  )     {", "throw   unexpectedElement ( r )  ;", "}", "switch    ( element )     {", "case   CONFIG _ NAME    :", "{", "configName    =    parseElementNoAttributes ( r )  ;", "final   ModelNode   node    =    new   ModelNode (  )  ;", "node . get ( OP )  . set ( ADD )  ;", "node . get ( OP _ ADDR )  . set ( address )  . add ( Constants . ENDPOINT _ CONFIG ,    configName )  ;", "operationList . add ( node )  ;", "break ;", "}", "case   PRE _ HANDLER _ CHAINS    :", "{", "parseHandlerChains ( r ,    configName ,    operationList ,    true )  ;", "break ;", "}", "case   POST _ HANDLER _ CHAINS    :", "{", "parseHandlerChains ( r ,    configName ,    operationList ,    false )  ;", "break ;", "}", "case   PROPERTY    :", "{", "final   ModelNode   operation    =    parseProperty ( r ,    configName )  ;", "operationList . add ( operation )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( r )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readEndpointConfig"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemLegacyReader"}, {"methodBody": ["METHOD_START", "{", "ModelNode   config    =    null ;", "for    ( final   String   configName    :    configs . keys (  )  )     {", "config    =    configs . get ( configName )  ;", "writer . writeStartElement ( elementName )  ;", "writer . writeAttribute ( Constants . NAME ,    configName )  ;", "if    ( config . hasDefined ( Constants . PRE _ HANDLER _ CHAIN )  )     {", "final   ModelNode   handlerChains    =    config . get ( Constants . PRE _ HANDLER _ CHAIN )  ;", ". writeHandlerChains ( writer ,    handlerChains ,    true )  ;", "}", "if    ( config . hasDefined ( Constants . POST _ HANDLER _ CHAIN )  )     {", "final   ModelNode   handlerChains    =    config . get ( Constants . POST _ HANDLER _ CHAIN )  ;", ". writeHandlerChains ( writer ,    handlerChains ,    false )  ;", "}", "if    ( config . hasDefined ( Constants . PROPERTY )  )     {", "final   ModelNode   properties    =    config . get ( Constants . PROPERTY )  ;", ". writeProperties ( writer ,    properties )  ;", "}", "writer . writeEndElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeConfigs"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemWriter"}, {"methodBody": ["METHOD_START", "{", "ModelNode   handlerChain    =    null ;", "ModelNode   handler    =    null ;", "for    ( final   String   handlerChainName    :    handlerChains . keys (  )  )     {", "handlerChain    =    handlerChains . get ( handlerChainName )  ;", "w . writeStartElement (  ( isPre    ?    Constants . PRE _ HANDLER _ CHAIN    :    Constants . POST _ HANDLER _ CHAIN )  )  ;", "w . writeAttribute ( Constants . NAME ,    handlerChainName )  ;", "if    ( handlerChain . hasDefined ( Constants . PROTOCOL _ BINDINGS )  )     {", "final   String   protocolBinding    =    handlerChain . get ( Constants . PROTOCOL _ BINDINGS )  . asString (  )  ;", "w . writeAttribute ( Constants . PROTOCOL _ BINDINGS ,    protocolBinding )  ;", "}", "if    ( handlerChain . hasDefined ( Constants . HANDLER )  )     {", "for    ( final   String   handlerName    :    handlerChain . require ( Constants . HANDLER )  . keys (  )  )     {", "handler    =    handlerChain . get ( Constants . HANDLER )  . get ( handlerName )  ;", "w . writeStartElement ( Constants . HANDLER )  ;", "w . writeAttribute ( Constants . NAME ,    handlerName )  ;", "Attributes . CLASS . marshallAsAttribute ( handler ,    w )  ;", "w . writeEndElement (  )  ;", "}", "}", "w . writeEndElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeHandlerChains"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemWriter"}, {"methodBody": ["METHOD_START", "{", "ModelNode   property ;", "for    ( final   String   propertyName    :    properties . keys (  )  )     {", "property    =    properties . get ( propertyName )  ;", "w . writeStartElement ( Constants . PROPERTY )  ;", "w . writeAttribute ( Constants . NAME ,    propertyName )  ;", "Attributes . VALUE . marshallAsAttribute ( property ,    false ,    w )  ;", "w . writeEndElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeProperties"], "fileName": "org.jboss.as.webservices.dmr.WSSubsystemWriter"}, {"methodBody": ["METHOD_START", "{", "List < Property >    clientConfigs    =    model . get ( Constants . CLIENT _ CONFIG )  . asPropertyList (  )  ;", "assertEquals (  \" My - Client - Config \"  ,    clientConfigs . get (  0  )  . getName (  )  )  ;", "List < Property >    preHandlers    =    clientConfigs . get (  0  )  . getValue (  )  . get ( Constants . PRE _ HANDLER _ CHAIN )  . asPropertyList (  )  ;", "List < Property >    postHandlers    =    clientConfigs . get (  0  )  . getValue (  )  . get ( Constants . POST _ HANDLER _ CHAIN )  . asPropertyList (  )  ;", "assertEquals (  \" my - handlers \"  ,    preHandlers . get (  0  )  . getName (  )  )  ;", "assertEquals (  \" ws . common . invocation . MyHandler \"  ,    preHandlers . get (  1  )  . getValue (  )  . get ( Constants . HANDLER )  . asPropertyList (  )  . get (  0  )  . getValue (  )  . get ( Constants . CLASS )  . asString (  )  )  ;", "assertEquals (  \" my - handlers 2  \"  ,    postHandlers . get (  0  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkClientConfigs"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "List < Property >    endpoints    =    model . get ( Constants . ENDPOINT _ CONFIG )  . asPropertyList (  )  ;", "assertEquals (  \" Standard - Endpoint - Config \"  ,    endpoints . get (  0  )  . getName (  )  )  ;", "assertEquals (  \" Recording - Endpoint - Config \"  ,    endpoints . get (  1  )  . getName (  )  )  ;", "ModelNode   recordingEndpoint    =    endpoints . get (  1  )  . getValue (  )  ;", "assertEquals (  \" bar \"  ,    Attributes . VALUE . resolveModelAttribute ( TEST _ RESOLVER ,    recordingEndpoint . get ( Constants . PROPERTY )  . get (  \" foo \"  )  )  . asString (  )  )  ;", "List < Property >    chain    =    recordingEndpoint . get ( Constants . PRE _ HANDLER _ CHAIN )  . asPropertyList (  )  ;", "assertEquals (  \" recording - handlers \"  ,    chain . get (  0  )  . getName (  )  )  ;", "ModelNode   recordingHandler    =    chain . get (  0  )  . getValue (  )  ;", "assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    Attributes . PROTOCOL _ BINDINGS . resolveModelAttribute ( TEST _ RESOLVER ,    recordingHandler )  . asString (  )  )  ;", "assertEquals (  \" ws . common . invocation . RecordingServerHandler \"  ,    recordingHandler . get ( Constants . HANDLER ,     \" RecordingHandler \"  ,    Constants . CLASS )  . asString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkEndpointConfigs"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  9  0  9  0  ,    Attributes . WSDL _ PORT . resolveModelAttribute ( TEST _ RESOLVER ,    model )  . asInt (  )  )  ;", "assertEquals (  9  4  4  3  ,    Attributes . WSDL _ SECURE _ PORT . resolveModelAttribute ( TEST _ RESOLVER ,    model )  . asInt (  )  )  ;", "assertEquals (  \" localhost \"  ,    Attributes . WSDL _ HOST . resolveModelAttribute ( TEST _ RESOLVER ,    model )  . asString (  )  )  ;", "assertTrue ( Attributes . MODIFY _ WSDL _ ADDRESS . resolveModelAttribute ( TEST _ RESOLVER ,    model )  . asBoolean (  )  )  ;", "assertFalse ( Attributes . STATISTICS _ ENABLED . resolveModelAttribute ( TEST _ RESOLVER ,    model )  . asBoolean (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkSubsystemBasics"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   AdditionalInitialization (  )     {", "@ Ovride", "protected   RunningMode   getRunningMode (  )     {", "return   RunningMode . ADMIN _ ONLY ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createAdditionalInitialization"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "PathAddress   subsystemAddress    =    PathAddress . pathAddress ( WSExtension . SUBSYSTEM _ PATH )  ;", "return   new   FailedOperationTransformationConfig (  )  . addFailedAttribute ( subsystemAddress ,    new   FailedOperationTransformationConfig . RejectExpressionsConfig ( Attributes . STATISTICS _ ENABLED )  )  ;", "}", "METHOD_END"], "methodName": ["getFailedTransformationConfig"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServices   services    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXmlResource (  \" ws - subsystem . xml \"  )  . build (  )  ;", "ModelNode   model    =    services . readWholeModel (  )  . get (  \" subsystem \"  ,    getMainSubsystemName (  )  )  ;", "standardSubsystemTest (  \" ws - subsystem . xml \"  ,    false )  ;", "checkSubsystemBasics ( model )  ;", "}", "METHOD_END"], "methodName": ["testParseV10"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServices   services    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXmlResource (  \" ws - subsystem 1  1  . xml \"  )  . build (  )  ;", "ModelNode   model    =    services . readWholeModel (  )  . get (  \" subsystem \"  ,    getMainSubsystemName (  )  )  ;", "standardSubsystemTest (  \" ws - subsystem 1  1  . xml \"  ,    false )  ;", "checkSubsystemBasics ( model )  ;", "checkEndpointConfigs ( model )  ;", "}", "METHOD_END"], "methodName": ["testParseV11"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServices   services    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXmlResource (  \" ws - subsystem 1  2  . xml \"  )  . build (  )  ;", "ModelNode   model    =    services . readWholeModel (  )  . get (  \" subsystem \"  ,    getMainSubsystemName (  )  )  ;", "standardSubsystemTest (  \" ws - subsystem 1  2  . xml \"  ,    false )  ;", "checkSubsystemBasics ( model )  ;", "checkEndpointConfigs ( model )  ;", "checkClientConfigs ( model )  ;", "}", "METHOD_END"], "methodName": ["testParseV12"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServices   services    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXmlResource (  \" ws - subsystem 2  0  . xml \"  )  . build (  )  ;", "ModelNode   model    =    services . readWholeModel (  )  . get (  \" subsystem \"  ,    getMainSubsystemName (  )  )  ;", "checkSubsystemBasics ( model )  ;", "checkEndpointConfigs ( model )  ;", "checkClientConfigs ( model )  ;", "}", "METHOD_END"], "methodName": ["testParseV20"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  ;", "ModelVersion   version _  2  _  0  _  0     =    ModelVersion . create (  2  ,     0  ,     0  )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    version _  2  _  0  _  0  )  . addMavenResourceURL (  (  \" eap : wildfly -  - server - integration :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  . configureReverseControllerCheck ( MANAGEMENT ,    null )  . dontPersistXml (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( version _  2  _  0  _  0  )  ;", "Assert . assertNotNull ( legacyServices )  ;", "Assert . assertTrue (  \" main   services   did   not   boot \"  ,    mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "List < ModelNode >    xmlOps    =    builder . parseXmlResource (  \" ws - subsystem 2  0  . xml \"  )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    version _  2  _  0  _  0  ,    xmlOps ,    getFailedTransformationConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRejections_2_0_0"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformers _  1  _  2  _  0  ( EAP _  6  _  2  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersEAP620"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformers _  1  _  2  _  0  ( EAP _  6  _  3  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersEAP630"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformers _  1  _  2  _  0  ( EAP _  6  _  4  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersEAP640"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejections _  2  _  0  _  0  ( EAP _  7  _  0  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersEAP700"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  . setSubsystemXmlResource (  \" ws - subsystem 1  2  . xml \"  )  ;", "ModelVersion   version _  1  _  2  _  0     =    ModelVersion . create (  1  ,     2  ,     0  )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    version _  1  _  2  _  0  )  . addMavenResourceURL (  (  \"  : jboss - as - webservices - server - integration :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  . configureReverseControllerCheck ( MANAGEMENT ,    null )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( version _  1  _  2  _  0  )  ;", "Assert . assertNotNull ( legacyServices )  ;", "Assert . assertTrue (  \" main   services   did   not   boot \"  ,    mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "checkSubsystemModelTransformation ( mainServices ,    version _  1  _  2  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformers_1_2_0"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemParserTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   AdditionalInitialization (  )     {", "@ Override", "protected   RunningMode   getRunningMode (  )     {", "return   RunningMode . NORMAL ;", "}", "@ Override", "protected   void   addExtraS ( ServiceTarget   target )     {", "super . addExtraS ( target )  ;", "target . addService ( JBOSS _ SERVICE _ MODULE _ LOADER ,    new   ServiceModuleLoader ( null )  )  . install (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createAdditionalInitialization"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemRuntimeTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceController < T >    service    =     (  ( ServiceController < T >  )     ( container . getService ( serviceName )  )  )  ;", "return   service    !  =    null    ?    service . getValue (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getMSCService"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemRuntimeTestCase"}, {"methodBody": ["METHOD_START", "{", "ClassLoaderProvider . setDefaultProvider ( new   ClassLoaderProvider (  )     {", "@ Override", "public   ClassLoader   getWebServiceClassLoader (  )     {", "return   Thread . currentThread (  )  . getContextClassLoader (  )  ;", "}", "@ Override", "public   ClassLoader   getServerJAXRPCIntegrationClassLoader (  )     {", "return   Thread . currentThread (  )  . getContextClassLoader (  )  ;", "}", "@ Override", "public   ClassLoader   getServerIntegrationClassLoader (  )     {", "return   Thread . currentThread (  )  . getContextClassLoader (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["resetClassLoaderProvider"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemRuntimeTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  . setSubsystemXml ( getSubsystemXml (  )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "if    (  !  ( mainServices . isSuccessfulBoot (  )  )  )     {", "Assert . fail ( mainServices . getBootError (  )  . toString (  )  )  ;", "}", "ServerConfig   serverConfig    =     . getMSCService ( mainServices . getContainer (  )  ,    WSServices . CONFIG _ SERVICE ,    ServerConfig . class )  ;", "Assert . assertTrue ( serverConfig . isModifySOAPAddress (  )  )  ;", "Assert . assertEquals (  \" localhost \"  ,    serverConfig . getWebServiceHost (  )  )  ;", "Assert . assertEquals (  9  8  9  5  ,    serverConfig . getWebServicePort (  )  )  ;", "Assert . assertEquals (  9  9  4  4  ,    serverConfig . getWebServiceSecurePort (  )  )  ;", "Assert . assertEquals (  \" https \"  ,    serverConfig . getWebServiceUriScheme (  )  )  ;", "serverConfig . reloadClientConfigs (  )  ;", "ClientConfig   clCfg    =    serverConfig . getClientConfig (  \" My - Client - Config \"  )  ;", "Assert . assertNotNull ( clCfg )  ;", "Assert . assertEquals (  1  ,    clCfg . getProperties (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bar 3  \"  ,    clCfg . getProperties (  )  . get (  \" foo 3  \"  )  )  ;", "Assert . assertEquals (  2  ,    clCfg . getPreHandlerChains (  )  . size (  )  )  ;", "Map < String ,    UnifiedHandlerChainMetaData >    map    =    new   HashMap < String ,    UnifiedHandlerChainMetaData >  (  )  ;", "for    ( UnifiedHandlerChainMetaData   uhc    :    clCfg . getPreHandlerChains (  )  )     {", "map . put ( uhc . getId (  )  ,    uhc )  ;", "}", "Assert . assertTrue ( map . get (  \" my - handlers \"  )  . getHandlers (  )  . isEmpty (  )  )  ;", "Assert . assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    map . get (  \" my - handlers \"  )  . getProtocolBindings (  )  )  ;", "Assert . assertEquals (  1  ,    map . get (  \" my - handlers 2  \"  )  . getHandlers (  )  . size (  )  )  ;", "Assert . assertEquals (  \" MyHandler \"  ,    map . get (  \" my - handlers 2  \"  )  . getHandlers (  )  . get (  0  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" MyHandler \"  ,    map . get (  \" my - handlers 2  \"  )  . getHandlers (  )  . get (  0  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    map . get (  \" my - handlers \"  )  . getProtocolBindings (  )  )  ;", "Assert . assertEquals (  1  ,    clCfg . getPostHandlerChains (  )  . size (  )  )  ;", "Assert . assertEquals (  \" my - handlers 2  \"  ,    clCfg . getPostHandlerChains (  )  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  1  ,    clCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . size (  )  )  ;", "Assert . assertEquals (  \" MyHandler 2  \"  ,    clCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" MyHandler 2  \"  ,    clCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    clCfg . getPostHandlerChains (  )  . get (  0  )  . getProtocolBindings (  )  )  ;", "serverConfig . reloadEndpointConfigs (  )  ;", "EndpointConfig   epCfg    =    serverConfig . getEndpointConfig (  \" Standard - Endpoint - Config \"  )  ;", "Assert . assertNotNull ( epCfg )  ;", "Assert . assertTrue ( epCfg . getProperties (  )  . isEmpty (  )  )  ;", "Assert . assertTrue ( epCfg . getPreHandlerChains (  )  . isEmpty (  )  )  ;", "Assert . assertTrue ( epCfg . getPostHandlerChains (  )  . isEmpty (  )  )  ;", "epCfg    =    serverConfig . getEndpointConfig (  \" Recording - Endpoint - Config \"  )  ;", "Assert . assertNotNull ( epCfg )  ;", "Assert . assertEquals (  2  ,    epCfg . getProperties (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bar \"  ,    epCfg . getProperties (  )  . get (  \" foo \"  )  )  ;", "Assert . assertEquals (  \" bar 2  \"  ,    epCfg . getProperties (  )  . get (  \" foo 2  \"  )  )  ;", "Assert . assertEquals (  1  ,    epCfg . getPreHandlerChains (  )  . size (  )  )  ;", "Assert . assertEquals (  \" recording - handlers \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  2  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getHandlers (  )  . size (  )  )  ;", "Assert . assertEquals (  \" RecordingHandler \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" RecordingServerHandler \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \" AnotherRecordingHandler \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  1  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" RecordingServerHandler \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  1  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    epCfg . getPreHandlerChains (  )  . get (  0  )  . getProtocolBindings (  )  )  ;", "Assert . assertEquals (  1  ,    epCfg . getPostHandlerChains (  )  . size (  )  )  ;", "Assert . assertEquals (  \" recording - handlers 2  \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  2  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . size (  )  )  ;", "Assert . assertEquals (  \" RecordingHandler 2  \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" RecordingServerHandler \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  0  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \" AnotherRecordingHandler 2  \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  1  )  . getHandlerName (  )  )  ;", "Assert . assertEquals (  \" RecordingServerHandler \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getHandlers (  )  . get (  1  )  . getHandlerClass (  )  )  ;", "Assert . assertEquals (  \"  #  # SOAP 1  1  _ HTTP    #  # SOAP 1  1  _ HTTP _ MTOM    #  # SOAP 1  2  _ HTTP    #  # SOAP 1  2  _ HTTP _ MTOM \"  ,    epCfg . getPostHandlerChains (  )  . get (  0  )  . getProtocolBindings (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubsystem"], "fileName": "org.jboss.as.webservices.dmr.WebservicesSubsystemRuntimeTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentSContainer . getSContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.injection.InjectionDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "final   InstanceProvider   stackInstanceProvider    =    ep . getInstanceProvider (  )  ;", "final   DeploymentUnit   unit    =    ep . getService (  )  . getDeployment (  )  . getAttachment ( DeploymentUnit . class )  ;", "final   InstanceProvider   injectionAwareInstanceProvider    =    new    . InjectionAwareInstanceProvider ( stackInstanceProvider ,    ep ,    unit )  ;", "ep . setInstanceProvider ( injectionAwareInstanceProvider )  ;", "}", "METHOD_END"], "methodName": ["setInjectionAwareInstanceProvider"], "fileName": "org.jboss.as.webservices.injection.InjectionDeploymentAspect"}, {"methodBody": ["METHOD_START", "{", "BasicComponentInstance   result    =    wsComponentInstance ;", "if    ( result    =  =    null )     {", "synchronized ( lock )     {", "result    =    wsComponentInstance ;", "if    ( result    =  =    null )     {", "if    (  ( reference )     =  =    null )     {", "wsComponentInstance    =    result    =     (  ( BasicComponentInstance )     ( createInstance (  )  )  )  ;", "} else    {", "wsComponentInstance    =    result    =     (  ( BasicComponentInstance )     ( this . createInstance ( reference . getInstance (  )  )  )  )  ;", "}", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getComponentInstance"], "fileName": "org.jboss.as.webservices.injection.WSComponent"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.jboss.as.webservices.injection.WSComponent"}, {"methodBody": ["METHOD_START", "{", "return   endpointHandlersMap . get ( endpointClass )  ;", "}", "METHOD_END"], "methodName": ["getHandlers"], "fileName": "org.jboss.as.webservices.injection.WSEndpointHandlersMapping"}, {"methodBody": ["METHOD_START", "{", "return    ( endpointHandlersMap . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.webservices.injection.WSEndpointHandlersMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  ( endpointClass    =  =    null )     |  |     ( endpointHandlers    =  =    null )  )     {", "throw   new   IllegalArgumentException (  )  ;", "}", "e . put ( endpointClass ,    Collections . unmodifiableSet ( endpointHandlers )  )  ;", "}", "METHOD_END"], "methodName": ["registerEndpointHandlers"], "fileName": "org.jboss.as.webservices.injection.WSEndpointHandlersMapping"}, {"methodBody": ["METHOD_START", "{", "AnnotationValue   av    =    classInfo . annotations (  )  . get ( DotNames . WEB _ SERVICE _ ANNOTATION )  . iterator (  )  . next (  )  . value (  \" endpointInterface \"  )  ;", "if    ( av    !  =    null )     {", "String   intf    =    av . asString (  )  ;", "if    (  ( intf    !  =    null )     &  &     (  !  ( intf . isEmpty (  )  )  )  )     {", "ClassInfo   intfClassInfo    =    index . getClassByName ( DotName . createSimple ( intf )  )  ;", "if    (  ( intfClassInfo    !  =    null )     &  &     ( ASHelper . isJaxwsEndpointInterface ( intfClassInfo )  )  )     {", "return    . getHandlerChainAnnotationInstance ( intfClassInfo )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEndpointInterfaceHandlerChainAnnotationInstance"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "List < AnnotationInstance >    list    =    classInfo . annotations (  )  . get ( DotNames . HANDLER _ CHAIN _ ANNOTATION )  ;", "return    ( list    !  =    null )     &  &     (  !  ( list . isEmpty (  )  )  )     ?    list . iterator (  )  . next (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getHandlerChainAnnotationInstance"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    retVal    =    new   HashSet < String >  (  )  ;", "final   UnifiedsMetaData   handlerChainsUMDM    =    UnifiedsMetaDataParser . parse ( is )  ;", "if    ( handlerChainsUMDM    !  =    null )     {", "for    ( final   UnifiedMetaData   handlerChainUMDM    :    handlerChainsUMDM . gets (  )  )     {", "for    ( final   UnifiedHandlerMetaData   handlerUMDM    :    handlerChainUMDM . getHandlers (  )  )     {", "retVal . add ( handlerUMDM . getHandlerClass (  )  )  ;", "}", "}", "}", "return   retVal ;", "}", "METHOD_END"], "methodName": ["getHandlers"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( handlerChainConfigFile . startsWith (  \" file :  /  /  \"  )  )     |  |     ( handlerChainConfigFile . startsWith (  \" http :  /  /  \"  )  )  )     {", "return   new   URL ( handlerChainConfigFile )  . openStream (  )  ;", "} else    {", "URI   classURI    =    null ;", "try    {", "classURI    =    new   URI ( annotatedClassName . replace (  '  .  '  ,     '  /  '  )  )  ;", "}    catch    ( final   URISyntaxException   ignore )     {", "}", "final   String   handlerChainConfigFileResourcePath    =    classURI . resolve ( handlerChainConfigFile )  . toString (  )  ;", "VirtualFile   config    =    currentResourceRoot . getRoot (  )  . getChild ( handlerChainConfigFileResourcePath )  ;", "if    (  ( config . exists (  )  )     &  &     ( config . isFile (  )  )  )     {", "return   config . openStream (  )  ;", "} else    {", "for    ( ResourceRoot   rr    :    resourceRoots )     {", "config    =    rr . getRoot (  )  . getChild ( handlerChainConfigFileResourcePath )  ;", "if    (  ( config . exists (  )  )     &  &     ( config . isFile (  )  )  )     {", "return   config . openStream (  )  ;", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . missingConfigFile ( handlerChainConfigFileResourcePath ,    currentResourceRoot )  ;", "}", "}", "METHOD_END"], "methodName": ["getInputStream"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   short   flags    =    clazz . flags (  )  ;", "if    ( Modifier . isInterface ( flags )  )", "return   false ;", "if    ( Modifier . isAbstract ( flags )  )", "return   false ;", "if    (  !  ( Modifier . isPublic ( flags )  )  )", "return   false ;", "if    ( ASHelper . isJaxwsService ( clazz ,    index )  )", "return   false ;", "if    ( Modifier . isFinal ( flags )  )", "return   false ;", "final   boolean   isWebService    =    clazz . as (  )  . containsKey ( DotNames . WEB _ SERVICE _ ANNOTATION )  ;", "final   boolean   isWebServiceProvider    =    clazz . as (  )  . containsKey ( DotNames . WEB _ SERVICE _ PROVIDER _ ANNOTATION )  ;", "return   isWebService    |  |    isWebServiceProvider ;", "}", "METHOD_END"], "methodName": ["isJaxwsEndpoint"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   handlerChainConfigFile    =    handlerChainAnnotation . value (  \" file \"  )  . asString (  )  ;", "InputStream   is    =    null ;", "try    {", "is    =     . getInputStream ( currentResourceRoot ,    resourceRoots ,    handlerChainConfigFile ,    endpointClass )  ;", "final   Set < String >    endpointHandlers    =     . getHandlers ( is )  ;", "if    (  ( endpointHandlers . size (  )  )     >     0  )     {", "mapping . registerEndpointHandlers ( endpointClass ,    endpointHandlers )  ;", "} else    {", "WSLogger . ROOT _ LOGGER . invalidHandlerChainFile ( handlerChainConfigFile )  ;", "}", "}    catch    ( final   IOException   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}    finally    {", "if    ( is    !  =    null )     {", "try    {", "is . close (  )  ;", "}    catch    ( final   IOException   ignore )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["processHandlerChainAnnotation"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   List < AnnotationInstance >    webServiceAnnotations    =    index . getAnnotations ( DotNames . WEB _ SERVICE _ ANNOTATION )  ;", "final   List < AnnotationInstance >    webServiceProviderAnnotations    =    index . getAnnotations ( DotNames . WEB _ SERVICE _ PROVIDER _ ANNOTATION )  ;", "for    ( final   AnnotationInstance   annotationInstance    :    webServiceAnnotations )     {", "final   AnnotationTarget   annotationTarget    =    annotationInstance . target (  )  ;", "if    ( annotationTarget   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( annotationTarget )  )  ;", "if    (  . isJaxwsEndpoint ( classInfo ,    index )  )     {", "AnnotationInstance   handlerChainAnnotationInstance    =     . getHandlerChainAnnotationInstance ( classInfo )  ;", "if    ( handlerChainAnnotationInstance    =  =    null )     {", "handlerChainAnnotationInstance    =     . getEndpointInterfaceHandlerChainAnnotationInstance ( classInfo ,    index )  ;", "}", "if    ( handlerChainAnnotationInstance    !  =    null )     {", "final   String   endpointClass    =    classInfo . name (  )  . toString (  )  ;", ". processHandlerChainAnnotation ( currentResourceRoot ,    resourceRoots ,    handlerChainAnnotationInstance ,    endpointClass ,    mapping )  ;", "}", "}", "} else    {", "}", "}", "for    ( final   AnnotationInstance   annotationInstance    :    webServiceProviderAnnotations )     {", "final   AnnotationTarget   annotationTarget    =    annotationInstance . target (  )  ;", "if    ( annotationTarget   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( annotationTarget )  )  ;", "final   AnnotationInstance   handlerChainAnnotationInstance    =     . getHandlerChainAnnotationInstance ( classInfo )  ;", "if    (  ( handlerChainAnnotationInstance    !  =    null )     &  &     (  . isJaxwsEndpoint ( classInfo ,    index )  )  )     {", "final   String   endpointClass    =    classInfo . name (  )  . toString (  )  ;", ". processHandlerChainAnnotation ( currentResourceRoot ,    resourceRoots ,    handlerChainAnnotationInstance ,    endpointClass ,    mapping )  ;", "}", "} else    {", "}", "}", "}", "METHOD_END"], "methodName": ["processHandlerChainAnnotations"], "fileName": "org.jboss.as.webservices.injection.WSHandlerChainAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   o   instanceof   WebServiceContextInjectionSource ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.jboss.as.webservices.injection.WebServiceContextInjectionSource"}, {"methodBody": ["METHOD_START", "{", "return    1  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.jboss.as.webservices.injection.WebServiceContextInjectionSource"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   SOAPFaultException )     {", "return    (  ( SOAPFaultException )     ( ex )  )  ;", "}", "if    (  ( ex . getCause (  )  )     !  =    null )     {", "return   findSoapFaultException ( ex . getCause (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findSoapFaultException"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "ComponentView   cv    =    componentView ;", "if    ( cv    =  =    null )     {", "synchronized ( this )     {", "cv    =    componentView ;", "if    ( cv    =  =    null )     {", "cv    =    ASHelper . getMSCS ( componentViewName ,    ComponentView . class )  ;", "if    ( cv    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . cannotFindComponentView ( componentViewName )  ;", "}", "if    (  ( reference )     =  =    null )     {", "try    {", "reference    =    cv . createInstance (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "componentView    =    cv ;", "}", "}", "}", "return   cv ;", "}", "METHOD_END"], "methodName": ["getComponentView"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Method   viewMethod    :    viewMethods )     {", "if    ( matches ( seiMethod ,    viewMethod )  )     {", "return   viewMethod ;", "}", "}", "throw   new   IllegalStateExcep (  )  ;", "}", "METHOD_END"], "methodName": ["getComponentViewMethod"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( t   instanceof   MBeanException )     {", "throw    (  ( MBeanException )     ( t )  )  . getTargetException (  )  ;", "}", "if    ( t   instanceof   Exception )     {", "if    ( t   instanceof   TargetException )     {", "throw    (  ( Exception )     ( t )  )  ;", "} else    {", "SOAPFaultException   ex    =    findSoapFaultException ( t )  ;", "if    ( ex    !  =    null )     {", "throw   new   TargetException ( ex )  ;", "}", "throw   new   TargetException ( t )  ;", "}", "}", "if    ( t   instanceof   Error )     {", "throw    (  ( Error )     ( t )  )  ;", "}", "throw   new   UndeclaredThrowableException ( t )  ;", "}", "METHOD_END"], "methodName": ["handleInvocationException"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "componentViewName    =     (  ( ServiceName )     ( endpoint . getProperty ( AbstractEndpoint . COMPONENT _ VIEW _ NAME )  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  !  ( STARTED . equals ( endpoint . getState (  )  )  )  )     {", "throw   WSLogger . ROOT _ LOGGER . endpointAlreadyStopped ( endpoint . getShortName (  )  )  ;", "}", "SecurityDomainContext   securityDomainContext    =    endpoint . getSecurityDomainContext (  )  ;", "securityDomainContext . runAs (  (  ( Callable < Void >  )     (  (  )     -  >     {", "invokeInternal ( endpoint ,    ws )  ;", "return   null ;", "}  )  )  )  ;", "}    catch    ( Throwable   t )     {", "handleException ( t )  ;", "}    finally    {", "onAfter ( ws )  ;", "}", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "onBeforeInvocation ( wsInvocation )  ;", "final   ComponentView   componentView    =    getComponentView (  )  ;", "Component   component    =    componentView . getComponent (  )  ;", "final   boolean   forceTargetBean    =     ( wsInvocation . geContext (  )  . getProperty (  \" forceTargetBean \"  )  )     !  =    null ;", "if    ( forceTargetBean )     {", "this . reference    =    new   ManagedReference (  )     {", "public   void   release (  )     {", "}", "public   Object   getInstance (  )     {", "return   wsInvocation . geContext (  )  . getTargetBean (  )  ;", "}", "}  ;", "if    ( component   instanceof   WSComponent )     {", "(  ( WSComponent )     ( component )  )  . setReference ( reference )  ;", "}", "}", "final   Method   method    =    getComponentViewMethod ( wsInvocation . getJavaMethod (  )  ,    componentView . getViewMethods (  )  )  ;", "final   InterceptorContext   context    =    new   InterceptorContext (  )  ;", "prepareForInvocation ( context ,    wsInvocation )  ;", "context . setMethod ( method )  ;", "context . setParameters ( wsInvocation . getArgs (  )  )  ;", "context . putPrivateData ( Component . class ,    component )  ;", "context . putPrivateData ( ComponentView . class ,    componentView )  ;", "LocalTransactionContext . getCurrent (  )  . importProviderTransaction (  )  ;", "context . setTransaction ( ContextTransactionManager . getInstance (  )  . getTransaction (  )  )  ;", "if    ( forceTargetBean )     {", "context . putPrivateData ( ManagedReference . class ,    reference )  ;", "}", "final   Object   retObj    =    componentView . invoke ( context )  ;", "wsInvocation . setReturnValue ( retObj )  ;", "}", "METHOD_END"], "methodName": ["invokeInternal"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( seiMethod . getName (  )  . equals ( viewMethod . getName (  )  )  )  )", "return   false ;", "final   Class <  ?  >  [  ]    sourceParams    =    seiMethod . getParameterTypes (  )  ;", "final   Class <  ?  >  [  ]    targetParams    =    viewMethod . getParameterTypes (  )  ;", "if    (  ( sourceParams . length )     !  =     ( targetParams . length )  )", "return   false ;", "for    ( int   i    =     0  ;    i    <     ( sourceParams . length )  ;    i +  +  )     {", "if    (  !  ( sourceParams [ i ]  . equals ( targetParams [ i ]  )  )  )", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.jboss.as.webservices.invocation.AbstractInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "InvocationHandler   handler    =    null ;", "switch    ( type )     {", "case   JAXWS _ JSE    :", "handler    =    new   InvocationHandlerJAXWS (  )  ;", "break ;", "case   JAXWS _ EJB 3     :", "handler    =    new   InvocationHandlerJAXWS (  )  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  )  ;", "}", "return   handler ;", "}", "METHOD_END"], "methodName": ["newInvocationHandler"], "fileName": "org.jboss.as.webservices.invocation.InvocationHandlerFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "final   InvocationContext   invocationContext    =    invocation . getInvocationContext (  )  ;", "return   invocationContext . getAttachment ( WebServiceContext . class )  ;", "}", "METHOD_END"], "methodName": ["getWebServiceContext"], "fileName": "org.jboss.as.webservices.invocation.InvocationHandlerJAXWS"}, {"methodBody": ["METHOD_START", "{", "final   SLSBMetaData . Builder   wsEjbMDBuilder    =    new   SLSBMetaData . Builder (  )  ;", "wsEjbMDBuilder . setEjbName ( ejbEndpoint . getName (  )  )  ;", "wsEjbMDBuilder . setEjbClass ( ejbEndpoint . getClassName (  )  )  ;", "final   JBossPortComponentMetaData   portComponentMD    =    getPortComponent ( ejbEndpoint . getName (  )  ,    jbossWebservicesMD )  ;", "if    ( portComponentMD    !  =    null )     {", "wsEjbMDBuilder . setPortComponentName ( portComponentMD . getPortComponentName (  )  )  ;", "wsEjbMDBuilder . setPortComponentURI ( portComponentMD . getPortComponentURI (  )  )  ;", "}", "final   String   authMethod    =     . getAuthMethod ( ejbEndpoint ,    portComponentMD )  ;", "final   String   transportGuarantee    =     . getTransportGuarantee ( ejbEndpoint ,    portComponentMD )  ;", "final   boolean   secureWsdlAccess    =     . isSecureWsdlAccess ( ejbEndpoint ,    portComponentMD )  ;", "final   String   realmName    =     . getRealmName ( ejbEndpoint ,    portComponentMD )  ;", "wsEjbMDBuilder . setSecurityMetaData ( new   EJBSecurityMetaData ( authMethod ,    realmName ,    transportGuarantee ,    secureWsdlAccess )  )  ;", "wsEjbsMD . add ( wsEjbMDBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildEnterpriseBeanMetaData"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "final   JBossWebservicesMetaData   webservicesMD    =    WSHelper . getOptionalAttachment ( dep ,    JBossWebservicesMetaData . class )  ;", "if    ( webservicesMD    =  =    null )", "return ;", "final   String   contextRoot    =    webservicesMD . getContextRoot (  )  ;", "ejbArchiveMDBuilder . setWebServiceContextRoot ( contextRoot )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   context   root :     % s \"  ,    contextRoot )  ;", "final   String   configName    =    webservicesMD . getConfigName (  )  ;", "ejbArchiveMDBuilder . setConfigName ( configName )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   name :     % s \"  ,    configName )  ;", "final   String   configFile    =    webservicesMD . getConfigFile (  )  ;", "ejbArchiveMDBuilder . setConfigFile ( configFile )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   file :     % s \"  ,    configFile )  ;", "final   JBossWebserviceDescriptionMetaData [  ]    wsDescriptionsMD    =    webservicesMD . getWebserviceDescriptions (  )  ;", "final   PublishLocationAdapter   resolver    =    new   PublishLocationAdapterImpl ( wsDescriptionsMD )  ;", "ejbArchiveMDBuilder . setPublishLocationAdapter ( resolver )  ;", "}", "METHOD_END"], "methodName": ["buildWebservicesMetaData"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    ( WSLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Building   JBoss   agnostic   meta   data   for   EJB      deployment :     % s \"  ,    dep . getSimpleName (  )  )  ;", "}", "final   EJBArchiveMetaData . Builder   ejbArchiveMDBuilder    =    new   EJBArchiveMetaData . Builder (  )  ;", "this . buildEnterpriseBeansMetaData ( dep ,    ejbArchiveMDBuilder )  ;", "this . buildWebservicesMetaData ( dep ,    ejbArchiveMDBuilder )  ;", "return   ejbArchiveMDBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ejbEndpoint . getAuthMethod (  )  )     !  =    null )", "return   ejbEndpoint . getAuthMethod (  )  ;", "return   portComponentMD    !  =    null    ?    portComponentMD . getAuthMethod (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAuthMethod"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    ( jbossWebservicesMD    =  =    null )", "return   null ;", "for    ( final   JBossPortComponentMetaData   jbossPortComponentMD    :    jbossWebservicesMD . getPortComponents (  )  )     {", "if    ( ejbName . equals ( jbossPortComponentMD . getEjbName (  )  )  )", "return   jbossPortComponentMD ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPortComponent"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ejbEndpoint . getRealmName (  )  )     !  =    null )", "return   ejbEndpoint . getRealmName (  )  ;", "return   portComponentMD    !  =    null    ?    portComponentMD . getRealmName (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getRealmName"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    (  ( portComponentMD    !  =    null )     &  &     (  ( portComponentMD . getTransportGuarantee (  )  )     !  =    null )  )", "return   portComponentMD . getTransportGuarantee (  )  ;", "return   ejbEndpoint    !  =    null    ?    ejbEndpoint . getTransportGuarantee (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getTransportGuarantee"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    ( ejbEndpoint . isSecureWsdlAccess (  )  )", "return   true ;", "return    ( portComponentMD    !  =    null )     &  &     (  ( portComponentMD . getSecureWSDLAccess (  )  )     !  =    null )     ?    portComponentMD . getSecureWSDLAccess (  )     :    false ;", "}", "METHOD_END"], "methodName": ["isSecureWsdlAccess"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderEJB"}, {"methodBody": ["METHOD_START", "{", "if    ( WSLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   JBoss   agnostic   meta   data   for   POJO      deployment :     % s \"  ,    dep . getSimpleName (  )  )  ;", "}", "final   JBossWebMetaData   jbossWebMD    =    WSHelper . getRequiredAttachment ( dep ,    JBossWebMetaData . class )  ;", "final   DeploymentUnit   unit    =    WSHelper . getRequiredAttachment ( dep ,    DeploymentUnit . class )  ;", "final   List < POJOEndpoint >    pojoEndpoints    =    getPojoEndpoints ( unit )  ;", "final   JSEArchiveMetaData . Builder   builder    =    new   JSEArchiveMetaData . Builder (  )  ;", "final   String   contextRoot    =    ASHelper . getContextRoot ( dep ,    jbossWebMD )  ;", "builder . setContextRoot ( contextRoot )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   context   root :     % s \"  ,    contextRoot )  ;", "final   Map < String ,    String >    servletMappings    =    getServletUrlPatternsMappings ( jbossWebMD ,    pojoEndpoints )  ;", "builder . setServletMappings ( servletMappings )  ;", "final   Map < String ,    String >    servletClassNamesMappings    =    getServletClassMappings ( jbossWebMD ,    pojoEndpoints )  ;", "builder . setServletClassNames ( servletClassNamesMappings )  ;", "final   String   securityDomain    =    jbossWebMD . getSecurityDomain (  )  ;", "builder . setSecurityDomain ( securityDomain )  ;", "final   JBossWebservicesMetaData   jbossWebservicesMD    =    WSHelper . getOptionalAttachment ( dep ,    JBossWebservicesMetaData . class )  ;", "if    ( jbossWebservicesMD    !  =    null )     {", "final   PublishLocationAdapter   resolver    =    new   PublishLocationAdapterImpl ( jbossWebservicesMD . getWebserviceDescriptions (  )  )  ;", "builder . setPublishLocationAdapter ( resolver )  ;", "}", "final   List < JSESecurityMetaData >    jseSecurityMDs    =    getSecurityMetaData ( jbossWebMD . getSecurityConstraints (  )  )  ;", "builder . setSecurityMetaData ( jseSecurityMDs )  ;", "setConfigNameAndFile ( builder ,    jbossWebMD ,    jbossWebservicesMD )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderPOJO"}, {"methodBody": ["METHOD_START", "{", "final   List < JSESecurityMetaData >    jseSecurityMDs    =    new   LinkedList < JSESecurityMetaData >  (  )  ;", "if    ( securityConstraintsMD    !  =    null )     {", "for    ( final   SecurityConstrain   securityConstraintMD    :    securityConstraintsMD )     {", "final   JSESecurityMetaData . Builder   jseSecurityMDBuilder    =    new   JSESecurityMetaData . Builder (  )  ;", "jseSecurityMDBuilder . setTransportGuarantee ( securityConstraintMD . getTransportGuarantee (  )  . name (  )  )  ;", "for    ( final   WebResourceCollectionMetaData   webResourceMD    :    securityConstraintMD . getResourceCollections (  )  )     {", "jseSecurityMDBuilder . addWebResource ( webResourceMD . getName (  )  ,    webResourceMD . getUrlPatterns (  )  )  ;", "}", "jseSecurityMDs . add ( jseSecurityMDBuilder . build (  )  )  ;", "}", "}", "return   jseSecurityMDs ;", "}", "METHOD_END"], "methodName": ["getSecurityMetaData"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderPOJO"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    String >    mappings    =    new   HashMap < String ,    String >  (  )  ;", "final   JBossServlets   servlets    =    WebHelper . getServlets ( jbossWebMD )  ;", "for    ( final   POJOEndpoint   pojoEndpoint    :    pojoEndpoints )     {", "final   String   pojoName    =    pojoEndpoint . getName (  )  ;", "final   String   pojoClassName    =    pojoEndpoint . getClassName (  )  ;", "mappings . put ( pojoName ,    pojoClassName )  ;", "if    (  !  ( pojoEndpoint . isDeclared (  )  )  )     {", "final   String   endpointName    =    pojoEndpoint . getName (  )  ;", "final   String   endpointClassName    =    pojoEndpoint . getClassName (  )  ;", "WebHelper . newServlet ( endpointName ,    endpointClassName ,    servlets )  ;", "}", "}", "return   mappings ;", "}", "METHOD_END"], "methodName": ["getServletClassMappings"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderPOJO"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    String >    mappings    =    new   HashMap < String ,    String >  (  )  ;", "final   List < ServletMapping >    servletMappings    =    WebHelper . getServletMappings ( jbossWebMD )  ;", "for    ( final   POJOEndpoint   pojoEndpoint    :    pojoEndpoints )     {", "mappings . put ( pojoEndpoint . getName (  )  ,    pojoEndpoint . getUrlPattern (  )  )  ;", "if    (  !  ( pojoEndpoint . isDeclared (  )  )  )     {", "final   String   endpointName    =    pojoEndpoint . getName (  )  ;", "final   List < String >    urlPatterns    =    WebHelper . getUrlPatterns ( pojoEndpoint . getUrlPattern (  )  )  ;", "WebHelper . newServletMapping ( endpointName ,    urlPatterns ,    servletMappings )  ;", "}", "}", "return   mappings ;", "}", "METHOD_END"], "methodName": ["getServletUrlPatternsMappings"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderPOJO"}, {"methodBody": ["METHOD_START", "{", "if    ( jbossWebservicesMD    !  =    null )     {", "if    (  ( jbossWebservicesMD . getConfigName (  )  )     !  =    null )     {", "final   String   configName    =    jbossWebservicesMD . getConfigName (  )  ;", "builder . setConfigName ( configName )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   name :     % s \"  ,    configName )  ;", "final   String   configFile    =    jbossWebservicesMD . getConfigFile (  )  ;", "builder . setConfigFile ( configFile )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   file :     % s \"  ,    configFile )  ;", "return ;", "}", "}", "final   List < ParamValueMetaData >    contextParams    =    jbossWebMD . getContextParams (  )  ;", "if    ( contextParams    !  =    null )     {", "for    ( final   ParamValueMetaData   contextParam    :    contextParams )     {", "if    ( JBOSSWS _ CONFIG _ NAME . equals ( contextParam . getParamName (  )  )  )     {", "final   String   configName    =    contextParam . getParamValue (  )  ;", "builder . setConfigName ( configName )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   name :     % s \"  ,    configName )  ;", "}", "if    ( JBOSSWS _ CONFIG _ FILE . equals ( contextParam . getParamName (  )  )  )     {", "final   String   configFile    =    contextParam . getParamValue (  )  ;", "builder . setConfigFile ( configFile )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   config   file :     % s \"  ,    configFile )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["setConfigNameAndFile"], "fileName": "org.jboss.as.webservices.metadata.AbstractMetaDataBuilderPOJO"}, {"methodBody": ["METHOD_START", "{", "if    (  ( wsDescriptionsMD )     !  =    null )     {", "for    ( final   JBossWebserviceDescriptionMetaData   wsDescriptionMD    :    wsDescriptionsMD )     {", "if    ( endpointName . equals ( wsDescriptionMD . getWebserviceDescriptionName (  )  )  )", "return   wsDescriptionMD . getWsdl (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getWsdlPublishLocationByName"], "fileName": "org.jboss.as.webservices.metadata.PublishLocationAdapterImpl"}, {"methodBody": ["METHOD_START", "{", "ejbEndpoints . add ( ep )  ;", "}", "METHOD_END"], "methodName": ["addEndpoint"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractDeployment"}, {"methodBody": ["METHOD_START", "{", "final   String   urlPattern    =    ep . getUrlPattern (  )  ;", "final   String   clasme    =    ep . getClasme (  )  ;", "if    ( urlPatternToClaspping . keySet (  )  . contains ( urlPattern )  )     {", "final   String   clazz    =    urlPatternToClaspping . get ( urlPattern )  ;", "throw   WSLogger . ROOT _ LOGGER . sameUrlPatternRequested ( clazz ,    urlPattern ,    ep . getClasme (  )  )  ;", "} else    {", "urlPatternToClaspping . put ( urlPattern ,    clasme )  ;", "pojoEndpointdd ( ep )  ;", "}", "}", "METHOD_END"], "methodName": ["addEndpoint"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractDeployment"}, {"methodBody": ["METHOD_START", "{", "return   urlPatternToClassMapping . keySet (  )  . contains ( urlPattern )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractDeployment"}, {"methodBody": ["METHOD_START", "{", "return   unmodifiableEjbEndpoints ;", "}", "METHOD_END"], "methodName": ["getEjbEndpoints"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractDeployment"}, {"methodBody": ["METHOD_START", "{", "return   unmodifiablePojoEndpoints ;", "}", "METHOD_END"], "methodName": ["getPojoEndpoints"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractDeployment"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   viewName ;", "}", "METHOD_END"], "methodName": ["getComponentViewName"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.metadata.model.AbstractEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   authMethod ;", "}", "METHOD_END"], "methodName": ["getAuthMethod"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   ejbMD . getContextServiceName (  )  ;", "}", "METHOD_END"], "methodName": ["getContextServiceName"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   declaredSecurityRoles ;", "}", "METHOD_END"], "methodName": ["getDeclaredSecurityRoles"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   ejbMD . getDeploymentDescriptorEnvironment (  )  ;", "}", "METHOD_END"], "methodName": ["getDeploymentDescriptorEnvironment"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   EJBViewMethodSecurityAttributesService . getServiceName ( ejbMD . getApplicationName (  )  ,    ejbMD . getModuleName (  )  ,    ejbMD . getEJBName (  )  ,    getClassName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEJBViewMethodSecurityAttributesService"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   realmName ;", "}", "METHOD_END"], "methodName": ["getRealmName"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   ejbMD . getSecurityDomain (  )  ;", "}", "METHOD_END"], "methodName": ["getSecurityDomain"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   transportGuarantee ;", "}", "METHOD_END"], "methodName": ["getTransportGuarantee"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   secureWsdlAccess ;", "}", "METHOD_END"], "methodName": ["isSecureWsdlAccess"], "fileName": "org.jboss.as.webservices.metadata.model.EJBEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   urlPattern ;", "}", "METHOD_END"], "methodName": ["getUrlPattern"], "fileName": "org.jboss.as.webservices.metadata.model.POJOEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   isDeclared ;", "}", "METHOD_END"], "methodName": ["isDeclared"], "fileName": "org.jboss.as.webservices.metadata.model.POJOEndpoint"}, {"methodBody": ["METHOD_START", "{", "return   two ;", "}", "METHOD_END"], "methodName": ["getTwo"], "fileName": "org.jboss.as.webservices.parser.TestDA2"}, {"methodBody": ["METHOD_START", "{", "this . two    =    two ;", "}", "METHOD_END"], "methodName": ["setTwo"], "fileName": "org.jboss.as.webservices.parser.TestDA2"}, {"methodBody": ["METHOD_START", "{", "return   list ;", "}", "METHOD_END"], "methodName": ["getList"], "fileName": "org.jboss.as.webservices.parser.TestDA3"}, {"methodBody": ["METHOD_START", "{", "this . list    =    list ;", "}", "METHOD_END"], "methodName": ["setList"], "fileName": "org.jboss.as.webservices.parser.TestDA3"}, {"methodBody": ["METHOD_START", "{", "return   map ;", "}", "METHOD_END"], "methodName": ["getMap"], "fileName": "org.jboss.as.webservices.parser.TestDA4"}, {"methodBody": ["METHOD_START", "{", "return   bool ;", "}", "METHOD_END"], "methodName": ["isBool"], "fileName": "org.jboss.as.webservices.parser.TestDA4"}, {"methodBody": ["METHOD_START", "{", "this . bool    =    bool ;", "}", "METHOD_END"], "methodName": ["setBool"], "fileName": "org.jboss.as.webservices.parser.TestDA4"}, {"methodBody": ["METHOD_START", "{", "this . map    =    map ;", "}", "METHOD_END"], "methodName": ["setMap"], "fileName": "org.jboss.as.webservices.parser.TestDA4"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( String . class . getName (  )  . equals ( propClass )  )     |  |     ( Boolean . class . getName (  )  . equals ( propClass )  )  )     |  |     ( Integer . class . getName (  )  . equals ( propClass )  )  )     |  |     ( JavaUtils . isPrimitive ( propClass )  )  ;", "}", "METHOD_END"], "methodName": ["isSupportedPropertyClass"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "try    {", "XMLStreamReader   xmlr    =    StAXUtils . createXMLStreamReader ( is )  ;", "return    . parse ( xmlr ,    loader )  ;", "}    catch    ( Exception   e )     {", "throw   new   WebServiceException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "int   iterate ;", "try    {", "iterate    =    reader . nextTag (  )  ;", "}    catch    ( XMLStreamException   e )     {", "iterate    =    reader . nextTag (  )  ;", "}", "List < DeploymentAspect >    deploymentAspects    =    null ;", "switch    ( iterate )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "break ;", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . DEPLOYMENT _ ASPECTS )  )     {", "deploymentAspects    =     . parseDeploymentAspects ( reader ,    loader )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "return   deploymentAspects ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "String   deploymentAspectClass    =    reader . getAttributeValue ( null ,    WSDeploymentAspectParser . CLASS )  ;", "if    ( deploymentAspectClass    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . missingDeploymentAspectClassAttribute (  )  ;", "}", "DeploymentAspect   deploymentAspect    =    null ;", "try    {", "@ SuppressWarnings (  \" unchecked \"  )", "Class <  ?    extends   DeploymentAspect >    clazz    =     (  ( Class <  ?    extends   DeploymentAspect >  )     ( Class . forName ( deploymentAspectClass ,    true ,    loader )  )  )  ;", "ClassLoader   orig    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( loader )  ;", "deploymentAspect    =    clazz . newInstance (  )  ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( orig )  ;", "}", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotInstantiateDeploymentAspect ( e ,    deploymentAspectClass )  ;", "}", "String   priority    =    reader . getAttributeValue ( null ,    WSDeploymentAspectParser . PRIORITY )  ;", "if    ( priority    !  =    null )     {", "deploymentAspect . setRelativeOrder ( Integer . parseInt ( priority . trim (  )  )  )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,    WSDeploymentAspectParser . NS ,    WSDeploymentAspectParser . DEPLOYMENT _ ASPECT )  )     {", "return   deploymentAspect ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,    WSDeploymentAspectParser . NS ,    WSDeploymentAspectParser . PROPERTY )  )     {", "WSDeploymentAspectParser . parseProperty ( reader ,    deploymentAspect ,    loader )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseDeploymentAspect"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "List < DeploymentAspect >    deploymentAspects    =    new   LinkedList < DeploymentAspect >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . DEPLOYMENT _ ASPECTS )  )     {", "return   deploymentAspects ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . DEPLOYMENT _ ASPECT )  )     {", "deploymentAspects . add (  . parseDeploymentAspect ( reader ,    loader )  )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseDeploymentAspects"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "List   list    =    null ;", "try    {", "list    =     (  ( List )     ( Class . forName ( propClass )  . newInstance (  )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotInstantiateList ( e ,    propClass )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . LIST )  )     {", "return   list ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . VALUE )  )     {", "list . add (  . parseSimpleValue ( reader ,    elementClass )  )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseListProperty"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "boolean   keyStartDone    =    false ;", "boolean   valueStartDone    =    false ;", "Object   key    =    null ;", "Object   value    =    null ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    (  (  ( StAXUtils . match ( reader ,     . NS ,     . ENTRY )  )     &  &    keyStartDone )     &  &    valueStartDone )     {", "map . put ( key ,    value )  ;", "return ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . KEY )  )     {", "keyStartDone    =    true ;", "key    =     . parseSimpleValue ( reader ,    keyClass )  ;", "} else", "if    ( StAXUtils . match ( reader ,     . NS ,     . VALUE )  )     {", "valueStartDone    =    true ;", "value    =     . parseSimpleValue ( reader ,    valueClass )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseMapEntry"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "Map   map    =    null ;", "try    {", "map    =     (  ( Map )     ( Class . forName ( propClass ,    true ,    loader )  . newInstance (  )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . cannotInstantiateMap ( e ,    propClass )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . MAP )  )     {", "return   map ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . ENTRY )  )     {", ". parseMapEntry ( reader ,    map ,    keyClass ,    valueClass )  ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseMapProperty"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "Class <  ?    extends   DeploymentAspect >    deploymentAspectClass    =    deploymentAspect . getClass (  )  ;", "String   propName    =    reader . getAttributeValue ( null ,     . NAME )  ;", "if    ( propName    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . missingPropertyNameAttribute ( deploymentAspect )  ;", "}", "String   propClass    =    reader . getAttributeValue ( null ,     . CLASS )  ;", "if    ( propClass    =  =    null )     {", "throw   WSLogger . ROOT _ LOGGER . missingPropertyClassAttribute ( deploymentAspect )  ;", "} else    {", "try    {", "if    (  . isSupportedPropertyClass ( propClass )  )     {", "Method   m    =     . selectMethod ( deploymentAspectClass ,    propName ,    propClass )  ;", "m . invoke ( deploymentAspect ,     . parseSimpleValue ( reader ,    propClass )  )  ;", "return ;", "}", "}    catch    ( Exception   e )     {", "throw   new   IllegalStateException ( e )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . PROPERTY )  )     {", "return ;", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndTag ( reader . getLocalName (  )  )  ;", "}", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "if    ( StAXUtils . match ( reader ,     . NS ,     . MAP )  )     {", "try    {", "Method   m    =     . selectMethod ( deploymentAspectClass ,    propName ,    propClass )  ;", "Map   map    =     . parseMapProperty ( reader ,    propClass ,    reader . getAttributeValue ( null ,     . KEY _ CLASS )  ,    reader . getAttributeValue ( null ,     . VALUE _ CLASS )  ,    loader )  ;", "m . invoke ( deploymentAspect ,    map )  ;", "}    catch    ( Exception   e )     {", "throw   new   IllegalStateException ( e )  ;", "}", "} else", "if    ( StAXUtils . match ( reader ,     . NS ,     . LIST )  )     {", "try    {", "Method   m    =     . selectMethod ( deploymentAspectClass ,    propName ,    propClass )  ;", "List   list    =     . parseListProperty ( reader ,    propClass ,    reader . getAttributeValue ( null ,     . ELEMENT _ CLASS )  )  ;", "m . invoke ( deploymentAspect ,    list )  ;", "}    catch    ( Exception   e )     {", "throw   new   IllegalStateException ( e )  ;", "}", "} else    {", "throw   WSLogger . ROOT _ LOGGER . unexpectedElement ( reader . getLocalName (  )  )  ;", "}", "}", "}", "}", "throw   WSLogger . ROOT _ LOGGER . unexpectedEndOfDocument (  )  ;", "}", "METHOD_END"], "methodName": ["parseProperty"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "if    ( String . class . getName (  )  . equals ( propClass )  )     {", "return   StAXUtils . elementAsString ( reader )  ;", "} else", "if    ( Boolean . class . getName (  )  . equals ( propClass )  )     {", "return   StAXUtils . elementAsBoolean ( reader )  ;", "} else", "if    ( Integer . class . getName (  )  . equals ( propClass )  )     {", "return   StAXUtils . elementAsInt ( reader )  ;", "} else", "if    ( boolean . class . getName (  )  . equals ( propClass )  )     {", "return   StAXUtils . elementAsBoolean ( reader )  ;", "} else    {", "throw   logging . WSLogger . ROOT _ LOGGER . unsupportedPropertyClass ( propClass )  ;", "}", "}", "METHOD_END"], "methodName": ["parseSimpleValue"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "Method [  ]    methods    =    deploymentAspectClass . getMethods (  )  ;", "for    ( Method   m    :    methods )     {", "if    ( m . getName (  )  . equals (  (  \" set \"     +     ( JavaUtils . capitalize ( propName )  )  )  )  )     {", "Class <  ?  >  [  ]    pars    =    m . getParameterTypes (  )  ;", "if    (  (  ( pars . length )     =  =     1  )     &  &     (  ( propClass . equals ( pars [  0  ]  . getName (  )  )  )     |  |     ( pars [  0  ]  . isAssignableFrom ( Class . forName ( propClass )  )  )  )  )     {", "return   m ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["selectMethod"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParser"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource ( resourceName )  ;", "assertNotNull (  (  \" URL   not   null   for :     \"     +    resourceName )  ,    url )  ;", "return   url ;", "}", "METHOD_END"], "methodName": ["getResourceUrl"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParserTestCase"}, {"methodBody": ["METHOD_START", "{", "return   getResourceUrl (  (  \" parser /  \"     +    xmlName )  )  ;", "}", "METHOD_END"], "methodName": ["getXmlUrl"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParserTestCase"}, {"methodBody": ["METHOD_START", "{", "InputStream   is    =    getXmlUrl (  \" jbossws - deployment - aspects - example . xml \"  )  . openStream (  )  ;", "try    {", "List < DeploymentAspect >    das    =     . parse ( is ,    this . getClass (  )  . getClassLoader (  )  )  ;", "assertEquals (  4  ,    das . size (  )  )  ;", "boolean   da 1 Found    =    false ;", "boolean   da 2 Found    =    false ;", "boolean   da 3 Found    =    false ;", "boolean   da 4 Found    =    false ;", "for    ( DeploymentAspect   da    :    das )     {", "if    ( da   instanceof   TestDA 2  )     {", "da 2 Found    =    true ;", "TestDA 2    da 2     =     (  ( TestDA 2  )     ( da )  )  ;", "assertEquals (  \" myString \"  ,    da 2  . getTwo (  )  )  ;", "} else", "if    ( da   instanceof   TestDA 3  )     {", "da 3 Found    =    true ;", "TestDA 3    da 3     =     (  ( TestDA 3  )     ( da )  )  ;", "assertNotNull ( da 3  . getList (  )  )  ;", "assertTrue ( da 3  . getList (  )  . contains (  \" One \"  )  )  ;", "assertTrue ( da 3  . getList (  )  . contains (  \" Two \"  )  )  ;", "} else", "if    ( da   instanceof   TestDA 4  )     {", "da 4 Found    =    true ;", "TestDA 4    da 4     =     (  ( TestDA 4  )     ( da )  )  ;", "assertEquals ( true ,    da 4  . isBool (  )  )  ;", "assertNotNull ( da 4  . getMap (  )  )  ;", "assertEquals (  1  ,     (  ( int )     ( da 4  . getMap (  )  . get (  \" One \"  )  )  )  )  ;", "assertEquals (  3  ,     (  ( int )     ( da 4  . getMap (  )  . get (  \" Three \"  )  )  )  )  ;", "} else", "if    ( da   instanceof   TestDA 1  )     {", "da 1 Found    =    true ;", "}", "}", "assertTrue ( da 1 Found )  ;", "assertTrue ( da 2 Found )  ;", "assertTrue ( da 3 Found )  ;", "assertTrue ( da 4 Found )  ;", "}    finally    {", "if    ( is    !  =    null )     {", "is . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["test"], "fileName": "org.jboss.as.webservices.parser.WSDeploymentAspectParserTestCase"}, {"methodBody": ["METHOD_START", "{", "WebHost   virtualHost    =    ASHelper . getMSCService ( SERVICE _ NAME . append ( hostname )  ,    WebHost . class )  ;", "return   new   Impl ( virtualHost )  ;", "}", "METHOD_END"], "methodName": ["newEndpointPublisher"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "EndpointPublisherImpl   publisher    =    new   EndpointPublisherImpl ( true )  ;", "publisher . doDeploy ( target ,    unit )  ;", "}", "METHOD_END"], "methodName": ["doDeployStep"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherHelper"}, {"methodBody": ["METHOD_START", "{", "EndpointPublisherImpl   publisher    =    new   EndpointPublisherImpl ( null ,    true )  ;", "return   publisher . doPrepare ( context ,    loader ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd )  ;", "}", "METHOD_END"], "methodName": ["doPrepareStep"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherHelper"}, {"methodBody": ["METHOD_START", "{", "EndpointPublisherImpl   publisher    =    new   EndpointPublisherImpl ( host ,    true )  ;", "return   publisher . doPublish ( target ,    unit )  ;", "}", "METHOD_END"], "methodName": ["doPublishStep"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherHelper"}, {"methodBody": ["METHOD_START", "{", "EndpointPublisherImpl   publisher    =    new   EndpointPublisherImpl ( true )  ;", "publisher . undeploy ( unit )  ;", "}", "METHOD_END"], "methodName": ["undoDeployStep"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherHelper"}, {"methodBody": ["METHOD_START", "{", "List < Endpoint >    eps    =    wsctx . getEndpoints (  )  ;", "if    (  ( eps    =  =    null )     |  |     ( eps . isEmpty (  )  )  )     {", "return ;", "}", "Impl   publisher    =    new   Impl ( host ,    true )  ;", "publisher . stopWebApp ( eps . get (  0  )  . getService (  )  . getDeployment (  )  )  ;", "}", "METHOD_END"], "methodName": ["undoPublishStep"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherHelper"}, {"methodBody": ["METHOD_START", "{", "for    ( JBossServletMetaData   smd    :    jbwebMD . getServlets (  )  )     {", "final   String   sc    =    smd . getServletClass (  )  ;", "if    ( sc . equals ( WSFServlet . class . getName (  )  )  )     {", "ServletBuilder   letBuilder    =    new   ServletBuilder (  )  ;", "final   String   letName    =    smd . getServletName (  )  ;", "List < ParamValueMetaData >    params    =    smd . getInitParam (  )  ;", "List < String >    urlPatterns    =    null ;", "for    ( ServletMappingMetaData   smmd    :    jbwebMD . getServletMappings (  )  )     {", "if    ( smmd . getServletName (  )  . equals ( letName )  )     {", "urlPatterns    =    smmd . getUrlPatterns (  )  ;", "letBuilder . addUrlMappings ( urlPatterns )  ;", "break ;", "}", "}", "WSFServlet   wsfs    =    new   WSFServlet (  )  ;", "letBuilder . setServletName ( letName )  ;", "letBuilder . setServlet ( wsfs )  ;", "letBuilder . setServletClass ( WSFServlet . class )  ;", "for    ( ParamValueMetaData   param    :    params )     {", "letBuilder . addInitParam ( param . getParamName (  )  ,    param . getParamValue (  )  )  ;", "}", "deployment . addServlet ( letBuilder )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addServlets"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentSContainer . getSContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "List < DeploymentAspect >    aspects    =    getDeploymentAspects (  )  ;", "ClassLoader   origClassLoader    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "Deployment   dep    =    null ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( ClassLoaderProvider . getDefaultProvider (  )  . getServerIntegrationClassLoader (  )  )  ;", "dep    =    unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  ;", "dep . addAttachment ( STarget . class ,    target )  ;", "DeploymentAspectManager   dam    =    new   DeploymentAspectManagerImpl (  )  ;", "dam . setDeploymentAspects ( aspects )  ;", "dam . deploy ( dep )  ;", "}    finally    {", "if    ( dep    !  =    null )     {", "dep . removeAttachment ( STarget . class )  ;", "}", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( origClassLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["doDeploy"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   origClassLoader    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "WSDeploymentUnit   unit    =    new   WSDeploymentUnit ( loader ,    context ,    urlPatternToClassNameMap ,    jbwmd ,    metadata ,    jbwsMetadata )  ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( ClassLoaderProvider . getDefaultProvider (  )  . getServerIntegrationClassLoader (  )  )  ;", "WSDeploymentBuilder . getInstance (  )  . build ( unit )  ;", "return   unit ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( origClassLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["doPrepare"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "Deployment   deployment    =    unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  ;", "List < Endpoint >    endpoints    =    deployment . getService (  )  . getEndpoints (  )  ;", "if    (  !  ( runningInService )  )     {", "final   ServiceRegistry   registry    =    unit . getServiceRegistry (  )  ;", "for    ( Endpoint   ep    :    endpoints )     {", "final   ServiceName   serviceName    =    EndpointService . getServiceName ( unit ,    ep . getShortName (  )  )  ;", "registry . getRequiredService ( serviceName )  . awaitValue (  )  ;", "}", "}", "deployment . addAttachment ( WebDeploymentController . class ,     . startWebApp ( host ,    unit )  )  ;", "return   new   Context ( unit . getAttachment ( WSAttachmentKeys . JBOSSWEB _ METADATA _ KEY )  . getContextRoot (  )  ,    endpoints )  ;", "}", "METHOD_END"], "methodName": ["doPublish"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "return   EndpointPublisherImpl . currentServiceContainer (  )  . getService ( WSServices . CONFIG _ SERVICE )  . getServiceContainer (  )  ;", "}", "METHOD_END"], "methodName": ["getBaseTarget"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "return   runningInService    ?    EndpointPublisherImpl . getReplacedDeploymentAspects (  )     :    EndpointPublisherImpl . getPublisherDeploymentAspects (  )  ;", "}", "METHOD_END"], "methodName": ["getDeploymentAspects"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( EndpointPublisherImpl . publisherDepAspects )     =  =    null )     {", "EndpointPublisherImpl . publisherDepAspects    =    new   LinkedList < DeploymentAspect >  (  )  ;", "List < DeploymentAspect >    serverAspects    =    DeploymentAspectsProvider . getSortedDeploymentAspects (  )  ;", "for    ( DeploymentAspect   aspect    :    serverAspects )     {", "if    ( aspect   instanceof   EndpointServiceDeploymentAspect )     {", "final   EndpointServiceDeploymentAspect   a    =     (  ( EndpointServiceDeploymentAspect )     ( aspect )  )  ;", "EndpointServiceDeploymentAspect   clone    =     (  ( EndpointServiceDeploymentAspect )     ( a . clone (  )  )  )  ;", "clone . setStopServices ( true )  ;", "EndpointPublisherImpl . publisherDepAspects . add ( clone )  ;", "} else", "if    ( aspect   instanceof   EndpointHandlerDeploymentAspect )     {", "EndpointPublisherImpl . publisherDepAspects . add ( aspect )  ;", "EndpointPublisherImpl . ForceJAXWSInvocationHandlerDeploymentAspect   handlerAspect    =    new   EndpointPublisherImpl . ForceJAXWSInvocationHandlerDeploymentAspect (  )  ;", "EndpointPublisherImpl . publisherDepAspects . add ( handlerAspect )  ;", "} else    {", "EndpointPublisherImpl . publisherDepAspects . add ( aspect )  ;", "}", "}", "}", "return   EndpointPublisherImpl . publisherDepAspects ;", "}", "METHOD_END"], "methodName": ["getPublisherDeploymentAspects"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( EndpointPublisherImpl . depAspects )     =  =    null )     {", "EndpointPublisherImpl . depAspects    =    new   LinkedList < DeploymentAspect >  (  )  ;", "List < DeploymentAspect >    serverAspects    =    DeploymentAspectsProvider . getSortedDeploymentAspects (  )  ;", "for    ( DeploymentAspect   aspect    :    serverAspects )     {", "if    ( aspect   instanceof   EndpointHandlerDeploymentAspect )     {", "EndpointPublisherImpl . depAspects . add ( aspect )  ;", "EndpointPublisherImpl . ForceJAXWSInvocationHandlerDeploymentAspect   handlerAspect    =    new   EndpointPublisherImpl . ForceJAXWSInvocationHandlerDeploymentAspect (  )  ;", "EndpointPublisherImpl . depAspects . add ( handlerAspect )  ;", "} else    {", "EndpointPublisherImpl . depAspects . add ( aspect )  ;", "}", "}", "}", "return   EndpointPublisherImpl . depAspects ;", "}", "METHOD_END"], "methodName": ["getReplacedDeploymentAspects"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "DeploymentUnit   unit    =    doPrepare ( context ,    loader ,    urlPatternToClassNameMap ,    jbwmd ,    metadata ,    jbwsMetadata )  ;", "doDeploy ( target ,    unit )  ;", "return   do ( target ,    unit )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "WebDeploymentBuilder   deployment    =    new   WebDeploymentBuilder (  )  ;", "WebDeploymentController   handle ;", "try    {", "JBossWebMetaData   jbwebMD    =    unit . getAttachment ( WSAttachmentKeys . JBOSSWEB _ METADATA _ KEY )  ;", "deployment . setContextRoot ( jbwebMD . getContextRoot (  )  )  ;", "ServerConfigService   config    =     (  ( ServerConfigService )     ( unit . getServiceRegistry (  )  . getService ( WSServices . CONFIG _ SERVICE )  . getService (  )  )  )  ;", "File   docBase    =    new   File ( config . getValue (  )  . getServerTempDir (  )  ,    jbwebMD . getContextRoot (  )  )  ;", "if    (  !  ( docBase . exists (  )  )  )     {", "docBase . mkdirs (  )  ;", "}", "deployment . setDocumentRoot ( docBase )  ;", "deployment . setClassLoader ( unit . getAttachment ( WSAttachmentKeys . CLASSLOADER _ KEY )  )  ;", "deployment . addAllowedRequestPredicate ( new   AllowWSRequestPredicate (  )  )  ;", ". addServlets ( jbwebMD ,    deployment )  ;", "handle    =    host . addWebDeployment ( deployment )  ;", "handle . create (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . createContextPhaseFailed ( e )  ;", "}", "try    {", "handle . start (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . startContextPhaseFailed ( e )  ;", "}", "return   handle ;", "}", "METHOD_END"], "methodName": ["startWebApp"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "WebDeploymentController   context ;", "try    {", "context    =    deployment . getAttachment ( WebDeploymentController . class )  ;", "context . stop (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . stopContextPhaseFailed ( e )  ;", "}", "try    {", "context . destroy (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . destroyContextPhaseFailed ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["stopWebApp"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "undeploy ( unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  )  ;", "}", "METHOD_END"], "methodName": ["undeploy"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "List < DeploymentAspect >    aspects    =    getDeploymentAspects (  )  ;", "ClassLoader   origClassLoader    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( ClassLoaderProvider . getDefaultProvider (  )  . getServerIntegrationClassLoader (  )  )  ;", "DeploymentAspectManager   dam    =    new   DeploymentAspectManag (  )  ;", "dam . setDeploymentAspects ( aspects )  ;", "dam . undeploy ( deployment )  ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( origClassLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["undeploy"], "fileName": "org.jboss.as.webservices.publish.EndpointPublisherImpl"}, {"methodBody": ["METHOD_START", "{", "if    ( urlPattern    =  =    null )     {", "urlPattern    =     \"  /  *  \"  ;", "} else    {", "urlPattern    =    urlPattern . trim (  )  ;", "if    (  !  ( urlPattern . startsWith (  \"  /  \"  )  )  )     {", "urlPattern    =     \"  /  \"     +    urlPattern ;", "}", "}", "jaxws . addEndpoint ( new   POJOEndpoint ( endpointName ,    className ,    null ,    urlPattern ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addEndpoint"], "fileName": "org.jboss.as.webservices.publish.WSEndpointDeploymentUnit"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentSContainer . getSContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.publish.WSEndpointDeploymentUnit"}, {"methodBody": ["METHOD_START", "{", "final   StringTokenizer   st    =    new   StringTokenizer ( urlPattern ,     \"  /  *  \"  )  ;", "final   StringBuilder   sb    =    new   StringBuilder (  )  ;", "String   token    =    null ;", "boolean   first    =    true ;", "while    ( st . hasMoreTokens (  )  )     {", "token    =    st . nextToken (  )  ;", "if    ( token    !  =    null )     {", "if    (  ! first )", "sb . append (  '  .  '  )  ;", "sb . append ( token )  ;", "first    =    false ;", "}", "}", "return   first    ?    className    :    sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getShortName"], "fileName": "org.jboss.as.webservices.publish.WSEndpointDeploymentUnit"}, {"methodBody": ["METHOD_START", "{", "ServerAuthenticationContext   context    =    this . securityDomain . createNewAuthenticationContext (  )  ;", "PasswordGuessEvidence   evidence    =    new   PasswordGuessEvidence (  ( password    !  =    null    ?    password . toCharArray (  )     :    null )  )  ;", "try    {", "context . setAuthenticationName ( username )  ;", "if    ( context . verifyEvidence ( evidence )  )     {", "if    ( context . authorize (  )  )     {", "context . succeed (  )  ;", "return   context . getAuthorizedIdentity (  )  ;", "} else    {", "context . fail (  )  ;", "WSLogger . ROOT _ LOGGER . failedAuthorization ( username )  ;", "}", "} else    {", "context . fail (  )  ;", "WSLogger . ROOT _ LOGGER . failedAuthentication ( username )  ;", "}", "}    catch    ( IllegalArgumentException    |    IllegalStateException    |    RealmUnavailableException   e )     {", "context . fail (  )  ;", "WSLogger . ROOT _ LOGGER . failedAuthenticationWithException ( e ,    username ,    e . getMessage (  )  )  ;", "}    finally    {", "if    (  !  ( context . isDone (  )  )  )", "context . fail (  )  ;", "evidence . destroy (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["authenticate"], "fileName": "org.jboss.as.webservices.security.ElytronSecurityDomainContextImpl"}, {"methodBody": ["METHOD_START", "{", "final   SecurityIdentity   ci    =    currentIdentity . get (  )  ;", "if    ( ci    !  =    null )     {", "ci . runAs ( action )  ;", "currentIdentity . set ( null )  ;", "} else    {", "action . call (  )  ;", "}", "}", "METHOD_END"], "methodName": ["runAs"], "fileName": "org.jboss.as.webservices.security.ElytronSecurityDomainContextImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   SecurityAdaptorImpl (  )  ;", "}", "METHOD_END"], "methodName": ["newSecurityAdapter"], "fileName": "org.jboss.as.webservices.security.SecurityAdaptorFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   SecurityContextAssociation . getCredential (  )  ;", "}", "METHOD_END"], "methodName": ["getCredential"], "fileName": "org.jboss.as.webservices.security.SecurityAdaptorImpl"}, {"methodBody": ["METHOD_START", "{", "return   SecurityContextAssociation . getPrincipal (  )  ;", "}", "METHOD_END"], "methodName": ["getPrincipal"], "fileName": "org.jboss.as.webservices.security.SecurityAdaptorImpl"}, {"methodBody": ["METHOD_START", "{", "SecurityContextAssociation . setCredential ( credential )  ;", "}", "METHOD_END"], "methodName": ["setCredential"], "fileName": "org.jboss.as.webservices.security.SecurityAdaptorImpl"}, {"methodBody": ["METHOD_START", "{", "SecurityContextAssociation . setPrincipal ( principal )  ;", "}", "METHOD_END"], "methodName": ["setPrincipal"], "fileName": "org.jboss.as.webservices.security.SecurityAdaptorImpl"}, {"methodBody": ["METHOD_START", "{", "return   AccessController . doPrivileged ( new   PrivilegedAction < SecurityContext >  (  )     {", "@ Override", "public   SecurityContext   run (  )     {", "try    {", "return   SecurityContextFactory . createSecurityContext ( domain )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createSecurityContext"], "fileName": "org.jboss.as.webservices.security.SecurityDomainContextImpl"}, {"methodBody": ["METHOD_START", "{", "action . call (  )  ;", "}", "METHOD_END"], "methodName": ["runAs"], "fileName": "org.jboss.as.webservices.security.SecurityDomainContextImpl"}, {"methodBody": ["METHOD_START", "{", "AccessController . doPrivileged ( new   PrivilegedAction < Void >  (  )     {", "@ Override", "public   Void   run (  )     {", "ContextAssociation . setContext ( sc )  ;", "return   null ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["setSecurityContextOnAssociation"], "fileName": "org.jboss.as.webservices.security.SecurityDomainContextImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   ListInjector < UnifiedHandlerChainMetaData >  ( postHandlerChains )  ;", "}", "METHOD_END"], "methodName": ["getPostHandlerChainsInjector"], "fileName": "org.jboss.as.webservices.service.ConfigService"}, {"methodBody": ["METHOD_START", "{", "return   new   ListInjector < UnifiedHandlerChainMetaData >  ( preHandlerChains )  ;", "}", "METHOD_END"], "methodName": ["getPreHandlerChainsInjector"], "fileName": "org.jboss.as.webservices.service.ConfigService"}, {"methodBody": ["METHOD_START", "{", "return   new   ListInjector < PropertyService >  ( properties )  ;", "}", "METHOD_END"], "methodName": ["getPropertiesInjector"], "fileName": "org.jboss.as.webservices.service.ConfigService"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.service.EndpointDeployService"}, {"methodBody": ["METHOD_START", "{", "return   EndpointDeployService . install ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd ,    null )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.EndpointDeployService"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    EndpointPublisherHelper . doPrepareStep ( context ,    loader ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd )  ;", "if    ( deploymentAttachments    !  =    null )     {", "Deployment   dep    =    unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  ;", "for    ( Map . Entry < Class <  ?  >  ,    Object >    e    :    deploymentAttachments . entrySet (  )  )     {", "dep . addAttachment ( e . getKey (  )  ,    e . getValue (  )  )  ;", "}", "}", "final      service    =    new    ( context ,    unit )  ;", "final   ServiceBuilder < DeploymentUnit >    builder    =    serviceTarget . addService ( service . getName (  )  ,    service )  ;", "builder . addDependency ( REQUIRED ,    WSServices . CONFIG _ SERVICE )  ;", "builder . setInitialMode ( ACTIVE )  ;", "builder . install (  )  ;", "return   unit ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.EndpointDeployService"}, {"methodBody": ["METHOD_START", "{", "return   EndpointPublishService . createServiceBuilder ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["createServiceBuilder"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "return   EndpointPublishService . createServiceBuilder ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd ,    null )  ;", "}", "METHOD_END"], "methodName": ["createServiceBuilder"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    EndpointDeployService . install ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd ,    deploymentAttachments )  ;", "final      service    =    new    ( context ,    unit )  ;", "final   ServiceBuilder < Context >    builder    =    serviceTarget . addService ( service . getName (  )  ,    service )  ;", "builder . addDependency ( REQUIRED ,    WSServices . CONFIG _ SERVICE )  ;", "builder . addDependency ( SERVICE _ NAME . append ( hostName )  ,    WebHost . class ,    service . getHostInjector (  )  )  ;", "for    ( ServiceName   epServiceName    :    EndpointService . getServiceNamesFromDeploymentUnit ( unit )  )     {", "builder . addDependency ( REQUIRED ,    epServiceName )  ;", "}", "return   builder ;", "}", "METHOD_END"], "methodName": ["createServiceBuilder"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "return   hostInjector ;", "}", "METHOD_END"], "methodName": ["getHostInjector"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "EndpointPublishService . install ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "ServiceBuilder < Context >    builder    =    EndpointPublishService . createServiceBuilder ( serviceTarget ,    context ,    loader ,    hostName ,    urlPatternToClassName ,    jbwmd ,    wsmd ,    jbwsmd )  ;", "builder . setInitialMode ( ACTIVE )  ;", "builder . install (  )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.EndpointPublishService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurreContainer . getServiceContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   serverConfigServiceValue ;", "}", "METHOD_END"], "methodName": ["getAbstractServerConfigInjector"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "JBossWebMetaData   metadata    =    ep . getService (  )  . getDeployment (  )  . getAttachment ( JBossWebMetaData . class )  ;", "String   metaDataSecurityDomain    =     ( metadata    !  =    null )     ?    metadata . getSecurityDomain (  )     :    null ;", "if    ( metaDataSecurityDomain    =  =    null )     {", "if    ( unit . hasAttachment ( DEFAULT _ SECURITY _ DOMAIN )  )     {", "metaDataSecurityDomain    =    unit . getAttachment ( DEFAULT _ SECURITY _ DOMAIN )  ;", "} else    {", "metaDataSecurityDomain    =    SecurityConstants . DEFAULT _ APPLICATION _ POLICY ;", "}", "} else    {", "metaDataSecurityDomain    =    SecurityUtil . unprefixSecurityDomain ( metaDataSecurityDomain . trim (  )  )  ;", "}", "return   metaDataSecurityDomain ;", "}", "METHOD_END"], "methodName": ["getDeploymentSecurityDomainName"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   ejbMethodSecurityAttributeServiceValue ;", "}", "METHOD_END"], "methodName": ["getEJBMethodSecurityAttributeServiceInjector"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "for    ( EJBEndpoint   ep    :    ASHelper . getJaxwsEjbs ( unit )  )     {", "if    ( ep . getClassName (  )  . equals ( endpoint . getTargetBeanName (  )  )  )     {", "return   ep . getEJBViewMethodSecurityAttributesService (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEJBViewMethodSecurityAttributesServiceName"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   ejbApplicationSecurityDomainValue ;", "}", "METHOD_END"], "methodName": ["getEjbApplicationSeruityDomainInjector"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   elytronSecurityDomain ;", "}", "METHOD_END"], "methodName": ["getElytronSecurityDomainInjector"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   securityDomainContextValue ;", "}", "METHOD_END"], "methodName": ["getSecurityDomainContextInjector"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( unit . getParent (  )  )     !  =    null )     {", "return   WSSENDPOINT _ SERVICE . append ( unit . getParent (  )  . getName (  )  )  . append ( unit . getName (  )  )  . append ( endpointName )  ;", "} else    {", "return   WSSENDPOINT _ SERVICE . append ( unit . getName (  )  )  . append ( endpointName )  ;", "}", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "final   List < ServiceName >    endpointServiceNames    =    new   ArrayList < ServiceName >  (  )  ;", "Deployment   deployment    =    unit . getAttachment ( WSAttachmentKeys . DEPLOYMENT _ KEY )  ;", "for    ( Endpoint   ep    :    deployment . getService (  )  . getEndpoints (  )  )     {", "endpointServiceNames . add (  . getServiceName ( unit ,    ep . getShortName (  )  )  )  ;", "}", "return   endpointServiceNames ;", "}", "METHOD_END"], "methodName": ["getServiceNamesFromDeploymentUnit"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   serviceName    =    EndpointService . getServiceName ( unit ,    endpoint . getShortName (  )  )  ;", "final   String   propContext    =    endpoint . getName (  )  . getKeyProperty ( SEPID _ PROPERTY _ CONTEXT )  ;", "final   String   propEndpoint    =    endpoint . getName (  )  . getKeyProperty ( SEPID _ PROPERTY _ ENDPOINT )  ;", "final   StringBuilder   context    =    new   StringBuilder ( Endpoint . SEPID _ PROPERTY _ CONTEXT )  . append (  \"  =  \"  )  . append ( propContext )  ;", "final   EndpointService   service    =    new   EndpointService ( endpoint ,    serviceName )  ;", "final   ServiceBuilder < Endpoint >    builder    =    serviceTarget . addService ( serviceName ,    service )  ;", "final   ServiceName   alias    =    WSServices . ENDPOINT _ SERVICE . append ( context . toString (  )  )  . append ( propEndpoint )  ;", "builder . addAliases ( alias )  ;", "final   String   domainName    =    EndpointService . getDeploymentSecurityDomainName ( endpoint ,    unit )  ;", "endpoint . setProperty ( EndpointService . SECURITY _ DOMAIN _ NAME ,    domainName )  ;", "if    ( EndpointService . isElytronSecurityDomain ( endpoint ,    domainName )  )     {", "if    ( JAXWS _ EJB 3  . equals ( endpoint . getType (  )  )  )     {", "ServiceName   ejbSecurityDomainServiceName    =    EndpointService . APPLICATION _ SECURITY _ DOMAIN _ RUNTIME _ CAPABILITY . getCapabilityServiceName ( domainName ,    ApplicationSecurityDomain . class )  ;", "builder . addDependency ( ejbSecurityDomainServiceName ,    ApplicationSecurityDomain . class ,    service . getEjbApplicationSeruityDomainInjector (  )  )  ;", "} else    {", "ServiceName   elytronDomainName    =    EndpointService . ELYTRON _ DOMAIN _ CAPABILITY . getCapabilityServiceName ( domainName ,    SecurityDomain . class )  ;", "builder . addDependency ( elytronDomainName ,    SecurityDomain . class ,    service . getElytronSecurityDomainInjector (  )  )  ;", "}", "} else    {", "builder . addDependency ( SERVICE _ NAME . append ( domainName )  ,    SecurityDomainContext . class ,    service . getSecurityDomainContextInjector (  )  )  ;", "}", "builder . addDependency ( REQUIRED ,    WSServices . CONFIG _ SERVICE ,    AbstractServerConfig . class ,    service . getAbstractServerConfigInjector (  )  )  ;", "if    ( JAXWS _ EJB 3  . equals ( endpoint . getType (  )  )  )     {", "builder . addDependency ( EndpointService . getEJBViewMethodSecurityAttributesServiceName ( unit ,    endpoint )  ,    EJBViewMethodSecurityAttributesService . class ,    service . getEJBMethodSecurityAttributeServiceInjector (  )  )  ;", "}", "builder . setInitialMode ( ACTIVE )  ;", "builder . install (  )  ;", "unit . addToAttachmentList ( WEB _ DEPENDENCIES ,    serviceName )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   serviceName ;", "if    ( JAXWS _ EJB 3  . equals ( endpoint . getType (  )  )  )     {", "serviceName    =     . APPLICATION _ SECURITY _ DOMAIN _ RUNTIME _ CAPABILITY . getCapabilityServiceName ( domainName ,    ApplicationSecurityDomain . class )  ;", "} else    {", "serviceName    =     . ELYTRON _ DOMAIN _ CAPABILITY . getCapabilityServiceName ( domainName ,    SecurityDomain . class )  ;", "}", "return    (  . currentServiceContainer (  )  . getService ( serviceName )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isElytronSecurityDomain"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbeanServer    =    serverConfigServiceValue . getValue (  )  . getMbeanServer (  )  ;", "if    ( mbeanServer    !  =    null )     {", "try    {", "Managed   jmx    =    new   Managed ( endpoint ,    mbeanServer )  ;", "mbeanServer . registerMBean ( jmx ,    endpoint . getName (  )  )  ;", "}    catch    ( final   JMException   ex )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Cannot   register   endpoint   in   JMX   server \"  ,    ex )  ;", "WSLogger . ROOT _ LOGGER . cannotRegister ( endpoint . getShortName (  )  )  ;", "}", "} else    {", "WSLogger . ROOT _ LOGGER . mBeanServerNotAvailable ( endpoint . getShortName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerEndpoint"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbeanServer    =    serverConfigServiceValue . getValue (  )  . getMbeanServer (  )  ;", "if    ( mbeanServer    !  =    null )     {", "try    {", "mbeanServer . registerMBean ( processor ,    ObjectNameFactory . create (  (  (  ( ep . getName (  )  )     +     \"  , recordProcessor =  \"  )     +     ( processor . getName (  )  )  )  )  )  ;", "}    catch    ( final   JMException   ex )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Cannot   register   endpoint   in   JMX   server ,    trying   with   the   default   ManagedRecordProcessor \"  ,    ex )  ;", "try    {", "mbeanServer . registerMBean ( new   ws . common . monitoring . ManagedRecordProcessor ( processor )  ,    ObjectNameFactory . create (  (  (  ( ep . getName (  )  )     +     \"  , recordProcessor =  \"  )     +     ( processor . getName (  )  )  )  )  )  ;", "}    catch    ( final   JMException   e )     {", "WSLogger . ROOT _ LOGGER . cannotRegisterRecordProcessor (  )  ;", "}", "}", "} else    {", "WSLogger . ROOT _ LOGGER . mBeanServerNotAvailable ( processor )  ;", "}", "}", "METHOD_END"], "methodName": ["registerRecordProcessor"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   serviceName    =    EndpointService . getServiceName ( unit ,    endpoint . getShortName (  )  )  ;", "final   ServiceController <  ?  >    endpointService    =    EndpointService . currentServiceContainer (  )  . getService ( serviceName )  ;", "if    ( endpointService    !  =    null )     {", "endpointService . setMode ( REMOVE )  ;", "}", "}", "METHOD_END"], "methodName": ["uninstall"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbeanServer    =    serverConfigServiceValue . getValue (  )  . getMbeanServer (  )  ;", "if    ( mbeanServer    !  =    null )     {", "try    {", "mbeanServer . unregisterMBean ( endpoint . getName (  )  )  ;", "}    catch    ( final   JMException   ex )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Cannot   unregister   endpoint   from   JMX   server \"  ,    ex )  ;", "WSLogger . ROOT _ LOGGER . cannotUnregister ( endpoint . getShortName (  )  )  ;", "}", "} else    {", "WSLogger . ROOT _ LOGGER . mBeanServerNotAvailable ( endpoint . getShortName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["unregisterEndpoint"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbeanServer    =    serverConfigServiceValue . getValue (  )  . getMbeanServer (  )  ;", "if    ( mbeanServer    !  =    null )     {", "try    {", "mbeanServer . unregisterMBean ( ObjectNameFactory . create (  (  (  ( ep . getName (  )  )     +     \"  , recordProcessor =  \"  )     +     ( processor . getName (  )  )  )  )  )  ;", "}    catch    ( final   JMException   e )     {", "WSLogger . ROOT _ LOGGER . cannotUnregisterRecordProcessor (  )  ;", "}", "} else    {", "WSLogger . ROOT _ LOGGER . mBeanServerNotAvailable ( processor )  ;", "}", "}", "METHOD_END"], "methodName": ["unregisterRecordProcessor"], "fileName": "org.jboss.as.webservices.service.EndpointService"}, {"methodBody": ["METHOD_START", "{", "return   new   ListInjector < UnifiedHandlerMetaData >  ( handlers )  ;", "}", "METHOD_END"], "methodName": ["getHandlersInjector"], "fileName": "org.jboss.as.webservices.service.HandlerChainService"}, {"methodBody": ["METHOD_START", "{", "return   propName ;", "}", "METHOD_END"], "methodName": ["getPropName"], "fileName": "org.jboss.as.webservices.service.PropertyService"}, {"methodBody": ["METHOD_START", "{", "return   propValue ;", "}", "METHOD_END"], "methodName": ["getPropValue"], "fileName": "org.jboss.as.webservices.service.PropertyService"}, {"methodBody": ["METHOD_START", "{", "final   ServiceBuilder < ServerConfig >    builder    =    serviceTarget . addService ( WSServices . CONFIG _ SERVICE ,    new   ServerConfigService ( serverConfig )  )  ;", "if    ( jmxSubsystemAvailable )     {", "builder . addDependency ( REQUIRED ,    ServerConfigService . MBEAN _ SERVER _ NAME ,    MBeanServer . class ,    serverConfig . getMBeanServerInjector (  )  )  ;", "} else    {", "serverConfig . getMBeanServerInjector (  )  . setValue ( new   ImmediateValue < MBeanServer >  ( null )  )  ;", "}", "builder . addDependency ( SERVICE _ NAME ,    ServerEnvironment . class ,    serverConfig . getServerEnvironmentInjector (  )  )  ;", "if    ( requireUndertow )     {", "builder . addDependency ( REQUIRED ,    UNDERTOW ,    UndertowService . class ,    serverConfig . getUndertowServiceInjector (  )  )  ;", "} else    {", "serverConfig . getUndertowServiceInjector (  )  . setValue ( new   ImmediateValue < UndertowService >  ( null )  )  ;", "}", "for    ( ServiceName   dep    :    dependencies )     {", "builder . addDependency ( dep )  ;", "}", "builder . setInitialMode ( ACTIVE )  ;", "return   builder . install (  )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.ServerConfigService"}, {"methodBody": ["METHOD_START", "{", "return   new   ListInjector < UnifiedHandlerChainMetaData >  ( postHandlerChains )  ;", "}", "METHOD_END"], "methodName": ["getPostHandlerChainsInjector"], "fileName": "org.jboss.as.webservices.service.XTSClientIntegrationService"}, {"methodBody": ["METHOD_START", "{", "return   serverConfig ;", "}", "METHOD_END"], "methodName": ["getServerConfigInjector"], "fileName": "org.jboss.as.webservices.service.XTSClientIntegrationService"}, {"methodBody": ["METHOD_START", "{", "final   XTSClientIntegrationService   service    =    new   XTSClientIntegrationService (  )  ;", "final   ServiceBuilder <  ?  >    builder    =    serviceTarget . addService ( WSServices . XTS _ CLIENT _ INTEGRATION _ SERVICE ,    service )  ;", "builder . addDependency ( JBOSS . append (  \" xts \"  )  . append (  \" handlers \"  )  ,    UnifiedHandlerChainMetaData . class ,    service . getPostHandlerChainsInjector (  )  )  ;", "builder . addDependency ( WSServices . CONFIG _ SERVICE ,    ServerConfig . class ,    service . getServerConfigInjector (  )  )  ;", "return   builder . setInitialMode ( PASSIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.webservices.service.XTSClientIntegrationService"}, {"methodBody": ["METHOD_START", "{", "final   boolean   domainsDiffer    =     !  ( oldSecurityDomain . equals ( newSecurityDomain )  )  ;", "if    ( domainsDiffer )", "throw   logging . WSLogger . ROOT _ LOGGER . multipleSecurityDomainsDetected ( oldSecurityDomain ,    newSecurityDomain )  ;", "}", "METHOD_END"], "methodName": ["ensureSameDomains"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   EJBSecurityMetaData   ejbSecurityMD    =    this . getEjbSecurityMetaData ( endpoint )  ;", "final   boolean   hasEjbSecurityMD    =    ejbSecurityMD    !  =    null ;", "return   hasEjbSecurityMD    ?    ejbSecurityMD . getAuthMethod (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAuthMethod"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "if    ( nextSecurityDomain    =  =    null )     {", "return   oldSecurityDomain ;", "}", "if    ( oldSecurityDomain    =  =    null )     {", "return   nextSecurityDomain ;", "}", "ensureSameDomains ( oldSecurityDomain ,    nextSecurityDomain )  ;", "return   oldSecurityDomain ;", "}", "METHOD_END"], "methodName": ["getDomain"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   String   ejbName    =    endpoint . getShortName (  )  ;", "final   Deployment   dep    =    endpoint . getService (  )  . getDeployment (  )  ;", "final   EJBArchiveMetaData   ejbArchiveMD    =    WSHelper . getOptionalAttachment ( dep ,    EJBArchiveMetaData . class )  ;", "final   EJBMetaData   ejbMD    =     ( ejbArchiveMD    !  =    null )     ?    ejbArchiveMD . getBeanByEjbName ( ejbName )     :    null ;", "return   ejbMD    !  =    null    ?    ejbMD . ge (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getEjbSecurityMetaData"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   EJBSecurityMetaData   ejbSecurityMD    =    this . getEjbSecurityMetaData ( endpoint )  ;", "final   boolean   hasEjbSecurityMD    =    ejbSecurityMD    !  =    null ;", "return   hasEjbSecurityMD    ?    ejbSecurityMD . getRealmName (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getRealmName"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "String   securityDomain    =    null ;", "for    ( final   EJBEndpoint   ejbEndpoint    :    getEjbEndpoints ( dep )  )     {", "String   nexDomain    =    ejbEndpoint . geDomain (  )  ;", "if    (  ( nexDomain    =  =    null )     |  |     ( nexDomain . isEmpty (  )  )  )     {", "nexDomain    =    null ;", "}", "securityDomain    =    getDomain ( securityDomain ,    nexDomain )  ;", "}", "if    ( securityDomain    =  =    null )     {", "final   DeploymentUnit   unit    =    WSHelper . getRequiredAttachment ( dep ,    DeploymentUnit . class )  ;", "if    (  ( unit . getParent (  )  )     !  =    null )     {", "final   EarMetaData   jbossAppMD    =    unit . getParent (  )  . getAttachment ( EAR _ METADATA )  ;", "return   jbossAppMD   instanceof   JBossAppMetaData    ?     (  ( JBossAppMetaData )     ( jbossAppMD )  )  . geDomain (  )     :    null ;", "}", "}", "return   securityDomain ;", "}", "METHOD_END"], "methodName": ["getSecurityDomain"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   SecurityRolesMetaData   securityRolesMD    =    new   SecurityRolesMetaData (  )  ;", "Set < String >    firstEndpointDeclaredSecurityRoles    =    null ;", "for    ( final   EJBEndpoint   ejbEndpoint    :    getEjbEndpoints ( dep )  )     {", "final   Set < String >    declaredSecurityRoles    =    ejbEndpoint . getDeclaredSecurityRoles (  )  ;", "if    ( firstEndpointDeclaredSecurityRoles    =  =    null )     {", "firstEndpointDeclaredSecurityRoles    =    declaredSecurityRoles ;", "} else", "if    (  !  ( firstEndpointDeclaredSecurityRoles . equals ( declaredSecurityRoles )  )  )     {", "logging . WSLogger . ROOT _ LOGGER . multipleEndpointsWithDifferentDeclaredSecurityRoles (  )  ;", "}", "for    ( final   String   roleName    :    declaredSecurityRoles )     {", "final   SecurityRoleMetaData   securityRoleMD    =    new   SecurityRoleMetaData (  )  ;", "securityRoleMD . setRoleName ( roleName )  ;", "securityRolesMD . add ( securityRoleMD )  ;", "}", "}", "return   securityRolesMD ;", "}", "METHOD_END"], "methodName": ["getSecurityRoles"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   EJBSecurityMetaData   ejbSecurityMD    =    this . getEjbSecurityMetaData ( endpoint )  ;", "final   boolean   hasEjbSecurityMD    =    ejbSecurityMD    !  =    null ;", "return   hasEjbSecurityMD    ?    ejbSecurityMD . getTransportGuarantee (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getTransportGuarantee"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   EJBSecurityMetaData   ejbSecurityMD    =    this . getEjbSecurityMetaData ( endpoint )  ;", "final   boolean   hasEjbSecurityMD    =    ejbSecurityMD    !  =    null ;", "return   hasEjbSecurityMD    ?    ejbSecurityMD . getSecureWSDLAccess (  )     :    false ;", "}", "METHOD_END"], "methodName": ["isSecureWsdlAccess"], "fileName": "org.jboss.as.webservices.tomcat.AbstractSecurityMetaDataAccessorEJB"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    WSHelper . getRequiredAttachment ( dep ,    DeploymentUnit . class )  ;", "WarMetaData   warMD    =    ASHelper . getOptionalAttachment ( unit ,    ATTACHMENT _ KEY )  ;", "JBoss   jbossWebMD    =     ( warMD    !  =    null )     ?    warMD . getMergedJBoss (  )     :    null ;", "if    ( warMD    =  =    null )     {", "warMD    =    new   WarMetaData (  )  ;", "}", "if    ( jbossWebMD    =  =    null )     {", "jbossWebMD    =    new   JBoss (  )  ;", "warMD . setMergedJBoss ( jbossWebMD )  ;", "unit . putAttachment ( ATTACHMENT _ KEY ,    warMD )  ;", "}", "createWebAppDescriptor ( dep ,    jbossWebMD )  ;", "createJBossWebAppDescriptor ( dep ,    jbossWebMD )  ;", "dep . addAttachment ( JBoss . class ,    jbossWebMD )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . trace (  \" Creating   jboss - web . xml   descriptor \"  )  ;", "final   String   securityDomain    =    ejb 3 SecurityAccessor . getSecurityDomain ( dep )  ;", "final   boolean   hasSecurityDomain    =    securityDomain    !  =    null ;", "if    ( hasSecurityDomain )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   security   domain :     % s \"  ,    securityDomain )  ;", "jbossWebMD . setSecurityDomain ( securityDomain )  ;", "}", "final   String   virtualHost    =    dep . getS (  )  . getVirtualHost (  )  ;", "ServerHostInfo   serverHostInfo    =    new   ServerHostInfo ( virtualHost )  ;", "if    (  ( serverHostInfo . getHost (  )  )     !  =    null )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   virtual   host :     % s \"  ,    serverHostInfo . getHost (  )  )  ;", "jbossWebMD . setVirtualHosts ( Arrays . asList ( serverHostInfo . getHost (  )  )  )  ;", "if    (  ( serverHostInfo . getServerInstanceName (  )  )     !  =    null )     {", "jbossWebMD . setServerInstanceName ( serverHostInfo . getServerInstanceName (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createJBossWebAppDescriptor"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "final   String   authMethod    =    getAuthMethod ( dep )  ;", "final   boolean   hasAuthMethod    =    authMethod    !  =    null ;", "final   String   realmName    =    getRealmName ( dep )  ;", "if    ( hasAuthMethod )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   new   login   config :     % s ,    auth   method :     % s \"  ,     . EJB _ WEBSERVICE _ REALM ,    authMethod )  ;", "final   LoginConfigMetaData   loginConfig    =    WebMetaDataHelper . getLoginConfig ( jbossWebMD )  ;", "if    ( realmName    !  =    null )     {", "loginConfig . setRealmName ( realmName )  ;", "} else    {", "loginConfig . setRealmName (  . EJB _ WEBSERVICE _ REALM )  ;", "}", "loginConfig . setAuthMethod ( authMethod )  ;", "}", "}", "METHOD_END"], "methodName": ["createLoginConfig"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . trace (  \" Creating   security   constraints \"  )  ;", "for    ( final   Endpoint   ejbEndpoint    :    dep . getService (  )  . getEndpoints (  )  )     {", "final   boolean   secureWsdlAccess    =    ejb 3 SecurityAccessor . isSecureWsdlAccess ( ejbEndpoint )  ;", "final   String   transportGuarantee    =    ejb 3 SecurityAccessor . getTransportGuarantee ( ejbEndpoint )  ;", "final   boolean   hasTransportGuarantee    =    transportGuarantee    !  =    null ;", "final   String   authMethod    =    ejb 3 SecurityAccessor . getAuthMethod ( ejbEndpoint )  ;", "final   boolean   hasAuthMethod    =    authMethod    !  =    null ;", "if    (  ( ejbEndpoint   instanceof   HttpEndpoint )     &  &     ( hasAuthMethod    |  |    hasTransportGuarantee )  )     {", "final   List < SecurityConstraintMetaData >    securityConstraints    =    Helper . getSecurityConstraints ( jbossWebMD )  ;", "final   SecurityConstraintMetaData   securityConstraint    =    Helper . newSecurityConstraint ( securityConstraints )  ;", "final   WebResourceCollectionsMetaData   webResourceCollections    =    Helper . getWebResourceCollections ( securityConstraint )  ;", "final   String   endpointName    =    ejbEndpoint . getShortName (  )  ;", "final   String   urlPattern    =     (  ( HttpEndpoint )     ( ejbEndpoint )  )  . getURLPattern (  )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   web   resource   collection   for   endpoint :     % s ,    URL   pattern :     % s \"  ,    endpointName ,    urlPattern )  ;", "Helper . newWebResourceCollection ( endpointName ,    urlPattern ,    secureWsdlAccess ,    webResourceCollections )  ;", "if    ( hasAuthMethod )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   auth   constraint   for   endpoint :     % s \"  ,    endpointName )  ;", "Helper . newAuthConstraint ( Helper . getAllRoles (  )  ,    securityConstraint )  ;", "}", "if    ( hasTransportGuarantee )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Creating   new   user   data   constraint   for   endpoint :     % s ,    transport   guarantee :     % s \"  ,    endpointName ,    transportGuarantee )  ;", "Helper . newUserDataConstraint ( transportGuarantee ,    securityConstraint )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["createSecurityConstraints"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "final   String   authMethod    =    getAuthMethod ( dep )  ;", "final   boolean   hasAuthMethod    =    authMethod    !  =    null ;", "if    ( hasAuthMethod )     {", "final   SecurityRoles   securityRolesMD    =    ejb 3 SecurityAccessor . getSecurityRoles ( dep )  ;", "final   boolean   hasSecurityRolesMD    =     ( securityRolesMD    !  =    null )     &  &     (  !  ( securityRolesMD . isEmpty (  )  )  )  ;", "if    ( hasSecurityRolesMD )     {", "WSLogger . ROOT _ LOGGER . trace (  \" Setting   security   roles \"  )  ;", "jbossWebMD . setSecurityRoles ( securityRolesMD )  ;", "}", "}", "final   DeploymentUnit   unit    =    dep . getAttachment ( DeploymentUnit . class )  ;", "DeploymentUnit   parent    =    unit . getParent (  )  ;", "if    ( parent    !  =    null )     {", "final   Ear   ear    =    parent . getAttachment ( EAR _ METADATA )  ;", "if    ( ear    !  =    null )     {", "if    (  ( jbossWebMD . getSecurityRoles (  )  )     =  =    null )     {", "jbossWebMD . setSecurityRoles ( new   SecurityRoles (  )  )  ;", "}", "SecurityRoles   earSecurityRoles    =    ear . getSecurityRoles (  )  ;", "if    ( earSecurityRoles    !  =    null )     {", "SecurityRolesMerger . merge ( jbossWebMD . getSecurityRoles (  )  ,    jbossWebMD . getSecurityRoles (  )  ,    earSecurityRoles )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["createSecurityRoles"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . trace (  \" Creating   servlet   mappings \"  )  ;", "final   List < ServletMappingMetaData >    servletMappings    =    Helper . getServletMappings ( jbossWebMD )  ;", "for    ( final   Endpoint   ep    :    dep . getService (  )  . getEndpoints (  )  )     {", "if    ( ep   instanceof   HttpEndpoint )     {", "final   String   endpointName    =    ep . getShortName (  )  ;", "final   List < String >    urlPatterns    =    Helper . getUrlPatterns (  (  ( HttpEndpoint )     ( ep )  )  . getURLPattern (  )  )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Servlet   name :     % s ,    URL   patterns :     % s \"  ,    endpointName ,    urlPatterns )  ;", "Helper . newServletMapping ( endpointName ,    urlPatterns ,    servletMappings )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createServletMappings"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . trace (  \" Creating   servlets \"  )  ;", "final   JBossServletsMetaData   servlets    =    Helper . getServlets ( jbossWebMD )  ;", "for    ( final   Endpoint   endpoint    :    dep . getService (  )  . getEndpoints (  )  )     {", "final   String   endpointName    =    endpoint . getShortName (  )  ;", "final   String   endpointClassName    =    endpoint . getTargetBeanName (  )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Servlet   name :     % s ,    class :     % s \"  ,    endpointName ,    endpointClassName )  ;", "Helper . newServlet ( endpointName ,    endpointClassName ,    servlets )  ;", "}", "}", "METHOD_END"], "methodName": ["createServlets"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "WSLogger . ROOT _ LOGGER . trace (  \" Creating   web . xml   descriptor \"  )  ;", "createServlets ( dep ,    jbossWebMD )  ;", "createServletMappings ( dep ,    jbossWebMD )  ;", "createSecurityConstraints ( dep ,    jbossWebMD )  ;", "createLoginConfig ( dep ,    jbossWebMD )  ;", "createSecurityRoles ( dep ,    jbossWebMD )  ;", "}", "METHOD_END"], "methodName": ["createWebAppDescriptor"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Endpoint   ejbEndpoint    :    dep . getService (  )  . getEndpoints (  )  )     {", "final   String   beanAuthMethod    =    ejb 3 SecurityAccessor . getAuthMethod ( ejbEndpoint )  ;", "final   boolean   hasBeanAuthMethod    =    beanAuthMethod    !  =    null ;", "if    ( hasBeanAuthMethod )     {", "return   beanAuthMethod ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getAuthMethod"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Endpoint   ejbEndpoint    :    dep . getService (  )  . getEndpoints (  )  )     {", "final   String   realmName    =    ejb 3 SecurityAccessor . getRealmName ( ejbEndpoint )  ;", "final   boolean   hasRealmName    =    realmName    !  =    null ;", "if    ( hasRealmName )     {", "return   realmName ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getRealmName"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataCreator"}, {"methodBody": ["METHOD_START", "{", "final   String   transportClassName    =    this . getTransportClassName ( dep )  ;", "WSLogger . ROOT _ LOGGER . trace (  \" Modifying   servlets \"  )  ;", "final   Set < String >    epNames    =    new   HashSet < String >  (  )  ;", "for    ( Endpoint   ep    :    dep . getService (  )  . getEndpoints (  )  )     {", "epNames . add ( ep . getTargetBeanName (  )  )  ;", "}", "for    ( final   ServletMetaData   servletMD    :    jbossWebMD . getServlets (  )  )     {", "final   String   endpointClassName    =    ASHelper . getEndpointClassName ( servletMD )  ;", "if    (  ( endpointClassName    !  =    null )     &  &     (  ( endpointClassName . length (  )  )     >     0  )  )     {", "if    ( epNames . contains ( endpointClassName )  )     {", "servletMD . setServletClass ( WSFServlet . class . getName (  )  )  ;", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   transport   class :     % s   for   endpoint :     % s \"  ,    transportClassName ,    endpointClassName )  ;", "final   List < ParamValueMetaData >    initParams    =    Helper . getServletInitParams ( servletMD )  ;", "Helper . newParamValue ( STACK _ SERVLET _ DELEGATE _ CLASS ,    transportClassName ,    initParams )  ;", "Helper . newParamValue ( SEPID _ DOMAIN _ ENDPOINT ,    endpointClassName ,    initParams )  ;", "} else", "if    ( endpointClassName . startsWith (  \" cxf \"  )  )     {", "throw   WSLogger . ROOT _ LOGGER . invalidWSServlet ( endpointClassName )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["configureEndpoints"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataModifier"}, {"methodBody": ["METHOD_START", "{", "String   transportClassName    =     (  ( String )     ( dep . getProperty ( STACK _ TRANSPORT _ CLASS )  )  )  ;", "if    ( transportClassName    =  =    null )", "throw   logging . WSLogger . ROOT _ LOGGER . missingDeploymentProperty ( STACK _ TRANSPORT _ CLASS )  ;", "return   transportClassName ;", "}", "METHOD_END"], "methodName": ["getTransportClassName"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataModifier"}, {"methodBody": ["METHOD_START", "{", "final   JBossWebMetaData   jbossWebMD    =    WSHelper . getOptionalAttachment ( dep ,    JBossWebMetaData . class )  ;", "if    ( jbossWebMD    !  =    null )     {", "this . configureEndpoints ( dep ,    jbossWebMD )  ;", "this . modifyContextRoot ( dep ,    jbossWebMD )  ;", "}", "}", "METHOD_END"], "methodName": ["modify"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataModifier"}, {"methodBody": ["METHOD_START", "{", "final   String   contextRoot    =    dep . getService (  )  . getContextRoot (  )  ;", "if    ( WSLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "WSLogger . ROOT _ LOGGER . tracef (  \" Setting   context   root :     % s   for   deployment :     % s \"  ,    contextRoot ,    dep . getSimpleName (  )  )  ;", "}", "jbossWebMD . setContextRoot ( contextRoot )  ;", "}", "METHOD_END"], "methodName": ["modifyContextRoot"], "fileName": "org.jboss.as.webservices.tomcat.WebMetaDataModifier"}, {"methodBody": ["METHOD_START", "{", "final   CompositeIndex   compositeIndex    =    ASHelper . getRequiredAttachment ( unit ,    COMPOSITE _ ANNOTATION _ INDEX )  ;", "return   compositeIndex . getAnnotations ( annotation )  ;", "}", "METHOD_END"], "methodName": ["getAnnotations"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    WSHelper . getRequiredAttachment ( dep ,    DeploymentUnit . class )  ;", "final   JBossAppMetaData   jbossAppMD    =     (  ( unit . getParent (  )  )     =  =    null )     ?    null    :     . getOptionalAttachment ( unit . getParent (  )  ,    WSAttachmentKeys . JBOSS _ APP _ METADATA _ KEY )  ;", "String   contextRoot    =    null ;", "if    ( jbossAppMD    !  =    null )     {", "final   ModuleMetaData   moduleMD    =    jbossAppMD . getModules (  )  . get ( dep . getSimpleName (  )  )  ;", "if    ( moduleMD    !  =    null )     {", "final   WebModuleMetaData   webModuleMD    =     (  ( WebModuleMetaData )     ( moduleMD . getValue (  )  )  )  ;", "contextRoot    =    webModuleMD . getContextRoot (  )  ;", "}", "}", "if    ( contextRoot    =  =    null )     {", "contextRoot    =     ( jbossWebMD    !  =    null )     ?    jbossWebMD . getContextRoot (  )     :    null ;", "}", "return   contextRoot ;", "}", "METHOD_END"], "methodName": ["getContextRoot"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   String   endpointClass    =    servletMD . getServletClass (  )  ;", "return   endpointClass    !  =    null    ?    endpointClass . trim (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getEndpointClassName"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   String   endpointName    =    servletMD . getName (  )  ;", "return   endpointName    !  =    null    ?    endpointName . trim (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getEndpointName"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   WarMetaData   warMetaData    =    ASHelper . getOptionalAttachment ( unit ,    ATTACHMENT _ KEY )  ;", "JBossWebMetaData   result    =    null ;", "if    ( warMetaData    !  =    null )     {", "result    =    warMetaData . getMergedJBossWebMetaData (  )  ;", "if    ( result    =  =    null )     {", "result    =    warMetaData . getJBossWebMetaData (  )  ;", "}", "} else    {", "result    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . JBOSSWEB _ METADATA _ KEY )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getJBossWebMetaData"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( name    !  =    null )     {", "final   JBossWMetaData   jbossWebserviceMetaData    =    unit . getAttachment ( WSAttachmentKeys . JBOSS _ WEBSERVICES _ METADATA _ KEY )  ;", "if    ( jbossWebserviceMetaData    !  =    null )     {", "JBossPortComponentMetaData [  ]    portComponent    =    jbossWebserviceMetaData . getPortComponents (  )  ;", "if    ( portComponent    !  =    null )     {", "for    ( JBossPortComponentMetaData   component    :    portComponent )     {", "if    ( name . equals ( component . getEjbName (  )  )  )     {", "return   component ;", "}", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getJBossWebserviceMetaDataPortComponent"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "JAXWSDeployment   wsDeployment    =    unit . getAttachment ( WSAttachmentKeys . JAXWS _ ENDPOINTS _ KEY )  ;", "if    ( wsDeployment    =  =    null )     {", "wsDeployment    =    new   JAXWSDeployment (  )  ;", "unit . putAttachment ( WSAttachmentKeys . JAXWS _ ENDPOINTS _ KEY ,    wsDeployment )  ;", "}", "return   wsDeployment ;", "}", "METHOD_END"], "methodName": ["getJaxwsDeployment"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   JAXWSDeployment   jaxwsDeployment    =    ASHelper . getOptionalAttachment ( unit ,    WSAttachmentKeys . JAXWS _ ENDPOINTS _ KEY )  ;", "return   jaxwsDeployment    !  =    null    ?    jaxwsDeployment . getEjbEndpoints (  )     :    Collections .  < EJBEndpoint > emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getJaxwsEjbs"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   JAXWSDeployment   jaxwsDeployment    =    unit . getAttachment ( WSAttachmentKeys . JAXWS _ ENDPOINTS _ KEY )  ;", "return   jaxwsDeployment    !  =    null    ?    jaxwsDeployment . getPojoEndpoints (  )     :    Collections .  < POJOEndpoint > emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getJaxwsPojos"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "ServiceController < T >    service    =     (  ( ServiceController < T >  )     ( CurrentServiceContainer . getServiceContainer (  )  . getService ( serviceName )  )  )  ;", "return   service    !  =    null    ?    service . getValue (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getMSCService"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "ServiceController < T >    service    =     (  ( ServiceController < T >  )     ( context . getServiceRegistry ( false )  . getService ( serviceName )  )  )  ;", "return   service    !  =    null    ?    service . getValue (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getMSCService"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "return   unit . getAttachment ( key )  ;", "}", "METHOD_END"], "methodName": ["getOptionalAttachment"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   A   value    =    unit . getAttachment ( key )  ;", "if    ( value    =  =    null )     {", "throw   new   IllegalStateExption (  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getRequiredAttachment"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "AttachmentList < ResourceRoot >    resourceRoots    =    unit . getAttachment ( RESOURCE _ ROOTS )  ;", "if    (  (  !  ( unit . getName (  )  . endsWith (  \"  . war \"  )  )  )     &  &     ( EjbDeploymentMarker . isEjbDeployment ( unit )  )  )     {", "resourceRoots    =    new   AttachmentList < ResourceRoot >  ( ResourceRoot . class )  ;", "final   ResourceRoot   root    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "resourceRootdd ( root )  ;", "}", "return   resourceRoots ;", "}", "METHOD_END"], "methodName": ["getResourceRoots"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "for    ( JBossServletMetaData   servlet    :    jbossWebMD . getServlets (  )  )     {", "if    ( servlet . getName (  )  . equals ( servletName )  )     {", "return   servlet ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getServletForName"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "WSRefRegistry   refRegistry    =    unit . getAttachment ( WSAttachmentKeys . WS _ REFREGISTRY )  ;", "if    ( refRegistry    =  =    null )     {", "refRegistry    =    WSRefRegistry . newInstance (  )  ;", "unit . putAttachment ( WSAttachmentKeys . WS _ REFREGISTRY ,    refRegistry )  ;", "}", "return   refRegistry ;", "}", "METHOD_END"], "methodName": ["getWSRefRegistry"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "List < EJBEndpoint >    ejbEndpointList    =    jaxwsDeployment . getEjbEndpoints (  )  ;", "for    ( EJBEndpoint   ejbEndpoint    :    ejbEndpointList )     {", "if    ( className . equals ( ejbEndpoint . getClassName (  )  )  )     {", "return   ejbEndpoint ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getWebserviceMetadataEJBEndpoint"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "for    ( ClassInfo   ci    :    index . getKnownClasses (  )  )     {", "if    ( ci . name (  )  . toString (  )  . startsWith ( pck )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasClassesFromPackage"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "ClassInfo   classInfo    =    null ;", "WebServiceAnnotationInfo   AnnoationInfo    =    null ;", "final   ClassAnnotationInformation < WebService ,    WebServiceAnnotationInfo >    classAnnotationInfo    =    classDescription . getAnnotationInformation ( WebService . class )  ;", "if    (  ( classAnnotationInfo    !  =    null )     &  &     (  !  ( classAnnotationInfo . getClassLevelAnnotations (  )  . isEmpty (  )  )  )  )     {", "AnnoationInfo    =    classAnnotationInfo . getClassLevelAnnotations (  )  . get (  0  )  ;", "classInfo    =     (  ( ClassInfo )     ( AnnoationInfo . getTarget (  )  )  )  ;", "}", "WebServiceProviderAnnotationInfo   ProviderAnnoationInfo    =    null ;", "final   ClassAnnotationInformation < WebServiceProvider ,    WebServiceProviderAnnotationInfo >    providerAnnotationInfo    =    classDescription . getAnnotationInformation ( WebServiceProvider . class )  ;", "if    (  ( providerAnnotationInfo    !  =    null )     &  &     (  !  ( providerAnnotationInfo . getClassLevelAnnotations (  )  . isEmpty (  )  )  )  )     {", "ProviderAnnoationInfo    =    providerAnnotationInfo . getClassLevelAnnotations (  )  . get (  0  )  ;", "classInfo    =     (  ( ClassInfo )     ( ProviderAnnoationInfo . getTarget (  )  )  )  ;", "}", "if    ( classInfo    =  =    null )     {", "return   false ;", "}", "final   short   flags    =    classInfo . flags (  )  ;", "if    ( Modifier . isInterface ( flags )  )", "return   false ;", "if    ( Modifier . isAbstract ( flags )  )", "return   false ;", "if    (  !  ( Modifier . isPublic ( flags )  )  )", "return   false ;", "if    ( ASHelper . isJaxwsService ( classInfo ,    index )  )", "return   false ;", "if    (  ( AnnoationInfo    !  =    null )     &  &     ( ProviderAnnoationInfo    !  =    null )  )     {", "WSLogger . ROOT _ LOGGER . mutuallyExclusiveAnnotations ( classInfo . name (  )  . toString (  )  )  ;", "return   false ;", "}", "if    ( Modifier . isFinal ( flags )  )     {", "WSLogger . ROOT _ LOGGER . finalEndpointClassDetected ( classInfo . name (  )  . toString (  )  )  ;", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isJaxwsEndpoint"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "return   ASHelper . isJaxwsEndpoint ( clazz ,    index ,    true )  ;", "}", "METHOD_END"], "methodName": ["isJaxwsEndpoint"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   short   flags    =    clazz . flags (  )  ;", "if    ( Modifier . isInterface ( flags )  )", "return   false ;", "if    ( Modifier . isAbstract ( flags )  )", "return   false ;", "if    (  !  ( Modifier . isPublic ( flags )  )  )", "return   false ;", "if    (  . isJaxwsService ( clazz ,    index )  )", "return   false ;", "final   boolean   hasWebServiceAnnotation    =    clazz . annotations (  )  . containsKey ( DotNames . WEB _ SERVICE _ ANNOTATION )  ;", "final   boolean   hasWebServiceProviderAnnotation    =    clazz . annotations (  )  . containsKey ( DotNames . WEB _ SERVICE _ PROVIDER _ ANNOTATION )  ;", "if    (  (  ! hasWebServiceAnnotation )     &  &     (  ! hasWebServiceProviderAnnotation )  )     {", "return   false ;", "}", "if    ( hasWebServiceAnnotation    &  &    hasWebServiceProviderAnnotation )     {", "if    ( log )     {", "WSLogger . ROOT _ LOGGER . mutuallyExclusiveAnnotations ( clazz . name (  )  . toString (  )  )  ;", "}", "return   false ;", "}", "if    ( Modifier . isFinal ( flags )  )     {", "if    ( log )     {", "WSLogger . ROOT _ LOGGER . finalEndpointClassDetected ( clazz . name (  )  . toString (  )  )  ;", "}", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isJaxwsEndpoint"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "final   short   flags    =    clazz . flags (  )  ;", "if    (  !  ( Modifier . isInterface ( flags )  )  )", "return   false ;", "if    (  !  ( Modifier . isPublic ( flags )  )  )", "return   false ;", "return   clazz . annotations (  )  . containsKey ( DotNamWEB _ SERVICE _ ANNOTATION )  ;", "}", "METHOD_END"], "methodName": ["isJaxwsEndpointInterface"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "ClassInfo   tmp    =    current ;", "while    ( tmp    !  =    null )     {", "final   DotName   suName    =    tmp . suName (  )  ;", "if    ( DotNames . JAXWS _ SERVICE _ CLASS . equals ( suName )  )     {", "return   true ;", "}", "tmp    =    index . getClassByName ( suName )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isJaxwsService"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "ClassInfo   tmp    =    current ;", "while    ( tmp    !  =    null )     {", "final   DotName   suName    =    tmp . suName (  )  ;", "if    ( DotNames . JAXWS _ SERVICE _ CLASS . equals ( suName )  )     {", "return   true ;", "}", "tmp    =    index . getClassByName ( suName )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isJaxwsService"], "fileName": "org.jboss.as.webservices.util.ASHelper"}, {"methodBody": ["METHOD_START", "{", "return   EndpointRegistryFactory . registry ;", "}", "METHOD_END"], "methodName": ["getEndpointRegistry"], "fileName": "org.jboss.as.webservices.util.EndpointRegistryFactory"}, {"methodBody": ["METHOD_START", "{", "ClassLoaderProvider . setDefaultProvider ( new   ModuleClassLoaderProvider (  )  )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.jboss.as.webservices.util.ModuleClassLoaderProvider"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   Current . get (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.webservices.util.ServiceContainerEndpointRegistry"}, {"methodBody": ["METHOD_START", "{", "Set < Endpoint >    endpoints    =    new   CopyOnWriteArraySet < Endpoint >  (  )  ;", "for    ( ServiceName   sname    :     . currentServiceContainer (  )  . getServiceNames (  )  )     {", "if    ( sname . getCanonicalName (  )  . startsWith ( endpointPrefix )  )     {", "Endpoint   ep    =    ASHelper . getMSCService ( sname ,    Endpoint . class )  ;", "if    ( ep    !  =    null )     {", "endpoints . add ( ep )  ;", "}", "}", "}", "return   endpoints ;", "}", "METHOD_END"], "methodName": ["getRegisteredEndpoints"], "fileName": "org.jboss.as.webservices.util.ServiceContainerEndpointRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WildFlySecurityManager . isChecking (  )  )  )     {", "s . getPrivateCredentials (  )  . add ( credential )  ;", "} else    {", "AccessController . doPrivileged (  (  ( PrivilegedAction < Void >  )     (  (  )     -  >     {", "s . getPrivateCredentials (  )  . add ( credential )  ;", "return   null ;", "}  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addPrivateCredential"], "fileName": "org.jboss.as.webservices.util.SubjectUtil"}, {"methodBody": ["METHOD_START", "{", "return   SubjectUtil . fromSecurityIdentity ( securityIdentity ,    new   Subject (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromSecurityIdentity"], "fileName": "org.jboss.as.webservices.util.SubjectUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( subject    =  =    null )     {", "subject    =    new   Subject (  )  ;", "}", "subject . getPrincipals (  )  . add ( securityIdentity . getPrincipal (  )  )  ;", "Group   rolesGroup    =    new    . SimpleGroup (  \" Roles \"  )  ;", "for    ( String   role    :    securityIdentity . getRoles (  )  )     {", "rolesGroup . addMember ( new   NamePrincipal ( role )  )  ;", "}", "subject . getPrincipals (  )  . add ( rolesGroup )  ;", "Group   callerPrincipalGroup    =    new    . SimpleGroup (  \" CallerPrincipal \"  )  ;", "callerPrincipalGroup . addMember ( securityIdentity . getPrincipal (  )  )  ;", "subject . getPrincipals (  )  . add ( callerPrincipalGroup )  ;", "for    ( Credential   credential    :    securityIdentity . getPublicCredentials (  )  )     {", "if    ( credential   instanceof   PublicKeyCredential )     {", "subject . getPublicCredentials (  )  . add ( credential . castAs ( PublicKeyCredential . class )  . getPublicKey (  )  )  ;", "} else", "if    ( credential   instanceof   X 5  0  9 CertificateChainPublicCredential )     {", "subject . getPublicCredentials (  )  . add ( credential . castAs ( class )  . getCertificateChain (  )  )  ;", "} else    {", "subject . getPublicCredentials (  )  . add ( credential )  ;", "}", "}", "for    ( Credential   credential    :    securityIdentity . getPrivateCredentials (  )  )     {", "if    ( credential   instanceof   PasswordCredential )     {", ". addPrivateCredential ( subject ,    credential . castAs ( PasswordCredential . class )  . getPassword (  )  )  ;", "} else", "if    ( credential   instanceof   SecretKeyCredential )     {", ". addPrivateCredential ( subject ,    credential . castAs ( class )  . getSecretKey (  )  )  ;", "} else", "if    ( credential   instanceof   KeyPairCredential )     {", ". addPrivateCredential ( subject ,    credential . castAs ( class )  . getKeyPair (  )  )  ;", "} else", "if    ( credential   instanceof   X 5  0  9 CertificateChainPrivateCredential )     {", ". addPrivateCredential ( subject ,    credential . castAs ( class )  . getCertificateChain (  )  )  ;", "} else    {", ". addPrivateCredential ( subject ,    credential )  ;", "}", "}", ". addPrivateCredential ( subject ,    securityIdentity )  ;", "return   subject ;", "}", "METHOD_END"], "methodName": ["fromSecurityIdentity"], "fileName": "org.jboss.as.webservices.util.SubjectUtil"}, {"methodBody": ["METHOD_START", "{", "return   findChild ( child ,    true )  ;", "}", "METHOD_END"], "methodName": ["findChild"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "final   VirtualFile   virtualFile    =    getFile (  )  ;", "final   VirtualFile   childFile    =    file . getChild ( child )  ;", "if    (  !  ( childFile . exists (  )  )  )     {", "if    ( throwExceptionIfNotFound )     {", "throw   WSLogger . ROOT _ LOGGER . missingChild ( child ,    virtualFile )  ;", "} else    {", "WSLogger . ROOT _ LOGGER . tracef (  \" Child    '  % s '    not   found   for   VirtualFile :     % s \"  ,    child ,    virtualFile )  ;", "return   null ;", "}", "}", "return   new    ( childFile )  ;", "}", "METHOD_END"], "methodName": ["findChild"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "rern   findChild ( child ,    false )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["findChildFailSafe"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "List < VirtualFile >    vfList    =    getFile (  )  . getChildren (  )  ;", "if    ( vfList    =  =    null )", "return   null ;", "List < UnifiedVirtualFile >    uvfList    =    new   LinkedList < UnifiedVirtualFile >  (  )  ;", "for    ( VirtualFile   vf    :    vfList )     {", "uvfList . add ( new    ( vf )  )  ;", "}", "return   uvfList ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   get (  )  . getName (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   get (  )  . toURL (  )  ;", "}    catch    ( Exception   e )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toURL"], "fileName": "org.jboss.as.webservices.util.VirtualFileAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( count )     =  =     0  )     {", "throw   new   IllegalStateException (  )  ;", "}", "( count )  -  -  ;", "if    (  ( count )     =  =     0  )     {", "try    {", "stop ( ctx )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "return   count ;", "}", "METHOD_END"], "methodName": ["decrementUsers"], "fileName": "org.jboss.as.webservices.util.WebAppController"}, {"methodBody": ["METHOD_START", "{", "if    (  ( count )     =  =     0  )     {", "try    {", "ctx    =    start ( host )  ;", "}    catch    ( Exception   e )     {", "throw   new   StartException ( e )  ;", "}", "}", "return    ( count )  +  +  ;", "}", "METHOD_END"], "methodName": ["incrementUsers"], "fileName": "org.jboss.as.webservices.util.WebAppController"}, {"methodBody": ["METHOD_START", "{", "WebDeploymentBuilder   builder    =    new   WebDeploymentBuilder (  )  ;", "WebDeployment   deployment ;", "try    {", "builder . setContextRoot ( contextRoot )  ;", "File   docBase    =    new   File ( serverTempDir ,    contextRoot )  ;", "if    (  !  ( docBase . exists (  )  )  )     {", "docBase . mkdirs (  )  ;", "}", "builder . setDocumentRoot ( docBase )  ;", "builder . setClassLoader ( classloader )  ;", "final   int   j    =    servletClass . indexOf (  \"  .  \"  )  ;", "final   String   servletName    =     ( j    <     0  )     ?    servletClass    :    servletClass . substring (  ( j    +     1  )  )  ;", "final   Class <  ?  >    clazz    =    classloader . loadClass ( servletClass )  ;", "ServletBuilder   servlet    =    new   ServletBuilder (  )  ;", "servlet . setServletName ( servletName )  ;", "servlet . setServlet (  (  ( Servlet )     ( clazz . newInstance (  )  )  )  )  ;", "servlet . setServletClass ( clazz )  ;", "servlet . addUrlMapping ( urlPattern )  ;", "builder . addServlet ( servlet )  ;", "deployment    =    host . addWebDeployment ( builder )  ;", "deployment . create (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . createContextPhaseFailed ( e )  ;", "}", "try    {", "deployment . start (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . startContextPhaseFailed ( e )  ;", "}", "return   deployment ;", "}", "METHOD_END"], "methodName": ["startWebApp"], "fileName": "org.jboss.as.webservices.util.WebAppController"}, {"methodBody": ["METHOD_START", "{", "try    {", "context . stop (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . stoextPhaseFailed ( e )  ;", "}", "try    {", "context . destroy (  )  ;", "}    catch    ( Exception   e )     {", "throw   WSLogger . ROOT _ LOGGER . destroyContextPhaseFailed ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["stopWebApp"], "fileName": "org.jboss.as.webservices.util.WebAppController"}, {"methodBody": ["METHOD_START", "{", "return   WebMetaDataHelper . allRoles ;", "}", "METHOD_END"], "methodName": ["getAllRoles"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "List < ParamValueMetaData >    contextParamsMD    =    jbossWebMD . getContextParams (  )  ;", "if    ( contextParamsMD    =  =    null )     {", "contextParamsMD    =    new   LinkedList < ParamValueMetaData >  (  )  ;", "jbossWebMD . setContextParams ( contextParamsMD )  ;", "}", "return   contextParamsMD ;", "}", "METHOD_END"], "methodName": ["getContextParams"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "return   secureWsdlAccess    ?    WebMetaDataHelper . getAndPostMethods    :    WebMetaDataHelper . onlyPostMethod ;", "}", "METHOD_END"], "methodName": ["getHttpMethods"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "LoginConfigMetaData   loginConfigMD    =    jbossWebMD . getLoginConfig (  )  ;", "if    ( loginConfigMD    =  =    null )     {", "loginConfigMD    =    new   LoginConfigMetaData (  )  ;", "jbossWebMD . setLoginConfig ( loginConfigMD )  ;", "}", "return   loginConfigMD ;", "}", "METHOD_END"], "methodName": ["getLoginConfig"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "List < SecurityConstraintMetaData >    securityConstraintsMD    =    jbossWebMD . getSecurityConstraints (  )  ;", "if    ( securityConstraintsMD    =  =    null )     {", "securityConstraintsMD    =    new   LinkedList < SecurityConstraintMetaData >  (  )  ;", "jbossWebMD . setSecurityConstraints ( securityConstraintsMD )  ;", "}", "return   securityConstraintsMD ;", "}", "METHOD_END"], "methodName": ["getSecurityConstraints"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "List < ParamValueMetaData >    initParamsMD    =    servletMD . getInitParam (  )  ;", "if    ( initParamsMD    =  =    null )     {", "initParamsMD    =    new   LinkedList < ParamValueMetaData >  (  )  ;", "servletMD . setInitParam ( initParamsMD )  ;", "}", "return   initParamsMD ;", "}", "METHOD_END"], "methodName": ["getServletInitParams"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "List < ServletMappingMetaData >    servletMappingsMD    =    jbossWebMD . getServletMappings (  )  ;", "if    ( servletMappingsMD    =  =    null )     {", "servletMappingsMD    =    new   LinkedList < ServletMappingMetaData >  (  )  ;", "jbossWebMD . setServletMappings ( servletMappingsMD )  ;", "}", "return   servletMappingsMD ;", "}", "METHOD_END"], "methodName": ["getServletMappings"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "JBossServletsMetaData   servletsMD    =    jbossWebMD . getServlets (  )  ;", "if    ( servletsMD    =  =    null )     {", "servletsMD    =    new   JBossServletsMetaData (  )  ;", "jbossWebMD . setServlets ( servletsMD )  ;", "}", "return   servletsMD ;", "}", "METHOD_END"], "methodName": ["getServlets"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "fil   List < String >    linkedList    =    new   LinkedList < String >  (  )  ;", "linkedListdd ( urlttern )  ;", "return   linkedList ;", "}", "METHOD_END"], "methodName": ["getUrlPatterns"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "WebResourceCollectionsMetaData   webResourceCollectionsMD    =    securityConstraintMD . getResourceCollections (  )  ;", "if    ( webResourceCollectionsMD    =  =    null )     {", "webResourceCollectionsMD    =    new   WebResourceCollectionsMetaData (  )  ;", "securityConstraintMD . setResourceCollections ( webResourceCollectionsMD )  ;", "}", "return   webResourceCollectionsMD ;", "}", "METHOD_END"], "methodName": ["getWebResourceCollections"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   AuthConstraintMetaData   authConstraintMD    =    new   AuthConstraintMetaData (  )  ;", "authConstraintMD . setRoleNames ( roleNames )  ;", "securityConstraintMD . setAuthConstraint ( authConstraintMD )  ;", "return   authConstraintMD ;", "}", "METHOD_END"], "methodName": ["newAuthConstraint"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   ParamValueMetaData   paramMD    =    new   ParamValueMetaData (  )  ;", "paramMD . setParamName ( key )  ;", "paramMD . setParamValue ( value )  ;", "return   paramMD ;", "}", "METHOD_END"], "methodName": ["newParamValue"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   ParamValueMetaData   paramValueMD    =    WebMetaDataHelper . newParamValue ( key ,    value )  ;", "paramsMD . add ( paramValueMD )  ;", "return   paramValueMD ;", "}", "METHOD_END"], "methodName": ["newParamValue"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   SecurityConstraintMetaData   securityConstraintMD    =    new   SecurityConstraintMetaData (  )  ;", "securityConstraintsMD . add ( securityConstraintMD )  ;", "return   securityConstraintMD ;", "}", "METHOD_END"], "methodName": ["newSecurityConstraint"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   JBossServletMetaData   servletMD    =    new   JBossServletMetaData (  )  ;", "servletMD . setServletName ( servletName )  ;", "servletMD . setServletClass ( servletClass )  ;", "servletsMD . add ( servletMD )  ;", "return   servletMD ;", "}", "METHOD_END"], "methodName": ["newServlet"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   ServletMappingMetaData   servletMappingMD    =    new   ServletMappingMetaData (  )  ;", "servletMappingMD . setServletName ( servletName )  ;", "servletMappingMD . setUrlPatterns ( urlPatterns )  ;", "servletMappingsMD . add ( servletMappingMD )  ;", "return   servletMappingMD ;", "}", "METHOD_END"], "methodName": ["newServletMapping"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   UserDataConstraintMetaData   userDataConstraintMD    =    new   UserDataConstraintMetaData (  )  ;", "final   TransportGuaranteeType   transportGuaranteeValue    =    TransportGuaranteeType . valueOf ( transportGuarantee )  ;", "userDataConstraintMD . setTransportGuarantee ( transportGuaranteeValue )  ;", "securityConstraintMD . setUserDataConstraint ( userDataConstraintMD )  ;", "return   userDataConstraintMD ;", "}", "METHOD_END"], "methodName": ["newUserDataConstraint"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "final   WebResourceCollectionMetaData   webResourceCollectionMD    =    new   WebResourceCollectionMetaData (  )  ;", "webResourceCollectionMD . setWebResourceName ( servletName )  ;", "webResourceCollectionMD . setUrlPatterns (  . getUrlPatterns ( urlPattern )  )  ;", "webResourceCollectionMD . setHttpMethods (  . getHttpMethods ( securedWsdl )  )  ;", "webResourceCollectionsMD . add ( webResourceCollectionMD )  ;", "return   webResourceCollectionMD ;", "}", "METHOD_END"], "methodName": ["newWebResourceCollection"], "fileName": "org.jboss.as.webservices.util.WebMetaDataHelper"}, {"methodBody": ["METHOD_START", "{", "return    \" Wallaby   Hill \"  ;", "}", "METHOD_END"], "methodName": ["discoverNewLands"], "fileName": "org.jboss.as.webservices.verification.BrokenSampleWSImpl"}, {"methodBody": ["METHOD_START", "{", "return    \" Wallaby   Hill \"  ;", "}", "METHOD_END"], "methodName": ["discoverNewLands"], "fileName": "org.jboss.as.webservices.verification.GoodSampleWSImpl"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isWorking"], "fileName": "org.jboss.as.webservices.verification.GoodSampleWSImpl"}, {"methodBody": ["METHOD_START", "{", "return   deploymentReflectionIndex . getClassIndex ( endpointInterfaceClass )  . getMethods (  )  ;", "}", "METHOD_END"], "methodName": ["endpointInterfaceDefinedWebMethods"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "return    !  ( verificationFailures . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["failed"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   endpointClass . getMethod ( endpointInterfaceDefinedWebMethod . getName (  )  ,    endpointInterfaceDefinedWebMethod . getParameterTypes (  )  )  ;", "}    catch    ( NoSuchMethodException   e )     {", "try    {", "return   endpointClass . getDeclaredMethod ( endpointInterfaceDefinedWebMethod . getName (  )  ,    endpointInterfaceDefinedWebMethod . getParameterTypes (  )  )  ;", "}    catch    ( NoSuchMethodException   e 1  )     {", "verificationFailures . add ( new    . WebServiceMethodNotFound ( endpointInterfaceDefinedWebMethod )  )  ;", "}", "}    catch    ( SecurityException   e )     {", "verificationFailures . add ( new    . WebServiceMethodNotAccessible ( endpointInterfaceDefinedWebMethod ,    e )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findEndpointImplMethodMatching"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "for    ( JwsWebServiceEndpointVerifier . VerificationFailure   verificationFailure    :    verificationFailures )", "verificationFailure . logFailure (  )  ;", "}", "METHOD_END"], "methodName": ["logFailures"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "if    (  ( endpointInterfaceClass )     !  =    null )     {", "for    ( Method   endpointInterfaceDefinedWebMethod    :    endpointInterfaceDefinedWebMethods (  )  )     {", "verifyWebMethod ( endpointInterfaceDefinedWebMethod )  ;", "}", "}", "verifyFinalizeMethod (  )  ;", "}", "METHOD_END"], "methodName": ["verify"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "ClassReflectionIndex   classReflectionIndex    =    deploymentReflectionIndex . getClassIndex ( endpointClass )  ;", "Method   finalizeMethod    =    classReflectionIndex . getMethod ( void . class ,     \" finalize \"  )  ;", "if    ( finalizeMethod    !  =    null )     {", "verificationFailures . add ( new    . ImplementationHasFinalize (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyFinalizeMethod"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "final   Method   endpointImplementationMethod    =    findEndpointImplMethodMatching ( endpointInterfaceDefinedWebMethod )  ;", "if    ( endpointImplementationMethod    !  =    null )     {", "final   int   methodModifiers    =    endpointImplementationMethod . getModifiers (  )  ;", "final   WebMethod   possibleWebMethodAnnotation    =    endpointImplementationMethod . getAnnotation ( WebMethod . class )  ;", "if    (  ( possibleWebMethodAnnotation    =  =    null )     |  |     (  !  ( possibleWebMethodAnnotation . exclude (  )  )  )  )     {", "if    ( Modifier . isPublic ( methodModifiers )  )     {", "if    (  ( Modifier . isStatic ( methodModifiers )  )     |  |     ( Modifier . isFinal ( methodModifiers )  )  )     {", "verificationFailures . add ( new    . WebMethodIsStaticOrFinal ( endpointImplementationMethod )  )  ;", "}", "} else    {", "verificationFailures . add ( new    . WebMethodIsNotPublic ( endpointImplementationMethod )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["verifyWebMethod"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifier"}, {"methodBody": ["METHOD_START", "{", "deploymentReflectionIndex    =    DeploymentReflectionIndex . create (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( GoodSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "Method   endpointInterfaceMethod    =    SampleWS . class . getMethod (  \" performWork \"  )  ;", "Method   seiMethod    =    sut . findEndpointImplMethodMatching ( endpointInterfaceMethod )  ;", "assertNotNull ( seiMethod )  ;", "assertEquals (  \" performWork \"  ,    seiMethod . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindEndpointImplMethodMatching"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( GoodSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "Collection < Method >    endpointInterfaceMethods    =    sut . endpointInterfaceDefinedWebMethods (  )  ;", "Set < String >    methodNames    =    new   HashSet <  >  (  )  ;", "for    ( Method   endpointInterfaceMethod    :    endpointInterfaceMethods )", "methodNames . add ( endpointInterfaceMethod . getName (  )  )  ;", "assertTrue ( methodNames . contains (  \" performWork \"  )  )  ;", "assertTrue ( methodNames . contains (  \" discoverNewLands \"  )  )  ;", "assertTrue ( methodNames . contains (  \" isWorking \"  )  )  ;", "assertTrue ( methodNames . contains (  \" triggerReport \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testLoadEndpointInterfaceDefinedWebMethods"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "sut . logFailures (  )  ;", "}", "METHOD_END"], "methodName": ["testLogFailures"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( AnnotatedSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertFalse ( sut . failed (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyAnnotatedSampleWSSucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( AnnotatedSampleWSImplWithExclusion . class ,    null ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertFalse ( sut . failed (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyAnnotatedSampleWSWithExclusionSucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( ConcreteSampleWSImpl . class ,    null ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertFalse ( sut . failed (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyExtendedSampleWSSucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertTrue ( sut . failed (  )  )  ;", "assertEquals (  5  ,    sut . verificationFailures . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyFails"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verifyWebMethod ( SampleWS . class . getMethod (  \" triggerReport \"  )  )  ;", "assertTrue ( sut . failed (  )  )  ;", "assertEquals (  1  ,    sut . verificationFailures . size (  )  )  ;", "assertTrue (  (  ( sut . verificationFailures . get (  0  )  )    instanceof   JwsWebServiceEndpointVerifier . WebMethodIsStaticOrFinal )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyFinalWebMethodFails"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verifyFinalizeMethod (  )  ;", "assertTrue ( sut . failed (  )  )  ;", "assertEquals (  1  ,    sut . verificationFailures . size (  )  )  ;", "assertTrue (  (  ( sut . verificationFailures . get (  0  )  )    instanceof   JwsWebServiceEndpointVerifier . ImplementationHasFinalize )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyFinalizeMethod"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verifyWebMethod ( SampleWS . class . getMethod (  \" performWork \"  )  )  ;", "assertTrue ( sut . failed (  )  )  ;", "assertEquals (  1  ,    sut . verificationFailures . size (  )  )  ;", "assertTrue (  (  ( sut . verificationFailures . get (  0  )  )    instanceof   JwsWebServiceEndpointVerifier . WebMethodIsNotPublic )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyNonPublicWebMethodFails"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( SimpleWSImpl . class ,    null ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertFalse ( sut . failed (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifySimpleWSSucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( BrokenSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verifyWebMethod ( SampleWS . class . getMethod (  \" discoverNewLands \"  )  )  ;", "assertTrue ( sut . failed (  )  )  ;", "assertEquals (  1  ,    sut . verificationFailures . size (  )  )  ;", "assertTrue (  (  ( sut . verificationFailures . get (  0  )  )    instanceof   JwsWebServiceEndpointVerifier . WebMethodIsStaticOrFinal )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyStaticWebMethodFails"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( GoodSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verify (  )  ;", "assertFalse ( sut . failed (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifySucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "JwsWebServiceEndpointVerifier   sut    =    new   JwsWebServiceEndpointVerifier ( GoodSampleWSImpl . class ,    SampleWS . class ,    deploymentReflectionIndex )  ;", "sut . verifyWebMethod ( SampleWS . class . getMethod (  \" performWork \"  )  )  ;", "assertFalse ( sut . failed (  )  )  ;", "assertEquals (  0  ,    sut . verificationFailures . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testVerifyWebMethodSucceeds"], "fileName": "org.jboss.as.webservices.verification.JwsWebServiceEndpointVerifierTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( injectionTarget    =  =    null )     {", "return    . elementForInjectionTarget ( unit ,    classInfo )  ;", "} else    {", "return    . elementForInjectionTarget ( unit ,    injectionTarget )  ;", "}", "}", "METHOD_END"], "methodName": ["createAnnotatedElement"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   List < AnnotationInstance >    webServiceRefAnnotations    =    ASHelper . getAnnotations ( unit ,    DotNames . WEB _ SERVICE _ REF _ ANNOTATION )  ;", "for    ( final   AnnotationInstance   annotation    :    webServiceRefAnnotations )     {", "final   AnnotationTarget   annotationTarget    =    annotation . target (  )  ;", "final   WSRefAnnotationWrapper   annotationWrapper    =    new   WSRefAnnotationWrapper ( annotation )  ;", "if    ( annotationTarget   instanceof   FieldInfo )     {", ". processFieldRef ( unit ,    annotationWrapper ,     (  ( FieldInfo )     ( annotationTarget )  )  )  ;", "} else", "if    ( annotationTarget   instanceof   MethodInfo )     {", ". processMethodRef ( unit ,    annotationWrapper ,     (  ( MethodInfo )     ( annotationTarget )  )  )  ;", "} else", "if    ( annotationTarget   instanceof   ClassInfo )     {", ". processClassRef ( unit ,    annotationWrapper ,     (  ( ClassInfo )     ( annotationTarget )  )  )  ;", "}", "}", "final   List < AnnotationInstance >    webServiceRefsAnnotations    =    ASHelper . getAnnotations ( unit ,    DotNames . WEB _ SERVICE _ REFS _ ANNOTATION )  ;", "for    ( final   AnnotationInstance   outerAnnotation    :    webServiceRefsAnnotations )     {", "final   AnnotationTarget   annotationTarget    =    outerAnnotation . target (  )  ;", "if    ( annotationTarget   instanceof   ClassInfo )     {", "final   AnnotationInstance [  ]    values    =    outerAnnotation . value (  \" value \"  )  . asNestedArray (  )  ;", "for    ( final   AnnotationInstance   annotation    :    values )     {", "final   WSRefAnnotationWrapper   annotationWrapper    =    new   WSRefAnnotationWrapper ( annotation )  ;", ". processClassRef ( unit ,    annotationWrapper ,     (  ( ClassInfo )     ( annotationTarget )  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Module   module    =    unit . getAttachment ( MODULE )  ;", "final   DeploymentReflectionIndex   deploymentReflectionIndex    =    unit . getAttachment ( REFLECTION _ INDEX )  ;", "final   String   injectionTargetClassName    =    injectionTarget . getClassName (  )  ;", "final   String   injectionTargetName    =     . getInjectionTargetName ( injectionTarget )  ;", "final   AccessibleObject   fieldOrMethod    =    InjectionUtils . getInjectionTarget ( injectionTargetClassName ,    injectionTargetName ,    module . getClassLoader (  )  ,    deploymentReflectionIndex )  ;", "return   fieldOrMethod ;", "}", "METHOD_END"], "methodName": ["elementForInjectionTarget"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Class <  ?  >    target    =    WSRefAnnotationProcessor . getClass ( unit ,    classInfo . name (  )  . toString (  )  )  ;", "return   target ;", "}", "METHOD_END"], "methodName": ["elementForInjectionTarget"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WSRefAnnotationProcessor . isEmpty ( className )  )  )     {", "try    {", "return   ClassLoadingUtils . loadClass ( className ,    du )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getClass"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   name    =    injectionTarget . getName (  )  ;", "if    ( injectionTarget   instanceof   FieldInjectionTarget )     {", "return   name ;", "} else", "if    ( injectionTarget   instanceof   ee . component . MethodInjectionTarget )     {", "return    ( name . substring (  3  ,     4  )  . toUpperCase ( ENGLISH )  )     +     ( name . substring (  4  )  )  ;", "}", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInjectionTargetName"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( string    =  =    null )     |  |     ( string . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( WSRefAnnotationProcessor . isEmpty ( annotation . name (  )  )  )     {", "throw   WSLogger . ROOT _ LOGGER . requiredServiceRefName (  )  ;", "}", "if    ( WSRefAnnotationProcessor . isEmpty ( annotation . type (  )  )  )     {", "throw   WSLogger . ROOT _ LOGGER . requiredServiceRefType (  )  ;", "}", "WSRefAnnotationProcessor . processRef ( unit ,    annotation . type (  )  ,    annotation ,    classInfo ,    null ,    annotation . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["processClassRef"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   fieldName    =    fieldInfo . name (  )  ;", "final   String   injectionType    =     (  (  . isEmpty ( annotation . type (  )  )  )     |  |     ( annotation . type (  )  . equals ( Object . class . getName (  )  )  )  )     ?    fieldInfo . type (  )  . name (  )  . toString (  )     :    annotation . type (  )  ;", "final   InjectionTarget   injectionTarget    =    new   FieldInjectionTarget ( fieldInfo . declaringClass (  )  . name (  )  . toString (  )  ,    fieldName ,    injectionType )  ;", "final   String   bindingName    =     (  . isEmpty ( annotation . name (  )  )  )     ?     (  ( fieldInfo . declaringClass (  )  . name (  )  . toString (  )  )     +     \"  /  \"  )     +     ( fieldInfo . name (  )  )     :    annotation . name (  )  ;", ". processRef ( unit ,    injectionType ,    annotation ,    fieldInfo . declaringClass (  )  ,    injectionTarget ,    bindingName )  ;", "}", "METHOD_END"], "methodName": ["processFieldRef"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   methodName    =    methodInfo . name (  )  ;", "if    (  (  !  ( methodName . startsWith (  \" set \"  )  )  )     |  |     (  ( methodInfo . args (  )  . length )     !  =     1  )  )     {", "throw   WSLogger . ROOT _ LOGGER . invalidServiceRefSetterMethodName ( methodInfo )  ;", "}", "final   String   injectionType    =     (  (  . isEmpty ( annotation . type (  )  )  )     |  |     ( annotation . type (  )  . equals ( Object . class . getName (  )  )  )  )     ?    methodInfo . args (  )  [  0  ]  . name (  )  . toString (  )     :    annotation . type (  )  ;", "final   InjectionTarget   injectionTarget    =    new   MethodInjectionTarget ( methodInfo . declaringClass (  )  . name (  )  . toString (  )  ,    methodName ,    injectionType )  ;", "final   String   bindingName    =     (  . isEmpty ( annotation . name (  )  )  )     ?     (  (  ( methodInfo . declaringClass (  )  . name (  )  . toString (  )  )     +     \"  /  \"  )     +     ( methodName . substring (  3  ,     4  )  . toLowerCase ( Locale . ENGLISH )  )  )     +     ( methodName . substring (  4  )  )     :    annotation . name (  )  ;", ". processRef ( unit ,    injectionType ,    annotation ,    methodInfo . declaringClass (  )  ,    injectionTarget ,    bindingName )  ;", "}", "METHOD_END"], "methodName": ["processMethodRef"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   EEModuleDescription   moduleDescription    =    unit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "final   AnnotatedElement   target    =     . createAnnotatedElement ( unit ,    classInfo ,    injectionTarget )  ;", "final   String   componentClassName    =    classInfo . name (  )  . toString (  )  ;", "final   Map < String ,    String >    bindingMap    =    new   HashMap < String ,    String >  (  )  ;", "boolean   isEJB    =    false ;", "for    ( final   ComponentDescription   componentDescription    :    moduleDescription . getComponentsByClassName ( componentClassName )  )     {", "if    ( componentDescription   instanceof   SessionBeanComponentDescription )     {", "isEJB    =    true ;", "bindingMap . put (  (  (  ( componentDescription . getComponentName (  )  )     +     \"  /  \"  )     +    bindingName )  ,    bindingName )  ;", "}", "}", "if    (  ! isEJB )     {", "bindingMap . put ( bindingName ,    bindingName )  ;", "}", "for    ( String   refKey    :    bindingMap . keySet (  )  )     {", "String   refName    =    bindingMap . get ( refKey )  ;", "ManagedReferenceFactory   factory    =    WebServiceReferences . createWebServiceFactory ( unit ,    type ,    annotation ,    target ,    refName ,    refKey )  ;", "final   EEModuleClassDescription   classDescription    =    moduleDescription . addOrGetLocalClassDescription ( classInfo . name (  )  . toString (  )  )  ;", "final   InjectionSource   serviceRefSource    =    new   FixedInjectionSource ( factory ,    factory )  ;", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( refName ,    serviceRefSource )  ;", "classDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "final   ResourceInjectionConfiguration   injectionConfiguration    =     ( injectionTarget    !  =    null )     ?    new   ResourceInjectionConfiguration ( injectionTarget ,    new   LookupInjectionSource ( refName )  )     :    null ;", "if    ( injectionConfiguration    !  =    null )     {", "classDescription . addResourceInjection ( injectionConfiguration )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processRef"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   AnnotationValue   value    =    annotation . value ( attribute )  ;", "return   value    !  =    null    ?    value . asClass (  )  . name (  )  . toString (  )     :    null ;", "}", "METHOD_END"], "methodName": ["classValueOrNull"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "final   AnnotationValue   value    =    annotation . value ( attribute )  ;", "return   value    !  =    null    ?    value . asString (  )     :    null ;", "}", "METHOD_END"], "methodName": ["stringValueOrNull"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["value"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "return   wsdlLocation ;", "}", "METHOD_END"], "methodName": ["wsdlLocation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefAnnotationWrapper"}, {"methodBody": ["METHOD_START", "{", "if    ( componentDescription    =  =    null )     {", "return   RefUMMD . getServiceRefName (  )  ;", "} else    {", "return    (  ( componentDescription . getComponentName (  )  )     +     \"  /  \"  )     +     ( RefUMMD . getServiceRefName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCacheKey"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WSRefDDProcessor . isEmpty ( className )  )  )     {", "try    {", "return   classLoader . loadClass ( className )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getClass"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( serviceRefMD . getJaxrpcMappingFile (  )  )     !  =    null )     |  |     (  \" Service \"  . equals ( serviceRefMD . getServiceInterface (  )  )  )  )     {", "throw   WSLogger . ROOT _ LOGGER . jaxRpcNotSupported (  )  ;", "}", "final   UnifiedServiceRefMetaData   serviceRefUMDM    =    WSRefUtils . translate ( serviceRefMD )  ;", "serviceRefUMDM . setVfsRoot (  . getUnifiedVirtualFile ( unit )  )  ;", ". processWSFeatures ( unit ,    serviceRefMD . getInjectionTargets (  )  ,    serviceRefUMDM )  ;", "final   WSRefRegistry   wsRefRegistry    =    ASHelper . getWSRefRegistry ( unit )  ;", "wsRefRegistry . add (  . getCacheKey ( componentDescription ,    serviceRefUMDM )  ,    serviceRefUMDM )  ;", "return   serviceRefUMDM ;", "}", "METHOD_END"], "methodName": ["getServiceRef"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ResourceRoot   resourceRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "return   new   VirtualFileAdaptor ( resourceRoot . getRoot (  )  )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedVirtualFile"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( string    =  =    null )     |  |     ( string . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( injectionTargets    =  =    null )     |  |     (  ( injectionTargets . size (  )  )     =  =     0  )  )", "return ;", "if    (  ( injectionTargets . size (  )  )     >     1  )     {", "}", "final   Module   module    =    unit . getAttachment ( MODULE )  ;", "final   DeploymentReflectionIndex   deploymentReflectionIndex    =    unit . getAttachment ( REFLECTION _ INDEX )  ;", "final   ResourceInjectionTargetMetaData   injectionTarget    =    injectionTargets . iterator (  )  . next (  )  ;", "final   String   injectionTargetClassName    =    injectionTarget . getInjectionTargetClass (  )  ;", "final   String   injectionTargetName    =    injectionTarget . getInjectionTargetName (  )  ;", "final   AccessibleObject   fieldOrMethod    =    InjectionUtils . getInjectionTarget ( injectionTargetClassName ,    injectionTargetName ,    module . getClassLoader (  )  ,    deploymentReflectionIndex )  ;", "WSRefUtils . processAnnotatedElement ( fieldOrMethod ,    RefUMDM )  ;", "}", "METHOD_END"], "methodName": ["processWSFeatures"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefDDProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( references . containsKey ( refName )  )", "throw   new   UnsupportedOperationException (  )  ;", "references . put ( refName ,    RefUMDM )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefRegistry"}, {"methodBody": ["METHOD_START", "{", "references . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefRegistry"}, {"methodBody": ["METHOD_START", "{", "return   references . get ( refName )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefRegistry"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableCollection ( references . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedServiceRefMetaDatas"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   WSRefRegistry (  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefRegistry"}, {"methodBody": ["METHOD_START", "{", "return   anElement    !  =    null    ?     (  ( T )     ( anElement . getAnnotation ( annotationClass )  )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    declaringClass    =    null ;", "if    ( annotatedElement   instanceof   Field )     {", "declaringClass    =     (  ( Field )     ( annotatedElement )  )  . getDeclaringClass (  )  ;", "} else", "if    ( annotatedElement   instanceof   Method )     {", "declaringClass    =     (  ( Method )     ( annotatedElement )  )  . getDeclaringClass (  )  ;", "} else", "if    ( annotatedElement   instanceof   Class )     {", "declaringClass    =     (  ( Class <  ?  >  )     ( annotatedElement )  )  ;", "}", "return   declaringClass ;", "}", "METHOD_END"], "methodName": ["getDeclaringClass"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "List < UnifiedHandlerChainMetaData >    uhcmds    =    new   LinkedList < UnifiedHandlerChainMetaData >  (  )  ;", "for    ( final   ServiceReferenceHandlerChainMetaData   handlerChainMD    :    handlerChainsMD . getHandlers (  )  )     {", "List < UnifiedHandlerMetaData >    uhmds    =    new   LinkedList < UnifiedHandlerMetaData >  (  )  ;", "for    ( final   ServiceReferenceHandlerMetaData   handlerMD    :    handlerChainMD . getHandler (  )  )     {", "final   UnifiedHandlerMetaData   handlerUMDM    =    WSRefUtils . getUnifiedHandlerMetaData ( handlerMD )  ;", "uhmds . add ( handlerUMDM )  ;", "}", "uhcmds . add ( new   UnifiedHandlerChainMetaData ( handlerChainMD . getServiceNamePattern (  )  ,    handlerChainMD . getPortNamePattern (  )  ,    handlerChainMD . getProtocolBindings (  )  ,    uhmds ,    false ,    null )  )  ;", "}", "return   new   UnifiedHandlerChainsMetaData ( uhcmds )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedHandlerChainsMetaData"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "List < UnifiedInitParamMetaData >    unifiedInitParamMDs    =    new   LinkedList < UnifiedInitParamMetaData >  (  )  ;", "List < ParamValueMetaData >    initParams    =    srhmd . getInitParam (  )  ;", "if    ( initParams    !  =    null )     {", "for    ( ParamValueMetaData   initParam    :    initParams )     {", "unifiedInitParamMDs . add ( new   UnifiedInitParamMetaData ( initParam . getParamName (  )  ,    initParam . getParamValue (  )  )  )  ;", "}", "}", "List < QName >    soapHeaders    =    srhmd . getSoapHeader (  )  ;", "Set < QName >    soapHeaderList    =     ( soapHeaders    !  =    null )     ?    new   HashSet < QName >  ( soapHeaders )     :    null ;", "List < String >    soapRoles    =    srhmd . getSoapRole (  )  ;", "Set < String >    soapRolesList    =     ( soapRoles    !  =    null )     ?    new   HashSet < String >  ( soapRoles )     :    null ;", "List < String >    portNames    =    srhmd . getPortName (  )  ;", "Set < String >    portNameList    =     ( portNames    !  =    null )     ?    new   HashSet < String >  ( portNames )     :    null ;", "return   new   UnifiedHandlerMetaData ( srhmd . getHandlerClass (  )  ,    srhmd . getHandlerName (  )  ,    unifiedInitParamMDs ,    soapHeaderList ,    soapRolesList ,    portNameList )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedHandlerMetaData"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   UnifiedPortComponentRefMetaDataBuilder   builder    =    new   UnifiedPortComponentRefMetaDataBuilder (  )  ;", "builder . setServiceEndpointInterface ( portComponentMD . getServiceEndpointInterface (  )  )  ;", "builder . setMtomEnabled ( portComponentMD . isEnableMtom (  )  )  ;", "builder . setMtomThreshold ( portComponentMD . getMtomThreshold (  )  )  ;", "final   Addressing   addressingMD    =    portComponentMD . getAddressing (  )  ;", "if    ( addressingMD    !  =    null )     {", "builder . setAddressingAnnotationSpecified ( true )  ;", "builder . setAddressingEnabled ( addressingMD . isEnabled (  )  )  ;", "builder . setAddressingRequired ( addressingMD . isRequired (  )  )  ;", "builder . setAddressingResponses ( addressingMD . getResponses (  )  )  ;", "}", "if    (  ( portComponentMD . getRespectBinding (  )  )     !  =    null )     {", "builder . setRespectBindingAnnotationSpecified ( true )  ;", "builder . setRespectBindingEnabled ( true )  ;", "}", "builder . setPortComponentLink ( portComponentMD . getPortComponentLink (  )  )  ;", "if    ( portComponentMD   instanceof   JBossPortComponentRef )     {", "final   JBossPortComponentRef   jbossPortComponentMD    =     (  ( JBossPortComponentRef )     ( portComponentMD )  )  ;", "builder . setPortQName ( jbossPortComponentMD . getPortQname (  )  )  ;", "builder . setConfigName ( jbossPortComponentMD . getConfigName (  )  )  ;", "builder . setConfigFile ( jbossPortComponentMD . getConfigFile (  )  )  ;", "final   List < StubPropertyMetaData >    stubPropertiesMD    =    jbossPortComponentMD . getStubProperties (  )  ;", "if    ( stubPropertiesMD    !  =    null )     {", "for    ( final   StubPropertyMetaData   stubPropertyMD    :    stubPropertiesMD )     {", "builder . addStubProperty ( new   UnifiedStubPropertyMetaData ( stubPropertyMD . getPropName (  )  ,    stubPropertyMD . getPropValue (  )  )  )  ;", "}", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedPortComponentRefMetaData"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   WebServiceRef   webServiceRefAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    WebServiceRef . class )  ;", "final   WebServiceRefs   webServiceRefsAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    WebServiceRefs . class )  ;", "if    (  ( webServiceRefAnnotation    =  =    null )     &  &     ( webServiceRefsAnnotation    =  =    null )  )     {", "return   null ;", "}", "final   List < WebServiceRef >    wsrefList    =    new   ArrayList < WebServiceRef >  (  )  ;", "if    ( webServiceRefAnnotation    !  =    null )     {", "wsrefList . add ( webServiceRefAnnotation )  ;", "}", "if    ( webServiceRefsAnnotation    !  =    null )     {", "for    ( final   WebServiceRef   webServiceRefAnn    :    webServiceRefsAnnotation . value (  )  )     {", "wsrefList . add ( webServiceRefAnn )  ;", "}", "}", "WebServiceRef   returnValue    =    null ;", "if    (  ( wsrefList . size (  )  )     =  =     1  )     {", "returnValue    =    wsrefList . get (  0  )  ;", "} else    {", "for    ( WebServiceRef   webServiceRefAnn    :    wsrefList )     {", "if    ( serviceRefUMDM . getServiceRefName (  )  . endsWith ( webServiceRefAnn . name (  )  )  )     {", "returnValue    =    webServiceRefAnn ;", "break ;", "}", "}", "}", "return   returnValue ;", "}", "METHOD_END"], "methodName": ["getWebServiceRefAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   Addressing   addressingAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    Addressing . class )  ;", "if    ( addressingAnnotation    !  =    null )     {", "serviceRefUMDM . setAddressingMedadata ( new   AddressingMetadata ( true ,    addressingAnnotation . enabled (  )  ,    addressingAnnotation . required (  )  ,    addressingAnnotation . responses (  )  . toString (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["processAddressingAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "WSRefUtils . processAddressingAnnotation ( anElement ,    serviceRefUMDM )  ;", "WSRefUtils . processMTOMAnnotation ( anElement ,    serviceRefUMDM )  ;", "WSRefUtils . processRespectBindingAnnotation ( anElement ,    serviceRefUMDM )  ;", "WSRefUtils . processHandlerChainAnnotation ( anElement ,    serviceRefUMDM )  ;", "WSRefUtils . processServiceRefType ( anElement ,    serviceRefUMDM )  ;", "}", "METHOD_END"], "methodName": ["processAnnotatedElement"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   HandlerChain   handlerChainAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    HandlerChain . class )  ;", "if    ( handlerChainAnnotation    !  =    null )     {", "String   handlerChain    =    null ;", "if    (  ( handlerChainAnnotation . file (  )  . length (  )  )     >     0  )", "handlerChain    =    handlerChainAnnotation . file (  )  ;", "if    ( handlerChain    !  =    null )     {", "try    {", "new   URL ( handlerChain )  ;", "}    catch    ( MalformedURLException   ignored )     {", "final   Class <  ?  >    declaringClass    =    WSRefUtils . getDeclaringClass ( anElement )  ;", "handlerChain    =     (  ( declaringClass . getPackage (  )  . getName (  )  . replace (  '  .  '  ,     '  /  '  )  )     +     \"  /  \"  )     +    handlerChain ;", "}", "serviceRefUMDM . setHandlerChain ( handlerChain )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processHandlerChainAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   MTOM   mtomAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    MTOM . class )  ;", "if    ( mtomAnnotation    !  =    null )     {", "serviceRefUMDM . setMTOMMetadata ( new   MTOMMetadata ( true ,    mtomAnnotation . enabled (  )  ,    mtomAnnotation . threshold (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["processMTOMAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   RespectBinding   respectBindingAnnotation    =    WSRefUtils . getAnnotation ( anElement ,    RespectBinding . class )  ;", "if    ( respectBindingAnnotation    !  =    null )     {", "serviceRefUMDM . setRespectBindingMetadata ( new   RespectBindingMetadata ( true ,    respectBindingAnnotation . enabled (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["processRespectBindingAnnotation"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( anElement   instanceof   Field )     {", "final   Class <  ?  >    targetClass    =     (  ( Field )     ( anElement )  )  . getType (  )  ;", "serviceRefUMDM . setServiceRefType ( targetClass . getName (  )  )  ;", "if    ( Service . class . isAssignableFrom ( targetClass )  )", "serviceRefUMDM . setServiceInterface ( targetClass . getName (  )  )  ;", "} else", "if    ( anElement   instanceof   Method )     {", "final   Class <  ?  >    targetClass    =     (  ( Method )     ( anElement )  )  . getParameterTypes (  )  [  0  ]  ;", "serviceRefUMDM . setServiceRefType ( targetClass . getName (  )  )  ;", "if    ( Service . class . isAssignableFrom ( targetClass )  )", "serviceRefUMDM . setServiceInterface ( targetClass . getName (  )  )  ;", "} else    {", "final   WebServiceRef   serviceRefAnnotation    =     . getWebServiceRefAnnotation ( anElement ,    serviceRefUMDM )  ;", "Class <  ?  >    targetClass    =    null ;", "if    (  ( serviceRefAnnotation    !  =    null )     &  &     (  ( serviceRefAnnotation . type (  )  )     !  =     ( Object . class )  )  )     {", "targetClass    =    serviceRefAnnotation . type (  )  ;", "serviceRefUMDM . setServiceRefType ( targetClass . getName (  )  )  ;", "if    ( Service . class . isAssignableFrom ( targetClass )  )", "serviceRefUMDM . setServiceInterface ( targetClass . getName (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processServiceRefType"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "UnifiedServiceRefMetaDataBuilder   builder    =    new   UnifiedServiceRefMetaDataBuilder (  )  ;", "builder . setServiceRefName ( serviceRefMD . getName (  )  )  ;", "builder . setServiceRefType ( serviceRefMD . getServiceRefType (  )  )  ;", "builder . setServiceInterface ( serviceRefMD . getServiceInterface (  )  )  ;", "builder . setWsdlFile ( serviceRefMD . getWsdlFile (  )  )  ;", "builder . setMappingFile ( serviceRefMD . getJaxrpcMappingFile (  )  )  ;", "builder . setServiceQName ( serviceRefMD . getServiceQname (  )  )  ;", "final   Collection <  ?    extends   PortComponentRef >    portComponentsMD    =    serviceRefMD . getPortComponentRef (  )  ;", "if    ( portComponentsMD    !  =    null )     {", "for    ( final   PortComponentRef   portComponentMD    :    portComponentsMD )     {", "final   UnifiedPortComponentRefMetaData   portComponentUMDM    =     . getUnifiedPortComponentRefMetaData ( portComponentMD )  ;", "if    (  (  ( portComponentUMDM . getServiceEndpointInterface (  )  )     !  =    null )     |  |     (  ( portComponentUMDM . getPortQName (  )  )     !  =    null )  )     {", "builder . addPortComponentRef ( portComponentUMDM )  ;", "} else    {", "WSLogger . ROOT _ LOGGER . ignoringPortComponentRef ( portComponentUMDM )  ;", "}", "}", "}", "final   Collection < ServiceReferenceHandlerMetaData >    handlersMD    =    serviceRefMD . getHandlers (  )  ;", "if    ( handlersMD    !  =    null )     {", "for    ( final   ServiceReferenceHandlerMetaData   handlerMD    :    handlersMD )     {", "final   UnifiedHandlerMetaData   handlerUMDM    =     . getUnifiedHandlerMetaData ( handlerMD )  ;", "builder . addHandler ( handlerUMDM )  ;", "}", "}", "ServiceReferenceHandlerChainsMetaData   handlerChainsMD    =    serviceRefMD . getHandlerChains (  )  ;", "if    ( handlerChainsMD    !  =    null )     {", "final   UnifiedHandlerChainsMetaData   handlerChainsUMDM    =     . getUnifiedHandlerChainsMetaData ( handlerChainsMD )  ;", "builder . setHandlerChains ( handlerChainsUMDM )  ;", "}", "if    ( serviceRefMD   instanceof   JBossServiceReferenceMetaData )     {", "final   JBossServiceReferenceMetaData   jbossServiceRefMD    =     (  ( JBossServiceReferenceMetaData )     ( serviceRefMD )  )  ;", "builder . setServiceImplClass ( jbossServiceRefMD . getServiceClass (  )  )  ;", "builder . setConfigName ( jbossServiceRefMD . getConfigName (  )  )  ;", "builder . setConfigFile ( jbossServiceRefMD . getConfigFile (  )  )  ;", "builder . setWsdlOverride ( jbossServiceRefMD . getWsdlOverride (  )  )  ;", "builder . setHandlerChain ( jbossServiceRefMD . getHandlerChain (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["translate"], "fileName": "org.jboss.as.webservices.webserviceref.WSRefUtils"}, {"methodBody": ["METHOD_START", "{", "final   SPIProvider   spiProvider    =    SPIProviderResolver . getInstance (  )  . getProvider (  )  ;", "return   spiProvider . getSPI ( RefFactoryFactory . class )  . newRefFactory (  )  ;", "}", "METHOD_END"], "methodName": ["getServiceRefFactory"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceManagedReferenceFactory"}, {"methodBody": ["METHOD_START", "{", "final   WSRefRegistry   wsRefRegistry    =    ASHelper . getWSRefRegistry ( unit )  ;", "UnifiedServiceRefMetaData   serviceRefUMDM    =    wsRefRegistry . get ( refKey )  ;", "if    ( serviceRefUMDM    =  =    null )     {", "serviceRefUMDM    =    new   UnifiedServiceRefMetaData (  . getUnifiedVirtualFile ( unit )  ,    bindingName )  ;", "wsRefRegistry . add ( refKey ,    serviceRefUMDM )  ;", "}", ". initServiceRef ( unit ,    serviceRefUMDM ,    type ,    annotation )  ;", ". processWSFeatures ( serviceRefUMDM ,    annotatedElement )  ;", "return   serviceRefUMDM ;", "}", "METHOD_END"], "methodName": ["createServiceRef"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "final   UnifiedServiceRefMetaData   serviceRefUMDM    =    WebServiceReferences . createServiceRef ( deploymentUnit ,    targetType ,    wsRefDescription ,    target ,    bindingName ,    bindingName )  ;", "final   Module   module    =    deploymentUnit . getAttachment ( MODULE )  ;", "return   new   WebServiceManagedReferenceFactory ( serviceRefUMDM ,    module . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["createWebServiceFactory"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "final   UnifiedServiceRefMetaData   serviceRefUMDM    =    WebServiceReferences . createServiceRef ( deploymentUnit ,    targetType ,    wsRefDescription ,    target ,    bindingName ,    refKey )  ;", "final   Module   module    =    deploymentUnit . getAttachment ( MODULE )  ;", "return   new   WebServiceManagedReferenceFactory ( serviceRefUMDM ,    module . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["createWebServiceFactory"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "final   ClassLoader   oldCL    =    WildFlySecurityManager . getCurrentContextClassLoaderPrivileged (  )  ;", "try    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( module . getClassLoader (  )  )  ;", "if    (  !  (  . isEmpty ( className )  )  )     {", "try    {", "return   module . getClassLoader (  )  . loadClass ( className )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "}", "return   null ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( oldCL )  ;", "}", "}", "METHOD_END"], "methodName": ["getClass"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "final   ResourceRoot   resourceRoot    =    unit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "return   new   VirtualFileAdaptor ( resourceRoot . getRoot (  )  )  ;", "}", "METHOD_END"], "methodName": ["getUnifiedVirtualFile"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( WebServiceReferences . isEmpty ( annotation . wsdlLocation (  )  )  )  )     {", "serviceRefUMDM . setWsdlFile ( annotation . wsdlLocation (  )  )  ;", "}", "final   Module   module    =    unit . getAttachment ( MODULE )  ;", "final   Class <  ?  >    typeClass    =    WebServiceReferences . getClass ( module ,    type )  ;", "serviceRefUMDM . setServiceRefType ( typeClass . getName (  )  )  ;", "if    (  !  ( WebServiceReferences . isEmpty ( annotation . value (  )  )  )  )     {", "serviceRefUMDM . setServiceInterface ( annotation . value (  )  )  ;", "} else", "if    ( isAssignableFrom ( typeClass )  )     {", "serviceRefUMDM . setServiceInterface ( typeClass . getName (  )  )  ;", "} else    {", "serviceRefUMDM . setServiceInterface ( getName (  )  )  ;", "}", "return   serviceRefUMDM ;", "}", "METHOD_END"], "methodName": ["initServiceRef"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "return    ( string    =  =    null )     |  |     ( string . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}, {"methodBody": ["METHOD_START", "{", "WSRefUtils . processAnnotatedElement ( annotatedElement ,    serviceRefUMDM )  ;", "}", "METHOD_END"], "methodName": ["processWSFeatures"], "fileName": "org.jboss.as.webservices.webserviceref.WebServiceReferences"}]