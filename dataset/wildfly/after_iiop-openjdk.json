[{"methodBody": ["METHOD_START", "{", "final   ModelNode   securityDomainNode    =    IIOPRootDefinition . SECURITY _ DOMAIN . resolveModelAttribute ( context ,    resourceModel )  ;", "final   ModelNode   serverSSLtextNode    =    IIOPRootDefinition . SERVER _ SSL _ CONTEXT . resolveModelAttribute ( context ,    resourceModel )  ;", "final   ModelNode   clientSSLtextNode    =    IIOPRootDefinition . CLIENT _ SSL _ CONTEXT . resolveModelAttribute ( context ,    resourceModel )  ;", "if    (  (  !  ( securityDomainNode . isDefined (  )  )  )     &  &     (  (  !  ( serverSSLtextNode . isDefined (  )  )  )     |  |     (  !  ( clientSSLtextNode . isDefined (  )  )  )  )  )     {", "return   false ;", "} else    {", "return   true ;", "}", "}", "METHOD_END"], "methodName": ["isSSLConfigured"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "final   List < String >    warnings    =    new   LinkedList <  >  (  )  ;", "final   boolean   supportSSL    =    IIOPRootDefinition . SUPPORT _ SSL . resolveModelAttribute ( context ,    resourceModel )  . asBoolean (  )  ;", "final   boolean   serverRequiresSsl    =    IIOPRootDefinition . SERVER _ REQUIRES _ SSL . resolveModelAttribute ( context ,    resourceModel )  . asBoolean (  )  ;", "final   boolean   clientRequiresSsl    =    IIOPRootDefinition . CLIENT _ REQUIRES _ SSL . resolveModelAttribute ( context ,    resourceModel )  . asBoolean (  )  ;", "final   boolean   sslConfigured    =     . isSSLConfigured ( context ,    resourceModel )  ;", ". validateSSLConfig ( supportSSL ,    sslConfigured ,    serverRequiresSsl ,    clientRequiresSsl )  ;", ". validateSSLSocketBinding ( context ,    resourceModel ,    sslConfigured ,    warnings )  ;", ". validateIORTransportConfig ( context ,    resourceModel ,    supportSSL ,    serverRequiresSsl ,    warnings )  ;", ". validateORBInitializerConfig ( context ,    resourceModel )  ;", "return   warnings ;", "}", "METHOD_END"], "methodName": ["validateConfig"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "ConfigValidator . validateSSLAttribute ( context ,    resourceModel ,    sslConfigured ,    serverRequiresSsl ,    IIOPRootDefinition . INTEGRITY ,    warnings )  ;", "ConfigValidator . validateSSLAttribute ( context ,    resourceModel ,    sslConfigured ,    serverRequiresSsl ,    IIOPRootDefinition . CONFIDENTIALITY ,    warnings )  ;", "ConfigValidator . validateSSLAttribute ( context ,    resourceModel ,    sslConfigured ,    serverRequiresSsl ,    IIOPRootDefinition . TRUST _ IN _ CLIENT ,    warnings )  ;", "ConfigValidator . validateTrustInTarget ( context ,    resourceModel ,    sslConfigured ,    warnings )  ;", "ConfigValidator . validateSupportedAttribute ( context ,    resourceModel ,    IIOPRootDefinition . DETECT _ MISORDERING ,    warnings )  ;", "ConfigValidator . validateSupportedAttribute ( context ,    resourceModel ,    IIOPRootDefinition . DETECT _ REPLAY ,    warnings )  ;", "}", "METHOD_END"], "methodName": ["validateIORTransportConfig"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   securityInitializerNode    =    IIOPRootDefinition . SECURITY . resolveModelAttribute ( context ,    resourceModel )  ;", "final   ModelNode   authContextNode    =    IIOPRootDefinition . AUTHENTICATION _ CONTEXT . resolveModelAttribute ( context ,    resourceModel )  ;", "if    (  (  !  ( securityInitializerNode . isDefined (  )  )  )     |  |     (  !  ( securityInitializerNode . asString (  )  . equalsIgnoreCase ( Constants . ELYTRON )  )  )  )     {", "if    ( authContextNode . isDefined (  )  )     {", "throw   IIOPLogger . ROOT _ LOGGER . ineffectiveAuthenticationContexturation (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateORBInitializerConfig"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   attributeNode    =    attributeDefinition . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( attributeNode . isDefined (  )  )     {", "final   String   attribute    =    attributeNode . asString (  )  ;", "if    ( sslured )     {", "if    ( attribute . equals ( Constants . IOR _ NONE )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . inconsistentSupportedTransport ( attributeDefinition . getName (  )  ,     ( serverRequiresSsl    ?    Constants . IOR _ REQUIRED    :    Constants . IOR _ SUPPORTED )  )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "if    ( serverRequiresSsl    &  &     ( attribute . equals ( Constants . IOR _ SUPPORTED )  )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . inconsistentRequiredTransport ( Constants . SECURITY _ SERVER _ REQUIRES _ SSL ,    attributeDefinition . getName (  )  )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "} else    {", "if    (  !  ( attribute . equals ( Constants . IOR _ NONE )  )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . inconsistentUnsupportedTransport ( attributeDefinition . getName (  )  )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["validateSSLAttribute"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "if    ( supportSSL )     {", "if    (  ! sslured )     {", "throw   IIOPLogger . ROOT _ LOGGER . noSecurityDomainOrSSLContextsSpecified (  )  ;", "}", "} else", "if    ( serverRequiresSsl    |  |    clientRequiresSsl )     {", "throw   IIOPLogger . ROOT _ LOGGER . sslNotured (  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateSSLConfig"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "ModelNode   sslSocketBinding    =    IIOPRootDefinition . SSL _ SOCKET _ BINDING . resolveModelAttribute ( context ,    resourceModel )  ;", "if    (  ( sslSocketBinding . isDefined (  )  )     &  &     (  ! sslured )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . sslPortWithoutSsluration (  )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "}", "METHOD_END"], "methodName": ["validateSSLSocketBinding"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   attributeNode    =    attributeDefinition . resolveModelAttribute ( context ,    resourceModel )  ;", "if    (  ( attributeNode . isDefined (  )  )     &  &     (  !  ( attributeNode . asString (  )  . equals ( Constants . IOR _ SUPPORTED )  )  )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . inconsistentSupportedTransport ( attributeDefinition . getName (  )  ,    Constants . IOR _ SUPPORTED )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "}", "METHOD_END"], "methodName": ["validateSupportedAttribute"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   establishTrustInTargetNode    =    IIOPRootDefinition . TRUST _ IN _ TARGET . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( establishTrustInTargetNode . isDefined (  )  )     {", "final   String   establishTrustInTarget    =    establishTrustInTargetNode . asString (  )  ;", "if    ( sslured    &  &     ( establishTrustInTarget . equals ( Constants . IOR _ NONE )  )  )     {", "final   String   warning    =    IIOPLogger . ROOT _ LOGGER . inconsistentSupportedTransport ( Constants . IOR _ TRANSPORT _ TRUST _ IN _ TARGET ,    Constants . IOR _ SUPPORTED )  ;", "IIOPLogger . ROOT _ LOGGER . warn ( warning )  ;", "warnings . add ( warning )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateTrustInTarget"], "fileName": "org.wildfly.iiop.openjdk.ConfigValidator"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( IIOPExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  \"  .  \"  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    IIOPExtension . RESOURCE _ NAME ,    IIOPExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.wildfly.iiop.openjdk.IIOPExtension"}, {"methodBody": ["METHOD_START", "{", "final   IIOPInitializer   element    =    IIOPInitializer . MAP . get ( initializerName )  ;", "return   element    =  =    null    ?    IIOPInitializer . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["fromName"], "fileName": "org.wildfly.iiop.openjdk.IIOPInitializer"}, {"methodBody": ["METHOD_START", "{", "return   this . initializerClasses ;", "}", "METHOD_END"], "methodName": ["getInitializerClasses"], "fileName": "org.wildfly.iiop.openjdk.IIOPInitializer"}, {"methodBody": ["METHOD_START", "{", "return   this . initializerName ;", "}", "METHOD_END"], "methodName": ["getInitializerName"], "fileName": "org.wildfly.iiop.openjdk.IIOPInitializer"}, {"methodBody": ["METHOD_START", "{", "final   boolean   clientRequiresSSL    =    Boolean . getBoolean ( props . getProperty ( Constants . SECURITY _ CLIENT _ REQUIRES _ SSL )  )  ;", "CSIV 2 IORToSocketInfo . setClientRequiresSSL ( clientRequiresSSL )  ;", "}", "METHOD_END"], "methodName": ["configureClientSecurity"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   IORSecurityConfigMetaData   securityConfigMetaData    =    new   IORSecurityConfigMetaData (  )  ;", "final   IORSASContextMetaData   sasContextMetaData    =    new   IORSASContextMetaData (  )  ;", "sasContextMetaData . setCallerPropagation ( RootDefinition . CALLER _ PROPAGATION . resolveModelAttribute ( context ,    resourceModel )  . asString (  )  )  ;", "securityConfigMetaData . setSasContext ( sasContextMetaData )  ;", "final   IORASContextMetaData   asContextMetaData    =    new   IORASContextMetaData (  )  ;", "asContextMetaData . setAuthMethod ( RootDefinition . AUTH _ METHOD . resolveModelAttribute ( context ,    resourceModel )  . asString (  )  )  ;", "if    ( resourceModel . hasDefined ( RootDefinition . REALM . getName (  )  )  )     {", "asContextMetaData . setRealm ( RootDefinition . REALM . resolveModelAttribute ( context ,    resourceModel )  . asString (  )  )  ;", "}", "asContextMetaData . setRequired ( RootDefinition . REQUIRED . resolveModelAttribute ( context ,    resourceModel )  . asBoolean (  )  )  ;", "securityConfigMetaData . setAsContext ( asContextMetaData )  ;", "final   boolean   serverRequiresSsl    =    RootDefinition . SERVER _ REQUIRES _ SSL . resolveModelAttribute ( context ,    resourceModel )  . asBoolean (  )  ;", "final   IORTransportConfigMetaData   transportConfigMetaData    =    new   IORTransportConfigMetaData (  )  ;", "final   ModelNode   integrityNode    =    RootDefinition . INTEGRITY . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( integrityNode . isDefined (  )  )     {", "transportConfigMetaData . setIntegrity ( integrityNode . asString (  )  )  ;", "} else    {", "transportConfigMetaData . setIntegrity (  ( sslConfigured    ?    serverRequiresSsl    ?    Constants . IOR _ REQUIRED    :    Constants . IOR _ SUPPORTED    :    Constants . NONE )  )  ;", "}", "final   ModelNode   confidentialityNode    =    RootDefinition . CONFIDENTIALITY . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( confidentialityNode . isDefined (  )  )     {", "transportConfigMetaData . setConfidentiality ( confidentialityNode . asString (  )  )  ;", "} else    {", "transportConfigMetaData . setConfidentiality (  ( sslConfigured    ?    serverRequiresSsl    ?    Constants . IOR _ REQUIRED    :    Constants . IOR _ SUPPORTED    :    Constants . IOR _ NONE )  )  ;", "}", "final   ModelNode   establishTrustInTargetNode    =    RootDefinition . TRUST _ IN _ TARGET . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( establishTrustInTargetNode . isDefined (  )  )     {", "transportConfigMetaData . setEstablishTrustInTarget ( confidentialityNode . asString (  )  )  ;", "} else    {", "transportConfigMetaData . setEstablishTrustInTarget (  ( sslConfigured    ?    Constants . IOR _ SUPPORTED    :    Constants . NONE )  )  ;", "}", "final   ModelNode   establishTrustInClientNode    =    RootDefinition . TRUST _ IN _ CLIENT . resolveModelAttribute ( context ,    resourceModel )  ;", "if    ( establishTrustInClientNode . isDefined (  )  )     {", "transportConfigMetaData . setEstablishTrustInClient ( establishTrustInClientNode . asString (  )  )  ;", "} else    {", "transportConfigMetaData . setEstablishTrustInClient (  ( sslConfigured    ?    serverRequiresSsl    ?    Constants . IOR _ REQUIRED    :    Constants . IOR _ SUPPORTED    :    Constants . NONE )  )  ;", "}", "transportConfigMetaData . setDetectMisordering ( Constants . IOR _ SUPPORTED )  ;", "transportConfigMetaData . setDetectReplay ( Constants . IOR _ SUPPORTED )  ;", "securityConfigMetaData . setTransportConfig ( transportConfigMetaData )  ;", "return   securityConfigMetaData ;", "}", "METHOD_END"], "methodName": ["createIORSecurityConfigMetaData"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "getResourceProperties ( props ,    RootDefinition . INSTANCE ,    context ,    model )  ;", "ModelNode   configNode    =    model . get ( Constants . CONFIGURATION )  ;", "if    ( configNode . hasDefined ( Constants . PROPERTIES )  )     {", "for    ( Property   property    :    configNode . get ( Constants . PROPERTIES )  . get ( Constants . PROPERTY )  . asPropertyList (  )  )     {", "String   name    =    property . getName (  )  ;", "String   value    =    property . getValue (  )  . get ( Constants . PROPERTY _ VALUE )  . asString (  )  ;", "props . setProperty ( name ,    value )  ;", "}", "}", "return   props ;", "}", "METHOD_END"], "methodName": ["getConfigurationProperties"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "for    ( AttributeDefinition   attrDefinition    :    resource . getAttributes (  )  )     {", "if    ( attrDefinition   instanceof   PropertiesAttributeDefinition )     {", "PropertiesAttributeDefinition   pad    =     (  ( PropertiesAttributeDefinition )     ( attrDefinition )  )  ;", "ModelNode   resolvedModelAttribute    =    attrDefinition . resolveModelAttribute ( context ,    model )  ;", "if    ( resolvedModelAttribute . isDefined (  )  )     {", "for    ( final   Property   prop    :    resolvedModelAttribute . asPropertyList (  )  )     {", "properties . setProperty ( prop . getName (  )  ,    prop . getValue (  )  . asString (  )  )  ;", "}", "}", "continue ;", "}", "ModelNode   resolvedModelAttribute    =    attrDefinition . resolveModelAttribute ( context ,    model )  ;", "if    ( resolvedModelAttribute . isDefined (  )  )     {", "String   name    =    attrDefinition . getName (  )  ;", "String   value    =    resolvedModelAttribute . asString (  )  ;", "String   Property    =    PropertiesMap . PROPS _ MAP . get ( name )  ;", "if    ( Property    !  =    null )     {", "name    =    Property ;", "}", "properties . setProperty ( name ,    value )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getResourceProperties"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "IIOPLogger . ROOT _ LOGGER . activatingSubsystem (  )  ;", "WildFlySecurityManager . setPropertyPrivileged (  \" ORBUseDynamicStub \"  ,     \" true \"  )  ;", "ORB . getPresentationManager (  )  . setStubFactoryFactory ( true ,    new   DelegatingStubFactoryFactory (  )  )  ;", "ORB . getPresentationManager (  )  . setStubFactoryFactory ( false ,    new   DelegatingStubFactoryFactory (  )  )  ;", "InitialContext . addUrlContextFactory (  \" corbaloc \"  ,    JBossCNCtxFactory . INSTANCE )  ;", "InitialContext . addUrlContextFactory (  \" corbaname \"  ,    JBossCNCtxFactory . INSTANCE )  ;", "InitialContext . addUrlContextFactory (  \" IOR \"  ,    JBossCNCtxFactory . INSTANCE )  ;", "InitialContext . addUrlContextFactory (  \" iiopname \"  ,    JBossCNCtxFactory . INSTANCE )  ;", "InitialContext . addUrlContextFactory (  \" iiop \"  ,    JBossCNCtxFactory . INSTANCE )  ;", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "public   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "processorTarget . addDeploymentProcessor ( IIOPExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ IIOP _ OPENJDK ,    new   IIOPDependencyProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( IIOPExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ IIOP _ OPENJDK ,    new   IIOPMarkerProcessor (  )  )  ;", "}", "}  ,    RUNTIME )  ;", "Properties   props    =    this . getConfigurationProperties ( context ,    model )  ;", "this . setupInitializers ( props )  ;", "final   boolean   sslConfigured    =    this . setupSSLFactories ( props )  ;", "CorbaORBService   orbService    =    new   CorbaORBService ( props )  ;", "final   ServiceBuilder < ORB >    builder    =    context . getServiceTarget (  )  . addService ( CorbaORBService . SERVICE _ NAME ,    orbService )  ;", "Services . addServerExecutorDependency ( builder ,    orbService . getExecutorInjector (  )  )  ;", "String   securityDomain    =    props . getProperty ( Constants . SECURITY _ SECURITY _ DOMAIN )  ;", "if    ( securityDomain    !  =    null )     {", "builder . addDependency ( context . getCapabilityServiceName ( Capabilities . LEGACY _ SECURITY _ DOMAIN _ CAPABILITY ,    securityDomain ,    null )  )  ;", "builder . addDependency ( SERVICE _ NAME )  ;", "}", "final   String   serverSSLContextName    =    props . getProperty ( Constants . SERVER _ SSL _ CONTEXT )  ;", "if    ( serverSSLContextName    !  =    null )     {", "ServiceName   serverContextServiceName    =    context . getCapabilityServiceName ( Capabilities . SSL _ CONTEXT _ CAPABILITY ,    serverSSLContextName ,    SSLContext . class )  ;", "builder . addDependency ( serverContextServiceName )  ;", "}", "final   String   clientSSLContextName    =    props . getProperty ( Constants . CLIENT _ SSL _ CONTEXT )  ;", "if    ( clientSSLContextName    !  =    null )     {", "ServiceName   clientContextServiceName    =    context . getCapabilityServiceName ( Capabilities . SSL _ CONTEXT _ CAPABILITY ,    clientSSLContextName ,    SSLContext . class )  ;", "builder . addDependency ( clientContextServiceName )  ;", "}", "final   String   authContext    =    props . getProperty ( Constants . ORB _ INIT _ AUTH _ CONTEXT )  ;", "if    ( authContext    !  =    null )     {", "ServiceName   authContextServiceName    =    context . getCapabilityServiceName ( Capabilities . AUTH _ CONTEXT _ CAPABILITY ,    authContext ,    AuthenticationContext . class )  ;", "builder . addDependency ( authContextServiceName )  ;", "}", "String   socketBinding    =    props . getProperty ( Constants . ORB _ SOCKET _ BINDING )  ;", "builder . addDependency ( JBOSS _ BINDING _ NAME . append ( socketBinding )  ,    SocketBinding . class ,    orbService . getIIOPSocketBindingInjector (  )  )  ;", "String   sslSocketBinding    =    props . getProperty ( Constants . ORB _ SSL _ SOCKET _ BINDING )  ;", "if    ( sslSocketBinding    !  =    null )     {", "builder . addDependency ( JBOSS _ BINDING _ NAME . append ( sslSocketBinding )  ,    SocketBinding . class ,    orbService . getIIOPSSLSocketBindingInjector (  )  )  ;", "}", "final   IORSecurityConfigMetaData   securityConfigMetaData    =    this . createIORSecurityConfigMetaData ( context ,    model ,    sslConfigured )  ;", "final   IORSecConfigMetaDataService   securityConfigMetaDataService    =    new   IORSecConfigMetaDataService ( securityConfigMetaData )  ;", "context . getServiceTarget (  )  . addService ( IORSecConfigMetaDataService . SERVICE _ NAME ,    securityConfigMetaDataService )  . setInitialMode ( ACTIVE )  . install (  )  ;", "builder . addDependency ( IORSecConfigMetaDataService . SERVICE _ NAME )  ;", "builder . setInitialMode ( ACTIVE )  . install (  )  ;", "CorbaPOAService   rootPOAService    =    new   CorbaPOAService (  \" RootPOA \"  ,     \" poa \"  )  ;", "context . getServiceTarget (  )  . addService ( CorbaPOAService . ROOT _ SERVICE _ NAME ,    rootPOAService )  . addDependency ( CorbaORBService . SERVICE _ NAME ,    class ,    rootPOAService . getORBInjector (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "final   CorbaPOAService   irPOAService    =    new   CorbaPOAService (  \" IRPOA \"  ,     \" irpoa \"  ,    IdAssignmentPolicyValue . USER _ ID ,    null ,    null ,    LifespanPolicyValue . PERSISTENT ,    null ,    null ,    null )  ;", "context . getServiceTarget (  )  . addService ( CorbaPOAService . INTERFACE _ REPOSITORY _ SERVICE _ NAME ,    irPOAService )  . addDependency ( CorbaPOAService . ROOT _ SERVICE _ NAME ,    POA . class ,    irPOAService . getParentPOAInjector (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "final   CorbaPOAService   namingPOAService    =    new   CorbaPOAService (  \" Naming \"  ,    null ,    IdAssignmentPolicyValue . USER _ ID ,    null ,    null ,    LifespanPolicyValue . PERSISTENT ,    null ,    null ,    null )  ;", "context . getServiceTarget (  )  . addService ( CorbaPOAService . SERVICE _ NAME . append (  \" namingpoa \"  )  ,    namingPOAService )  . addDependency ( CorbaPOAService . ROOT _ SERVICE _ NAME ,    POA . class ,    namingPOAService . getParentPOAInjector (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "final   CorbaNamingService   namingService    =    new   CorbaNamingService ( props )  ;", "context . getServiceTarget (  )  . addService ( CorbaNamingService . SERVICE _ NAME ,    namingService )  . addDependency ( CorbaORBService . SERVICE _ NAME ,    class ,    namingService . getORBInjector (  )  )  . addDependency ( CorbaPOAService . ROOT _ SERVICE _ NAME ,    POA . class ,    namingService . getRootPOAInjector (  )  )  . addDependency ( CorbaPOAService . SERVICE _ NAME . append (  \" namingpoa \"  )  ,    POA . class ,    namingService . getNamingPOAInjector (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "configureClientSecurity ( props )  ;", "}", "METHOD_END"], "methodName": ["launchServices"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "List < String >    orbInitializers    =    new   ArrayList < String >  (  )  ;", "String   installSecurity    =     (  ( String )     ( props . remove ( Constants . ORB _ INIT _ SECURITY )  )  )  ;", "if    ( installSecurity . equalsIgnoreCase ( Constants . CLIENT )  )     {", "orbInitializers . addAll ( Arrays . asList ( IIOPInitializer . SECURITY _ CLIENT . getInitializerClasses (  )  )  )  ;", "} else", "if    ( installSecurity . equalsIgnoreCase ( Constants . IDENTITY )  )     {", "orbInitializers . addAll ( Arrays . asList ( IIOPInitializer . SECURITY _ IDENTITY . getInitializerClasses (  )  )  )  ;", "} else", "if    ( installSecurity . equalsIgnoreCase ( Constants . ELYTRON )  )     {", "final   String   authContext    =    props . getProperty ( Constants . ORB _ INIT _ AUTH _ CONTEXT )  ;", "csiv 2  . ElytronSASClientInterceptor . setAuthenticationContextName ( authContext )  ;", "orbInitializers . addAll ( Arrays . asList ( IIOPInitializer . SECURITY _ ELYTRON . getInitializerClasses (  )  )  )  ;", "}", "String   installTransaction    =     (  ( String )     ( props . remove ( Constants . ORB _ INIT _ TRANSACTIONS )  )  )  ;", "if    ( installTransaction . equalsIgnoreCase ( Constants . FULL )  )     {", "orbInitializers . addAll ( Arrays . asList ( IIOPInitializer . TRANSACTIONS . getInitializerClasses (  )  )  )  ;", "} else", "if    ( installTransaction . equalsIgnoreCase ( Constants . SPEC )  )     {", "orbInitializers . addAll ( Arrays . asList ( IIOPInitializer . SPEC _ TRANSACTIONS . getInitializerClasses (  )  )  )  ;", "}", "for    ( String   initializerClass    :    orbInitializers )     {", "props . setProperty (  (  ( Constants . ORB _ INITIALIZER _ PREFIX )     +    initializerClass )  ,     \"  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupInitializers"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   boolean   supportSSL    =     \" true \"  . equalsIgnoreCase ( props . getProperty ( Constants . SECURITY _ SUPPORT _ SSL )  )  ;", "final   boolean   sslConfigured ;", "if    ( supportSSL )     {", "final   String   serverSSLContextName    =    props . getProperty ( Constants . SERVER _ SSL _ CONTEXT )  ;", "final   String   clientSSLContextName    =    props . getProperty ( Constants . CLIENT _ SSL _ CONTEXT )  ;", "if    (  ( serverSSLContextName    !  =    null )     &  &     ( clientSSLContextName    !  =    null )  )     {", "SSLSocketFactory . setServerSSLContextName ( serverSSLContextName )  ;", "SSLSocketFactory . setClientSSLContextName ( clientSSLContextName )  ;", "props . setProperty ( ORBConstants . SOCKET _ FACTORY _ CLASS _ PROPERTY ,    SSLSocketFactory . class . getName (  )  )  ;", "} else    {", "final   String   securityDomain    =    props . getProperty ( Constants . SECURITY _ SECURITY _ DOMAIN )  ;", "LegacySSLSocketFactory . setSecurityDomain ( securityDomain )  ;", "props . setProperty ( ORBConstants . SOCKET _ FACTORY _ CLASS _ PROPERTY ,    LegacySSLSocketFactory . class . getName (  )  )  ;", "}", "sslConfigured    =    true ;", "} else    {", "props . setProperty ( ORBConstants . SOCKET _ FACTORY _ CLASS _ PROPERTY ,    NoSSLSocketFactory . class . getName (  )  )  ;", "sslConfigured    =    false ;", "}", "return   sslConfigured ;", "}", "METHOD_END"], "methodName": ["setupSSLFactories"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" expressions . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testExpressions"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =     (  (  \"  < subsystem   xmlns =  \\  \"  \"     +     ( Namespace . CURRENT . getUriString (  )  )  )     +     \"  \\  \"  >  \"  )     +     \"  <  / subsystem >  \"  ;", "List < ModelNode >    operations    =    super . parse ( subsystemXml )  ;", "Assert . assertEquals (  1  ,    operations . size (  )  )  ;", "ModelNode   add    =    operations . get (  0  )  ;", "Assert . assertEquals ( ADD ,    add . get ( OP )  . asString (  )  )  ;", "PathAddress   addr    =    PathAddress . pathAddress ( add . get ( OP _ ADDR )  )  ;", "Assert . assertEquals (  1  ,    addr . size (  )  )  ;", "PathElement   element    =    addr . getElement (  0  )  ;", "Assert . assertEquals ( SUBSYSTEM ,    element . getKey (  )  )  ;", "Assert . assertEquals ( IIOPExtension . SUBSYSTEM _ NAME ,    element . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testParseEmptySubsystem"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =     (  (  (  \"  < subsystem   xmlns =  \\  \"  \"     +     ( Namespace . CURRENT . getUriString (  )  )  )     +     \"  \\  \"  >  \"  )     +     \"           < invalid /  >  \"  )     +     \"  <  / subsystem >  \"  ;", "try    {", "super . parse ( subsystemXml )  ;", "Assert . fail (  \" Should   not   have   parsed   bad   child \"  )  ;", "}    catch    ( XMLStreamException   expected )     {", "}", "subsystemXml    =     (  (  (  (  (  \"  < subsystem   xmlns =  \\  \"  \"     +     ( Namespace . CURRENT . getUriString (  )  )  )     +     \"  \\  \"  >  \"  )     +     \"              < orb >  \"  )     +     \"                          < poa /  >  \"  )     +     \"              <  / orb >  \"  )     +     \"  <  / subsystem >  \"  ;", "try    {", "super . parse ( subsystemXml )  ;", "Assert . fail (  \" Should   not   have   parsed   bad   child \"  )  ;", "}    catch    ( XMLStreamException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["testParseSubsystemWithBadChild"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "super . standardSubsystemTest (  \" subsystem - security - client . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubsystemWithSecurityClient"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "super . standardSubsystemTest (  \" subsystem - security - identity . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubsystemWithSecurityIdentity"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "super . standardSubsystemTest (  \" subsystem -  1  .  0  . xml \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSubsystem_1_0"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    targetVersion )  . configureReverseControllerCheck ( createAdditionalInitialization (  )  ,    null )  . addMavenResourceURL ( String . format (  \"  % s : wildfly - iiop - openjdk :  % s \"  ,    controllerVersion . getMavenGroupId (  )  ,    controllerVersion . getMavenGavVersion (  )  )  )  . dontPersistXml (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "Assert . assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( targetVersion )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "Assert . assertNotNull ( legacyServices )  ;", "List < ModelNode >    ops    =    builder . parseXmlResource (  \" iiop - t - reject . xml \"  )  ;", "PathAddress   subsystemAddress    =    PathAddress . pathAddress ( IIOPExtension . PATH _ SUBSYSTEM )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    targetVersion ,    ops ,    new   FailedOperationTransformationConfig (  )  . addFailedAttribute ( subsystemAddress ,    new   FailedOperationTransformationConfig . NewAttributesConfig ( IIOPRootDefinition . CLIENT _ REQUIRES _ SSL ,    IIOPRootDefinition . SERVER _ REQUIRES _ SSL ,    IIOPRootDefinition . SECURITY ,    IIOPRootDefinition . AUTHENTICATION _ CONTEXT )  )  )  ;", "}", "METHOD_END"], "methodName": ["doRejectTest"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "doRejectTest ( EAP _  7  _  0  _  0  ,    IIOPSubsystemTransformersTestCase . EAP 7  _  0  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformersEAP_7_0_0"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  . setSubsystemXmlResource (  \" iiop - transformers . xml \"  )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    undertowVersion )  . addMavenResourceURL ( String . format (  \"  % s : wildfly - iiop - openjdk :  % s \"  ,    controllerVersion . getMavenGroupId (  )  ,    controllerVersion . getMavenGavVersion (  )  )  )  . configureReverseControllerCheck ( createAdditionalInitialization (  )  ,    null )  . skipReverseControllerCheck (  )  . dontPersistXml (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "assertTrue ( mainServices . getLegacyServices ( undertowVersion )  . isSuccessfulBoot (  )  )  ;", "checkSubsystemModelTransformation ( mainServices ,    undertowVersion ,    null )  ;", "}", "METHOD_END"], "methodName": ["testTransformers"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformers ( EAP _  7  _  0  _  0  ,    IIOPSubsystemTransformersTestCase . EAP 7  _  0  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersEAP_7_0_0"], "fileName": "org.wildfly.iiop.openjdk.IIOPSubsystemTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.wildfly.iiop.openjdk.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   namespaceURI ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.wildfly.iiop.openjdk.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   SSLConfigValue . MAP . get ( value )  ;", "}", "METHOD_END"], "methodName": ["fromValue"], "fileName": "org.wildfly.iiop.openjdk.SSLConfigValue"}, {"methodBody": ["METHOD_START", "{", "return   this . iiopValue ;", "}", "METHOD_END"], "methodName": ["getIIOPValue"], "fileName": "org.wildfly.iiop.openjdk.SSLConfigValue"}, {"methodBody": ["METHOD_START", "{", "Iterator   iterator    =    iiopProfileTemplate . iteratorById ( TAG _ ALTERNATE _ IIOP _ ADDRESS . value )  ;", "while    ( iterator . hasNext (  )  )     {", "AlternateIIOPAddressComponent   alternate    =     (  ( AlternateIIOPAddressComponent )     ( iterator . next (  )  )  )  ;", "String   hostname    =    alternate . getAddress (  )  . getHost (  )  . toLowerCase (  )  ;", "int   port    =    alternate . getAddress (  )  . getPort (  )  ;", "socketInfo    =    create ( hostname ,    port )  ;", "result . add ( socketInfo )  ;", "}", "}", "METHOD_END"], "methodName": ["addAlternateSocketInfos"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "return    ( options    &     (  (  (  (  (  ( Integrity . value )     |     ( Confidentiality . value )  )     |     ( DetectReplay . value )  )     |     ( DetectMisordering . value )  )     |     ( EstablishTrustInTarget . value )  )     |     ( EstablishTrustInClient . value )  )  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["checkSSL"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   SocketInfo (  )     {", "public   String   getType (  )     {", "return   Constants . SSL _ SOCKET _ TYPE ;", "}", "public   String   getHost (  )     {", "return   hostname ;", "}", "public   int   getPort (  )     {", "return   port ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createSSLSocketInfo"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   SocketInfo (  )     {", "public   String   getType (  )     {", "return   SocketInfo . IIOP _ CLEAR _ TEXT ;", "}", "public   String   getHost (  )     {", "return   hostname ;", "}", "public   int   getPort (  )     {", "return   port ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createSocketInfo"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sslMech . addresses . length )     =  =     0  )     {", "return   null ;", "}", "return   sslMech . addresses [  0  ]  ;", "}", "METHOD_END"], "methodName": ["extractAddress"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "TaggedComponent   comp    =    mech . transport _ mech ;", "if    (  ( comp . tag )     !  =     ( TAG _ TLS _ SEC _ TRANS . value )  )     {", "return   null ;", "}", "ORB   orb    =    ior . getORB (  )  ;", "CDRInputStream   in    =    AccessController . doPrivileged ( new   PrivilegedAction < CDRInputStream >  (  )     {", "@ Override", "public   CDRInputStream   run (  )     {", "return   new   EncapsInputStream ( orb ,    comp . component _ data ,    comp . component _ data . length )  ;", "}", "}  )  ;", "in . consumeEndian (  )  ;", "return   TLS _ SEC _ TRANSHelper . read ( in )  ;", "}", "METHOD_END"], "methodName": ["extractTlsSecTrans"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "Iterator   iter    =    ior . getProfile (  )  . getTaggedProfileTemplate (  )  . iteratorById ( value )  ;", "if    (  !  ( iter . hasNext (  )  )  )     {", "return   null ;", "}", "ORB   orb    =    ior . getORB (  )  ;", "TaggedComponent   compList    =     (  ( com . sun . corba . se . spi . ior . TaggedComponent )     ( iter . next (  )  )  )  . getIOPComponent ( orb )  ;", "CDRInputStream   in    =    AccessController . doPrivileged ( new   PrivilegedAction < CDRInputStream >  (  )     {", "@ Override", "public   CDRInputStream   run (  )     {", "return   new   EncapsInputStream ( orb ,    compList . component _ data ,    compList . component _ data . length )  ;", "}", "}  )  ;", "in . consumeEndian (  )  ;", "SSL   ssl    =    SSLHelper . read ( in )  ;", "boolean   targetRequiresSsl    =     ( ssl . target _ requires )     >     0  ;", "boolean   targetSupportsSsl    =     ( ssl . target _ supports )     >     0  ;", "if    (  (  ! targetSupportsSsl )     &  &     (  . clientRequiresSsl )  )     {", "throw   IIOPLogger . ROOT _ LOGGER . serverDoesNotSupportSsl (  )  ;", "}", "return   targetSupportsSsl    &  &     ( targetRequiresSsl    |  |     (  . clientRequiresSsl )  )     ?    ssl    :    null ;", "}", "METHOD_END"], "methodName": ["getSSL"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "List   result    =    new   ArrayList (  )  ;", "IIOPProfileTemplate   iiopProfileTemplate    =     (  ( IIOPProfileTemplate )     ( ior . getProfile (  )  . getTaggedProfileTemplate (  )  )  )  ;", "IIOPAddress   primary    =    iiopProfileTemplate . getPrimaryAddress (  )  ;", "String   hostname    =    primary . getHost (  )  . toLowerCase ( Locale . ENGLISH )  ;", "int   primaryPort    =    primary . getPort (  )  ;", "socketInfo ;", "TransportAddress   sslAddress    =    selectSSLTransportAddress ( ior )  ;", "SSL   ssl    =    getSSL ( ior )  ;", "if    ( sslAddress    !  =    null )     {", "socketInfo    =    createSSL ( hostname ,    sslAddress . port )  ;", "} else", "if    ( ssl    !  =    null )     {", "socketInfo    =    createSSL ( hostname ,    ssl . port )  ;", "} else    {", "socketInfo    =    create ( hostname ,    primaryPort )  ;", "}", "result . add ( socketInfo )  ;", "addAlternates ( iiopProfileTemplate ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getSocketInfo"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "Iterator   iter    =    ior . getProfile (  )  . getTaggedProfileTemplate (  )  . iteratorById ( value )  ;", "if    (  !  ( iter . hasNext (  )  )  )     {", "return   null ;", "}", "ORB   orb    =    ior . getORB (  )  ;", "TaggedComponent   compList    =     (  ( com . sun . corba . se . spi . ior . TaggedComponent )     ( iter . next (  )  )  )  . gOPComponent ( orb )  ;", "CDRInputStream   in    =    AccessController . doPrivileged ( new   PrivilegedAction < CDRInputStream >  (  )     {", "@ Override", "public   CDRInputStream   run (  )     {", "return   new   EncapsInputStream ( orb ,    compList . component _ data ,    compList . component _ data . length )  ;", "}", "}  )  ;", "in . consumeEndian (  )  ;", "return   CompoundSecMechListHelper . read ( in )  ;", "}", "METHOD_END"], "methodName": ["readCompoundSecMechList"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "CompoundSecMechList   compoundSecMechList    =    readCompoundSecMechList ( ior )  ;", "if    ( compoundSecMechList    !  =    null )     {", "for    ( CompoundSecMech   mech    :    compoundSecMechList . mechanism _ list )     {", "TLS _ SEC _ TRANS   sslMech    =    extractTlsSecTrans ( ior ,    mech )  ;", "if    ( sslMech    =  =    null )     {", "continue ;", "}", "boolean   targetSupportsSsl    =    checkSSL ( sslMech . target _ supports )  ;", "boolean   targetRequiresSsl    =    checkSSL ( sslMech . target _ requires )  ;", "if    (  (  ! targetSupportsSsl )     &  &     (  . clientRequiresSsl )  )     {", "throw   IIOPLogger . ROOT _ LOGGER . serverDoesNotSupportSsl (  )  ;", "}", "if    ( targetSupportsSsl    &  &     ( targetRequiresSsl    |  |     (  . clientRequiresSsl )  )  )     {", "return   extractAddress ( sslMech )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["selectSSLTransportAddress"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "CSIV 2 IORToSocketInfo . clientRequiresSsl    =    clientRequiresSSL ;", "}", "METHOD_END"], "methodName": ["setClientRequiresSSL"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIV2IORToSocketInfo"}, {"methodBody": ["METHOD_START", "{", "return   CSIv 2 Util . createCopy ( this . sslTaggedComponent )  ;", "}", "METHOD_END"], "methodName": ["getSSLTaggedComponent"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Policy"}, {"methodBody": ["METHOD_START", "{", "return   CSIv 2 Util . createCopy ( this . secTaggedComponent )  ;", "}", "METHOD_END"], "methodName": ["getSecurityTaggedComponent"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Policy"}, {"methodBody": ["METHOD_START", "{", "AS _ ContextSec   context ;", "int   support    =     0  ;", "int   require    =     0  ;", "byte [  ]    clientAuthMech    =    new   byte [  ]  {        }  ;", "byte [  ]    targetName    =    new   byte [  ]  {        }  ;", "IORASContextMetaData   asMeta    =    metadata . getAsContext (  )  ;", "if    (  ( asMeta    =  =    null )     |  |     ( asMeta . getAuthMethod (  )  . equals ( AUTH _ METHOD _ NONE )  )  )     {", "context    =    new   AS _ ContextSec (  (  ( short )     ( support )  )  ,     (  ( short )     ( require )  )  ,    clientAuthMech ,    targetName )  ;", "} else    {", "support    =    EstablishTrustInClient . value ;", "if    ( asMeta . isRequired (  )  )     {", "require    =    EstablishTrustInClient . value ;", "}", "clientAuthMech    =     . createGSSUPMechOID (  )  ;", "String   realm    =    asMeta . getRealm (  )  ;", "targetName    =     . createGSSExportedName ( clientAuthMech ,    realm . getBytes (  )  )  ;", "context    =    new   AS _ ContextSec (  (  ( short )     ( support )  )  ,     (  ( short )     ( require )  )  ,    clientAuthMech ,    targetName )  ;", "}", "return   context ;", "}", "METHOD_END"], "methodName": ["createAuthenticationServiceContext"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "CompoundSecMech [  ]    csmList    =    new   CompoundSecMech [  1  ]  ;", "TaggedComponent   transport _ mech    =     . createTransportMech ( metadata . getTransportConfig (  )  ,    codec ,    sslPort ,    orb )  ;", "AS _ ContextSec   asContext    =     . createAuthenticationServiceContext ( metadata )  ;", "SAS _ ContextSec   sasContext    =     . createSecureAttributeServiceContext ( metadata )  ;", "int   target _ requires    =     (  (  . createTargetRequires ( metadata . getTransportConfig (  )  )  )     |     ( asContext . target _ requires )  )     |     ( sasContext . target _ requires )  ;", "CompoundSecMech   csm    =    new   CompoundSecMech (  (  ( short )     ( target _ requires )  )  ,    transport _ mech ,    asContext ,    sasContext )  ;", "csmList [  0  ]     =    csm ;", "return   csmList ;", "}", "METHOD_END"], "methodName": ["createCompoundSecMechanisms"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "TaggedComponent   copy    =    null ;", "if    ( tc    !  =    null )     {", "byte [  ]    buf    =    new   byte [ tc . component _ data . length ]  ;", "System . arraycopy ( tc . component _ data ,     0  ,    buf ,     0  ,    tc . component _ data . length )  ;", "copy    =    new   TaggedComponent ( tc . tag ,    buf )  ;", "}", "return   copy ;", "}", "METHOD_END"], "methodName": ["createCopy"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "int   olen    =    oid . length ;", "int   nlen    =    name . length ;", "int   size    =     (  (  (  2     +     2  )     +    olen )     +     4  )     +    nlen ;", "byte [  ]    buf    =    new   byte [ size ]  ;", "int   i    =     0  ;", "buf [  ( i +  +  )  ]     =     4  ;", "buf [  ( i +  +  )  ]     =     1  ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( olen    &     6  5  2  8  0  )  )  ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( olen    &     2  5  5  )  )  ;", "System . arraycopy ( oid ,     0  ,    buf ,    i ,    olen )  ;", "i    +  =    olen ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( nlen    &     -  1  6  7  7  7  2  1  6  )  )  ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( nlen    &     1  6  7  1  1  6  8  0  )  )  ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( nlen    &     6  5  2  8  0  )  )  ;", "buf [  ( i +  +  )  ]     =     (  ( byte )     ( nlen    &     2  5  5  )  )  ;", "System . arraycopy ( name ,     0  ,    buf ,    i ,    nlen )  ;", "return   buf ;", "}", "METHOD_END"], "methodName": ["createGSSExportedName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    retval    =    new   byte [  ]  {        }  ;", "try    {", "Oid   oid    =    new   Oid ( value . substring (  4  )  )  ;", "retval    =    oid . getDER (  )  ;", "}    catch    ( GSSExcepon   e )     {", "IIOPLogger . ROOT _ LOGGER . caughtExceponEncodingGSSUPMechOID ( e )  ;", "}", "return   retval ;", "}", "METHOD_END"], "methodName": ["createGSSUPMechOID"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "if    ( metadata    =  =    null )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Method   createSSLTaggedComponent (  )    called   with   null   metadata \"  )  ;", "return   null ;", "}", "if    ( sslPort    =  =     0  )     {", "return   null ;", "}", "TaggedComponent   tc ;", "try    {", "int   supports    =     . createTargetSupports ( metadata . getTransportConfig (  )  )  ;", "int   requires    =     . createTargetRequires ( metadata . getTransportConfig (  )  )  ;", "SSL   ssl    =    new   SSL (  (  ( short )     ( supports )  )  ,     (  ( short )     ( requires )  )  ,     (  ( short )     ( sslPort )  )  )  ;", "Any   any    =    orb . create _ any (  )  ;", "SSLHelper . insert ( any ,    ssl )  ;", "byte [  ]    componentData    =    codec . encode _ value ( any )  ;", "tc    =    new   TaggedComponent ( TAG _ SSL _ SEC _ TRANS . value ,    componentData )  ;", "}    catch    ( InvalidTypeForEncoding   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "return   tc ;", "}", "METHOD_END"], "methodName": ["createSSLTaggedComponent"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "SAS _ ContextSec   context ;", "int   support    =     0  ;", "int   require    =     0  ;", "ServiceConfiguration [  ]    privilAuth    =    new   ServiceConfiguration [  0  ]  ;", "byte [  ]  [  ]    supNamMechs    =    new   byte [  ]  [  ]  {        }  ;", "int   supIdenTypes    =     0  ;", "IORSASContextMetaData   sasMeta    =    metadata . getSasContext (  )  ;", "if    (  ( sasMeta    =  =    null )     |  |     ( sasMeta . getCallerPropagation (  )  . equals ( CALLER _ PROPAGATION _ NONE )  )  )     {", "context    =    new   SAS _ ContextSec (  (  ( short )     ( support )  )  ,     (  ( short )     ( require )  )  ,    privilAuth ,    supNamMechs ,    supIdenTypes )  ;", "} else    {", "support    =    IdentityAssertion . value ;", "byte [  ]    upMech    =     . createGSSUPMechOID (  )  ;", "supNamMechs    =    new   byte [  1  ]  [ upMech . length ]  ;", "System . arraycopy ( upMech ,     0  ,    supNamMechs [  0  ]  ,     0  ,    upMech . length )  ;", "supIdenTypes    =     (  (  ( ITTAnonymous . value )     |     ( ITTPrincipalName . value )  )     |     ( ITTX 5  0  9 CertChain . value )  )     |     ( ITTDistinguishedName . value )  ;", "context    =    new   SAS _ ContextSec (  (  ( short )     ( support )  )  ,     (  ( short )     ( require )  )  ,    privilAuth ,    supNamMechs ,    supIdenTypes )  ;", "}", "return   context ;", "}", "METHOD_END"], "methodName": ["createSecureAttributeServiceContext"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "if    ( metadata    =  =    null )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Method   createSecurityTaggedComponent (  )    called   with   null   metadata \"  )  ;", "return   null ;", "}", "TaggedComponent   tc ;", "CompoundSecMech [  ]    mechList    =     . createCompoundSecMechanisms ( metadata ,    codec ,    sslPort ,    orb )  ;", "CompoundSecMechList   csmList    =    new   CompoundSecMechList ( false ,    mechList )  ;", "try    {", "Any   any    =    orb . create _ any (  )  ;", "CompoundSecMechListHelper . insert ( any ,    csmList )  ;", "byte [  ]    b    =    codec . encode _ value ( any )  ;", "tc    =    new   TaggedComponent ( TAG _ CSI _ SEC _ MECH _ LIST . value ,    b )  ;", "}    catch    ( InvalidTypeForEncoding   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "return   tc ;", "}", "METHOD_END"], "methodName": ["createSecurityTaggedComponent"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "int   requires    =     0  ;", "if    ( tc    !  =    null )     {", "if    ( tc . getIntegrit )  . equals ( INTEGRITY _ REQUIRED )  )     {", "requires    =    requires    |     ( Integritvalue )  ;", "}", "if    ( tc . getConfidentialit )  . equals ( CONFIDENTIALITY _ REQUIRED )  )     {", "requires    =    requires    |     ( Confidentialitvalue )  ;", "}", "if    ( tc . getDetectMisordering (  )  . equalsIgnoreCase ( DETECT _ MISORDERING _ REQUIRED )  )     {", "requires    =    requires    |     ( DetectMisordering . value )  ;", "}", "if    ( tc . getDetectRepla )  . equalsIgnoreCase ( DETECT _ REPLAY _ REQUIRED )  )     {", "requires    =    requires    |     ( DetectReplavalue )  ;", "}", "if    ( tc . getEstablishTrustInClient (  )  . equals ( ESTABLISH _ TRUST _ IN _ CLIENT _ REQUIRED )  )     {", "requires    =    requires    |     ( EstablishTrustInClient . value )  ;", "}", "}", "return   requires ;", "}", "METHOD_END"], "methodName": ["createTargetRequires"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "int   supports    =     0  ;", "if    ( tc    !  =    null )     {", "if    (  !  ( tc . getIntegrity (  )  . equals ( INTEGRITY _ NONE )  )  )     {", "supports    =    supports    |     ( Integrity . value )  ;", "}", "if    (  !  ( tc . getConfidentiality (  )  . equals ( CONFIDENTIALITY _ NONE )  )  )     {", "supports    =    supports    |     ( Confidentiality . value )  ;", "}", "if    (  !  ( tc . getDetectMisordering (  )  . equalsIgnoreCase ( DETECT _ MISORDERING _ NONE )  )  )     {", "supports    =    supports    |     ( DetectMisordering . value )  ;", "}", "if    (  !  ( tc . getDetectReplay (  )  . equalsIgnoreCase ( DETECT _ REPLAY _ NONE )  )  )     {", "supports    =    supports    |     ( DetectReplay . value )  ;", "}", "if    (  !  ( tc . getEstablishTrustInTarget (  )  . equals ( ESTABLISH _ TRUST _ IN _ TARGET _ NONE )  )  )     {", "supports    =    supports    |     ( EstablishTrustInTarget . value )  ;", "}", "if    (  !  ( tc . getEstablishTrustInClient (  )  . equals ( ESTABLISH _ TRUST _ IN _ CLIENT _ NONE )  )  )     {", "supports    =    supports    |     ( EstablishTrustInClient . value )  ;", "}", "}", "return   supports ;", "}", "METHOD_END"], "methodName": ["createTargetSupports"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "short   short _ port    =     ( port    >     3  2  7  6  7  )     ?     (  ( short )     ( port    -     6  5  5  3  6  )  )     :     (  ( short )     ( port )  )  ;", "TransportAddress   ta    =    new   TransportAddress ( host ,    short _ port )  ;", "TransportAddress [  ]    taList    =    new   TransportAddress [  1  ]  ;", "taList [  0  ]     =    ta ;", "return   taList ;", "}", "METHOD_END"], "methodName": ["createTransportAddress"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "TaggedComponent   tc ;", "int   support    =     0  ;", "int   require    =     0  ;", "if    ( tconfig    !  =    null )     {", "require    =     . createTargetRequires ( tconfig )  ;", "support    =     . createTargetSupports ( tconfig )  ;", "}", "if    (  (  ( tconfig    =  =    null )     |  |     ( support    =  =     0  )  )     |  |     ( sslPort    =  =     0  )  )     {", "tc    =    new   TaggedComponent ( TAG _ NULL _ TAG . value ,    new   byte [  0  ]  )  ;", "} else    {", "String   host    =    CorbaORBService . getORBProperty ( Constants . ORB _ ADDRESS )  ;", "TransportAddress [  ]    taList    =     . createTransportAddress ( host ,    sslPort )  ;", "TLS _ SEC _ TRANS   tst    =    new   TLS _ SEC _ TRANS (  (  ( short )     ( support )  )  ,     (  ( short )     ( require )  )  ,    taList )  ;", "try    {", "Any   any    =    orb . create _ any (  )  ;", "TLS _ SEC _ TRANSHelper . insert ( any ,    tst )  ;", "byte [  ]    b    =    codec . encode _ value ( any )  ;", "tc    =    new   TaggedComponent ( TAG _ TLS _ SEC _ TRANS . value ,    b )  ;", "}    catch    ( InvalidTypeForEncoding   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "}", "return   tc ;", "}", "METHOD_END"], "methodName": ["createTransportMech"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( encodedName [  0  ]  )     !  =     4  )     |  |     (  ( encodedName [  1  ]  )     !  =     1  )  )", "return   null ;", "int   mechOidLength    =     (  ( encodedName [  2  ]  )     &     2  5  5  )     <  <     8  ;", "mechOidLength    +  =     ( encodedName [  3  ]  )     &     2  5  5  ;", "byte [  ]    oidArray    =    new   byte [ mechOidLength ]  ;", "System . arraycopy ( encodedName ,     4  ,    oidArray ,     0  ,    mechOidLength )  ;", "for    ( int   i    =     0  ;    i    <    mechOidLength ;    i +  +  )     {", "if    (  (  . gssUpMechOidArray [ i ]  )     !  =     ( oidArray [ i ]  )  )     {", "return   null ;", "}", "}", "int   offset    =     4     +    mechOidLength ;", "int   nameLength    =     (  ( encodedName [ offset ]  )     &     2  5  5  )     <  <     2  4  ;", "nameLength    +  =     (  ( encodedName [  (  +  + offset )  ]  )     &     2  5  5  )     <  <     1  6  ;", "nameLength    +  =     (  ( encodedName [  (  +  + offset )  ]  )     &     2  5  5  )     <  <     8  ;", "nameLength    +  =     ( encodedName [  (  +  + offset )  ]  )     &     2  5  5  ;", "byte [  ]    name    =    new   byte [ nameLength ]  ;", "System . arraycopy ( encodedName ,     (  +  + offset )  ,    name ,     0  ,    nameLength )  ;", "return   name ;", "}", "METHOD_END"], "methodName": ["decodeGssExportedName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "if    (  ( encodedToken [  0  ]  )     !  =     9  6  )", "return   null ;", "int   encodedLength    =     0  ;", "int   n    =     0  ;", "if    (  ( encodedToken [  1  ]  )     >  =     0  )", "encodedLength    =    encodedToken [  1  ]  ;", "else    {", "n    =     ( encodedToken [  1  ]  )     &     1  2  7  ;", "for    ( int   i    =     1  ;    i    <  =    n ;    i +  +  )     {", "encodedLength    +  =     (  ( encodedToken [  (  1     +    i )  ]  )     &     2  5  5  )     <  <     (  ( n    -    i )     *     8  )  ;", "}", "}", "int   length    =    encodedLength    -     (  . gssUpMechOidArray . length )  ;", "byte [  ]    encodedInitialContextToken    =    new   byte [ length ]  ;", "System . arraycopy ( encodedToken ,     (  (  2     +    n )     +     (  . gssUpMechOidArray . length )  )  ,    encodedInitialContextToken ,     0  ,    length )  ;", "Any   any ;", "try    {", "any    =    codec . decode _ value ( encodedInitialContextToken ,    InitialContextTokenHelper . type (  )  )  ;", "}    catch    ( Exception   e )     {", "return   null ;", "}", "return   InitialContextTokenHelper . extract ( any )  ;", "}", "METHOD_END"], "methodName": ["decodeInitialContextToken"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "return   CSIv 2 Util . createGSSExportedName ( CSIv 2 Util . gssUpMechOidArray ,    name )  ;", "}", "METHOD_END"], "methodName": ["encodeGssExportedName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    out ;", "Any   any    =    ORB . init (  )  . create _ any (  )  ;", "InitialContextTokenHelper . insert ( any ,    authToken )  ;", "try    {", "out    =    codec . encode _ value ( any )  ;", "}    catch    ( Exception   e )     {", "return   new   byte [  0  ]  ;", "}", "int   length    =     ( out . length )     +     (  . gssUpMechOidArray . length )  ;", "int   n ;", "if    ( length    <     (  1     <  <     7  )  )     {", "n    =     0  ;", "} else", "if    ( length    <     (  1     <  <     8  )  )     {", "n    =     1  ;", "} else", "if    ( length    <     (  1     <  <     1  6  )  )     {", "n    =     2  ;", "} else", "if    ( length    <     (  1     <  <     2  4  )  )     {", "n    =     3  ;", "} else    {", "n    =     4  ;", "}", "byte [  ]    encodedToken    =    new   byte [  (  2     +    n )     +    length ]  ;", "encodedToken [  0  ]     =     9  6  ;", "if    ( n    =  =     0  )     {", "encodedToken [  1  ]     =     (  ( byte )     ( length )  )  ;", "} else    {", "encodedToken [  1  ]     =     (  ( byte )     ( n    |     1  2  8  )  )  ;", "switch    ( n )     {", "case    1     :", "encodedToken [  2  ]     =     (  ( byte )     ( length )  )  ;", "break ;", "case    2     :", "encodedToken [  2  ]     =     (  ( byte )     ( length    >  >     8  )  )  ;", "encodedToken [  3  ]     =     (  ( byte )     ( length )  )  ;", "break ;", "case    3     :", "encodedToken [  2  ]     =     (  ( byte )     ( length    >  >     1  6  )  )  ;", "encodedToken [  3  ]     =     (  ( byte )     ( length    >  >     8  )  )  ;", "encodedToken [  4  ]     =     (  ( byte )     ( length )  )  ;", "break ;", "default    :", "encodedToken [  2  ]     =     (  ( byte )     ( length    >  >     2  4  )  )  ;", "encodedToken [  3  ]     =     (  ( byte )     ( length    >  >     1  6  )  )  ;", "encodedToken [  4  ]     =     (  ( byte )     ( length    >  >     8  )  )  ;", "encodedToken [  5  ]     =     (  ( byte )     ( length )  )  ;", "}", "}", "System . arraycopy (  . gssUpMechOidArray ,     0  ,    encodedToken ,     (  2     +    n )  ,     . gssUpMechOidArray . length )  ;", "System . arraycopy ( out ,     0  ,    encodedToken ,     (  (  2     +    n )     +     (  . gssUpMechOidArray . length )  )  ,    out . length )  ;", "return   encodedToken ;", "}", "METHOD_END"], "methodName": ["encodeInitialContextToken"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "CompoundSecMechList   csmList ;", "try    {", "TaggedComponent   tc    =    ri . get _ effective _ component ( value )  ;", "Any   any    =    codec . decode _ value ( tc . component _ data ,    CompoundSecMechListHelper . type (  )  )  ;", "csmList    =    CompoundSecMechListHelper . extract ( any )  ;", "for    ( int   i    =     0  ;    i    <     ( csmList . mechanism _ list . length )  ;    i +  +  )     {", "CompoundSecMech   securityMech    =    csmList . mechanism _ list [ i ]  ;", "AS _ ContextSec   authConfig    =    securityMech . as _ context _ mech ;", "if    (  (  (  ( EstablishTrustInTarget . value )     &     ( clientRequires    ^     ( authConfig . target _ supports )  )  )     &     (  ~  ( authConfig . target _ supports )  )  )     !  =     0  )     {", "continue ;", "}", "if    (  (  (  ( EstablishTrustInClient . value )     &     (  ( authConfig . target _ requires )     ^    clientSupports )  )     &     (  ~ clientSupports )  )     !  =     0  )     {", "continue ;", "}", "SAS _ ContextSec   identityConfig    =    securityMech . sas _ context _ mech ;", "if    (  (  (  ( IdentityAssertion . value )     &     (  ( identityConfig . target _ requires )     ^    clientSupports )  )     &     (  ~ clientSupports )  )     !  =     0  )     {", "continue ;", "}", "return   securityMech ;", "}", "return   null ;", "}    catch    ( BAD _ PARAM   e )     {", "return   null ;", "}    catch    ( TypeMismatch   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}    catch    ( FormatMismatch   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getMatchingSecurityMech"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "AS _ ContextSec   asMech    =     ( securityMech    !  =    null )     ?    securityMech . as _ context _ mech    :    null ;", "SAS _ ContextSec   sasMech    =     ( securityMech    !  =    null )     ?    securityMech . sas _ context _ mech    :    null ;", "if    ( securityMech    !  =    null )     {", "buer . append (  \" CompoundSecMech [  \"  )  ;", "buer . append (  \" target _ requires :     \"  )  ;", "buer . append ( securityMech . target _ requires )  ;", "if    ( asMech    !  =    null )     {", "buer . append (  \" AS _ ContextSec [  \"  )  ;", "buer . append (  \" client _ authentication _ mech :     \"  )  ;", "buer . append ( new   String ( asMech . client _ authentication _ mech ,    StandardCharsets . UTF _  8  )  )  ;", "buer . append (  \"  ,    target _ name :     \"  )  ;", "buer . append ( new   String ( asMech . target _ name ,    StandardCharsets . UTF _  8  )  )  ;", "buer . append (  \"  ,    target _ requires :     \"  )  ;", "buer . append ( asMech . target _ requires )  ;", "buer . append (  \"  ,    target _ supports :     \"  )  ;", "buer . append ( asMech . target _ supports )  ;", "buer . append (  \"  ]  \"  )  ;", "}", "if    ( sasMech    !  =    null )     {", "buer . append (  \" SAS _ ContextSec [  \"  )  ;", "buer . append (  \" supported _ identity _ types :     \"  )  ;", "buer . append ( sasMech . supported _ identity _ types )  ;", "buer . append (  \"  ,    target _ requires :     \"  )  ;", "buer . append ( sasMech . target _ requires )  ;", "buer . append (  \"  ,    target _ supports :     \"  )  ;", "buer . append ( sasMech . target _ supports )  ;", "buer . append (  \"  ]  \"  )  ;", "}", "buer . append (  \"  ]  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.wildfly.iiop.openjdk.csiv2.CSIv2Util"}, {"methodBody": ["METHOD_START", "{", "AuthenticationContext   authContext    =     (  ( this . authContext )     =  =    null )     ?    AuthenticationContext . captureCurrent (  )     :    this . authContext ;", "final   AuthenticationConfiguration   configuration    =     . AUTH _ CONFIG _ CLIENT . getAuthenticationConfiguration ( uri ,    authContext ,     (  -  1  )  ,    null ,    null )  ;", "final   CallbackHandler   handler    =     . AUTH _ CONFIG _ CLIENT . getCallbackHandler ( configuration )  ;", "final   NameCallback   nameCallback    =    new   NameCallback (  \" Username :     \"  )  ;", "final   PasswordCallback   passwordCallback    =    new   PasswordCallback (  \" Password :     \"  ,    false )  ;", "try    {", "handler . handle ( new   Callback [  ]  {    nameCallback ,    passwordCallback    }  )  ;", "}    catch    ( UnsupportedCallbackException   e )     {", "return    . NO _ AUTHENTICATION _ TOKEN ;", "}", "if    (  (  ( nameCallback . getName (  )  )     !  =    null )     &  &     (  !  ( nameCallback . getName (  )  . equals ( AnonymousPrincipal . getInstance (  )  . getName (  )  )  )  )  )     {", "byte [  ]    encodedTargetName    =    secMech . as _ context _ mech . target _ name ;", "String   name    =    nameCallback . getName (  )  ;", "if    (  ( name . indexOf (  '  @  '  )  )     <     0  )     {", "byte [  ]    decodedTargetName    =    CSIv 2 Util . decodeGssExportedName ( encodedTargetName )  ;", "String   targetName    =    new   String ( decodedTargetName ,    StandardCharsets . UTF _  8  )  ;", "name    +  =     \"  @  \"     +    targetName ;", "}", "byte [  ]    username    =    name . getBytes ( StandardCharsets . UTF _  8  )  ;", "byte [  ]    password    =    new   byte [  ]  {        }  ;", "if    (  ( passwordCallback . getPassword (  )  )     !  =    null )", "password    =    new   String ( passwordCallback . getPassword (  )  )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "InitialContextToken   authenticationToken    =    new   InitialContextToken ( username ,    password ,    encodedTargetName )  ;", "return   CSIv 2 Util . encodeInitialContextToken ( authenticationToken ,    codec )  ;", "}", "return    . NO _ AUTHENTICATION _ TOKEN ;", "}", "METHOD_END"], "methodName": ["createInitialContextToken"], "fileName": "org.wildfly.iiop.openjdk.csiv2.ElytronSASClientInterceptor"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "return   CurrentServiceContainer . getServiceContainer (  )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.wildfly.iiop.openjdk.csiv2.ElytronSASClientInterceptor"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   builder    =    new   StringBuilder (  \" iiop :  \"  )  ;", "if    ( clientRequestInfo   instanceof   RequestInfoImpl )     {", "RequestInfoImpl   infoImpl    =     (  ( RequestInfoImpl )     ( clientRequestInfo )  )  ;", "CorbaConnection   connection    =     (  ( CorbaConnection )     ( infoImpl . connection (  )  )  )  ;", "if    ( connection    =  =    null )     {", "return   null ;", "}", "ContactInfo   info    =    connection . getContactInfo (  )  ;", "if    ( info   instanceof   SocketOrChannelContactInfoImpl )     {", "String   hostname    =     (  ( SocketOrChannelContactInfoImpl )     ( info )  )  . getHost (  )  ;", "if    ( hostname    !  =    null )", "builder . append (  \"  /  /  \"  )  . append ( hostname )  ;", "int   port    =     (  ( SocketOrChannelContactInfoImpl )     ( info )  )  . getPort (  )  ;", "if    ( port    >     0  )", "builder . append (  \"  :  \"  )  . append ( port )  ;", "}", "} else    {", "return   null ;", "}", "return   new   URI ( builder . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getURI"], "fileName": "org.wildfly.iiop.openjdk.csiv2.ElytronSASClientInterceptor"}, {"methodBody": ["METHOD_START", "{", "ElytronSASClientInterceptor . authenticationContextName    =    authenticationContextName ;", "}", "METHOD_END"], "methodName": ["setAuthenticationContextName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.ElytronSASClientInterceptor"}, {"methodBody": ["METHOD_START", "{", "this . serverInterceptor    =    serverInterceptor ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASCurrentImpl"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . authenticationTokenReceived ;", "}", "METHOD_END"], "methodName": ["authenticationTokenReceived"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "Any   any    =    ORB . init (  )  . create _ any (  )  ;", "synchronized (  . msgBodyCtxAccepted )     {", ". msgBodyCtxAccepted . complete _ msg (  )  . client _ context _ id    =    contextId ;", "SASContextBodyHelper . insert ( any ,     . msgBodyCtxAccepted )  ;", "}", "return   any ;", "}", "METHOD_END"], "methodName": ["createMsgCtxAccepted"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "Any   any    =    ORB . init (  )  . create _ any (  )  ;", "synchronized ( msgBodyCtxError )     {", "msgBodyCtxError . error _ msg (  )  . client _ coxt _ id    =    coxtId ;", "msgBodyCtxError . error _ msg (  )  . major _ status    =    majorStatus ;", "SASCoxtBodyHelper . insert ( any ,    msgBodyCtxError )  ;", "}", "return   any ;", "}", "METHOD_END"], "methodName": ["createMsgCtxError"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . incomingIdentity ;", "}", "METHOD_END"], "methodName": ["getIncomingIdentity"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . incomingPassword ;", "}", "METHOD_END"], "methodName": ["getIncomingPassword"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . incomingPrincipalName ;", "}", "METHOD_END"], "methodName": ["getIncomingPrincipalName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . incomingTargetName ;", "}", "METHOD_END"], "methodName": ["getIncomingTargetName"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . incomingUsername ;", "}", "METHOD_END"], "methodName": ["getIncomingUsername"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "if    ( threadLocal . sasContextReceived )     {", "threadLocal . sasReply    =     (  ( threadLocal . contextId )     =  =     0  )     ?    msgCtx 0 Rejected    :    createMsgCtxError ( threadLocal . contextId ,     1  )  ;", "threadLocal . sasReplyIsAccept    =    false ;", "}", "}", "METHOD_END"], "methodName": ["rejectIncomingContext"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "SASTargetInterceptor . CurrentRequestInfo   threadLocal    =    threadLocalData . get (  )  ;", "return   threadLocal . sasContextReceived ;", "}", "METHOD_END"], "methodName": ["sasContextReceived"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SASTargetInterceptor"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged (  . GET _ CREDENTIAL _ ACTION )  ;", "} else    {", "return   SecurityContextAssociation . getCredential (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCredential"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SecurityActions"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged (  . GET _ PRINCIPLE _ ACTION )  ;", "} else    {", "return   SecurityContextAssociation . getPrincipal (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getPrincipal"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SecurityActions"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged (  . PEEK _ RUN _ AS _ IDENTITY _ ACTION )  ;", "} else    {", "return   SecurityContextAssociation . peekRunAsIdentity (  )  ;", "}", "}", "METHOD_END"], "methodName": ["peekRunAsIdentity"], "fileName": "org.wildfly.iiop.openjdk.csiv2.SecurityActions"}, {"methodBody": ["METHOD_START", "{", "final   Boolean   val    =    deploymentUnit . getAttachment ( IIOPDeploymentMarker . ATTACHMENT _ KEY )  ;", "return    ( val    !  =    null )     &  &    val ;", "}", "METHOD_END"], "methodName": ["isIIOPDeployment"], "fileName": "org.wildfly.iiop.openjdk.deployment.IIOPDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "deployment . putAttachment ( IIOPDeploymentMarker . ATTACHMENT _ KEY ,    true )  ;", "}", "METHOD_END"], "methodName": ["mark"], "fileName": "org.wildfly.iiop.openjdk.deployment.IIOPDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "bindings    =    null ;", "try    {", "_ poa (  )  . deactivate _ object (  _ poa (  )  . servant _ to _ id ( this )  )  ;", "}    catch    ( UserException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . exceptionDestro ( e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "org.wildfly.iiop.openjdk.naming.BindingIteratorImpl"}, {"methodBody": ["METHOD_START", "{", "int   diff    =     ( bindings . length )     -     ( iterator _ pos )  ;", "if    ( diff    >     0  )     {", "Binding [  ]    bndgs    =    null ;", "if    ( how _ many    <  =    diff )     {", "bndgs    =    new   Binding [ how _ many ]  ;", "System . arraycopy ( bindings ,    iterator _ pos ,    bndgs ,     0  ,    how _ many )  ;", "iterator _ pos    +  =    how _ many ;", "} else    {", "bndgs    =    new   Binding [ diff ]  ;", "System . arraycopy ( bindings ,    iterator _ pos ,    bndgs ,     0  ,    diff )  ;", "iterator _ pos    =    bindings . length ;", "}", "bl . value    =    bndgs ;", "return   true ;", "} else    {", "bl . value    =    new   Binding [  0  ]  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["next_n"], "fileName": "org.wildfly.iiop.openjdk.naming.BindingIteratorImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( iterator _ pos )     <     ( bindings . length )  )     {", "b . value    =    bindings [  (  ( iterator _ pos )  +  +  )  ]  ;", "return   true ;", "} else    {", "b . value    =    new   Binding ( new   NameComponent [  0  ]  ,    BindingType . nobject )  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["next_one"], "fileName": "org.wildfly.iiop.openjdk.naming.BindingIteratorImpl"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "if    ( obj    =  =    null )", "throw   new   BAD _ PARAM (  )  ;", "Name   n    =    new   Name ( nc )  ;", "Name   ctx    =    n . ctxName (  )  ;", "NameComponent   nb    =    n . baseNameComponent (  )  ;", "if    ( ctx    =  =    null )     {", "if    ( this . names . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . names . get ( n )  )  )  ;", "if    ( isDead ( ref )  )     {", "rebind ( n . components (  )  ,    obj )  ;", "return ;", "}", "throw   new   AlreadyBound (  )  ;", "} else", "if    ( this . contexts . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . contexts . get ( n )  )  )  ;", "if    ( isDead ( ref )  )", "unbind ( n . components (  )  )  ;", "throw   new   AlreadyBound (  )  ;", "}", "if    (  ( this . names . put ( n ,    obj )  )     !  =    null )", "throw   new   CannotProceed (  _ this (  )  ,    n . components (  )  )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Bound   name :     % s \"  ,    n )  ;", "} else    {", "NameComponent [  ]    ncx    =    new   NameComponent [  ]  {    nb    }  ;", "Object   context    =    this . resolve ( ctx . components (  )  )  ;", "String   contextOID    =    this . getObjectOID ( context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "jbossContext . bind ( ncx ,    obj )  ;", "else", "narrow ( context )  . bind ( ncx ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["bind"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "Name   n    =    new   Name ( nc )  ;", "Name   ctx    =    n . ctxName (  )  ;", "NameComponent   nb    =    n . baseNameComponent (  )  ;", "if    ( ctx    =  =    null )     {", "if    ( this . names . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . names . get ( n )  )  )  ;", "if    ( isDead ( ref )  )", "unbind ( n . components (  )  )  ;", "else", "throw   new   AlreadyBound (  )  ;", "} else", "if    ( this . contexts . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . contexts . get ( n )  )  )  ;", "if    ( isDead ( ref )  )     {", "rebind _ context ( n . components (  )  ,    obj )  ;", "return ;", "}", "throw   new   AlreadyBound (  )  ;", "}", "if    (  ( this . contexts . put ( n ,    obj )  )     !  =    null )", "throw   new   CannotProceed (  _ this (  )  ,    n . components (  )  )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Bound   context :     % s \"  ,    n )  ;", "} else    {", "NameComponent [  ]    ncx    =    new   NameComponent [  ]  {    nb    }  ;", "Object   context    =    this . resolve ( ctx . components (  )  )  ;", "String   contextOID    =    this . getObjectOID ( context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "jbossContext . bind _ context ( ncx ,    obj )  ;", "else", "narrow ( context )  . bind _ context ( ncx ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["bind_context"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "context    =    new _ context (  )  ;", "if    ( context    =  =    null )", "throw   new   CannotProceed (  )  ;", "bind _ context ( nc ,    context )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["bind_new_context"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( this . doPurge )  )", "return ;", "for    ( Name   key    :    this . names . keySet (  )  )     {", "if    ( isDead (  (  ( Object )     ( this . names . get ( key )  )  )  )  )     {", "this . names . remove ( key )  ;", "}", "}", "for    ( Name   key    :    this . contexts . keySet (  )  )     {", "Object   object    =     (  ( Object )     ( this . contexts . get ( key )  )  )  ;", "if    ( isDead ( object )  )     {", "this . contexts . remove ( key )  ;", "String   oid    =    this . getObjectOID ( object )  ;", "if    ( oid    !  =    null )", ". contextImpls . remove ( oid )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanup"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "return ;", "if    (  (  !  ( this . names . isEmpty (  )  )  )     |  |     (  !  ( this . contexts . isEmpty (  )  )  )  )", "throw   new   NotEmpty (  )  ;", "else    {", "this . names    =    null ;", "this . contexts    =    null ;", "this . destroyed    =    true ;", "}", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "String   oid    =    null ;", "try    {", "byte [  ]    oidBytes    =    this . poa . reference _ to _ id ( object )  ;", "if    ( oidBytes    !  =    null )", "oid    =    new   String ( oidBytes )  ;", "}    catch    ( Exception   e )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Unable   to   obtain   id   from   object \"  ,    e )  ;", "}", "return   oid ;", "}", "METHOD_END"], "methodName": ["getObjectOID"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "return    0  ;", "return    ( this . names . size (  )  )     +     ( this . cs . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["how_many"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "CorbaNamingContext . orb    =    orb ;", "CorbaNamingContext . rootPoa    =    rootPoa ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "this . poa    =    poa ;", "this . doPurge    =    doPurge ;", "this . noP    =    noP ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "boolean   non _ exist ;", "try    {", "non _ exist    =    o .  _ non _ existent (  )  ;", "}    catch    ( SystemException   e )     {", "non _ exist    =    true ;", "}", "return   non _ exist ;", "}", "METHOD_END"], "methodName": ["isDead"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "return ;", "Binding [  ]    result ;", "this . cleanup (  )  ;", "int   size    =    how _ many (  )  ;", "Iterator < Name >    names    =    this . names . keySet (  )  . iterator (  )  ;", "Iterator < Name >    contexts    =    this . contexts . keySet (  )  . iterator (  )  ;", "if    ( how _ many    <    size )     {", "int   how _ many _ ctr    =    how _ many ;", "result    =    new   Binding [ how _ many ]  ;", "for    (  ;     ( names . hasNext (  )  )     &  &     ( how _ many _ ctr    >     0  )  ;    how _ many _ ctr -  -  )", "result [  ( how _ many _ ctr    -     1  )  ]     =    new   Binding ( names . next (  )  . components (  )  ,    nobject )  ;", "for    (  ;     ( contexts . hasNext (  )  )     &  &     ( how _ many _ ctr    >     0  )  ;    how _ many _ ctr -  -  )", "result [  ( how _ many _ ctr    -     1  )  ]     =    new   Binding ( contexts . next (  )  . components (  )  ,    ncontext )  ;", "size    -  =    how _ many ;", "Binding [  ]    rest    =    new   Binding [ size ]  ;", "for    (  ;     ( names . hasNext (  )  )     &  &     ( size    >     0  )  ;    size -  -  )", "rest [  ( size    -     1  )  ]     =    new   Binding ( names . next (  )  . components (  )  ,    nobject )  ;", "for    (  ;     ( contexts . hasNext (  )  )     &  &     ( size    >     0  )  ;    size -  -  )", "rest [  ( size    -     1  )  ]     =    new   Binding ( contexts . next (  )  . components (  )  ,    ncontext )  ;", "Object   o ;", "try    {", "byte [  ]    oid    =     . rootPoa . activate _ object ( new   BindingIteratorImpl ( rest )  )  ;", "o    =     . rootPoa . id _ to _ reference ( oid )  ;", "}    catch    ( Exception   e )     {", "IIOPLogger . ROOT _ LOGGER . logInternalError ( e )  ;", "throw   new   INTERNAL ( e . toString (  )  )  ;", "}", "bi . value    =    BindingIteratorHelper . narrow ( o )  ;", "} else    {", "result    =    new   Binding [ size ]  ;", "for    (  ;     ( names . hasNext (  )  )     &  &     ( size    >     0  )  ;    size -  -  )", "result [  ( size    -     1  )  ]     =    new   Binding ( names . next (  )  . components (  )  ,    nobject )  ;", "for    (  ;     ( contexts . hasNext (  )  )     &  &     ( size    >     0  )  ;    size -  -  )", "result [  ( size    -     1  )  ]     =    new   Binding ( contexts . next (  )  . components (  )  ,    ncontext )  ;", "}", "bl . value    =    result ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "try    {", "newContextImpl    =    new    (  )  ;", "newContextImpl . init ( this . poa ,    this . doPurge ,    this . noPing )  ;", "String   oid    =     (  ( new   String ( this . poa . servant _ to _ id ( this )  )  )     +     \"  / ctx \"  )     +     (  +  +  ( this . childCount )  )  ;", "this . poa . activate _ object _ with _ id ( oid . getBytes (  )  ,    newContextImpl )  ;", ". contextImpls . put ( oid ,    newContextImpl )  ;", "return   NamingContextExtHelper . narrow ( this . poa . create _ reference _ with _ id ( oid . getBytes (  )  ,     \" IDL : omg . org / CosNaming / NamingContextExt :  1  .  0  \"  )  )  ;", "}    catch    ( Exception   e )     {", "IIOPLogger . ROOT _ LOGGER . failedToCreateNamingContext ( e )  ;", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["new_context"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "in . defaultReadObject (  )  ;", "for    ( Name   key    :    this . contexts . keySet (  )  )     {", "String   ref    =     (  ( String )     ( this . contexts . remove ( key )  )  )  ;", "this . contexts . put ( key ,     . orb . string _ to _ object ( ref )  )  ;", "}", "for    ( Name   key    :    this . names . keySet (  )  )     {", "String   ref    =     (  ( String )     ( this . names . remove ( key )  )  )  ;", "this . names . put ( key ,     . orb . string _ to _ object ( ref )  )  ;", "}", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "if    ( obj    =  =    null )", "throw   new   BAD _ PARAM (  )  ;", "Name   n    =    new   Name ( nc )  ;", "Name   ctx    =    n . ctxName (  )  ;", "NameComponent   nb    =    n . baseNameComponent (  )  ;", "if    ( ctx    =  =    null )     {", "if    ( this . contexts . containsKey ( n )  )", "throw   new   NotFound ( not _ object ,    new   NameComponent [  ]  {    nb    }  )  ;", "Object   ref    =     (  ( Object )     ( this . names . remove ( n )  )  )  ;", "if    ( ref    !  =    null )", "ref .  _ release (  )  ;", "this . names . put ( n ,    obj )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Bound   name :     % s \"  ,    n )  ;", "} else    {", "NameComponent [  ]    ncx    =    new   NameComponent [  ]  {    nb    }  ;", "Object   context    =    this . resolve ( ctx . components (  )  )  ;", "String   contextOID    =    this . getObjectOID ( context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "jbossContext . rebind ( ncx ,    obj )  ;", "else", "narrow ( context )  . rebind ( ncx ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["rebind"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "if    ( obj    =  =    null )", "throw   new   BAD _ PARAM (  )  ;", "Name   n    =    new   Name ( nc )  ;", "Name   ctx    =    n . ctxName (  )  ;", "NameComponent   nb    =    n . baseNameComponent (  )  ;", "if    ( ctx    =  =    null )     {", "if    ( this . names . containsKey ( n )  )", "throw   new   NotFound ( not _ context ,    new   NameComponent [  ]  {    nb    }  )  ;", "Object   ref    =     (  ( Object )     ( this . contexts . remove ( n )  )  )  ;", "if    ( ref    !  =    null )     {", "ref .  _ release (  )  ;", "String   oid    =    this . getObjectOID ( ref )  ;", "if    ( oid    !  =    null )", ". contextImpls . remove ( oid )  ;", "}", "this . contexts . put ( n ,    obj )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Bound   context :     % s \"  ,    n . baseNameComponent (  )  . id )  ;", "} else    {", "NameComponent [  ]    ncx    =    new   NameComponent [  ]  {    nb    }  ;", "Object   context    =    this . resolve ( ctx . components (  )  )  ;", "String   contextOID    =    this . getObjectOID ( context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "jbossContext . rebind _ context ( ncx ,    obj )  ;", "else", "narrow ( context )  . rebind _ context ( ncx ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["rebind_context"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "Name   n    =    new   Name ( nc [  0  ]  )  ;", "if    (  ( nc . length )     >     1  )     {", "Object   next _ context    =     (  ( Object )     ( this . contexts . get ( n )  )  )  ;", "if    (  ( next _ context    =  =    null )     |  |     ( isDead ( next _ context )  )  )", "throw   new   NotFound ( missing _ node ,    nc )  ;", "NameComponent [  ]    nc _ prime    =    new   NameComponent [  ( nc . length )     -     1  ]  ;", "System . arraycopy ( nc ,     1  ,    nc _ prime ,     0  ,    nc _ prime . length )  ;", "String   contextOID    =    this . getObjectOID ( next _ context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "return   jbossContext . resolve ( nc _ prime )  ;", "else", "return   narrow ( next _ context )  . resolve ( nc _ prime )  ;", "} else    {", "Object   result    =     (  ( Object )     ( this . contexts . get ( n )  )  )  ;", "if    ( result    =  =    null )", "result    =     (  ( Object )     ( this . names . get ( n )  )  )  ;", "if    ( result    =  =    null )", "throw   new   NotFound ( missing _ node ,    n . components (  )  )  ;", "if    (  (  !  ( noPing )  )     &  &     ( isDead ( result )  )  )", "throw   new   NotFound ( missing _ node ,    n . components (  )  )  ;", "return   result ;", "}", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "return   resolve ( to _ name ( n )  )  ;", "}", "METHOD_END"], "methodName": ["resolve_str"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "return   Name . toName ( sn )  ;", "}", "METHOD_END"], "methodName": ["to_name"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "return   Name . toString ( n )  ;", "}", "METHOD_END"], "methodName": ["to_string"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["to_url"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "if    ( this . destroyed )", "throw   new   CannotProceed (  )  ;", "if    (  ( nc    =  =    null )     |  |     (  ( nc . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "Name   n    =    new   Name ( nc )  ;", "Name   ctx    =    n . ctxName (  )  ;", "NameComponent   nb    =    n . baseNameComponent (  )  ;", "if    ( ctx    =  =    null )     {", "if    ( this . names . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . names . remove ( n )  )  )  ;", "ref .  _ release (  )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Unbound :     % s \"  ,    n )  ;", "} else", "if    ( this . contexts . containsKey ( n )  )     {", "Object   ref    =     (  ( Object )     ( this . contexts . remove ( n )  )  )  ;", "ref .  _ release (  )  ;", "String   oid    =    this . getObjectOID ( ref )  ;", "if    ( oid    !  =    null )", ". contextImpls . remove ( oid )  ;", "IIOPLogger . ROOT _ LOGGER . debugf (  \" Unbound :     % s \"  ,    n )  ;", "} else    {", "IIOPLogger . ROOT _ LOGGER . failedToUnbindObject ( n )  ;", "throw   new   NotFound ( not _ context ,    n . components (  )  )  ;", "}", "} else    {", "NameComponent [  ]    ncx    =    new   NameComponent [  ]  {    nb    }  ;", "Object   context    =    this . resolve ( ctx . components (  )  )  ;", "String   contextOID    =    this . getObjectOID ( context )  ;", "jbossContext    =     ( contextOID    =  =    null )     ?    null    :     . contextImpls . get ( contextOID )  ;", "if    ( jbossContext    !  =    null )", "jbossContext . unbind ( ncx )  ;", "else", "narrow ( context )  . unbind ( ncx )  ;", "}", "}", "METHOD_END"], "methodName": ["unbind"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "for    ( Name   key    :    this . contexts . keySet (  )  )     {", "Object   o    =     (  ( Object )     ( this . contexts . remove ( key )  )  )  ;", "this . contexts . put ( key ,     . orb . object _ to _ string ( o )  )  ;", "}", "for    ( Name   key    :    this . names . keySet (  )  )     {", "Object   o    =     (  ( Object )     ( this . names . remove ( key )  )  )  ;", "this . names . put ( key ,     . orb . object _ to _ string ( o )  )  ;", "}", "out . defaultWriteObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeObject"], "fileName": "org.wildfly.iiop.openjdk.naming.CorbaNamingContext"}, {"methodBody": ["METHOD_START", "{", "return   baseName ;", "}", "METHOD_END"], "methodName": ["baseNameComponent"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "return   fullName ;", "}", "METHOD_END"], "methodName": ["components"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ctxName )     !  =    null )     {", "try    {", "return   new   Name ( ctxName )  ;", "}    catch    ( InvalidName   e )     {", "throw   new   INTERNAL ( e . toString (  )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["ctxName"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "if    ( obj    =  =    null )", "return   false ;", "if    (  !  ( obj   instanceof    )  )", "return   false ;", "return   toString (  )  . equals ( obj . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   sb    =    new   StringBuffer ( s )  ;", "for    ( int   i    =     0  ;    i    <     ( sb . length (  )  )  ;    i +  +  )     {", "if    (  (  (  ( sb . charAt ( i )  )     =  =     '  /  '  )     |  |     (  ( sb . charAt ( i )  )     =  =     '  \\  \\  '  )  )     |  |     (  ( sb . charAt ( i )  )     =  =     '  .  '  )  )     {", "sb . insert ( i ,     '  \\  \\  '  )  ;", "i +  +  ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["escape"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "return   new   Name ( fullName )  ;", "}", "METHOD_END"], "methodName": ["fullName"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "char   ch ;", "int   len    =    sn . length (  )  ;", "boolean   inKind    =    false ;", "StringBuffer   id    =    new   StringBuffer (  )  ;", "StringBuffer   kind    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "ch    =    sn . charAt ( i )  ;", "if    ( ch    =  =     '  \\  \\  '  )     {", "i +  +  ;", "if    ( i    >  =    len )     {", "throw   new   Invalid (  )  ;", "}", "ch    =    sn . charAt ( i )  ;", "} else", "if    ( ch    =  =     '  .  '  )     {", "if    ( inKind )     {", "throw   new   Invalid (  )  ;", "}", "inKind    =    true ;", "continue ;", "}", "if    ( inKind )     {", "kind . append ( ch )  ;", "} else    {", "id . append ( ch )  ;", "}", "}", "return   new   Component ( id . toString (  )  ,    kind . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getComponent"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "return   toString (  )  . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "return   baseName . kind ;", "}", "METHOD_END"], "methodName": ["kind"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( sn    =  =    null )     |  |     (  ( sn . length (  )  )     =  =     0  )  )     |  |     ( sn . startsWith (  \"  /  \"  )  )  )", "throw   new   InvalidName (  )  ;", "Vector   v    =    new   Vector (  )  ;", "int   start    =     0  ;", "int   i    =     0  ;", "for    (  ;    i    <     ( sn . length (  )  )  ;    i +  +  )     {", "if    (  (  ( sn . charAt ( i )  )     =  =     '  /  '  )     &  &     (  ( sn . charAt (  ( i    -     1  )  )  )     !  =     '  \\  \\  '  )  )     {", "if    (  ( i    -    start )     =  =     0  )", "throw   new   InvalidName (  )  ;", "v . addElement ( Name . getComponent ( sn . substring ( start ,    i )  )  )  ;", "start    =    i    +     1  ;", "}", "}", "if    ( start    <    i )", "v . addElement ( Name . getComponent ( sn . substring ( start ,    i )  )  )  ;", "NameComponent [  ]    result    =    new   NameComponent [ v . size (  )  ]  ;", "for    ( int   j    =     0  ;    j    <     ( result . length )  ;    j +  +  )     {", "result [ j ]     =     (  ( NameComponent )     ( v . elementAt ( j )  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["toName"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . toString ( full )  ;", "}    catch    ( Invalid   in )     {", "return    \"  < invalid >  \"  ;", "}", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "if    (  ( n    =  =    null )     |  |     (  ( n . length )     =  =     0  )  )", "throw   new   InvalidName (  )  ;", "StringBuffer   b    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <     ( n . length )  ;    i +  +  )     {", "if    ( i    >     0  )", "b . append (  \"  /  \"  )  ;", "if    (  ( n [ i ]  . id . length (  )  )     >     0  )", "b . append ( Name . escape ( n [ i ]  . id )  )  ;", "if    (  (  ( n [ i ]  . kind . length (  )  )     >     0  )     |  |     (  ( n [ i ]  . id . length (  )  )     =  =     0  )  )", "b . append (  \"  .  \"  )  ;", "if    (  ( n [ i ]  . kind . length (  )  )     >     0  )", "b . append ( Name . escape ( n [ i ]  . kind )  )  ;", "}", "return   b . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.wildfly.iiop.openjdk.naming.Name"}, {"methodBody": ["METHOD_START", "{", "more    =    false ;", "if    (  (  _ bIter )     !  =    null )     {", "_ bIter . destroy (  )  ;", "_ bIter    =    null ;", "}", "if    (  (  _ ctx )     !  =    null )     {", "if    ( isLookedUpCtx )     {", "_ ctx . close (  )  ;", "}", "_ ctx    =    null ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "try    {", "close (  )  ;", "}    catch    ( NException   e )     {", "}", "}", "METHOD_END"], "methodName": ["finalize"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "try    {", "more    =     _ bindingIter . next _ n ( batchsize ,     _ bindingList )  ;", "counter    =     0  ;", "}    catch    ( Exception   e )     {", "more    =    false ;", "NamingException   ne    =    IIOPLogger . ROOT _ LOGGER . errorGettingList (  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "return   more ;", "}", "METHOD_END"], "methodName": ["getMore"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "return   more    ?     (  ( counter )     <     (  _ bindingList . value . length )  )     |  |     ( getMore (  )  )     :    false ;", "}", "METHOD_END"], "methodName": ["hasMore"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   hasMore (  )  ;", "}    catch    ( NException   e )     {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["hasMoreElements"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "Object   obj    =     _ ctx . callResolve ( bndg . binding _ name )  ;", "Name   cname    =    CNNameParser . cosNameToName ( bndg . binding _ name )  ;", "try    {", "obj    =    NamingManager . getObjectInstance ( obj ,    cname ,     _ ctx ,     _ env )  ;", "}    catch    ( NamingException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "NamingException   ne    =    IIOPLogger . ROOT _ LOGGER . errorGeneratingObjectViaFactory (  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "String   cnameStr    =    cname . toString (  )  ;", "javaxBinding   jbndg    =    new   javaxBinding ( cnameStr ,    obj )  ;", "NameComponent [  ]    comps    =     _ ctx . makeFullName ( bndg . binding _ name )  ;", "String   fullName    =    CNNameParser . cosNameToInsString ( comps )  ;", "jbndg . setNameInNamespace ( fullName )  ;", "return   jbndg ;", "}", "METHOD_END"], "methodName": ["mapBinding"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( more )     &  &     (  ( counter )     >  =     (  _ bindingList . value . length )  )  )     {", "getMore (  )  ;", "}", "if    (  ( more )     &  &     (  ( counter )     <     (  _ bindingList . value . length )  )  )     {", "bndg    =     _ bindingList . value [ counter ]  ;", "( counter )  +  +  ;", "return   map ( bndg )  ;", "} else    {", "throw   new   NoSuchElementException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["next"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   next (  )  ;", "}    catch    ( NException   ne )     {", "throw   new   NoSuchElementException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["nextElement"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNBindingEnumeration"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ env )     =  =    null )     {", "_ env    =    new   Hashtable (  7  ,     0  .  7  5 F )  ;", "} else    {", "_ env    =     (  ( Hashtable )     (  _ env . clone (  )  )  )  ;", "}", "return    _ env . put ( propName ,    propValue )  ;", "}", "METHOD_END"], "methodName": ["addToEnvironment"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "bind ( new   CompositeName ( name )  ,    obj )  ;", "}", "METHOD_END"], "methodName": ["bind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name . size (  )  )     =  =     0  )     {", "throw   IIOPLogger . ROOT _ LOGGER . invalidEmptyName (  )  ;", "}", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "try    {", "callBindOrRebind ( path ,    name ,    obj ,    false )  ;", "}    catch    ( CannotProceedException   e )     {", "Context   cctx    =     . getContinuationContext ( e )  ;", "cctx . bind ( e . getRemainingName (  )  ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["bind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( path . toString (  )  )  ;", "try    {", "NamingContext   nctx    =     _ nc . bind _ new _ context ( path )  ;", "return   new   CNCtx (  _ orb ,    nctx ,     _ env ,    makeFullName ( path )  )  ;", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,    path )  ;", "}", "}", "METHOD_END"], "methodName": ["callBindNewContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( name . toString (  )  )  ;", "try    {", "obj    =    NamingManager . getStateToBind ( obj ,    name ,    this ,     _ env )  ;", "if    ( obj   instanceof   CNCtx )     {", "obj    =     (  ( CNCtx )     ( obj )  )  .  _ nc ;", "}", "if    ( obj   instanceof   NamingContext )     {", "NamingContext   nobj    =    NamingContextHelper . narrow (  (  ( Object )     ( obj )  )  )  ;", "if    ( rebind )", "_ nc . rebind _ context ( pth ,    nobj )  ;", "else", "_ nc . bind _ context ( pth ,    nobj )  ;", "} else", "if    ( obj   instanceof   Object )     {", "if    ( rebind )", "_ nc . rebind ( pth ,     (  ( Object )     ( obj )  )  )  ;", "else", "_ nc . bind ( pth ,     (  ( Object )     ( obj )  )  )  ;", "} else", "throw   logging . IIOPLogger . ROOT _ LOGGER . notACorbaObject (  )  ;", "}    catch    ( BAD _ PARAM   e )     {", "NamingException   ne    =    new   NotContextException ( name . toString (  )  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,    pth )  ;", "}", "}", "METHOD_END"], "methodName": ["callBindOrRebind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( nc . toString (  )  )  ;", "try    {", "nc . destroy (  )  ;", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["callDestroy"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "try    {", "Object   obj    =     _ nc . resolve ( path )  ;", "try    {", "NContext   nc    =    NContextHelper . narrow ( obj )  ;", "if    ( nc    !  =    null )     {", "return   new   CNCtx (  _ orb ,    nc ,     _ env ,    makeFullName ( path )  )  ;", "} else    {", "return   obj ;", "}", "}    catch    ( SystemException   e )     {", "return   obj ;", "}", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,    path )  ;", "}", "}", "METHOD_END"], "methodName": ["callResolve"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( path . toString (  )  )  ;", "try    {", "_ nc . unbind ( path )  ;", "}    catch    ( NotFound   e )     {", "if    ( leafNotFound ( e ,    path [  (  ( path . length )     -     1  )  ]  )  )     {", "} else    {", "throw   ExceptionMapper . mapException ( e ,    this ,    path )  ;", "}", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,    path )  ;", "}", "}", "METHOD_END"], "methodName": ["callUnbind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   composeName ( new   CompositeName ( name )  ,    new   CompositeName ( prefix )  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["composeName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "Name   result    =     (  ( Name )     ( prefix . clone (  )  )  )  ;", "return   result . addAll ( e )  ;", "}", "METHOD_END"], "methodName": ["composeName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   createSubcontext ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["createSubcontext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name . size (  )  )     =  =     0  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEmptyName (  )  ;", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "try    {", "return   callBindNewContext ( path )  ;", "}    catch    ( CannotProceedException   e )     {", "Context   cctx    =    CNCtx . getContinuationContext ( e )  ;", "return   cctx . createSubcontext ( e . getRemainingName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createSubcontext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "CNCtx   ctx    =    new   CNCtx (  )  ;", "if    ( env    !  =    null )     {", "env    =     (  ( Hashtable )     ( env . clone (  )  )  )  ;", "}", "ctx .  _ env    =    env ;", "String   rest    =    ctx . initUsingUrl (  ( env    !  =    null    ?     (  ( ORB )     ( env . get (  \" orb \"  )  )  )     :    null )  ,    url ,    env )  ;", "return   new   ResolveResult ( ctx ,    CNCtx . parser . parse ( rest )  )  ;", "}", "METHOD_END"], "methodName": ["createUsingURL"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "destroySubcontext ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["destroySubcontext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( name . toString (  )  )  ;", "NamingContext   the _ nc    =     _ nc ;", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "if    (  ( name . size (  )  )     >     0  )     {", "try    {", "Context   ctx    =     (  ( Context )     ( callResolve ( path )  )  )  ;", "CNCtx   cnc    =     (  ( CNCtx )     ( ctx )  )  ;", "the _ nc    =    cnc .  _ nc ;", "cnc . close (  )  ;", "}    catch    ( ClassCastException   e )     {", "throw   new   NotContextException ( name . toString (  )  )  ;", "}    catch    ( CannotProceedException   e )     {", "Context   cctx    =    CNCtx . getContinuationContext ( e )  ;", "cctx . destroySubcontext ( e . getRemainingName (  )  )  ;", "return ;", "}    catch    ( NameNotFoundException   e )     {", "if    (  (  ( e . getRootCause (  )  )    instanceof   NotFound )     &  &     ( leafNotFound (  (  ( NotFound )     ( e . getRootCause (  )  )  )  ,    path [  (  ( path . length )     -     1  )  ]  )  )  )     {", "return ;", "}", "throw   e ;", "}    catch    ( NamingException   e )     {", "throw   e ;", "}", "}", "callDestroy ( the _ nc )  ;", "callUnbind ( path )  ;", "}", "METHOD_END"], "methodName": ["destroySubcontext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "try    {", "close (  )  ;", "}    catch    ( NException   e )     {", "}", "}", "METHOD_END"], "methodName": ["finalize"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   NManager . getContinuationContext ( cpe )  ;", "}    catch    ( CannotProceedException   e )     {", "Object   resObj    =    e . getResolvedObj (  )  ;", "if    ( resObj   instanceof   Reference )     {", "Reference   ref    =     (  ( Reference )     ( resObj )  )  ;", "RefAddr   addr    =    ref . get (  \" nns \"  )  ;", "if    (  ( addr . getContent (  )  )    instanceof   Context )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . noReferenceFound (  )  ;", "ne . setRootCause ( cpe . getRootCause (  )  )  ;", "throw   ne ;", "}", "}", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["getContinuationContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ env )     =  =    null )     {", "return   new   Hashtable (  5  ,     0  .  7  5 F )  ;", "} else    {", "return    (  ( Hashtable )     (  _ env . clone (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getEnvironment"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  _ name )     =  =    null )     |  |     (  (  _ name . length )     =  =     0  )  )     {", "return    \"  \"  ;", "}", "return   CNNameParser . cosNameToInsString (  _ name )  ;", "}", "METHOD_END"], "methodName": ["getNameInNamespace"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   CNCtx . parser ;", "}", "METHOD_END"], "methodName": ["getNameParser"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   CNCtx . parser ;", "}", "METHOD_END"], "methodName": ["getNameParser"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( url . startsWith (  \" IOR :  \"  )  )     |  |     ( url . startsWith (  \" corbaloc :  \"  )  )  )     {", "return   url ;", "} else    {", "InputStream   in    =    null ;", "try    {", "URL   u    =    new   URL ( url )  ;", "in    =    uStream (  )  ;", "if    ( in    !  =    null )     {", "BufferedReader   bufin    =    new   BufferedReader ( new   InputStreamReader ( in ,    StandardCharsets . ISO _  8  8  5  9  _  1  )  )  ;", "String   str ;", "while    (  ( str    =    bufin . readLine (  )  )     !  =    null )     {", "if    ( str . startsWith (  \" IOR :  \"  )  )     {", "return   str ;", "}", "}", "}", "}    catch    ( IOException   e )     {", "NamingException   ne    =    IIOPLogger . ROOT _ LOGGER . invalidURLOrIOR ( url )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}    finally    {", "try    {", "if    ( in    !  =    null )     {", "in . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "NamingException   ne    =    IIOPLogger . ROOT _ LOGGER . invalidURLOrIOR ( url )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}", "throw   IIOPLogger . ROOT _ LOGGER . urlDoesNotContainIOR ( url )  ;", "}", "}", "METHOD_END"], "methodName": ["getStringifiedIor"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "ORB   inOrb    =    null ;", "String   ncIor    =    null ;", "if    ( env    !  =    null )     {", "inOrb    =     (  ( ORB )     ( env . get (  \" orb \"  )  )  )  ;", "}", "String   provUrl    =    null ;", "if    ( env    !  =    null )     {", "provUrl    =     (  ( String )     ( env . get ( Context . PROVIDER _ URL )  )  )  ;", "}", "if    (  ( provUrl    !  =    null )     &  &     (  !  ( CNCtx . isCorbaUrl ( provUrl )  )  )  )     {", "ncIor    =    getStringifiedIor ( provUrl )  ;", "if    ( inOrb    =  =    null )     {", "inOrb    =    CorbaORBService . getCurrent (  )  ;", "}", "setOrbAndRootContext ( inOrb ,    ncIor )  ;", "} else", "if    ( provUrl    !  =    null )     {", "String   insName    =    initUsingUrl ( inOrb ,    provUrl ,    env )  ;", "if    (  ( insName . length (  )  )     >     0  )     {", "_ name    =    CNCtx . parser . nameToCosName ( CNCtx . parser . parse ( insName )  )  ;", "try    {", "Object   obj    =     _ nc . resolve (  _ name )  ;", "_ nc    =    narrow ( obj )  ;", "if    (  (  _ nc )     =  =    null )     {", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( insName )  ;", "}", "}    catch    ( BAD _ PARAM   e )     {", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( insName )  ;", "}    catch    ( Exception   e )     {", "throw   ExceptionMapper . mapException ( e ,    this ,     _ name )  ;", "}", "}", "} else    {", "if    ( inOrb    =  =    null )     {", "inOrb    =    CorbaORBService . getCurrent (  )  ;", "logging . IIOPLogger . ROOT _ LOGGER . debugf (  \" Getting   default   ORB    % s \"  ,    inOrb )  ;", "}", "setOrbAndRootContext ( inOrb ,     (  ( String )     ( null )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initOrbAndRootContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "try    {", "CorbaeUrl   parsedUrl    =    new   CorbaeUrl ( url )  ;", "String   corbaloc    =    parsedUrl . getLocation (  )  ;", "String   cosName    =    parsedUrl . getStringName (  )  ;", "if    ( orb    =  =    null )     {", "orb    =    CorbaORBService . getCurrent (  )  ;", "}", "setOrbAndRootContext ( orb ,    corbaloc )  ;", "return   parsedUrl . getStringName (  )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   new   ConfigurationException ( e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initUsingCorbanameUrl"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "try    {", "IiopUrl   parsedUrl    =    new   IiopUrl ( url )  ;", "Vector   addrs    =    parsedUrl . getAddresses (  )  ;", "IiopUrl . Address   addr ;", "NException   savedException    =    null ;", "for    ( int   i    =     0  ;    i    <     ( addrs . size (  )  )  ;    i +  +  )     {", "addr    =     (  ( IiopUrl . Address )     ( addrs . elementAt ( i )  )  )  ;", "try    {", "if    ( defOrb    !  =    null )     {", "try    {", "String   tmpUrl    =     (  (  (  \" corbaloc : iiop :  \"     +     ( addr . host )  )     +     \"  :  \"  )     +     ( addr . port )  )     +     \"  / NameService \"  ;", "Object   rootCtx    =    defOrb . string _ to _ object ( tmpUrl )  ;", "setOrbAndRootContext ( defOrb ,    rootCtx )  ;", "return   parsedUrl . getStringName (  )  ;", "}    catch    ( Exception   e )     {", "}", "}", "ORB   orb    =    CorbaUtils . getOrb ( addr . host ,    addr . port ,    env )  ;", "setOrbAndRootContext ( orb ,     (  ( String )     ( null )  )  )  ;", "return   parsedUrl . getStringName (  )  ;", "}    catch    ( NException   ne )     {", "savedException    =    ne ;", "}", "}", "if    ( savedException    !  =    null )     {", "throw   savedException ;", "} else    {", "throw   IIOPLogger . ROOT _ LOGGER . invalidURLOrIOR ( url )  ;", "}", "}    catch    ( MalformedURLException   e )     {", "throw   new   ConfigurationException ( e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initUsingIiopUrl"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( url . startsWith (  \" iiop :  /  /  \"  )  )     |  |     ( url . startsWith (  \" iiopname :  /  /  \"  )  )  )     {", "return   initUsingIiopUrl ( orb ,    url ,    env )  ;", "} else    {", "return   initUsingCorbanameUrl ( orb ,    url ,    env )  ;", "}", "}", "METHOD_END"], "methodName": ["initUsingUrl"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return    (  ( url . startsWith (  \" iiop :  /  /  \"  )  )     |  |     ( url . startsWith (  \" iiopname :  /  /  \"  )  )  )     |  |     ( url . startsWith (  \" corbaname :  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isCorbaUrl"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "NameComponent   rest ;", "return    (  (  (  ( e . why . value (  )  )     =  =     ( NotFoundReason .  _ missing _ node )  )     &  &     (  ( e . rest _ of _ e . length )     =  =     1  )  )     &  &     (  ( rest    =    e . rest _ of _ e [  0  ]  )  . id . equals ( leaf . id )  )  )     &  &     (  (  ( rest . kind )     =  =     ( leaf . kind )  )     |  |     (  (  ( rest . kind )     !  =    null )     &  &     ( rest . kind . equals ( leaf . kind )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["leafNotFound"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   list ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   listBindings ( name )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   listBindings ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["listBindings"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( name . toString (  )  )  ;", "if    (  ( name . size (  )  )     >     0  )     {", "try    {", "Object   obj    =    lookup ( name )  ;", "if    ( obj   instanceof   CNCtx )     {", "return   new   CNBindingEnumeration (  (  ( CNCtx )     ( obj )  )  ,    true ,     _ env )  ;", "} else    {", "throw   new   NotContextException ( name . toString (  )  )  ;", "}", "}    catch    ( NamingException   ne )     {", "throw   ne ;", "}    catch    ( BAD _ PARAM   e )     {", "NamingException   ne    =    new   NotContextException ( name . toString (  )  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}", "return   new   CNBindingEnumeration ( this ,    false ,     _ env )  ;", "}", "METHOD_END"], "methodName": ["listBindings"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   lookup ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   IIOPLogger . ROOT _ LOGGER . notANContext ( name . toString (  )  )  ;", "if    (  ( name . size (  )  )     =  =     0  )", "return   this ;", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "try    {", "Object   answer    =    callResolve ( path )  ;", "try    {", "return   NManager . getObjectInstance ( answer ,    name ,    this ,     _ env )  ;", "}    catch    ( NException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . errorGeneratingObjectViaFactory (  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}    catch    ( CannotProceedException   cpe )     {", "Context   cctx    =    CNCtx . getContinuationContext ( cpe )  ;", "return   cctx . lookup ( cpe . getRemainingName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   lookupLink ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["lookupLink"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   lookup ( name )  ;", "}", "METHOD_END"], "methodName": ["lookupLink"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  _ name )     =  =    null )     |  |     (  (  _ name . length )     =  =     0  )  )     {", "return   child ;", "}", "NameComponent [  ]    answer    =    new   NameComponent [  (  _ name . length )     +     ( child . length )  ]  ;", "System . arraycopy (  _ name ,     0  ,    answer ,     0  ,     _ name . length )  ;", "System . arraycopy ( child ,     0  ,    answer ,     _ name . length ,    child . length )  ;", "return   answer ;", "}", "METHOD_END"], "methodName": ["makeFullName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "rebind ( new   CompositeName ( name )  ,    obj )  ;", "}", "METHOD_END"], "methodName": ["rebind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name . size (  )  )     =  =     0  )     {", "throw   IIOPLogger . ROOT _ LOGGER . invalidEmptyName (  )  ;", "}", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "try    {", "callBindOrRebind ( path ,    name ,    obj ,    true )  ;", "}    catch    ( CannotProceedException   e )     {", "Context   cctx    =     . getContinuationContext ( e )  ;", "cctx . rebind ( e . getRemainingName (  )  ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["rebind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  _ env )     !  =    null )     &  &     (  (  _ env . get ( propName )  )     !  =    null )  )     {", "_ env    =     (  ( Hashtable )     (  _ env . clone (  )  )  )  ;", "return    _ env . remove ( propName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["removeFromEnvironment"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "rename ( new   CompositeName ( oldName )  ,    new   CompositeName ( newName )  )  ;", "}", "METHOD_END"], "methodName": ["rename"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ nc )     =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notANamingContext ( oldName . toString (  )  )  ;", "if    (  (  ( oldName . size (  )  )     =  =     0  )     |  |     (  ( newName . size (  )  )     =  =     0  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEmptyName (  )  ;", "Object   obj    =    lookup ( oldName )  ;", "bind ( newName ,    obj )  ;", "unbind ( oldName )  ;", "}", "METHOD_END"], "methodName": ["rename"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "_ orb    =    orb ;", "try    {", "Object   ncRef ;", "if    ( ncIor    !  =    null )     {", "ncRef    =     _ orb . string _ to _ object ( ncIor )  ;", "} else    {", "ncRef    =     _ orb . resolve _ initial _ references (  \" NameService \"  )  ;", "}", "_ nc    =    NContextHelper . narrow ( ncRef )  ;", "if    (  (  _ nc )     =  =    null )     {", "if    ( ncIor    !  =    null )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorConvertingIORToNCtx ( ncIor )  ;", "} else    {", "throw   IIOPLogger . ROOT _ LOGGER . errorResolvingNSInitRef (  )  ;", "}", "}", "}    catch    ( InvalidName   in )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . cosNNotRegisteredCorrectly (  )  ;", "ne . setRootCause ( in )  ;", "throw   ne ;", "}    catch    ( COMM _ FAILURE   e )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . errorConnectingToORB (  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}    catch    ( BAD _ PARAM   e )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . invalidURLOrIOR ( ncIor )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}    catch    ( INV _ OBJREF   e )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . invalidObjectReference ( ncIor )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}", "METHOD_END"], "methodName": ["setOrbAndRootContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "_ orb    =    orb ;", "try    {", "_ nc    =    NContextHelper . narrow ( ncRef )  ;", "if    (  (  _ nc )     =  =    null )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorConvertingIORToNCtx ( ncRef . toString (  )  )  ;", "}", "}    catch    ( COMM _ FAILURE   e )     {", "NException   ne    =    IIOPLogger . ROOT _ LOGGER . errorConnectingToORB (  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}", "METHOD_END"], "methodName": ["setOrbAndRootContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "unbind ( new   CompositeName ( name )  )  ;", "}", "METHOD_END"], "methodName": ["unbind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name . size (  )  )     =  =     0  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEmptyName (  )  ;", "NameComponent [  ]    path    =    CNNameParser . nameToCosName ( name )  ;", "try    {", "callUnbind ( path )  ;", "}    catch    ( CannotProceedException   e )     {", "Context   cctx    =    CNCtx . getContinuationContext ( e )  ;", "cctx . unbind ( e . getRemainingName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["unbind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtx"}, {"methodBody": ["METHOD_START", "{", "return   new   CNCtx ( env )  ;", "}", "METHOD_END"], "methodName": ["getInitialContext"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNCtxFactory"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   str    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <     ( cname . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "str . append (  . compSeparator )  ;", "}", "str . append (  . stringifyComponent ( cname [ i ]  )  )  ;", "}", "return   str . toString (  )  ;", "}", "METHOD_END"], "methodName": ["cosNameToInsString"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "Name   nm    =    new   CompositeName (  )  ;", "for    ( int   i    =     0  ;     ( cname    !  =    null )     &  &     ( i    <     ( cname . length )  )  ;    i +  +  )     {", "try    {", "nm . add (  . stringifyComponent ( cname [ i ]  )  )  ;", "}    catch    ( InvalidNameException   e )     {", "}", "}", "return   nm ;", "}", "METHOD_END"], "methodName": ["cosNameToName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  ( str . indexOf ( CNNameParser . kindSeparator )  )     <     0  )     &  &     (  ( str . indexOf ( CNNameParser . compSeparator )  )     <     0  )  )     &  &     (  ( str . indexOf ( CNNameParser . escapeChar )  )     <     0  )  )     {", "return   str ;", "} else    {", "int   len    =    str . length (  )  ;", "int   j    =     0  ;", "char [  ]    newStr    =    new   char [ len    +    len ]  ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "if    ( CNNameParser . isMeta ( str . charAt ( i )  )  )     {", "newStr [  ( j +  +  )  ]     =    CNNameParser . escapeChar ;", "}", "newStr [  ( j +  +  )  ]     =    str . charAt ( i )  ;", "}", "return   new   String ( newStr ,     0  ,    j )  ;", "}", "}", "METHOD_END"], "methodName": ["escape"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "int   len    =    str . length (  )  ;", "Vector   components    =    new   Vector (  1  0  )  ;", "char [  ]    id    =    new   char [ len ]  ;", "char [  ]    kind    =    new   char [ len ]  ;", "int   idCount ;", "int   kindCount ;", "boolean   idMode ;", "for    ( int   i    =     0  ;    i    <    len ;  )     {", "idCount    =    kindCount    =     0  ;", "idMode    =    true ;", "while    ( i    <    len )     {", "if    (  ( str . charAt ( i )  )     =  =     ( CNNameParser . compSeparator )  )     {", "break ;", "} else", "if    (  ( str . charAt ( i )  )     =  =     ( CNNameParser . escapeChar )  )     {", "if    (  ( i    +     1  )     >  =    len )     {", "throw   logging . IIOPLogger . ROOT _ LOGGER . unescapedCharacter ( str )  ;", "} else", "if    ( CNNameParser . isMeta ( str . charAt (  ( i    +     1  )  )  )  )     {", "+  + i ;", "if    ( idMode )     {", "id [  ( idCount +  +  )  ]     =    str . charAt (  ( i +  +  )  )  ;", "} else    {", "kind [  ( kindCount +  +  )  ]     =    str . charAt (  ( i +  +  )  )  ;", "}", "} else    {", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEscapedCharacter ( str )  ;", "}", "} else", "if    ( idMode    &  &     (  ( str . charAt ( i )  )     =  =     ( CNNameParser . kindSeparator )  )  )     {", "+  + i ;", "idMode    =    false ;", "} else    {", "if    ( idMode )     {", "id [  ( idCount +  +  )  ]     =    str . charAt (  ( i +  +  )  )  ;", "} else    {", "kind [  ( kindCount +  +  )  ]     =    str . charAt (  ( i +  +  )  )  ;", "}", "}", "}", "components . addElement ( CNNameParser . stringifyComponent ( new   NameComponent ( new   String ( id ,     0  ,    idCount )  ,    new   String ( kind ,     0  ,    kindCount )  )  )  )  ;", "if    ( i    <    len )     {", "+  + i ;", "}", "}", "return   components ;", "}", "METHOD_END"], "methodName": ["insStringToStringifiedComps"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "switch    ( ch )     {", "case    . kindSeparator    :", "case    . compSeparator    :", "case    . escapeChar    :", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isMeta"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "int   len    =    name . size (  )  ;", "if    ( len    =  =     0  )     {", "return   new   NameComponent [  0  ]  ;", "}", "NameComponent [  ]    answer    =    new   NameComponent [ len ]  ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "answer [ i ]     =     . parseComponent ( name . get ( i )  )  ;", "}", "return   answer ;", "}", "METHOD_END"], "methodName": ["nameToCosName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "Vector   comps    =    CNNameParser . insStringToStringifiedComps ( name )  ;", "return   new   CNNameParser . CNCompoundName ( comps . elements (  )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "NameComponent   comp    =    new   NameComponent (  )  ;", "int   kindSep    =     -  1  ;", "int   len    =    compStr . length (  )  ;", "int   j    =     0  ;", "char [  ]    newStr    =    new   char [ len ]  ;", "boolean   escaped    =    false ;", "for    ( int   i    =     0  ;     ( i    <    len )     &  &     ( kindSep    <     0  )  ;    i +  +  )     {", "if    ( escaped )     {", "newStr [  ( j +  +  )  ]     =    compStr . charAt ( i )  ;", "escaped    =    false ;", "} else", "if    (  ( compStr . charAt ( i )  )     =  =     ( CNNameParser . escapeChar )  )     {", "if    (  ( i    +     1  )     >  =    len )     {", "throw   logging . IIOPLogger . ROOT _ LOGGER . unescapedCharacter ( compStr )  ;", "} else", "if    ( CNNameParser . isMeta ( compStr . charAt (  ( i    +     1  )  )  )  )     {", "escaped    =    true ;", "} else    {", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEscapedCharacter ( compStr )  ;", "}", "} else", "if    (  ( compStr . charAt ( i )  )     =  =     ( CNNameParser . kindSeparator )  )     {", "kindSep    =    i ;", "} else    {", "newStr [  ( j +  +  )  ]     =    compStr . charAt ( i )  ;", "}", "}", "comp . id    =    new   String ( newStr ,     0  ,    j )  ;", "if    ( kindSep    <     0  )     {", "comp . kind    =     \"  \"  ;", "} else    {", "j    =     0  ;", "escaped    =    false ;", "for    ( int   i    =    kindSep    +     1  ;    i    <    len ;    i +  +  )     {", "if    ( escaped )     {", "newStr [  ( j +  +  )  ]     =    compStr . charAt ( i )  ;", "escaped    =    false ;", "} else", "if    (  ( compStr . charAt ( i )  )     =  =     ( CNNameParser . escapeChar )  )     {", "if    (  ( i    +     1  )     >  =    len )     {", "throw   logging . IIOPLogger . ROOT _ LOGGER . unescapedCharacter ( compStr )  ;", "} else", "if    ( CNNameParser . isMeta ( compStr . charAt (  ( i    +     1  )  )  )  )     {", "escaped    =    true ;", "} else    {", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidEscapedCharacter ( compStr )  ;", "}", "} else    {", "newStr [  ( j +  +  )  ]     =    compStr . charAt ( i )  ;", "}", "}", "comp . kind    =    new   String ( newStr ,     0  ,    j )  ;", "}", "return   comp ;", "}", "METHOD_END"], "methodName": ["parseComponent"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   one    =    new   StringBuffer ( CNNameParser . escape ( comp . id )  )  ;", "if    (  (  ( comp . kind )     !  =    null )     &  &     (  !  ( comp . kind . equals (  \"  \"  )  )  )  )     {", "one . append (  (  ( CNNameParser . kindSeparator )     +     ( CNNameParser . escape ( comp . kind )  )  )  )  ;", "}", "if    (  ( one . length (  )  )     =  =     0  )     {", "return    \"  \"     +     ( CNNameParser . kindSeparator )  ;", "} else    {", "return   one . toString (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stringifyComponent"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CNNameParser"}, {"methodBody": ["METHOD_START", "{", "Properties   orbProp ;", "if    ( env    !  =    null )     {", "orbProp    =    new   Properties (  )  ;", "final   Enumeration   envProp    =    env . keys (  )  ;", "while    ( envProp . hasMoreElements (  )  )     {", "String   key    =     (  ( String )     ( envProp . nextElement (  )  )  )  ;", "Object   val    =    env . get ( key )  ;", "if    ( val   instanceof   String )     {", "orbProp . put ( key ,    val )  ;", "}", "}", "final   Enumeration   mainProps    =     . orbProperties . keys (  )  ;", "while    ( mainProps . hasMoreElements (  )  )     {", "String   key    =     (  ( String )     ( mainProps . nextElement (  )  )  )  ;", "Object   val    =     . orbProperties . get ( key )  ;", "if    ( val   instanceof   String )     {", "orbProp . put ( key ,    val )  ;", "}", "}", "} else    {", "orbProp    =     . orbProperties ;", "}", "if    ( server    !  =    null )     {", "orbProp . put (  \" ORBInitialHost \"  ,    server )  ;", "}", "if    ( port    >  =     0  )     {", "orbProp . put (  \" ORBInitialPort \"  ,     (  \"  \"     +    port )  )  ;", "}", "if    ( env    !  =    null )     {", "Object   applet    =    env . get ( Context . APPLET )  ;", "if    ( applet    !  =    null )     {", "return    . initAppletORB ( applet ,    orbProp )  ;", "}", "}", "return   ORB . init ( new   String [  0  ]  ,    orbProp )  ;", "}", "METHOD_END"], "methodName": ["getOrb"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "return   CorbaUtils . orbProperties ;", "}", "METHOD_END"], "methodName": ["getOrbProperties"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class <  ?  >    appletClass    =    Class . forName (  \" Applet \"  ,    true ,    null )  ;", "if    (  !  ( appletClass . isInstance ( applet )  )  )     {", "throw   new   ClassCastException ( applet . getClass (  )  . getName (  )  )  ;", "}", "Method   method    =    ORB . class . getMethod (  \" init \"  ,    appletClass ,    Prrties . class )  ;", "return    (  ( ORB )     ( method . invoke ( null ,    applet ,    orbProp )  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   ClassCastException ( applet . getClass (  )  . getName (  )  )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   AssertionError ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "Throwable   cause    =    e . getCause (  )  ;", "if    ( cause   instanceof   RuntimeException )     {", "throw    (  ( RuntimeException )     ( cause )  )  ;", "} else", "if    ( cause   instanceof   Error )     {", "throw    (  ( Error )     ( cause )  )  ;", "}", "throw   new   AssertionError ( e )  ;", "}    catch    ( IllegalAccessException   iae )     {", "throw   new   AssertionError ( iae )  ;", "}", "}", "METHOD_END"], "methodName": ["initAppletORB"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "CorbaUtils . corbaStubClass    =    Class . forName (  \" Stub \"  )  ;", "try    {", "CorbaUtils . connectMethod    =    CorbaUtils . corbaStubClass . getMethod (  \" connect \"  ,    new   Class [  ]  {    ORB . class    }  )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . noMethodDefForStubConnect (  )  ;", "}", "Class   proClass    =    Class . forName (  \" PortableRemoteObject \"  )  ;", "try    {", "CorbaUtils . toStubMethod    =    proClass . getMethod (  \" toStub \"  ,    new   Class [  ]  {    Remote . class    }  )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . noMethodDefForPortableRemoteObjectToStub (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initMethodHandles"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "synchronized ( CorbaUtils . class )     {", "if    (  ( CorbaUtils . toStubMethod )     =  =    null )     {", "CorbaUtils . initMethodHandles (  )  ;", "}", "}", "Object   stub ;", "try    {", "stub    =    CorbaUtils . toStubMethod . invoke ( null ,    new   Object [  ]  {    remoteObj    }  )  ;", "}    catch    ( InvocationTargetException   e )     {", "Throwable   realException    =    e . getTargetException (  )  ;", "ConfigurationException   ce    =    IIOPLogger . ROOT _ LOGGER . problemInvokingPortableRemoteObjectToStub (  )  ;", "ce . setRootCause ( realException )  ;", "throw   ce ;", "}    catch    ( IllegalAccessException   e )     {", "ConfigurationException   ce    =    IIOPLogger . ROOT _ LOGGER . cannotInvokePortableRemoteObjectToStub (  )  ;", "ce . setRootCause ( e )  ;", "throw   ce ;", "}", "if    (  !  ( CorbaUtils . corbaStubClass . isInstance ( stub )  )  )     {", "return   null ;", "}", "try    {", "CorbaUtils . connectMethod . invoke ( stub ,    new   Object [  ]  {    orb    }  )  ;", "}    catch    ( InvocationTargetException   e )     {", "Throwable   realException    =    e . getTargetException (  )  ;", "if    (  !  ( realException   instanceof   RemoteException )  )     {", "ConfigurationException   ce    =    IIOPLogger . ROOT _ LOGGER . problemInvokingStubConnect (  )  ;", "ce . setRootCause ( realException )  ;", "throw   ce ;", "}", "}    catch    ( IllegalAccessException   e )     {", "ConfigurationException   ce    =    IIOPLogger . ROOT _ LOGGER . cannotInvokeStubConnect (  )  ;", "ce . setRootCause ( e )  ;", "throw   ce ;", "}", "return    (  ( Object )     ( stub )  )  ;", "}", "METHOD_END"], "methodName": ["remoteToCorba"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "CorbaUtils . orbProperties    =    orbProperties ;", "}", "METHOD_END"], "methodName": ["setOrbProperties"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbaUtils"}, {"methodBody": ["METHOD_START", "{", "return   CNCtx . parser . parse ( stringName )  ;", "}", "METHOD_END"], "methodName": ["getCosName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbanameUrl"}, {"methodBody": ["METHOD_START", "{", "return    \" corbaloc :  \"     +     ( location )  ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbanameUrl"}, {"methodBody": ["METHOD_START", "{", "return   stringName ;", "}", "METHOD_END"], "methodName": ["getStringName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.CorbanameUrl"}, {"methodBody": ["METHOD_START", "{", "if    ( e   instanceof   NamingException )     {", "return    (  ( NamingException )     ( e )  )  ;", "}", "if    ( e   instanceof   RuntimeException )     {", "throw    (  ( RuntimeException )     ( e )  )  ;", "}", "NamingException   ne ;", "if    ( e   instanceof   NotFound )     {", "if    ( ctx . federation )     {", "return    . tryFed (  (  ( NotFound )     ( e )  )  ,    ctx ,    inputName )  ;", "} else    {", "ne    =    new   NameNotFoundException (  )  ;", "}", "} else", "if    ( e   instanceof   CannotProceed )     {", "ne    =    new   CannotProceedException (  )  ;", "NamingContext   nc    =     (  ( CannotProceed )     ( e )  )  . cxt ;", "NameComponent [  ]    rest    =     (  ( CannotProceed )     ( e )  )  . rest _ of _ name ;", "if    (  ( inputName    !  =    null )     &  &     (  ( inputName . length )     >     ( rest . length )  )  )     {", "NameComponent [  ]    resolvedName    =    new   NameComponent [  ( inputName . length )     -     ( rest . length )  ]  ;", "System . arraycopy ( inputName ,     0  ,    resolvedName ,     0  ,    resolvedName . length )  ;", "ne . setResolvedObj ( new   CNCtx ( ctx .  _ orb ,    nc ,    ctx .  _ env ,    ctx . makeFullName ( resolvedName )  )  )  ;", "} else    {", "ne . setResolvedObj ( ctx )  ;", "}", "ne . setRemainingName ( CNNameParser . cosNameToName ( rest )  )  ;", "} else", "if    ( e   instanceof   InvalidName )     {", "ne    =    new   InvalidNameException (  )  ;", "} else", "if    ( e   instanceof   AlreadyBound )     {", "ne    =    new   NameAlreadyBoundException (  )  ;", "} else", "if    ( e   instanceof   NotEmpty )     {", "ne    =    new   ContextNotEmptyException (  )  ;", "} else    {", "ne    =    new   NamingException (  )  ;", "}", "ne . setRootCause ( e )  ;", "return   ne ;", "}", "METHOD_END"], "methodName": ["mapException"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper"}, {"methodBody": ["METHOD_START", "{", "NameComponent [  ]    rest    =     (  ( NotFound )     ( e )  )  . rest _ of _ name ;", "if    (  . debug )     {", "}", "if    (  (  ( rest . length )     =  =     1  )     &  &     ( inputName    !  =    null )  )     {", "NameComponent   lastIn    =    inputName [  (  ( inputName . length )     -     1  )  ]  ;", "if    (  (  ( rest [  0  ]  . id . equals ( lastIn . id )  )     &  &     (  ( rest [  0  ]  . kind )     !  =    null )  )     &  &     ( rest [  0  ]  . kind . equals ( lastIn . kind )  )  )     {", "} else    {", "NamingException   ne    =    new   NameNotFoundException (  )  ;", "ne . setRemainingName ( CNNameParser . cosNameToName ( rest )  )  ;", "ne . setRootCause ( e )  ;", "throw   ne ;", "}", "}", "NameComponent [  ]    resolvedName    =    null ;", "int   len    =     0  ;", "if    (  ( inputName    !  =    null )     &  &     (  ( inputName . length )     >  =     ( rest . length )  )  )     {", "if    (  ( e . why )     =  =     ( NotFoundReason . not _ context )  )     {", "len    =     ( inputName . length )     -     (  ( rest . length )     -     1  )  ;", "if    (  ( rest . length )     =  =     1  )     {", "rest    =    null ;", "} else    {", "NameComponent [  ]    tmp    =    new   NameComponent [  ( rest . length )     -     1  ]  ;", "System . arraycopy ( rest ,     1  ,    tmp ,     0  ,    tmp . length )  ;", "rest    =    tmp ;", "}", "} else    {", "len    =     ( inputName . length )     -     ( rest . length )  ;", "}", "if    ( len    >     0  )     {", "resolvedName    =    new   NameComponent [ len ]  ;", "System . arraycopy ( inputName ,     0  ,    resolvedName ,     0  ,    len )  ;", "}", "}", "CannotProceedException   cpe    =    new   CannotProceedException (  )  ;", "cpe . setRootCause ( e )  ;", "if    (  ( rest    !  =    null )     &  &     (  ( rest . length )     >     0  )  )     {", "cpe . setRemainingName ( CNNameParser . cosNameToName ( rest )  )  ;", "}", "cpe . setEnvironment ( ctx .  _ env )  ;", "final   Object   resolvedObj    =     ( resolvedName    !  =    null )     ?    ctx . callResolve ( resolvedName )     :    ctx ;", "if    ( resolvedObj   instanceof   Context )     {", "RefAddr   addr    =    new   RefAddr (  \" nns \"  )     {", "public   Object   getContent (  )     {", "return   resolvedObj ;", "}", "private   static   final   long   serialVersionUID    =     6  6  9  9  8  4  6  9  9  3  9  2  1  3  3  7  9  2 L ;", "}  ;", "Reference   ref    =    new   Reference (  \" Object \"  ,    addr )  ;", "CompositeName   cname    =    new   CompositeName (  )  ;", "cname . add (  \"  \"  )  ;", "cpe . setResolvedObj ( ref )  ;", "cpe . setAltName ( cname )  ;", "cpe . setAltNameCtx (  (  ( Context )     ( resolvedObj )  )  )  ;", "return   cpe ;", "} else    {", "Name   cname    =    CNNameParser . cosNameToName ( resolvedName )  ;", "Object   resolvedObj 2  ;", "try    {", "resolvedObj 2     =    NamingManager . getObjectInstance ( resolvedObj ,    cname ,    ctx ,    ctx .  _ env )  ;", "}    catch    ( NamingException   ge )     {", "throw   ge ;", "}    catch    ( Exception   ge )     {", "NamingException   ne    =    IIOPLogger . ROOT _ LOGGER . errorGeneratingObjectViaFactory (  )  ;", "ne . setRootCause ( ge )  ;", "throw   ne ;", "}", "if    ( resolvedObj 2    instanceof   Context )     {", "cpe . setResolvedObj ( resolvedObj 2  )  ;", "} else    {", "cname . add (  \"  \"  )  ;", "cpe . setAltName ( cname )  ;", "final   Object   rf 2     =    resolvedObj 2  ;", "RefAddr   addr    =    new   RefAddr (  \" nns \"  )     {", "public   Object   getContent (  )     {", "return   rf 2  ;", "}", "private   static   final   long   serialVersionUID    =     -  7  8  5  1  3  2  5  5  3  9  7  8  2  6  9  7  7  2 L ;", "}  ;", "Reference   ref    =    new   Reference (  \" Object \"  ,    addr )  ;", "cpe . setResolvedObj ( ref )  ;", "cpe . setAltNameCtx ( ctx )  ;", "}", "return   cpe ;", "}", "}", "METHOD_END"], "methodName": ["tryFed"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.ExceptionMapper"}, {"methodBody": ["METHOD_START", "{", "return   addresses ;", "}", "METHOD_END"], "methodName": ["getAddresses"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.IiopUrl"}, {"methodBody": ["METHOD_START", "{", "return   CNCtx . parser . parse ( stringName )  ;", "}", "METHOD_END"], "methodName": ["getCosName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.IiopUrl"}, {"methodBody": ["METHOD_START", "{", "return   stringName ;", "}", "METHOD_END"], "methodName": ["getStringName"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.IiopUrl"}, {"methodBody": ["METHOD_START", "{", "if    ( orig   instanceof   Object )     {", "return   null ;", "}", "if    ( orig   instanceof   Remote )     {", "try    {", "return   CorbaUtils . r (  (  ( Remote )     ( orig )  )  ,     (  ( CNCtx )     ( ctx )  )  .  _ orb )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unavailableRMIPackages (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStateToBind"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.RemoteToCorba"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . decode ( s ,     \"  8  8  5  9  _  1  \"  )  ;", "}    catch    ( UnsupportedEncodingException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unavailableISOLatin 1 Decoder (  )  ;", "}", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.UrlUtil"}, {"methodBody": ["METHOD_START", "{", "int   length    =    s . length (  )  ;", "byte [  ]    bytes    =    new   byte [ length ]  ;", "int   j    =     0  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "if    (  ( s . charAt ( i )  )     =  =     '  %  '  )     {", "i +  +  ;", "try    {", "bytes [  ( j +  +  )  ]     =     (  ( byte )     ( Integer . parseInt ( s . substr ( i ,     ( i    +     2  )  )  ,     1  6  )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . invalidURIEncod ( s )  ;", "}", "i +  +  ;", "} else    {", "bytes [  ( j +  +  )  ]     =     (  ( byte )     ( s . charAt ( i )  )  )  ;", "}", "}", "return   new   Str ( bytes ,     0  ,    j ,    enc )  ;", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.UrlUtil"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    s . getBytes ( enc )  ;", "int   count    =    bytes . length ;", "final   Str   allowed    =     \"  =  ,  +  ;  .  '  -  @  &  /  $  _  (  )  !  ~  *  :  \"  ;", "char [  ]    buf    =    new   char [  3     *    count ]  ;", "int   j    =     0  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "if    (  (  (  (  (  ( bytes [ i ]  )     >  =     9  7  )     &  &     (  ( bytes [ i ]  )     <  =     1  2  2  )  )     |  |     (  (  ( bytes [ i ]  )     >  =     6  5  )     &  &     (  ( bytes [ i ]  )     <  =     9  0  )  )  )     |  |     (  (  ( bytes [ i ]  )     >  =     4  8  )     &  &     (  ( bytes [ i ]  )     <  =     5  7  )  )  )     |  |     (  ( allowed . indexOf ( bytes [ i ]  )  )     >  =     0  )  )     {", "buf [  ( j +  +  )  ]     =     (  ( char )     ( bytes [ i ]  )  )  ;", "} else    {", "buf [  ( j +  +  )  ]     =     '  %  '  ;", "buf [  ( j +  +  )  ]     =    Character . forDigit (  (  1  5     &     (  ( bytes [ i ]  )     >  >  >     4  )  )  ,     1  6  )  ;", "buf [  ( j +  +  )  ]     =    Character . forDigit (  (  1  5     &     ( bytes [ i ]  )  )  ,     1  6  )  ;", "}", "}", "return   new   Str ( buf ,     0  ,    j )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "org.wildfly.iiop.openjdk.naming.jndi.UrlUtil"}, {"methodBody": ["METHOD_START", "{", "return   idlName ;", "}", "METHOD_END"], "methodName": ["getIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.AbstractAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   javaName ;", "}", "METHOD_END"], "methodName": ["getJavaName"], "fileName": "org.wildfly.iiop.openjdk.rmi.AbstractAnalysis"}, {"methodBody": ["METHOD_START", "{", "this . idlName    =    idlName ;", "}", "METHOD_END"], "methodName": ["setIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.AbstractAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   accessor ;", "}", "METHOD_END"], "methodName": ["getAccessor"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   accessorAnalysis ;", "}", "METHOD_END"], "methodName": ["getAccessorAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   cls ;", "}", "METHOD_END"], "methodName": ["getCls"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   mode ;", "}", "METHOD_END"], "methodName": ["getMode"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   mutator ;", "}", "METHOD_END"], "methodName": ["getMutator"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   mutatorAnalysis ;", "}", "METHOD_END"], "methodName": ["getMutatorAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "super . setIDLName ( idlName )  ;", "if    (  (  (  ( idlName . charAt (  0  )  )     >  =     6  5  )     &  &     (  ( idlName . charAt (  0  )  )     <  =     9  0  )  )     &  &     (  (  (  ( idlName . length (  )  )     <  =     1  )     |  |     (  ( idlName . charAt (  1  )  )     <     6  5  )  )     |  |     (  ( idlName . charAt (  1  )  )     >     9  0  )  )  )     {", "idlName    =     ( idlName . substring (  0  ,     1  )  . toLowerCase ( Locale . ENGLISH )  )     +     ( idlName . substring (  1  )  )  ;", "}", "if    (  ( accessor )     !  =    null )", "accessor . setIDLName (  (  \"  _ get _  \"     +    idlName )  )  ;", "if    (  ( mutator )     !  =    null )", "mutator . setIDLName (  (  \"  _ set _  \"     +    idlName )  )  ;", "}", "METHOD_END"], "methodName": ["setIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.AttributeAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   cls ;", "}", "METHOD_END"], "methodName": ["getCls"], "fileName": "org.wildfly.iiop.openjdk.rmi.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . cannotAnalyzeNullClass (  )  ;", "String   s    =    cls . getName (  )  ;", "return   s . substring (  (  ( s . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["javaNameOfClass"], "fileName": "org.wildfly.iiop.openjdk.rmi.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.wildfly.iiop.openjdk.rmi.ConstantAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.wildfly.iiop.openjdk.rmi.ConstantAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  ( type )     =  =     ( String . class )  )", "annsert _ wstring (  (  ( String )     ( value )  )  )  ;", "else", "Util . insertAnyPrimitive ( any ,    value )  ;", "}", "METHOD_END"], "methodName": ["insertValue"], "fileName": "org.wildfly.iiop.openjdk.rmi.ConstantAnalysis"}, {"methodBody": ["METHOD_START", "{", "ArrayList   a    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  (  ( m _ flags [ i ]  )     &     (  ( M _ READ )     |     ( M _ READONLY )  )  )     !  =     0  )     {", "String   name    =    attributeReadName ( methods [ i ]  . getName (  )  )  ;", "if    (  (  ( m _ flags [ i ]  )     &     ( M _ READONLY )  )     !  =     0  )", "a . add ( new   Attribute ( name ,    methods [ i ]  )  )  ;", "else", "a . add ( new   Attribute ( name ,    methods [ i ]  ,    methods [ mutators [ i ]  ]  )  )  ;", "}", "}", "attributes    =    new   Attribute [ a . size (  )  ]  ;", "attributes    =     (  ( Attribute [  ]  )     ( a . toArray ( attributes )  )  )  ;", "}", "METHOD_END"], "methodName": ["analyzeAttributes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "ArrayList   a    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( fields . length )  ;     +  + i )     {", "if    (  (  ( f _ flags [ i ]  )     &     ( F _ CONSTANT )  )     =  =     0  )", "continue ;", "Class   type    =    fields [ i ]  . getType (  )  ;", "if    (  (  !  ( type . isPrimitive (  )  )  )     &  &     ( type    !  =     ( String . class )  )  )     {", "if    ( cls . isInterface (  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . badRMIIIOPConstantType ( fields [ i ]  . getName (  )  ,    cls . getName (  )  ,     \"  1  .  2  .  3  \"  )  ;", "continue ;", "}", "String   name    =    fields [ i ]  . getName (  )  ;", "Object   value ;", "try    {", "value    =    fields [ i ]  . get ( null )  ;", "}    catch    ( Exception   ex )     {", "throw   new   RuntimeException ( ex . toString (  )  )  ;", "}", "a . add ( new   ConstantAnalysis ( name ,    type ,    value )  )  ;", "}", "constants    =    new   ConstantAnalysis [ a . size (  )  ]  ;", "constants    =     (  ( ConstantAnalysis [  ]  )     ( a . toArray ( constants )  )  )  ;", "}", "METHOD_END"], "methodName": ["analyzeConstants"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "fields    =    cls . getDeclaredFields (  )  ;", "f _ flags    =    new   byte [ fields . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( fields . length )  ;     +  + i )     {", "int   mods    =    fields [ i ]  . getModifiers (  )  ;", "if    (  (  ( Modifier . isFi ( mods )  )     &  &     ( Modifier . isStatic ( mods )  )  )     &  &     ( Modifier . isPublic ( mods )  )  )", "f _ flags [ i ]     |  =    F _ CONSTANT ;", "}", "}", "METHOD_END"], "methodName": ["analyzeFields"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "Class [  ]    intfs    =    cls . getInterfaces (  )  ;", "ArrayList   a    =    new   ArrayList (  )  ;", "ArrayList   b    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( intfs . length )  ;     +  + i )     {", "if    (  ( intfs [ i ]  )     =  =     ( Remote . class )  )", "continue ;", "if    (  ( intfs [ i ]  )     =  =     ( Serializable . class )  )", "continue ;", "if    (  ( intfs [ i ]  )     =  =     ( Externalizable . class )  )", "continue ;", "if    (  !  ( RmiIdlUtil . isAbstractValueType ( intfs [ i ]  )  )  )     {", "a . add ( Interface . getInterface ( intfs [ i ]  )  )  ;", "} else    {", "b . add ( Value . getValue ( intfs [ i ]  )  )  ;", "}", "}", "interfaces    =    new   Interface [ a . size (  )  ]  ;", "interfaces    =     (  ( Interface [  ]  )     ( a . toArray ( interfaces )  )  )  ;", "abstractBaseValuetypes    =    new   Value [ b . size (  )  ]  ;", "abstractBaseValuetypes    =     (  ( Value [  ]  )     ( b . toArray ( abstractBaseValuetypes )  )  )  ;", "}", "METHOD_END"], "methodName": ["analyzeInterfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cls . isInterface (  )  )     &  &     ( Remote . class . isAssignableFrom ( cls )  )  )", "methods    =    cls . getMethods (  )  ;", "else", "methods    =    cls . getDeclaredMethods (  )  ;", "m _ flags    =    new   byte [ methods . length ]  ;", "mutators    =    new   int [ methods . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )", "mutators [ i ]     =     -  1  ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  ( isAccessor ( methods [ i ]  )  )     &  &     (  (  ( m _ flags [ i ]  )     &     ( M _ READ )  )     =  =     0  )  )     {", "String   attrName    =    attributeReadName ( methods [ i ]  . getName (  )  )  ;", "Class   iReturn    =    methods [ i ]  . getReturnType (  )  ;", "for    ( int   j    =    i    +     1  ;    j    <     ( methods . length )  ;     +  + j )     {", "if    (  (  ( isMutator ( methods [ j ]  )  )     &  &     (  (  ( m _ flags [ j ]  )     &     ( M _ WRITE )  )     =  =     0  )  )     &  &     ( attrName . equals ( attributeWriteName ( methods [ j ]  . getName (  )  )  )  )  )     {", "Class [  ]    jParams    =    methods [ j ]  . getParameterTypes (  )  ;", "if    (  (  ( jParams . length )     =  =     1  )     &  &     (  ( jParams [  0  ]  )     =  =    iReturn )  )     {", "m _ flags [ i ]     |  =    M _ READ ;", "m _ flags [ j ]     |  =    M _ WRITE ;", "mutators [ i ]     =    j ;", "break ;", "}", "}", "}", "} else", "if    (  ( isMutator ( methods [ i ]  )  )     &  &     (  (  ( m _ flags [ i ]  )     &     ( M _ WRITE )  )     =  =     0  )  )     {", "String   attrName    =    attributeWriteName ( methods [ i ]  . getName (  )  )  ;", "Class [  ]    iParams    =    methods [ i ]  . getParameterTypes (  )  ;", "for    ( int   j    =    i    +     1  ;    j    <     ( methods . length )  ;     +  + j )     {", "if    (  (  ( isAccessor ( methods [ j ]  )  )     &  &     (  (  ( m _ flags [ j ]  )     &     ( M _ READ )  )     =  =     0  )  )     &  &     ( attrName . equals ( attributeReadName ( methods [ j ]  . getName (  )  )  )  )  )     {", "Class   jReturn    =    methods [ j ]  . getReturnType (  )  ;", "if    (  (  ( iParams . length )     =  =     1  )     &  &     (  ( iParams [  0  ]  )     =  =    jReturn )  )     {", "m _ flags [ i ]     |  =    M _ WRITE ;", "m _ flags [ j ]     |  =    M _ READ ;", "mutators [ j ]     =    i ;", "break ;", "}", "}", "}", "}", "}", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )", "if    (  (  (  ( m _ flags [ i ]  )     &     (  ( M _ READ )     |     ( M _ WRITE )  )  )     =  =     0  )     &  &     ( isAccessor ( methods [ i ]  )  )  )", "m _ flags [ i ]     |  =    M _ READONLY ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  (  ( m _ flags [ i ]  )     &     (  (  ( M _ READ )     |     ( M _ WRITE )  )     |     ( M _ READONLY )  )  )     =  =     0  )     {", "String   iName    =    methods [ i ]  . getName (  )  ;", "for    ( int   j    =    i    +     1  ;    j    <     ( methods . length )  ;     +  + j )     {", "if    ( iName . equals ( methods [ j ]  . getName (  )  )  )     {", "m _ flags [ i ]     |  =    M _ OVERLOADED ;", "m _ flags [ j ]     |  =    M _ OVERLOADED ;", "}", "}", "}", "if    (  ( methods [ i ]  . getDeclaringClass (  )  )     !  =     ( cls )  )", "m _ flags [ i ]     |  =    M _ INHERITED ;", "}", "}", "METHOD_END"], "methodName": ["analyzeMethods"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "operations    =    new   OperationAnalysis [  0  ]  ;", "}", "METHOD_END"], "methodName": ["analyzeOperations"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( name . startsWith (  \" get \"  )  )", "name    =    name . substring (  3  )  ;", "else", "if    ( name . startsWith (  \" is \"  )  )", "name    =    name . substring (  2  )  ;", "else", "throw   logging . IIOPLogger . ROOT _ LOGGER . notAnAccessor ( name )  ;", "return   name ;", "}", "METHOD_END"], "methodName": ["attributeReadName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( name . startsWith (  \" set \"  )  )", "name    =    name . substring (  3  )  ;", "else", "throw   logging . IIOPLogger . ROOT _ LOGGER . notAnAccessor ( name )  ;", "return   name ;", "}", "METHOD_END"], "methodName": ["attributeWriteName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isInterface (  )  )", "classHashCode    =     0  ;", "else", "if    (  !  ( isAssignableFrom ( cls )  )  )", "classHashCode    =     0  ;", "else", "if    ( isAssignableFrom ( cls )  )", "classHashCode    =     1  ;", "else", "classHashCode    =    Util . getClassHashCode ( cls )  ;", "}", "METHOD_END"], "methodName": ["calculateClassHashCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cls . isArray (  )  )     |  |     ( cls . isPrimitive (  )  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notAnClassOrInterface ( cls . getName (  )  )  ;", "if    (  (  ( cls . isInterface (  )  )     &  &     ( Object . class . isAssignableFrom ( cls )  )  )     &  &     ( IDLEntity . class . isAssignableFrom ( cls )  )  )     {", "StringBuffer   b    =    new   StringBuffer (  \" IDL :  \"  )  ;", "b . append ( cls . getPackage (  )  . getName (  )  . replace (  '  .  '  ,     '  /  '  )  )  ;", "b . append (  '  /  '  )  ;", "String   base    =    cls . getName (  )  ;", "base    =    base . substring (  (  ( base . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "b . append ( base )  . append (  \"  :  1  .  0  \"  )  ;", "repositoryId    =    b . toString (  )  ;", "} else    {", "StringBuffer   b    =    new   StringBuffer (  \" RMI :  \"  )  ;", "b . append ( escapeIRName ( cls . getName (  )  )  )  ;", "memberPrefix    =     ( b . toString (  )  )     +     \"  .  \"  ;", "String   hashStr    =    toHexString ( classHashCode )  ;", "b . append (  '  :  '  )  . append ( hashStr )  ;", "ObjectStreamClass   osClass    =    ObjectStreamClass . lookup ( cls )  ;", "if    ( osClass    !  =    null )     {", "long   serialVersionUID    =    osClass . getSerialVersionUID (  )  ;", "String   SVUID    =    toHexString ( serialVersionUID )  ;", "if    (  ( classHashCode )     !  =    serialVersionUID )", "b . append (  '  :  '  )  . append ( SVUID )  ;", "memberPostfix    =     (  (  \"  :  \"     +    hashStr )     +     \"  :  \"  )     +    SVUID ;", "} else", "memberPostfix    =     \"  :  \"     +    hashStr ;", "repositoryId    =    b . toString (  )  ;", "}", "}", "METHOD_END"], "methodName": ["calculateRepositoryId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "analyzeInterfaces (  )  ;", "analyzeMethods (  )  ;", "analyzeFields (  )  ;", "calculateClassHashCode (  )  ;", "calculateRepositoryId (  )  ;", "analyzeAttributes (  )  ;", "analyzeConstants (  )  ;", "analyzeOperations (  )  ;", "fixupOverloadedOperationNames (  )  ;", "}", "METHOD_END"], "methodName": ["doAnalyze"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   b    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <     ( name . length (  )  )  ;     +  + i )     {", "char   c    =    name . charAt ( i )  ;", "if    ( c    <     2  5  6  )", "b . apd ( c )  ;", "else", "b . apd (  \"  \\  \\ U \"  )  . apd ( toHexString (  (  ( int )     ( c )  )  )  )  ;", "}", "return   b . toString (  )  ;", "}", "METHOD_END"], "methodName": ["escapeIRName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "ArrayList   entries    =    getContainedEntries (  )  ;", "boolean [  ]    clash    =    new   boolean [ entries . size (  )  ]  ;", "String [  ]    upperNames    =    new   String [ entries . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( entries . size (  )  )  ;     +  + i )     {", "AbstractAnalysis   aa    =     (  ( AbstractAnalysis )     ( entries . get ( i )  )  )  ;", "clash [ i ]     =    false ;", "upperNames [ i ]     =    aa . getIDLName (  )  . toUpperCase ( Locale . ENGLISH )  ;", "for    ( int   j    =     0  ;    j    <    i ;     +  + j )     {", "if    ( upperNames [ i ]  . equals ( upperNames [ j ]  )  )     {", "clash [ i ]     =    true ;", "clash [ j ]     =    true ;", "}", "}", "}", "for    ( int   i    =     0  ;    i    <     ( entries . size (  )  )  ;     +  + i )     {", "if    (  !  ( clash [ i ]  )  )", "continue ;", "AbstractAnalysis   aa    =     (  ( AbstractAnalysis )     ( entries . get ( i )  )  )  ;", "boolean   noUpper    =    true ;", "String   name    =    aa . getIDLName (  )  ;", "StringBuffer   b    =    new   StringBuffer ( name )  ;", "b . append (  '  _  '  )  ;", "for    ( int   j    =     0  ;    j    <     ( name . length (  )  )  ;     +  + j )     {", "if    (  !  ( Character . isUpperCase ( name . charAt ( j )  )  )  )", "continue ;", "if    ( noUpper )", "noUpper    =    false ;", "else", "b . append (  '  _  '  )  ;", "b . append ( j )  ;", "}", "aa . setIDLName ( b . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fixupCaseNames"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  (  ( m _ flags [ i ]  )     &     ( M _ OVERLOADED )  )     =  =     0  )", "continue ;", "OperationAnalysis   oa    =    null ;", "String   javaName    =    methods [ i ]  . getName (  )  ;", "for    ( int   opIdx    =     0  ;     ( oa    =  =    null )     &  &     ( opIdx    <     ( operations . length )  )  ;     +  + opIdx )", "if    ( operations [ opIdx ]  . getMethod (  )  . equals ( methods [ i ]  )  )", "oa    =    operations [ opIdx ]  ;", "if    ( oa    =  =    null )", "continue ;", "Paramet [  ]    params    =    oa . getParameters (  )  ;", "StringBuffer   b    =    new   StringBuffer ( oa . getIDLName (  )  )  ;", "if    (  ( params . length )     =  =     0  )", "b . append (  \"  _  _  \"  )  ;", "for    ( int   j    =     0  ;    j    <     ( params . length )  ;     +  + j )     {", "String   s    =    params [ j ]  . getTypeIDLName (  )  ;", "if    ( s . startsWith (  \"  :  :  \"  )  )", "s    =    s . substring (  2  )  ;", "if    ( s . startsWith (  \"  _  \"  )  )     {", "s    =    s . substring (  1  )  ;", "}", "b . append (  '  _  '  )  ;", "while    (  !  (  \"  \"  . equals ( s )  )  )     {", "int   idx    =    s . indexOf (  \"  :  :  \"  )  ;", "b . append (  '  _  '  )  ;", "if    ( idx    =  =     (  -  1  )  )     {", "b . append ( s )  ;", "s    =     \"  \"  ;", "} else    {", "b . append ( s . substring (  0  ,    idx )  )  ;", "if    (  (  ( s . length (  )  )     >     ( idx    +     2  )  )     &  &     (  ( s . charAt (  ( idx    +     2  )  )  )     =  =     '  _  '  )  )     {", "s    =    s . substring (  ( idx    +     3  )  )  ;", "} else    {", "s    =    s . substring (  ( idx    +     2  )  )  ;", "}", "}", "}", "}", "oa . setIDLName ( b . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fixupOverloadedOperationNames"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ValueAnalysis [  ]  )     ( abstractBaseValuetypes . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAbstractBaseValuetypes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( AttributeAnalysis [  ]  )     ( attributes . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAttributes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ConstantAnalysis [  ]  )     ( constants . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getConstants"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  ( idlModuleName )     =  =    null )     {", "String   pkgName    =    cls . getPackage (  )  . getName (  )  ;", "StringBuffer   b    =    new   StringBuffer (  )  ;", "while    (  !  (  \"  \"  . equals ( pkgName )  )  )     {", "int   idx    =    pkgName . indexOf (  '  .  '  )  ;", "String   n    =     ( idx    =  =     (  -  1  )  )     ?    pkgName    :    pkgName . substring (  0  ,    idx )  ;", "b . apd (  \"  :  :  \"  )  . apd ( Util . javaToIDLName ( n )  )  ;", "pkgName    =     ( idx    =  =     (  -  1  )  )     ?     \"  \"     :    pkgName . substring (  ( idx    +     1  )  )  ;", "}", "idlModuleName    =    b . toString (  )  ;", "}", "return   idlModuleName ;", "}", "METHOD_END"], "methodName": ["getIDLModuleName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( InterfaceAnalysis [  ]  )     ( interfaces . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getInterfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( memberPrefix )     +     ( escapeIRName ( memberName )  )  )     +     ( memberPostfix )  ;", "}", "METHOD_END"], "methodName": ["getMemberRepositoryId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( OperationAnalysis [  ]  )     ( operations . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getOperations"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   repositoryId ;", "}", "METHOD_END"], "methodName": ["getRepositoryId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "Class [  ]    ex    =    m . getExceptionTypes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( ex . length )  ;     +  + i )", "if    (  !  ( isAssignableFrom ( ex [ i ]  )  )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["hasNonAppExceptions"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "Class   returnType    =    m . getReturnType (  )  ;", "String   name    =    m . getName (  )  ;", "if    (  !  (  ( name . startsWith (  \" get \"  )  )     &  &     (  ( name . length (  )  )     >     (  \" get \"  . length (  )  )  )  )  )", "if    (  (  !  (  ( name . startsWith (  \" is \"  )  )     &  &     (  ( name . length (  )  )     >     (  \" is \"  . length (  )  )  )  )  )     |  |     (  !  ( returnType    =  =     ( Boolean . TYPE )  )  )  )", "return   false ;", "if    ( returnType    =  =     ( Void . TYPE )  )", "return   false ;", "if    (  ( m . getParameterTypes (  )  . length )     !  =     0  )", "return   false ;", "return   hasNonAppExceptions ( m )  ;", "}", "METHOD_END"], "methodName": ["isAccessor"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "String   name    =    m . getName (  )  ;", "if    (  !  (  ( name . startsWith (  \" set \"  )  )     &  &     (  ( name . length (  )  )     >     (  \" set \"  . length (  )  )  )  )  )", "return   false ;", "if    (  ( m . getReturnType (  )  )     !  =     ( Void . TYPE )  )", "return   false ;", "if    (  ( m . getParameterTypes (  )  . length )     !  =     1  )", "return   false ;", "return   hasNonAppExceptions ( m )  ;", "}", "METHOD_END"], "methodName": ["isMutator"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "String   s    =    Integer . toHexString ( i )  . toUpperCase ( Locale . ENGLISH )  ;", "if    (  ( s . length (  )  )     <     8  )", "return    (  \"  0  0  0  0  0  0  0  0  \"  . substring (  0  ,     (  8     -     ( s . length (  )  )  )  )  )     +    s ;", "else", "return   s ;", "}", "METHOD_END"], "methodName": ["toHexString"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "String   s    =    Long . toHexString ( l )  . toUpperCase ( Locale . ENGLISH )  ;", "if    (  ( s . length (  )  )     <     1  6  )", "return    (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  . substring (  0  ,     (  1  6     -     ( s . length (  )  )  )  )  )     +    s ;", "else", "return   s ;", "}", "METHOD_END"], "methodName": ["toHexString"], "fileName": "org.wildfly.iiop.openjdk.rmi.ContainerAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged ( new   PrivilegedAction < PresentationManager .  >  (  )     {", "@ Override", "public   PresentationManager .    run (  )     {", "return   getImpl ( className ,    isIDLStub ,    remoteCodeBase ,    expectedClass ,    classLoader )  ;", "}", "}  )  ;", "} else    {", "return   getImpl ( className ,    isIDLStub ,    remoteCodeBase ,    expectedClass ,    classLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["createStubFactory"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["createsDynamicStubs"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   DelegatingStubFactoryFactory . overriddenDynamicFactory ;", "}", "METHOD_END"], "methodName": ["getOverriddenDynamicFactory"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "PresentationManager . StubFactory   stubFactory    =    staticFactory . createStubFactory ( className ,    isIDLStub ,    remoteCodeBase ,    expectedClass ,    classLoader )  ;", "if    ( stubFactory    !  =    null )     {", "return   stubFactory ;", "}", "}    catch    ( Exception   e )     {", "}", "if    (  (  . overriddenDynamicFactory )     !  =    null )     {", "return    . overriddenDynamicFactory . createStubFactory ( className ,    isIDLStub ,    remoteCodeBase ,    expectedClass ,    classLoader )  ;", "} else    {", "return   dynamicFactory . createStubFactory ( className ,    isIDLStub ,    remoteCodeBase ,    expectedClass ,    classLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["getStubFactoryImpl"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged ( new   PrivilegedAction < Tie >  (  )     {", "@ Override", "public   Tie   run (  )     {", "return   getTieImpl ( cls )  ;", "}", "}  )  ;", "} else    {", "return   getTieImpl ( cls )  ;", "}", "}", "METHOD_END"], "methodName": ["getTie"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "Tie   tie    =    static . getTie ( cls )  ;", "if    ( tie    !  =    null )     {", "return   tie ;", "}", "}    catch    ( Exception   e )     {", "}", "return   dynamic . getTie ( cls )  ;", "}", "METHOD_END"], "methodName": ["getTieImpl"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "DelegatingStubFactoryFactory . overriddenDynamicFactory    =    overriddenDynamicFactory ;", "}", "METHOD_END"], "methodName": ["setOverriddenDynamicFactory"], "fileName": "org.wildfly.iiop.openjdk.rmi.DelegatingStubFactoryFactory"}, {"methodBody": ["METHOD_START", "{", "ExceptionAnalysis . cache . clearClassLoader ( classLoader )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "org.wildfly.iiop.openjdk.rmi.ExceptionAnalysis"}, {"methodBody": ["METHOD_START", "{", "super . doAnalyze (  )  ;", "if    (  (  !  ( Exception . class . isAssignableFrom ( cls )  )  )     |  |     ( RuntimeException . class . isAssignableFrom ( cls )  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . badRMIIIOPExceptionType ( cls . getName (  )  ,     \"  1  .  2  .  6  \"  )  ;", "StringBuffer   b    =    new   StringBuffer (  \" IDL :  \"  )  ;", "String   pkgName    =    cls . getPackage (  )  . getName (  )  ;", "while    (  !  (  \"  \"  . equals ( pkgName )  )  )     {", "int   idx    =    pkgName . indexOf (  '  .  '  )  ;", "String   n    =     ( idx    =  =     (  -  1  )  )     ?    pkgName    :    pkgName . substring (  0  ,    idx )  ;", "b . append ( Util . javaToIDLName ( n )  )  . append (  '  /  '  )  ;", "pkgName    =     ( idx    =  =     (  -  1  )  )     ?     \"  \"     :    pkgName . substring (  ( idx    +     1  )  )  ;", "}", "String   base    =    cls . getName (  )  ;", "base    =    base . substring (  (  ( base . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "if    ( base . endsWith (  \" Exception \"  )  )", "base    =    base . substring (  0  ,     (  ( base . length (  )  )     -     9  )  )  ;", "base    =    Util . javaToIDLName (  ( base    +     \" Ex \"  )  )  ;", "b . append ( base )  . append (  \"  :  1  .  0  \"  )  ;", "exceptionRepositoryId    =    b . toString (  )  ;", "}", "METHOD_END"], "methodName": ["doAnalyze"], "fileName": "org.wildfly.iiop.openjdk.rmi.ExceptionAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ExceptionAnalysis )     ( ExceptionAnalysis . cache . getAnalysis ( cls )  )  )  ;", "}", "METHOD_END"], "methodName": ["getExceptionAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.ExceptionAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   exceptionRepositoryId ;", "}", "METHOD_END"], "methodName": ["getExceptionRepositoryId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ExceptionAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( cls . isInterface (  )  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . notAnInterface ( cls . getName (  )  )  ;", "abstractInterface    =    RmiIdlUtil . isAbstractInterface ( cls )  ;", "calculateAllTypeIds (  )  ;", "int   operationCount    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )", "if    (  (  ( m _ flags [ i ]  )     &     (  (  ( M _ READ )     |     ( M _ WRITE )  )     |     ( M _ READONLY )  )  )     =  =     0  )", "+  + operationCount ;", "operations    =    new   OperationAnalysis [ operationCount ]  ;", "operationCount    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  (  ( m _ flags [ i ]  )     &     (  (  ( M _ READ )     |     ( M _ WRITE )  )     |     ( M _ READONLY )  )  )     =  =     0  )     {", "operations [ operationCount ]     =    new   OperationAnalysis ( methods [ i ]  )  ;", "+  + operationCount ;", "}", "}", "}", "METHOD_END"], "methodName": ["analyzeOperations"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isRmiIdlRemoteInterface (  )  )  )     {", "allTypeIds    =    new   String [  0  ]  ;", "} else    {", "ArrayList   a    =    new   ArrayList (  )  ;", "[  ]    intfs    =    getInterfaces (  )  ;", "for    ( int   i    =     0  ;    i    <     ( intfs . length )  ;     +  + i )     {", "String [  ]    ss    =    intfs [ i ]  . getAllTypeIds (  )  ;", "for    ( int   j    =     0  ;    j    <     ( ss . length )  ;     +  + j )", "if    (  !  ( a . contains ( ss [ j ]  )  )  )", "a . add ( ss [ j ]  )  ;", "}", "allTypeIds    =    new   String [  ( a . size (  )  )     +     1  ]  ;", "allTypeIds [  0  ]     =    getRepositoryId (  )  ;", "for    ( int   i    =     1  ;    i    <  =     ( a . size (  )  )  ;     +  + i )", "allTypeIds [ i ]     =     (  ( String )     ( a . get (  (  ( a . size (  )  )     -    i )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["calculateAllTypeIds"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "operationAnalysisMap    =    new   HashMap (  )  ;", "OperationAnalysis   oa ;", "for    ( int   i    =     0  ;    i    <     ( operations . length )  ;     +  + i )     {", "oa    =    operations [ i ]  ;", "operationAnalysisMap . put ( oa . getIDLName (  )  ,    oa )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( attributes . length )  ;     +  + i )     {", "Attribut   attr    =    attributes [ i ]  ;", "oa    =    attr . getAccessorAnalysis (  )  ;", "if    ( oa    !  =    null )     {", "operationAnalysisMap . put ( oa . getIDLName (  )  ,    oa )  ;", "oa    =    attr . getMutatorAnalysis (  )  ;", "if    ( oa    !  =    null )", "operationAnalysisMap . put ( oa . getIDLName (  )  ,    oa )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["calculateOperationAnalysisMap"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "InterfaceAnalysis . cache . clearClassLoader ( classLoader )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "super . doAnalyze (  )  ;", "calculateOperationMap (  )  ;", "fixupCaseNames (  )  ;", "}", "METHOD_END"], "methodName": ["doAnalyze"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String [  ]  )     ( allTypeIds . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllTypeIds"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "final   ArrayList   ret    =    new   ArrayList (  (  (  ( constants . length )     +     ( attributes . length )  )     +     ( operations . length )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( constants . length )  ;     +  + i )", "ret . add ( constants [ i ]  )  ;", "for    ( int   i    =     0  ;    i    <     ( attributes . length )  ;     +  + i )", "ret . add ( attributes [ i ]  )  ;", "for    ( int   i    =     0  ;    i    <     ( operations . length )  ;     +  + i )", "ret . add ( operations [ i ]  )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["getContainedEntries"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( InterfaceAnalysis )     ( InterfaceAnalysis . cache . getAnalysis ( cls )  )  )  ;", "}", "METHOD_END"], "methodName": ["getInterfaceAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   abstractInterface ;", "}", "METHOD_END"], "methodName": ["isAbstractInterface"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    !  ( abstractInterface )  ;", "}", "METHOD_END"], "methodName": ["isRmiIdlRemoteInterface"], "fileName": "org.wildfly.iiop.openjdk.rmi.InterfaceAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ExceptionAnalysis [  ]  )     ( mappedExceptions . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMappedExceptions"], "fileName": "org.wildfly.iiop.openjdk.rmi.OperationAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   method ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.wildfly.iiop.openjdk.rmi.OperationAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ParameterAnalysis [  ]  )     ( parameters . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "org.wildfly.iiop.openjdk.rmi.OperationAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   method . getReturnType (  )  ;", "}", "METHOD_END"], "methodName": ["getReturnType"], "fileName": "org.wildfly.iiop.openjdk.rmi.OperationAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   cls ;", "}", "METHOD_END"], "methodName": ["getCls"], "fileName": "org.wildfly.iiop.openjdk.rmi.ParameterAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   ParameterMode . PARAM _ IN ;", "}", "METHOD_END"], "methodName": ["getMode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ParameterAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   typeIDLName ;", "}", "METHOD_END"], "methodName": ["getTypeIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ParameterAnalysis"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )", "throw   IIOPLogger . ROOT _ LOGGER . cannotAnalyzeNullClass (  )  ;", "if    ( cls    =  =     ( Void . TYPE )  )", "return    . voidAnalysis ;", "if    ( cls    =  =     ( Boolean . TYPE )  )", "return    . booleanAnalysis ;", "if    ( cls    =  =     ( Character . TYPE )  )", "return    . charAnalysis ;", "if    ( cls    =  =     ( Byte . TYPE )  )", "return    . byteAnalysis ;", "if    ( cls    =  =     ( Short . TYPE )  )", "return    . shortAnalysis ;", "if    ( cls    =  =     ( Integer . TYPE )  )", "return    . intAnalysis ;", "if    ( cls    =  =     ( Long . TYPE )  )", "return    . longAnalysis ;", "if    ( cls    =  =     ( Float . TYPE )  )", "return    . floatAnalysis ;", "if    ( cls    =  =     ( Double . TYPE )  )", "return    . doubleAnalysis ;", "throw   IIOPLogger . ROOT _ LOGGER . notAPrimitive ( cls . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPrimitiveAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.PrimitiveAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   section ;", "}", "METHOD_END"], "methodName": ["getSection"], "fileName": "org.wildfly.iiop.openjdk.rmi.RMIIIOPViolationException"}, {"methodBody": ["METHOD_START", "{", "Class [  ]    params    =    method . getParameterTypes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( params . length )  ;     +  + i )", "if    (  !  (  . isRMIIIOPType ( params [ i ]  )  )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["hasLegalRMIIIOPArguments"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "Iterator   it    =    Arrays . asList ( method . getExceptionTypes (  )  )  . iterator (  )  ;", "while    ( it . hasNext (  )  )     {", "Class   exception    =     (  ( Class )     ( it . next (  )  )  )  ;", "if    (  !  (  . isRMIIDLExceptionType ( exception )  )  )", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["hasLegalRMIIIOPExceptionTypes"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   RmiIdlUtil . isRMIIIOPType ( method . getReturnType (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasLegalRMIIIOPReturnType"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isAbstract ( c . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isAbstract"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( type . isInterface (  )  )  )", "return   false ;", "if    ( Object . class . isAssignableFrom ( type )  )", "return   false ;", "if    ( Remote . class . isAssignableFrom ( type )  )", "return   false ;", "Iterator   methodIterator    =    Arrays . asList ( type . getMethods (  )  )  . iterator (  )  ;", "while    ( methodIterator . hasNext (  )  )     {", "Method   m    =     (  ( Method )     ( methodIterator . next (  )  )  )  ;", "if    (  !  (  . throwsRemoteException ( m )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isAbstractInterface"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( type . isInterface (  )  )  )", "return   false ;", "if    ( Object . class . isAssignableFrom ( type )  )", "return   false ;", "boolean   cannotBeRemote    =    false ;", "boolean   cannotBeAbstractInterface    =    false ;", "if    ( Remote . class . isAssignableFrom ( type )  )     {", "cannotBeAbstractInterface    =    true ;", "} else    {", "cannotBeRemote    =    true ;", "}", "Iterator   methodIterator    =    Arrays . asList ( type . getMethods (  )  )  . iterator (  )  ;", "while    ( methodIterator . hasNext (  )  )     {", "Method   m    =     (  ( Method )     ( methodIterator . next (  )  )  )  ;", "if    (  !  (  . throwsRemoteException ( m )  )  )     {", "cannotBeAbstractInterface    =    true ;", "cannotBeRemote    =    true ;", "break ;", "}", "Iterator   it    =    Arrays . asList ( m . getExceptionTypes (  )  )  . iterator (  )  ;", "while    ( it . hasNext (  )  )     {", "Class   exception    =     (  ( Class )     ( it . next (  )  )  )  ;", "if    (  !  (  . isRMIIDLExceptionType ( exception )  )  )     {", "cannotBeRemote    =    true ;", "break ;", "}", "}", "}", "if    (  ! cannotBeRemote )     {", "Iterator   fieldIterator    =    Arrays . asList ( type . getFields (  )  )  . iterator (  )  ;", "while    ( fieldIterator . hasNext (  )  )     {", "Field   f    =     (  ( Field )     ( fieldIterator . next (  )  )  )  ;", "if    ( f . getType (  )  . isPrimitive (  )  )", "continue ;", "if    ( f . getType (  )  . equals ( String . class )  )", "continue ;", "cannotBeRemote    =    true ;", "break ;", "}", "}", "return   cannotBeRemote    &  &    cannotBeAbstractInterface ;", "}", "METHOD_END"], "methodName": ["isAbstractValueType"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   Fie [  ]    list    =    c . getFies (  )  ;", "for    ( int   i    =     0  ;    i    <     ( list . length )  ;    i +  +  )", "if    (  !  ( isPublic ( list [ i ]  . getModifiers (  )  )  )  )", "return   false ;", "}    catch    ( Exception   e )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isAllFieldsPublic"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isFinal ( c . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isFinal"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isFinal ( member . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isFinal"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isPublic ( c . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isPublic"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isPublic ( member . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isPublic"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Throwable . class . isAssignableFrom ( type )  )  )", "return   false ;", "if    ( Error . class . isAssignableFrom ( type )  )", "return   false ;", "if    ( RuntimeException . class . isAssignableFrom ( type )  )", "return   false ;", "if    (  !  (  . isRMIIDLValueType ( type )  )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["isRMIIDLExceptionType"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Remote . class . isAssignableFrom ( type )  )  )", "return   false ;", "Iterator   methodIterator    =    Arrays . asList ( type . getMethods (  )  )  . iterator (  )  ;", "while    ( methodIterator . hasNext (  )  )     {", "Method   m    =     (  ( Method )     ( methodIterator . next (  )  )  )  ;", "if    (  !  (  . throwsRemoteException ( m )  )  )     {", "return   false ;", "}", "Iterator   it    =    Arrays . asList ( m . getExceptionTypes (  )  )  . iterator (  )  ;", "while    ( it . hasNext (  )  )     {", "Class   exception    =     (  ( Class )     ( it . next (  )  )  )  ;", "if    (  !  (  . isRMIIDLExceptionType ( exception )  )  )", "return   false ;", "}", "}", "Iterator   fieldIterator    =    Arrays . asList ( type . getFields (  )  )  . iterator (  )  ;", "while    ( fieldIterator . hasNext (  )  )     {", "Field   f    =     (  ( Field )     ( fieldIterator . next (  )  )  )  ;", "if    ( f . getType (  )  . isPrimitive (  )  )", "continue ;", "if    ( f . getType (  )  . equals ( String . class )  )", "continue ;", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isRMIIDLRemoteInterface"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( Remote . class . isAssignableFrom ( type )  )", "return   false ;", "if    ( Object . class . isAssignableFrom ( type )  )", "return   false ;", "if    (  (  ( type . getDeclaringClass (  )  )     !  =    null )     &  &     (  . isStatic ( type )  )  )", "if    (  !  (  . isRMIIDLValueType ( type . getDeclaringClass (  )  )  )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["isRMIIDLValueType"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isPrimitive (  )  )", "return   true ;", "if    ( type . isArray (  )  )", "return    . isRMIIIOPType ( type . getComponentType (  )  )  ;", "if    ( Object . class . isAssignableFrom ( type )  )", "return   true ;", "if    ( IDLEntity . class . isAssignableFrom ( type )  )", "return   true ;", "if    (  . isRMIIDLRemoteInterface ( type )  )", "return   true ;", "if    (  . isRMIIDLExceptionType ( type )  )", "return   true ;", "if    (  . isRMIIDLValueType ( type )  )", "return   true ;", "return   false ;", "}", "METHOD_END"], "methodName": ["isRMIIIOPType"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isStatic ( c . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isStatic"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isStatic ( member . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isStatic"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "RuntimeException   re ;", "if    ( e   instanceof   MarshalException )", "re    =    new   MARSHAL ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   javaNoSuchObjectException )", "re    =    new   OBJECT _ NOT _ EXIST ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   javaAccessException )", "re    =    new   NO _ PERMISSION ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   TransactionRequiredException )", "re    =    new   TRANSACTION _ REQUIRED ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   TransactionRolledbackException )", "re    =    new   TRANSACTION _ ROLLEDBACK ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   InvalidTransactionException )", "re    =    new   INVALID _ TRANSACTION ( e . toString (  )  )  ;", "else", "if    ( e   instanceof   SystemException )", "re    =     (  ( SystemException )     ( e )  )  ;", "else", "return ;", "re . setStackTrace ( e . getStackTrace (  )  )  ;", "throw   re ;", "}", "METHOD_END"], "methodName": ["rethrowIfCorbaSystemException"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "Class [  ]    exception    =    method . getExceptionTypes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( exception . length )  ;     +  + i )", "if    ( exception [ i ]  . isAssignableFrom ( class )  )", "return   true ;", "return   false ;", "}", "METHOD_END"], "methodName": ["throwsRemoteException"], "fileName": "org.wildfly.iiop.openjdk.rmi.RmiIdlUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isInterface (  )  )", "return    0  ;", "if    (  !  ( Serializable . class . isAssignableFrom ( cls )  )  )", "return    0  ;", "if    ( Externalizable . class . isAssignableFrom ( cls )  )", "return    1  ;", "Long   l    =     (  ( Long )     (  . classHashCodeCache . get ( cls )  )  )  ;", "if    ( l    !  =    null )", "return   l . longValue (  )  ;", "ByteArrayOutputStream   baos    =    new   ByteArrayOutputStream (  2  5  6  )  ;", "DataOutputStream   dos    =    new   DataOutputStream ( baos )  ;", "Class   superClass    =    cls . getSuperclass (  )  ;", "if    (  ( superClass    !  =    null )     &  &     ( superClass    !  =     ( Object . class )  )  )     {", "try    {", "dos . writeLong (  . getClassHashCode ( superClass )  )  ;", "}    catch    ( IOException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( ex )  ;", "}", "}", "boolean   hasWriteObject    =    false ;", "try    {", "Method   m ;", "int   mods ;", "m    =    cls . getDeclaredMethod (  \" writeObject \"  ,    new   Class [  ]  {    ObjectOutputStream . class    }  )  ;", "mods    =    m . getModifiers (  )  ;", "if    (  (  !  ( Modifier . isPrivate ( mods )  )  )     &  &     (  !  ( Modifier . isStatic ( mods )  )  )  )", "hasWriteObject    =    true ;", "}    catch    ( NoSuchMethodException   ex )     {", "}", "try    {", "dos . writeInt (  ( hasWriteObject    ?     2     :     1  )  )  ;", "}    catch    ( IOException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( ex )  ;", "}", "Field [  ]    fields    =    cls . getDeclaredFields (  )  ;", "SortedSet   set    =    new   TreeSet ( new    . FieldComparator (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( fields . length )  ;     +  + i )     {", "int   mods    =    fields [ i ]  . getModifiers (  )  ;", "if    (  (  !  ( Modifier . isStatic ( mods )  )  )     &  &     (  !  ( Modifier . isTransient ( mods )  )  )  )", "set . add ( fields [ i ]  )  ;", "}", "Iterator   iter    =    set . iterator (  )  ;", "try    {", "while    ( iter . hasNext (  )  )     {", "Field   f    =     (  ( Field )     ( iter . next (  )  )  )  ;", "dos . writeUTF ( f . getName (  )  )  ;", "dos . writeUTF (  . getSignature ( f . getType (  )  )  )  ;", "}", "}    catch    ( IOException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( ex )  ;", "}", "try    {", "dos . flush (  )  ;", "}    catch    ( IOException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( ex )  ;", "}", "byte [  ]    bytes    =    baos . toByteArray (  )  ;", "MessageDigest   digest ;", "try    {", "digest    =    MessageDigest . getInstance (  \" SHA \"  )  ;", "}    catch    ( NoSuchAlgorithmException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unavailableSHADigest ( ex )  ;", "}", "digest . update ( bytes )  ;", "byte [  ]    sha    =    digest . digest (  )  ;", "long   hash    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( Math . min (  8  ,    sha . length )  )  ;    i +  +  )     {", "hash    +  =     (  ( long )     (  ( sha [ i ]  )     &     2  5  5  )  )     <  <     ( i    *     8  )  ;", "}", ". classHashCodeCache . put ( cls ,    new   Long ( hash )  )  ;", "return   hash ;", "}", "METHOD_END"], "methodName": ["getClassHashCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isPrimitive (  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . primitivesHaveNoIRIds (  )  ;", "String   result    =     (  ( String )     ( Util . classIRIdentifierCache . get ( cls )  )  )  ;", "if    ( result    !  =    null )", "return   result ;", "String   name    =    cls . getName (  )  ;", "StringBuffer   b    =    new   StringBuffer (  \" RMI :  \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( name . length (  )  )  ;     +  + i )     {", "char   c    =    name . charAt ( i )  ;", "if    ( c    <     2  5  6  )", "b . append ( c )  ;", "else", "b . append (  \"  \\  \\ U \"  )  . append ( Util . toHexString (  (  ( int )     ( c )  )  )  )  ;", "}", "long   clsHash    =    Util . getClassHashCode ( cls )  ;", "b . append (  '  :  '  )  . append ( Util . toHexString ( clsHash )  )  ;", "ObjectStreamClass   osClass    =    ObjectStreamClass . lookup ( cls )  ;", "if    ( osClass    !  =    null )     {", "long   serialVersionUID    =    osClass . getSerialVersionUID (  )  ;", "if    ( clsHash    !  =    serialVersionUID )", "b . append (  '  :  '  )  . append ( Util . toHexString ( serialVersionUID )  )  ;", "}", "result    =    b . toString (  )  ;", "Util . classIRIdentifierCache . put ( cls ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getIRIdentifierOfClass"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isArray (  )  )", "return    \"  [  \"     +     ( cls . getComponentType (  )  )  ;", "if    ( cls . isPrimitive (  )  )     {", "if    ( cls    =  =     ( Byte . TYPE )  )", "return    \" B \"  ;", "if    ( cls    =  =     ( Character . TYPE )  )", "return    \" C \"  ;", "if    ( cls    =  =     ( Double . TYPE )  )", "return    \" D \"  ;", "if    ( cls    =  =     ( Float . TYPE )  )", "return    \" F \"  ;", "if    ( cls    =  =     ( Integer . TYPE )  )", "return    \" I \"  ;", "if    ( cls    =  =     ( Long . TYPE )  )", "return    \" J \"  ;", "if    ( cls    =  =     ( Short . TYPE )  )", "return    \" S \"  ;", "if    ( cls    =  =     ( Boolean . TYPE )  )", "return    \" Z \"  ;", "throw   IIOPLogger . ROOT _ LOGGER . unknownPrimitiveType ( cls . getName (  )  )  ;", "}", "return    (  \" L \"     +     ( cls . getName (  )  . replace (  '  .  '  ,     '  /  '  )  )  )     +     \"  ;  \"  ;", "}", "METHOD_END"], "methodName": ["getSignature"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   b    =    new   StringBuffer (  \"  (  \"  )  ;", "Class [  ]    parameterTypes    =    method . getParameterTypes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( parameterTypes . length )  ;     +  + i )", "b . append (  . getSignature ( parameterTypes [ i ]  )  )  ;", "b . append (  '  )  '  )  . append (  . getSignature ( method . getReturnType (  )  )  )  ;", "return   b . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getSignature"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isPrimitive (  )  )", "return   PrimitiveAnalysis . getPrimitiveAnalysis ( cls )  . getIDLName (  )  ;", "if    ( cls . isArray (  )  )     {", "Class   componentClass    =    cls ;", "int   sequence    =     0  ;", "while    ( componentClass . isArray (  )  )     {", "componentClass    =    componentClass . getComponentType (  )  ;", "+  + sequence ;", "}", "String   idlName    =     . getTypeIDLName ( componentClass )  ;", "int   idx    =    idlName . lastIndexOf (  \"  :  :  \"  )  ;", "String   idlModule    =    idlName . substring (  0  ,     ( idx    +     2  )  )  ;", "String   baseName    =    idlName . substring (  ( idx    +     2  )  )  ;", "return    (  (  (  (  \"  :  : org :  : omg :  : boxedRMI \"     +    idlModule )     +     \" seq \"  )     +    sequence )     +     \"  _  \"  )     +    baseName ;", "}", "if    ( cls    =  =     ( String . class )  )", "return    \"  :  : CORBA :  : WStringValue \"  ;", "if    ( cls    =  =     ( Object . class )  )", "return    \"  :  : java :  : lang :  :  _ Object \"  ;", "if    ( cls    =  =     ( Class . class )  )", "return    \"  :  : javax :  : rmi :  : CORBA :  : ClassDesc \"  ;", "if    ( cls    =  =     ( Serializable . class )  )", "return    \"  :  : java :  : io :  : Serializable \"  ;", "if    ( cls    =  =     ( Externalizable . class )  )", "return    \"  :  : java :  : io :  : Externalizable \"  ;", "if    ( cls    =  =     ( Remote . class )  )", "return    \"  :  : java :  : rmi :  : Remote \"  ;", "if    ( cls    =  =     ( class )  )", "return    \"  :  : CORBA :  : Object \"  ;", "if    (  ( cls . isInterface (  )  )     &  &     ( Remote . class . isAssignableFrom ( cls )  )  )     {", "InterfaceAnalysis   ia    =    InterfaceAnalysis . getInterfaceAnalysis ( cls )  ;", "return    (  ( ia . getIDLModuleName (  )  )     +     \"  :  :  \"  )     +     ( ia . getIDLName (  )  )  ;", "}", "if    (  (  ( cls . isInterface (  )  )     &  &     ( isAssignableFrom ( cls )  )  )     &  &     ( IDLEntity . class . isAssignableFrom ( cls )  )  )     {", "InterfaceAnalysis   ia    =    InterfaceAnalysis . getInterfaceAnalysis ( cls )  ;", "return    (  ( ia . getIDLModuleName (  )  )     +     \"  :  :  \"  )     +     ( ia . getIDLName (  )  )  ;", "}", "if    ( Throwable . class . isAssignableFrom ( cls )  )     {", "if    (  ( Exception . class . isAssignableFrom ( cls )  )     &  &     (  !  ( RuntimeException . class . isAssignableFrom ( cls )  )  )  )     {", "ExceptionAnalysis   ea    =    ExceptionAnalysis . getExceptionAnalysis ( cls )  ;", "return    (  ( ea . getIDLModuleName (  )  )     +     \"  :  :  \"  )     +     ( ea . getIDLName (  )  )  ;", "}", "}", "ValueAnalysis   va    =    ValueAnalysis . getValueAnalysis ( cls )  ;", "return    (  ( va . getIDLModuleName (  )  )     +     \"  :  :  \"  )     +     ( va . getIDLName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTypeIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "Class   type    =    primitive . getClass (  )  ;", "if    ( type    =  =     ( Boolean . class )  )", "any . insert _ boolean (  (  ( Boolean )     ( primitive )  )  . booleanValue (  )  )  ;", "else", "if    ( type    =  =     ( Character . class )  )", "any . insert _ wchar (  (  ( Character )     ( primitive )  )  . charValue (  )  )  ;", "else", "if    ( type    =  =     ( Byte . class )  )", "any . insert _ octet (  (  ( Byte )     ( primitive )  )  . byteValue (  )  )  ;", "else", "if    ( type    =  =     ( Short . class )  )", "any . insert _ short (  (  ( Short )     ( primitive )  )  . shortValue (  )  )  ;", "else", "if    ( type    =  =     ( Integer . class )  )", "any . insert _ long (  (  ( Integer )     ( primitive )  )  . intValue (  )  )  ;", "else", "if    ( type    =  =     ( Long . class )  )", "any . insert _ longlong (  (  ( Long )     ( primitive )  )  . longValue (  )  )  ;", "else", "if    ( type    =  =     ( Float . class )  )", "any . insert _ float (  (  ( Float )     ( primitive )  )  . floatValue (  )  )  ;", "else", "if    ( type    =  =     ( Double . class )  )", "any . insert _ double (  (  ( Double )     ( primitive )  )  . doubleValue (  )  )  ;", "else", "throw   logging . IIOPLogger . ROOT _ LOGGER . notAPrimitive ( type . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["insertAnyPrimitive"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    (  ( c    >  =     9  7  )     &  &     ( c    <  =     1  2  2  )  )", "return   true ;", "if    (  ( c    >  =     4  8  )     &  &     ( c    <  =     5  7  )  )", "return   true ;", "if    (  ( c    >  =     6  5  )     &  &     ( c    <  =     9  0  )  )", "return   true ;", "if    ( c    =  =     '  _  '  )", "return   true ;", "return   false ;", "}", "METHOD_END"], "methodName": ["isLegalIDLIdentifierChar"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    (  ( c    >  =     9  7  )     &  &     ( c    <  =     1  2  2  )  )", "return   true ;", "if    (  ( c    >  =     6  5  )     &  &     ( c    <  =     9  0  )  )", "return   true ;", "return   false ;", "}", "METHOD_END"], "methodName": ["isLegalIDLStartIdentifierChar"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( Util . reservedIDLKeywords . length )  ;     +  + i )", "if    ( Util . reservedIDLKeywords [ i ]  . equals ( s )  )", "return   true ;", "return   false ;", "}", "METHOD_END"], "methodName": ["isReservedIDLKeyword"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isPrimitive (  )  )", "return   true ;", "if    ( cls . isArray (  )  )", "return    . isValidRMIIIOP ( cls . getComponentType (  )  )  ;", "if    (  ( cls    =  =     ( Serializable . class )  )     |  |     ( cls    =  =     ( Externalizable . class )  )  )", "return   true ;", "if    (  ( cls . isInterface (  )  )     &  &     ( Remote . class . isAssignableFrom ( cls )  )  )     {", "InterfaceAnalysis . getInterfaceAnalysis ( cls )  ;", "return   true ;", "}", "if    ( Throwable . class . isAssignableFrom ( cls )  )     {", "if    (  ( Exception . class . isAssignableFrom ( cls )  )     &  &     (  !  ( RuntimeException . class . isAssignableFrom ( cls )  )  )  )     {", "ExceptionAnalysis . getExceptionAnalysis ( cls )  ;", "}", "return   true ;", "}", "if    (  (  ( cls    =  =     ( Object . class )  )     |  |     ( cls    =  =     ( String . class )  )  )     |  |     ( cls    =  =     ( Class . class )  )  )", "return   true ;", "ValueAnalysis . getValueAnalysis ( cls )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidRMIIIOP"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( name    =  =    null )     |  |     (  \"  \"  . equals ( name )  )  )     |  |     (  ( name . indexOf (  '  .  '  )  )     !  =     (  -  1  )  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . nameCannotBeNullEmptyOrQualified (  )  ;", "StringBuffer   res    =    new   StringBuffer ( name . length (  )  )  ;", "if    (  ( name . charAt (  0  )  )     =  =     '  _  '  )", "res . append (  ' J '  )  ;", "for    ( int   i    =     0  ;    i    <     ( name . length (  )  )  ;     +  + i )     {", "char   c    =    name . charAt ( i )  ;", "if    ( Util . isLegalIDLIdentifierChar ( c )  )", "res . append ( c )  ;", "else", "res . append (  ' U '  )  . append ( Util . toHexString (  (  ( int )     ( c )  )  )  )  ;", "}", "String   s    =    res . toString (  )  ;", "if    ( Util . isReservedIDLKeyword ( s )  )", "return    \"  _  \"     +    s ;", "else", "return   s ;", "}", "METHOD_END"], "methodName": ["javaToIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( Void . TYPE )  )", "return    \" void \"  ;", "if    ( type    =  =     ( Boolean . TYPE )  )", "return    \" boolean \"  ;", "if    ( type    =  =     ( Character . TYPE )  )", "return    \" wchar \"  ;", "if    ( type    =  =     ( Byte . TYPE )  )", "return    \" octet \"  ;", "if    ( type    =  =     ( Short . TYPE )  )", "return    \" short \"  ;", "if    ( type    =  =     ( Integer . TYPE )  )", "return    \" long \"  ;", "if    ( type    =  =     ( Long . TYPE )  )", "return    \" long   long \"  ;", "if    ( type    =  =     ( Float . TYPE )  )", "return    \" float \"  ;", "if    ( type    =  =     ( Double . TYPE )  )", "return    \" double \"  ;", "throw   IIOPLogger . ROOT _ LOGGER . notAPrimitive ( type . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["primitiveTypeIDLName"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "String   s    =    Integer . toHexString ( i )  . toUpperCase ( Locale . ENGLISH )  ;", "if    (  ( s . length (  )  )     <     8  )", "return    (  \"  0  0  0  0  0  0  0  0  \"  . substring (  (  8     -     ( s . length (  )  )  )  )  )     +    s ;", "else", "return   s ;", "}", "METHOD_END"], "methodName": ["toHexString"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "String   s    =    Long . toHexString ( l )  . toUpperCase ( Locale . ENGLISH )  ;", "if    (  ( s . length (  )  )     <     1  6  )", "return    (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  . substring (  (  1  6     -     ( s . length (  )  )  )  )  )     +    s ;", "else", "return   s ;", "}", "METHOD_END"], "methodName": ["toHexString"], "fileName": "org.wildfly.iiop.openjdk.rmi.Util"}, {"methodBody": ["METHOD_START", "{", "attributes    =    new   AttributeAnalysis [  0  ]  ;", "}", "METHOD_END"], "methodName": ["analyzeAttributes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "ValueAnalysis . cache . clearClassLoader ( classLoader )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "super . doAnalyze (  )  ;", "if    (  ( cls )     =  =     ( String . class )  )", "throw   IIOPLogger . ROOT _ LOGGER . cannotAnalyzeStringType (  )  ;", "if    (  ( cls )     =  =     ( Class . class )  )", "throw   IIOPLogger . ROOT _ LOGGER . cannotAnalyzeClassType (  )  ;", "if    ( Remote . class . isAssignableFrom ( cls )  )", "throw   IIOPLogger . ROOT _ LOGGER . valueTypeCantImplementRemote ( cls . getName (  )  ,     \"  1  .  2  .  4  \"  )  ;", "if    (  ( cls . getName (  )  . indexOf (  '  $  '  )  )     !  =     (  -  1  )  )", "throw   IIOPLogger . ROOT _ LOGGER . valueTypeCantBeProxy ( cls . getName (  )  )  ;", "externalizable    =    Externalizable . class . isAssignableFrom ( cls )  ;", "if    (  !  ( externalizable )  )     {", "Field   spf    =    null ;", "try    {", "spf    =    cls . getField (  \" serialPersistentFields \"  )  ;", "}    catch    ( NoSuchFieldException   ex )     {", "}", "if    ( spf    !  =    null )     {", "int   mods    =    spf . getModifiers (  )  ;", "if    (  (  (  !  ( Modifier . isFinal ( mods )  )  )     |  |     (  !  ( Modifier . isStatic ( mods )  )  )  )     |  |     (  !  ( Modifier . isPrivate ( mods )  )  )  )", "spf    =    null ;", "}", "if    ( spf    !  =    null )     {", "Class   type    =    spf . getType (  )  ;", "if    ( type . isArray (  )  )     {", "type    =    type . getComponentType (  )  ;", "if    ( type    !  =     ( ObjectStreamField . class )  )", "spf    =    null ;", "} else", "spf    =    null ;", "}", "if    ( spf    !  =    null )     {", "try    {", "serialPersistentFields    =     (  ( ObjectStreamField [  ]  )     ( spf . get ( null )  )  )  ;", "}    catch    ( IllegalAccessException   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( ex )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( fields . length )  ;     +  + i )     {", "if    (  ( fields [ i ]  )     =  =    spf )     {", "f _ flags [ i ]     |  =    F _ SPFFIELD ;", "break ;", "}", "}", "}", "Method   wo    =    null ;", "try    {", "wo    =    cls . getMethod (  \" writeObject \"  ,    new   Class [  ]  {    OutputStream [  ]  . class    }  )  ;", "}    catch    ( NoSuchMethodException   ex )     {", "}", "if    ( wo    !  =    null )     {", "if    (  ( wo . getReturnType (  )  )     !  =     ( Void . TYPE )  )", "wo    =    null ;", "}", "if    ( wo    !  =    null )     {", "int   mods    =    spf . getModifiers (  )  ;", "if    (  !  ( Modifier . isPrivate ( mods )  )  )", "wo    =    null ;", "}", "if    ( wo    !  =    null )     {", "Class [  ]    paramTypes    =    wo . getParameterTypes (  )  ;", "if    (  ( paramTypes . length )     !  =     1  )", "wo    =    null ;", "else", "if    (  ( paramTypes [  0  ]  )     !  =     ( OutputStream . class )  )", "wo    =    null ;", "}", "if    ( wo    !  =    null )     {", "hasWriteObjectMethod    =    true ;", "for    ( int   i    =     0  ;    i    <     ( methods . length )  ;     +  + i )     {", "if    (  ( methods [ i ]  )     =  =    wo )     {", "m _ flags [ i ]     |  =    M _ WRITEOBJECT ;", "break ;", "}", "}", "}", "}", "SortedSet   m    =    new   TreeSet ( new    . ValueMemberComparator (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( fields . length )  ;     +  + i )     {", "if    (  ( f _ flags [ i ]  )     !  =     0  )", "continue ;", "int   mods    =    fields [ i ]  . getModifiers (  )  ;", "if    (  ( Modifier . isStatic ( mods )  )     |  |     ( Modifier . isTransient ( mods )  )  )", "continue ;", "ValueMemberAnalysis   vma ;", "vma    =    new   ValueMemberAnalysis ( fields [ i ]  . getName (  )  ,    fields [ i ]  . getType (  )  ,    Modifier . isPublic ( mods )  )  ;", "m . add ( vma )  ;", "}", "members    =    new   ValueMemberAnalysis [ m . size (  )  ]  ;", "members    =     (  ( ValueMemberAnalysis [  ]  )     ( m . toArray ( members )  )  )  ;", "Class   superClass    =    cls . getSuperclass (  )  ;", "if    ( superClass    =  =     ( Object . class )  )", "superClass    =    null ;", "if    ( superClass    =  =    null )", "superAnalysis    =    null ;", "else    {", "superAnalysis    =     . get ( superClass )  ;", "}", "if    (  !  ( Serializable . class . isAssignableFrom ( cls )  )  )", "abstractValue    =    true ;", "fixupCaseNames (  )  ;", "}", "METHOD_END"], "methodName": ["doAnalyze"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "final   ArrayList   ret    =    new   ArrayList (  (  (  ( constants . length )     +     ( attributes . length )  )     +     ( members . length )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( constants . length )  ;     +  + i )", "ret . add ( constants [ i ]  )  ;", "for    ( int   i    =     0  ;    i    <     ( attributes . length )  ;     +  + i )", "ret . add ( attributes [ i ]  )  ;", "for    ( int   i    =     0  ;    i    <     ( members . length )  ;     +  + i )", "ret . add ( members [ i ]  )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["getContainedEntries"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "String   result    =    super . getIDLModuleName (  )  ;", "Class   clazz    =    getCls (  )  ;", "if    (  ( IDLEntity . class . isAssignableFrom ( clazz )  )     &  &     (  ( Base . class . isAssignableFrom ( clazz )  )     =  =    false )  )", "result    =     \"  :  : org :  : omg :  : boxedIDL \"     +    result ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getIDLModuleName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   members . clone (  )  ;", "}", "METHOD_END"], "methodName": ["getMembers"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   superAnalysis ;", "}", "METHOD_END"], "methodName": ["getSuperAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ValueAnalysis )     ( ValueAnalysis . cache . getAnalysis ( cls )  )  )  ;", "}", "METHOD_END"], "methodName": ["getValueAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   abstractValue ;", "}", "METHOD_END"], "methodName": ["isAbstractValue"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return    ( externalizable )     |  |     ( hasWriteObjectMethod )  ;", "}", "METHOD_END"], "methodName": ["isCustom"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   externalizable ;", "}", "METHOD_END"], "methodName": ["isExternalizable"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   cls ;", "}", "METHOD_END"], "methodName": ["getCls"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueMemberAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   publicMember ;", "}", "METHOD_END"], "methodName": ["isPublic"], "fileName": "org.wildfly.iiop.openjdk.rmi.ValueMemberAnalysis"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?  >  >    classes    =    classesByLoader . remove ( cl )  ;", "if    ( classes    !  =    null )     {", "for    ( Class <  ?  >    clazz    :    classes )     {", "wDone . remove ( clazz )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["clearClassLoader"], "fileName": "org.wildfly.iiop.openjdk.rmi.WorkCacheManager"}, {"methodBody": ["METHOD_START", "{", "final   ContainerAnalysis   analysis ;", "try    {", "analysis    =     (  ( ContainerAnalysis )     ( constructor . newInstance ( cls )  )  )  ;", "}    catch    ( InstantiationException   ex )     {", "throw   new   RuntimeException ( ex . toString (  )  )  ;", "}    catch    ( IllegalAccessException   ex )     {", "throw   new   RuntimeException ( ex . toString (  )  )  ;", "}    catch    ( InvocationTargetException   ex )     {", "throw   new   RuntimeException ( ex . toString (  )  )  ;", "}", "workInProgress . put ( new    . InProgressKey ( cls ,    Thread . currentThread (  )  )  ,    analysis )  ;", "return   analysis ;", "}", "METHOD_END"], "methodName": ["createWorkInProgress"], "fileName": "org.wildfly.iiop.openjdk.rmi.WorkCacheManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "initializer . invoke ( ret )  ;", "}    catch    ( Throwable   t )     {", "synchronized ( this )     {", "workInProgress . remove ( new    . InProgressKey ( cls ,    Thread . currentThread (  )  )  )  ;", "}", "if    ( t   instanceof   InvocationTargetException )", "t    =     (  ( InvocationTargetException )     ( t )  )  . getTargetException (  )  ;", "if    ( t   instanceof   RMIIIOPViolationException )", "throw    (  ( RMIIIOPViolationException )     ( t )  )  ;", "if    ( t   instanceof   RuntimeException )", "throw    (  ( RuntimeException )     ( t )  )  ;", "if    ( t   instanceof   Error )", "throw    (  ( Error )     ( t )  )  ;", "throw   new   RuntimeException ( t . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["doTheWork"], "fileName": "org.wildfly.iiop.openjdk.rmi.WorkCacheManager"}, {"methodBody": ["METHOD_START", "{", "ContainerAnalysis   ret    =    null ;", "boolean   created    =    false ;", "try    {", "synchronized ( this )     {", "ret    =    lookupDone ( cls )  ;", "if    ( ret    !  =    null )     {", "return   ret ;", "}", "final   ContainerAnalysis   inProgress    =    workInProgress . get ( new    . InProgressKey ( cls ,    Thread . currentThread (  )  )  )  ;", "if    ( inProgress    !  =    null )     {", "return   inProgress ;", "}", "ret    =    createWorkInProgress ( cls )  ;", "}", "created    =    true ;", "doTheWork ( cls ,    ret )  ;", "}    finally    {", "synchronized ( this )     {", "if    ( created )     {", "workInProgress . remove ( new    . InProgressKey ( cls ,    Thread . currentThread (  )  )  )  ;", "workDone . put ( cls ,    new   SoftReference < ContainerAnalysis >  ( ret )  )  ;", "ClassLoader   classLoader    =    cls . getClassLoader (  )  ;", "if    ( classLoader    !  =    null )     {", "Set < Class <  ?  >  >    classes    =    classesByLoader . get ( classLoader )  ;", "if    ( classes    =  =    null )     {", "classesByLoader . put ( classLoader ,     ( classes    =    new   HashSet < Class <  ?  >  >  (  )  )  )  ;", "}", "classes . add ( cls )  ;", "}", "}", "notifyAll (  )  ;", "}", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["getAnalysis"], "fileName": "org.wildfly.iiop.openjdk.rmi.WorkCacheManager"}, {"methodBody": ["METHOD_START", "{", "SoftReference   ref    =     (  ( SoftReference )     ( workDone . get ( cls )  )  )  ;", "if    ( ref    =  =    null )", "return   null ;", "ContainerAnalysis   ret    =     (  ( ContainerAnalysis )     ( ref . get (  )  )  )  ;", "if    ( ret    =  =    null )", "workDone . remove ( cls )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["lookupDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.WorkCacheManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "original _ type _ def    =    IDLType . getIDLType ( type (  )  . content _ type (  )  ,    repository )  ;", "}    catch    ( BadKind   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . badKindForTypeCode ( type (  )  . kind (  )  . value (  )  )  ;", "}", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AliasDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AliasDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( original _ type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["original_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AliasDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["original_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AliasDefImpl"}, {"methodBody": ["METHOD_START", "{", "type _ def    =    IDLTypeImpl . getIDLType ( typeCode ,    repository )  ;", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "scription   d    =    new   scription ( name ,    id ,    defined _ in _ id ,    version ,    typeCode ,    mode )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    d )  ;", "return   new   Description ( DefinitionKind . dk _ Attribute ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   mode ;", "}", "METHOD_END"], "methodName": ["mode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["mode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.AttributeDefImpl"}, {"methodBody": ["METHOD_START", "{", "type _ def    =    IDLTypeImpl . getIDLType ( typeCode ,    repository )  ;", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "scription   d    =    new   scription ( name ,    id ,    defined _ in _ id ,    version ,    typeCode ,    value )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    d )  ;", "return   new   Description ( DefinitionKind . dk _ Constant ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ConstantDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   absolute _ name ;", "}", "METHOD_END"], "methodName": ["absolute_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   RepositoryHelper . narrow ( repository . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["containing_repository"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   ContainerHelper . narrow ( defined _ in . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["defined_in"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( getRepository (  )  . getObjectIdPrefix (  )  )     +     ( id )  )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["getObjectId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["id"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["id"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["move"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["version"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["version"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainedImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . add ( name ,    contained )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "delegate . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ alias ( id ,    name ,    version ,    original _ type )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ constant ( id ,    name ,    version ,    type ,    value )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ enum ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ exception ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ interface ( id ,    name ,    version ,    base _ interfaces ,    is _ abstract )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ module ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ native ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ struct ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ union ( id ,    name ,    version ,    discriminator _ type ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value ( id ,    name ,    version ,    is _ custom ,    is _ abstract ,    base _ value ,    is _ truncatable ,    abstract _ base _ values ,    supported _ interfaces ,    initializers )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value _ box ( id ,    name ,    version ,    original _ type _ def )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . describe _ contents ( limit _ type ,    exclude _ inherited ,    max _ returned _ objs )  ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . shutdown (  )  ;", "sur . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImpl"}, {"methodBody": ["METHOD_START", "{", "int   target    =    limit _ type . value (  )  ;", "Collection   found ;", "if    ( target    =  =     ( DefinitionKind .  _ dk _ all )  )", "found    =    cont ;", "else    {", "found    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( cont . size (  )  )  ;     +  + i )     {", "Locald   val    =     (  ( Locald )     ( cont . get ( i )  )  )  ;", "if    ( target    =  =     ( val . def _ kind (  )  . value (  )  )  )     {", "if    (  (  ! exclude _ inherited )     |  |     (  ( val . defined _ in (  )  )     =  =     ( delegateFor )  )  )", "found . add ( val )  ;", "}", "}", "}", "Locald [  ]    res    =    new   Locald [ found . size (  )  ]  ;", "res    =     (  ( Locald [  ]  )     ( found . toArray ( res )  )  )  ;", "return   res ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "if    ( search _ name . startsWith (  \"  :  :  \"  )  )", "return   delegateFor . getRepository (  )  .  _ lookup ( search _ name . substring (  2  )  )  ;", "int   idx    =    search _ name . indexOf (  \"  :  :  \"  )  ;", "if    ( idx    >     0  )     {", "String   first    =    search _ name . substring (  0  ,    idx )  ;", "Object   o    =    contMap . get ( first )  ;", "if    (  ( o    =  =    null )     |  |     (  !  ( o   instanceof   Local )  )  )", "return   null ;", "else    {", "Local   next    =     (  ( Local )     ( o )  )  ;", "String   rest    =    search _ name . substring (  ( idx    +     2  )  )  ;", "return   next .  _ lookup ( rest )  ;", "}", "} else", "return    (  ( LocalContained )     ( contMap . get ( search _ name )  )  )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "if    ( levels _ to _ search    =  =     0  )", "return   null ;", "if    ( levels _ to _ search    =  =     (  -  1  )  )", "+  + levels _ to _ search ;", "Collection   found    =    new   ArrayList (  )  ;", "LocalContained [  ]    here    =     _ contents ( limit _ type ,    exclude _ inherited )  ;", "for    ( int   i    =     0  ;    i    <     ( here . length )  ;     +  + i )", "if    ( here [ i ]  . name (  )  . equals ( search _ name )  )", "found . add ( here [ i ]  )  ;", "if    ( levels _ to _ search    >  =     0  )     {", "for    ( int   i    =     0  ;    i    <     ( here . length )  ;     +  + i )     {", "if    (  ( here [ i ]  )    instanceof    )     {", "Local   container    =     (  ( Local )     ( here [ i ]  )  )  ;", "LocalContained [  ]    c ;", "c    =    container .  _ lookup _ name ( search _ name ,     ( levels _ to _ search    -     1  )  ,    limit _ type ,    exclude _ inherited )  ;", "if    ( c    !  =    null )", "for    ( int   j    =     0  ;    j    <     ( c . length )  ;     +  + j )", "found . add ( c [ j ]  )  ;", "}", "}", "}", "LocalContained [  ]    res    =    new   LocalContained [ found . size (  )  ]  ;", "res    =     (  ( LocalContained [  ]  )     ( found . toArray ( res )  )  )  ;", "return   res ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "if    (  ( contained . getRepository (  )  )     !  =     ( delegateFor . getRepository (  )  )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . wrongInterfaceRepository (  )  ;", "if    (  ( contMap . get ( name )  )     !  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . duplicateRepositoryName (  )  ;", "cont . add ( contained )  ;", "contMap . put ( name ,    contained )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( cont . size (  )  )  ;     +  + i )     {", "Locald   item    =     (  ( Locald )     ( cont . get ( i )  )  )  ;", "item . allDone (  )  ;", "}", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "Locad [  ]    c    =     _ contents ( limit _ type ,    exclude _ inherited )  ;", "d [  ]    res    =    newd [ c . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( c . length )  ;     +  + i )", "res [ i ]     =    narrow ( c [ i ]  . getReference (  )  )  ;", "return   res ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["def_kind"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "d [  ]    c    =    contents ( limit _ type ,    exclude _ inherited )  ;", "int   returnSize ;", "if    (  ( max _ returned _ objs    !  =     (  -  1  )  )     &  &     (  ( c . length )     >    max _ returned _ objs )  )", "returnSize    =    max _ returned _ objs ;", "else", "returnSize    =    c . length ;", "Description [  ]    ret    =    new   Description [ returnSize ]  ;", "for    ( int   i    =     0  ;    i    <    returnSize ;     +  + i )     {", "Description   d    =    c [ i ]  . describe (  )  ;", "ret [ i ]     =    new   Description ( c [ i ]  ,    d . kind ,    d . value )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "Locad   c    =     _ lookup ( search _ name )  ;", "if    ( c    =  =    null )", "return   null ;", "else", "return   narrow ( c . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "Locad [  ]    c    =     _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "d [  ]    res    =    newd [ c . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( c . length )  ;     +  + i )", "res [ i ]     =    narrow ( c [ i ]  . getReference (  )  )  ;", "return   res ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( cont . size (  )  )  ;     +  + i )", "(  ( Locald )     ( cont . get ( i )  )  )  . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ContainerImplDelegate"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "delegate . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ alias ( id ,    name ,    version ,    original _ type )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ constant ( id ,    name ,    version ,    type ,    value )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ enum ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ exception ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ interface ( id ,    name ,    version ,    base _ interfaces ,    is _ abstract )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ module ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ native ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ struct ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ union ( id ,    name ,    version ,    discriminator _ type ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value ( id ,    name ,    version ,    is _ custom ,    is _ abstract ,    base _ value ,    is _ truncatable ,    abstract _ base _ values ,    supported _ interfaces ,    initializers )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value _ box ( id ,    name ,    version ,    original _ type _ def )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "scription   ed    =    new   scription ( name ,    id ,    defined _ in _ id ,    version ,    type (  )  )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    ed )  ;", "return   new   Description ( DefinitionKind . dk _ Exception ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . describe _ contents ( limit _ type ,    exclude _ inherited ,    max _ returned _ objs )  ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( members )     =  =    null )     {", "TypeCode   type    =    vDef . type (  )  ;", "LocalIDLType   localTypeDef    =    IDLType . getIDLType ( type ,    repository )  ;", "IDLType   type _ def    =    IDLTypeHelper . narrow ( localTypeDef . getReference (  )  )  ;", "members    =    new   StructMember [  1  ]  ;", "members [  0  ]     =    new   StructMember (  \" value \"  ,    type ,    type _ def )  ;", "}", "return   members ;", "}", "METHOD_END"], "methodName": ["members"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["members"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ExceptionDefImpl"}, {"methodBody": ["METHOD_START", "{", "TCKind   tcKind    =    typeCode . kind (  )  ;", "if    ( PrimitiveDefImpl . isPrimitiveTCKind ( tcKind )  )", "return   new   PrimitiveDefImpl ( typeCode ,    repository )  ;", "if    ( tcKind    =  =     ( TCKind . tk _ sequence )  )", "return   repository . getSequenceImpl ( typeCode )  ;", "if    (  (  (  (  (  (  ( tcKind    =  =     ( TCKind . tk _ value )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ value _ box )  )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ alias )  )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ struct )  )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ union )  )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ enum )  )  )     |  |     ( tcKind    =  =     ( TCKind . tk _ objref )  )  )     {", "try    {", "return    (  ( Local )     ( repository .  _ lookup _ id ( typeCode . id (  )  )  )  )  ;", "}    catch    ( BadKind   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . badKindForTypeCode ( tcKind . value (  )  )  ;", "}", "}", "throw   IIOPLogger . ROOT _ LOGGER . badKindForTypeCode ( tcKind . value (  )  )  ;", "}", "METHOD_END"], "methodName": ["getIDLType"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IDLTypeImpl"}, {"methodBody": ["METHOD_START", "{", "return   repository . getNextObjectId (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IDLTypeImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IDLTypeImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "return   def _ kind ;", "}", "METHOD_END"], "methodName": ["def_kind"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotDestroyRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "return   repository . orb ;", "}", "METHOD_END"], "methodName": ["getORB"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "return   repository . poa ;", "}", "METHOD_END"], "methodName": ["getPOA"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    id    =    getObjectId (  )  ;", "try    {", "repository . poa . activate _ object _ with _ id ( id ,    servant )  ;", "Object   ref    =    repository . poa . id _ to _ reference ( id )  ;", "return   ref ;", "}    catch    ( WrongPolicy   ex )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Exception   converting   CORBA   servant   to   reference \"  ,    ex )  ;", "}    catch    ( ServantAlreadyActive   ex )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Exception   converting   CORBA   servant   to   reference \"  ,    ex )  ;", "}    catch    ( ObjectAlreadyActive   ex )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Exception   converting   CORBA   servant   to   reference \"  ,    ex )  ;", "}    catch    ( ObjectNotActive   ex )     {", "IIOPLogger . ROOT _ LOGGER . debug (  \" Exception   converting   CORBA   servant   to   reference \"  ,    ex )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["servantToReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "POA   poa    =    getPOA (  )  ;", "try    {", "poa . deactivate _ object ( poa . reference _ to _ id ( getReference (  )  )  )  ;", "}    catch    ( UserException   ex )     {", "IIOPLogger . ROOT _ LOGGER . warnCouldNotDeactivate ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.IRObjectImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . add ( name ,    contained )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "delegate . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( base _ interfaces _ ref )     =  =    null )     {", "base _ interfaces _ ref    =    new    [ base _ interfaces . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( base _ interfaces _ ref . length )  ;     +  + i )     {", "Contained   c    =    repository . lookup _ id ( base _ interfaces [ i ]  )  ;", "base _ interfaces _ ref [ i ]     =    Helper . narrow ( c )  ;", "}", "}", "return   base _ interfaces _ ref ;", "}", "METHOD_END"], "methodName": ["base_interfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["base_interfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ alias ( id ,    name ,    version ,    original _ type )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_attribute"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ constant ( id ,    name ,    version ,    type ,    value )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ enum ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ exception ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ interface ( id ,    name ,    version ,    base _ interfaces ,    is _ abstract )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ module ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ native ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_operation"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ struct ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ union ( id ,    name ,    version ,    discriminator _ type ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value ( id ,    name ,    version ,    is _ custom ,    is _ abstract ,    base _ value ,    is _ truncatable ,    abstract _ base _ values ,    supported _ interfaces ,    initializers )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value _ box ( id ,    name ,    version ,    original _ type _ def )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "CORBAscription   md    =    newscription ( name ,    id ,    defined _ in _ id ,    version ,    base _ interfaces ,    false )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    md )  ;", "return   new   Description ( DefinitionKind . dk _ Interface ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . describe _ contents ( limit _ type ,    exclude _ inherited ,    max _ returned _ objs )  ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fullInterfaceDescription )     !  =    null )", "return   fullInterfaceDescription ;", "OperationDescription [  ]    operations    =    new   OperationDescription [  0  ]  ;", "AttributeDescription [  ]    attributes    =    new   AttributeDescription [  0  ]  ;", "String   defined _ in _ id    =     \" IDL : Global :  1  .  0  \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "fullInterfaceDescription    =    new   FullInterfaceDescription ( name ,    id ,    defined _ in _ id ,    version ,    operations ,    attributes ,    base _ interfaces ,    type (  )  ,    is _ abstract )  ;", "return   fullInterfaceDescription ;", "}", "METHOD_END"], "methodName": ["describe_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["is_a"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["is_abstract"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["is_abstract"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "Contained   res    =    delegate . lookup ( search _ name )  ;", "return   res ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . shutdown (  )  ;", "super . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( typeCode )     =  =    null )", "typeCode    =    getORB (  )  . create _ i _ tc ( id ,    name )  ;", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceDefImpl"}, {"methodBody": ["METHOD_START", "{", "ValueAnalysis [  ]    abstractValuetypes    =    ca . getAbstractBaseValuetypes (  )  ;", "List   abstract _ base _ valuetypes    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( abstractValuetypes . length )  ;     +  + i )     {", "ValueDefImpl   vdi    =    addValue ( abstractValuetypes [ i ]  )  ;", "abstract _ base _ valuetypes . add ( vdd (  )  )  ;", "}", "String [  ]    strArr    =    new   String [ abstract _ base _ valuetypes . size (  )  ]  ;", "return    (  ( String [  ]  )     ( abstract _ base _ valuetypes . toArray ( strArr )  )  )  ;", "}", "METHOD_END"], "methodName": ["addAbstractBaseValuetypes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( cls . isArray (  )  )  )", "throw   classIsNotArray ( cls . getName (  )  )  ;", "ValueBoxDefImpl   vbDef ;", "vbDef    =     (  ( ValueBoxDefImpl )     ( arrayMap . get ( cls )  )  )  ;", "if    ( vbDef    !  =    null )", "return   vbDef ;", "int   dimensions    =     0  ;", "Class   compType    =    cls ;", "do    {", "compType    =    compType . getComponentType (  )  ;", "+  + dimensions ;", "}    while    ( compType . isArray (  )     )  ;", "String   typeName ;", "String   moduleName ;", "TypeCode   typeCode ;", "if    ( compType . isPrimitive (  )  )     {", "if    ( compType    =  =     ( Boolean . TYPE )  )     {", "typeName    =     \" boolean \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ boolean )  ;", "} else", "if    ( compType    =  =     ( Character . TYPE )  )     {", "typeName    =     \" wchar \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ wchar )  ;", "} else", "if    ( compType    =  =     ( Byte . TYPE )  )     {", "typeName    =     \" octet \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ octet )  ;", "} else", "if    ( compType    =  =     ( Short . TYPE )  )     {", "typeName    =     \" short \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ short )  ;", "} else", "if    ( compType    =  =     ( Integer . TYPE )  )     {", "typeName    =     \" long \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ long )  ;", "} else", "if    ( compType    =  =     ( Long . TYPE )  )     {", "typeName    =     \" long _ long \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ longlong )  ;", "} else", "if    ( compType    =  =     ( Float . TYPE )  )     {", "typeName    =     \" float \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ float )  ;", "} else", "if    ( compType    =  =     ( Double . TYPE )  )     {", "typeName    =     \" double \"  ;", "typeCode    =    orb . get _ primitive _ tc ( TCKind . tk _ double )  ;", "} else    {", "throw   unknownPrimitiveType ( compType . getName (  )  )  ;", "}", "moduleName    =     \" boxedRMI \"  ;", "} else    {", "typeCode    =    getTypeCode ( compType )  ;", "if    ( compType    =  =     ( String . class )  )", "typeName    =    getJavaLangString (  )  . name (  )  ;", "else", "if    ( compType    =  =     ( Object . class )  )", "typeName    =    getJavaLang _ Object (  )  . name (  )  ;", "else", "if    ( compType    =  =     ( Class . class )  )", "typeName    =    getJavaxRmiCORBAClassDesc (  )  . name (  )  ;", "else", "if    ( compType    =  =     ( class )  )", "typeName    =    getJavaIoSerializable (  )  . name (  )  ;", "else", "if    ( compType    =  =     ( class )  )", "typeName    =    getJavaIoExternalizable (  )  . name (  )  ;", "else", "if    (  ( compType . isInterface (  )  )     &  &     (  !  ( RmiIdlUtil . isAbstractValueType ( compType )  )  )  )", "typeName    =     (  ( InterfaceDefImpl )     ( interfaceMap . get ( compType )  )  )  . name (  )  ;", "else", "if    ( Exception . class . isAssignableFrom ( compType )  )", "typeName    =     (  ( ExceptionDefImpl )     ( exceptionMap . get ( compType )  )  )  . name (  )  ;", "else", "typeName    =     (  ( ValueDefImpl )     ( valueMap . get ( compType )  )  )  . name (  )  ;", "moduleName    =     \" \"     +     ( compType . getPackage (  )  . getName (  )  )  ;", "}", "ModuleDefImpl   m    =    ensurePackageExists ( moduleName )  ;", "Class [  ]    types    =    new   Class [ dimensions ]  ;", "types [  ( dimensions    -     1  )  ]     =    cls ;", "for    ( int   i    =    dimensions    -     2  ;    i    >  =     0  ;     -  - i )", "types [ i ]     =    types [  ( i    +     1  )  ]  . getComponentType (  )  ;", "for    ( int   i    =     0  ;    i    <    dimensions ;     +  + i )     {", "Class   type    =    types [ i ]  ;", "typeCode    =    orb . create _ sequence _ tc (  0  ,    typeCode )  ;", "vbDef    =     (  ( ValueBoxDefImpl )     ( arrayMap . get ( type )  )  )  ;", "if    ( vbDef    =  =    null )     {", "String   id    =    Util . getIRIdentifierOfClass ( type )  ;", "SequenceDefImpl   sdi    =    new   SequenceDefImpl ( typeCode ,    impl )  ;", "String   name    =     (  (  \" seq \"     +     ( i    +     1  )  )     +     \"  _  \"  )     +    typeName ;", "TypeCode   boxTypeCode    =    orb . create _ value _ box _ tc ( id ,    name ,    typeCode )  ;", "vbDef    =    new   ValueBoxDefImpl ( id ,    name ,     \"  1  .  0  \"  ,    m ,    boxTypeCode ,    impl )  ;", "addTypeCode ( type ,    vbDef . type (  )  )  ;", "m . add ( name ,    vbDef )  ;", "impl . putSequenceImpl ( id ,    typeCode ,    sdi ,    vbDef )  ;", "arrayMap . put ( type ,    vbDef )  ;", "typeCode    =    boxTypeCode ;", "} else", "typeCode    =    vbDef . type (  )  ;", "}", "return   vbDef ;", "}", "METHOD_END"], "methodName": ["addArray"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "AttributeAnalysis [  ]    attrs    =    ca . getAttributes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( attrs . length )  ;     +  + i )     {", "AttributeDefImpl   aDef ;", "String   aid    =    ca . getMemberId ( attrs [ i ]  . getJavaName (  )  )  ;", "String   aName    =    attrs [ i ]  . getIDLName (  )  ;", "Class   cls    =    attrs [ i ]  . getCls (  )  ;", "TypeCode   typeCode    =    getTypeCode ( cls )  ;", "aDef    =    new   AttributeDefImpl ( aid ,    aName ,     \"  1  .  0  \"  ,    attrs [ i ]  . getMode (  )  ,    typeCode ,    container ,    impl )  ;", "container . add ( aName ,    aDef )  ;", "}", "}", "METHOD_END"], "methodName": ["addAttributes"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( cls . isPrimitive (  )  )", "return ;", "if    ( cls . isArray (  )  )     {", "addArray ( cls )  ;", "} else", "if    ( cls . isInterface (  )  )     {", "if    (  !  ( RmiIdlUtil . isAbstractValueType ( cls )  )  )     {", "InterfaceAnalysis   ia    =    InterfaceAnalysis . getInterfaceAnalysis ( cls )  ;", "addInterface ( ia )  ;", "} else    {", "ValueAnalysis   va    =    ValueAnalysis . getValueAnalysis ( cls )  ;", "addValue ( va )  ;", "}", "} else", "if    ( Exception . class . isAssignableFrom ( cls )  )     {", "ExceptionAnalysis   ea    =    ExceptionAnalysis . getExceptionAnalysis ( cls )  ;", "addException ( ea )  ;", "} else    {", "ValueAnalysis   va    =    ValueAnalysis . getValueAnalysis ( cls )  ;", "addValue ( va )  ;", "}", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "ConstantAnalysis [  ]    consts    =    ca . getConstants (  )  ;", "for    ( int   i    =     0  ;    i    <     ( consts . length )  ;     +  + i )     {", "ConstantDefImpl   cDef ;", "String   cid    =    ca . getMemberId ( consts [ i ]  . getJavaName (  )  )  ;", "String   cName    =    consts [ i ]  . getIDLName (  )  ;", "Class   cls    =    consts [ i ]  . getType (  )  ;", "TypeCode   typeCode    =    getConstantTypeCode ( cls )  ;", "Any   value    =    orb . create _ any (  )  ;", "consts [ i ]  . insertValue ( value )  ;", "cDef    =    new   ConstantDefImpl ( cid ,    cName ,     \"  1  .  0  \"  ,    typeCode ,    value ,    container ,    impl )  ;", "container . add ( cName ,    cDef )  ;", "}", "}", "METHOD_END"], "methodName": ["addConstants"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "ExceptionDefImpl   eDef ;", "Class   cls    =    ea . getCls (  )  ;", "eDef    =     (  ( ExceptionDefImpl )     ( exceptionMap . get ( cls )  )  )  ;", "if    ( eDef    !  =    null )", "return   eDef ;", "ValueDefImpl   vDef    =    addValue ( ea )  ;", "ModuleDefImpl   m    =    ensurePackageExists ( cls . getPackage (  )  . getName (  )  )  ;", "String   base    =    cls . getName (  )  ;", "base    =    base . substring (  (  ( base . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "if    ( base . endsWith (  \" Exception \"  )  )", "base    =    base . substring (  0  ,     (  ( base . length (  )  )     -     9  )  )  ;", "base    =    Util . javaToIDLName (  ( base    +     \" Ex \"  )  )  ;", "StructMember [  ]    members    =    new   StructMember [  1  ]  ;", "members [  0  ]     =    new   StructMember (  \" value \"  ,    vDef . type (  )  ,    null )  ;", "TypeCode   typeCode    =    orb . create _ exception _ tc ( ea . getExceptionId (  )  ,    base ,    members )  ;", "eDef    =    new   ExceptionDefImpl ( ea . getExceptionId (  )  ,    base ,     \"  1  .  0  \"  ,    typeCode ,    vDef ,    m ,    impl )  ;", "m . add ( base ,    eDef )  ;", "exceptionMap . put ( cls ,    eDef )  ;", "return   eDef ;", "}", "METHOD_END"], "methodName": ["addException"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "InterfaceDefImpl   iDef ;", "Class   cls    =    ia . getCls (  )  ;", "iDef    =     (  ( InterfaceDefImpl )     ( interfaceMap . get ( cls )  )  )  ;", "if    ( iDef    !  =    null )", "return   iDef ;", "ModuleDefImpl   m    =    ensurePackageExists ( cls . getPackage (  )  . getName (  )  )  ;", "String [  ]    base _ interfaces    =    addInterfaces ( ia )  ;", "String   base    =    cls . getName (  )  ;", "base    =    base . substring (  (  ( base . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "base    =    Util . javaToIDLName ( base )  ;", "iDef    =    new   InterfaceDefImpl ( ia . getId (  )  ,    base ,     \"  1  .  0  \"  ,    m ,    base _ interfaces ,    impl )  ;", "addTypeCode ( cls ,    iDef . type (  )  )  ;", "m . add ( base ,    iDef )  ;", "interfaceMap . put ( cls ,    iDef )  ;", "addConstants ( iDef ,    ia )  ;", "addAttributes ( iDef ,    ia )  ;", "addOperations ( iDef ,    ia )  ;", "return   iDef ;", "}", "METHOD_END"], "methodName": ["addInterface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "InterfaceAnalysis [  ]    interfaces    =    ca . getInterfaces (  )  ;", "List   base _ interfaces    =    new   ArrayList (  )  ;", "for    ( int   i    =     0  ;    i    <     ( interfaces . length )  ;     +  + i )     {", "InterfaceDefImpl   idi    =    addInterface ( interfaces [ i ]  )  ;", "base _ interfaces . add ( idi . id (  )  )  ;", "}", "String [  ]    strArr    =    new   String [ base _ interfaces . size (  )  ]  ;", "return    (  ( String [  ]  )     ( base _ interfaces . toArray ( strArr )  )  )  ;", "}", "METHOD_END"], "methodName": ["addInterfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "OperationAnalysis [  ]    ops    =    ca . getOperations (  )  ;", "for    ( int   i    =     0  ;    i    <     ( ops . length )  ;     +  + i )     {", "OperationDefImpl   oDef ;", "String   oName    =    ops [ i ]  . getIDLName (  )  ;", "String   oid    =    ca . getMemberId ( oName )  ;", "Class   cls    =    ops [ i ]  . getReturnType (  )  ;", "TypeCode   typeCode    =    getTypeCode ( cls )  ;", "ParameterAnalysis [  ]    ps    =    ops [ i ]  . getParameters (  )  ;", "ParameterDescription [  ]    params    =    new   ParameterDescription [ ps . length ]  ;", "for    ( int   j    =     0  ;    j    <     ( ps . length )  ;     +  + j )     {", "params [ j ]     =    new   ParameterDescription ( ps [ j ]  . getIDLName (  )  ,    getTypeCode ( ps [ j ]  . getCls (  )  )  ,    null ,    ParameterMode . PARAM _ IN )  ;", "}", "ExceptionAnalysis [  ]    exc    =    ops [ i ]  . getMappedExceptions (  )  ;", "ExceptionDef [  ]    exceptions    =    new   ExceptionDef [ exc . length ]  ;", "for    ( int   j    =     0  ;    j    <     ( exc . length )  ;     +  + j )     {", "ExceptionDefImpl   e    =    addException ( exc [ j ]  )  ;", "exceptions [ j ]     =    ExceptionDefHelper . narrow ( e . getReference (  )  )  ;", "}", "oDef    =    new   OperationDefImpl ( oid ,    oName ,     \"  1  .  0  \"  ,    container ,    typeCode ,    params ,    exceptions ,    impl )  ;", "container . add ( oName ,    oDef )  ;", "}", "}", "METHOD_END"], "methodName": ["addOperations"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidNullClass (  )  ;", "TypeCode   tc    =     (  ( TypeCode )     ( typeCodeMap . get ( cls )  )  )  ;", "if    ( tc    !  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . duplicateTypeCodeForClass ( cls . getName (  )  )  ;", "typeCodeMap . put ( cls ,    typeCode )  ;", "}", "METHOD_END"], "methodName": ["addTypeCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "ValueDefImpl   vDef ;", "Class   cls    =    va . getCls (  )  ;", "vDef    =     (  ( ValueDefImpl )     ( valueMap . get ( cls )  )  )  ;", "if    ( vDef    !  =    null )", "return   vDef ;", "ModuleDefImpl   m    =    ensurePackageExists ( cls . getPackage (  )  . getName (  )  )  ;", "String [  ]    supported _ interfaces    =    addInterfaces ( va )  ;", "String [  ]    abstract _ base _ valuetypes    =    addAbstractBaseValuetypes ( va )  ;", "ValueDefImpl   superValue    =    null ;", "ValueAnalysis   superAnalysis    =    va . getSuperAnalysis (  )  ;", "if    ( superAnalysis    !  =    null )", "superValue    =    addValue ( superAnalysis )  ;", "String   base    =    cls . getName (  )  ;", "base    =    base . substring (  (  ( base . lastIndexOf (  '  .  '  )  )     +     1  )  )  ;", "base    =    Util . javaToIDLName ( base )  ;", "TypeCode   baseTypeCode ;", "if    ( superValue    =  =    null )", "baseTypeCode    =    orb . get _ primitive _ tc ( tk _ null )  ;", "else", "baseTypeCode    =    superValue . type (  )  ;", "vDef    =    new   ValueDefImpl ( va . getId (  )  ,    base ,     \"  1  .  0  \"  ,    m ,    va . isAbstractValue (  )  ,    va . isCustom (  )  ,    supported _ interfaces ,    abstract _ base _ valuetypes ,    baseTypeCode ,    impl )  ;", "addTypeCode ( cls ,    vDef . type (  )  )  ;", "m . add ( base ,    vDef )  ;", "valueMap . put ( cls ,    vDef )  ;", "addConstants ( vDef ,    va )  ;", "ValueMemberAnalysis [  ]    vmas    =    va . getMembers (  )  ;", "for    ( int   i    =     0  ;    i    <     ( vmas . length )  ;     +  + i )     {", "ValueMemberDefImpl   vmDef ;", "String   vmid    =    va . getMemberId ( vmas [ i ]  . getJavaName (  )  )  ;", "String   vmName    =    vmas [ i ]  . getIDLName (  )  ;", "Class   vmCls    =    vmas [ i ]  . getCls (  )  ;", "TypeCode   typeCode    =    getTypeCode ( vmCls )  ;", "boolean   vmPublic    =    vmas [ i ]  . isPublic (  )  ;", "vmDef    =    new   ValueMemberDefImpl ( vmid ,    vmName ,     \"  1  .  0  \"  ,    typeCode ,    vmPublic ,    vDef ,    impl )  ;", "vDef . add ( vmName ,    vmDef )  ;", "}", "addAttributes ( vDef ,    va )  ;", "return   vDef ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "return   ensurePackageExists ( impl ,     \"  \"  ,    pkgName )  ;", "}", "METHOD_END"], "methodName": ["ensurePackageExists"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  \"  . equals ( remainder )  )", "return    (  ( ModuleDefImpl )     ( c )  )  ;", "int   idx    =    remainder . indexOf (  '  .  '  )  ;", "String   base ;", "if    ( idx    =  =     (  -  1  )  )", "base    =    remainder ;", "else", "base    =    remainder . substring (  0  ,    idx )  ;", "base    =    Util . javaToIDLName ( base )  ;", "if    ( previous . equals (  \"  \"  )  )", "previous    =    base ;", "else", "previous    =     ( previous    +     \"  /  \"  )     +    base ;", "if    ( idx    =  =     (  -  1  )  )", "remainder    =     \"  \"  ;", "else", "remainder    =    remainder . substring (  ( idx    +     1  )  )  ;", "LocalContainer   next    =    null ;", "LocalContained   contained    =     (  ( LocalContained )     ( c .  _ lookup ( base )  )  )  ;", "if    ( contained   instanceof   LocalContainer )", "next    =     (  ( LocalContainer )     ( contained )  )  ;", "else", "if    ( contained    !  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . collisionWhileCreatingPackage (  )  ;", "if    ( next    =  =    null )     {", "String   id    =     (  \" IDL :  \"     +    previous )     +     \"  :  1  .  0  \"  ;", "ModuleDefImpl   m    =    new   ModuleDefImpl ( id ,    base ,     \"  1  .  0  \"  ,    c ,    impl )  ;", "c . add ( base ,    m )  ;", "if    ( idx    =  =     (  -  1  )  )", "return   m ;", "next    =     (  ( LocalContainer )     ( c .  _ lookup ( base )  )  )  ;", "} else", "if    (  ( next . def _ kind (  )  )     !  =     ( dk _ Module )  )", "throw   logging . IIOPLogger . ROOT _ LOGGER . collisionWhileCreatingPackage (  )  ;", "return   ensurePackageExists ( next ,    previous ,    remainder )  ;", "}", "METHOD_END"], "methodName": ["ensurePackageExists"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "impl . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["finishBuild"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidNullClass (  )  ;", "TypeCode   ret    =    constantTypeCodeMap . get ( cls )  ;", "if    ( ret    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . badClassForConstant ( cls . getName (  )  )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["getConstantTypeCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaIoExternalizable )     =  =    null )     {", "final   String   id    =     \" IDL : java / io / Externalizable :  1  .  0  \"  ;", "final   String   name    =     \" Externalizable \"  ;", "final   String   version    =     \"  1  .  0  \"  ;", "ModuleDefImpl   m    =    ensurePackageExists (  \" io \"  )  ;", "TypeCode   typeCode    =    orb . create _ alias _ tc ( id ,    name ,    orb . get _ primitive _ tc ( TCKind . tk _ any )  )  ;", "javaIoExternalizable    =    new   AliasDefImpl ( id ,    name ,    version ,    m ,    typeCode ,    impl )  ;", "m . add ( name ,    javaIoExternalizable )  ;", "}", "return   javaIoExternalizable ;", "}", "METHOD_END"], "methodName": ["getJavaIoExternalizable"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaIoSerializable )     =  =    null )     {", "final   String   id    =     \" IDL : java / io / Serializable :  1  .  0  \"  ;", "final   String   name    =     \" Serializable \"  ;", "final   String   version    =     \"  1  .  0  \"  ;", "ModuleDefImpl   m    =    ensurePackageExists (  \" io \"  )  ;", "TypeCode   typeCode    =    orb . create _ alias _ tc ( id ,    name ,    orb . get _ primitive _ tc ( TCKind . tk _ any )  )  ;", "javaIoSerializable    =    new   AliasDefImpl ( id ,    name ,    version ,    m ,    typeCode ,    impl )  ;", "m . add ( name ,    javaIoSerializable )  ;", "}", "return   javaIoSerializable ;", "}", "METHOD_END"], "methodName": ["getJavaIoSerializable"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaLangString )     =  =    null )     {", "ModuleDefImpl   m    =    ensurePackageExists (  \" omg . CORBA \"  )  ;", "ValueDefImpl   val    =    new   ValueDefImpl (  \" IDL : omg . CORBA / WStringValue :  1  .  0  \"  ,     \" WStringValue \"  ,     \"  1  .  0  \"  ,    m ,    false ,    false ,    new   String [  0  ]  ,    new   String [  0  ]  ,    orb . get _ primitive _ tc ( TCKind . tk _ null )  ,    impl )  ;", "ValueMemberDefImpl   vmdi    =    new   ValueMemberDefImpl (  \" IDL : omg . CORBA / WStringValue . data :  1  .  0  \"  ,     \" data \"  ,     \"  1  .  0  \"  ,    orb . create _ wstring _ tc (  0  )  ,    true ,    val ,    impl )  ;", "val . add (  \" data \"  ,    vmdi )  ;", "m . add (  \" WStringValue \"  ,    val )  ;", "javaLangString    =    val ;", "}", "return   javaLangString ;", "}", "METHOD_END"], "methodName": ["getJavaLangString"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaLang _ Object )     =  =    null )     {", "final   String   id    =     \" IDL : java / lang /  _ Object :  1  .  0  \"  ;", "final   String   name    =     \"  _ Object \"  ;", "final   String   vsion    =     \"  1  .  0  \"  ;", "ModuleDefImpl   m    =    ensurePackageExists (  \" lang \"  )  ;", "TypeCode   typeCode    =    orb . create _ alias _ tc ( id ,    name ,    orb . get _ primitive _ tc ( TCKind . tk _ any )  )  ;", "javaLang _ Object    =    new   AliasDefImpl ( id ,    name ,    vsion ,    m ,    typeCode ,    impl )  ;", "m . add ( name ,    javaLang _ Object )  ;", "}", "return   javaLang _ Object ;", "}", "METHOD_END"], "methodName": ["getJavaLang_Object"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaxRmiCORBAClassDesc )     =  =    null )     {", "ValueAnalysis   va    =    ValueAnalysis . getValueAnalysis ( ClassDesc . class )  ;", "ValueDefImpl   val    =    addValue ( va )  ;", "if    (  !  (  \" RMI : ClassDesc : B 7 C 4 E 3 FC 9 EBDC 3  1  1  : CFBF 0  2 CF 5  2  9  4  1  7  6 B \"  . equals ( val . id (  )  )  )  )", "logging . IIOPLogger . ROOT _ LOGGER . warnClassDescDoesNotConformToSpec (  )  ;", "javaxRmiCORBAClassDesc    =    val ;", "}", "return   javaxRmiCORBAClassDesc ;", "}", "METHOD_END"], "methodName": ["getJavaxRmiCORBAClassDesc"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "return   RepositoryHelper . narrow ( impl . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . invalidNullClass (  )  ;", "TypeCode   ret    =     (  ( TypeCode )     ( typeCodeMap . get ( cls )  )  )  ;", "if    ( ret    =  =    null )     {", "if    ( cls    =  =     ( String . class )  )", "ret    =    getJavaLangString (  )  . type (  )  ;", "else", "if    ( cls    =  =     ( Object . class )  )", "ret    =    getJavaLang _ Object (  )  . type (  )  ;", "else", "if    ( cls    =  =     ( Class . class )  )", "ret    =    getJavaxRmiCORBAClassDesc (  )  . type (  )  ;", "else", "if    ( cls    =  =     ( class )  )", "ret    =    getJavaIoSerializable (  )  . type (  )  ;", "else", "if    ( cls    =  =     ( class )  )", "ret    =    getJavaIoExternalizable (  )  . type (  )  ;", "else    {", "addClass ( cls )  ;", "ret    =     (  ( TypeCode )     ( typeCodeMap . get ( cls )  )  )  ;", "if    ( ret    =  =    null )", "throw   logging . IIOPLogger . ROOT _ LOGGER . unknownTypeCodeForClass ( cls . getName (  )  )  ;", "else", "return   ret ;", "}", "typeCodeMap . put ( cls ,    ret )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["getTypeCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "getTypeCode ( cls )  ;", "}", "METHOD_END"], "methodName": ["mapClass"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "impl . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.InterfaceRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . add ( name ,    contained )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "delegate . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ alias ( id ,    name ,    version ,    original _ type )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ constant ( id ,    name ,    version ,    type ,    value )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ enum ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ exception ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ interface ( id ,    name ,    version ,    base _ interfaces ,    is _ abstract )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ module ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ native ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ struct ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ union ( id ,    name ,    version ,    discriminator _ type ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value ( id ,    name ,    version ,    is _ custom ,    is _ abstract ,    base _ value ,    is _ truncatable ,    abstract _ base _ values ,    supported _ interfaces ,    initializers )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value _ box ( id ,    name ,    version ,    original _ type _ def )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "scription   md    =    new   scription ( name ,    id ,    defined _ in _ id ,    version )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    md )  ;", "return   new   Description ( DefinitionKind . dk _ Module ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . describe _ contents ( limit _ type ,    exclude _ inherited ,    max _ returned _ objs )  ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . shutdown (  )  ;", "super . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ModuleDefImpl"}, {"methodBody": ["METHOD_START", "{", "type _ def    =    IDLTypeImpl . getIDLType ( typeCode ,    repository )  ;", "for    ( int   i    =     0  ;    i    <     ( params . length )  ;     +  + i )     {", "LocalIDLType   lit    =    IDLTypeImpl . getIDLType ( params [ i ]  . type ,    repository )  ;", "if    ( lit    =  =    null )", "throw   new   RuntimeException (  )  ;", "params [ i ]  . type _ def    =    IDLTypeHelper . narrow ( lit . getReference (  )  )  ;", "if    (  ( params [ i ]  . type _ def )     =  =    null )", "throw   new   RuntimeException (  )  ;", "}", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  0  ]  ;", "}", "METHOD_END"], "methodName": ["contexts"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["contexts"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "ExceptionDescription [  ]    exds ;", "exds    =    new   ExceptionDescription [ exceptions . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( exceptions . length )  ;     +  + i )     {", "Description   d    =    exceptions [ i ]  . describe (  )  ;", "exds [ i ]     =    ExceptionDescriptionHelper . extract ( d . value )  ;", "}", "scription   od ;", "od    =    new   scription ( name ,    id ,    defined _ in _ id ,    version ,    typeCode ,    mode (  )  ,    contexts (  )  ,    params (  )  ,    exds )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    od )  ;", "return   new   Description ( DefinitionKind . dk _ Operation ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   exceptions ;", "}", "METHOD_END"], "methodName": ["exceptions"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["exceptions"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   OperationMode . OP _ NORMAL ;", "}", "METHOD_END"], "methodName": ["mode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["mode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   params ;", "}", "METHOD_END"], "methodName": ["params"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["params"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["result"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["result_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["result_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.OperationDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.PrimitiveDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   PrimitiveDefImpl . primitiveTCKindMap . containsKey ( tcKind )  ;", "}", "METHOD_END"], "methodName": ["isPrimitiveTCKind"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.PrimitiveDefImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PrimitiveKind )     ( PrimitiveDefImpl . primitiveTCKindMap . get ( type (  )  . kind (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["kind"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.PrimitiveDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    ( search _ id . startsWith (  \" RMI :  [  \"  )  )", "return    (  ( ValueBoxDef )     ( sequenceIdMap . get ( search _ id )  )  )  ;", "String   name    =    scopedName ( search _ id )  ;", "LocalContained   ret    =     ( name    =  =    null )     ?    null    :     _ lookup ( name )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["_lookup_id"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "super . allDone (  )  ;", "Iterator   iter    =    sequenceMap . values (  )  . iterator (  )  ;", "while    ( iter . hasNext (  )  )", "(  ( SequenceDef )     ( iter . next (  )  )  )  . allDone (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_array"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_fixed"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_sequence"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_string"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_wstring"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "String   s    =     ( anonOidPrefix )     +     ( Long . toString ( n )  )  ;", "return   s . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["getAnonymousObjectId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   getAnonymousObjectId (  (  ( nextPOAId )  +  +  )  )  ;", "}", "METHOD_END"], "methodName": ["getNextObjectId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( byte [  ]  )     ( oid . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getObjectId"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   oidPrefix ;", "}", "METHOD_END"], "methodName": ["getObjectIdPrefix"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( SequenceDefImpl )     ( sequenceMap . get ( typeCode )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSequenceImpl"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["get_canonical_typecode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["get_primitive"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "LocalContained   c    =     _ lookup _ id ( search _ id )  ;", "if    ( c    =  =    null )", "return   null ;", "return   ContainedHelr . narrow ( c . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["lookup_id"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "sequenceIdMap . put ( id ,    valueBox )  ;", "sequenceMap . put ( typeCode ,    sequence )  ;", "}", "METHOD_END"], "methodName": ["putSequenceImpl"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "if    ( id    =  =    null )", "return   null ;", "if    ( id . startsWith (  \" IDL :  \"  )  )     {", "if    (  (  \" IDL : omg .  / CORBA / Object :  1  .  0  \"  . equals ( id )  )     |  |     (  \" IDL : omg .  / CORBA / ValueBase :  1  .  0  \"  . equals ( id )  )  )", "return   null ;", "int   idx 2     =    id . indexOf (  '  :  '  ,     4  )  ;", "if    ( idx 2     =  =     (  -  1  )  )", "return   null ;", "String   base    =    id . substring (  4  ,    id . indexOf (  '  :  '  ,     4  )  )  ;", "if    ( base . startsWith (  \" omg .  \"  )  )", "base    =     \"  / omg \"     +     ( base . substring (  7  )  )  ;", "if    ( base . startsWith (  \" w 3 c .  \"  )  )", "base    =     \"  / w 3 c \"     +     ( base . substring (  7  )  )  ;", "StringBuffer   b    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <     ( base . length (  )  )  ;     +  + i )     {", "char   c    =    base . charAt ( i )  ;", "if    ( c    !  =     '  /  '  )", "b . append ( c )  ;", "else", "b . append (  \"  :  :  \"  )  ;", "}", "return   b . toString (  )  ;", "} else", "if    ( id . startsWith (  \" RMI :  \"  )  )     {", "int   idx 2     =    id . indexOf (  '  :  '  ,     4  )  ;", "if    ( idx 2     =  =     (  -  1  )  )", "return   null ;", "String   base    =    id . substring (  4  ,    id . indexOf (  '  :  '  ,     4  )  )  ;", "StringBuffer   b    =    new   StringBuffer (  )  ;", "for    ( int   i    =     0  ;    i    <     ( base . length (  )  )  ;     +  + i )     {", "char   c    =    base . charAt ( i )  ;", "if    ( c    !  =     '  .  '  )", "b . append ( c )  ;", "else", "b . append (  \"  :  :  \"  )  ;", "}", "return   b . toString (  )  ;", "} else", "return   null ;", "}", "METHOD_END"], "methodName": ["scopedName"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "for    ( long   i    =     1  ;    i    <     ( nextPOAId )  ;    i +  +  )     {", "try    {", "getPOA (  )  . deactivate _ object ( getAnonymousObjectId ( i )  )  ;", "}    catch    ( UserException   ex )     {", "IIOPLoggeOOT _ LOGGER . warnCouldNotDeactivateAnonIRObject ( ex )  ;", "}", "}", "super . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.RepositoryImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "element _ type _ def    =    IDLType . getIDLType ( type (  )  . content _ type (  )  ,    repository )  ;", "}    catch    ( BadKind   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . badKindForTypeCode ( type (  )  . kind (  )  . value (  )  )  ;", "}", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   ty (  )  . length (  )  ;", "}    catch    ( BadKind   ex )     {", "throw   new   RuntimeException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["bound"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["bound"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   ty (  )  . content _ ty (  )  ;", "}    catch    ( BadKind   ex )     {", "throw   new   RuntimeException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["element_type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( element _ type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["element_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["element_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.SequenceDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "TypeDescription   td    =    new   TypeDescription ( name ,    id ,    defined _ in _ id ,    version ,    typeCode )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "TypeDescriptionHelper . insert ( any ,    td )  ;", "return   new   Description ( DefinitionKind . dk _  ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.TypedefDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.TypedefDefImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "original _ type _ def    =    IDLType . getIDLType ( type (  )  . content _ type (  )  ,    repository )  ;", "}    catch    ( BadKind   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . badKindForTypeCode ( type (  )  . kind (  )  . value (  )  )  ;", "}", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueBoxDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueBoxDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( original _ type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["original_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueBoxDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["original_type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueBoxDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["_lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate .  _ lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["_lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   abstract _ base _ valuetypes _ ref ;", "}", "METHOD_END"], "methodName": ["abstract_base_values"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["abstract_base_values"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . add ( name ,    contained )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "getReference (  )  ;", "delegate . allDone (  )  ;", "if    (  (  ( baseValueTypeCode )     !  =    null )     &  &     (  ( baseValueTypeCode . kind (  )  )     !  =     ( TCKind . tk _ null )  )  )     {", "try    {", "baseValue    =    baseValueTypeCode . id (  )  ;", "}    catch    ( BadKind   ex )     {", "throw   IIOPLogger . ROOT _ LOGGER . badKindForSuperValueType ( id (  )  )  ;", "}", "Contained   c    =    repository . lookup _ id ( baseValue )  ;", "base _ value _ ref    =    Helper . narrow ( c )  ;", "} else", "baseValue    =     \" IDL : omg . org / CORBA / ValueBase :  1  .  0  \"  ;", "supported _ interfaces _ ref    =    new   InterfaceDef [ supported _ interfaces . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( supported _ interfaces . length )  ;     +  + i )     {", "InterfaceDef   iDef    =    InterfaceDefHelper . narrow ( repository . lookup _ id ( supported _ interfaces [ i ]  )  )  ;", "if    ( iDef    =  =    null )", "throw   IIOPLogger . ROOT _ LOGGER . errorResolvingRefToImplementedInterface ( id (  )  ,    supported _ interfaces [ i ]  )  ;", "supported _ interfaces _ ref [ i ]     =    iDef ;", "}", "abstract _ base _ valuetypes _ ref    =    new    [ abstract _ base _ valuetypes . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( abstract _ base _ valuetypes . length )  ;     +  + i )     {", "vDef    =    Helper . narrow ( repository . lookup _ id ( abstract _ base _ valuetypes [ i ]  )  )  ;", "if    ( vDef    =  =    null )", "throw   IIOPLogger . ROOT _ LOGGER . errorResolvingRefToAbstractValuetype ( id (  )  ,    abstract _ base _ valuetypes [ i ]  )  ;", "abstract _ base _ valuetypes _ ref [ i ]     =    vDef ;", "}", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   base _ value _ ref ;", "}", "METHOD_END"], "methodName": ["base_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["base_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . contents ( limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ alias ( id ,    name ,    version ,    original _ type )  ;", "}", "METHOD_END"], "methodName": ["create_alias"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_attribute"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ constant ( id ,    name ,    version ,    type ,    value )  ;", "}", "METHOD_END"], "methodName": ["create_constant"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ enum ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_enum"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ exception ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_exception"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ interface ( id ,    name ,    version ,    base _ interfaces ,    is _ abstract )  ;", "}", "METHOD_END"], "methodName": ["create_interface"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ module ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_module"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ native ( id ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["create_native"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_operation"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ struct ( id ,    name ,    version ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_struct"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ union ( id ,    name ,    version ,    discriminator _ type ,    members )  ;", "}", "METHOD_END"], "methodName": ["create_union"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value ( id ,    name ,    version ,    is _ custom ,    is _ abstract ,    base _ value ,    is _ truncatable ,    abstract _ base _ values ,    supported _ interfaces ,    initializers )  ;", "}", "METHOD_END"], "methodName": ["create_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . create _ value _ box ( id ,    name ,    version ,    original _ type _ def )  ;", "}", "METHOD_END"], "methodName": ["create_value_box"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["create_value_member"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "scription   md    =    new   scription ( name ,    id ,    is _ abstract ,    is _ custom ,    defined _ in _ id ,    version ,    supported _ interfaces ,    abstract _ base _ valuetypes ,    false ,    baseValue )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "scriptionHelper . insert ( any ,    md )  ;", "return   new   Description ( DefinitionKind . dk _ Value ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . describe _ contents ( limit _ type ,    exclude _ inherited ,    max _ returned _ objs )  ;", "}", "METHOD_END"], "methodName": ["describe_contents"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fullValueDescription )     !  =    null )", "return   fullValueDescription ;", "OperationDescription [  ]    operations    =    new   OperationDescription [  0  ]  ;", "AttributeDescription [  ]    attributes    =    new   AttributeDescription [  0  ]  ;", "String   defined _ in _ id    =     \" IDL : Global :  1  .  0  \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "fullValueDescription    =    new   FullValueDescription ( name ,    id ,    is _ abstract ,    is _ custom ,    defined _ in _ id ,    version ,    operations ,    attributes ,    getValueMembers (  )  ,    new   Initializer [  0  ]  ,    supported _ interfaces ,    abstract _ base _ valuetypes ,    false ,    baseValue ,    typeCode )  ;", "return   fullValueDescription ;", "}", "METHOD_END"], "methodName": ["describe_value"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valueMembers )     !  =    null )", "return   valueMembers ;", "LocalContained [  ]    c    =     _ contents ( DefinitionKind . dk _ ValueMember ,    false )  ;", "valueMembers    =    new   ValueMember [ c . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( c . length )  ;     +  + i )     {", "ValueMember   vmdi    =     (  ( ValueMember )     ( c [ i ]  )  )  ;", "valueMembers [ i ]     =    new   ValueMember ( vmdi . name (  )  ,    vmdi . id (  )  ,     (  ( LocalContained )     ( vmdi . defined _ in )  )  . id (  )  ,    vmdi . version (  )  ,    vmdi . type (  )  ,    vmdi . type _ def (  )  ,    vmdi . access (  )  )  ;", "}", "return   valueMembers ;", "}", "METHOD_END"], "methodName": ["getValueMembers"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "LocalContained [  ]    c    =     _ contents ( DefinitionKind . dk _ ValueMember ,    false )  ;", "ValueMember [  ]    vms    =    new   ValueMember [ c . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( c . length )  ;     +  + i )     {", "ValueMember   vmdi    =     (  ( ValueMember )     ( c [ i ]  )  )  ;", "vms [ i ]     =    new   ValueMember ( vmdi . name (  )  ,    null ,    null ,    null ,    vmdi . type (  )  ,    null ,    vmdi . access (  )  )  ;", "}", "return   vms ;", "}", "METHOD_END"], "methodName": ["getValueMembersForTypeCode"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   Initializer [  0  ]  ;", "}", "METHOD_END"], "methodName": ["initializers"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["initializers"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   id (  )  . equals ( id )  ;", "}", "METHOD_END"], "methodName": ["is_a"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   is _ abstract ;", "}", "METHOD_END"], "methodName": ["is_abstract"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["is_abstract"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   is _ custom ;", "}", "METHOD_END"], "methodName": ["is_custom"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["is_custom"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["is_truncatable"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["is_truncatable"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup ( search _ name )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   delegate . lookup _ name ( search _ name ,    levels _ to _ search ,    limit _ type ,    exclude _ inherited )  ;", "}", "METHOD_END"], "methodName": ["lookup_name"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "delegate . shutdown (  )  ;", "sur . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   supported _ interfaces _ ref ;", "}", "METHOD_END"], "methodName": ["supported_interfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["supported_interfaces"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( typeCode )     =  =    null )     {", "short   modifier    =    VM _ NONE . value ;", "if    ( is _ custom )", "modifier    =    value ;", "else", "if    ( is _ abstract )", "modifier    =    value ;", "typeCode    =    getORB (  )  . create _ value _ tc ( id ,    name ,    modifier ,    baseTypeCode ,    getMembersForTypeCode (  )  )  ;", "}", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   publicMember    ?    PUBLIC _ MEMBER . value    :    PRIVATE _ MEMBER . value ;", "}", "METHOD_END"], "methodName": ["access"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["access"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "type _ def    =    IDLTypeImpl . getIDLType ( typeCode ,    repository )  ;", "getReference (  )  ;", "}", "METHOD_END"], "methodName": ["allDone"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "String   defined _ in _ id    =     \" IR \"  ;", "if    (  ( defined _ in )    instanceof   ContainedOperations )", "defined _ in _ id    =     (  ( ContainedOperations )     ( defined _ in )  )  . id (  )  ;", "d    =    new    ( name ,    id ,    defined _ in _ id ,    version ,    typeCode ,    type _ def (  )  ,    access (  )  )  ;", "Any   any    =    getORB (  )  . create _ any (  )  ;", "Helper . insert ( any ,    d )  ;", "return   new   Description ( DefinitionKind . dk _  ,    any )  ;", "}", "METHOD_END"], "methodName": ["describe"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ref )     =  =    null )     {", "ref    =    narrow ( servantToReference ( newPOATie ( this )  )  )  ;", "}", "return   ref ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   typeCode ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "return   IDLTypeHelper . narrow ( type _ def . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . cannotChangeRMIIIOPMapping (  )  ;", "}", "METHOD_END"], "methodName": ["type_def"], "fileName": "org.wildfly.iiop.openjdk.rmi.ir.ValueMemberDefImpl"}, {"methodBody": ["METHOD_START", "{", "if    ( clz    =  =     ( Boolean . TYPE )  )     {", "return    \" Z \"  ;", "} else", "if    ( clz    =  =     ( Byte . TYPE )  )     {", "return    \" B \"  ;", "} else", "if    ( clz    =  =     ( Character . TYPE )  )     {", "return    \" C \"  ;", "} else", "if    ( clz    =  =     ( Double . TYPE )  )     {", "return    \" D \"  ;", "} else", "if    ( clz    =  =     ( Float . TYPE )  )     {", "return    \" F \"  ;", "} else", "if    ( clz    =  =     ( Integer . TYPE )  )     {", "return    \" I \"  ;", "} else", "if    ( clz    =  =     ( Long . TYPE )  )     {", "return    \" J \"  ;", "} else", "if    ( clz    =  =     ( Short . TYPE )  )     {", "return    \" S \"  ;", "} else", "if    ( clz    =  =     ( Void . TYPE )  )     {", "return    \" V \"  ;", "} else", "if    ( clz    =  =     ( String . class )  )     {", "return    \" G \"  ;", "} else", "if    ( RmiIdlUtil . isRMIIDLRemoteInterface ( clz )  )     {", "return    \" R \"     +     ( clz . getName (  )  )  ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return    \" M \"  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return    \" N \"     +     ( clz . getName (  )  )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return    \" L \"     +     ( clz . getName (  )  )  ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return    \" E \"  ;", "} else", "if    ( RmiIdlUtil . isAbstractInterface ( clz )  )     {", "return    \" A \"  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return    \" L \"     +     ( clz . getName (  )  )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return    \" X \"  ;", "} else", "if    ( clz    =  =     ( Object . class )  )     {", "return    \" O \"  ;", "} else    {", "return    \" L \"     +     ( clz . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["abbrevFor"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.CDRStream"}, {"methodBody": ["METHOD_START", "{", "if    ( clz    =  =     ( Boolean . TYPE )  )     {", "return   CDRStream . BooleanReader . instance ;", "} else", "if    ( clz    =  =     ( Byte . TYPE )  )     {", "return   CDRStream . ByteReader . instance ;", "} else", "if    ( clz    =  =     ( Character . TYPE )  )     {", "return   CDRStream . CharReader . instance ;", "} else", "if    ( clz    =  =     ( Double . TYPE )  )     {", "return   CDRStream . DoubleReader . instance ;", "} else", "if    ( clz    =  =     ( Float . TYPE )  )     {", "return   CDRStream . FloatReader . instance ;", "} else", "if    ( clz    =  =     ( Integer . TYPE )  )     {", "return   CDRStream . IntReader . instance ;", "} else", "if    ( clz    =  =     ( Long . TYPE )  )     {", "return   CDRStream . LongReader . instance ;", "} else", "if    ( clz    =  =     ( Short . TYPE )  )     {", "return   CDRStream . ShortReader . instance ;", "} else", "if    ( clz    =  =     ( Void . TYPE )  )     {", "return   null ;", "} else", "if    ( clz    =  =     ( String . class )  )     {", "return   CDRStream . StringReader . instance ;", "} else", "if    ( RmiIdlUtil . isRMIIDLRemoteInterface ( clz )  )     {", "return   new   CDRStream . RemoteReader ( clz )  ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return   CDRStream . CorbaObjectReader . instance ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . IdlInterfaceReader ( clz )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . ValuetypeReader ( clz )  ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return   CDRStream . SerializableReader . instance ;", "} else", "if    ( RmiIdlUtil . isAbstractInterface ( clz )  )     {", "return   CDRStream . AbstractInterfaceReader . instance ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . ValuetypeReader ( clz )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   CDRStream . ExternalizableReader . instance ;", "} else", "if    ( clz    =  =     ( Object . class )  )     {", "return   CDRStream . ObjectReader . instance ;", "} else    {", "return   new   CDRStream . ValuetypeReader ( clz )  ;", "}", "}", "METHOD_END"], "methodName": ["readerFor"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.CDRStream"}, {"methodBody": ["METHOD_START", "{", "switch    ( s . charAt (  0  )  )     {", "case    ' A '     :", "return    . AbstractInterfaceReader . instance ;", "case    ' B '     :", "return    . ByteReader . instance ;", "case    ' C '     :", "return    . CharReader . instance ;", "case    ' D '     :", "return    . DoubleReader . instance ;", "case    ' E '     :", "return    . SerializableReader . instance ;", "case    ' F '     :", "return    . FloatReader . instance ;", "case    ' G '     :", "return    . StringReader . instance ;", "case    ' I '     :", "return    . IntReader . instance ;", "case    ' J '     :", "return    . LongReader . instance ;", "case    ' L '     :", "try    {", "return   new    . ValuetypeReader ( Class . forName ( s . substring (  1  )  ,    true ,    cl )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorLoadingClass ( s . substring (  1  )  ,    e )  ;", "}", "case    ' M '     :", "return    . CorbaObjectReader . instance ;", "case    ' N '     :", "try    {", "return   new    . IdlInterfaceReader ( cl . loadClass ( s . substring (  1  )  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorLoadingClass ( s . substring (  1  )  ,    e )  ;", "}", "case    ' O '     :", "return    . ObjectReader . instance ;", "case    ' R '     :", "try    {", "return   new    . RemoteReader ( cl . loadClass ( s . substring (  1  )  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorLoadingClass ( s . substring (  1  )  ,    e )  ;", "}", "case    ' S '     :", "return    . ShortReader . instance ;", "case    ' V '     :", "return   null ;", "case    ' X '     :", "return    . ExternalizableReader . instance ;", "case    ' Z '     :", "return    . BooleanReader . instance ;", "default    :", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["readerFor"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.CDRStream"}, {"methodBody": ["METHOD_START", "{", "if    ( clz    =  =     ( Boolean . TYPE )  )     {", "return   CDRStream . BooleanWriter . instance ;", "} else", "if    ( clz    =  =     ( Byte . TYPE )  )     {", "return   CDRStream . ByteWriter . instance ;", "} else", "if    ( clz    =  =     ( Character . TYPE )  )     {", "return   CDRStream . CharWriter . instance ;", "} else", "if    ( clz    =  =     ( Double . TYPE )  )     {", "return   CDRStream . DoubleWriter . instance ;", "} else", "if    ( clz    =  =     ( Float . TYPE )  )     {", "return   CDRStream . FloatWriter . instance ;", "} else", "if    ( clz    =  =     ( Integer . TYPE )  )     {", "return   CDRStream . IntWriter . instance ;", "} else", "if    ( clz    =  =     ( Long . TYPE )  )     {", "return   CDRStream . LongWriter . instance ;", "} else", "if    ( clz    =  =     ( Short . TYPE )  )     {", "return   CDRStream . ShortWriter . instance ;", "} else", "if    ( clz    =  =     ( String . class )  )     {", "return   CDRStream . StringWriter . instance ;", "} else", "if    ( clz    =  =     ( Void . TYPE )  )     {", "return   null ;", "} else", "if    ( RmiIdlUtil . isRMIIDLRemoteInterface ( clz )  )     {", "return   CDRStream . RemoteWriter . instance ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return   CDRStream . CorbaObjectWriter . instance ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . IdlInterfaceWriter ( clz )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . ValuetypeWriter ( clz )  ;", "} else", "if    ( clz    =  =     ( class )  )     {", "return   CDRStream . SerializableWriter . instance ;", "} else", "if    ( RmiIdlUtil . isAbstractInterface ( clz )  )     {", "return   CDRStream . AbstractInterfaceWriter . instance ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   new   CDRStream . ValuetypeWriter ( clz )  ;", "} else", "if    ( isAssignableFrom ( clz )  )     {", "return   CDRStream . ExternalizableWriter . instance ;", "} else", "if    ( clz    =  =     ( Object . class )  )     {", "return   CDRStream . ObjectWriter . instance ;", "} else    {", "return   new   CDRStream . ValuetypeWriter ( clz )  ;", "}", "}", "METHOD_END"], "methodName": ["writerFor"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.CDRStream"}, {"methodBody": ["METHOD_START", "{", "switch    ( s . charAt (  0  )  )     {", "case    ' A '     :", "return    . AbstractInterfaceWriter . instance ;", "case    ' B '     :", "return    . ByteWriter . instance ;", "case    ' C '     :", "return    . CharWriter . instance ;", "case    ' D '     :", "return    . DoubleWriter . instance ;", "case    ' E '     :", "return    . SerializableWriter . instance ;", "case    ' F '     :", "return    . FloatWriter . instance ;", "case    ' G '     :", "return    . StringWriter . instance ;", "case    ' I '     :", "return    . IntWriter . instance ;", "case    ' J '     :", "return    . LongWriter . instance ;", "case    ' L '     :", "try    {", "return   new    . ValuetypeWriter ( Class . forName ( s . substring (  1  )  ,    true ,    cl )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorLoadingClass ( s . substring (  1  )  ,    e )  ;", "}", "case    ' M '     :", "return    . CorbaObjectWriter . instance ;", "case    ' N '     :", "try    {", "return   new    . IdlInterfaceWriter ( cl . loadClass ( s . substring (  1  )  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorLoadingClass ( s . substring (  1  )  ,    e )  ;", "}", "case    ' O '     :", "return    . ObjectWriter . instance ;", "case    ' R '     :", "return    . RemoteWriter . instance ;", "case    ' S '     :", "return    . ShortWriter . instance ;", "case    ' V '     :", "return   null ;", "case    ' X '     :", "return    . ExternalizableWriter . instance ;", "case    ' Z '     :", "return    . BooleanWriter . instance ;", "default    :", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["writerFor"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.CDRStream"}, {"methodBody": ["METHOD_START", "{", "return   m ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.SkeletonStrategy"}, {"methodBody": ["METHOD_START", "{", "return    ( retvalWriter )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isNonVoid"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.SkeletonStrategy"}, {"methodBody": ["METHOD_START", "{", "int   len    =    paramReaders . length ;", "Object [  ]    params    =    new   Object [ len ]  ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "params [ i ]     =    paramReaders [ i ]  . read ( in )  ;", "}", "return   params ;", "}", "METHOD_END"], "methodName": ["readParams"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.SkeletonStrategy"}, {"methodBody": ["METHOD_START", "{", "int   len    =    excepWriters . length ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "if    ( excepWriters [ i ]  . getExceptionClass (  )  . isInstance ( e )  )     {", "excepWriters [ i ]  . write ( out ,    e )  ;", "return ;", "}", "}", "throw   new   UnknownException ( e )  ;", "}", "METHOD_END"], "methodName": ["writeException"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.SkeletonStrategy"}, {"methodBody": ["METHOD_START", "{", "retvalWriter . write ( out ,    RemoteObjectSubstitutionManager . writeReplaceRemote ( retVal )  )  ;", "}", "METHOD_END"], "methodName": ["writeRetval"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.SkeletonStrategy"}, {"methodBody": ["METHOD_START", "{", "if    (  ( retvalRemoteInterface )     =  =    null )", "return   obj ;", "else", "return   narrow ( obj ,    retvalRemoteInterface )  ;", "}", "METHOD_END"], "methodName": ["convertLocalRetval"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "return   new   StubStrategy ( paramTypes ,    excepIds ,    excepTypes ,    retvalType ,    cl )  ;", "}", "METHOD_END"], "methodName": ["forMethod"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "Iterator < Class <  ?  >  >    iterator    =    exceptionList . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "if    (  (  ( Class <  ?  >  )     ( iterator . next (  )  )  )  . isInstance ( t )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDeclaredException"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "return    ( retvalReader )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isNonVoid"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "StubStrategy . ExceptionReader   exceptionReader    =     (  ( StubStrategy . ExceptionReader )     ( exceptionMap . get ( id )  )  )  ;", "if    ( exceptionReader    =  =    null )     {", "return   new   UnexpectedException ( id )  ;", "} else    {", "return   exceptionReader . read ( in )  ;", "}", "}", "METHOD_END"], "methodName": ["readException"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "return   retvalReader . read ( in )  ;", "}", "METHOD_END"], "methodName": ["readRetval"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "int   len    =    params . length ;", "if    ( len    !  =     ( paramWriters . length )  )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorMaingParams (  )  ;", "}", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "Object   param    =    params [ i ]  ;", "if    ( param   instanceof   PortableRemoteObject )     {", "try    {", "param    =    PortableRemoteObject . toStub (  (  ( Remote )     ( param )  )  )  ;", "}    catch    ( NoSuchObjectException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "paramWriters [ i ]  . write ( out ,    RemoteObjectSubstitutionManager . writeReplaceRemote ( param )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeParams"], "fileName": "org.wildfly.iiop.openjdk.rmi.marshal.strategy.StubStrategy"}, {"methodBody": ["METHOD_START", "{", "this . initSSLContext (  )  ;", "SSLServer   server    =    this . sslContext . getServer (  )  ;", "SSLServerSocket   serverSocket    =     (  ( SSLServerSocket )     ( server . createServerSocket ( port ,    backlog ,    inetAddress )  )  )  ;", "if    (  ( this . jsseSecurityDomain . getProtocols (  )  )     !  =    null )     {", "serverSocket . setEnabledProtocols ( this . jsseSecurityDomain . getProtocols (  )  )  ;", "}", "if    (  ( this . jsseSecurityDomain . getCipherSuites (  )  )     !  =    null )     {", "serverSocket . setEnabledCipherSuites ( this . jsseSecurityDomain . getCipherSuites (  )  )  ;", "}", "if    (  ( this . jsseSecurityDomain . isClientAuth (  )  )     |  |     ( this . require _ mutual _ auth )  )     {", "serverSocket . setNeedClientAuth ( true )  ;", "} else    {", "serverSocket . setWantClientAuth ( this . request _ mutual _ auth )  ;", "}", "return   serverSocket ;", "}", "METHOD_END"], "methodName": ["createSSLServerSocket"], "fileName": "org.wildfly.iiop.openjdk.security.LegacySSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "this . initSSLContext (  )  ;", "InetAddress   address    =    InetAddress . getByName ( host )  ;", "socketFactory    =    this . sslContext . getSocketFactory (  )  ;", "SSLSocket   socket    =     (  ( SSLSocket )     ( socketFactory . createSocket ( address ,    port )  )  )  ;", "if    (  ( this . jsseSecurityDomain . getProtocols (  )  )     !  =    null )     {", "socket . setEnabledProtocols ( this . jsseSecurityDomain . getProtocols (  )  )  ;", "}", "if    (  ( this . jsseSecurityDomain . getCipherSuites (  )  )     !  =    null )     {", "socket . setEnabledCipherSuites ( this . jsseSecurityDomain . getCipherSuites (  )  )  ;", "}", "socket . setNeedClientAuth ( this . jsseSecurityDomain . isClientAuth (  )  )  ;", "return   socket ;", "}", "METHOD_END"], "methodName": ["createSSLSocket"], "fileName": "org.wildfly.iiop.openjdk.security.LegacySSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . sslContext )     !  =    null )     {", "return ;", "}", "this . sslContext    =    Util . forDomain ( this . jsseSDomain )  ;", "}", "METHOD_END"], "methodName": ["initSSLContext"], "fileName": "org.wildfly.iiop.openjdk.security.LegacySSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "LegacySSLSocketFactory . securityDomain    =    securityDomain ;", "}", "METHOD_END"], "methodName": ["setSecurityDomain"], "fileName": "org.wildfly.iiop.openjdk.security.LegacySSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "SSLServerSocketFactory   serverSocketFactory    =    this . serverSSLContext . getServerSocketFactory (  )  ;", "return   serverSocketFactory . createServerSocket ( port ,    backlog ,    inetAddress )  ;", "}", "METHOD_END"], "methodName": ["createSSLServerSocket"], "fileName": "org.wildfly.iiop.openjdk.security.SSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "InetAddress   address    =    InetAddress . getByName ( host )  ;", "ssl   socketFactory    =    this . clientSSLContext . getSocketFactory (  )  ;", "return   socketFactory . createSocket ( address ,    port )  ;", "}", "METHOD_END"], "methodName": ["createSSLSocket"], "fileName": "org.wildfly.iiop.openjdk.security.SSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "return   CurrentServiceContainer . getServiceContainer (  )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.wildfly.iiop.openjdk.security.SSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "SSLSocketFactory . clientSSLContextName    =    clientSSLContextName ;", "}", "METHOD_END"], "methodName": ["setClientSSLContextName"], "fileName": "org.wildfly.iiop.openjdk.security.SSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "SSLSocketFactory . serverSSLContextName    =    serverSSLContextName ;", "}", "METHOD_END"], "methodName": ["setServerSSLContextName"], "fileName": "org.wildfly.iiop.openjdk.security.SSLSocketFactory"}, {"methodBody": ["METHOD_START", "{", "ServerSocketChannel   serverSocketChannel    =    null ;", "ServerSocket   serverSocket    =    null ;", "if    ( orb . getORBData (  )  . acceptorSocketType (  )  . equals ( ORBConstants . SOCKETCHANNEL )  )     {", "serverSocketChannel    =    ServerSocketChannel . open (  )  ;", "serverSocket    =    serverSocketChannel . socket (  )  ;", "} else    {", "serverSocket    =    new   ServerSocket (  )  ;", "}", "serverSocket . bind ( inetSocketAddress )  ;", "return   serverSocket ;", "}", "METHOD_END"], "methodName": ["createServerSocket"], "fileName": "org.wildfly.iiop.openjdk.security.SocketFactoryBase"}, {"methodBody": ["METHOD_START", "{", "SocketChannel   socketChannel    =    null ;", "Socket   socket    =    null ;", "if    ( orb . getORBData (  )  . connectionSocketType (  )  . equals ( ORBConstants . SOCKETCHANNEL )  )     {", "socketChannel    =    SocketChannel . open ( inetSocketAddress )  ;", "socket    =    socketChannel . socket (  )  ;", "} else    {", "socket    =    new   Socket ( inetSocketAddress . getHostName (  )  ,    inetSocketAddress . getPort (  )  )  ;", "}", "socket . setTcpNoDelay ( true )  ;", "return   socket ;", "}", "METHOD_END"], "methodName": ["createSocket"], "fileName": "org.wildfly.iiop.openjdk.security.SocketFactoryBase"}, {"methodBody": ["METHOD_START", "{", "socket . setTcpNoDelay ( true )  ;", "}", "METHOD_END"], "methodName": ["setAcceptedSocketOptions"], "fileName": "org.wildfly.iiop.openjdk.security.SocketFactoryBase"}, {"methodBody": ["METHOD_START", "{", "String   username    =    null ;", "if    (  ( get (  )  )     !  =    null )", "username    =    get (  )  . getName (  )  ;", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.wildfly.iiop.openjdk.security.TrustedIdentityTokenLoginModule"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( fis    !  =    nl )     {", "fis . close (  )  ;", "}", "}    catch    ( Exception   e )     {", "}", "}", "METHOD_END"], "methodName": ["safeClose"], "fileName": "org.wildfly.iiop.openjdk.security.TrustedIdentityTokenLoginModule"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( credential . get _ incoming _ principal _ name (  )  )     =  =    null )     |  |     (  ( credential . get _ incoming _ principal _ name (  )  . length )     =  =     0  )  )     {", "throw   new   LoginException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateCredential"], "fileName": "org.wildfly.iiop.openjdk.security.TrustedIdentityTokenLoginModule"}, {"methodBody": ["METHOD_START", "{", "SSLContext   sslCtx    =    null ;", "try    {", "sslCtx    =    SSLContext . getInstance (  \" TLS \"  )  ;", "KeyManager [  ]    keyManagers    =    Domain . getKeyManagers (  )  ;", "if    ( keyManagers    =  =    null )", "throw   IIOPLogger . ROOT _ LOGGER . errorObtainingKeyManagers ( Domain . getSecurityDomain (  )  )  ;", "TrustManager [  ]    trustManagers    =    Domain . getTrustManagers (  )  ;", "sslCtx . init ( keyManagers ,    trustManagers ,    null )  ;", "return   sslCtx ;", "}    catch    ( NoSuchAlgorithmException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . failedToGetSSLContext ( e )  ;", "}    catch    ( KeyManagementException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . failedToGetSSLContext ( e )  ;", "}    catch    ( SecurityException   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . failedToGetSSLContext ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["forDomain"], "fileName": "org.wildfly.iiop.openjdk.security.Util"}, {"methodBody": ["METHOD_START", "{", "return   this . namingPOAInjector ;", "}", "METHOD_END"], "methodName": ["getNamingPOAInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaNamingService"}, {"methodBody": ["METHOD_START", "{", "return   this . orbInjector ;", "}", "METHOD_END"], "methodName": ["getORBInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaNamingService"}, {"methodBody": ["METHOD_START", "{", "return   this . rootPOAInjector ;", "}", "METHOD_END"], "methodName": ["getRootPOAInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaNamingService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentContainer . getContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ORB )     ( CorbaORBService . currentServiceContainer (  )  . getRequiredService ( CorbaORBService . SERVICE _ NAME )  . getValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCurrent"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "return   executorInjector ;", "}", "METHOD_END"], "methodName": ["getExecutorInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "return   this . iiopSSLSocketBindingInjector ;", "}", "METHOD_END"], "methodName": ["getIIOPSSLSocketBindingInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "return   this . iiopSocketBindingInjector ;", "}", "METHOD_END"], "methodName": ["getIIOPSocketBindingInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "return   CorbaORBService . properties . getProperty ( key )  ;", "}", "METHOD_END"], "methodName": ["getORBProperty"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaORBService"}, {"methodBody": ["METHOD_START", "{", "List < Policy >    policies    =    new   ArrayList < Policy >  (  )  ;", "if    (  ( this . idAssignmentPolicyValue )     !  =    null )", "policies . add ( poa . create _ id _ assignment _ policy ( this . idAssignmentPolicyValue )  )  ;", "if    (  ( this . idUniquenessPolicyValue )     !  =    null )", "policies . add ( poa . create _ id _ uniqueness _ policy ( this . idUniquenessPolicyValue )  )  ;", "if    (  ( this . implicitActivationPolicyValue )     !  =    null )", "policies . add ( poa . create _ implicit _ activation _ policy ( this . implicitActivationPolicyValue )  )  ;", "if    (  ( this . lifespanPolicyValue )     !  =    null )", "policies . add ( poa . create _ lifespan _ policy ( this . lifespanPolicyValue )  )  ;", "if    (  ( this . requestProcessingPolicyValue )     !  =    null )", "policies . add ( poa . create _ request _ processing _ policy ( this . requestProcessingPolicyValue )  )  ;", "if    (  ( thisantRetentionPolicyValue )     !  =    null )", "policies . add ( poa . createant _ retention _ policy ( thisantRetentionPolicyValue )  )  ;", "if    (  ( this . threadPolicyValue )     !  =    null )", "policies . add ( poa . create _ thread _ policy ( this . threadPolicyValue )  )  ;", "return   policies . toArray ( new   Policy [ policies . size (  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["createPolicies"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaPOAService"}, {"methodBody": ["METHOD_START", "{", "return   this . orbInjector ;", "}", "METHOD_END"], "methodName": ["getORBInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaPOAService"}, {"methodBody": ["METHOD_START", "{", "return   this . parentPOAInjector ;", "}", "METHOD_END"], "methodName": ["getParentPOAInjector"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaPOAService"}, {"methodBody": ["METHOD_START", "{", "final   BinderService   binderService    =    new   BinderService ( contextName )  ;", "target . addService ( ContextNames . buildServiceName ( JBOSS _ CONTEXT _ SERVICE _ NAME ,    contextName )  ,    binderService )  . addDependency ( JBOSS _ CONTEXT _ SERVICE _ NAME ,    ServiceBasedNamingStore . class ,    binderService . getNamingStoreInjector (  )  )  . addInjection ( binderService . getManagedObjectInjector (  )  ,    new   ValueManagedReferenceFactory ( Values . immediateValue ( value )  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["bindObject"], "fileName": "org.wildfly.iiop.openjdk.service.CorbaServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentContainer . getContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.wildfly.iiop.openjdk.service.IORSecConfigMetaDataService"}, {"methodBody": ["METHOD_START", "{", "return    (  ( IORSecurityConfigMetaData )     ( IORSecConfigMetaDataService . currentServiceContainer (  )  . getRequiredService ( IORSecConfigMetaDataService . SERVICE _ NAME )  . getValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCurrent"], "fileName": "org.wildfly.iiop.openjdk.service.IORSecConfigMetaDataService"}, {"methodBody": ["METHOD_START", "{", "return    !  ( WildFlySecurityManager . isChecking (  )  )     ?    new   Thread ( runnable ,    threadName )     :    AccessController . doPrivileged ( new   CreateThreadAction ( runnable ,    threadName )  )  ;", "}", "METHOD_END"], "methodName": ["createThread"], "fileName": "org.wildfly.iiop.openjdk.service.SecurityActions"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["commit"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["delistResource"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["enlistResource"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["registerSynchronization"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["rollback"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "throw   IIOPLogger . ROOT _ LOGGER . foreignTransaction (  )  ;", "}", "METHOD_END"], "methodName": ["setRollbackOnly"], "fileName": "org.wildfly.iiop.openjdk.tm.ForeignTransaction"}, {"methodBody": ["METHOD_START", "{", "try    {", "Any   any    =    ORB . init (  )  . create _ any (  )  ;", "any . insert _ short (  . EITHER )  ;", "byte [  ]    taggedComponentData    =    codec . encode _ value ( any )  ;", "info . add _ ior _ component ( new   TaggedComponent (  . TAG _ INV _ POLICY ,    taggedComponentData )  )  ;", "any    =    ORB . init (  )  . create _ any (  )  ;", "any . insert _ short (  . ADAPTS )  ;", "taggedComponentData    =    codec . encode _ value ( any )  ;", "info . add _ ior _ component ( new   TaggedComponent (  . TAG _ OTS _ POLICY ,    taggedComponentData )  )  ;", "}    catch    ( InvalidTypeForEncoding   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorEncodingContext ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["establish_components"], "fileName": "org.wildfly.iiop.openjdk.tm.TxIORInterceptor"}, {"methodBody": ["METHOD_START", "{", "return   TxIORInterceptor . class . getName (  )  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.wildfly.iiop.openjdk.tm.TxIORInterceptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "Encoding   encoding    =    new   Encoding ( ENCODING _ CDR _ ENCAPS . value ,     (  ( byte )     (  1  )  )  ,     (  ( byte )     (  0  )  )  )  ;", "Codec   codec    =    info . codec _ factory (  )  . create _ codec ( encoding )  ;", "info . add _ ior _ interceptor ( new    ( codec )  )  ;", "}    catch    ( Exception   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["post_init"], "fileName": "org.wildfly.iiop.openjdk.tm.TxIORInterceptorInitializer"}, {"methodBody": ["METHOD_START", "{", "Transaction   tx    =    null ;", "if    (  (  . piCurrent )     !  =    null )     {", "try    {", "Any   any    =     . piCurrent . get _ slot (  . slotId )  ;", "if    (  ( any . type (  )  . kind (  )  . value (  )  )     !  =     ( TCKind .  _ tk _ null )  )     {", "tx    =    ForeignTransaction . INSTANCE ;", "}", "}    catch    ( InvalidSlot   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorGettingSlotInTxInterceptor ( e )  ;", "}", "}", "return   tx ;", "}", "METHOD_END"], "methodName": ["getCurrentTransaction"], "fileName": "org.wildfly.iiop.openjdk.tm.TxServerInterceptor"}, {"methodBody": ["METHOD_START", "{", "TxServerInterceptor . slotId    =    slotId ;", "TxServerInterceptor . codec    =    codec ;", "TxServerInterceptor . piCurrent    =    piCurrent ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.wildfly.iiop.openjdk.tm.TxServerInterceptor"}, {"methodBody": ["METHOD_START", "{", "return    \" TxServerInterceptor \"  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.wildfly.iiop.openjdk.tm.TxServerInterceptor"}, {"methodBody": ["METHOD_START", "{", "IIOPLogger . ROOT _ LOGGER . tracef (  \" Intercepting   receive _ request _ service _ contexts ,    operation :     % s \"  ,    ri . operation (  )  )  ;", "try    {", "ServiceContext   sc    =    ri . get _ request _ service _ context (  . txContextId )  ;", "Any   any    =     . codec . decode _ value ( sc . context _ data ,    PropagationContextHelper . type (  )  )  ;", "ri . set _ slot (  . slotId ,    any )  ;", "}    catch    ( BAD _ PARAM   e )     {", "}    catch    ( FormatMismatch   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorDecodingContextData ( this . name (  )  ,    e )  ;", "}    catch    ( TypeMismatch   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorDecodingContextData ( this . name (  )  ,    e )  ;", "}    catch    ( InvalidSlot   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . errorSettingSlotInTxInterceptor ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["receive_request_service_contexts"], "fileName": "org.wildfly.iiop.openjdk.tm.TxServerInterceptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "Encoding   encoding    =    new   Encoding ( ENCODING _ CDR _ ENCAPS . value ,     (  ( byte )     (  1  )  )  ,     (  ( byte )     (  0  )  )  )  ;", "Codec   codec    =    info . codec _ factory (  )  . create _ codec ( encoding )  ;", "Object   obj    =    info . resolve _ initial _ references (  \" PICurrent \"  )  ;", "Current   piCurrent    =    CurrentHelper . narrow ( obj )  ;", ". init ( info . allocate _ slot _ id (  )  ,    codec ,    piCurrent )  ;", "interceptor    =    new    (  )  ;", "info . add _ server _ request _ interceptor ( interceptor )  ;", "}    catch    ( Exception   e )     {", "throw   IIOPLogger . ROOT _ LOGGER . unexpectedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["post_init"], "fileName": "org.wildfly.iiop.openjdk.tm.TxServerInterceptorInitializer"}]