[{"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.wildfly.extension.mod_cluster.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.wildfly.extension.mod_cluster.Attribute"}, {"methodBody": ["METHOD_START", "{", "ResourceTransformationDescriptionBuilder   loadProviderBuilder    =    builder . addChildResource ( DynamicLoadProviderDefinition . PATH )  ;", "LoadMetricDefinition . buildTransformation ( version ,    loadProviderBuilder )  ;", "CustomLoadMetricDefinition . buildTransformation ( version ,    loadProviderBuilder )  ;", "}", "METHOD_END"], "methodName": ["buildTransformation"], "fileName": "org.wildfly.extension.mod_cluster.DynamicLoadProviderDefinition"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.wildfly.extension.mod_cluster.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.wildfly.extension.mod_cluster.Element"}, {"methodBody": ["METHOD_START", "{", "for    ( LoadMetricEnum   metric    :    LoadMetricEnum . values (  )  )     {", "if    ( metric . type . equals ( type )  )     {", "return   metric ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["forType"], "fileName": "org.wildfly.extension.mod_cluster.LoadMetricEnum"}, {"methodBody": ["METHOD_START", "{", "return   this . loadMetricClass ;", "}", "METHOD_END"], "methodName": ["getLoadMetricClass"], "fileName": "org.wildfly.extension.mod_cluster.LoadMetricEnum"}, {"methodBody": ["METHOD_START", "{", "return   this . type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.wildfly.extension.mod_cluster.LoadMetricEnum"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . ADD _ PROXY ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . HOST )  . addParameter ( ModClusterSubsystemResourceDefinition . PORT )  . setRuntimeOnly (  )  . addAccessConstraint ( ModClusterExtension . MOD _ CLUSTER _ PROXIES _ DEF )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterAddProxy"}, {"methodBody": ["METHOD_START", "{", "ResourceTransformationDescriptionBuilder   builder    =    parent . addChildResource ( ModClusterConfigResourceDefinition . PATH )  ;", "if    ( ModClusterModel . VERSION _  5  _  0  _  0  . requiresTransformation ( version )  )     {", "builder . getAttributeBuilder (  )  . setDiscard ( UNDEFINED ,    ModClusterConfigResourceDefinition . SSL _ CONTEXT )  . addRejectCheck ( DEFINED ,    ModClusterConfigResourceDefinition . SSL _ CONTEXT )  . end (  )  ;", "}", "if    ( ModClusterModel . VERSION _  4  _  0  _  0  . requiresTransformation ( version )  )     {", "builder . getAttributeBuilder (  )  . setValueConverter ( new   AttributeConverter . DefaultAttributeConverter (  )     {", "@ Override", "protected   void   convertAttribute ( PathAddress   address ,    String   attributeName ,    ModelNode   attributeValue ,    TransformationContext   context )     {", "if    (  !  ( attributeValue . isDefined (  )  )  )     {", "attributeValue . set (  \"     \"  )  ;", "}", "}", "}  ,    ModClusterConfigResourceDefinition . EXCLUDED _ CONTEXTS )  . end (  )  ;", "}", "if    ( ModClusterModel . VERSION _  3  _  0  _  0  . requiresTransformation ( version )  )     {", "builder . getAttributeBuilder (  )  . setDiscard ( new   DiscardAttributeValueChecker ( ModClusterConfigResourceDefinition . STATUS _ INTERVAL . getDefaultValue (  )  )  ,    ModClusterConfigResourceDefinition . STATUS _ INTERVAL )  . addRejectCheck ( new   SimpleAcceptAttributeChecker ( ModClusterConfigResourceDefinition . STATUS _ INTERVAL . getDefaultValue (  )  )  ,    ModClusterConfigResourceDefinition . STATUS _ INTERVAL )  . setDiscard ( UNDEFINED ,    ModClusterConfigResourceDefinition . PROXIES )  . addRejectCheck ( DEFINED ,    ModClusterConfigResourceDefinition . PROXIES )  . end (  )  ;", "}", "if    ( ModClusterModel . VERSION _  1  _  5  _  0  . requiresTransformation ( version )  )     {", "builder . getAttributeBuilder (  )  . addRejectCheck ( SessionDrainingStrategyChecker . INSTANCE ,    ModClusterConfigResourceDefinition . SESSION _ DRAINING _ STRATEGY )  . setDiscard ( SessionDrainingStrategyChecker . INSTANCE ,    ModClusterConfigResourceDefinition . SESSION _ DRAINING _ STRATEGY )  . end (  )  ;", "}", "DynamicLoadProviderDefinition . buildTransformation ( version ,    builder )  ;", "ModClusterSSLResourceDefinition . buildTransformation ( version ,    builder )  ;", "}", "METHOD_END"], "methodName": ["buildTransformation"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterConfigResourceDefinition"}, {"methodBody": ["METHOD_START", "{", "for    ( NetworkInterface   iface    :    interfaces )     {", "try    {", "if    (  ( iface . isUp (  )  )     &  &     (  ( iface . supportsMulticast (  )  )     |  |     ( iface . isLoopback (  )  )  )  )     {", "return   true ;", "}", "}    catch    ( SocketExcep   e )     {", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isMulticastEnabled"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterConfigurationServiceBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . DISABLE ,    descriptionResolver )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterDisable"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . DISABLE _ CONTEXT ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . VIRTUAL _ HOST )  . addParameter ( ModClusterSubsystemResourceDefinition . CONTEXT )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterDisableContext"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . ENABLE ,    descriptionResolver )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterEnable"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . ENABLE _ CONTEXT ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . VIRTUAL _ HOST )  . addParameter ( ModClusterSubsystemResourceDefinition . CONTEXT )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterEnableContext"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( ModClusterExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    ModClusterExtension . RESOURCE _ NAME ,    ModClusterExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterExtension"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . READ _ PROXIES _ CONFIGURATION ,    descriptionResolver )  . setReadOnly (  )  . setRuntimeOnly (  )  . setReplyType ( LIST )  . setReplyValueType ( STRING )  . addAccessConstraint ( ModClusterExtension . MOD _ CLUSTER _ PROXIES _ DEF )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterGetProxyConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . READ _ PROXIES _ INFO ,    descriptionResolver )  . setReadOnly (  )  . setRuntimeOnly (  )  . setReplyType ( LIST )  . setReplyValueType ( STRING )  . addAccessConstraint ( ModClusterExtension . MOD _ CLUSTER _ PROXIES _ DEF )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterGetProxyInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . LIST _ PROXIES ,    descriptionResolver )  . setReadOnly (  )  . setRuntimeOnly (  )  . setReplyType ( LIST )  . setReplyValueType ( STRING )  . addAccessConstraint ( ModClusterExtension . MOD _ CLUSTER _ PROXIES _ DEF )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterListProxies"}, {"methodBody": ["METHOD_START", "{", "return   this . version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterModel"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . REFRESH ,    descriptionResolver )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterRefresh"}, {"methodBody": ["METHOD_START", "{", "Set < String >    metrics    =    context . readResource ( PathAddress . pathAddress ( DynamicLoadProviderDefinition . PATH )  )  . getChildrenNames ( CommonAttributes . CUSTOM _ LOAD _ METRIC )  ;", "for    ( String   name    :    metrics )     {", "if    ( name . equals ( type )  )     {", "return   name ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMetricName"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterRemoveCustomMetric"}, {"methodBody": ["METHOD_START", "{", "Set < String >    metrics    =    context . readResource ( PathAddress . pathAddress ( DynamicLoadProviderDefinition . PATH )  )  . getChildrenNames ( CommonAttributes . LOAD _ METRIC )  ;", "for    ( String   name    :    metrics )     {", "if    ( name . equals ( type )  )     {", "return   name ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMetricName"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterRemoveMetric"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . REMOVE _ PROXY ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . HOST )  . addParameter ( ModClusterSubsystemResourceDefinition . PORT )  . setRuntimeOnly (  )  . addAccessConstraint ( ModClusterExtension . MOD _ CLUSTER _ PROXIES _ DEF )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterRemoveProxy"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . RESET ,    descriptionResolver )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterReset"}, {"methodBody": ["METHOD_START", "{", "return   this . readerSupplier ;", "}", "METHOD_END"], "methodName": ["getXMLReaderSupplier"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSchema"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . STOP ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . WAIT _ TIME )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterStop"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleOperationDefinitionBuilder ( CommonAttributes . STOP _ CONTEXT ,    descriptionResolver )  . addParameter ( ModClusterSubsystemResourceDefinition . VIRTUAL _ HOST )  . addParameter ( ModClusterSubsystemResourceDefinition . CONTEXT )  . addParameter ( ModClusterSubsystemResourceDefinition . WAIT _ TIME )  . setRuntimeOnly (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinition"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterStopContext"}, {"methodBody": ["METHOD_START", "{", "for    ( Property   p    :    nodes . asPropertyList (  )  )     {", "ModelNode   node    =    p . getValue (  )  ;", "double   capacity    =    LoadMetricDefinition . CAPACITY . resolveModelAttribute ( context ,    node )  . asDouble (  )  ;", "int   weight    =    LoadMetricDefinition . WEIGHT . resolveModelAttribute ( context ,    node )  . asInt (  )  ;", "Map < String ,    String >    propertyMap    =    LoadMetricDefinition . PROPERTY . unwrap ( context ,    node )  ;", "Class <  ?    extends   LoadMetric >    loadMetricClass    =    null ;", "if    ( node . hasDefined ( CommonAttributes . TYPE )  )     {", "String   type    =    LoadMetricDefinition . TYPE . resolveModelAttribute ( context ,    node )  . asString (  )  ;", "if    ( type . equals (  \" mem \"  )  )     {", "Logger . ROOT _ LOGGER . unsupportedMetric ( type )  ;", "continue ;", "}", "LoadMetricEnum   metric    =    LoadMetricEnum . forType ( type )  ;", "loadMetricClass    =     ( metric    !  =    null )     ?    metric . getLoadMetricClass (  )     :    null ;", "} else    {", "String   className    =    CustomLoadMetricDefinition . CLASS . resolveModelAttribute ( context ,    node )  . asString (  )  ;", "try    {", "loadMetricClass    =    this . getClass (  )  . getClassLoader (  )  . loadClass ( className )  . asSubclass ( LoadMetric . class )  ;", "}    catch    ( ClassNotFoundException   e )     {", "Logger . ROOT _ LOGGER . errorAddingMetrics ( e )  ;", "}", "}", "if    ( loadMetricClass    !  =    null )     {", "try    {", "LoadMetric   metric    =    loadMetricClass . newInstance (  )  ;", "metric . setCapacity ( capacity )  ;", "metric . setWeight ( weight )  ;", "if    (  ( propertyMap    !  =    null )     &  &     (  !  ( propertyMap . isEmpty (  )  )  )  )     {", "Properties   props    =    new   Properties (  )  ;", "props . putAll ( propertyMap )  ;", "try    {", "BeanUtils . mapJavaBeanProperties ( metric ,    props ,    true )  ;", "}    catch    ( Exception   ex )     {", "Logger . ROOT _ LOGGER . errorApplyingMetricProperties ( ex ,    loadMetricClass . getCanonicalName (  )  )  ;", "continue ;", "}", "}", "metrics . add ( metric )  ;", "}    catch    ( InstantiationException    |    IllegalAccessException   e )     {", "Logger . ROOT _ LOGGER . errorAddingMetrics ( e )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addLoadMetrics"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "LoadBalanceFactorProvider   load    =    null ;", "if    ( model . hasDefined ( CommonAttributes . SIMPLE _ LOAD _ PROVIDER _ FACTOR )  )     {", "int   value    =    ConfigResourceDefinition . SIMPLE _ LOAD _ PROVIDER . resolveModelAttribute ( context ,    model )  . asInt (  1  )  ;", "SimpleLoadBalanceFactorProvider   myload    =    new   SimpleLoadBalanceFactorProvider (  )  ;", "myload . setLoadBalanceFactor ( value )  ;", "load    =    myload ;", "}", "if    ( model . get ( DynamicLoadProviderDefinition . PATH . getKeyValuePair (  )  )  . isDefined (  )  )     {", "final   ModelNode   node    =    model . get ( DynamicLoadProviderDefinition . PATH . getKeyValuePair (  )  )  ;", "int   decayFactor    =    DynamicLoadProviderDefinition . DECAY . resolveModelAttribute ( context ,    node )  . asInt (  )  ;", "int   history    =    DynamicLoadProviderDefinition . HISTORY . resolveModelAttribute ( context ,    node )  . asInt (  )  ;", "if    ( node . hasDefined ( CommonAttributes . LOAD _ METRIC )  )     {", "addLoadMetrics ( metrics ,    node . get ( CommonAttributes . LOAD _ METRIC )  ,    context )  ;", "}", "if    ( node . hasDefined ( CommonAttributes . CUSTOM _ LOAD _ METRIC )  )     {", "addLoadMetrics ( metrics ,    node . get ( CommonAttributes . CUSTOM _ LOAD _ METRIC )  ,    context )  ;", "}", "if    (  !  ( metrics . isEmpty (  )  )  )     {", "DynamicLoadBalanceFactorProvider   loader    =    new   DynamicLoadBalanceFactorProvider ( metrics )  ;", "loader . setDecayFactor ( decayFactor )  ;", "loader . setHistory ( history )  ;", "load    =    loader ;", "}", "}", "if    ( load    =  =    null )     {", "Logger . ROOT _ LOGGER . useDefaultLoadBalancer (  )  ;", "SimpleLoadBalanceFactorProvider   myload    =    new   SimpleLoadBalanceFactorProvider (  )  ;", "myload . setLoadBalanceFactor (  1  )  ;", "load    =    myload ;", "}", "return   load ;", "}", "METHOD_END"], "methodName": ["getModClusterLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "return    ( context . getAttachment ( SUBSYSTEM _ ADD _ KEY )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isActiveInContext"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "Object [  ]  [  ]    data    =    new   Object [  ]  [  ]  {    new   Object [  ]  {    ModClusterSchema . MODCLUSTER _  1  _  0  ,     1  3     }  ,    new   Object [  ]  {    ModClusterSchema . MODCLUSTER _  1  _  1  ,     1  3     }  ,    new   Object [  ]  {    ModClusterSchema . MODCLUSTER _  1  _  2  ,     1  5     }  ,    new   Object [  ]  {    ModClusterSchema . MODCLUSTER _  2  _  0  ,     1  5     }  ,    new   Object [  ]  {    ModClusterSchema . MODCLUSTER _  3  _  0  ,     1  4     }     }  ;", "return   Arrays . asList ( data )  ;", "}", "METHOD_END"], "methodName": ["data"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemParsingTestCase"}, {"methodBody": ["METHOD_START", "{", "List < ModelNode >    operations    =    this . parse ( this . getSubsystemXml (  )  )  ;", "Assert . assertEquals ( this . expectedOperationCount ,    operations . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testParseSubsystem"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemParsingTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( schema )     !  =     ( ModClusterSchema . CURRENT )  )", "return ;", "super . standardSubsystemTest (  \" subsystem _  2  _  0  _ simple - load - provider . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubsystemWithSimpleLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemParsingTestCase"}, {"methodBody": ["METHOD_START", "{", "ResourceTransformationDescriptionBuilder   builder    =    Factory . createSubsystemInstance (  )  ;", "ModClusterConfig . buildTransformation ( version ,    builder )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildTransformation"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemResourceDefinition"}, {"methodBody": ["METHOD_START", "{", "final   ResourceDescriptionResolver   rootResolver    =    getResourceDescriptionResolver (  )  ;", "registration . registerOperationHandler ( ModClusterListProxies . getDefinition ( rootResolver )  ,    ModClusterListProxies . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterGetProxyInfo . getDefinition ( rootResolver )  ,    ModClusterGetProxyInfo . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterGetProxyConfiguration . getDefinition ( rootResolver )  ,    ModClusterGetProxyConfiguration . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterAddProxy . getDefinition ( rootResolver )  ,    ModClusterAddProxy . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterRemoveProxy . getDefinition ( rootResolver )  ,    ModClusterRemoveProxy . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterRefresh . getDefinition ( rootResolver )  ,    ModClusterRefresh . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterReset . getDefinition ( rootResolver )  ,    ModClusterReset . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterEnable . getDefinition ( rootResolver )  ,    ModClusterEnable . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterDisable . getDefinition ( rootResolver )  ,    ModClusterDisable . INSTANCE )  ;", "registration . registerOperationHandler ( top . getDefinition ( rootResolver )  ,    top . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterEnableContext . getDefinition ( rootResolver )  ,    ModClusterEnableContext . INSTANCE )  ;", "registration . registerOperationHandler ( ModClusterDisableContext . getDefinition ( rootResolver )  ,    ModClusterDisableContext . INSTANCE )  ;", "registration . registerOperationHandler ( topContext . getDefinition ( rootResolver )  ,    topContext . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["registerRuntimeOperations"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemResourceDefinition"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   customMetric    =    new   ModelNode (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   CAPACITY    :", "LoadMetricDefinition . CAPACITY . parseAndSetParameter ( value ,    customMetric ,    reader )  ;", "break ;", "case   WEIGHT    :", "LoadMetricDefinition . WEIGHT . parseAndSetParameter ( value ,    customMetric ,    reader )  ;", "break ;", "case   CLASS    :", "CustomLoadMetricDefinition . CLASS . parseAndSetParameter ( value ,    customMetric ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "PathElement   pe    =    PathElement . pathElement ( CustomLoadMetricDefinition . PATH . getKey (  )  ,    customMetric . get ( CommonAttributes . CLASS )  . asString (  )  )  ;", "customMetric . get ( OP )  . set ( ADD )  ;", "customMetric . get ( OP _ ADDR )  . set ( address . append ( pe )  . toModelNode (  )  )  ;", ". readProperties ( reader ,    customMetric )  ;", "list . add ( customMetric )  ;", "}", "METHOD_END"], "methodName": ["parseCustomLoadMetric"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "PathAddress   address    =    parent . append ( DynamicLoadProviderDefinition . PATH )  ;", "final   ModelNode   load    =    Util . createAddOperation ( address )  ;", "final   int   count    =    r . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( r ,    i )  ;", "final   String   value    =    r . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( r . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   HISTORY    :", "DynamicLoadProviderDefinition . HISTORY . parseAndSetParameter ( value ,    load ,    r )  ;", "break ;", "case   DECAY    :", "DynamicLoadProviderDefinition . DECAY . parseAndSetParameter ( value ,    load ,    r )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( r ,    i )  ;", "}", "}", "list . add ( load )  ;", "while    (  ( r . hasNext (  )  )     &  &     (  ( r . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( r . getLocalName (  )  )  ;", "switch    ( element )     {", "case   LOAD _ METRIC    :", "parseLoadMetric ( r ,    list ,    address )  ;", "break ;", "case   CUSTOM _ LOAD _ METRIC    :", "parseCustomLoadMetric ( r ,    list ,    address )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedElement ( r )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseDynamicLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   metric    =    new   ModelNode (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   TYPE    :", "LoadMetricDefinition . TYPE . parseAndSetParameter ( value ,    metric ,    reader )  ;", "break ;", "case   CAPACITY    :", "LoadMetricDefinition . CAPACITY . parseAndSetParameter ( value ,    metric ,    reader )  ;", "break ;", "case   WEIGHT    :", "LoadMetricDefinition . WEIGHT . parseAndSetParameter ( value ,    metric ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "PathElement   pe    =    PathElement . pathElement ( LoadMetricDefinition . PATH . getKey (  )  ,    metric . get ( CommonAttributes . TYPE )  . asString (  )  )  ;", "metric . get ( OP )  . set ( ADD )  ;", "metric . get ( OP _ ADDR )  . set ( address . append ( pe )  . toModelNode (  )  )  ;", ". readProperties ( reader ,    metric )  ;", "list . add ( metric )  ;", "}", "METHOD_END"], "methodName": ["parseLoadMetric"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "PathAddress   address    =    parent . append ( ModClusterConfigResourceDefinition . PATH )  ;", "final   ModelNode   config    =    Util . createAddOperation ( address )  ;", "list . add ( config )  ;", "parsePropConf ( reader ,    config )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   SIMPLE _ LOAD _ PROVIDER    :", "parseSimpleLoadProvider ( reader ,    config )  ;", "break ;", "case   DYNAMIC _ LOAD _ PROVIDER    :", "parseDynamicLoadProvider ( reader ,    list ,    address )  ;", "break ;", "case   SSL    :", "parseSSL ( reader ,    list ,    address )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedElement ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseModClusterConfig"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ADVERTISE _ SOCKET    :", "case   PROXY _ URL    :", "case   ADVERTISE    :", "case   ADVERTISE _ SECURITY _ KEY    :", "case   EXCLUDED _ CONTEXTS    :", "case   AUTO _ ENABLE _ CONTEXTS    :", "case   STOP _ CONTEXT _ TIMEOUT    :", "case   SOCKET _ TIMEOUT    :", "case   STICKY _ SESSION    :", "case   STICKY _ SESSION _ REMOVE    :", "case   STICKY _ SESSION _ FORCE    :", "case   WORKER _ TIMEOUT    :", "case   MAX _ ATTEMPTS    :", "case   FLUSH _ PACKETS    :", "case   FLUSH _ WAIT    :", "case   PING    :", "case   SMAX    :", "case   TTL    :", "case   NODE _ TIMEOUT    :", "case   BALANCER    :", "(  ( SimpleAttributeDefinition )     ( ConfigResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  )  )  . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   DOMAIN    :", "ConfigResourceDefinition . LOAD _ BALANCING _ GROUP . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   PROXY _ LIST    :", "ConfigResourceDefinition . PROXY _ LIST . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ConfigResourceDefinition . CONNECTOR . parseAndSetParameter (  \" ajp \"  ,    conf ,    reader )  ;", "}", "METHOD_END"], "methodName": ["parsePropConf"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "PathAddress   address    =    parent . append ( ModClusterSSLResourceDefinition . PATH )  ;", "final   ModelNode   ssl    =    Util . createAddOperation ( address )  ;", "list . add ( ssl )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   KEY _ ALIAS    :", "case   PASSWORD    :", "case   CERTIFICATE _ KEY _ FILE    :", "case   CIPHER _ SUITE    :", "case   PROTOCOL    :", "case   CA _ CERTIFICATE _ FILE    :", "case   CA _ REVOCATION _ URL    :", "ModClusterSSLResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  . parseAndSetParameter ( value ,    ssl ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSSL"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   FACTOR    :", "ConfigResourceDefinition . SIMPLE _ LOAD _ PROVIDER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSimpleLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   PROPERTY    :", "final   Property   property    =    ParseUtils . readProperty ( reader ,    true )  ;", "metric . get ( CommonAttributes . PROPERTY )  . get ( property . getName (  )  )  . set ( property . getValue (  )  )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedElement ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["readProperties"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_0"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ADVERTISE _ SOCKET    :", "case   PROXY _ URL    :", "case   ADVERTISE    :", "case   ADVERTISE _ SECURITY _ KEY    :", "case   EXCLUDED _ CONTEXTS    :", "case   AUTO _ ENABLE _ CONTEXTS    :", "case   STOP _ CONTEXT _ TIMEOUT    :", "case   SOCKET _ TIMEOUT    :", "case   STICKY _ SESSION    :", "case   STICKY _ SESSION _ REMOVE    :", "case   STICKY _ SESSION _ FORCE    :", "case   WORKER _ TIMEOUT    :", "case   MAX _ ATTEMPTS    :", "case   FLUSH _ PACKETS    :", "case   FLUSH _ WAIT    :", "case   PING    :", "case   SMAX    :", "case   TTL    :", "case   NODE _ TIMEOUT    :", "case   BALANCER    :", "case   LOAD _ BALANCING _ GROUP    :", "case   CONNECTOR    :", "(  ( SimpleAttributeDefinition )     ( ConfigResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  )  )  . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   PROXY _ LIST    :", "ConfigResourceDefinition . PROXY _ LIST . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parsePropConf"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_1"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ADVERTISE _ SOCKET    :", "case   PROXY _ URL    :", "case   ADVERTISE    :", "case   ADVERTISE _ SECURITY _ KEY    :", "case   EXCLUDED _ CONTEXTS    :", "case   AUTO _ ENABLE _ CONTEXTS    :", "case   STOP _ CONTEXT _ TIMEOUT    :", "case   SOCKET _ TIMEOUT    :", "case   STICKY _ SESSION    :", "case   STICKY _ SESSION _ REMOVE    :", "case   STICKY _ SESSION _ FORCE    :", "case   WORKER _ TIMEOUT    :", "case   MAX _ ATTEMPTS    :", "case   FLUSH _ PACKETS    :", "case   FLUSH _ WAIT    :", "case   PING    :", "case   SMAX    :", "case   TTL    :", "case   NODE _ TIMEOUT    :", "case   BALANCER    :", "case   LOAD _ BALANCING _ GROUP    :", "case   CONNECTOR    :", "case   SESSION _ DRAINING _ STRATEGY    :", "(  ( SimpleAttributeDefinition )     ( ConfigResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  )  )  . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   PROXY _ LIST    :", "ConfigResourceDefinition . PROXY _ LIST . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parsePropConf"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_1_2"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ADVERTISE _ SOCKET    :", "case   PROXY _ URL    :", "case   ADVERTISE    :", "case   ADVERTISE _ SECURITY _ KEY    :", "case   EXCLUDED _ CONTEXTS    :", "case   AUTO _ ENABLE _ CONTEXTS    :", "case   STOP _ CONTEXT _ TIMEOUT    :", "case   SOCKET _ TIMEOUT    :", "case   STICKY _ SESSION    :", "case   STICKY _ SESSION _ REMOVE    :", "case   STICKY _ SESSION _ FORCE    :", "case   WORKER _ TIMEOUT    :", "case   MAX _ ATTEMPTS    :", "case   FLUSH _ PACKETS    :", "case   FLUSH _ WAIT    :", "case   PING    :", "case   SMAX    :", "case   TTL    :", "case   NODE _ TIMEOUT    :", "case   BALANCER    :", "case   LOAD _ BALANCING _ GROUP    :", "case   CONNECTOR    :", "case   STATUS _ INTERVAL    :", "case   SESSION _ DRAINING _ STRATEGY    :", "(  ( SimpleAttributeDefinition )     ( ConfigResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  )  )  . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   PROXIES    :", "ConfigResourceDefinition . PROXIES . getParser (  )  . parseAndSetParameter ( ConfigResourceDefinition . PROXIES ,    value ,    conf ,    reader )  ;", "break ;", "case   PROXY _ LIST    :", "ConfigResourceDefinition . PROXY _ LIST . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parsePropConf"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_2_0"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ADVERTISE _ SOCKET    :", "case   PROXY _ URL    :", "case   ADVERTISE    :", "case   ADVERTISE _ SECURITY _ KEY    :", "case   EXCLUDED _ CONTEXTS    :", "case   AUTO _ ENABLE _ CONTEXTS    :", "case   STOP _ CONTEXT _ TIMEOUT    :", "case   SOCKET _ TIMEOUT    :", "case   SSL _ CONTEXT    :", "case   STICKY _ SESSION    :", "case   STICKY _ SESSION _ REMOVE    :", "case   STICKY _ SESSION _ FORCE    :", "case   WORKER _ TIMEOUT    :", "case   MAX _ ATTEMPTS    :", "case   FLUSH _ PACKETS    :", "case   FLUSH _ WAIT    :", "case   PING    :", "case   SMAX    :", "case   TTL    :", "case   NODE _ TIMEOUT    :", "case   BALANCER    :", "case   LOAD _ BALANCING _ GROUP    :", "case   CONNECTOR    :", "case   STATUS _ INTERVAL    :", "case   SESSION _ DRAINING _ STRATEGY    :", "(  ( SimpleAttributeDefinition )     ( ConfigResourceDefinition . ATTRIBUTES _ BY _ NAME . get ( attribute . getLocalName (  )  )  )  )  . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "case   PROXIES    :", "ConfigResourceDefinition . PROXIES . getParser (  )  . parseAndSetParameter ( ConfigResourceDefinition . PROXIES ,    value ,    conf ,    reader )  ;", "break ;", "case   PROXY _ LIST    :", "ConfigResourceDefinition . PROXY _ LIST . parseAndSetParameter ( value ,    conf ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parsePropConf"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLReader_3_0"}, {"methodBody": ["METHOD_START", "{", "if    ( node . hasDefined ( name )  )     {", "w . writeAttribute ( name ,    node . get ( name )  . asString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeAttribute"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( AttributeDefinition   def    :    ModClusterConfigResourceDefinition . ATTRIBUTES )     {", "def . getAttributeMarshaller (  )  . marshallAsAttribute ( def ,    config ,    true ,    writer )  ;", "}", "}", "METHOD_END"], "methodName": ["writeConfiguration"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( Property   prop    :    config . asPropertyList (  )  )     {", "ModelNode   node    =    prop . getValue (  )  ;", "writer . writeStartElement ( Element . CUSTOM _ LOAD _ METRIC . getLocalName (  )  )  ;", "CustomLoadMetricDefinition . CLASS . marshallAsAttribute ( node ,    false ,    writer )  ;", "LoadMetricDefinition . WEIGHT . marshallAsAttribute ( node ,    false ,    writer )  ;", "LoadMetricDefinition . CAPACITY . marshallAsAttribute ( node ,    false ,    writer )  ;", "if    ( node . get ( CommonAttributes . PROPERTY )  . isDefined (  )  )     {", "for    ( Property   property    :    node . get ( CommonAttributes . PROPERTY )  . asPropertyList (  )  )     {", ". writeProperty ( writer ,    property )  ;", "}", "}", "writer . writeEndElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeCustomLoadMetric"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . DYNAMIC _ LOAD _ PROVIDER . getLocalName (  )  )  ;", ". writeAttribute ( writer ,    CommonAttributes . HISTORY ,    config )  ;", ". writeAttribute ( writer ,    CommonAttributes . DECAY ,    config )  ;", "if    ( config . hasDefined ( CommonAttributes . LOAD _ METRIC )  )     {", ". writeLoadMetric ( writer ,    config . get ( CommonAttributes . LOAD _ METRIC )  )  ;", "}", "if    ( config . hasDefined ( CommonAttributes . CUSTOM _ LOAD _ METRIC )  )     {", ". writeCustomLoadMetric ( writer ,    config . get ( CommonAttributes . CUSTOM _ LOAD _ METRIC )  )  ;", "}", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeDynamicLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( Property   prop    :    config . asPropertyList (  )  )     {", "ModelNode   node    =    prop . getValue (  )  ;", "writer . writeStartElement ( Element . LOAD _ METRIC . getLocalName (  )  )  ;", "LoadMetricDefinition . TYPE . marshallAsAttribute ( node ,    false ,    writer )  ;", "LoadMetricDefinition . WEIGHT . marshallAsAttribute ( node ,    false ,    writer )  ;", "LoadMetricDefinition . CAPACITY . marshallAsAttribute ( node ,    false ,    writer )  ;", "if    ( node . get ( CommonAttributes . PROPERTY )  . isDefined (  )  )     {", "for    ( Property   property    :    node . get ( CommonAttributes . PROPERTY )  . asPropertyList (  )  )     {", ". writeProperty ( writer ,    property )  ;", "}", "}", "writer . writeEndElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeLoadMetric"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . MOD _ CLUSTER _ CONFIG . getLocalName (  )  )  ;", ". writeConfiguration ( writer ,    config )  ;", "if    ( config . hasDefined ( CommonAttributes . SIMPLE _ LOAD _ PROVIDER _ FACTOR )  )     {", ". writeSimpleLoadProvider ( writer ,    config )  ;", "}", "if    ( config . get ( DynamicLoadProviderDefinition . PATH . getKeyValuePair (  )  )  . isDefined (  )  )     {", ". writeDynamicLoadProvider ( writer ,    config . get ( DynamicLoadProviderDefinition . PATH . getKeyValuePair (  )  )  )  ;", "}", "if    ( config . get ( ModClusterSSLResourceDefinition . PATH . getKeyValuePair (  )  )  . isDefined (  )  )     {", ". writeSSL ( writer ,    config . get ( ModClusterSSLResourceDefinition . PATH . getKeyValuePair (  )  )  )  ;", "}", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeModClusterConfig"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . PROPERTY . getLocalName (  )  )  ;", "writer . writeAttribute ( CommonAttributes . NAME ,    property . getName (  )  )  ;", "writer . writeAttribute ( CommonAttributes . VALUE ,    property . getValue (  )  . asString (  )  )  ;", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeProperty"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . SSL . getLocalName (  )  )  ;", "for    ( SimpleAttributeDefinition   def    :    SLResourceDefinition . ATTRIBUTES )     {", "def . marshallAsAttribute ( sslConfig ,    false ,    writer )  ;", "}", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeSSL"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . SIMPLE _ LOAD _ PROVIDER . getLocalName (  )  )  ;", "ConfigResourceDefinition . SIMPLE _ LOAD _ PROVIDER . marshallAsAttribute ( config ,    false ,    writer )  ;", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeSimpleLoadProvider"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterSubsystemXMLWriter"}, {"methodBody": ["METHOD_START", "{", "FailedOperationTransformationConfig   config    =    new   FailedOperationTransformationConfig (  )  ;", "PathAddress   subsystemAddress    =    PathAddress . pathAddress ( ModClusterSubsystemResourceDefinition . PATH )  ;", "PathAddress   configurationAddress    =    subsystemAddress . append ( ModClusterConfigResourceDefinition . PATH )  ;", "if    ( ModClusterModel . VERSION _  3  _  0  _  0  . requiresTransformation ( version )  )     {", "config . addFailedAttribute ( configurationAddress ,    ChainedConfig . createBuilder ( CommonAttributes . STATUS _ INTERVAL ,    CommonAttributes . PROXIES )  . addConfig ( new    . StatusIntervalConfig ( CommonAttributes . STATUS _ INTERVAL )  )  . addConfig ( new    . ProxiesConfig ( CommonAttributes . PROXIES )  )  . build (  )  )  ;", "}", "if    ( ModClusterModel . VERSION _  1  _  5  _  0  . requiresTransformation ( version )  )     {", "config . addFailedAttribute ( configurationAddress ,    ChainedConfig . createBuilder ( CommonAttributes . STATUS _ INTERVAL ,    CommonAttributes . PROXIES ,    CommonAttributes . SESSION _ DRAINING _ STRATEGY )  . addConfig ( new    . StatusIntervalConfig ( CommonAttributes . STATUS _ INTERVAL )  )  . addConfig ( new    . ProxiesConfig ( CommonAttributes . PROXIES )  )  . addConfig ( new    . SessionDrainingStrategyConfig ( CommonAttributes . SESSION _ DRAINING _ STRATEGY )  )  . build (  )  )  ;", "}", "return   config ;", "}", "METHOD_END"], "methodName": ["createFailedOperationConfig"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "return   String . format ( pattern ,    version . getMavenGavVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["formatArtifact"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "return   ModClusterTransformersTestCase . formatArtifact (  \" as : jboss - as - modcluster :  % s \"  ,    version )  ;", "}", "METHOD_END"], "methodName": ["formatEAP6SubsystemArtifact"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "return   ModClusterTransformersTestCase . formatArtifact (  \" eap : wildfly - mod _ cluster - extension :  % s \"  ,    version )  ;", "}", "METHOD_END"], "methodName": ["formatEAP7SubsystemArtifact"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "switch    ( version )     {", "case   EAP _  6  _  4  _  0     :", "case   EAP _  6  _  4  _  7     :", "return   new   String [  ]  {     . formatEAP 6 SubsystemArtifact ( version )  ,     \" mod _ cluster : mod _ cluster - core :  1  .  2  .  1  1  . Final - redhat -  1  \"     }  ;", "case   EAP _  7  _  0  _  0     :", "return   new   String [  ]  {     . formatEAP 7 SubsystemArtifact ( version )  ,     \" mod _ cluster : mod _ cluster - core :  1  .  3  .  2  . Final - redhat -  1  \"     }  ;", "case   EAP _  7  _  1  _  0     :", "return   new   String [  ]  {     . formatEAP 7 SubsystemArtifact ( version )  ,     \" mod _ cluster : mod _ cluster - core :  1  .  3  .  7  . Final - redhat -  1  \"  ,     . formatArtifact (  \" eap : wildfly - clustering - common :  % s \"  ,    version )     }  ;", "}", "throw   new   IllegalArgumentException (  )  ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "switch    ( controllerVersion )     {", "case   EAP _  6  _  4  _  0     :", "case   EAP _  6  _  4  _  7     :", "return   Model . VERSION _  1  _  5  _  0  ;", "case   EAP _  7  _  0  _  0     :", "return   Model . VERSION _  4  _  0  _  0  ;", "case   EAP _  7  _  1  _  0     :", "return   Model . VERSION _  5  _  0  _  0  ;", "}", "throw   new   IllegalArgumentException (  )  ;", "}", "METHOD_END"], "methodName": ["getModelVersion"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    dependencies    =    ModClusterTransformersTestCase . getDependencies ( controllerVersion )  ;", "String   subsystemXml    =    readResource (  \" subsystem - reject . xml \"  )  ;", "ModClusterModel   model    =    ModClusterTransformersTestCase . getModelVersion ( controllerVersion )  ;", "ModelVersion   modelVersion    =    model . getVersion (  )  ;", "String   extensionClassName    =     (  ( model . getVersion (  )  . getMajor (  )  )     =  =     1  )     ?     \" ModClusterExtension \"     :     \" Extension \"  ;", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( new   ModClusterAdditionalInitialization (  )  )  ;", "builder . createLegacyKernelServicesBuilder (  (  ( model . getVersion (  )  . getMajor (  )  )     >  =     4     ?    new   ModClusterAdditionalInitialization (  )     :    null )  ,    controllerVersion ,    modelVersion )  . addSingleChildFirstClass ( ModClusterAdditionalInitialization . class )  . addMavenResourceURL ( dependencies )  . setExtensionClassName ( extensionClassName )  . skipReverseControllerCheck (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "Assert . assertNotNull ( legacyServices )  ;", "Assert . assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    modelVersion ,    parse ( subsystemXml )  ,    ModClusterTransformersTestCase . createFailedOperationConfig ( modelVersion )  )  ;", "}", "METHOD_END"], "methodName": ["testRejections"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testRejections ( EAP _  6  _  4  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testRejectionsEAP_6_4_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testRejections ( EAP _  7  _  0  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testRejectionsEAP_7_0_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testRejections ( EAP _  7  _  1  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testRejectionsEAP_7_1_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    dependencies    =    ModClusterTransformersTestCase . getDependencies ( controllerVersion )  ;", "String   subsystemXml    =    readResource (  \" subsystem - transform . xml \"  )  ;", "ModClusterModel   model    =    ModClusterTransformersTestCase . getModelVersion ( controllerVersion )  ;", "ModelVersion   modelVersion    =    model . getVersion (  )  ;", "String   extensionClassName    =     (  ( model . getVersion (  )  . getMajor (  )  )     =  =     1  )     ?     \" ModClusterExtension \"     :     \" Extension \"  ;", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( new   ModClusterAdditionalInitialization (  )  )  . setSubsystemXml ( subsystemXml )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    modelVersion )  . addMavenResourceURL ( dependencies )  . setExtensionClassName ( extensionClassName )  . skipReverseControllerCheck (  )  . dontPersistXml (  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "Assert . assertNotNull ( legacyServices )  ;", "Assert . assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "checkSubsystemModelTransformation ( mainServices ,    modelVersion ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["testTransformation"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testTransformation ( EAP _  6  _  4  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformerEAP_6_4_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testTransformation ( EAP _  7  _  0  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformerEAP_7_0_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "this . testTransformation ( EAP _  7  _  1  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testTransformerEAP_7_1_0"], "fileName": "org.wildfly.extension.mod_cluster.ModClusterTransformersTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( LoadMetric   enabledMetric    :    enabledMetrics )     {", "if    ( metricClass . isInstance ( enabledMetric )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isMetricEnabled"], "fileName": "org.wildfly.mod_cluster.undertow.ModClusterUndertowDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "InetAddress   expected    =    InetAddress . getLocalHost (  )  ;", "NetworkInterfaceBinding   interfaceBinding    =    new   NetworkInterfaceBinding ( Collections .  < NetworkInterface > emptySet (  )  ,    expected )  ;", "SocketBindingManager   bindingManager    =    mock ( SocketBindingManager . class )  ;", "SocketBinding   binding    =    new   SocketBinding (  \" socket \"  ,     1  ,    true ,    null ,     0  ,    interfaceBinding ,    bindingManager ,    Collections .  < ClientMapping > emptyList (  )  )  ;", "when ( this . listener . getSocketBinding (  )  )  . thenReturn ( binding )  ;", "InetAddress   result    =    this . c . getAddress (  )  ;", "assertSame ( expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowConnectorTestCase"}, {"methodBody": ["METHOD_START", "{", "int   expected    =     1  0  ;", "NetworkInterfaceBinding   interfaceBinding    =    new   NetworkInterfaceBinding ( Collections .  < NetworkInterface > emptySet (  )  ,    InetAddress . getLocalHost (  )  )  ;", "SocketBindingManager   bindingManager    =    mock ( SocketBindingManager . class )  ;", "SocketBinding   binding    =    new   SocketBinding (  \" socket \"  ,    expected ,    true ,    null ,     0  ,    interfaceBinding ,    bindingManager ,    Collections .  < ClientMapping > emptyList (  )  )  ;", "when ( this . listener . getSocketBinding (  )  )  . thenReturn ( binding )  ;", "int   result    =    this . c . getPort (  )  ;", "assertSame ( expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowConnectorTestCase"}, {"methodBody": ["METHOD_START", "{", "OptionMap   options    =    OptionMap . builder (  )  . getMap (  )  ;", "assertSame ( AJP ,    new    ( new   AjpListenerService (  \"  \"  ,     \"  \"  ,    options ,    OptionMap . EMPTY )  )  . getType (  )  )  ;", "assertSame ( HTTP ,    new    ( new   HttpListenerService (  \"  \"  ,     \"  \"  ,    options ,    OptionMap . EMPTY ,    false ,    false ,    false )  )  . getType (  )  )  ;", "assertSame ( HTTPS ,    new    ( new   HttpsListenerService (  \"  \"  ,     \"  \"  ,    options ,    null ,    OptionMap . EMPTY ,    false )  )  . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowConnectorTestCase"}, {"methodBody": ["METHOD_START", "{", "connector . setAddress ( InetAddress . getLocalHost (  )  )  ;", "verifyZeroInteractions ( this . listener )  ;", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowConnectorTestCase"}, {"methodBody": ["METHOD_START", "{", "ServletRequestListener   listener    =    mock ( ServletRequestListener . class )  ;", "Servlet   context    =    mock ( Servlet . class )  ;", "ServletRequest   request    =    mock ( ServletRequest . class )  ;", "ApplicationListeners   listeners    =    new   ApplicationListeners ( Collections .  < ManagedListener > emptyList (  )  ,    context )  ;", "ArgumentCaptor < ServletRequestEvent >    event    =    ArgumentCaptor . forClass ( ServletRequestEvent . class )  ;", "when ( this . deployment . getApplicationListeners (  )  )  . thenReturn ( listeners )  ;", "this . context . addRequestListener ( listener )  ;", "listeners . start (  )  ;", "listeners . requestInitialized ( request )  ;", "verify ( listener )  . requestInitialized ( event . capture (  )  )  ;", "assertSame ( request ,    event . getValue (  )  . getServletRequest (  )  )  ;", "assertSame ( context ,    event . getValue (  )  . getServlet (  )  )  ;", "event    =    ArgumentCaptor . forClass ( ServletRequestEvent . class )  ;", "listeners . requestDestroyed ( request )  ;", "verify ( listener )  . requestDestroyed ( event . capture (  )  )  ;", "assertSame ( request ,    event . getValue (  )  . getServletRequest (  )  )  ;", "assertSame ( context ,    event . getValue (  )  . getServlet (  )  )  ;", "}", "METHOD_END"], "methodName": ["addRequestListener"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowContextTestCase"}, {"methodBody": ["METHOD_START", "{", "HttpSessionListener   listener    =    mock ( HttpSessionListener . class )  ;", "Servlet   context    =    mock ( Servlet . class )  ;", "HttpSession   session    =    mock ( HttpSession . class )  ;", "ApplicationListeners   listeners    =    new   ApplicationListeners ( Collections .  < ManagedListener > emptyList (  )  ,    context )  ;", "ArgumentCaptor < HttpSessionEvent >    event    =    ArgumentCaptor . forClass ( HttpSessionEvent . class )  ;", "when ( this . deployment . getApplicationListeners (  )  )  . thenReturn ( listeners )  ;", "this . context . addSessionListener ( listener )  ;", "listeners . start (  )  ;", "listeners . sessionCreated ( session )  ;", "verify ( listener )  . sessionCreated ( event . capture (  )  )  ;", "assertSame ( session ,    event . getValue (  )  . getSession (  )  )  ;", "event    =    ArgumentCaptor . forClass ( HttpSessionEvent . class )  ;", "listeners . sessionDestroyed ( session )  ;", "verify ( listener )  . sessionDestroyed ( event . capture (  )  )  ;", "assertSame ( session ,    event . getValue (  )  . getSession (  )  )  ;", "}", "METHOD_END"], "methodName": ["addSessionListener"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowContextTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . host ,    this . context . getHost (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHost"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowContextTestCase"}, {"methodBody": ["METHOD_START", "{", "DeploymentInfo   info    =    new   DeploymentInfo (  )  ;", "String   expected    =     \"  \"  ;", "info . setPath ( expected )  ;", "when ( this . deployment . getDeploymentInfo (  )  )  . thenReturn ( info )  ;", "String   result    =    this . context . getPath (  )  ;", "assertSame ( expected ,    result )  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowContextTestCase"}, {"methodBody": ["METHOD_START", "{", "ServletContext   context    =    mock ( ServletContext . class )  ;", "ApplicationListeners   listeners    =    new   ApplicationListeners ( Collections .  < ManagedListener > emptyList (  )  ,    context )  ;", "when ( this . deployment . getApplicationListeners (  )  )  . thenReturn ( listeners )  ;", "assertFalse ( this . context . isStarted (  )  )  ;", "listeners . start (  )  ;", "assertTrue ( this . context . isStarted (  )  )  ;", "listeners . stop (  )  ;", "assertFalse ( this . context . isStarted (  )  )  ;", "}", "METHOD_END"], "methodName": ["isStarted"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowContextTestCase"}, {"methodBody": ["METHOD_START", "{", "Host   result    =    this . engine . findHost ( this . hostName )  ;", "assertSame ( this . hostName ,    result . getName (  )  )  ;", "assertSame ( this . engine ,    result . get (  )  )  ;", "assertNull ( this . engine . findHost (  \" no - such - host \"  )  )  ;", "}", "METHOD_END"], "methodName": ["findHost"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "Iterator < Connector >    results    =    this . engine . getConnectors (  )  . iterator (  )  ;", "assertTrue ( results . hasNext (  )  )  ;", "Connector   connector    =    results . next (  )  ;", "String   listenerName    =     \" default \"  ;", "assertSame ( listenerName ,    connector . toString (  )  )  ;", "assertFalse ( results . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["getConnectors"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . hostName ,    this . engine . getDefaultHost (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultHost"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "Iterator < Host >    results    =    this . engine . getHosts (  )  . iterator (  )  ;", "assertTrue ( results . hasNext (  )  )  ;", "Host   host    =    results . next (  )  ;", "assertSame ( this . hostName ,    host . getName (  )  )  ;", "assertSame ( this . engine ,    host . get (  )  )  ;", "assertFalse ( results . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["getHosts"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . route ,    this . engine . getJvmRoute (  )  )  ;", "}", "METHOD_END"], "methodName": ["getJvmRoute"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . serverName ,    this . engine . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . connector ,    this . engine . getProxyConnector (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProxyConnector"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEngineTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   UndertowContext ( deployment ,    new   UndertowHost ( host ,    new   UndertowEngine ( host . getServer (  )  . getValue (  )  ,    this . configuration . getUndertowService (  )  ,    this . connector )  )  )  ;", "}", "METHOD_END"], "methodName": ["createContext"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEventHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   LocationContext ( contextPath ,    new   UndertowHost ( host ,    new   UndertowEngine ( host . getServer (  )  . getValue (  )  ,    this . configuration . getUndertowService (  )  ,    this . connector )  )  )  ;", "}", "METHOD_END"], "methodName": ["createContext"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEventHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "ContainerEventHandler   handler    =    this . configuration . getContainerEventHandler (  )  ;", "handler . add ( context )  ;", "handler . start ( context )  ;", "this . contexts . add ( context )  ;", "}", "METHOD_END"], "methodName": ["onStart"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEventHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "ContainerEventHandler   handler    =    this . configuration . getContainerEventHandler (  )  ;", "handler . stop ( context )  ;", "handler . remove ( context )  ;", "this . contexts . remove ( context )  ;", "}", "METHOD_END"], "methodName": ["onStop"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowEventHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "Deployment   deployment    =    mock ( Deployment . class )  ;", "DeploymentInfo   info    =    new   DeploymentInfo (  )  ;", "String   expectedPath    =     \"  \"  ;", "info . setContextPath ( expectedPath )  ;", "HttpHandler   handler    =    mock ( HttpHandler . class )  ;", "when ( deployment . getDeploymentInfo (  )  )  . thenReturn ( info )  ;", "this . u . registerDeployment ( deployment ,    handler )  ;", "Context   result    =    this . host . findContext ( expectedPath )  ;", "assertSame ( this . host ,    result . getHost (  )  )  ;", "assertSame ( expectedPath ,    result . getPath (  )  )  ;", "result    =    this . host . findContext (  \" unknown \"  )  ;", "assertNull ( result )  ;", "}", "METHOD_END"], "methodName": ["findContext"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowHostTestCase"}, {"methodBody": ["METHOD_START", "{", "Set < String >    result    =    this . host . getAliases (  )  ;", "assertTrue ( result . toString (  )  ,    result . contains ( this . hostName )  )  ;", "assertTrue ( result . toString (  )  ,    result . contains ( this . alias )  )  ;", "}", "METHOD_END"], "methodName": ["getAliases"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowHostTestCase"}, {"methodBody": ["METHOD_START", "{", "Deployment   deployment    =    mock ( Deployment . class )  ;", "DeploymentInfo   info    =    new   DeploymentInfo (  )  ;", "String   expectedPath    =     \"  \"  ;", "info . setContextPath ( expectedPath )  ;", "HttpHandler   handler    =    mock ( HttpHandler . class )  ;", "when ( deployment . getDeploymentInfo (  )  )  . thenReturn ( info )  ;", "this . u . registerDeployment ( deployment ,    handler )  ;", "Iterator < Context >    result    =    this . host . getContexts (  )  . iterator (  )  ;", "assertTrue ( result . hasNext (  )  )  ;", "Context   context    =    result . next (  )  ;", "assertSame ( this . host ,    context . getHost (  )  )  ;", "assertSame ( expectedPath ,    context . getPath (  )  )  ;", "assertFalse ( result . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["getContexts"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowHostTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . engine ,    this . host . getEngine (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEngine"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowHostTestCase"}, {"methodBody": ["METHOD_START", "{", "assertSame ( this . hostName ,    this . host . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowHostTestCase"}, {"methodBody": ["METHOD_START", "{", "Iterator < Engine >    engines    =    this . server . getEngines (  )  . iterator (  )  ;", "assertTrue ( engines . hasNext (  )  )  ;", "Engine   engine    =    engines . next (  )  ;", "assertSame ( this . connector ,    engine . getProxyConnector (  )  )  ;", "assertFalse ( engines . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEngines"], "fileName": "org.wildfly.mod_cluster.undertow.UndertowServerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BytesReceivedStreamSourceConduit . bytesReceived . longValue (  )  ;", "}", "METHOD_END"], "methodName": ["getBytesReceived"], "fileName": "org.wildfly.mod_cluster.undertow.metric.BytesReceivedStreamSourceConduit"}, {"methodBody": ["METHOD_START", "{", "return   BytesSentStreamSinkConduit . bytesSent . longValue (  )  ;", "}", "METHOD_END"], "methodName": ["getBytesSent"], "fileName": "org.wildfly.mod_cluster.undertow.metric.BytesSentStreamSinkConduit"}, {"methodBody": ["METHOD_START", "{", "return   RequestCountHttpHandler . requestCount . longValue (  )  ;", "}", "METHOD_END"], "methodName": ["getRequestCount"], "fileName": "org.wildfly.mod_cluster.undertow.metric.RequestCountHttpHandler"}, {"methodBody": ["METHOD_START", "{", "return   RunningRequestsHttpHandler . runningCount . intValue (  )  ;", "}", "METHOD_END"], "methodName": ["getRunningRequestCount"], "fileName": "org.wildfly.mod_cluster.undertow.metric.RunningRequestsHttpHandler"}]