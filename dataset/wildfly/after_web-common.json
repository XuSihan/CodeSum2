[{"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   containsValue ( value )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "int   hash    =    hashOf ( key )  ;", "return   segmentFor ( hash )  . containsKey ( key ,    hash )  ;", "}", "METHOD_END"], "methodName": ["containsKey"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   new   NullPointerException (  )  ;", "final    . Segment < K ,    V >  [  ]    segments    =    this . segments ;", "int [  ]    mc    =    new   int [ segments . length ]  ;", "for    ( int   k    =     0  ;    k    <     (  . RETRIES _ BEFORE _ LOCK )  ;     +  + k )     {", "int   mcsum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "mcsum    +  =    mc [ i ]     =    segments [ i ]  . modCount ;", "if    ( segments [ i ]  . containsValue ( value )  )", "return   true ;", "}", "boolean   cleanSweep    =    true ;", "if    ( mcsum    !  =     0  )     {", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "if    (  ( mc [ i ]  )     !  =     ( segments [ i ]  . modCount )  )     {", "cleanSweep    =    false ;", "break ;", "}", "}", "}", "if    ( cleanSweep )", "return   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . lock (  )  ;", "boolean   found    =    false ;", "try    {", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "if    ( segments [ i ]  . containsValue ( value )  )     {", "found    =    true ;", "break ;", "}", "}", "}    finally    {", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . unlock (  )  ;", "}", "return   found ;", "}", "METHOD_END"], "methodName": ["containsValue"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   new   ValueIterator (  )  ;", "}", "METHOD_END"], "methodName": ["elements"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "Set < Map . Entry < K ,    V >  >    es    =    entrySet ;", "return   es    !  =    null    ?    es    :     ( entrySet    =    new   EntrySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["entrySet"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "int   hash    =    hashOf ( key )  ;", "return   segmentFor ( hash )  . get ( key ,    hash )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "h    +  =     ( h    <  <     1  5  )     ^     -  1  2  9  3  1  ;", "h    ^  =    h    >  >  >     1  0  ;", "h    +  =    h    <  <     3  ;", "h    ^  =    h    >  >  >     6  ;", "h    +  =     ( h    <  <     2  )     +     ( h    <  <     1  4  )  ;", "turn   h    ^     ( h    >  >  >     1  6  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   ConcurrentReferenceHashMap . hash (  ( identityComparisons    ?    System . identityHashCode ( key )     :    key . hashCode (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hashOf"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "final   ConcurrentReferenceHashMap . Segment < K ,    V >  [  ]    segments    =    this . segments ;", "int [  ]    mc    =    new   int [ segments . length ]  ;", "int   mcsum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "if    (  ( segments [ i ]  . count )     !  =     0  )", "return   false ;", "else", "mcsum    +  =    mc [ i ]     =    segments [ i ]  . modCount ;", "}", "if    ( mcsum    !  =     0  )     {", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "if    (  (  ( segments [ i ]  . count )     !  =     0  )     |  |     (  ( mc [ i ]  )     !  =     ( segments [ i ]  . modCount )  )  )", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "Set < K >    ks    =    keySet ;", "retn   ks    !  =    null    ?    ks    :     ( keySet    =    new   KeySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["keySet"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   new   KeyIterator (  )  ;", "}", "METHOD_END"], "methodName": ["keys"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . removeStale (  )  ;", "}", "METHOD_END"], "methodName": ["purgeStaleEntries"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   new   NullPointerException (  )  ;", "int   h    =    hOf ( key )  ;", "return   segmentFor ( h )  . put ( key ,    h ,    value ,    false )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry <  ?    extends   K ,     ?    extends   V >    e    :    m . entrySet (  )  )", "put ( e . getKey (  )  ,    e . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["putAll"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   new   NullPointerException (  )  ;", "int   h    =    hOf ( key )  ;", "return   segmentFor ( h )  . put ( key ,    h ,    value ,    true )  ;", "}", "METHOD_END"], "methodName": ["putIfAbsent"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "s . defaultReadObject (  )  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "segments [ i ]  . setTable ( new    . HashEntry [  1  ]  )  ;", "}", "for    (  ;     ;  )     {", "K   key    =     (  ( K )     ( s . readObject (  )  )  )  ;", "V   value    =     (  ( V )     ( s . readObject (  )  )  )  ;", "if    ( key    =  =    null )", "break ;", "put ( key ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "int   hash    =    hashOf ( key )  ;", "return   segmentFor ( hash )  . remove ( key ,    hash ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "int   hash    =    hashOf ( key )  ;", "if    ( value    =  =    null )", "return   false ;", "return    ( segmentFor ( hash )  . remove ( key ,    hash ,    value ,    false )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   new   NullPointerException (  )  ;", "int   h    =    hOf ( key )  ;", "return   segmentFor ( h )  . replace ( key ,    h ,    value )  ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "if    (  ( oldValue    =  =    null )     |  |     ( newValue    =  =    null )  )", "throw   new   NullPointerException (  )  ;", "int   h    =    hOf ( key )  ;", "return   segmentFor ( h )  . replace ( key ,    h ,    oldValue ,    newValue )  ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   segments [  (  ( hash    >  >  >     ( segmentShift )  )     &     ( segmentMask )  )  ]  ;", "}", "METHOD_END"], "methodName": ["segmentFor"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "final   ConcurrentReferenceHashMap . Segment < K ,    V >  [  ]    segments    =    this . segments ;", "long   sum    =     0  ;", "long   check    =     0  ;", "int [  ]    mc    =    new   int [ segments . length ]  ;", "for    ( int   k    =     0  ;    k    <     ( ConcurrentReferenceHashMap . RETRIES _ BEFORE _ LOCK )  ;     +  + k )     {", "check    =     0  ;", "sum    =     0  ;", "int   mcsum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "sum    +  =    segments [ i ]  . count ;", "mcsum    +  =    mc [ i ]     =    segments [ i ]  . modCount ;", "}", "if    ( mcsum    !  =     0  )     {", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )     {", "check    +  =    segments [ i ]  . count ;", "if    (  ( mc [ i ]  )     !  =     ( segments [ i ]  . modCount )  )     {", "check    =     -  1  ;", "break ;", "}", "}", "}", "if    ( check    =  =    sum )", "break ;", "}", "if    ( check    !  =    sum )     {", "sum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . lock (  )  ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "sum    +  =    segments [ i ]  . count ;", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;     +  + i )", "segments [ i ]  . unlock (  )  ;", "}", "if    ( sum    >     ( Integer . MAX _ VALUE )  )", "return   Integer . MAX _ VALUE ;", "else", "return    (  ( int )     ( sum )  )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "Collection < V >    vs    =    values ;", "return   vs    !  =    null    ?    vs    :     ( values    =    new   Values (  )  )  ;", "}", "METHOD_END"], "methodName": ["values"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "s . defaultWriteObject (  )  ;", "for    ( int   k    =     0  ;    k    <     ( segments . length )  ;     +  + k )     {", ". Segment < K ,    V >    seg    =    segments [ k ]  ;", "seg . lock (  )  ;", "try    {", ". HashEntry < K ,    V >  [  ]    tab    =    seg . table ;", "for    ( int   i    =     0  ;    i    <     ( tab . length )  ;     +  + i )     {", "for    (  . HashEntry < K ,    V >    e    =    tab [ i ]  ;    e    !  =    null ;    e    =    e . next )     {", "K   key    =    e . key (  )  ;", "if    ( key    =  =    null )", "continue ;", "s . writeObject ( key )  ;", "s . writeObject ( e . value (  )  )  ;", "}", "}", "}    finally    {", "seg . unlock (  )  ;", "}", "}", "s . writeObject ( null )  ;", "s . writeObject ( null )  ;", "}", "METHOD_END"], "methodName": ["writeObject"], "fileName": "org.jboss.as.web.common.ConcurrentReferenceHashMap"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.web.common.ServletContextAttribute"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.web.common.ServletContextAttribute"}, {"methodBody": ["METHOD_START", "{", "final   List < TldMetaData >    metadata    =    new   ArrayList < TldMetaData >  (  )  ;", "try    {", "ModuleClassLoader   jstl    =    Module . getModuleFromCallerModuleLoader ( ModuleIdentifier . create (  \" api \"  )  )  . getClassLoader (  )  ;", "for    ( String   tld    :     . JSTL _ TAGLIBS )     {", "InputStream   is    =    jstl . getResourceAsStream (  (  \" META - INF /  \"     +    tld )  )  ;", "if    ( is    !  =    null )     {", "TldMetaData   tldMetaData    =    parseTLD ( is )  ;", "metadata . add ( tldMetaData )  ;", "}", "}", "}    catch    ( ModuleLoadException   e )     {", "}    catch    ( Exception   e )     {", "}", "List < TldMetaData >    additionalSharedTlds    =    deploymentUnit . getAttachment (  . ATTACHMENT _ KEY )  ;", "if    ( additionalSharedTlds    !  =    null )     {", "metadata . addAll ( additionalSharedTlds )  ;", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getSharedTlds"], "fileName": "org.jboss.as.web.common.SharedTldsMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "inputFactory . setXMLResolver ( NoopXMLResolver . create (  )  )  ;", "XMLStreamReader   xmlReader    =    inputFactory . createXMLStreamReader ( is )  ;", "return   TldParser . parse ( xmlReader )  ;", "}    finally    {", "try    {", "if    ( is    !  =    null )     {", "is . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["parseTLD"], "fileName": "org.jboss.as.web.common.SharedTldsMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "return   StartupContext . INJECTION _ CONTAINER . get (  )  ;", "}", "METHOD_END"], "methodName": ["getInjectionContainer"], "fileName": "org.jboss.as.web.common.StartupContext"}, {"methodBody": ["METHOD_START", "{", "StartupContext . INJECTION _ CONTAINER . set ( injectionContainer )  ;", "}", "METHOD_END"], "methodName": ["setInjectionContainer"], "fileName": "org.jboss.as.web.common.StartupContext"}, {"methodBody": ["METHOD_START", "{", "this . additionalDependencies . add ( serviceName )  ;", "}", "METHOD_END"], "methodName": ["addAdditionalDependency"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( additionalDependencies )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalDependencies"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   additionalModuleAnnotationsMetadata ;", "}", "METHOD_END"], "methodName": ["getAdditionalModuleAnnotationsMetadata"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   annotationsMetaData ;", "}", "METHOD_END"], "methodName": ["getAnnotationsMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   jbossWebMetaData ;", "}", "METHOD_END"], "methodName": ["getJBossWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   mergedJBossWebMetaData ;", "}", "METHOD_END"], "methodName": ["getMergedJBossWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   order ;", "}", "METHOD_END"], "methodName": ["getOrder"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   overlays ;", "}", "METHOD_END"], "methodName": ["getOverlays"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   scis ;", "}", "METHOD_END"], "methodName": ["getScis"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   tempDir ;", "}", "METHOD_END"], "methodName": ["getTempDir"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   webFragmentsMetaData ;", "}", "METHOD_END"], "methodName": ["getWebFragmentsMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   webMetaData ;", "}", "METHOD_END"], "methodName": ["getWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   noOrder ;", "}", "METHOD_END"], "methodName": ["isNoOrder"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . additionalModuleAnnotationsMetadata    =    additionalModuleAnnotationsMetadata ;", "}", "METHOD_END"], "methodName": ["setAdditionalModuleAnnotationsMetadata"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . annotationsMetaData    =    annotationsMetaData ;", "}", "METHOD_END"], "methodName": ["setAnnotationsMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . jbossWebMetaData    =    jbossWebMetaData ;", "}", "METHOD_END"], "methodName": ["setJBossWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . mergedJBossWebMetaData    =    mergedJBossWebMetaData ;", "}", "METHOD_END"], "methodName": ["setMergedJBossWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . noOrder    =    noOrder ;", "}", "METHOD_END"], "methodName": ["setNoOrder"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . order    =    order ;", "}", "METHOD_END"], "methodName": ["setOrder"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . overlays    =    overlays ;", "}", "METHOD_END"], "methodName": ["setOverlays"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . scis    =    scis ;", "}", "METHOD_END"], "methodName": ["setScis"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . tempDir    =    tempDir ;", "}", "METHOD_END"], "methodName": ["setTempDir"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . webFragmentsMetaData    =    webFragmentsMetaData ;", "}", "METHOD_END"], "methodName": ["setWebFragmentsMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "this . webMetaData    =    webMetaData ;", "}", "METHOD_END"], "methodName": ["setWebMetaData"], "fileName": "org.jboss.as.web.common.WarMetaData"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isIntercepted"], "fileName": "org.jboss.as.web.common.WebComponentDescription"}, {"methodBody": ["METHOD_START", "{", "final   ManagedReference   reference    =    instanceMap . remove ( instance )  ;", "if    ( reference    !  =    null )     {", "reference . release (  )  ;", "}", "}", "METHOD_END"], "methodName": ["destroyInstance"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "return   componentRegistry ;", "}", "METHOD_END"], "methodName": ["getComponentRegistry"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "final   ManagedReferenceFactory   factory    =    componentRegistry . createInstanceFactory ( clazz )  ;", "ManagedReference   reference    =    factory . getReference (  )  ;", "if    ( reference    !  =    null )     {", "instanceMap . put ( reference . getInstance (  )  ,    reference )  ;", "return   reference . getInstance (  )  ;", "}", "return   clazz . newInstance (  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "final   ManagedReference   reference    =    componentRegistry . createInstance ( arg 0  )  ;", "if    ( reference    !  =    null )     {", "instanceMap . put ( arg 0  ,    reference )  ;", "}", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "return   newInstance ( classloader . loadClass ( className )  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "return   newInstance ( cl . loadClass ( className )  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.web.common.WebInjectionContainer"}, {"methodBody": ["METHOD_START", "{", "initParams . put ( name ,    value )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addInitParam"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . urlMappings . add ( mapping )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addUrlMapping"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . urlMappings . addAll ( Arrays . asList ( mappings )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addUrlMappings"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . urlMappings . addAll ( mappings )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addUrlMappings"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( initParams )  ;", "}", "METHOD_END"], "methodName": ["getInitParams"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   servlet ;", "}", "METHOD_END"], "methodName": ["getServlet"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   servletClass ;", "}", "METHOD_END"], "methodName": ["getServletClass"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   servletName ;", "}", "METHOD_END"], "methodName": ["getServletName"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( urlMappings )  ;", "}", "METHOD_END"], "methodName": ["getUrlMappings"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "return   forceInit ;", "}", "METHOD_END"], "methodName": ["isForceInit"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . forceInit    =    forceInit ;", "}", "METHOD_END"], "methodName": ["setForceInit"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . servlet    =    servlet ;", "}", "METHOD_END"], "methodName": ["setServlet"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . servletClass    =    servletClass ;", "}", "METHOD_END"], "methodName": ["setServletClass"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "this . servletName    =    servletName ;", "}", "METHOD_END"], "methodName": ["setServletName"], "fileName": "org.jboss.as.web.host.ServletBuilder"}, {"methodBody": ["METHOD_START", "{", "allowRequestPredicates . add ( predicate )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addAllowedRequestPredicate"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "servlets . add ( servlet )  ;", "}", "METHOD_END"], "methodName": ["addServlet"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( allowRequestPredicates )  ;", "}", "METHOD_END"], "methodName": ["getAllowRequestPredicates"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   classLoader ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   contextRoot ;", "}", "METHOD_END"], "methodName": ["getContextRoot"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   documentRoot ;", "}", "METHOD_END"], "methodName": ["getDocumentRoot"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( servlets )  ;", "}", "METHOD_END"], "methodName": ["getServlets"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "this . classLoader    =    classLoader ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setClassLoader"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "this . contextRoot    =    contextRoot ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setContextRoot"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "this . documentRoot    =    documentRoot ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDocumentRoot"], "fileName": "org.jboss.as.web.host.WebDeploymentBuilder"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  \" session 1  . route 1  \"  ,    this . routing . format (  \" session 1  \"  ,     \" route 1  \"  )  )  ;", "assertEquals (  \" session 2  \"  ,    this . routing . format (  \" session 2  \"  ,     \"  \"  )  )  ;", "assertEquals (  \" session 3  \"  ,    this . routing . format (  \" session 3  \"  ,    null )  )  ;", "assertNull ( this . routing . format ( null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.jboss.as.web.session.SimpleRoutingSupportTestCase"}, {"methodBody": ["METHOD_START", "{", "Map . Entry < String ,    String >    result    =    this . routing . parse (  \" session 1  . route 1  \"  )  ;", "assertEquals (  \" session 1  \"  ,    result . getKey (  )  )  ;", "assertEquals (  \" route 1  \"  ,    result . getValue (  )  )  ;", "result    =    this . routing . parse (  \" session 2  \"  )  ;", "assertEquals (  \" session 2  \"  ,    result . getKey (  )  )  ;", "assertNull ( result . getValue (  )  )  ;", "result    =    this . routing . parse ( null )  ;", "assertNull ( result . getKey (  )  )  ;", "assertNull ( result . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.jboss.as.web.session.SimpleRoutingSupportTestCase"}, {"methodBody": ["METHOD_START", "{", "RoutingSupport   routing    =    mock ( RoutingSupport . class )  ;", "String   route    =     \" route \"  ;", "SessionIdentifierCodec   codec    =    new    ( routing ,    route )  ;", "String   result    =    codec . decode ( null )  ;", "assertNull ( result )  ;", "String   sessionId    =     \" session \"  ;", "when ( routing . parse ( sessionId )  )  . thenReturn ( new   AbstractMap . SimpleImmutableEntry < String ,    String >  ( sessionId ,    null )  )  ;", "result    =    codec . decode ( sessionId )  ;", "assertSame ( sessionId ,    result )  ;", "String   encodedSessionId    =     \" session . route \"  ;", "when ( routing . parse ( encodedSessionId )  )  . thenReturn ( new   AbstractMap . SimpleImmutableEntry ( sessionId ,    route )  )  ;", "result    =    codec . decode ( encodedSessionId )  ;", "assertSame ( sessionId ,    result )  ;", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "org.jboss.as.web.session.SimpleSessionIdentifierCodecTestCase"}, {"methodBody": ["METHOD_START", "{", "RoutingSupport   routing    =    mock ( RoutingSupport . class )  ;", "SessionIdentifierCodec   codec    =    new    ( routing ,    null )  ;", "String   sessionId    =     \" session \"  ;", "String   result    =    codec . encode ( sessionId )  ;", "assertNull ( sessionId ,    null )  ;", "String   route    =     \" route \"  ;", "codec    =    new    ( routing ,    route )  ;", "result    =    codec . encode ( null )  ;", "assertNull ( result )  ;", "String   encodedSessionId    =     \" session . route \"  ;", "when ( routing . format ( sessionId ,    route )  )  . thenReturn ( encodedSessionId )  ;", "result    =    codec . encode ( sessionId )  ;", "assertSame ( encodedSessionId ,    result )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "org.jboss.as.web.session.SimpleSessionIdentifierCodecTestCase"}]