[{"methodBody": ["METHOD_START", "{", "synchronized ( HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE )     {", "Map < URL ,    Map < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >  >    classesByURL    =    HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE . get ( pu )  ;", "if    ( classesByURL    =  =    null )     {", "classesByURL    =    new   HashMap < URL ,    Map < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >  >  (  )  ;", "HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE . put ( pu ,    classesByURL )  ;", "}", "Map < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >    classesByAnnotation    =    classesByURL . get ( jarToScan )  ;", "if    ( classesByAnnotation    =  =    null )     {", "classesByAnnotation    =    new   HashMap < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >  (  )  ;", "classesByURL . put ( jarToScan ,    classesByAnnotation )  ;", "}", "classesByAnnotation . put ( annotation ,    classes )  ;", "}", "}", "METHOD_END"], "methodName": ["cacheClasses"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "synchronized ( HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE )     {", "Map < URL ,    Set < Package >  >    packagesByUrl    =    HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE . get ( pu )  ;", "if    ( packagesByUrl    =  =    null )     {", "packagesByUrl    =    new   HashMap < URL ,    Set < Package >  >  (  )  ;", "HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE . put ( pu ,    packagesByUrl )  ;", "}", "packagesByUrl . put ( jarToScan ,    packages )  ;", "}", "}", "METHOD_END"], "methodName": ["cachePackages"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "synchronized ( HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE )     {", "HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE . remove ( pu )  ;", "}", "synchronized ( HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE )     {", "HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE . remove ( pu )  ;", "}", "}", "METHOD_END"], "methodName": ["cleanup"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "HibernateAnnotationScanner . PERSISTENCE _ UNIT _ METADATA _ TLS . remove (  )  ;", "}", "METHOD_END"], "methodName": ["clearThreadLocalPersistenceUnitMetadata"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "if    ( filePatterns . isEmpty (  )  )     {", "for    ( Set < NamedInputStream >    nims    :    map . values (  )  )", "result . addAll ( nims )  ;", "} else    {", "VirtualFile   root    =    null ;", "for    ( String   pattern    :    filePatterns )     {", "Set < NamedInputStream >    niss    =    map . get ( pattern )  ;", "if    ( niss    =  =    null )     {", "if    ( root    =  =    null )", "root    =    getFile ( jarToScan )  ;", "try    {", "List < VirtualFile >    children    =    root . getChildrenRecursively ( new   PatternFilter ( pattern )  )  ;", "niss    =    toNIS ( children )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "if    ( niss    !  =    null )", "result . addAll ( niss )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["findFiles"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "synchronized ( HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE )     {", "Map < URL ,    Map < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >  >    classesByURL    =    HibernateAnnotationScanner . CLASSES _ IN _ JAR _ CACHE . get ( pu )  ;", "if    ( classesByURL    =  =    null )     {", "return   Collections . emptySet (  )  ;", "}", "Map < Class <  ?    extends   Annotation >  ,    Set < Class <  ?  >  >  >    classesByAnnotation    =    classesByURL . get ( jarToScan )  ;", "if    ( classesByAnnotation    =  =    null )     {", "return   Collections . emptySet (  )  ;", "}", "Set < Class <  ?  >  >    classes    =    new   HashSet < Class <  ?  >  >  (  )  ;", "for    ( Class <  ?    extends   Annotation >    ann    :    annotationsToLookFor )     {", "Set < Class <  ?  >  >    classesForAnnotation    =    classesByAnnotation . get ( ann )  ;", "if    ( classesForAnnotation    !  =    null )     {", "classes . addAll ( classesForAnnotation )  ;", "}", "}", "return   classes ;", "}", "}", "METHOD_END"], "methodName": ["getCachedClasses"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "synchronized ( HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE )     {", "Map < URL ,    Set < Package >  >    packagesByUrl    =    HibernateAnnotationScanner . PACKAGES _ IN _ JAR _ CACHE . get ( pu )  ;", "if    ( packagesByUrl    =  =    null )     {", "return   Collections . emptySet (  )  ;", "}", "Set < Package >    packages    =    packagesByUrl . get ( jarToScan )  ;", "if    ( packages    =  =    null )     {", "return   Collections . emptySet (  )  ;", "}", "return   packages ;", "}", "}", "METHOD_END"], "methodName": ["getCachedPackages"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   VFS . getChild ( url . toURI (  )  )  ;", "}    catch    ( URISyntaxExcep   e )     {", "throw   new   IllegalArgumentExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "return   pu . getAnnotationIndex (  )  . get ( jarToScan )  ;", "}", "METHOD_END"], "methodName": ["getJarFileIndex"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "HibernateAnnotationScanner . PERSISTENCE _ UNIT _ METADATA _ TLS . set ( pu )  ;", "}", "METHOD_END"], "methodName": ["setThreadLocalPersistenceUnitMetadata"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "Set < NamedInputStream >    result    =    new   HashSet < NamedInputStream >  (  )  ;", "for    ( VirtualFile   file    :    files )     {", "NamedInputStream   nis    =    new   VirtualFileNamedInputStream ( file )  ;", "result . add ( nis )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["toNIS"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateAnnotationScanner"}, {"methodBody": ["METHOD_START", "{", "return   exact    ?    name . equals ( pattern )     :    name . endsWith ( pattern )  ;", "}", "METHOD_END"], "methodName": ["accepts"], "fileName": "org.jboss.as.jpa.hibernate4.HibernatePatternFilter"}, {"methodBody": ["METHOD_START", "{", "String   name    =     ( exact )     ?    file . getName (  )     :    file . getPathName (  )  ;", "return   accepts ( name )  ;", "}", "METHOD_END"], "methodName": ["accepts"], "fileName": "org.jboss.as.jpa.hibernate4.HibernatePatternFilter"}, {"methodBody": ["METHOD_START", "{", "HibernateAnnotationScanner . cleanup ( pu )  ;", "}", "METHOD_END"], "methodName": ["cleanup"], "fileName": "org.jboss.as.jpa.hibernate4.HibernatePersistenceProviderAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pu . getProperties (  )  . containsKey ( property )  )  )     {", "properties . put ( property ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["putPropertyIfAbsent"], "fileName": "org.jboss.as.jpa.hibernate4.HibernatePersistenceProviderAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mutableProperties . getProperty ( CACHE _ REGION _ PREFIX )  )     =  =    null )     {", "if    ( scopedPersistenceUnitName    !  =    null )     {", "mutableProperties . setProperty ( CACHE _ REGION _ PREFIX ,    scopedPersistenceUnitName )  ;", "}", "}", "String   regionFactory    =    mutableProperties . getProperty ( CACHE _ REGION _ FACTORY )  ;", "if    ( regionFactory    =  =    null )     {", "regionFactory    =     . DEFAULT _ REGION _ FACTORY ;", "mutableProperties . setProperty ( CACHE _ REGION _ FACTORY ,    regionFactory )  ;", "}", "if    ( regionFactory . equals (  . DEFAULT _ REGION _ FACTORY )  )     {", "String   container    =    mutableProperties . getProperty ( InfinispanRegionFactory . CACHE _ CONTAINER )  ;", "if    ( container    =  =    null )     {", "container    =    InfinispanRegionFactory . DEFAULT _ CACHE _ CONTAINER ;", "mutableProperties . setProperty ( InfinispanRegionFactory . CACHE _ CONTAINER ,    container )  ;", "}", "Properties   cacheSettings    =    new   Properties (  )  ;", "cacheSettings . setProperty (  . CONTAINER ,    container )  ;", "cacheSettings . setProperty (  . CACHES ,    String . join (  \"     \"  ,     . findCaches ( mutableProperties )  )  )  ;", "Notification . addCacheDependencies ( INFINISPAN ,    cacheSettings )  ;", "}", "}", "METHOD_END"], "methodName": ["addSecondLevelCacheDependencies"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateSecondLevelCache"}, {"methodBody": ["METHOD_START", "{", "Set < String >    caches    =    new   HashSet <  >  (  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . ENTITY _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . COLLECTION _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . NATURAL _ ID _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "if    ( Boolean . parseBoolean ( properties . getProperty ( USE _ QUERY _ CACHE )  )  )     {", "caches . add ( properties . getProperty ( InfinispanRegionFactory . QUERY _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ QUERY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . TIMESTAMPS _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ QUERY _ RESOURCE )  )  ;", "}", "int   length    =    InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . length (  )  ;", "String   customRegionPrefix    =     ( InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . substring (  0  ,     ( length    -     3  )  )  )     +     ( properties . getProperty ( CACHE _ REGION _ PREFIX ,     \"  \"  )  )  ;", "String   customRegionSuffix    =    InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . substring (  ( length    -     4  )  ,    length )  ;", "for    ( String   propertyName    :    properties . stringPropertyNames (  )  )     {", "if    (  ( propertyName . startsWith ( customRegionPrefix )  )     &  &     ( propertyName . endsWith ( customRegionSuffix )  )  )     {", "caches . add ( properties . getProperty ( propertyName )  )  ;", "}", "}", "return   caches ;", "}", "METHOD_END"], "methodName": ["findCaches"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateSecondLevelCache"}, {"methodBody": ["METHOD_START", "{", "return   file . openStream (  )  ;", "}", "METHOD_END"], "methodName": ["getLazyStream"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateVirtualFileNamedInputStream"}, {"methodBody": ["METHOD_START", "{", "if    ( file    =  =    null )", "throw   JPA _ LOGGER . nullVar (  \" file \"  )  ;", "return   file . get (  )  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.jboss.as.jpa.hibernate4.HibernateVirtualFileNamedInputStream"}, {"methodBody": ["METHOD_START", "{", "PathAddress   pathAddress    =    getPathAddress ( args )  ;", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   EntityManagerFactoryAccess )     {", "EntityManagerFactoryAccess   entityManagerFactoryAccess    =     (  ( EntityManagerFactoryAccess )     ( arg )  )  ;", "return   entityManagerFactoryAccess . entityManagerFactory ( pathAddress . getValue ( Hibernate . PROVIDER _ LABEL )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactory"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   EntityMrFactoryAccess )     {", "EntityMrFactoryAccess   entityMrFactoryAccess    =     (  ( EntityMrFactoryAccess )     ( arg )  )  ;", "return   entityMrFactoryAccess ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactoryAccess"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   PathAddress )     {", "return    (  ( PathAddress )     ( arg )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPathAddress"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   Name )     {", "Name   name    =     (  ( Name )     ( arg )  )  ;", "return   name . getName (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatisticName"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateCollectionStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . get ( collectionName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateCollectionStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "ManagerFactory   entityManagerFactoryImpl    =     (  ( ManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateEntityCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "String   scopedPersistenceUnitName    =    pathAddress . getValue ( HibernateStatistics . PROVIDER _ LABEL )  ;", "ManagerFactory   entityManagerFactoryImpl    =     (  ( ManagerFactory )     ( entityManagerFactoryaccess . entityManagerFactory ( scopedPersistenceUnitName )  )  )  ;", "if    ( entityManagerFactoryImpl    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . getSecondLevelCacheStatistics (  (  ( scopedPersistenceUnitName    +     \"  .  \"  )     +     ( pathAddress . getValue ( HibernateStatistics . ENTITYCACHE )  )  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateEntityCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "ManagerFactory   entityManagerFactoryImpl    =     (  ( ManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateEntityStatistics"}, {"methodBody": ["METHOD_START", "{", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . get ( entityName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateEntityStatistics"}, {"methodBody": ["METHOD_START", "{", "return   HibernateManagementAdaptor . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateManagementAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateQueryCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "String [  ]    originalQueryNames    =    sessionFactory . get (  )  . getQueries (  )  ;", "if    ( originalQueryNames    !  =    null )     {", "for    ( String   originalQueryName    :    originalQueryNames )     {", "if    ( QueryName . queryName ( originalQueryName )  . getDisplayName (  )  . equals ( displayQueryName )  )     {", "return   sessionFactory . get (  )  . getQuery ( originalQueryName )  ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateQueryCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "HibernateEntityManagerFactory   entityManagerFactoryImpl    =     (  ( HibernateEntityManagerFactory )     ( entityManagerFactory )  )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryImpl . getSessionFactory (  )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate4.management.HibernateStatistics"}, {"methodBody": ["METHOD_START", "{", "if    (  ( query    =  =    null )     |  |     (  ( query . length (  )  )     =  =     0  )  )     {", "return   query ;", "}", "StringBuilder   buff    =    new   StringBuilder ( query )  ;", ". subst ( buff ,     . SQL _ NE ,     . NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . NE _ BANG ,     . BANG _ NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . NE _ HAT ,     . HAT _ NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . LE ,     . LESS _ THAN _ EQUAL _  _  )  ;", ". subst ( buff ,     . GE ,     . GREATER _ THAN _ EQUAL _  _  )  ;", ". subst ( buff ,     . CONCAT ,     . CONCAT _  _  )  ;", ". subst ( buff ,     . LT ,     . LESS _ THAN _  _  )  ;", ". subst ( buff ,     . EQ ,     . EQUAL _  _  )  ;", ". subst ( buff ,     . GT ,     . GREATER _  _  )  ;", ". subst ( buff ,     . OPEN ,     . LEFT _ PAREN _  _  )  ;", ". subst ( buff ,     . CLOSE ,     . RIGHT _ PAREN _  _  )  ;", ". subst ( buff ,     . OPEN _ BRACKET ,     . LEFT _ BRACKET _  _  )  ;", ". subst ( buff ,     . CLOSE _ BRACKET ,     . RIGHT _ BRACKET _  _  )  ;", ". subst ( buff ,     . PLUS ,     . PLUS _  _  )  ;", ". subst ( buff ,     . MINUS ,     . MINUS _  _  )  ;", ". subst ( buff ,     . STAR ,     . STAR _  _  )  ;", ". subst ( buff ,     . DIV ,     . DIVIDE _  _  )  ;", ". subst ( buff ,     . MOD ,     . MODULUS _  _  )  ;", ". subst ( buff ,     . COLON ,     . COLON _  _  )  ;", ". subst ( buff ,     . PARAM ,     . PARAM _  _  )  ;", ". subst ( buff ,     . COMMA ,     . COMMA _  _  )  ;", ". subst ( buff ,     . SPACE ,     . SPACE _  _  )  ;", ". subst ( buff ,     . TAB ,     . TAB _  _  )  ;", ". subst ( buff ,     . NEWLINE ,     . NEWLINE _  _  )  ;", ". subst ( buff ,     . LINEFEED ,     . LINEFEED _  _  )  ;", ". subst ( buff ,     . QUOTE ,     . QUOTE _  _  )  ;", ". subst ( buff ,     . DQUOTE ,     . DQUOTE _  _  )  ;", ". subst ( buff ,     . TICK ,     . TICK _  _  )  ;", ". subst ( buff ,     . OPEN _ BRACE ,     . OPEN _ BRACE _  _  )  ;", ". subst ( buff ,     . CLOSE _ BRACE ,     . CLOSE _ BRACE _  _  )  ;", ". subst ( buff ,     . HAT ,     . HAT _  _  )  ;", ". subst ( buff ,     . AMPERSAND ,     . AMPERSAND _  _  )  ;", "return   buff . toString (  )  ;", "}", "METHOD_END"], "methodName": ["displayable"], "fileName": "org.jboss.as.jpa.hibernate4.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "return   displayQuery ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.jboss.as.jpa.hibernate4.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryName ( query )  ;", "}", "METHOD_END"], "methodName": ["queryName"], "fileName": "org.jboss.as.jpa.hibernate4.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "int   begin    =     0  ;", "int   end    =     0  ;", "while    (  ( end    =    stringBuilder . indexOf ( from ,    end )  )     !  =     (  -  1  )  )     {", "stringBuilder . delete ( end ,     ( end    +     ( from . length (  )  )  )  )  ;", "stringBuilder . insert ( end ,    to )  ;", "begin    =    end    +     ( to . length (  )  )  ;", "end    =    begin ;", "}", "}", "METHOD_END"], "methodName": ["subst"], "fileName": "org.jboss.as.jpa.hibernate4.management.QueryName"}]