[{"methodBody": ["METHOD_START", "{", "int   port    =     9  9  9  0  ;", "String   host    =     \" localhost \"  ;", "String   protocol    =     \" http - remoting \"  ;", "String   config    =    null ;", "try    {", "CommandLine   line    =     . parser . parse (  . options ,    args ,    false )  ;", "if    ( line . hasOption (  \" help \"  )  )     {", ". formatter . printHelp (  . usage ,     (  (  . NEW _ LINE )     +     ( JdrLogger . ROOT _ LOGGER . jdrDescriptionMessage (  )  )  )  ,     . options ,    null )  ;", "return ;", "}", "if    ( line . hasOption (  \" host \"  )  )     {", "host    =    line . getOptionValue (  \" host \"  )  ;", "}", "if    ( line . hasOption (  \" port \"  )  )     {", "port    =    Integer . parseInt ( line . getOptionValue (  \" port \"  )  )  ;", "}", "if    ( line . hasOption (  \" protocol \"  )  )     {", "protocol    =    line . getOptionValue (  \" protocol \"  )  ;", "}", "if    ( line . hasOption (  \" config \"  )  )     {", "config    =    line . getOptionValue (  \" config \"  )  ;", "}", "}    catch    ( ParseException   e )     {", "System . out . println ( e . getMessage (  )  )  ;", ". formatter . printHelp (  . usage ,     . options )  ;", "return ;", "}    catch    ( NumberFormatException   nfe )     {", "System . out . println ( nfe . getMessage (  )  )  ;", ". formatter . printHelp (  . usage ,     . options )  ;", "return ;", "}", "System . out . println (  \" Initializing   JBoss   Diagnostic   Reporter .  .  .  \"  )  ;", "CLI   cli    =    CLI . newInstance (  )  ;", "boolean   embedded    =    false ;", "JdrReport   report    =    null ;", "try    {", "System . out . println ( String . format (  \" Trying   to   connect   to    % s    % s :  % s \"  ,    protocol ,    host ,    port )  )  ;", "cli . connect ( protocol ,    host ,    port ,    null ,    null )  ;", "}    catch    ( IllegalStateException   ex )     {", "System . out . println (  \" Starting   embedded   server \"  )  ;", "String   startEmbeddedServer    =     \" embed - server    -  - std - out = echo    \"     +     (  ( config    !  =    null )     &  &     (  !  ( config . isEmpty (  )  )  )     ?     \"     -  - server - config =  \"     +    config    :     \"  \"  )  ;", "cli . getCommandContext (  )  . handleSafe ( startEmbeddedServer )  ;", "embedded    =    true ;", "}", "try    {", "Result   cmdResult    =    cli . cmd (  \"  / subsystem = jdr : generate - jdr - report (  )  \"  )  ;", "ModelNode   response    =    cmdResult . getResponse (  )  ;", "if    (  ( Operations . isSuccessfulOutcome ( response )  )     |  |     (  ! embedded )  )     {", ". reportFailure ( response )  ;", "ModelNode   result    =    response . get ( RESULT )  ;", "report    =    new   JdrReport ( result )  ;", "} else    {", "report    =     . standaloneCollect ( cli ,    protocol ,    host ,    port )  ;", "}", "}    catch    ( IllegalStateException   ise )     {", "System . out . println ( ise . getMessage (  )  )  ;", "report    =     . standaloneCollect ( cli ,    protocol ,    host ,    port )  ;", "}    finally    {", "if    ( cli    !  =    null )     {", "try    {", "if    ( embedded )", "cli . getCommandContext (  )  . handleSafe (  \" stop - embedded - server \"  )  ;", "else", "cli . disconnect (  )  ;", "}    catch    ( Exception   e )     {", "System . out . println (  (  \" Caught   exception   while   disconnecting :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "}", "}", ". printJdrReportInfo ( report )  ;", "System . exit (  0  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.jboss.as.jdr.CommandLineMain"}, {"methodBody": ["METHOD_START", "{", "if    ( report    !  =    null )     {", "System . out . println (  (  \" JDR   started :     \"     +     ( report . getFormattedStartTime (  )  )  )  )  ;", "System . out . println (  (  \" JDR   ended :     \"     +     ( report . getFormattedEndTime (  )  )  )  )  ;", "System . out . println (  (  \" JDR   location :     \"     +     ( report . getLocation (  )  )  )  )  ;", "System . out . flush (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printJdrReportInfo"], "fileName": "org.jboss.as.jdr.CommandLineMain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( node . get ( OUTCOME )  . asString (  )  . equals ( SUCCESS )  )  )     {", "final   String   msg ;", "if    ( node . hasDefined ( FAILURE _ DESCRIPTION )  )     {", "if    ( node . hasDefined ( OP )  )     {", "msg    =    String . format (  \" Operation    '  % s '    at   address    '  % s '    failed :     % s \"  ,    node . get ( OP )  ,    node . get ( OP _ ADDR )  ,    node . get ( FAILURE _ DESCRIPTION )  )  ;", "} else    {", "msg    =    String . format (  \" Operation   failed :     % s \"  ,    node . get ( FAILURE _ DESCRIPTION )  )  ;", "}", "} else    {", "msg    =    String . format (  \" Operation   failed :     % s \"  ,    node )  ;", "}", "throw   new   RuntimeException ( msg )  ;", "}", "}", "METHOD_END"], "methodName": ["reportFailure"], "fileName": "org.jboss.as.jdr.CommandLineMain"}, {"methodBody": ["METHOD_START", "{", "JdrReportService   reportService    =    new   JdrReportService (  )  ;", "JdrReport   report    =    null ;", "try    {", "report    =    reportService . staloneCollect ( cli ,    protocol ,    host ,    port )  ;", "}    catch    ( OperationFailedException   e )     {", "System . out . println (  (  \" Failed   to   complete   the   JDR   report :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "return   report ;", "}", "METHOD_END"], "methodName": ["standaloneCollect"], "fileName": "org.jboss.as.jdr.CommandLineMain"}, {"methodBody": ["METHOD_START", "{", "File   tmpDir    =    FileUtils . getTempDirectory (  )  ;", "baseDirectory    =    FileUtils . getFile ( tmpDir ,     \"  \"  )  ;", "FileUtils . forceMkdir ( baseDirectory )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.jboss.as.jdr.FSTreeTest"}, {"methodBody": ["METHOD_START", "{", "FileUtils . deleteDirectory ( baseDirectory )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.jboss.as.jdr.FSTreeTest"}, {"methodBody": ["METHOD_START", "{", "FSTree   tree    =    new   FSTree ( baseDirectory . getPath (  )  )  ;", "assertEquals ( tree . toString (  )  ,     \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["testTree"], "fileName": "org.jboss.as.jdr.FSTreeTest"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( endTime )     =  =    null )", "return    \"  \"  ;", "return    . DATE _ FORMAT . format ( endTime )  ;", "}", "METHOD_END"], "methodName": ["getFormattedEndTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( startTime )     =  =    null )", "return    \"  \"  ;", "return    . DATE _ FORMAT . format ( startTime )  ;", "}", "METHOD_END"], "methodName": ["getFormattedStartTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "return   jdrUuid ;", "}", "METHOD_END"], "methodName": ["getJdrUuid"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "return   location ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "setEndTime ( new   Date (  )  . getTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["setEndTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "endTime    =    date . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["setEndTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "this . endTime    =    endTime ;", "}", "METHOD_END"], "methodName": ["setEndTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "this . jdrUuid    =    jdrUuid ;", "String   jbossConfig    =    System . getProperty (  . JBOSS _ PROPERTY _ DIR )  ;", "Path   jbossConfigPath ;", "if    ( jbossConfig    =  =    null )     {", "String   jbossHome    =    System . getProperty (  . JBOSS _ HOME _ DIR )  ;", "Path   defaultDir    =    new   File ( jbossHome ,     . DEFAULT _ PROPERTY _ DIR )  . toPath (  )  ;", "if    ( Files . notExists ( defaultDir )  )     {", "JdrLogger . ROOT _ LOGGER . couldNotFindJDRPropertiesFile (  )  ;", "}", "jbossConfigPath    =    defaultDir . resolve (  . DATA _ DIR )  ;", "} else    {", "jbossConfigPath    =    new   File ( jbossConfig )  . toPath (  )  ;", "}", "Path   jdrPropertiesFilePath    =    jbossConfigPath . resolve ( Extension . SUBSYSTEM _ NAME )  . resolve (  . JDR _ PROPERTY _ FILE _ NAME )  ;", "Properties   jdrProperties    =    new   Properties (  )  ;", "try    {", "Files . createDirectories ( jdrPropertiesFilePath . getParent (  )  )  ;", "}    catch    ( IOException   e )     {", "JdrLogger . ROOT _ LOGGER . couldNotCreateJDRPropertiesFile ( e ,    jdrPropertiesFilePath )  ;", "}", "if    (  ( jdrUuid    =  =    null )     &  &     ( Files . exists ( jdrPropertiesFilePath )  )  )     {", "try    ( InputStream   in    =    Files . newInputStream ( jdrPropertiesFilePath )  )     {", "jdrProperties . load ( in )  ;", "this . jdrUuid    =    jdrProperties . getProperty (  . UUID _ NAME )  ;", "}    catch    ( IOException   e )     {", "JdrLogger . ROOT _ LOGGER . couldNotFindJDRPropertiesFile (  )  ;", "}", "} else    {", "try    ( OutputStream   fileOut    =    Files . newOutputStream ( jdrPropertiesFilePath ,    StandardOpenOption . CREATE )  )     {", "jdrProperties . setProperty (  . UUID _ NAME ,    jdrUuid )  ;", "jdrProperties . store ( fileOut ,     . JDR _ PROPERTIES _ COMMENT )  ;", "}    catch    ( IOException   e )     {", "JdrLogger . ROOT _ LOGGER . couldNotCreateJDRPropertiesFile ( e ,    jdrPropertiesFilePath )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setJdrUuid"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "this . location    =    location ;", "}", "METHOD_END"], "methodName": ["setLocation"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "setStartTime ( new   Date (  )  . getTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "startTime    =    date . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "this . startTime    =    startTime ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.jboss.as.jdr.JdrReport"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( JdrReportExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    JdrReportExtension . RESOURCE _ NAME ,    JdrReportExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.jdr.JdrReportExtension"}, {"methodBody": ["METHOD_START", "{", "SubsystemRegistration   subsystemRegistration    =    context . registerSubsystem ( JdrReportExtension . SUBSYSTEM _ NAME ,    JdrReportExtension . CURRENT _ MODEL _ VERSION )  ;", "ManagementResourceRegistration   root    =    subsystemRegistration . registerSubsystemModel ( JdrReportSubsystemDefinition . INSTANCE )  ;", "root . registerOperationHandler ( DEFINITION ,    INSTANCE )  ;", "if    ( context . isRuntimeOnlyRegistrationValid (  )  )     {", "root . registerOperationHandler ( JdrReportRequestHandler . DEFINITION ,    JdrReportRequestHandler . INSTANCE )  ;", "}", "subsystemRegistration . registerXMLElementWriter ( JdrReportSubsystemParser . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "org.jboss.as.jdr.JdrReportExtension"}, {"methodBody": ["METHOD_START", "{", "context . setSubsystemXmlMapping ( JdrReportExtension . SUBSYSTEM _ NAME ,    Namespace . CURRENT . getUriString (  )  ,     (  )     -  >    JdrReportSubsystemParser . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["initializeParsers"], "fileName": "org.jboss.as.jdr.JdrReportExtension"}, {"methodBody": ["METHOD_START", "{", "JdrReportService   service    =    new   JdrReportService (  )  ;", "return   target . addService ( JdrReportService . SERVICE _ NAME ,    service )  . addDependency ( SERVICE _ NAME ,    ServerEnvironment . class ,    service . serverEnvironmentValue )  . addDependency ( JBOSS _ SERVER _ CONTROLLER ,    ModelController . class ,    service . modelControllerValue )  . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "JdrRunner   runner    =    new   JdrRunner ( true )  ;", "serverEnvironment    =    serverEnvironmentValue . getValue (  )  ;", "runner . setJbossHomeDir ( serverEnvironment . getHomeDir (  )  . getAbsolutePath (  )  )  ;", "runner . setLocationDir ( serverEnvironment . getServerTempDir (  )  . getAbsolutePath (  )  )  ;", "runner . setControllerClient ( controllerClient )  ;", "runner . setHostControllerName ( serverEnvironment . getHostControllerName (  )  )  ;", "runner . setServerName ( serverEnvironment . getServerName (  )  )  ;", "return   runner . collect (  )  ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "return   this ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "return   new   JdrRunner ( cli ,    protocol ,    host ,    port ,    null ,    null )  . collect (  )  ;", "}", "METHOD_END"], "methodName": ["standaloneCollect"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "final   ThreadFactory   threadFactory    =    AccessController . doPrivileged ( new   PrivilegedAction < JBossThreadFactory >  (  )     {", "public   JBossThreadFactory   run (  )     {", "return   new   JBossThreadFactory ( new   ThreadGroup (  \" Collector - threads \"  )  ,    Boolean . FALSE ,    null ,     \"  % G    -     % t \"  ,    null ,    null )  ;", "}", "}  )  ;", "executorService    =    Executors . newCachedThreadPool ( threadFactory )  ;", "serverEnvironment    =    serverEnvironmentValue . getValue (  )  ;", "controllerClient    =    modelControllerValue . getValue (  )  . createClient ( executorService )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( executorService )     !  =    null )     {", "executorService . shutdownNow (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.jdr.JdrReportService"}, {"methodBody": ["METHOD_START", "{", "return   JdrReportSubsystemParser . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.jdr.JdrReportSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "ParseUtils . requireNoAttributes ( reader )  ;", "ParseUtils . requireNoContent ( reader )  ;", "final   ModelNode   subsystem    =    Util . createAddOperation ( PathAddress . pathAddress ( Extension . SUBSYSTEM _ PATH )  )  ;", "list . add ( subsystem )  ;", "}", "METHOD_END"], "methodName": ["readElement"], "fileName": "org.jboss.as.jdr.JdrReportSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "context . startSubsystemElement ( Namespace . CURRENT . getUriString (  )  ,    false )  ;", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeContent"], "fileName": "org.jboss.as.jdr.JdrReportSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    new   URI ( protocol ,    null ,    host ,    port ,    null ,    null ,    null )  ;", "return   protocol    =  =    null    ?    uri . toString (  )  . substring (  2  )     :    uri . toString (  )  ;", "}", "METHOD_END"], "methodName": ["constructUri"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "try    {", "ModelNode   operation    =    Operations . createReadAttributeOperation ( new   ModelNode (  )  . setEmptyList (  )  ,    PRODUCT _ NAME )  ;", "operation . get ( INCLUDE _ RUNTIME )  . set ( false )  ;", "ModelControllerClient   client    =    env . getClient (  )  ;", "if    ( client    =  =    null )     {", "client    =    env . getCli (  )  . getCommandContext (  )  . getModelControllerClient (  )  ;", "}", "ModelNode   result    =    client . execute ( operation )  ;", "if    ( Operations . isSuccessfulOutcome ( result )  )     {", "return   Operations . readResult ( result ) String (  )  ;", "}", "return    \" undefined \"  ;", "}    catch    ( IOException   e )     {", "return    \" undefined \"  ;", "}", "}", "METHOD_END"], "methodName": ["obtainProductName"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "try    {", "ModelNode   operation    =    Operations . createReadAttributeOperation ( new   ModelNode (  )  . setEmptyList (  )  ,    PRODUCT _ VERSION )  ;", "operation . get ( INCLUDE _ RUNTIME )  . set ( false )  ;", "ModelControllerClient   client    =    env . getClient (  )  ;", "if    ( client    =  =    null )     {", "client    =    env . getCli (  )  . getCommandContext (  )  . getModelControllerClient (  )  ;", "}", "ModelNode   result    =    client . execute ( operation )  ;", "if    ( Operations . isSuccessfulOutcome ( result )  )     {", "return   Operations . readResult ( result ) String (  )  ;", "}", "return    \" undefined \"  ;", "}    catch    ( IOException   e )     {", "return    \" undefined \"  ;", "}", "}", "METHOD_END"], "methodName": ["obtainProductVersion"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "try    {", "ModelNode   operation    =    Operations . createReadAttributeOperation ( new   ModelNode (  )  . setEmptyList (  )  ,    UUID )  ;", "operation . get ( INCLUDE _ RUNTIME )  . set ( true )  ;", "ModelControllerClient   client    =    env . getClient (  )  ;", "if    ( client    =  =    null )     {", "client    =    env . getCli (  )  . getCommandContext (  )  . getModelControllerClient (  )  ;", "}", "ModelNode   result    =    client . execute ( operation )  ;", "if    ( Operations . isSuccessfulOutcome ( result )  )     {", "return   Operations . readResult ( result ) String (  )  ;", "}", "return   null ;", "}    catch    ( IOException   ex )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["obtainServerUUID"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "this . env . setClient ( client )  ;", "}", "METHOD_END"], "methodName": ["setControllerClient"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "this . env . setHostControllerName ( name )  ;", "}", "METHOD_END"], "methodName": ["setHostControllerName"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "this . env . setJbossHome ( dir )  ;", "}", "METHOD_END"], "methodName": ["setJbossHomeDir"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "this . env . setOutputDirectory ( dir )  ;", "}", "METHOD_END"], "methodName": ["setReportLocationDir"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "this . env . setServerName ( name )  ;", "}", "METHOD_END"], "methodName": ["setServerName"], "fileName": "org.jboss.as.jdr.JdrRunner"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =     (  \"  < subsystem   xmlns =  \\  \"  \"     +     ( Namespace . CURRENT . getUriString (  )  )  )     +     \"  \\  \"    attr =  \\  \" wrong \\  \"  /  >  \"  ;", "super . parse ( subsystemXml )  ;", "}", "METHOD_END"], "methodName": ["testParseSubsystemWithBadAttribute"], "fileName": "org.jboss.as.jdr.JdrSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =     (  \"  < subsystem   xmlns =  \\  \"  \"     +     ( Namespace . CURRENT . getUriString (  )  )  )     +     \"  \\  \"  >  < invalid /  >  <  / subsystem >  \"  ;", "super . parse ( subsystemXml )  ;", "}", "METHOD_END"], "methodName": ["testParseSubsystemWithBadChild"], "fileName": "org.jboss.as.jdr.JdrSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "zf . cle (  )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["safeClose"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "VirtualFileFilter   blf    =    Filters . regexBlackList (  )  ;", "assertFalse ( blf . accepts ( VFS . getChild (  \"  / foo / bar / baz / mgmt - users . properties \"  )  )  )  ;", "assertFalse ( blf . accepts ( VFS . getChild (  \"  / foo / bar / baz / application - users . properties \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBlackListFilter"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "JdrEnvironment   env    =    new   JdrEnvironment (  )  ;", "env . setJHome (  \"  / foo / bar / baz \"  )  ;", "env . setHostControllerName (  \" host \"  )  ;", "env . setOutputDirectory (  \" target \"  )  ;", "String   name ;", "JdrZipFile   zf    =    new   JdrZipFile ( env )  ;", "try    {", "name    =    zf . name (  )  ;", "zf . close (  )  ;", "}    finally    {", "safeClose ( zf )  ;", "File   f    =    new   File ( zf . name (  )  )  ;", "f . delete (  )  ;", "}", "assertTrue ( name . endsWith (  \"  . zip \"  )  )  ;", "assertTrue ( name . contains (  \" host \"  )  )  ;", "assertTrue ( name . startsWith (  \" target \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testJdrZipName"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "String   propf    =     \" password =  1  2  3  4  5  6  \"  ;", "InputStream   is    =    new   ByteArrayInputStream ( propf . getBytes (  )  )  ;", "PatternSanitizer   s    =    new   PatternSanitizer (  \" password =  .  *  \"  ,     \" password =  *  \"  ,    Filters . TRUE )  ;", "InputStream   res    =    s . sanitize ( is )  ;", "byte [  ]    buf    =    new   byte [ revailable (  )  ]  ;", "res . read ( buf )  ;", "assertEquals (  \" password =  *  \"  ,    new   String ( buf )  )  ;", "}", "METHOD_END"], "methodName": ["testPatternSanitizer"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "VirtualFileFilter   filter    =    Filters . wildcard (  \"  *  \"  )  ;", "VirtualFile   good    =    VFS . getChild (  \"  / this / is / a / t . txt \"  )  ;", "assertTrue ( filter . accepts ( good )  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFilterAcceptAnything"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "VirtualFileFilter   filter    =    Filters . wildcard (  \"  / this * test . txt \"  )  ;", "VirtualFile   good    =    VFS . getChild (  \"  / this / is / a / test . txt \"  )  ;", "VirtualFile   bad 1     =    VFS . getChild (  \"  / that / is / a / test . txt \"  )  ;", "VirtualFile   bad 2     =    VFS . getChild (  \"  / this / is / a / test . xml \"  )  ;", "VirtualFile   win    =    VFS . getChild (  \"  / C :  / this / is / a / test . txt \"  )  ;", "VirtualFile   winbad    =    VFS . getChild (  \"  / C :  / this / is / a / test . xml \"  )  ;", "assertTrue ( filter . accepts ( good )  )  ;", "assertTrue ( filter . accepts ( win )  )  ;", "assertFalse ( filter . accepts ( bad 1  )  )  ;", "assertFalse ( filter . accepts ( bad 2  )  )  ;", "assertFalse ( filter . accepts ( winbad )  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFilterMiddleGlob"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "VirtualFileFilter   filter    =    Filters . wildcard (  \"  *  . txt \"  )  ;", "VirtualFile   good    =    VFS . getChild (  \"  / this / is / a / t . txt \"  )  ;", "VirtualFile   bad    =    VFS . getChild (  \"  / this / is / a / t . xml \"  )  ;", "VirtualFile   wingood    =    VFS . getChild (  \"  / C :  / this / is / a / t . txt \"  )  ;", "VirtualFile   winbad    =    VFS . getChild (  \"  / C :  / this / is / a / t . xml \"  )  ;", "assertTrue ( filter . accepts ( good )  )  ;", "assertFalse ( filter . accepts ( bad )  )  ;", "assertTrue ( filter . accepts ( wingood )  )  ;", "assertFalse ( filter . accepts ( winbad )  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFilterPrefixGlob"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "VirtualFileFilter   filter    =    Filters . wildcard (  \"  / this / is *  \"  )  ;", "VirtualFile   good    =    VFS . getChild (  \"  / this / is / a / t . txt \"  )  ;", "VirtualFile   bad    =    VFS . getChild (  \"  / that / is / a / t . txt \"  )  ;", "VirtualFile   wingood    =    VFS . getChild (  \"  / C :  / this / is / a / t . txt \"  )  ;", "VirtualFile   winbad    =    VFS . getChild (  \"  / C :  / that / is / a / t . txt \"  )  ;", "assertTrue ( filter . accepts ( good )  )  ;", "assertFalse ( filter . accepts ( bad )  )  ;", "assertTrue ( filter . accepts ( wingood )  )  ;", "assertFalse ( filter . accepts ( winbad )  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFilterSuffixGlob"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "String   xml    =     \"  < test >  < password > foobar <  / password >  <  / test >  \"  ;", "InputStream   is    =    new   ByteArrayInputStream ( xml . getBytes (  )  )  ;", "XMLSanitizer   s    =    new   XMLSanitizer (  \"  /  / password \"  ,    Filters . TRUE )  ;", "InputStream   res    =    s . sanitize ( is )  ;", "byte [  ]    buf    =    new   byte [ res . available (  )  ]  ;", "res . read ( buf )  ;", "assertEquals (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  < test >  < password /  >  <  / test >  \"  ,    new   String ( buf )  )  ;", "}", "METHOD_END"], "methodName": ["testXMLSanitizer"], "fileName": "org.jboss.as.jdr.JdrTestCase"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.jdr.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.jdr.Namespace"}, {"methodBody": ["METHOD_START", "{", "this . operation    =    operation ;", "return   this ;", "}", "METHOD_END"], "methodName": ["operation"], "fileName": "org.jboss.as.jdr.commands.CallAS7"}, {"methodBody": ["METHOD_START", "{", "this . parameters . put ( key ,    val )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["param"], "fileName": "org.jboss.as.jdr.commands.CallAS7"}, {"methodBody": ["METHOD_START", "{", "for    ( String   part    :    parts )     {", "this . resource . add ( part )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["resource"], "fileName": "org.jboss.as.jdr.commands.CallAS7"}, {"methodBody": ["METHOD_START", "{", "this . limit    =    limit ;", "return   this ;", "}", "METHOD_END"], "methodName": ["limit"], "fileName": "org.jboss.as.jdr.commands.CollectFiles"}, {"methodBody": ["METHOD_START", "{", "blacklistFilter . add ( pattern )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["omit"], "fileName": "org.jboss.as.jdr.commands.CollectFiles"}, {"methodBody": ["METHOD_START", "{", "for    ( Sanitizer   s    :    sanitizers )     {", "this . sanitizerdd ( s )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["sanitizer"], "fileName": "org.jboss.as.jdr.commands.CollectFiles"}, {"methodBody": ["METHOD_START", "{", "this . sorter    =    sorter ;", "return   this ;", "}", "METHOD_END"], "methodName": ["sorter"], "fileName": "org.jboss.as.jdr.commands.CollectFiles"}, {"methodBody": ["METHOD_START", "{", "try    {", "MessageDigest   alg    =    MessageDigest . getInstance (  \" md 5  \"  )  ;", "byte [  ]    buffer    =    Utils . toBytes ( f )  ;", "alg . update ( buffer )  ;", "String   sum    =    new   BigInteger (  1  ,    alg . digest (  )  )  . toString (  1  6  )  ;", "this . buffer . append (  (  (  (  (  (  ( f . getPathName (  )  . replace ( this . env . getJHome (  )  ,     \" JBOSSHOME \"  )  )     +     \"  \\ n \"  )     +    sum )     +     \"  \\ n \"  )     +     ( getManifestString ( f )  )  )     +     \"  =  =  =  \"  )  )  ;", "}    catch    ( ZipException   ze )     {", "}    catch    ( FileNotFoundException   fnfe )     {", "JdrLogger . ROOT _ LOGGER . debug ( fnfe )  ;", "}    catch    ( IOException   ioe )     {", "JdrLogger . ROOT _ LOGGER . debug ( ioe )  ;", "}", "}", "METHOD_END"], "methodName": ["check"], "fileName": "org.jboss.as.jdr.commands.JarCheck"}, {"methodBody": ["METHOD_START", "{", "try    {", "Automounter . mount ( file )  ;", "String   result    =    Utils . toString ( file . getChild ( Utils . MANIFEST _ NAME )  )  ;", "return   result    !  =    null    ?    result    :     \"  \"  ;", "}    catch    ( Exception   npe )     {", "JdrLogger . ROOT _ LOGGER . tef (  \" no   MANIFEST   present \"  )  ;", "return    \"  \"  ;", "}    finally    {", "if    ( Automounter . isMounted ( file )  )     {", "Automounteleanup ( file )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getManifestString"], "fileName": "org.jboss.as.jdr.commands.JarCheck"}, {"methodBody": ["METHOD_START", "{", "for    ( VirtualFile   f    :    root . getChildren (  )  )     {", "if    ( f . isDirectory (  )  )     {", "walk ( f )  ;", "} else    {", "c ( f )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["walk"], "fileName": "org.jboss.as.jdr.commands.JarCheck"}, {"methodBody": ["METHOD_START", "{", "this . env    =    env ;", "}", "METHOD_END"], "methodName": ["setEnvironment"], "fileName": "org.jboss.as.jdr.commands.JdrCommand"}, {"methodBody": ["METHOD_START", "{", "return   cli ;", "}", "METHOD_END"], "methodName": ["getCli"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   client ;", "}", "METHOD_END"], "methodName": ["getClient"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   host ;", "}", "METHOD_END"], "methodName": ["getHost"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   hostControllerName ;", "}", "METHOD_END"], "methodName": ["getHostControllerName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   jbossHome ;", "}", "METHOD_END"], "methodName": ["getJbossHome"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   productName ;", "}", "METHOD_END"], "methodName": ["getProductName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   productVersion ;", "}", "METHOD_END"], "methodName": ["getProductVersion"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   serverName ;", "}", "METHOD_END"], "methodName": ["getServerName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   zip ;", "}", "METHOD_END"], "methodName": ["getZip"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   isServerRunning ;", "}", "METHOD_END"], "methodName": ["isServerRunning"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . cli    =    cli ;", "}", "METHOD_END"], "methodName": ["setCli"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . client    =    client ;", "}", "METHOD_END"], "methodName": ["setClient"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . host    =    host ;", "}", "METHOD_END"], "methodName": ["setHost"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . hostControllerName    =    hostControllerName ;", "}", "METHOD_END"], "methodName": ["setHostControllerName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . jbossHome    =    jbossHome ;", "}", "METHOD_END"], "methodName": ["setJbossHome"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . password    =    password ;", "}", "METHOD_END"], "methodName": ["setPassword"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . port    =    port ;", "}", "METHOD_END"], "methodName": ["setPort"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . productName    =    productName ;", "}", "METHOD_END"], "methodName": ["setProductName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . productVersion    =    productVersion ;", "}", "METHOD_END"], "methodName": ["setProductVersion"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . serverName    =    serverName ;", "}", "METHOD_END"], "methodName": ["setServerName"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . isServerRunning    =    isServerRunning ;", "}", "METHOD_END"], "methodName": ["setServerRunning"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . username    =    username ;", "}", "METHOD_END"], "methodName": ["setUsername"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "this . zip    =    zip ;", "}", "METHOD_END"], "methodName": ["setZip"], "fileName": "org.jboss.as.jdr.commands.JdrEnvironment"}, {"methodBody": ["METHOD_START", "{", "for    ( Sanitizer   s    :    sanitizers )     {", "this . sanitizerdd ( s )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["sanitizer"], "fileName": "org.jboss.as.jdr.commands.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   major ;", "}", "METHOD_END"], "methodName": ["getMajor"], "fileName": "org.jboss.as.jdr.plugins.PluginId"}, {"methodBody": ["METHOD_START", "{", "return   minor ;", "}", "METHOD_END"], "methodName": ["getMinor"], "fileName": "org.jboss.as.jdr.plugins.PluginId"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.jdr.plugins.PluginId"}, {"methodBody": ["METHOD_START", "{", "return   release ;", "}", "METHOD_END"], "methodName": ["getRelease"], "fileName": "org.jboss.as.jdr.plugins.PluginId"}, {"methodBody": ["METHOD_START", "{", "String   baseName    =    f . getName (  )  ;", "String   size    =     . formatBytes ( f . getSize (  )  )  ;", "buf . append ( String . format ( fmt ,    padding ,     \"  +  -  -     \"  ,    size ,    baseName )  )  ;", "buf . append (  \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "return    (  ( double )     ( left )  )     /     (  ( double )     ( right )  )  ;", "}", "METHOD_END"], "methodName": ["div"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "if    ( size    >     ( Utils . ONE _ TB )  )     {", "return   String . format (  \"  %  .  1 fT \"  ,     . div ( size ,    Utils . ONE _ TB )  )  ;", "} else", "if    ( size    >     ( Utils . ONE _ GB )  )     {", "return   String . format (  \"  %  .  1 fG \"  ,     . div ( size ,    Utils . ONE _ GB )  )  ;", "} else", "if    ( size    >     ( Utils . ONE _ MB )  )     {", "return   String . format (  \"  %  .  1 fM \"  ,     . div ( size ,    Utils . ONE _ MB )  )  ;", "} else", "if    ( size    >     ( Utils . ONE _ KB )  )     {", "return   String . format (  \"  %  .  1 fK \"  ,     . div ( size ,    Utils . ONE _ KB )  )  ;", "} else    {", "return   String . format (  \"  % d \"  ,    size )  ;", "}", "}", "METHOD_END"], "methodName": ["formatBytes"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "return   buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "traverse ( dir ,    padding ,    false )  ;", "}", "METHOD_END"], "methodName": ["traverse"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "VirtualFile   path    =    VFS . getChild ( dir )  ;", "if    (  ! first )     {", "String    _ p    =    padding . substring (  0  ,     (  ( padding . length (  )  )     -     1  )  )  ;", "append ( path ,     _ p )  ;", "padding    +  =     \"           \"  ;", "} else    {", "buf . append ( path . getName (  )  )  ;", "buf . append (  \"  \\ n \"  )  ;", "}", "int   count    =     0  ;", "List < VirtualFile >    files    =    path . getChildren (  )  ;", "for    ( VirtualFile   f    :    files )     {", "count    +  =     1  ;", "if    ( f . getPathName (  )  . startsWith (  \"  .  \"  )  )     {", "continue ;", "} else", "if    ( f . isFile (  )  )     {", "append ( f ,    padding )  ;", "} else", "if    ( Us . isSymlink ( f )  )     {", "buf . append ( padding )  ;", "buf . append (  \"  +  -  -     \"  )  ;", "buf . append ( f . getName (  )  )  ;", "buf . append (  \"     -  >     \"  )  ;", "buf . append ( f . getPathName (  )  )  ;", "buf . append (  \"  \\ n \"  )  ;", "} else", "if    ( f . isDirectory (  )  )     {", "if    ( count    =  =     ( files . size (  )  )  )     {", "traverse ( f . getPathName (  )  ,     ( padding    +     \"     \"  )  )  ;", "} else    {", "traverse ( f . getPathName (  )  ,     ( padding    +     \"  |  \"  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["traverse"], "fileName": "org.jboss.as.jdr.util.FSTree"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    buffer    =    new   byte [  1  0  2  4  ]  ;", "try    {", "String   entryName    =     (  ( this . baseName )     +     \"  /  \"  )     +    path ;", "Entry   ze    =    new   Entry ( entryName )  ;", "zos . putNextEntry ( ze )  ;", "int   bytesRead    =    is . read ( buffer )  ;", "while    ( bytesRead    >     (  -  1  )  )     {", "zos . write ( buffer ,     0  ,    bytesRead )  ;", "bytesRead    =    is . read ( buffer )  ;", "}", "}    catch    ( Exception   ze )     {", "JdrLogger . ROOT _ LOGGER . debugf ( ze ,     \"  % s   is   already   in   the   zip \"  ,    path )  ;", "}    catch    ( Exception   e )     {", "JdrLogger . ROOT _ LOGGER . debugf ( e ,     \" Error   when   adding    % s \"  ,    path )  ;", "}    finally    {", "try    {", "zos . closeEntry (  )  ;", "}    catch    ( Exception   e )     {", "JdrLogger . ROOT _ LOGGER . debugf ( e ,     \" Error   when   closing   entry   for    % s \"  ,    path )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   name    =    new   StringBuilder (  \" sos _ strings /  \"  )  ;", "name . append ( this . env . getProductName (  )  . replace (  \"     \"  ,     \"  _  \"  )  . toLowerCase (  )  )  ;", "name . append (  \"  -  \"  )  ;", "name . append ( this . env . getProductVersion (  )  . split (  \"  \\  \\  .  \"  )  [  0  ]  )  ;", "name . append (  \"  /  \"  )  ;", "name . append ( path )  ;", "thidd ( new   ByteArrayInputStream ( content . getBytes (  )  )  ,    name . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "String   name    =     \" JBOSS _ HOME \"     +     ( file . getPhysicalFile (  )  . getAbsolutePath (  )  . substring ( this . jbossHome . length (  )  )  )  ;", "this . add ( is ,    name )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   name    =    new   StringBuilder (  \" sos _ strings /  \"  )  ;", "name . append ( this . env . getProductName (  )  . replace (  \"     \"  ,     \"  _  \"  )  . toLowerCase (  )  )  ;", "name . append (  \"  -  \"  )  ;", "name . append ( this . env . getProductVersion (  )  . split (  \"  \\  \\  .  \"  )  [  0  ]  )  ;", "name . append (  \"  /  \"  )  ;", "name . append ( path )  ;", "thidd ( stream ,    name . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addAsString"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "String   name    =     \" sos _ logs /  \"     +    logName ;", "thidd ( new   ByteArrayInputStream ( content . getBytes (  )  )  ,    name )  ;", "}", "METHOD_END"], "methodName": ["addLog"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "this . zos . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.jboss.as.jdr.util.JdrZipFile"}, {"methodBody": ["METHOD_START", "{", "ByteArrayOutputStream   output    =    new   ByteArrayOutputStream (  )  ;", "PrintWriter   writer    =    new   PrintWriter ( output )  ;", "String [  ]    lines    =    Utils . readLines ( in )  . toArray ( new   String [  0  ]  )  ;", "int   lineCount    =    lines . length ;", "for    ( int   i    =     0  ;    i    <    lineCount ;    i +  +  )     {", "Matcher   matcher    =    p . matcher ( lines [ i ]  )  ;", "writer . write ( matcher . replaceAll ( replacement )  )  ;", "if    ( i    <     ( lineCount    -     1  )  )     {", "writer . write ( Utils . LINE _ SEP )  ;", "}", "}", "writer . close (  )  ;", "return   new   ByteArrayInputStream ( output . toByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["sanitize"], "fileName": "org.jboss.as.jdr.util.PatternSanitizer"}, {"methodBody": ["METHOD_START", "{", "return   new   PatternSanitizer ( pattern ,    replacement ,    Filters . suffix (  \"  . properties \"  )  )  ;", "}", "METHOD_END"], "methodName": ["pattern"], "fileName": "org.jboss.as.jdr.util.Sanitizers"}, {"methodBody": ["METHOD_START", "{", "return   new   XMLSanitizer ( xpath ,    Filters . suffix (  \"  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["xml"], "fileName": "org.jboss.as.jdr.util.Sanitizers"}, {"methodBody": ["METHOD_START", "{", "File   file    =    vFile . getPhysicalFile (  )  ;", "if    (  . isWindows (  )  )     {", "return   false ;", "}", "File   fileInCanonicalDir    =    null ;", "if    (  ( file . getParent (  )  )     =  =    null )     {", "fileInCanonicalDir    =    file ;", "} else    {", "File   canonicalDir    =    file . getParentFile (  )  . getCanonicalFile (  )  ;", "fileInCanonicalDir    =    new   File ( canonicalDir ,    file . getName (  )  )  ;", "}", "if    ( fileInCanonicalDir . getCanonicalFile (  )  . equals ( fileInCanonicalDir . getAbsoluteFile (  )  )  )     {", "return   false ;", "} else    {", "return   true ;", "}", "}", "METHOD_END"], "methodName": ["isSymlink"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "return    ( Utils . SYS _ SEP )     =  =     ( Utils . WIN _ SEP )  ;", "}", "METHOD_END"], "methodName": ["isWindows"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "BufferedReader   reader    =    new   BufferedReader ( new   InputStreamReader ( input )  )  ;", "List < String >    result    =    new   ArrayList < String >  (  )  ;", "String   line    =    reader . readLine (  )  ;", "while    ( line    !  =    null )     {", "result . add ( line )  ;", "line    =    reader . readLine (  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["readLines"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( jf    !  =    null )     {", "jf . cle (  )  ;", "}", "}    catch    ( Exception   e )     {", "}", "}", "METHOD_END"], "methodName": ["safeClose"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( i !  =    null )     {", "iclo (  )  ;", "}", "}    catch    ( Exception   e )     {", "}", "}", "METHOD_END"], "methodName": ["safelyClose"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "long   leftToSkip    =    amount ;", "long   amountSkipped    =     0  ;", "whe    (  ( leftToSkip    >     0  )     &  &     ( amountSkipped    >  =     0  )  )     {", "amountSkipped    =    is . skip ( leftToSkip )  ;", "leftToSkip    -  =    amountSkipped ;", "}", "}", "METHOD_END"], "methodName": ["skip"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    buffer    =    new   byte [  1  0  2  4  ]  ;", "InputStream   is    =    r . openStream (  )  ;", "ByteArrayOutputStream   os    =    new   ByteArrayOutputStream (  )  ;", "int   bytesRead    =    is . read ( buffer )  ;", "while    ( bytesRead    >     (  -  1  )  )     {", "os . write ( buffer ,     0  ,    bytesRead )  ;", "bytesRead    =    is . read ( buffer )  ;", "}", ". safelyClose ( is )  ;", "return   os . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["toBytes"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "return   new   String ( Utils . toBytes ( r )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.jdr.util.Utils"}, {"methodBody": ["METHOD_START", "{", "int   targetIdx    =     0  ;", "int   targetEnd    =    target . length (  )  ;", "int   tokenIdx    =     0  ;", "int   tokenEnd    =    tokens . length ;", "while    (  (  ( tokenIdx    <    tokenEnd )     &  &     ( targetIdx    <    targetEnd )  )     &  &     ( targetIdx    >     (  -  1  )  )  )     {", "if    (  \"  *  \"  . equals ( tokens [ tokenIdx ]  )  )     {", "if    ( tokenIdx    =  =     ( tokenEnd    -     1  )  )     {", "targetIdx    =    targetEnd ;", "tokenIdx    =    tokenEnd ;", "} else    {", "targetIdx    =    target . indexOf ( tokens [  ( tokenIdx    +     1  )  ]  ,    targetIdx )  ;", "tokenIdx +  +  ;", "}", "} else    {", "if    ( target . substring ( targetIdx )  . startsWith ( tokens [ tokenIdx ]  )  )     {", "targetIdx    +  =    tokens [ tokenIdx ]  . length (  )  ;", "tokenIdx +  +  ;", "} else    {", "targetIdx    =     -  1  ;", "break ;", "}", "}", "}", "return    ( tokenIdx    =  =    tokenEnd )     &  &     ( targetIdx    =  =    targetEnd )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.jboss.as.jdr.util.WildcardPattern"}, {"methodBody": ["METHOD_START", "{", "return   new   WildcardPattern ( pattern )  . matches ( target )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.jboss.as.jdr.util.WildcardPattern"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    content    =    IOUtils . toByteArray ( in )  ;", "try    {", "Document   doc    =    builder . parse ( new   ByteArrayInputStream ( content )  )  ;", "doc . setXmlStandalone ( true )  ;", "Object   result    =    expression . evaluate ( doc ,    XPathConstants . NODESET )  ;", "NodeList   nodes    =     (  ( NodeList )     ( result )  )  ;", "for    ( int   i    =     0  ;    i    <     ( nodes . getLength (  )  )  ;    i +  +  )     {", "nodes . item ( i )  . setTextContent (  \"  \"  )  ;", "}", "DOMSource   source    =    new   DOMSource ( doc )  ;", "ByteArrayOutputStream   output    =    new   ByteArrayOutputStream (  )  ;", "StreamResult   outStream    =    new   StreamResult ( output )  ;", "transformer . transform ( source ,    outStream )  ;", "return   new   ByteArrayInputStream ( output . toByteArray (  )  )  ;", "}    catch    ( Exception   e )     {", "JdrLogger . ROOT _ LOGGER . debug (  \" Error   while   sing   an   xml   document \"  ,    e )  ;", "return   new   ByteArrayInputStream ( content )  ;", "}", "}", "METHOD_END"], "methodName": ["sanitize"], "fileName": "org.jboss.as.jdr.util.XMLSanitizer"}, {"methodBody": ["METHOD_START", "{", "return   new   VirtualFileFilter (  )     {", "@ Override", "public   boolean   accepts ( VirtualFile   file )     {", "for    ( VirtualFileFilter   f    :    filters )     {", "if    (  !  ( f . accepts ( file )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["and"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   VirtualFileFilter (  )     {", "@ Override", "public   boolean   accepts ( VirtualFile   file )     {", "return    !  ( filter . accepts ( file )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["not"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   VirtualFileFilter (  )     {", "@ Override", "public   boolean   accepts ( VirtualFile   file )     {", "for    ( VirtualFileFilter   f    :    filters )     {", "if    ( f . accepts ( file )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["or"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   Filters . RegexBlacklistFilter (  )  ;", "}", "METHOD_END"], "methodName": ["regexBlackList"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   Filters . RegexBlacklistFilter ( patterns )  ;", "}", "METHOD_END"], "methodName": ["regexBlackList"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   VirtualFileFilter (  )     {", "@ Override", "public   boolean   accepts ( VirtualFile   file )     {", "return   file . getPathName (  )  . endsWith ( s )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["suffix"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   VirtualFileFilter (  )     {", "private   WildcardPattern   pattern    =    new   WildcardPattern ( p )  ;", "@ Override", "public   boolean   accepts ( VirtualFile   file )     {", "return   pattern . matches ( file . getPathName (  )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["wildcard"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   Filters . WildcardBlacklistFilter (  )  ;", "}", "METHOD_END"], "methodName": ["wildcardBlackList"], "fileName": "org.jboss.as.jdr.vfs.Filters"}, {"methodBody": ["METHOD_START", "{", "return   new   Filters . WildcardBlacklistFilter ( patterns )  ;", "}", "METHOD_END"], "methodName": ["wildcardBlacklistFilter"], "fileName": "org.jboss.as.jdr.vfs.Filters"}]