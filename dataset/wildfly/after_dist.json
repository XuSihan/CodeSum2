[{"methodBody": ["METHOD_START", "{", "if    ( AbstractValidationUnitTest . OUTDATED _ NAMESPACES . containsKey ( xsdName )  )     {", "throw   new   RuntimeException (  (  (  (  \" Default   configs   are   not   in   line   with   most   recent   schemas    \"     +    xsdName )     +     \"    has   been   superseded   by    \"  )     +     ( AbstractValidationUnitTest . OUTDATED _ NAMESPACES . get ( xsdName )  )  )  )  ;", "}", "final   File   file    =    AbstractValidationUnitTest . JBOSS _ SCHEMAS _ MAP . get ( xsdName )  ;", "URL   url    =    null ;", "try    {", "if    ( file    !  =    null )     {", "url    =    file . toURI (  )  . toURL (  )  ;", "}", "}    catch    ( IOException   e )     {", "url    =    null ;", "}", "String   fileName    =    xsdName ;", "int   index    =    fileName . lastIndexOf (  \"  /  \"  )  ;", "if    ( index    =  =     (  -  1  )  )     {", "index    =    fileName . lastIndexOf (  \"  \\  \\  \"  )  ;", "}", "if    ( index    !  =     (  -  1  )  )     {", "fileName    =    fileName . substring (  ( index    +     1  )  )  ;", "}", "final   ClassLoader   classLoader    =    Thread . currentThread (  )  . getContextClassLoader (  )  ;", "if    ( url    =  =    null )", "url    =    classLoader . getResource (  (  \" docs / schema /  \"     +    fileName )  )  ;", "if    ( url    =  =    null )", "url    =    classLoader . getResource (  (  \" docs /  \"     +    fileName )  )  ;", "if    ( url    =  =    null )", "url    =    classLoader . getResource (  (  \" schema /  \"     +    fileName )  )  ;", "if    ( url    =  =    null )", "url    =    classLoader . getResource ( fileName )  ;", "Assert . assertNotNull (  ( xsdName    +     \"    not   found \"  )  ,    url )  ;", "return   url ;", "}", "METHOD_END"], "methodName": ["discoverXsd"], "fileName": "org.wildfly.dist.subsystem.xml.AbstractValidationUnitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull (  (  (  \"  '  \"     +     ( AbstractValidationUnitTest . JBOSS _ DIST _ PROP _ NAME )  )     +     \"  '    is   not   set .  \"  )  ,    AbstractValidationUnitTest . JBOSS _ DIST _ DIR )  ;", "Assert . assertTrue (  (  (  (  \" Directory   set   in    '  \"     +     ( AbstractValidationUnitTest . JBOSS _ DIST _ PROP _ NAME )  )     +     \"  '    does   not   exist :     \"  )     +     ( AbstractValidationUnitTest . JBOSS _ DIST _ DIR . getAbsolutePath (  )  )  )  ,    AbstractValidationUnitTest . JBOSS _ DIST _ DIR . exists (  )  )  ;", "return   AbstractValidationUnitTest . JBOSS _ DIST _ DIR ;", "}", "METHOD_END"], "methodName": ["getBaseDir"], "fileName": "org.wildfly.dist.subsystem.xml.AbstractValidationUnitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertFalse (  (  \" No   schemas   found   under    \"     +     ( AbstractValidationUnitTest . getBaseDir (  )  . getAbsolutePath (  )  )  )  ,    AbstractValidationUnitTest . JBOSS _ SCHEMAS _ MAP . isEmpty (  )  )  ;", "if    ( currentSchemaOnly )     {", "return   AbstractValidationUnitTest . CURRENT _ JBOSS _ SCHEMAS _ MAP ;", "}", "return   AbstractValidationUnitTest . JBOSS _ SCHEMAS _ MAP ;", "}", "METHOD_END"], "methodName": ["getSchemas"], "fileName": "org.wildfly.dist.subsystem.xml.AbstractValidationUnitTest"}, {"methodBody": ["METHOD_START", "{", "return   AbstractValidationUnitTest . getSchemas ( currentSchemasOnly )  . values (  )  ;", "}", "METHOD_END"], "methodName": ["jbossSchemaFiles"], "fileName": "org.wildfly.dist.subsystem.xml.AbstractValidationUnitTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( tmpFile )     !  =    null )     {", "if    (  !  ( tmpFile . delete (  )  )  )     {", "tmpFile . deleteOnExit (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanUp"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "String   result    =    line . replace (  \"  $  { jboss . management . native . port :  9  9  9  9  }  \"  ,     \"  9  9  9  9  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . management . http . port :  9  9  9  0  }  \"  ,     \"  9  9  9  0  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . management . https . port :  9  9  9  3  }  \"  ,     \"  9  9  9  3  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . domain . master . protocol : remote }  \"  ,     \" remote \"  )  ;", "result    =    result . replace (  \"  $  { jboss . domain . master . port :  9  9  9  9  }  \"  ,     \"  9  9  9  9  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . messaging . group . port :  9  8  7  6  }  \"  ,     \"  9  8  7  6  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . socket . binding . port - offset :  0  }  \"  ,     \"  0  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . http . port :  8  0  8  0  }  \"  ,     \"  8  0  8  0  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . https . port :  8  4  4  3  }  \"  ,     \"  8  4  4  3  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . remoting . port :  4  4  4  7  }  \"  ,     \"  4  4  4  7  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . ajp . port :  8  0  0  9  }  \"  ,     \"  8  0  0  9  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . mcmp . port :  8  0  9  0  }  \"  ,     \"  8  0  9  0  \"  )  ;", "result    =    result . replace (  \"  $  { jboss . deployment . scanner . rollback . on . failure : false }  \"  ,     \" false \"  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["fixExpressions"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "final   File   tmp    =    File . createTempFile ( getClass (  )  . getSimpleName (  )  ,     \" xml \"  )  ;", "tmp . deleteOnExit (  )  ;", "File   target    =    new   File ( AbstractValidationUnitTest . getBaseDir (  )  ,    xmlName )  ;", "BufferedReader   reader    =    new   BufferedReader ( new   FileReader ( target )  )  ;", "BufferedWriter   writer    =    null ;", "try    {", "writer    =    new   BufferedWriter ( new   FileWriter ( tmp )  )  ;", "String   line ;", "while    (  ( line    =    reader . readLine (  )  )     !  =    null )     {", "writer . write (  . fixExpressions ( line )  )  ;", "}", "}    finally    {", "reader . close (  )  ;", "if    ( writer    !  =    null )     {", "writer . close (  )  ;", "}", "}", "return   tmp ;", "}", "METHOD_END"], "methodName": ["getXmlFile"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "SchemaFactory   schemaFactory    =    SchemaFactory . newInstance ( XMLConstants . W 3 C _ XML _ SCHEMA _ NS _ URI )  ;", "schemaFactory . setErrorHandler ( new   AbstractValidationUnitTest . ErrorHandlerImpl (  )  )  ;", "schemaFactory . setResourceResolver ( AbstractValidationUnitTest . DEFAULT _ RESOURCE _ RESOLVER )  ;", "Schema   schema    =    schemaFactory . newSchema (  . SCHEMAS )  ;", "Validator   validator    =    schema . newValidator (  )  ;", "validator . setErrorHandler ( new   AbstractValidationUnitTest . ErrorHandlerImpl (  )  )  ;", "validator . setFeature (  \" http :  /  / apache . org / xml / features / validation / schema \"  ,    true )  ;", "validator . setResourceResolver ( AbstractValidationUnitTest . DEFAULT _ RESOURCE _ RESOLVER )  ;", "validator . validate ( new   StreamSource ( getXmlFile ( xmlName )  )  )  ;", "}", "METHOD_END"], "methodName": ["parseXml"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "final   List < Source >    sources    =    new   LinkedList < Source >  (  )  ;", "for    ( File   file    :    AbstractValidationUnitTest . jbossSchemaFiles ( true )  )     {", "sources . add ( new   StreamSource ( file )  )  ;", "}", ". SCHEMAS    =    sources . toArray ( new   StreamSource [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" domain / configuration / domain . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testDomain"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" domain / configuration / host . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testHost"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" domain / configuration / host - master . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testHostMaster"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" domain / configuration / host - slave . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testHostSlave"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" standalone / configuration / standalone . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandalone"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - ec 2  - full - ha . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneEC2FullHA"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - ec 2  - ha . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneEC2HA"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" standalone / configuration / standalone - full . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneFull"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - genericjms . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneGenericJMS"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - gossip - full - ha . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneGossipFullHA"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - gossip - ha . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneGossipHA"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" standalone / configuration / standalone - ha . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneHA"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - jts . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneJTS"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - minimalistic . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneMinimalistic"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - picketlink . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandalonePicketLink"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - rts . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneRTS"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "parseXml (  \" docs / examples / configs / standalone - xts . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testStandaloneXTS"], "fileName": "org.wildfly.dist.subsystem.xml.StandardConfigsXMLValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "final   ClassLoader   classLoader    =    getClass (  )  . getClassLoader (  )  ;", "final   URL   resource    =    classLoader . getResource ( name )  ;", "Assert . assertNotNull (  (  (  (  \" Can ' t   locate   resource    \"     +    name )     +     \"    on    \"  )     +    classLoader )  ,    resource )  ;", "return   resource ;", "}", "METHOD_END"], "methodName": ["resource"], "fileName": "org.wildfly.dist.subsystem.xml.XSDValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( File   xsdFile    :    AbstractValidationUnitTest . jbossSchemaFiles ( false )  )", "validateXsd ( xsdFile )  ;", "}", "METHOD_END"], "methodName": ["testJBossXsds"], "fileName": "org.wildfly.dist.subsystem.xml.XSDValidationUnitTestCase"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   factory    =    DocumentBuilderFactory . newInstance (  )  ;", "factory . setNamespaceAware ( true )  ;", "DocumentBuilder   parser    =    factory . newDocumentBuilder (  )  ;", "Document   document    =    parser . parse ( xsdFile )  ;", "SchemaFactory   schemaFactory    =    SchemaFactory . newInstance ( XMLConstants . W 3 C _ XML _ SCHEMA _ NS _ URI )  ;", "schemaFactory . setErrorHandler ( new   Abstract . ErrorHandlerImpl (  )  )  ;", "schemaFactory . setResourceResolver ( new   XMLResourceResolver (  )  )  ;", "Schema   schema    =    schemaFactory . newSchema ( resource (  \" schema / XMLSchema . xsd \"  )  )  ;", "Validator   validator    =    schema . newValidator (  )  ;", "validator . validate ( new   DOMSource ( document )  )  ;", "}", "METHOD_END"], "methodName": ["validateXsd"], "fileName": "org.wildfly.dist.subsystem.xml.XSDValidationUnitTestCase"}]