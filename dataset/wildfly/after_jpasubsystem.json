[{"methodBody": ["METHOD_START", "{", "markPersistenceUnitAvailable (  )  ;", "}", "METHOD_END"], "methodName": ["afterDeploymentValidation"], "fileName": "org.jboss.as.jpa.beanmanager.BeanManagerAfterDeploymentValidation"}, {"methodBody": ["METHOD_START", "{", "afterDeploymentValidation    =    true ;", "for    (  . DeferredCall   deferredCall    :    deferredCalls )     {", "deferredCall . markPersistenceUnitAvailable (  )  ;", "}", "deferredCalls . clear (  )  ;", "}", "METHOD_END"], "methodName": ["markPersistenceUnitAvailable"], "fileName": "org.jboss.as.jpa.beanmanager.BeanManagerAfterDeploymentValidation"}, {"methodBody": ["METHOD_START", "{", "if    ( afterDeploymentValidation )     {", "persistenceProviderAdaptor . markPersistenceUnitAvailable ( wrapperBeanManagerLifeCycle )  ;", "} else    {", "deferredCalls . add ( new    . DeferredCall ( persistenceProviderAdaptor ,    wrapperBeanManagerLifeCycle )  )  ;", "}", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.jboss.as.jpa.beanmanager.BeanManagerAfterDeploymentValidation"}, {"methodBody": ["METHOD_START", "{", "this . delegate    =    delegate ;", "}", "METHOD_END"], "methodName": ["setDelegate"], "fileName": "org.jboss.as.jpa.beanmanager.ProxyBeanManager"}, {"methodBody": ["METHOD_START", "{", "final   String   value    =     ( entryAttribute    =  =    null )     ?    null    :    entryAttribute . getValue ( name )  ;", "return   value    =  =    null    ?    mainAttribute    =  =    null    ?    null    :    mainAttribute . getValue ( name )     :    value ;", "}", "METHOD_END"], "methodName": ["getDefinedAttribute"], "fileName": "org.jboss.as.jpa.classloader.TempClassLoader"}, {"methodBody": ["METHOD_START", "{", "InputStream   resource    =    null ;", "try    {", "resource    =    delegate . getResourceAsStream (  . MANIFEST _ MF )  ;", "return   resource    !  =    null    ?    new   Manifest ( resource )     :    null ;", "}    catch    ( IOException   e )     {", "return   null ;", "}    finally    {", "if    ( resource    !  =    null )     {", "try    {", "resource . close (  )  ;", "}    catch    ( IOException   ignored )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readManifestFile"], "fileName": "org.jboss.as.jpa.classloader.TempClassLoader"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   tempClassLoader    =    factory . createNewTempClassLoader (  )  ;", "String   className    =     . TestEntity . class . getName (  )  ;", "Class <  ?  >    entityClass    =    tempClassLoader . loadClass ( className )  ;", "Object   entity    =    entityClass . newInstance (  )  ;", "assertFalse ( entityClass . equals (  . TestEntity . class )  )  ;", "assertFalse (  ( entity   instanceof    . TestEntity )  )  ;", "assertTrue ( entity . getClass (  )  . isAnnotationPresent ( Entity . class )  )  ;", "assertTrue (  ( entityClass    =  =     ( tempClassLoader . loadClass ( className )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLoadEntityClass"], "fileName": "org.jboss.as.jpa.classloader.TempClassLoaderTestCase"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   tempClassLoader    =    factory . createNewTempClassLoader (  )  ;", "String   className    =     . TestEntity . class . getName (  )  ;", "Class <  ?  >    entityClass    =    tempClassLoader . loadClass ( className )  ;", "assertNotNull (  \" could   not   load   package   for   entity   class   that   came   from   NewTempClassLoader \"  ,    entityClass . getPackage (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLoadEntityClassPackage"], "fileName": "org.jboss.as.jpa.classloader.TempClassLoaderTestCase"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   tempClassLoader    =    factory . createNewTempClassLoader (  )  ;", "String   resource    =     (  . TestEntity . class . getName (  )  . replace (  '  .  '  ,     '  /  '  )  )     +     \"  . class \"  ;", "assertNotNull ( tempClassLoader . getResource ( resource )  )  ;", "assertTrue ( tempClassLoader . getResources ( resource )  . hasMoreElements (  )  )  ;", "InputStream   resourceStream    =    tempClassLoader . getResourceAsStream ( resource )  ;", "assertNotNull ( resourceStream )  ;", "resourceStream . close (  )  ;", "}", "METHOD_END"], "methodName": ["testLoadResources"], "fileName": "org.jboss.as.jpa.classloader.TempClassLoaderTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    true ;", "if    ( pu . getProperties (  )  . containsKey (  . JPA _ ALLOW _ DEFAULT _ DATA _ SOURCE _ USE )  )     {", "result    =    Boolean . parseBoolean ( pu . getProperties (  )  . getProperty (  . JPA _ ALLOW _ DEFAULT _ DATA _ SOURCE _ USE )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["allowDefaultDataSourceUse"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    false ;", "if    (  ( targetEntityManagerProperties    !  =    null )     &  &     ( targetEntityManagerProperties . containsKey (  . ALLOWJOINEDUNSYNCPC )  )  )     {", "result    =    Boolean . parseBoolean (  (  ( String )     ( targetEntityManagerProperties . get (  . ALLOWJOINEDUNSYNCPC )  )  )  )  ;", "} else", "if    (  (  ( emf . getProperties (  )  )     !  =    null )     &  &     ( emf . getProperties (  )  . containsKey (  . ALLOWJOINEDUNSYNCPC )  )  )     {", "result    =    Boolean . parseBoolean (  (  ( String )     ( emf . getProperties (  )  . get (  . ALLOWJOINEDUNSYNCPC )  )  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["allowJoinedUnsyncPersistenceContext"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    true ;", "if    (  . EE _ DEFAULT _ DATASOURCE . equals ( pu . getJtaDataSourceName (  )  )  )     {", "result    =    false ;", "}", "if    ( pu . getProperties (  )  . containsKey (  . JPA _ ALLOW _ TWO _ PHASE _ BOOTSTRAP )  )     {", "result    =    Boolean . parseBoolean ( pu . getProperties (  )  . getProperty (  . JPA _ ALLOW _ TWO _ PHASE _ BOOTSTRAP )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["allowTwoPhaseBootstrap"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    false ;", "if    ( properties . containsKey (  . JPA _ DEFER _ DETACH )  )", "result    =    Boolean . parseBoolean (  (  ( String )     ( properties . get (  . JPA _ DEFER _ DETACH )  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["deferEntityDetachUntilClose"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   Configuration . PROVIDER _ MODULE _ DEFAULT ;", "}", "METHOD_END"], "methodName": ["getDefaultProviderModuleName"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   Configuration . providerClassToAdapterModuleName . get ( providerClassName )  ;", "}", "METHOD_END"], "methodName": ["getProviderAdapterModuleNameFromProviderClassName"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   Configuration . providerClassToModuleName . get ( providerClassName )  ;", "}", "METHOD_END"], "methodName": ["getProviderModuleNameFromProviderClassName"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "Object   name    =    pu . getProperties (  )  . get ( Configuration . JPA _ SCOPED _ PERSISTENCE _ UNIT _ NAME )  ;", "if    ( name   instanceof   String )     {", "return    (  ( String )     ( name )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getScopedPersistenceUnitName"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "return    (  ( provider    =  =    null )     |  |     ( Configuration . PROVIDER _ CLASS _ HIBERNATE . equals ( provider )  )  )     |  |     ( Configuration . PROVIDER _ CLASS _ HIBERNATE 4  _  1  . equals ( provider )  )  ;", "}", "METHOD_END"], "methodName": ["isHibernateProvider"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    true ;", "String   provider    =    pu . getPersistenceProviderClassName (  )  ;", "if    ( pu . getProperties (  )  . containsKey (  . JPA _ CONTAINER _ CLASS _ TRANSFORMER )  )     {", "result    =    Boolean . parseBoolean ( pu . getProperties (  )  . getProperty (  . JPA _ CONTAINER _ CLASS _ TRANSFORMER )  )  ;", "} else", "if    (  . isHibernateProvider ( provider )  )     {", "result    =     (  (  ( Boolean . TRUE . toString (  )  . equals ( pu . getProperties (  )  . getProperty (  . HIBERNATE _ USE _ CLASS _ ENHANCER )  )  )     |  |     ( Boolean . TRUE . toString (  )  . equals ( pu . getProperties (  )  . getProperty (  . HIBERNATE _ ENABLE _ DIRTY _ TRACKING )  )  )  )     |  |     ( Boolean . TRUE . toString (  )  . equals ( pu . getProperties (  )  . getProperty (  . HIBERNATE _ ENABLE _ LAZY _ INITIALIZATION )  )  )  )     |  |     ( Boolean . TRUE . toString (  )  . equals ( pu . getProperties (  )  . getProperty (  . HIBERNATE _ ENABLE _ ASSOCIATION _ MANAGEMENT )  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["needClassFileTransformer"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "boolean   result    =    false ;", "if    (  ( targetEntityManagerProperties    !  =    null )     &  &     ( targetEntityManagerProperties . containsKey (  . SKIPMIXEDSYNCTYPECHECKING )  )  )     {", "result    =    Boolean . parseBoolean (  (  ( String )     ( targetEntityManagerProperties . get (  . SKIPMIXEDSYNCTYPECHECKING )  )  )  )  ;", "} else", "if    (  (  ( emf . getProperties (  )  )     !  =    null )     &  &     ( emf . getProperties (  )  . containsKey (  . SKIPMIXEDSYNCTYPECHECKING )  )  )     {", "result    =    Boolean . parseBoolean (  (  ( String )     ( emf . getProperties (  )  . get (  . SKIPMIXEDSYNCTYPECHECKING )  )  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["skipMixedSynchronizationTypeCheck"], "fileName": "org.jboss.as.jpa.config.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   extendedPersistenceInheritanceType ;", "}", "METHOD_END"], "methodName": ["getExtendedPersistenceInheritanceType"], "fileName": "org.jboss.as.jpa.config.JPADeploymentSettings"}, {"methodBody": ["METHOD_START", "{", "this . extendedPersistenceInheritanceType    =    extendedPersistenceInheritanceType ;", "}", "METHOD_END"], "methodName": ["setExtendedPersistenceInheritanceType"], "fileName": "org.jboss.as.jpa.config.JPADeploymentSettings"}, {"methodBody": ["METHOD_START", "{", "return   adapterList ;", "}", "METHOD_END"], "methodName": ["getAdapters"], "fileName": "org.jboss.as.jpa.config.PersistenceProviderDeploymentHolder"}, {"methodBody": ["METHOD_START", "{", "deploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "return   deploymentUnit . getAttachment ( JpaAttachments . DEPLOYED _ PERSISTENCE _ PROVIDER )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceProviderDeploymentHolder"], "fileName": "org.jboss.as.jpa.config.PersistenceProviderDeploymentHolder"}, {"methodBody": ["METHOD_START", "{", "return   providerList ;", "}", "METHOD_END"], "methodName": ["getProviders"], "fileName": "org.jboss.as.jpa.config.PersistenceProviderDeploymentHolder"}, {"methodBody": ["METHOD_START", "{", "deploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "persistenceProviderDeploymentHolder    =     . get ( deploymentUnit )  ;", "if    ( persistenceProviderDeploymentHolder    =  =    null )     {", "persistenceProviderDeploymentHolder    =    new    ( providerList ,    adaptorList )  ;", "deploymentUnit . putAttachment ( JpaAttachments . DEPLOYED _ PERSISTENCE _ PROVIDER ,    persistenceProviderDeploymentHolder )  ;", "} else    {", "persistenceProviderDeploymentHolder . providerList . addAll ( providerList )  ;", "if    ( adaptorList    !  =    null )     {", "persistenceProviderDeploymentHolder . adapterList . addAll ( adaptorList )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["savePersistenceProviderInDeploymentUnit"], "fileName": "org.jboss.as.jpa.config.PersistenceProviderDeploymentHolder"}, {"methodBody": ["METHOD_START", "{", "return   persistenceUnits ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnits"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitMetadataHolder"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   result    =    new   StringBuffer (  )  ;", "for    ( Info   pu    :    persistenceUnits )     {", "result . append ( pu . toString (  )  )  ;", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitMetadataHolder"}, {"methodBody": ["METHOD_START", "{", "persistenceUnitMetadataHolderList . add ( persistenceUnitMetadataHolder )  ;", "}", "METHOD_END"], "methodName": ["addPersistenceUnitHolder"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitsInApplication"}, {"methodBody": ["METHOD_START", "{", "return   count ;", "}", "METHOD_END"], "methodName": ["getCount"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitsInApplication"}, {"methodBody": ["METHOD_START", "{", "return   persistenceUnitMetadataHolderList ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitHolders"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitsInApplication"}, {"methodBody": ["METHOD_START", "{", "count    +  =    incrementValue ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "org.jboss.as.jpa.config.PersistenceUnitsInApplication"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . clear (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" clear   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . close (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" close   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . contains ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" contains    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . createEntityGraph ( tClass )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createEntityGraph    % s   took    % dms \"  ,    tClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createEntityGraph"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . createEntityGraph ( s )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createEntityGraph    % s   took    % dms \"  ,    s ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createEntityGraph"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachQueryNonTxInvocation ( entityManager ,    entityManager . createNamedQuery ( name )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNamedQuery   name    '  % s '    took    % dms \"  ,    name ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNamedQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachTypedQueryNonTxInvocation ( entityManager ,    entityManager . createNamedQuery ( name ,    resultClass )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNamedQuery   name    '  % s '  ,    resultClass    '  % s '    took    % dms \"  ,    name ,    resultClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNamedQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachStoredProcedureQueryNonTxInvocation ( entityManager ,    entityManager . createNamedStoredProcedureQuery ( name )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNamedStoredProcedureQuery    % s   took    % dms \"  ,    name ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNamedStoredProcedureQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachQueryNonTxInvocation ( entityManager ,    entityManager . createNativeQuery ( sqlString )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNativeQuery   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNativeQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachQueryNonTxInvocation ( entityManager ,    entityManager . createNativeQuery ( sqlString ,    resultClass )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNativeQuery   resultClass    '  % s '    took    % dms \"  ,    resultClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNativeQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachQueryNonTxInvocation ( entityManager ,    entityManager . createNativeQuery ( sqlString ,    resultSetMapping )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createNativeQuery   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createNativeQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachQueryNonTxInvocation ( entityManager ,    entityManager . createQuery ( ejbqlString )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createQuery   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachTypedQueryNonTxInvocation ( entityManager ,    entityManager . createQuery ( qlString ,    resultClass )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createQuery   resultClass    '  % s '    took    % dms \"  ,    resultClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . createQuery ( criteriaDelete )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createQuery ( criteriaDelete )    took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachTypedQueryNonTxInvocation ( entityManager ,    entityManager . createQuery ( criteriaQuery )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createQuery   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . createQuery ( criteriaUpdate )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createQuery ( CriteriaUpdate )    took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachStoredProcedureQueryNonTxInvocation ( entityManager ,    entityManager . createStoredProcedureQuery ( procedureName )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createStoredProcedureQuery    % s   took    % dms \"  ,    procedureName ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createStoredProcedureQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachStoredProcedureQueryNonTxInvocation ( entityManager ,    entityManager . createStoredProcedureQuery ( procedureName ,    resultClasses )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createStoredProcedureQuery    % s ,    resultClasses .  .  .    took    % dms \"  ,    procedureName ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createStoredProcedureQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "EntityManager   entityManager    =    ge (  )  ;", "return   detachStoredProcedureQueryNonTxInvocation ( entityManager ,    entityManager . createStoredProcedureQuery ( procedureName ,    resultSetMappings )  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" createStoredProcedureQuery    % s ,    resultSetMappings .  .  .    took    % dms \"  ,    procedureName ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createStoredProcedureQuery"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . detach ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" detach   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["detach"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  !  ( this . isExtendedPersistenceContext (  )  )  )     &  &     (  !  ( this . isInTx (  )  )  )  )     &  &     (  !  ( deferEntityDetachUntilClose (  )  )  )  )     {", "underlying . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["detachNonTxInvocation"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( this . isExtendedPersistenceContext (  )  )  )     &  &     (  !  ( this . isInTx (  )  )  )  )     {", "return   new   QueryNonTxInvocationDetacher ( underlying ,    underLyingQuery )  ;", "}", "return   underLyingQuery ;", "}", "METHOD_END"], "methodName": ["detachQueryNonTxInvocation"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( this . isExtendedPersistenceContext (  )  )  )     &  &     (  !  ( this . isInTx (  )  )  )  )     {", "return   new   StoredProcedureQueryNonTxInvocationDetacher ( underlying ,    underlyingStoredProcedureQuery )  ;", "}", "return   underlyingStoredProcedureQuery ;", "}", "METHOD_END"], "methodName": ["detachStoredProcedureQueryNonTxInvocation"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( this . isExtendedPersistenceContext (  )  )  )     &  &     (  !  ( this . isInTx (  )  )  )  )     {", "return   new   TypedQueryNonTxInvocationDetacher ( underlying ,    underLyingQuery )  ;", "}", "return   underLyingQuery ;", "}", "METHOD_END"], "methodName": ["detachTypedQueryNonTxInvocation"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "final   EntityManager   underlyingEntityManager    =    ge (  )  ;", "T   result    =    ge (  )  . find ( entityClass ,    primaryKey )  ;", "detachNonTxInvocation ( underlyingEntityManager )  ;", "return   result ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" find   entityClass    '  % s '    took    % dms \"  ,    entityClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "final   EntityManager   underlyingEntityManager    =    ge (  )  ;", "T   result    =    underlyingEntityManager . find ( entityClass ,    primaryKey ,    properties )  ;", "detachNonTxInvocation ( underlyingEntityManager )  ;", "return   result ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" find   entityClass    '  % s '    took    % dms \"  ,    entityClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "final   EntityManager   underlyingEntityManager    =    getEntityManager (  )  ;", "T   result    =    underlyingEntityManager . find ( entityClass ,    primaryKey ,    lockMode )  ;", "detachNonTxInvocation ( underlyingEntityManager )  ;", "return   result ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" find   entityClass    '  % s '  ,    lockMode    '  % s '    took    % dms \"  ,    entityClass . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "final   EntityManager   underlyingEntityManager    =    getEntityManager (  )  ;", "T   result    =    underlyingEntityManager . find ( entityClass ,    primaryKey ,    lockMode ,    properties )  ;", "detachNonTxInvocation ( underlyingEntityManager )  ;", "return   result ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" find   entityClass    '  % s '  ,    lockMode    '  % s '    took    % dms \"  ,    entityClass . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . flush (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" flush   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getCriteriaBuilder (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getCriteriaBuilder   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getCriteriaBuilder"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getDelegate (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getDelegate   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getEntityGraph ( s )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getEntityGraph    % s   took    % dms \"  ,    s ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getEntityGraph"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getEntityGraphs ( tClass )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getEntityGraphs    % s   took    % dms \"  ,    tClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getEntityGraphs"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . geFactory (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" geFactory   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getEntityManagerFactory"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getFlushMode (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getFlushMode   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "LockModeType   result    =    null ;", "try    {", "result    =    getEntityManager (  )  . getLockMode ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getLockMode   entityClass    '  % s '  ,    lockMode    '  % s '       took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,     . getLockModeAsString ( result )  ,    elapsed )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getLockMode"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    ( lockMode    =  =    null )", "return    . NULL _ LOCK _ MODE ;", "switch    ( lockMode )     {", "case   OPTIMISTIC    :", "return    . OPTIMISTIC _ LOCK _ MODE ;", "case   OPTIMISTIC _ FORCE _ INCREMENT    :", "return    . OPTIMISTIC _ FORCE _ INCREMENT _ LOCK _ MODE ;", "case   READ    :", "return    . READ _ LOCK _ MODE ;", "case   WRITE    :", "return    . WRITE _ LOCK _ MODE ;", "case   PESSIMISTIC _ READ    :", "return    . PESSIMISTIC _ READ _ LOCK _ MODE ;", "case   PESSIMISTIC _ FORCE _ INCREMENT    :", "return    . PESSIMISTIC _ FORCE _ INCREMENT _ LOCK _ MODE ;", "case   PESSIMISTIC _ WRITE    :", "return    . PESSIMISTIC _ WRITE _ LOCK _ MODE ;", "default    :", "case   NONE    :", "return    . NONE _ LOCK _ MODE ;", "}", "}", "METHOD_END"], "methodName": ["getLockModeAsString"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getMetamodel (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getMetamodel   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getMetamodel"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getProperties (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getProperties   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "final   EntityManager   underlyingEntityManager    =    ge (  )  ;", "T   result    =    ge (  )  . getReference ( entityClass ,    primaryKey )  ;", "detachNonTxInvocation ( underlyingEntityManager )  ;", "return   result ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getReference   entityClass    '  % s '    took    % dms \"  ,    entityClass . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . getTransaction (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getTransaction   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getTransaction"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "return   ge (  )  . isJoinedToTransaction (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" isJoinedToTransaction (  )    took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["isJoinedToTransaction"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "return   getEntityManager (  )  . isOpen (  )  ;", "}", "METHOD_END"], "methodName": ["isOpen"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . joinTransaction (  )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" joinTransaction   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["joinTransaction"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "getEntityManager (  )  . lock ( entity ,    lockMode )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" lock   entityClass    '  % s '  ,    lockMode    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["lock"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "getEntityManager (  )  . lock ( entity ,    lockMode ,    properties )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" lock   entityClass    '  % s '  ,    lockMode    '  % s '       took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["lock"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "return   ge (  )  . merge ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" merge   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "ge (  )  . persist ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" persist   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["persist"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "ge (  )  . refresh ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" refresh   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["refresh"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "ge (  )  . refresh ( entity ,    properties )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" refresh   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["refresh"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "getEntityManager (  )  . refresh ( entity ,    lockMode )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" refresh   entityClass    '  % s '  ,    lockMode    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["refresh"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "getEntityManager (  )  . refresh ( entity ,    lockMode ,    properties )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" refresh   entityClass    '  % s '  ,    lockMode    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,     . getLockModeAsString ( lockMode )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["refresh"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "transactionIsRequired (  )  ;", "ge (  )  . remove ( entity )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" remove   entityClass    '  % s '    took    % dms \"  ,    entity . getClass (  )  . getName (  )  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . setFlushMode ( flushMode )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" setFlushMode   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setFlushMode"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "long   start    =     0  ;", "if    ( isTraceEnabled )", "start    =    System . currentTimeMillis (  )  ;", "try    {", "ge (  )  . setProperty ( propertyName ,    value )  ;", "}    finally    {", "if    ( isTraceEnabled )     {", "long   elapsed    =     ( System . currentTimeMillis (  )  )     -    start ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" setProperty   took    % dms \"  ,    elapsed )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setProperty"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( this . isExtendedPersistenceContext (  )  )  )     &  &     (  !  ( this . isInTx (  )  )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . transactionRequired (  )  ;", "}", "}", "METHOD_END"], "methodName": ["transactionIsRequired"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "return   getEntityManager (  )  . unwrap ( cls )  ;", "}", "METHOD_END"], "methodName": ["unwrap"], "fileName": "org.jboss.as.jpa.container.AbstractEntityManager"}, {"methodBody": ["METHOD_START", "{", "List < ExtendedEntityManager >    store    =    CreatedEntityManagers . deferToPostConstruct . get (  )  ;", "try    {", "if    ( store . isEmpty (  )  )     {", "return   CreatedEntityManagers . EMPTY ;", "} else    {", "return   store . toArray ( new   ExtendedEntityManager [ store . size (  )  ]  )  ;", "}", "}    finally    {", "store . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getDeferredEntityManagers"], "fileName": "org.jboss.as.jpa.container.CreatedEntityManagers"}, {"methodBody": ["METHOD_START", "{", "if    ( xpc    =  =    null )     {", "throw   JpaLogger . ROOT _ LOGGER . nullParameter (  \" SFSBXPCMap . RegisterPersistenceContext \"  ,     \" EntityManager \"  )  ;", "}", "final   List < ExtendedEntityManager >    store    =     . deferToPostConstruct . get (  )  ;", "store . add ( xpc )  ;", "}", "METHOD_END"], "methodName": ["registerPersistenceContext"], "fileName": "org.jboss.as.jpa.container.CreatedEntityManagers"}, {"methodBody": ["METHOD_START", "{", "return   targetEntityManager . unwrap ( wrappedClass )  ;", "}", "METHOD_END"], "methodName": ["getWrappedObject"], "fileName": "org.jboss.as.jpa.container.EntityManagerUnwrappedTargetInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  \" close \"  . equals ( method . getName (  )  )  )     {", "throw   new   IllegalStateException (  \" Illegal   to   call   this   method   from   injected ,    managed    \"  )  ;", "} else    {", "try    {", "return   method . invoke ( getWrappedObject (  )  ,    args )  ;", "}    catch    ( InvocationTargetException   e )     {", "if    (  ( e . getTargetException (  )  )    instanceof   RuntimeException )     {", "throw    (  ( RuntimeException )     ( e . getTargetException (  )  )  )  ;", "} else    {", "throw   e ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "org.jboss.as.jpa.container.EntityManagerUnwrappedTargetInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "return   referenceCount ;", "}", "METHOD_END"], "methodName": ["getReferenceCount"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "return   puScopedName ;", "}", "METHOD_END"], "methodName": ["getScopedPuName"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "( referenceCount )  +  +  ;", "}", "METHOD_END"], "methodName": ["increaseReferenceCount"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "isInTx    =    TransactionUtil . isInTx ( transactionManager )  ;", "if    ( isInTx )     {", "EntityManager   existing    =    TransactionUtil . getTransactionScop ( puScopedName ,    transactionSynchronizationRegistry )  ;", "if    (  ( existing    !  =    null )     &  &     ( existing    !  =     ( this )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotUseExtendedPersistenceTransaction ( puScopedName ,    existing ,    this )  ;", "} else", "if    ( existing    =  =    null )     {", "if    ( SynchronizationType . SYNCHRONIZED . equals ( synchronizationType )  )     {", "underlyingEntityManager . joinTransaction (  )  ;", "}", "TransactionUtil . putEntityManagerInTransactionRegistry ( puScopedName ,    this ,    transactionSynchronizationRegistry )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["internalAssociateWithJtaTx"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "in . defaultReadObject (  )  ;", "if    ( WildFlySecur . isChecking (  )  )     {", "AccessController . doPrivileged ( new   PrivilegedAction < Object >  (  )     {", "@ Override", "public   Object   run (  )     {", "transactionManager    =     (  ( TransactionManager )     ( CurrentServiceContainer . getServiceContainer (  )  . getService ( SERVICE _ NAME )  . getValue (  )  )  )  ;", "transactionSynchronizationRegistry    =     (  ( TransactionSynchronizationRegistry )     ( CurrentServiceContainer . getServiceContainer (  )  . getService ( TransactionSynchronizationRegistryService . SERVICE _ NAME )  . getValue (  )  )  )  ;", "return   null ;", "}", "}  )  ;", "} else    {", "transactionManager    =     (  ( TransactionManager )     ( CurrentServiceContainer . getServiceContainer (  )  . getService ( SERVICE _ NAME )  . getValue (  )  )  )  ;", "transactionSynchronizationRegistry    =     (  ( TransactionSynchronizationRegistry )     ( CurrentServiceContainer . getServiceContainer (  )  . getService ( TransactionSynchronizationRegistryService . SERVICE _ NAME )  . getValue (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "( referenceCount )  -  -  ;", "if    (  ( referenceCount )     =  =     0  )     {", "if    ( underlyingEntityManager . isOpen (  )  )     {", "underlyingEntityManager . close (  )  ;", "if    ( isTraceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" closed   extended   persistence   context    (  % s )  \"  ,    puScopedName )  ;", "}", "}", "} else", "if    ( isTraceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" decremented   extended   persistence   context    (  % s )    owner   count   to    % d \"  ,    puScopedName ,    referenceCount )  ;", "}", "if    (  ( referenceCount )     <     0  )     {", "throw   JpaLogger . ROOT _ LOGGER . referenceCountNegativeCount ( referenceCount ,    getScopedPuName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["refCountedClose"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ExtendedEntityManagerKey (  )  ;", "}", "METHOD_END"], "methodName": ["extendedEntityManagerID"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManagerKey"}, {"methodBody": ["METHOD_START", "{", "return   ID ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "org.jboss.as.jpa.container.ExtendedEntityManagerKey"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    EntityManager >    map    =    NonTxEmCloser . nonTxStack . peek (  )  ;", "if    (  ( map    =  =    null )     &  &     (  !  ( NonTxEmCloser . nonTxStack . isEmpty (  )  )  )  )     {", "map    =    new   HashMap < String ,    EntityManager >  (  )  ;", "NonTxEmCloser . nonTxStack . pop (  )  ;", "NonTxEmCloser . nonTxStack . push ( map )  ;", "}", "if    ( map    !  =    null )     {", "map . put ( puScopedName ,    entityManager )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.jpa.container.NonTxEmCloser"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    EntityManager >    map    =    NonTxEmCloser . nonTxStack . peek (  )  ;", "if    ( map    !  =    null )     {", "return   map . get ( puScopedName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.jboss.as.jpa.container.NonTxEmCloser"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    EntityManager >    emStack    =    NonTxEmCloser . nonTxStack . pop (  )  ;", "if    ( emStack    !  =    null )     {", "for    ( EntityManager   entityManager    :    emStack . values (  )  )     {", "try    {", "if    ( entityManager . isOpen (  )  )     {", "entityManager . close (  )  ;", "}", "}    catch    ( RuntimeException   safeToIgnore )     {", "if    ( JpaLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "JpaLogger . ROOT _ LOGGER . trace (  (  \" Could   not   close    ( non - transactional )    container   managed   entity   manager .  \"     +     (  \"       This   shouldn ' t   impact   application   functionality    ( only   read    \"     +     \" operations   occur   in   non - transactional   mode )  \"  )  )  ,    safeToIgnore )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["popCall"], "fileName": "org.jboss.as.jpa.container.NonTxEmCloser"}, {"methodBody": ["METHOD_START", "{", "NonTxEmCloser . nonTxStack . push ( null )  ;", "}", "METHOD_END"], "methodName": ["pushCall"], "fileName": "org.jboss.as.jpa.container.NonTxEmCloser"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     1  )     &  &     (  ( persistenceUnitName    =  =    null )     |  |     (  ( persistenceUnitName . length (  )  )     =  =     0  )  )  )     {", "int   numberOfDefaultPersistenceUnits    =     0  ;", "for    ( PersistenceUnitMetadata   persistenceUnit    :    holder . getPersistenceUnits (  )  )     {", "String   defaultPU    =    persistenceUnit . getProperties (  )  . getProperty ( Configuration . JPA _ DEFAULT _ PERSISTENCE _ UNIT )  ;", "if    ( Boolean . TRUE . toString (  )  . equals ( defaultPU )  )     {", "numberOfDefaultPersistenceUnits +  +  ;", "}", "}", "JpaLogger . ROOT _ LOGGER . tracef (  (  \" checking   for   ambiguous   persistence   unit   injection   error ,     \"     +     \" number   of   persistence   units   marked   default    (  % s )     =     % d \"  )  ,    Configuration . JPA _ DEFAULT _ PERSISTENCE _ UNIT ,    numberOfDefaultPersistenceUnits )  ;", "if    ( numberOfDefaultPersistenceUnits    !  =     1  )     {", "throw   JpaLogger . ROOT _ LOGGER . noPUnitNameSpecifiedAndMultiplePersistenceUnits ( holder . getPersistenceUnits (  )  . size (  )  ,    unit )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["ambiguousPUError"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "if    (  ( persistenceUnitName    =  =    null )     |  |     (  ( persistenceUnitName . length (  )  )     =  =     0  )  )     {", "for    ( Metadata   persistenceUnit    :    holder . gets (  )  )     {", "String   defaultPU    =    persistenceUnit . getProperties (  )  . getProperty ( Configuration . JPA _ DEFAULT _ PERSISTENCE _ UNIT )  ;", "if    ( Boolean . TRUE . toString (  )  . equals ( defaultPU )  )     {", "persistenceUnitName    =    persistenceUnit . getName (  )  ;", "}", "}", "}", "return   persistenceUnitName ;", "}", "METHOD_END"], "methodName": ["defaultPersistenceUnitName"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitMetadata   name    =    PersistenceUnitSearch . findWithinDeployment ( deploymentUnit ,    persistenceUnitName )  ;", "if    ( name    =  =    null )     {", "name    =    PersistenceUnitSearch . findWithinApplication ( DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ,    persistenceUnitName )  ;", "}", "return   name ;", "}", "METHOD_END"], "methodName": ["findPersistenceUnitSupplier"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   findWithinApplication   for    % s \"  ,    persistenceUnitName )  ;", "}", "PersistenceUnitMetadata   name    =    PersistenceUnitSearch . findWithinDeployment ( unit ,    persistenceUnitName )  ;", "if    ( name    !  =    null )     {", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   findWithinApplication   matched   for    % s \"  ,    persistenceUnitName )  ;", "}", "return   name ;", "}", "List < ResourceRoot >    resourceRoots    =    unit . getAttachmentList ( RESOURCE _ ROOTS )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "if    (  !  ( SubDeploymentMarker . isSubDeployment ( resourceRoot )  )  )     {", "name    =    PersistenceUnitSearch . findWithinLibraryJar ( unit ,    resourceRoot ,    persistenceUnitName )  ;", "if    ( name    !  =    null )     {", "return   name ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findWithinApplication"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   findWithinDeployment   searching   for    % s \"  ,    persistenceUnitName )  ;", "}", "for    ( ResourceRoot   root    :    DeploymentUtils . allResourceRoots ( unit )  )     {", "PersistenceUnitMetadataHolder   holder    =    root . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  ;", "if    (  ( holder    =  =    null )     |  |     (  ( holder . getPersistenceUnits (  )  )     =  =    null )  )     {", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   findWithinDeployment   skipping   empty   pu   holder   for    % s \"  ,    persistenceUnitName )  ;", "}", "continue ;", "}", "PersistenceUnitSearch . ambiguousPUError ( unit ,    persistenceUnitName ,    holder )  ;", "persistenceUnitName    =    PersistenceUnitSearch . defaultPersistenceUnitName ( persistenceUnitName ,    holder )  ;", "for    ( PersistenceUnitMetadata   persistenceUnit    :    holder . getPersistenceUnits (  )  )     {", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" findWithinDeployment   check    '  % s '    against   pu    '  % s '  \"  ,    persistenceUnitName ,    persistenceUnit . getPersistenceUnitName (  )  )  ;", "}", "if    (  (  ( persistenceUnitName    =  =    null )     |  |     (  ( persistenceUnitName . length (  )  )     =  =     0  )  )     |  |     ( persistenceUnit . getPersistenceUnitName (  )  . equals ( persistenceUnitName )  )  )     {", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" findWithinDeployment   matched    '  % s '    against   pu    '  % s '  \"  ,    persistenceUnitName ,    persistenceUnit . getPersistenceUnitName (  )  )  ;", "}", "return   persistenceUnit ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findWithinDeployment"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "final   ResourceRoot   deploymentRoot    =    moduleResourceRoot ;", "PersistenceUnitMetadataHolder   holder    =    deploymentRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  ;", "if    (  ( holder    =  =    null )     |  |     (  ( holder . getPersistenceUnits (  )  )     =  =    null )  )     {", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" findWithinLibraryJar   checking   for    '  % s '    found   no   persistence   units \"  ,    persistenceUnitName )  ;", "}", "return   null ;", "}", ". ambiguousPUError ( unit ,    persistenceUnitName ,    holder )  ;", "persistenceUnitName    =     . defaultPersistenceUnitName ( persistenceUnitName ,    holder )  ;", "for    ( PersistenceUnitMetadata   persistenceUnit    :    holder . getPersistenceUnits (  )  )     {", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" findWithinLibraryJar   check    '  % s '    against   pu    '  % s '  \"  ,    persistenceUnitName ,    persistenceUnit . getPersistenceUnitName (  )  )  ;", "}", "if    (  (  ( persistenceUnitName    =  =    null )     |  |     (  ( persistenceUnitName . length (  )  )     =  =     0  )  )     |  |     ( persistenceUnit . getPersistenceUnitName (  )  . equals ( persistenceUnitName )  )  )     {", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" findWithinLibraryJar   matched    '  % s '    against   pu    '  % s '  \"  ,    persistenceUnitName ,    persistenceUnit . getPersistenceUnitName (  )  )  ;", "}", "return   persistenceUnit ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findWithinLibraryJar"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "final   String   path ;", "if    ( absolutePath . startsWith (  \"  .  .  /  \"  )  )     {", "path    =    absolutePath . substring (  3  )  ;", "} else    {", "path    =    absolutePath ;", "}", "final   VirtualFile   parent    =    current . getAttachment ( DEPLOYMENT _ ROOT )  . getRoot (  )  . getParent (  )  ;", "final   VirtualFile   resolvedPath    =    parent . getChild ( path )  ;", "List < ResourceRoot >    resourceRoots    =    DeploymentUtils . allResourceRoots ( DeploymentUtils . getTopDeploymentUnit ( current )  )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "if    ( resourceRoot . getRoot (  )  . equals ( resolvedPath )  )     {", "PersistenceUnitMetadataHolder   holder    =    resourceRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  ;", "if    ( holder    !  =    null )     {", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" getPersistenceUnit   check    '  % s '    against   pu    '  % s '  \"  ,    puName ,    pu . getPersistenceUnitName (  )  )  ;", "}", "if    ( pu . getPersistenceUnitName (  )  . equals ( puName )  )     {", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" getPersistenceUnit   matched    '  % s '    against   pu    '  % s '  \"  ,    puName ,    pu . getPersistenceUnitName (  )  )  ;", "}", "return   pu ;", "}", "}", "}", "}", "}", "throw   JpaLogger . ROOT _ LOGGER . persistenceUnitNotFound ( absolutePath ,    puName ,    current )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnit"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   search   for   name    '  % s '    inside   of    % s \"  ,    persistenceUnitName ,    deploymentUnit . getName (  )  )  ;", "}", "int   scopeSeparatorCharacter    =     ( persistenceUnitName    =  =    null )     ?     -  1     :    persistenceUnitName . indexOf (  '  #  '  )  ;", "if    ( scopeSeparatorCharacter    !  =     (  -  1  )  )     {", "final   String   path    =    persistenceUnitName . substring (  0  ,    scopeSeparatorCharacter )  ;", "final   String   name    =    persistenceUnitName . substring (  ( scopeSeparatorCharacter    +     1  )  )  ;", "PersistenceUnitMetadata   pu    =    PersistenceUnitSearch . getPersistenceUnit ( deploymentUnit ,    path ,    name )  ;", "if    ( PersistenceUnitSearch . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   search   found    % s \"  ,    pu . getScopedPersistenceUnitName (  )  )  ;", "}", "return   pu ;", "} else    {", "PersistenceUnitMetadata   name    =    PersistenceUnitSearch . findPersistenceUnitSupplier ( deploymentUnit ,    persistenceUnitName )  ;", "if    ( PersistenceUnitSearch . traceEnabled )     {", "if    ( name    !  =    null )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" pu   search   found    % s \"  ,    name . getScopedPersistenceUnitName (  )  )  ;", "}", "}", "return   name ;", "}", "}", "METHOD_END"], "methodName": ["resolvePersistenceUnitSupplier"], "fileName": "org.jboss.as.jpa.container.PersistenceUnitSearch"}, {"methodBody": ["METHOD_START", "{", "SFSBCallStack . SFSBCallStackThreadData   data    =    SFSBCallStack . CURRENT . get (  )  ;", "int   no    =    data . creationBeanNestingLevel ;", "if    ( no    =  =     0  )     {", "data . creationTimeXPCRegistration    =    new   HashMap < String ,    ExtendedEntityManager >  (  )  ;", "data . creationTimeInjectedXPCs    =    new   SFSBInjectedXPCs ( data . creationTimeInjectedXPCs ,    null )  ;", "} else    {", "SFSBInjectedXPCs   parent    =    data . creationTimeInjectedXPCs ;", "data . creationTimeInjectedXPCs    =    new   SFSBInjectedXPCs ( parent ,    parent . getTopLevel (  )  )  ;", "}", "( data . creationBeanNestingLevel )  +  +  ;", "}", "METHOD_END"], "methodName": ["beginSfsbCreation"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "return   SFSBCallStack . CURRENT . get (  )  . invocationStack ;", "}", "METHOD_END"], "methodName": ["currentSFSBCallStack"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "ArrayList < Map < String ,    ExtendedEntityManager >  >    stack    =    SFSBCallStack . CURRENT . get (  )  . invocationStack ;", "if    (  ( stack    !  =    null )     &  &     (  ( stack . size (  )  )     >     0  )  )     {", "return   stack . get (  (  ( stack . size (  )  )     -     1  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["currentSFSBCallStackInvocation"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "SFSBCallStack . SFSBCallStackThreadData   data    =    SFSBCallStack . CURRENT . get (  )  ;", "int   no    =    data . creationBeanNestingLevel ;", "no -  -  ;", "data . creationBeanNestingLevel    =    no ;", "if    ( no    =  =     0  )     {", "data . creationTimeXPCRegistration    =    null ;", "data . creationTimeInjectedXPCs    =    null ;", "} else    {", "data . creationTimeInjectedXPCs    =    data . creationTimeInjectedXPCs . getParent (  )  ;", "}", "}", "METHOD_END"], "methodName": ["endSfsbCreation"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "ArrayList < Map < String ,    ExtendedEntityManager >  >    stack    =    SFSBCallStack . currentSFSBCallStack (  )  ;", "Map < String ,    ExtendedEntityManager >    result    =    null ;", "if    ( stack    !  =    null )     {", "result    =    stack . get (  (  ( stack . size (  )  )     -     1  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getCurrentCall"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "return   SFSBCallStack . CURRENT . get (  )  . creationBeanNestingLevel ;", "}", "METHOD_END"], "methodName": ["getSFSBCreationBeanNestingLevel"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "SFSBInjectedXPCs   result    =    SFSBCallStack . CURRENT . get (  )  . creationTimeInjectedXPCs ;", "if    ( result    =  =    null )     {", "throw   JpaLogger . ROOT _ LOGGER . xpcOnlyFromSFSB ( puScopedName )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getSFSBCreationTimeInjectedXPCs"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "ArrayList < Map < String ,    ExtendedEntityManager >  >    stack    =    SFSBCallStack . currentSFSBCallStack (  )  ;", "Map < String ,    ExtendedEntityManager >    result    =    stack . remove (  (  ( stack . size (  )  )     -     1  )  )  ;", "stack . trimToSize (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["popCall"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "SFSBCallStack . currentSFSBCallStack (  )  . add ( entityManagers )  ;", "if    ( entityManagers    !  =    null )     {", "for    ( ExtendedEntityManager   extendedEntityManager    :    entityManagers . values (  )  )     {", "extendedEntityManager . internalAssociateWithJtaTx (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["pushCall"], "fileName": "org.jboss.as.jpa.container.SFSBCallStack"}, {"methodBody": ["METHOD_START", "{", "SFSBInjectedXPCs   target    =    this ;", "if    (  ( toplevel )     !  =    null )     {", "target    =    toplevel ;", "}", "return    ( target . injectedXPCsByPuName )     !  =    null    ?    target . injectedXPCsByPuName . get ( puScopedName )     :    null ;", "}", "METHOD_END"], "methodName": ["findExtendedPersistenceContextDeepInheritance"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "SFSBInjectedXPCs   target    =    this ;", "return    ( target . injectedXPCsByPuName )     !  =    null    ?    target . injectedXPCsByPuName . get ( puScopedName )     :    null ;", "}", "METHOD_END"], "methodName": ["findExtendedPersistenceContextShallowInheritance"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "return    ( toplevel )     !  =    null    ?    toplevel    :    this ;", "}", "METHOD_END"], "methodName": ["getTopLevel"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "SFSBInjectedXPCs   target    =    this ;", "if    (  ( toplevel )     !  =    null )     {", "target    =    toplevel ;", "}", "if    (  ( target . injectedXPCsByPuName )     =  =    null )     {", "target . injectedXPCsByPuName    =    new   HashMap < String ,    ExtendedEntityManager >  (  )  ;", "}", "target . injectedXPCsByPuName . put ( scopedPuName ,    entityManager )  ;", "}", "METHOD_END"], "methodName": ["registerDeepInheritance"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "SFSBInjectedXPCs   target    =    this ;", "if    (  ( target . injectedXPCsByPuName )     =  =    null )     {", "target . injectedXPCsByPuName    =    new   HashMap < String ,    ExtendedEntityManager >  (  )  ;", "}", "target . injectedXPCsByPuName . put ( scopedPuName ,    entityManager )  ;", "}", "METHOD_END"], "methodName": ["registerShallowInheritance"], "fileName": "org.jboss.as.jpa.container.SFSBInjectedXPCs"}, {"methodBody": ["METHOD_START", "{", "return   deque . get (  )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.jpa.container.ThreadLocalStack"}, {"methodBody": ["METHOD_START", "{", "Deque < Object >    st    =    deque . get (  )  ;", "Object   o    =    st . peek (  )  ;", "if    ( o    =  =     (  . NULL _ VALUE )  )     {", "return   null ;", "} else    {", "return    (  ( E )     ( o )  )  ;", "}", "}", "METHOD_END"], "methodName": ["peek"], "fileName": "org.jboss.as.jpa.container.ThreadLocalStack"}, {"methodBody": ["METHOD_START", "{", "Deque < Object >    st    =    deque . get (  )  ;", "Object   o    =    st . pop (  )  ;", "if    ( o    =  =     (  . NULL _ VALUE )  )     {", "return   null ;", "} else    {", "return    (  ( E )     ( o )  )  ;", "}", "}", "METHOD_END"], "methodName": ["pop"], "fileName": "org.jboss.as.jpa.container.ThreadLocalStack"}, {"methodBody": ["METHOD_START", "{", "Deque < Object >    st    =    deque . get (  )  ;", "if    ( item    =  =    null )     {", "st . push (  . NULL _ VALUE )  ;", "} else    {", "st . push ( item )  ;", "}", "}", "METHOD_END"], "methodName": ["push"], "fileName": "org.jboss.as.jpa.container.ThreadLocalStack"}, {"methodBody": ["METHOD_START", "{", "if    ( UNSYNCHRONIZED . equals ( synchronizationType )  )     {", "return   unsynchronizWrapper ( emf . createEntityManager ( synchronizationType ,    properties )  )  ;", "}", "if    (  ( properties    !  =    null )     &  &     (  ( properties . size (  )  )     >     0  )  )     {", "return   emf . createEntityManager ( properties )  ;", "}", "return   emf . createEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["createEntityManager"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentServiceContainer . getServiceContainer (  )  ;", "}", "return   AccessController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    TransactionUtil . getTransactionScopedEntityManager ( puScopedName ,    transactionSynchronizationRegistry )  ;", "if    ( entityManager    =  =    null )     {", "entityManager    =    createEntityManager ( emf ,    properties ,    synchronizationType )  ;", "if    ( JpaLogger . ROOT _ LOGGER . isDebugEnabled (  )  )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s :    created   entity   manager   session    % s \"  ,    TransactionUtil . getEntityManagerDetails ( entityManager ,    scopedPuName )  ,    TransactionUtil . getTransaction ( transactionManager )  . toString (  )  )  ;", "}", "TransactionUtil . registerSynchronization ( entityManager ,    scopedPuName ,    transactionSynchronizationRegistry ,    transactionManager )  ;", "TransactionUtil . putEntityManagerInTransactionRegistry ( scopedPuName ,    entityManager ,    transactionSynchronizationRegistry )  ;", "} else    {", "TransactionScopedEntityManager . testForMixedSynchronizationTypes ( emf ,    entityManager ,    puScopedName ,    synchronizationType ,    properties )  ;", "if    ( JpaLogger . ROOT _ LOGGER . isDebugEnabled (  )  )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s :    reuse   entity   manager   session   already   in   tx    % s \"  ,    TransactionUtil . getEntityManagerDetails ( entityManager ,    scopedPuName )  ,    TransactionUtil . getTransaction ( transactionManager )  . toString (  )  )  ;", "}", "}", "return   entityManager ;", "}", "METHOD_END"], "methodName": ["getOrCreateTransactionScopedEntityManager"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "in . defaultReadObject (  )  ;", "final   ServiceController <  ?  >    controller    =     . currentServiceContainer (  )  . getService ( JPAServiceNames . getPUServiceName ( puScopedName )  )  ;", "final   PersistenceUnitServiceImpl   persistenceUnitService    =     (  ( PersistenceUnitServiceImpl )     ( controller . getService (  )  )  )  ;", "transactionManager    =     (  ( TransactionManager )     (  . currentServiceContainer (  )  . getService ( SERVICE _ NAME )  . getValue (  )  )  )  ;", "transactionSynchronizationRegistry    =     (  ( TransactionSynchronizationRegistry )     (  . currentServiceContainer (  )  . getService ( TransactionSynchronizationRegistryService . SERVICE _ NAME )  . getValue (  )  )  )  ;", "emf    =    persistenceUnitService . getEntityManagerFactory (  )  ;", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "boolean   skipMixedSyncTypeChecking    =    Configuration . skipMixedSynchronizationTypeCheck ( emf ,    targetProperties )  ;", "boolean   allowJoinedUnsyncPersistenceContext    =    Configuration . allowJoinedUnsyncPersistenceContext ( emf ,    targetProperties )  ;", "if    (  (  (  (  (  ! skipMixedSyncTypeChecking )     &  &     ( SYNCHRONIZED . equals ( targetSynchronizationType )  )  )     &  &     ( eFromJTA   instanceof   SynchronizationTypeAccess )  )     &  &     ( UNSYNCHRONIZED . equals (  (  ( SynchronizationTypeAccess )     ( eFromJTA )  )  . getSynchronizationType (  )  )  )  )     &  &     (  (  ! allowJoinedUnsyncPersistenceContext )     |  |     (  !  ( eFromJTA . isJoinedToTransaction (  )  )  )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . badSynchronizationTypeCombination ( scopedPuName )  ;", "}", "}", "METHOD_END"], "methodName": ["testForMixedSynchronizationTypes"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsynchronizedEntityManagerWrapper ( entityManager )  ;", "}", "METHOD_END"], "methodName": ["unsynchronizedEntityManagerWrapper"], "fileName": "org.jboss.as.jpa.container.TransactionScopedEntityManager"}, {"methodBody": ["METHOD_START", "{", "if    ( other   instanceof   PersistenceContextInjectionSource )     {", "PersistenceContextInjectionSource   source    =     (  ( PersistenceContextInjectionSource )     ( other )  )  ;", "return   source . puServiceName . equals ( puServiceName )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.jboss.as.jpa.injectors.PersistenceContextInjectionSource"}, {"methodBody": ["METHOD_START", "{", "serviceBuilder . addDependencies ( puServiceName )  ;", ". inject ( injectable )  ;", "}", "METHOD_END"], "methodName": ["getResourceValue"], "fileName": "org.jboss.as.jpa.injectors.PersistenceContextInjectionSource"}, {"methodBody": ["METHOD_START", "{", "return   puServiceName . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.jboss.as.jpa.injectors.PersistenceContextInjectionSource"}, {"methodBody": ["METHOD_START", "{", "if    ( other   instanceof   PersistenceUnitInjectionSource )     {", "PersistenceUnitInjectionSource   source    =     (  ( PersistenceUnitInjectionSource )     ( other )  )  ;", "return   source . puServiceName . equals ( puServiceName )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.jboss.as.jpa.injectors.PersistenceUnitInjectionSource"}, {"methodBody": ["METHOD_START", "{", "serviceBuilder . addDependencies ( puServiceName )  ;", ". inject ( injectable )  ;", "}", "METHOD_END"], "methodName": ["getResourceValue"], "fileName": "org.jboss.as.jpa.injectors.PersistenceUnitInjectionSource"}, {"methodBody": ["METHOD_START", "{", "return   puServiceName . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.jboss.as.jpa.injectors.PersistenceUnitInjectionSource"}, {"methodBody": ["METHOD_START", "{", "return   ROOT _ LOGGER . unexpectedEndOfDocument ( location )  ;", "}", "METHOD_END"], "methodName": ["endOfDocument"], "fileName": "org.jboss.as.jpa.jbossjpaparser.JBossJPAParser"}, {"methodBody": ["METHOD_START", "{", "return   propertyReplacer . replaceProperties ( reader . getAttributeValue ( namespaceURI ,    localName )  )  ;", "}", "METHOD_END"], "methodName": ["getAttributeValue"], "fileName": "org.jboss.as.jpa.jbossjpaparser.JBossJPAParser"}, {"methodBody": ["METHOD_START", "{", "JPADeploymentSettings   result    =    new   JPADeploymentSettings (  )  ;", ". INSTANCE . readElement ( reader ,    result ,    propertyReplacer )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.jboss.as.jpa.jbossjpaparser.JBossJPAParser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "if    ( count    !  =     0  )     {", "throw    . unexpectedContent ( reader )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "return ;", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "final    . Element   element    =     . Element . of ( reader . getName (  )  )  ;", "switch    ( element )     {", "case   EXTENDED _ PERSISTENCE    :", "final   String   value    =     . getAttributeValue ( reader ,    null ,     . INHERITANCE _ CONSTANT ,    propertyReplacer )  ;", "if    (  ( value    =  =    null )     |  |     ( value . isEmpty (  )  )  )     {", "result . setExtendedPersistenceInheritanceType ( ExtendedPersistenceInheritance . SHALLOW )  ;", "} else    {", "result . setExtendedPersistenceInheritanceType ( ExtendedPersistenceInheritance . valueOf ( value )  )  ;", "}", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "}", "default    :", "{", "throw    . unexpectedContent ( reader )  ;", "}", "}", "}", "throw    . endOfDocument ( reader . getLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["readElement"], "fileName": "org.jboss.as.jpa.jbossjpaparser.JBossJPAParser"}, {"methodBody": ["METHOD_START", "{", "final   String   kind ;", "switch    ( readgetEventType (  )  )     {", "case   XMLStreamConstants . ATTRIBUTE    :", "kind    =     \" attribute \"  ;", "break ;", "case   XMLStreamConstants . CDATA    :", "kind    =     \" cdata \"  ;", "break ;", "case   XMLStreamConstants . CHARACTERS    :", "kind    =     \" charact \"  ;", "break ;", "case   XMLStreamConstants . COMMENT    :", "kind    =     \" comment \"  ;", "break ;", "case   XMLStreamConstants . DTD    :", "kind    =     \" dtd \"  ;", "break ;", "case   XMLStreamConstants . END _ DOCUMENT    :", "kind    =     \" document   end \"  ;", "break ;", "case   XMLStreamConstants . END _ ELEMENT    :", "kind    =     \" element   end \"  ;", "break ;", "case   XMLStreamConstants . ENTITY _ DECLARATION    :", "kind    =     \" entity   declaration \"  ;", "break ;", "case   XMLStreamConstants . ENTITY _ REFERENCE    :", "kind    =     \" entity   ref \"  ;", "break ;", "case   XMLStreamConstants . NAMESPACE    :", "kind    =     \" namespace \"  ;", "break ;", "case   XMLStreamConstants . NOTATION _ DECLARATION    :", "kind    =     \" notation   declaration \"  ;", "break ;", "case   XMLStreamConstants . PROCESSING _ INSTRUCTION    :", "kind    =     \" processing   instruction \"  ;", "break ;", "case   XMLStreamConstants . SPACE    :", "kind    =     \" whitespace \"  ;", "break ;", "case   XMLStreamConstants . START _ DOCUMENT    :", "kind    =     \" document   start \"  ;", "break ;", "case   XMLStreamConstants . START _ ELEMENT    :", "kind    =     \" element   start \"  ;", "break ;", "default    :", "kind    =     \" unknown \"  ;", "break ;", "}", "return   ROOT _ LOGGER . unexpectedContent ( kind ,     ( readhasName (  )     ?    readgetName (  )     :    null )  ,     ( readhasText (  )     ?    readgetText (  )     :    null )  ,    readgetLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["unexpectedContent"], "fileName": "org.jboss.as.jpa.jbossjpaparser.JBossJPAParser"}, {"methodBody": ["METHOD_START", "{", "return   statistics ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.management.DynamicManagementStatisticsResource"}, {"methodBody": ["METHOD_START", "{", "if    ( Integer . class . equals ( type )  )     {", "return   ModelType . INT ;", "} else", "if    ( Long . class . equals ( type )  )     {", "return   ModelType . LONG ;", "} else", "if    ( String . class . equals ( type )  )     {", "return   ModelType . STRING ;", "} else", "if    ( Boolean . class . equals ( type )  )     {", "return   ModelType . BOOLEAN ;", "}", "return   ModelType . OBJECT ;", "}", "METHOD_END"], "methodName": ["getModelType"], "fileName": "org.jboss.as.jpa.management.ManagementResourceDefinition"}, {"methodBody": ["METHOD_START", "{", "if    ( INT . equals ( modelType )  )     {", "rponse . set (  (  ( Integer )     ( rult )  )  . intValue (  )  )  ;", "} else", "if    ( ModelType . LONG . equals ( modelType )  )     {", "rponse . set (  (  ( Long )     ( rult )  )  . longValue (  )  )  ;", "} else", "if    ( ModelType . BOOLEAN . equals ( modelType )  )     {", "rponse . set (  (  ( Boolean )     ( rult )  )  . booleanValue (  )  )  ;", "} else    {", "rponse . set ( rult . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setResponse"], "fileName": "org.jboss.as.jpa.management.ManagementResourceDefinition"}, {"methodBody": ["METHOD_START", "{", "return   new   Path ( pathAddress )  ;", "}", "METHOD_END"], "methodName": ["path"], "fileName": "org.jboss.as.jpa.management.Path"}, {"methodBody": ["METHOD_START", "{", "return   new   PathWrapper ( value )  ;", "}", "METHOD_END"], "methodName": ["path"], "fileName": "org.jboss.as.jpa.management.PathWrapper"}, {"methodBody": ["METHOD_START", "{", "return   new   StatisticNameLookup ( name )  ;", "}", "METHOD_END"], "methodName": ["statisticNameLookup"], "fileName": "org.jboss.as.jpa.management.StatisticNameLookup"}, {"methodBody": ["METHOD_START", "{", "String   defaultProviderModule    =    Configuration . getDefaultProviderModuleName (  )  ;", ". loadProviderModuleByName ( defaultProviderModule )  ;", "}", "METHOD_END"], "methodName": ["loadDefaultProvider"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderLoader"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PersistenceProvider )     ( classLoader . loadClass ( persistenceProviderClassName )  . newInstance (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["loadProviderFromDeployment"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderLoader"}, {"methodBody": ["METHOD_START", "{", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "Module   module    =    moduleLoader . loadModule ( ModuleIdentifier . fromString ( moduleName )  )  ;", "final   ServiceLoader <  >    serviceLoader    =    module . loadService (  . class )  ;", "List <  >    result    =    new   ArrayList <  >  (  )  ;", "if    ( serviceLoader    !  =    null )     {", "for    (    provider 1     :    serviceLoader )     {", "ResolverImpl . getInstance (  )  . add ( provider 1  )  ;", "result . add ( provider 1  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["loadProviderModuleByName"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderLoader"}, {"methodBody": ["METHOD_START", "{", "synchronized ( persistenceProviderPerClassLoader )     {", "for    ( ClassLoader   deploymentClassLoader    :    deploymentClassLoaders )     {", "List < Class <  ?    extends    >  >    list    =    persistenceProviderPerClassLoader . get ( deploymentClassLoader )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" getting   persistence   provider   list    (  % s )    for   deployment    (  % s )  \"  ,    list ,    deploymentClassLoader )  ;", "if    ( list    =  =    null )     {", "list    =    new   ArrayList (  )  ;", "persistenceProviderPerClassLoader . put ( deploymentClassLoader ,    list )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" saving   new   persistence   provider   list    (  % s )    for   deployment    (  % s )  \"  ,    list ,    deploymentClassLoader )  ;", "}", "list . add ( persistenceProvider . getClass (  )  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" added   new   persistence   provider    (  % s )    to   provider   list    (  % s )  \"  ,    persistenceProvider . getClass (  )  . getName (  )  ,    list )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDeploymentSpecificPersistenceProvider"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderResolverImpl"}, {"methodBody": ["METHOD_START", "{", "providers . add ( persistenceProvider . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["addPersistenceProvider"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderResolverImpl"}, {"methodBody": ["METHOD_START", "{", "synchronized ( persistenceProviderPerClassLoader )     {", "for    ( ClassLoader   deploymentClassLoader    :    deploymentClassLoaders )     {", "persistenceProviderPerClassLoader . remove ( deploymentClassLoader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["clearCachedDeploymentSpecificProviders"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderResolverImpl"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   c    =    classLoader ;", "while    (  ( c    !  =    null )     &  &     (  !  ( c   instanceof   ModuleClassLoader )  )  )     {", "c    =    c . getParent (  )  ;", "}", "return   c ;", "}", "METHOD_END"], "methodName": ["findParentModuleCl"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderResolverImpl"}, {"methodBody": ["METHOD_START", "{", "return   PersistenceProviderResolverImpl . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.jpa.persistenceprovider.PersistenceProviderResolverImpl"}, {"methodBody": ["METHOD_START", "{", "listener    =    new   CacheDeploymentListener (  )  ;", "EventListenerRegistration . add ( listener )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.jboss.as.jpa.processor.CacheDeploymentHelper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( listener )     !  =    null )     {", "EvListenerRegistration . remove ( listener )  ;", "listener    =    null ;", "}", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "org.jboss.as.jpa.processor.CacheDeploymentHelper"}, {"methodBody": ["METHOD_START", "{", "String   searchModuleName    =    null ;", "PersistenceUnitsInApplication   persistenceUnitsInApplication    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  . getAttachment ( PersistenceUnitsInApplication . PERSISTENCE _ UNITS _ IN _ APPLICATION )  ;", "for    ( PersistenceUnitMetadataHolder   holder    :    persistenceUnitsInApplication . getPersistenceUnitHolders (  )  )     {", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "String   providerModule    =    pu . getProperties (  )  . getProperty ( Configuration . HIBERNATE _ SEARCH _ MODULE )  ;", "if    ( providerModule    !  =    null )     {", "if    ( searchModuleName    =  =    null )     {", "searchModuleName    =    providerModule ;", "} else", "if    (  !  ( providerModule . equals ( searchModuleName )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . differentSearchModuleDependencies ( deploymentUnit . getName (  )  ,    searchModuleName ,    providerModule )  ;", "}", "}", "}", "}", "if    (  . NONE . equals ( searchModuleName )  )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \" Not   adding   Hibernate   Search   dependency   to   deployment    % s \"  ,    deploymentUnit . getName (  )  )  ;", "return ;", "}", "if    (  ( searchModuleName    !  =    null )     &  &     (  !  (  . IGNORE . equals ( searchModuleName )  )  )  )     {", "ModuleIdentifier   moduleIdentifier    =    ModuleIdentifier . fromString ( searchModuleName )  ;", "moduleSpecification . addSystemDependency ( new   ModuleDependency ( moduleLoader ,    moduleIdentifier ,    false ,    true ,    true ,    false )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" added    % s   dependency   to    % s \"  ,    moduleIdentifier ,    deploymentUnit . getName (  )  )  ;", "} else    {", "final   CompositeIndex   index    =    deploymentUnit . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "List < AnnotationInstance >    annotations    =    index . getAnnotations (  . SEARCH _ INDEXED _ ANNOTATION _ NAME )  ;", "if    (  ( annotations    !  =    null )     &  &     (  ( annotations . size (  )  )     >     0  )  )     {", "moduleSpecification . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . defaultSearchModule ,    false ,    true ,    true ,    false )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" deployment    % s   contains    % s   annotation ,    added    % s   dependency \"  ,    deploymentUnit . getName (  )  ,     . SEARCH _ INDEXED _ ANNOTATION _ NAME ,     . defaultSearchModule )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addSearchDependency"], "fileName": "org.jboss.as.jpa.processor.HibernateSearchProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ModuleSpecification   moduleSpecification    =    deploymentUnit . getAttachment ( MODULE _ SPECIFICATION )  ;", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "if    ( JPADeploymentMarker . isJPADeployment ( deploymentUnit )  )     {", "addDependency ( moduleSpecification ,    moduleLoader ,    deploymentUnit )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.HibernateSearchProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( isPersistenceContext ( annotation )  )     |  |     ( isPersistenceUnit ( annotation )  )  )     {", "String   injectionTypeName    =    getClassLevelInjectionType ( annotation )  ;", "InjectionSource   injectionSource    =    getBindingSource ( deploymentUnit ,    annotation ,    injectionTypeName ,    classDescription )  ;", "if    ( injectionSource    !  =    null )     {", "final   AnnotationValue   nameValue    =    annotation . value (  \" name \"  )  ;", "if    (  ( nameValue    =  =    null )     |  |     ( nameValue . asString (  )  . isEmpty (  )  )  )     {", "classDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . classLevelarameterRequired ( annotation . name (  )  . toString (  )  ,    classDescription . getClassName (  )  ,     \" name \"  )  )  ;", "return ;", "}", "final   String   name    =    nameValue . asString (  )  ;", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( name ,    injectionSource )  ;", "classDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "}", "} else", "if    ( isPersistenceUnits ( annotation )  )     {", "AnnotationValue   containedPersistenceUnits    =    annotation . value (  \" value \"  )  ;", "AnnotationInstance [  ]    arrayPersistenceUnits ;", "if    (  ( containedPersistenceUnits    !  =    null )     &  &     (  ( arrayPersistenceUnits    =    containedPersistenceUnits . asNestedArray (  )  )     !  =    null )  )     {", "for    ( int   source    =     0  ;    source    <     ( arrayPersistenceUnits . length )  ;    source +  +  )     {", "String   injectionTypeName    =    getClassLevelInjectionType ( arrayPersistenceUnits [ source ]  )  ;", "InjectionSource   injectionSource    =    getBindingSource ( deploymentUnit ,    arrayPersistenceUnits [ source ]  ,    injectionTypeName ,    classDescription )  ;", "if    ( injectionSource    !  =    null )     {", "final   AnnotationValue   nameValue    =    arrayPersistenceUnits [ source ]  . value (  \" name \"  )  ;", "if    (  ( nameValue    =  =    null )     |  |     ( nameValue . asString (  )  . isEmpty (  )  )  )     {", "classDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . classLevelarameterRequired ( arrayPersistenceUnits [ source ]  . name (  )  . toString (  )  ,    classDescription . getClassName (  )  ,     \" name \"  )  )  ;", "return ;", "}", "final   String   name    =    nameValue . asString (  )  ;", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( name ,    injectionSource )  ;", "classDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "}", "}", "}", "} else", "if    ( isPersistenceContexts ( annotation )  )     {", "AnnotationValue   containedPersistenceContexts    =    annotation . value (  \" value \"  )  ;", "AnnotationInstance [  ]    arrayPersistenceContexts ;", "if    (  ( containedPersistenceContexts    !  =    null )     &  &     (  ( arrayPersistenceContexts    =    containedPersistenceContexts . asNestedArray (  )  )     !  =    null )  )     {", "for    ( int   source    =     0  ;    source    <     ( arrayPersistenceContexts . length )  ;    source +  +  )     {", "String   injectionTypeName    =    getClassLevelInjectionType ( arrayPersistenceContexts [ source ]  )  ;", "InjectionSource   injectionSource    =    getBindingSource ( deploymentUnit ,    arrayPersistenceContexts [ source ]  ,    injectionTypeName ,    classDescription )  ;", "if    ( injectionSource    !  =    null )     {", "final   AnnotationValue   nameValue    =    arrayPersistenceContexts [ source ]  . value (  \" name \"  )  ;", "if    (  ( nameValue    =  =    null )     |  |     ( nameValue . asString (  )  . isEmpty (  )  )  )     {", "classDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . classLevelarameterRequired ( arrayPersistenceContexts [ source ]  . name (  )  . toString (  )  ,    classDescription . getClassName (  )  ,     \" name \"  )  )  ;", "return ;", "}", "final   String   name    =    nameValue . asString (  )  ;", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( name ,    injectionSource )  ;", "classDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["bindClassSources"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitMetadata   pu    =    getPersistenceUnit ( deploymentUnit ,    annotation ,    classDescription )  ;", "if    ( pu    =  =    null )     {", "return   null ;", "}", "String   scopedPuName    =    pu . getScopedPersistenceUnitName (  )  ;", "ServiceName   puServiceName    =    getPuServiceName ( scopedPuName )  ;", "if    ( isPersistenceContext ( annotation )  )     {", "if    (  ( pu . getTransactionType (  )  )     =  =     ( PersistenceUnitTransactionType . RESOURCE _ LOCAL )  )     {", "classDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . cannotInjectResourceLocalEntityManager (  )  )  ;", "return   null ;", "}", "Value   pcType    =    annotation . value (  \" type \"  )  ;", "PersistenceContextType   type    =     (  ( pcType    =  =    null )     |  |     ( TRANSACTION . name (  )  . equals ( pcType . asString (  )  )  )  )     ?    PersistenceContextType . TRANSACTION    :    PersistenceContextType . EXTENDED ;", "Value   stType    =    annotation . value (  \" synchronization \"  )  ;", "SynchronizationType   synchronizationType    =     (  ( stType    =  =    null )     |  |     ( SYNCHRONIZED . name (  )  . equals ( stType . asString (  )  )  )  )     ?    SynchronizationType . SYNCHRONIZED    :    SynchronizationType . UNSYNCHRONIZED ;", "Map < String ,    String >    properties ;", "Value   value    =    annotation . value (  \" properties \"  )  ;", "Instance [  ]    props    =     ( value    !  =    null )     ?    value . asNestedArray (  )     :    null ;", "if    ( props    !  =    null )     {", "properties    =    new   HashMap <  >  (  )  ;", "for    ( int   source    =     0  ;    source    <     ( props . length )  ;    source +  +  )     {", "properties . put ( props [ source ]  . value (  \" name \"  )  . asString (  )  ,    props [ source ]  . value (  \" value \"  )  . asString (  )  )  ;", "}", "} else    {", "properties    =    null ;", "}", "final   JPADeploymentSettings   jpaDeploymentSettings    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  . getAttachment ( JpaAttachments . DEPLOYMENT _ SETTINGS _ KEY )  ;", "return   new   PersistenceContextInjectionSource ( type ,    synchronizationType ,    properties ,    puServiceName ,    deploymentUnit . getServiceRegistry (  )  ,    scopedPuName ,    injectionTypeName ,    pu ,    jpaDeploymentSettings )  ;", "} else    {", "return   new   PersistenceUnitInjectionSource ( puServiceName ,    deploymentUnit . getServiceRegistry (  )  ,    injectionTypeName ,    pu )  ;", "}", "}", "METHOD_END"], "methodName": ["getBindingSource"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "boolean   isPC    =    annotation . name (  )  . local (  )  . equals (  \" PersistenceContext \"  )  ;", "return   isPC    ?     . ENTITY _ MANAGER _ CLASS    :     . ENTITY _ MANAGERFACTORY _ CLASS ;", "}", "METHOD_END"], "methodName": ["getClassLevelInjectionType"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   AnnotationValue   puName    =    annotation . value (  \" unitName \"  )  ;", "String   searchName    =    null ;", "if    (  ( puName    !  =    null )     &  &     (  ( searchName    =    puName . asString (  )  )     !  =    null )  )     {", "searchName    =    SpecDescriptorPropertyReplacement . propertyReplacer ( deploymentUnit )  . replaceProperties ( searchName )  ;", "}", "JpaLogger . ROOT _ LOGGER . debugf (  \" persistence   unit   search   for   unitName =  % s   referenced   from   class =  % s    ( annotation =  % s )  \"  ,    searchName ,    classDescription . getClassName (  )  ,    annotation . toString (  )  )  ;", "PersistenceUnitMetadata   pu    =    PersistenceUnitSearch . resolvePersistenceUnitSupplier ( deploymentUnit ,    searchName )  ;", "if    ( null    =  =    pu )     {", "classDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . persistenceUnitNotFound ( searchName ,    deploymentUnit )  )  ;", "return   null ;", "}", "return   pu ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnit"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   PersistenceUnitServiceImpl . getPUServiceName ( scopedPuName )  ;", "}", "METHOD_END"], "methodName": ["getPuServiceName"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   annotation . name (  )  . local (  )  . equals (  \" PersistenceContext \"  )  ;", "}", "METHOD_END"], "methodName": ["isPersistenceContext"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   annotation . name (  )  . local (  )  . equals (  \" PersistenceContexts \"  )  ;", "}", "METHOD_END"], "methodName": ["isPersistenceContexts"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   annotation . name (  )  . local (  )  . equals (  \" PersistenceUnit \"  )  ;", "}", "METHOD_END"], "methodName": ["isPersistenceUnit"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "return   annotation . name (  )  . local (  )  . equals (  \" PersistenceUnits \"  )  ;", "}", "METHOD_END"], "methodName": ["isPersistenceUnits"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "bindClassSources ( deploymentUnit ,    annotation ,    eeModuleClassDescription )  ;", "}", "METHOD_END"], "methodName": ["processClass"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   fieldName    =    fieldInfo . name (  )  ;", "final   AnnotationValue   declaredNameValue    =    annotation . value (  \" name \"  )  ;", "final   String   declaredName    =     ( declaredNameValue    !  =    null )     ?    declaredNameValue . asString (  )     :    null ;", "final   String   localContextName ;", "if    (  ( declaredName    =  =    null )     |  |     ( declaredName . isEmpty (  )  )  )     {", "localContextName    =     (  ( fieldInfo . declaringClass (  )  . name (  )  . toString (  )  )     +     \"  /  \"  )     +    fieldName ;", "} else    {", "localContextName    =    declaredName ;", "}", "final   DotName   declaredTypeDotName    =    fieldInfo . type (  )  . name (  )  ;", "final   DotName   injectionTypeDotName    =     (  ( declaredTypeDotName    =  =    null )     |  |     ( declaredTypeDotName . toString (  )  . equals ( Object . class . getName (  )  )  )  )     ?    fieldInfo . type (  )  . name (  )     :    declaredTypeDotName ;", "final   String   injectionType    =    injectionTypeDotName . toString (  )  ;", "final   InjectionSource   bindingSource    =    this . getBindingSource ( deploymentUnit ,    annotation ,    injectionType ,    eeModuleClassDescription )  ;", "if    ( bindingSource    !  =    null )     {", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( localContextName ,    bindingSource )  ;", "eeModuleClassDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "final   InjectionTarget   injectionTarget    =    new   ee . component . FieldInjectionTarget ( fieldInfo . declaringClass (  )  . name (  )  . toString (  )  ,    fieldName ,    fieldInfo . type (  )  . name (  )  . toString (  )  )  ;", "final   InjectionSource   injectionSource    =    new   LookupInjectionSource ( localContextName )  ;", "final   ResourceInjectionConfiguration   injectionConfiguration    =    new   ResourceInjectionConfiguration ( injectionTarget ,    injectionSource )  ;", "eeModuleClassDescription . addResourceInjection ( injectionConfiguration )  ;", "}", "}", "METHOD_END"], "methodName": ["processField"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   methodName    =    methodInfo . name (  )  ;", "if    (  (  !  ( methodName . startsWith (  \" set \"  )  )  )     |  |     (  ( methodInfo . args (  )  . length )     !  =     1  )  )     {", "eeModuleClassDescription . setInvalid ( JpaLogger . ROOT _ LOGGER . setterMethodOnlyAnnotation ( annotation . name (  )  . toString (  )  ,    methodInfo )  )  ;", "return ;", "}", "final   String   contextNameSuffix    =     ( methodName . substring (  3  ,     4  )  . toLowerCase ( Locale . ENGLISH )  )     +     ( methodName . substring (  4  )  )  ;", "final   AnnotationValue   declaredNameValue    =    annotation . value (  \" name \"  )  ;", "final   String   declaredName    =     ( declaredNameValue    !  =    null )     ?    declaredNameValue . asString (  )     :    null ;", "final   String   localContextName ;", "if    (  ( declaredName    =  =    null )     |  |     ( declaredName . isEmpty (  )  )  )     {", "localContextName    =     (  ( methodInfo . declaringClass (  )  . name (  )  . toString (  )  )     +     \"  /  \"  )     +    contextNameSuffix ;", "} else    {", "localContextName    =    declaredName ;", "}", "final   String   injectionType    =    methodInfo . args (  )  [  0  ]  . name (  )  . toString (  )  ;", "final   InjectionSource   bindingSource    =    this . getBindingSource ( deploymentUnit ,    annotation ,    injectionType ,    eeModuleClassDescription )  ;", "if    ( bindingSource    !  =    null )     {", "final   BindingConfiguration   bindingConfiguration    =    new   BindingConfiguration ( localContextName ,    bindingSource )  ;", "eeModuleClassDescription . getBindingConfigurations (  )  . add ( bindingConfiguration )  ;", "final   InjectionTarget   injectionTarget    =    new   ee . component . MethodInjectionTarget ( methodInfo . declaringClass (  )  . name (  )  . toString (  )  ,    methodName ,    methodInfo . args (  )  [  0  ]  . name (  )  . toString (  )  )  ;", "final   InjectionSource   injectionSource    =    new   LookupInjectionSource ( localContextName )  ;", "final   ResourceInjectionConfiguration   injectionConfiguration    =    new   ResourceInjectionConfiguration ( injectionTarget ,    injectionSource )  ;", "eeModuleClassDescription . addResourceInjection ( injectionConfiguration )  ;", "}", "}", "METHOD_END"], "methodName": ["processMethod"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( AnnotationInstance   annotation    :    persistenceContexts )     {", "ClassInfo   declaringClass ;", "final   AnnotationTarget   annotationTarget    =    annotation . target (  )  ;", "if    ( annotationTarget   instanceof   FieldInfo )     {", "FieldInfo   fieldInfo    =     (  ( FieldInfo )     ( annotationTarget )  )  ;", "declaringClass    =    fieldInfo . declaringClass (  )  ;", "EEModuleClassDescription   eeModuleClassDescription    =    eeModuleDescription . addOrGetLocalClassDescription ( declaringClass . name (  )  . toString (  )  )  ;", "this . processField ( deploymentUnit ,    annotation ,    fieldInfo ,    eeModuleClassDescription )  ;", "} else", "if    ( annotationTarget   instanceof   MethodInfo )     {", "MethodInfo   methodInfo    =     (  ( MethodInfo )     ( annotationTarget )  )  ;", "declaringClass    =    methodInfo . declaringClass (  )  ;", "EEModuleClassDescription   eeModuleClassDescription    =    eeModuleDescription . addOrGetLocalClassDescription ( declaringClass . name (  )  . toString (  )  )  ;", "this . processMethod ( deploymentUnit ,    annotation ,    methodInfo ,    eeModuleClassDescription )  ;", "} else", "if    ( annotationTarget   instanceof   ClassInfo )     {", "declaringClass    =     (  ( ClassInfo )     ( annotationTarget )  )  ;", "EEModuleClassDescription   eeModuleClassDescription    =    eeModuleDescription . addOrGetLocalClassDescription ( declaringClass . name (  )  . toString (  )  )  ;", "this . processClass ( deploymentUnit ,    annotation ,    eeModuleClassDescription )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processPersistenceAnnotations"], "fileName": "org.jboss.as.jpa.processor.JPAAnnotationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "setClassLoader ( deploymentUnit )  ;", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.JPAClassFileTransformerProcessor"}, {"methodBody": ["METHOD_START", "{", "DelegatingClassFileTransformer   transformer    =    deploymentUnit . getAttachment ( ATTACHMENT _ KEY )  ;", "if    ( transformer    !  =    null )     {", "for    ( ResourceRoot   resourceRoot    :    DeploymentUtils . allResourceRoots ( deploymentUnit )  )     {", "PersistenceUnitMetadataHolder   holder    =    resourceRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  ;", "if    ( holder    !  =    null )     {", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "if    ( Configuration . needClassFileTransformer ( pu )  )     {", "transformer . addTransformer ( new   JPADelegatingClassFileTransformer ( pu )  )  ;", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["setClassLoaderTransformer"], "fileName": "org.jboss.as.jpa.processor.JPAClassFileTransformerProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleIdentifier   moduleIdentifier    :    moduleIdentifiers )     {", "moduleSpecification . addSystemDependency ( new   server . deployment . module . ModuleDependency ( moduleLoader ,    moduleIdentifier ,    false ,    false ,    true ,    false )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" added    % s   dependency   to    % s \"  ,    moduleIdentifier ,    deploymentUnit . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleIdentifier   moduleIdentifier    :    moduleIdentifiers )     {", "moduleSpecification . addSystemDependency ( new   server . deployment . module . ModuleDependency ( moduleLoader ,    moduleIdentifier ,    true ,    false ,    false ,    false )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" added    % s   dependency   to    % s \"  ,    moduleIdentifier ,    deploymentUnit . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addOptionalDependency"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( components    =  =    null )     |  |     ( components . isEmpty (  )  )  )     |  |     ( holder    =  =    null )  )     {", "return ;", "}", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "String   jpaContainerManaged    =    pu . getProperties (  )  . getProperty ( Configuration . JPA _ CONTAINER _ MANAGED )  ;", "boolean   deployPU    =     ( jpaContainerManaged    =  =    null )     ?    true    :    Boolean . parseBoolean ( jpaContainerManaged )  ;", "if    ( deployPU )     {", "final   ServiceName   puServiceName    =    PersistenceUnitServiceImpl . getPUServiceName ( pu )  ;", "for    ( final   ComponentDescription   component    :    components )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \" Adding   dependency   on   PU   service    % s   for   component    % s \"  ,    puServiceName ,    component . getComponentClassName (  )  )  ;", "component . add ( puServiceName ,    REQUIRED )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addPUServiceDependencyToComponents"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "int   defaultProviderCount    =     0  ;", "Set < String >    moduleDependencies    =    new   HashSet < String >  (  )  ;", "PersistenceUnitsInApplication   persistenceUnitsInApplication    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  . getAttachment ( PersistenceUnitsInApplication . PERSISTENCE _ UNITS _ IN _ APPLICATION )  ;", "for    ( PersistenceUnitMetadataHolder   holder    :    persistenceUnitsInApplication . getPersistenceUnitHolders (  )  )     {", "defaultProviderCount    +  =    loadPersistenceUnits ( moduleSpecification ,    moduleLoader ,    deploymentUnit ,    moduleDependencies ,    holder )  ;", "}", "if    ( defaultProviderCount    >     0  )     {", "moduleDependencies . add ( Configuration . getDefaultProviderModuleName (  )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" added    ( default   provider )     % s   dependency   to    % s    ( since    % d   PU ( s )    didn ' t   specify    % s \"  ,    Configuration . getDefaultProviderModuleName (  )  ,    deploymentUnit . getName (  )  ,    defaultProviderCount ,     (  ( Configuration . PROVIDER _ MODULE )     +     \"  )  \"  )  )  ;", "}", "for    ( String   dependency    :    moduleDependencies )     {", "addDependency ( moduleSpecification ,    moduleLoader ,    deploymentUnit ,    ModuleIdentifier . fromString ( dependency )  )  ;", "}", "final   EEModuleDescription   eeModuleDescription    =    deploymentUnit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "final   Collection < ComponentDescription >    components    =    eeModuleDescription . getComponentDescriptions (  )  ;", "for    ( PersistenceUnitMetadataHolder   holder    :    persistenceUnitsInApplication . getPersistenceUnitHolders (  )  )     {", ". addPUServiceDependencyToComponents ( components ,    holder )  ;", "}", "}", "METHOD_END"], "methodName": ["addPersistenceProviderModuleDependencies"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ModuleSpecification   moduleSpecification    =    deploymentUnit . getAttachment ( MODULE _ SPECIFICATION )  ;", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,    deploymentUnit ,     . JAVAX _ PERSISTENCE _ API _ ID )  ;", "if    (  !  ( JPADeploymentMarker . isJPADeployment ( deploymentUnit )  )  )     {", "return ;", "}", "addDependency ( moduleSpecification ,    moduleLoader ,    deploymentUnit ,     . JBOSS _ AS _ JPA _ ID ,     . JBOSS _ AS _ JPA _ SPI _ ID )  ;", "addPersistenceProviderModuleDependencies ( phaseContext ,    moduleSpecification ,    moduleLoader )  ;", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "int   defaultProviderCount    =     0  ;", "if    ( holder    !  =    null )     {", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "String   providerModule    =    pu . getProperties (  )  . getProperty ( Configuration . PROVIDER _ MODULE )  ;", "String   adapterModule    =    pu . getProperties (  )  . getProperty ( Configuration . ADAPTER _ MODULE )  ;", "String   adapterClass    =    pu . getProperties (  )  . getProperty ( Configuration . ADAPTER _ CLASS )  ;", "if    ( adapterModule    !  =    null )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s   is   configured   to   use   adapter   module    '  % s '  \"  ,    pu . getPersistenceUnitName (  )  ,    adapterModule )  ;", "moduleDependencies . add ( adapterModule )  ;", "}", "deploymentUnit . putAttachment ( JpaAttachments . ADAPTOR _ CLASS _ NAME ,    adapterClass )  ;", "String   provider    =    pu . getProperties (  )  . getProperty ( Configuration . PROVIDER _ MODULE )  ;", "if    ( provider    !  =    null )     {", "if    ( provider . equals ( Configuration . PROVIDER _ MODULE _ APPLICATION _ SUPPLIED )  )     {", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s   is   configured   to   use   application   supplied   persistence   provider \"  ,    pu . getPersistenceUnitName (  )  )  ;", "} else    {", "moduleDependencies . add ( provider )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s   is   configured   to   use   provider   module    '  % s '  \"  ,    pu . getPersistenceUnitName (  )  ,    provider )  ;", "}", "} else", "if    ( Configuration . PROVIDER _ CLASS _ DEFAULT . equals ( pu . getPersistenceProviderClassName (  )  )  )     {", "defaultProviderCount +  +  ;", "} else    {", "String   providerModuleName    =    Configuration . getProviderModuleNameFromProviderClassName ( pu . getPersistenceProviderClassName (  )  )  ;", "if    ( providerModuleName    !  =    null )     {", "addOptionalDependency ( moduleSpecification ,    moduleLoader ,    deploymentUnit ,    modules . ModuleIdentifier . fromString ( providerModuleName )  )  ;", "JpaLogger . ROOT _ LOGGER . debugf (  \"  % s   is   configured   to   use   persistence   provider    '  % s '  ,    adding   an   optional   dependency   on   module    '  % s '  \"  ,    pu . getPersistenceUnitName (  )  ,    pu . getPersistenceProviderClassName (  )  ,    providerModuleName )  ;", "}", "}", "}", "}", "return   defaultProviderCount ;", "}", "METHOD_END"], "methodName": ["loadPersistenceUnits"], "fileName": "org.jboss.as.jpa.processor.JPADependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( componentDescription . isStateful (  )  )     {", "componentDescription . getConfigurators (  )  . addFirst ( new   ComponentConfigurator (  )     {", "@ Override", "public   void   configure ( DeploymentPhaseContext   context ,    ComponentDescription   description ,    ComponentConfiguration   configuration )    throws   DeploymentUnitProcessingException    {", "configuration . addPostConstruct ( SFSBPreCreate . FACTORY ,    JPA _ SFSB _ PRE _ CREATE )  ;", "configuration . addPostConstruct ( SFSBCreate . FACTORY ,    JPA _ SFSB _ CREATE )  ;", "configuration . addPreDestroy ( SFSBDestroy . FACTORY ,    JPA _ SFSB _ DESTROY )  ;", "configuration . addComponent ( SFSBInvocation . FACTORY ,    JPA _ SFSB _ INTERCEPTOR ,    false )  ;", "configuration . getContextKeys (  )  . add ( SFSBInvocation . CONTEXT _ KEY )  ;", "}", "}  )  ;", "}", "if    (  ( componentDescription . isStateful (  )  )     |  |     ( componentDescription . isStateless (  )  )  )     {", "componentDescription . getConfigurators (  )  . add ( new   ComponentConfigurator (  )     {", "@ Override", "public   void   configure ( DeploymentPhaseContext   context ,    ComponentDescription   description ,    ComponentConfiguration   configuration )    throws   DeploymentUnitProcessingException    {", "configuration . addComponent ( SBInvocation . FACTORY ,    JPA _ SESSION _ BEAN _ INTERCEPTOR ,    false )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerSessionBeanInterceptors"], "fileName": "org.jboss.as.jpa.processor.JPAInterceptorProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceProviderHandler . deploy ( phaseContext ,    platform )  ;", "PersistenceUnitServiceHandler . deploy ( phaseContext ,    true ,    platform )  ;", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceBeginInstallProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceProviderHandler . undeploy ( deploymentUnit )  ;", "}", "METHOD_END"], "methodName": ["undeploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceBeginInstallProcessor"}, {"methodBody": ["METHOD_START", "{", "deploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "ProviderDeploymentHolder   persistenceProviderDeploymentHolder    =    deploymentUnit . getAttachment ( JpaAttachments . DEPLOYED _ PERSISTENCE _ PROVIDER )  ;", "return    ( persistenceProviderDeploymentHolder    !  =    null )     &  &     (  ( persistenceProviderDeploymentHolder . getProviders (  )  )     !  =    null )     ?     ( persistenceProviderDeploymentHolder . getProviders (  )  . size (  )  )     >     0     :    false ;", "}", "METHOD_END"], "methodName": ["deploymentHasPersistenceProvider"], "fileName": "org.jboss.as.jpa.processor.PersistenceCompleteInstallProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceProviderAdaptor   persistenceProviderAdaptor    =    null ;", "final   ServiceLoader < PersistenceProviderAdaptor >    serviceLoader    =    ServiceLoader . load ( PersistenceProviderAdaptor . class ,    persistenceProvider . getClass (  )  . getClassLoader (  )  )  ;", "if    ( serviceLoader    !  =    null )     {", "for    ( PersistenceProviderAdaptor   adaptor    :    serviceLoader )     {", "if    ( persistenceProviderAdaptor    !  =    null )     {", "throw   JpaLogger . ROOT _ LOGGER . classloaderHasMultipleAdapters ( persistenceProvider . getClass (  )  . getClassLoader (  )  . toString (  )  )  ;", "}", "persistenceProviderAdaptor    =    adaptor ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" loaded   persistence   provider   adapter    % s   from   classloader    % s \"  ,    persistenceProviderAdaptor . getClass (  )  . getName (  )  ,    persistenceProvider . getClass (  )  . getClassLoader (  )  . toString (  )  )  ;", "}", "if    ( persistenceProviderAdaptor    !  =    null )     {", "persistenceProviderAdaptor . injectJtaManager ( jtaManager )  ;", "persistenceProviderAdaptor . injectPlatform ( platform )  ;", "}", "}", "return   persistenceProviderAdaptor    =  =    null    ?     . noopAdaptor    :    persistenceProviderAdaptor ;", "}", "METHOD_END"], "methodName": ["loadPersistenceAdapter"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderAdaptorLoader"}, {"methodBody": ["METHOD_START", "{", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "if    ( adapterModule    =  =    null )     {", "return    . noopAdaptor ;", "}", "PersistenceProviderAdaptor   persistenceProviderAdaptor    =    null ;", "Module   module    =    moduleLoader . loadModule ( ModuleIdentifier . fromString ( adapterModule )  )  ;", "final   ServiceLoader < PersistenceProviderAdaptor >    serviceLoader    =    module . loadService ( PersistenceProviderAdaptor . class )  ;", "if    ( serviceLoader    !  =    null )     {", "for    ( PersistenceProviderAdaptor   adaptor    :    serviceLoader )     {", "if    ( persistenceProviderAdaptor    !  =    null )     {", "throw   JpaLogger . ROOT _ LOGGER . multipleAdapters ( adapterModule )  ;", "}", "persistenceProviderAdaptor    =    adaptor ;", "JpaLogger . ROOT _ LOGGER . debugf (  \" loaded   persistence   provider   adapter    % s \"  ,    adapterModule )  ;", "}", "if    ( persistenceProviderAdaptor    !  =    null )     {", "persistenceProviderAdaptor . injectJtaManager ( manager )  ;", "persistenceProviderAdaptor . injectPlatform ( platform )  ;", "}", "}", "return   persistenceProviderAdaptor ;", "}", "METHOD_END"], "methodName": ["loadPersistenceAdapterModule"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderAdaptorLoader"}, {"methodBody": ["METHOD_START", "{", "Set < ClassLoader >    deploymentClassLoaders    =    new   HashSet < ClassLoader >  (  )  ;", "final   DeploymentUnit   topDeploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "final   Module   toplevelModule    =    topDeploymentUnit . getAttachment ( MODULE )  ;", "if    ( toplevelModule    !  =    null )     {", "deploymentClassLoaders . add ( toplevelModule . getClassLoader (  )  )  ;", "final   List < DeploymentUnit >    subDeployments    =    topDeploymentUnit . getAttachmentList ( SUB _ DEPLOYMENTS )  ;", "for    ( DeploymentUnit   subDeploymentUnit    :    subDeployments )     {", "final   Module   subDeploymentModule    =    subDeploymentUnit . getAttachment ( MODULE )  ;", "if    ( subDeploymentModule    !  =    null )     {", "deploymentClassLoaders . add ( subDeploymentModule . getClassLoader (  )  )  ;", "}", "}", "}", "return   deploymentClassLoaders ;", "}", "METHOD_END"], "methodName": ["allDeploymentModuleClassLoaders"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   Module   module    =    deploymentUnit . getAttachment ( MODULE )  ;", "final   ServicesAttachment   servicesAttachment    =    deploymentUnit . getAttachment ( SERVICES )  ;", "if    (  ( module    !  =    null )     &  &     ( servicesAttachment    !  =    null )  )     {", "final   ModuleClassLoader   deploymentModuleClassLoader    =    module . getClassLoader (  )  ;", "PersistenceProvider   provider ;", "final   List < String >    providerNames    =    servicesAttachment . getServiceImplementations (  . PERSISTENCE _ PROVIDER _ CLASSNAME )  ;", "List < PersistenceProvider >    providerList    =    new   ArrayList < PersistenceProvider >  (  )  ;", "for    ( String   providerName    :    providerNames )     {", "try    {", "final   Class <  ?    extends   PersistenceProvider >    providerClass    =    deploymentModuleClassLoader . loadClass ( providerName )  . asSubclass ( PersistenceProvider . class )  ;", "final   Constructor <  ?    extends   PersistenceProvider >    constructor    =    providerClass . getConstructor (  )  ;", "provider    =    constructor . newInstance (  )  ;", "providerList . add ( provider )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" deployment    % s   is   using   its   own   copy   of    % s \"  ,    deploymentUnit . getName (  )  ,    providerName )  ;", "}    catch    ( Exception   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotDeployApp ( e ,    providerName )  ;", "}", "}", "if    (  ( providerList . size (  )  )     >     0  )     {", "final   String   adapterClass    =    deploymentUnit . getAttachment ( JpaAttachments . ADAPTOR _ CLASS _ NAME )  ;", "PersistenceProviderAdaptor   adaptor ;", "if    ( adapterClass    !  =    null )     {", "try    {", "adaptor    =     (  ( PersistenceProviderAdaptor )     ( deploymentModuleClassLoader . loadClass ( adapterClass )  . newInstance (  )  )  )  ;", "adaptor . injectJtaManager ( new   JtaManagerImpl ( deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ MANAGER )  ,    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ SYNCHRONIZATION _ REGISTRY )  )  )  ;", "adaptor . injectPlatform ( platform )  ;", "ArrayList < PersistenceProviderAdaptor >    adaptorList    =    new   ArrayList <  >  (  )  ;", "adaptorList . add ( adaptor )  ;", "PersistenceProviderDeploymentHolder . savePersistenceProviderInDeploymentUnit ( deploymentUnit ,    providerList ,    adaptorList )  ;", "}    catch    ( InstantiationException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotCreateAdapter ( e ,    adapterClass )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotCreateAdapter ( e ,    adapterClass )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotCreateAdapter ( e ,    adapterClass )  ;", "}", "} else    {", "PersistenceProviderDeploymentHolder . savePersistenceProviderInDeploymentUnit ( deploymentUnit ,    providerList ,    null )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "PersistenceProviderDeploymentHolder   persistenceProviderDeploymentHolder    =    PersistenceProviderDeploymentHolder . getPersistenceProviderDeploymentHolder ( deploymentUnit )  ;", "List < PersistenceProvider >    providerList    =     ( persistenceProviderDeploymentHolder    !  =    null )     ?    persistenceProviderDeploymentHolder . getProviders (  )     :    null ;", "if    ( providerList    !  =    null )     {", "Set < ClassLoader >    deploymentClassLoaders    =     . allDeploymentModuleClassLoaders ( deploymentUnit )  ;", "for    ( PersistenceProvider   provider    :    providerList )     {", "PersistenceProviderResolverImpl . getInstance (  )  . addDeploymentSpecificPersistenceProvider ( provider ,    deploymentClassLoaders )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["finishDeploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderHandler"}, {"methodBody": ["METHOD_START", "{", "Set < ClassLoader >    deploymentClassLoaders    =    PersistenceProviderHandler . allDeploymentModuleClassLoaders ( deploymentUnit )  ;", "PersistenceProviderResolverImpl . getInstance (  )  . clearCachedDeploymentSpecificProviders ( deploymentClassLoaders )  ;", "}", "METHOD_END"], "methodName": ["undeploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceProviderHandler"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitMetadata   pu    =    getPersistenceUnit ( deploymentUnit ,    unitName )  ;", "String   scopedPuName    =    pu . getScopedPersistenceUnitName (  )  ;", "ServiceName   puServiceName    =    getPuServiceName ( scopedPuName )  ;", "final   JPADeploymentSettings   jpaDeploymentSettings    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  . getAttachment ( JpaAttachments . DEPLOYMENT _ SETTINGS _ KEY )  ;", "return   new   PersistenceContextInjectionSource ( type ,    synchronizationType ,    properties ,    puServiceName ,    deploymentUnit . getServiceRegistry (  )  ,    scopedPuName ,    EntityManager . class . getName (  )  ,    pu ,    jpaDeploymentSettings )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceContextBindingSource"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "List < BindingConfiguration >    bindingConfigurations    =    new   ArrayList < BindingConfiguration >  (  )  ;", "final   RemoteEnvironment   remoteEnvironment    =    environment . getEnvironment (  )  ;", "if    ( remoteEnvironment    =  =    null )     {", "return   bindingConfigurations ;", "}", "if    ( remoteEnvironment   instanceof   Environment )     {", "ContextReferencesMetaData   persistenceUnitRefs    =     (  ( Environment )     ( remoteEnvironment )  )  . getContextRefs (  )  ;", "if    ( persistenceUnitRefs    !  =    null )     {", "for    ( ContextReferenceMetaData   puRef    :    persistenceUnitRefs )     {", "String   name    =    puRef . getName (  )  ;", "String   persistenceUnitName    =    puRef . getUnitName (  )  ;", "String   lookup    =    puRef . getLookupName (  )  ;", "if    (  (  !  ( isEmpty ( lookup )  )  )     &  &     (  !  ( isEmpty ( persistenceUnitName )  )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotSpecifyBoth (  \"  < lookup - name >  \"  ,    lookup ,     \" persistence - unit - name \"  ,    persistenceUnitName ,     \"  < persistence - context - ref /  >  \"  ,    resourceInjectionTarget )  ;", "}", "if    (  !  ( name . startsWith (  \" java :  \"  )  )  )     {", "name    =     ( environment . getDefaultContext (  )  )     +    name ;", "}", "LookupInjectionSource   injectionSource    =    new   LookupInjectionSource ( name )  ;", "processInjectionTargets ( resourceInjectionTarget ,    injectionSource ,    classLoader ,    deploymentReflectionIndex ,    puRef ,    EntityManager . class )  ;", "BindingConfiguration   bindingConfiguration    =    null ;", "if    (  !  ( isEmpty ( lookup )  )  )     {", "bindingConfiguration    =    new   BindingConfiguration ( name ,    new   LookupInjectionSource ( lookup )  )  ;", "} else    {", "PropertiesMetaData   properties    =    puRef . getProperties (  )  ;", "Map < String ,    String >    map    =    new   HashMap <  >  (  )  ;", "if    ( properties    !  =    null )     {", "for    ( PropertyMetaData   prop    :    properties )     {", "map . put ( prop . getKey (  )  ,    prop . getValue (  )  )  ;", "}", "}", "ContextType   type    =     (  (  ( puRef . getContextType (  )  )     =  =    null )     |  |     (  ( puRef . getContextType (  )  )     =  =     ( ContextTypeDescription . TRANSACTION )  )  )     ?    ContextType . TRANSACTION    :    ContextType . EXTENDED ;", "SynchronizationType   synchronizationType    =     (  (  ( puRef . getContextSynchronization (  )  )     =  =    null )     |  |     ( Synchronized . equals ( puRef . getContextSynchronization (  )  )  )  )     ?    SynchronizationType . SYNCHRONIZED    :    SynchronizationType . UNSYNCHRONIZED ;", "InjectionSource   pcBindingSource    =    this . getContextBindingSource ( deploymentUnit ,    persistenceUnitName ,    type ,    synchronizationType ,    map )  ;", "bindingConfiguration    =    new   BindingConfiguration ( name ,    pcBindingSource )  ;", "}", "bindingConfigurations . add ( bindingConfiguration )  ;", "}", "}", "}", "return   bindingConfigurations ;", "}", "METHOD_END"], "methodName": ["getPersistenceContextRefs"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitMetadata   pu    =    PersistenceUnitSearch . resolvePersistenceUnitSupplier ( deploymentUnit ,    puName )  ;", "if    ( null    =  =    pu )     {", "throw   new   server . deployment . DeploymentUnitProcessingException ( JpaLogger . ROOT _ LOGGER . persistenceUnitNotFound ( puName ,    deploymentUnit )  )  ;", "}", "return   pu ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnit"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   searchName ;", "if    ( isEmpty ( unitName )  )     {", "searchName    =    null ;", "} else    {", "searchName    =    unitName ;", "}", "final   PersistenceUnitMetadata   pu    =    PersistenceUnitSearch . resolvePersistenceUnitSupplier ( deploymentUnit ,    searchName )  ;", "if    ( null    =  =    pu )     {", "throw   new   server . deployment . DeploymentUnitProcessingException ( JpaLogger . ROOT _ LOGGER . persistenceUnitNotFound ( searchName ,    deploymentUnit )  )  ;", "}", "String   scopedPuName    =    pu . getScopedPersistenceUnitName (  )  ;", "ServiceName   puServiceName    =    getPuServiceName ( scopedPuName )  ;", "return   new   PersistenceUnitInjectionSource ( puServiceName ,    deploymentUnit . getServiceRegistry (  )  ,    EntityManagerFactory . class . getName (  )  ,    pu )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitBindingSource"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "final   List < BindingConfiguration >    bindingConfigurations    =    new   ArrayList < BindingConfiguration >  (  )  ;", "if    (  ( environment . getEnvironment (  )  )     =  =    null )     {", "return   bindingConfigurations ;", "}", "UnitReferencesMetaData   persistenceUnitRefs    =    environment . getEnvironment (  )  . getUnitRefs (  )  ;", "if    ( persistenceUnitRefs    !  =    null )     {", "if    (  ( persistenceUnitRefs . size (  )  )     >     0  )     {", "JPADeploymentMarker . mark ( deploymentUnit )  ;", "}", "for    ( UnitReferenceMetaData   puRef    :    persistenceUnitRefs )     {", "String   name    =    puRef . getName (  )  ;", "String   persistenceUnitName    =    puRef . getUnitName (  )  ;", "String   lookup    =    puRef . getLookupName (  )  ;", "if    (  (  !  ( isEmpty ( lookup )  )  )     &  &     (  !  ( isEmpty ( persistenceUnitName )  )  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotSpecifyBoth (  \"  < lookup - name >  \"  ,    lookup ,     \" persistence - unit - name \"  ,    persistenceUnitName ,     \"  < persistence - unit - ref /  >  \"  ,    resourceInjectionTarget )  ;", "}", "if    (  !  ( name . startsWith (  \" java :  \"  )  )  )     {", "name    =     ( environment . getDefaultContext (  )  )     +    name ;", "}", "LookupInjectionSource   injectionSource    =    new   LookupInjectionSource ( name )  ;", "processInjectionTargets ( resourceInjectionTarget ,    injectionSource ,    classLoader ,    deploymentReflectionIndex ,    puRef ,    EntityManagerFactory . class )  ;", "BindingConfiguration   bindingConfiguration    =    null ;", "if    (  !  ( isEmpty ( lookup )  )  )     {", "bindingConfiguration    =    new   BindingConfiguration ( name ,    new   LookupInjectionSource ( lookup )  )  ;", "} else    {", "InjectionSource   puBindingSource    =    this . getUnitBindingSource ( deploymentUnit ,    persistenceUnitName )  ;", "bindingConfiguration    =    new   BindingConfiguration ( name ,    puBindingSource )  ;", "}", "bindingConfigurations . add ( bindingConfiguration )  ;", "}", "}", "return   bindingConfigurations ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitRefs"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "return   PersistenceUnitServiceImpl . getPUServiceName ( scopedPuName )  ;", "}", "METHOD_END"], "methodName": ["getPuServiceName"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "return    ( string    =  =    null )     |  |     ( string . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.jboss.as.jpa.processor.PersistenceRefProcessor"}, {"methodBody": ["METHOD_START", "{", "topDeploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( topDeploymentUnit )  ;", "synchronized ( topDeploymentUnit )     {", "sInApplication   persistenceUnitsInApplication    =    getsInApplication ( topDeploymentUnit )  ;", "persistenceUnitsInApplication . addHolder ( holder )  ;", "}", "}", "METHOD_END"], "methodName": ["addApplicationDependenciesOnProvider"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( persistenceUnitName . indexOf (  '  /  '  )  )     !  =     (  -  1  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . invalidPersistenceUnitName ( persistenceUnitName ,     '  /  '  )  ;", "}", "if    (  ( persistenceUnitName . indexOf (  '  #  '  )  )     !  =     (  -  1  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . invalidPersistenceUnitName ( persistenceUnitName ,     '  #  '  )  ;", "}", "String   unitName    =     (  (  . getScopedDeploymentUnitPath ( deploymentUnit )  )     +     \"  #  \"  )     +    persistenceUnitName ;", "return   unitName ;", "}", "METHOD_END"], "methodName": ["createBeanName"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "VirtualFile   metaData    =    p _ xml ;", "return   metaData . getParent (  )  . getParent (  )  . toURL (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getPersistenceUnitURL"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitsInApplication   persistenceUnitsInApplication    =    topDeploymentUnit . getAttachment ( PersistenceUnitsInApplication . PERSISTENCE _ UNITS _ IN _ APPLICATION )  ;", "if    ( persistenceUnitsInApplication    =  =    null )     {", "persistenceUnitsInApplication    =    new   PersistenceUnitsInApplication (  )  ;", "topDeploymentUnit . putAttachment ( PersistenceUnitsInApplication . PERSISTENCE _ UNITS _ IN _ APPLICATION ,    persistenceUnitsInApplication )  ;", "}", "return   persistenceUnitsInApplication ;", "}", "METHOD_END"], "methodName": ["getPersistenceUnitsInApplication"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   URL ( jar )  ;", "}    catch    ( MalformedURLException   e )     {", "try    {", "VirtualFile   deploymentUnitFile    =    p _ xml ;", "VirtualFile   parent    =    deploymentUnitFile . getParent (  )  . getParent (  )  . getParent (  )  ;", "VirtualFile   baseDir    =     ( parent    !  =    null )     ?    parent    :    deploymentUnitFile ;", "VirtualFile   jarFile    =    baseDir . getChild ( jar )  ;", "if    ( jarFile    =  =    null )", "throw   JpaLogger . ROOT _ LOGGER . childNotFound ( jar ,    baseDir )  ;", "return   jarFile . toURL (  )  ;", "}    catch    ( Exception   e 1  )     {", "throw   JpaLogger . ROOT _ LOGGER . relativePathNotFound ( e 1  ,    jar )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getRelativeURL"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "ArrayList < String >    parts    =    new   ArrayList < String >  (  )  ;", "do    {", "final   ResourceRoot   deploymentRoot    =    deployment . getAttachment ( DEPLOYMENT _ ROOT )  ;", "Deployment   parentdeployment    =    deployment . getParent (  )  ;", "if    ( parentdeployment    !  =    null )     {", "ResourceRoot   parentDeploymentRoot    =    parentdeployment . getAttachment ( DEPLOYMENT _ ROOT )  ;", "parts . add (  0  ,    deploymentRoot . getRoot (  )  . getPathNameRelativeTo ( parentDeploymentRoot . getRoot (  )  )  )  ;", "} else    {", "parts . add (  0  ,    deploymentRoot . getRoot (  )  . getName (  )  )  ;", "}", "}    while    (  ( deployment    =    deployment . getParent (  )  )     !  =    null    )  ;", "StringBuilder   result    =    new   StringBuilder (  )  ;", "boolean   needSeparator    =    false ;", "for    ( String   part    :    parts )     {", "if    ( needSeparator )     {", "result . append (  '  /  '  )  ;", "}", "result . append ( part )  ;", "needSeparator    =    true ;", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getScopedDeploymentUnitPath"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  . isEarDeployment ( deploymentUnit )  )     {", "int   puCount    =     0  ;", "List < PersistenceUnitMetadataHolder >    listPUHolders    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "VirtualFile   persistence _ xml    =    deploymentRoot . getRoot (  )  . getChild (  . META _ INF _ PERSISTENCE _ XML )  ;", "parse ( persistence _ xml ,    listPUHolders ,    deploymentUnit )  ;", "PersistenceUnitMetadataHolder   holder    =    normalize ( listPUHolders )  ;", "deploymentRoot . putAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS ,    holder )  ;", "addApplicationDependenciesOnProvider ( deploymentUnit ,    holder )  ;", "markDU ( holder ,    deploymentUnit )  ;", "puCount    =    holder . getPersistenceUnits (  )  . size (  )  ;", "List < ResourceRoot >    resourceRoots    =    deploymentUnit . getAttachmentList ( RESOURCE _ ROOTS )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "if    (  (  (  !  ( SubDeploymentMarker . isSubDeployment ( resourceRoot )  )  )     &  &     ( resourceRoot . getRoot (  )  . getName (  )  . toLowerCase ( Locale . ENGLISH )  . endsWith (  . JAR _ FILE _ EXTENSION )  )  )     &  &     ( resourceRoot . getRoot (  )  . getParent (  )  . getName (  )  . equals (  . LIB _ FOLDER )  )  )     {", "listPUHolders    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "persistence _ xml    =    resourceRoot . getRoot (  )  . getChild (  . META _ INF _ PERSISTENCE _ XML )  ;", "parse ( persistence _ xml ,    listPUHolders ,    deploymentUnit )  ;", "holder    =    normalize ( listPUHolders )  ;", "resourceRoot . putAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS ,    holder )  ;", "addApplicationDependenciesOnProvider ( deploymentUnit ,    holder )  ;", "markDU ( holder ,    deploymentUnit )  ;", "puCount    +  =    holder . getPersistenceUnits (  )  . size (  )  ;", "}", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" parsed   persistence   unit   definitions   for   ear    % s \"  ,    deploymentRoot . getRootName (  )  )  ;", "incrementPersistenceUnitCount ( deploymentUnit ,    puCount )  ;", "}", "}", "METHOD_END"], "methodName": ["handleEarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  (  (  !  (  . isEarDeployment ( deploymentUnit )  )  )     &  &     (  !  (  . isWarDeployment ( deploymentUnit )  )  )  )     &  &     (  (  !  ( appClientContainerMode )  )     |  |     ( DeploymentTypeMarker . isType ( APPLICATION _ CLIENT ,    deploymentUnit )  )  )  )     {", "List < PersistenceUnitMetadataHolder >    listPUHolders    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "VirtualFile   persistence _ xml    =    deploymentRoot . getRoot (  )  . getChild (  . META _ INF _ PERSISTENCE _ XML )  ;", "parse ( persistence _ xml ,    listPUHolders ,    deploymentUnit )  ;", "PersistenceUnitMetadataHolder   holder    =    normalize ( listPUHolders )  ;", "deploymentRoot . putAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS ,    holder )  ;", "markDU ( holder ,    deploymentUnit )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" parsed   persistence   unit   definitions   for   jar    % s \"  ,    deploymentRoot . getRootName (  )  )  ;", "incrementPersistenceUnitCount ( deploymentUnit ,    holder . getPersistenceUnits (  )  . size (  )  )  ;", "addApplicationDependenciesOnProvider ( deploymentUnit ,    holder )  ;", "}", "}", "METHOD_END"], "methodName": ["handleJarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  (  !  ( appClientContainerMode )  )     &  &     (  . isWarDeployment ( deploymentUnit )  )  )     {", "int   puCount ;", "List < PersistenceUnitMetadataHolder >    listPUHolders    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "VirtualFile   persistence _ xml    =    deploymentRoot . getRoot (  )  . getChild (  . WEB _ PERSISTENCE _ XML )  ;", "parse ( persistence _ xml ,    listPUHolders ,    deploymentUnit )  ;", "PersistenceUnitMetadataHolder   holder    =    normalize ( listPUHolders )  ;", "deploymentRoot . putAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS ,    holder )  ;", "addApplicationDependenciesOnProvider ( deploymentUnit ,    holder )  ;", "markDU ( holder ,    deploymentUnit )  ;", "puCount    =    holder . getPersistenceUnits (  )  . size (  )  ;", "List < ResourceRoot >    resourceRoots    =    deploymentUnit . getAttachmentList ( RESOURCE _ ROOTS )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "if    ( resourceRoot . getRoot (  )  . getName (  )  . toLowerCase ( Locale . ENGLISH )  . endsWith (  . JAR _ FILE _ EXTENSION )  )     {", "listPUHolders    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "persistence _ xml    =    resourceRoot . getRoot (  )  . getChild (  . META _ INF _ PERSISTENCE _ XML )  ;", "parse ( persistence _ xml ,    listPUHolders ,    deploymentUnit )  ;", "holder    =    normalize ( listPUHolders )  ;", "resourceRoot . putAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS ,    holder )  ;", "addApplicationDependenciesOnProvider ( deploymentUnit ,    holder )  ;", "markDU ( holder ,    deploymentUnit )  ;", "puCount    +  =    holder . getPersistenceUnits (  )  . size (  )  ;", "}", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" parsed   persistence   unit   definitions   for   war    % s \"  ,    deploymentRoot . getRootName (  )  )  ;", "incrementPersistenceUnitCount ( deploymentUnit ,    puCount )  ;", "}", "}", "METHOD_END"], "methodName": ["handleWarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "topDeploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( topDeploymentUnit )  ;", "synchronized ( topDeploymentUnit )     {", "sInApplication   persistenceUnitsInApplication    =    getsInApplication ( topDeploymentUnit )  ;", "persistenceUnitsInApplication . increment ( persistenceUnitCount )  ;", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" incrementing   PU   count   for    % s   by    % d \"  ,    topDeploymentUnit . getName (  )  ,    persistenceUnitCount )  ;", "}", "METHOD_END"], "methodName": ["incrementPersistenceUnitCount"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "return   DeploymentTypeMarker . isType ( EAR ,    context )  ;", "}", "METHOD_END"], "methodName": ["isEarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "return   DeploymentTypeMarker . isType ( WAR ,    context )  ;", "}", "METHOD_END"], "methodName": ["isWarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( holder . getPersistenceUnits (  )  )     !  =    null )     &  &     (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     0  )  )     {", "JPADeploymentMarker . mark ( deploymentUnit )  ;", "}", "}", "METHOD_END"], "methodName": ["markDU"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    PersistenceUnitMetadata >    flattened    =    new   HashMap < String ,    PersistenceUnitMetadata >  (  )  ;", "for    ( PersistenceUnitMetadataHolder   puHolder    :    listPUHolders )     {", "for    ( PersistenceUnitMetadata   pu    :    puHolder . getPersistenceUnits (  )  )     {", "if    (  !  ( flattened . containsKey ( pu . getPersistenceUnitName (  )  )  )  )     {", "flattened . put ( pu . getPersistenceUnitName (  )  ,    pu )  ;", "} else    {", "PersistenceUnitMetadata   first    =    flattened . get ( pu . getPersistenceUnitName (  )  )  ;", "PersistenceUnitMetadata   duplicate    =    pu ;", "JpaLogger . ROOT _ LOGGER . duplicatePersistenceUnitDefinition ( duplicate . getPersistenceUnitName (  )  ,    first . getScopedPersistenceUnitName (  )  ,    duplicate . getScopedPersistenceUnitName (  )  )  ;", "}", "}", "}", "PersistenceUnitMetadataHolder   holder    =    new   PersistenceUnitMetadataHolder ( new   ArrayList < PersistenceUnitMetadata >  ( flattened . values (  )  )  )  ;", "return   holder ;", "}", "METHOD_END"], "methodName": ["normalize"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "JpaLogger . ROOT _ LOGGER . tracef (  \" parse   checking   if    % s   exists ,    result    =     % b \"  ,    persistence _ xml . toString (  )  ,    persistence _ xml . exists (  )  )  ;", "if    (  ( persistence _ xml . exists (  )  )     &  &     ( persistence _ xml . isFile (  )  )  )     {", "InputStream   is    =    null ;", "try    {", "is    =    persistence _ xml . openStream (  )  ;", "final   XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "inputFactory . setXMLResolver ( NoopXMLResolver . create (  )  )  ;", "XMLStreamReader   xmlReader    =    inputFactory . createXMLStreamReader ( is )  ;", "MetadataHolder   puHolder    =    XmlParser . parse ( xmlReader ,    SpecDescriptorPropertyReplacement . propertyReplacer ( deploymentUnit )  )  ;", "postParseSteps ( persistence _ xml ,    puHolder ,    deploymentUnit )  ;", "listPUHolders . add ( puHolder )  ;", "}    catch    ( Exception   e )     {", "throw   new   DeploymentUnitProcessingException ( JpaLogger . ROOT _ LOGGER . failedToParse ( persistence _ xml )  ,    e )  ;", "}    finally    {", "try    {", "if    ( is    !  =    null )     {", "is . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( PersistenceUnitMetadata   pu    :    puHolder . getPersistenceUnits (  )  )     {", "List < URL >    jarfilesUrls    =    new   ArrayList < URL >  (  )  ;", "if    (  ( pu . getJarFiles (  )  )     !  =    null )     {", "for    ( String   jar    :    pu . getJarFiles (  )  )     {", "jarfilesUrls . add (  . getRelativeURL ( persistence _ xml ,    jar )  )  ;", "}", "}", "pu . setJarFileUrls ( jarfilesUrls )  ;", "URL   url    =    getPersistenceUnitURL ( persistence _ xml )  ;", "pu . setPersistenceUnitRootUrl ( url )  ;", "String   scopedPersistenceUnitName ;", "scopedPersistenceUnitName    =    Configuration . getScopedPersistenceUnitName ( pu )  ;", "if    ( scopedPersistenceUnitName    =  =    null )     {", "scopedPersistenceUnitName    =     . createBeanName ( deploymentUnit ,    pu . getPersistenceUnitName (  )  )  ;", "} else    {", "JpaLogger . ROOT _ LOGGER . tracef (  (  \" persistence   unit    '  % s '    specified   a   custom   scoped   persistence   unit   name   hint    \"     +     \"  ( jboss . as . jpa . scopedname =  % s )  .       The   specified   name    * must *    be   unique   across   all   application   server   deployments .  \"  )  ,    pu . getPersistenceUnitName (  )  ,    scopedPersistenceUnitName )  ;", "if    (  ( scopedPersistenceUnitName . indexOf (  '  /  '  )  )     !  =     (  -  1  )  )     {", "throw   JpaLogger . ROOT _ LOGGER . invalidScopedName ( scopedPersistenceUnitName ,     '  /  '  )  ;", "}", "}", "pu . setScopedPersistenceUnitName ( scopedPersistenceUnitName )  ;", "}", "}", "METHOD_END"], "methodName": ["postParseSteps"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitParseProcessor"}, {"methodBody": ["METHOD_START", "{", "ManagementAdaptor   managementAdaptor    =    adaptor . getManagementAdaptor (  )  ;", "if    (  ( managementAdaptor    !  =    null )     &  &     ( adaptor . doesScopedPersistenceUnitNameIdentifyCacheRegionName ( pu )  )  )     {", "final   String   providerLabel    =    managementAdaptor . getIdentificationLabel (  )  ;", "final   String   scopedPersistenceUnitName    =    pu . getScopedPersistenceUnitName (  )  ;", "Resource   providerResource    =    JPAService . createManagementStatisticsResource ( managementAdaptor ,    scopedPersistenceUnitName ,    deploymentUnit )  ;", "ModelNode   perPuNode    =    providerResource . getModel (  )  ;", "perPuNode . get (  . SCOPED _ UNIT _ NAME . getName (  )  )  . set ( pu . getScopedPersistenceUnitName (  )  )  ;", "final   Resource   deploymentResource    =    deploymentUnit . getAttachment ( DEPLOYMENT _ RESOURCE )  ;", "Resource   subsystemResource ;", "synchronized ( deploymentResource )     {", "subsystemResource    =     . getOrCreateResource ( deploymentResource ,    PathElement . pathElement ( SUBSYSTEM ,     \" jpa \"  )  )  ;", "}", "synchronized ( subsystemResource )     {", "subsystemResource . registerChild ( PathElement . pathElement ( providerLabel ,    scopedPersistenceUnitName )  ,    providerResource )  ;", "persistenceAdaptorRemoval . registerManagementConsoleChild ( subsystemResource ,    PathElement . pathElement ( providerLabel ,    scopedPersistenceUnitName )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addManagementConsole"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( puList . size (  )  )     >     0  )     {", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   Module   module    =    deploymentUnit . getAttachment ( MODULE )  ;", "final   EEModuleDescription   eeModuleDescription    =    deploymentUnit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "final   Collection < ComponentDescription >    components    =    eeModuleDescription . getComponentDescriptions (  )  ;", "final   ServiceTarget   serviceTarget    =    phaseContext . getServiceTarget (  )  ;", "final   ModuleClassLoader   classLoader    =    module . getClassLoader (  )  ;", "for    ( PersistenceUnitMetadataHolder   holder    :    puList )     {", ". setAnnotationIndexes ( holder ,    deploymentUnit )  ;", "for    ( PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "String   jpaContainerManaged    =    pu . getProperties (  )  . getProperty ( Configuration . JPA _ CONTAINER _ MANAGED )  ;", "boolean   deployPU    =     ( jpaContainerManaged    =  =    null )     ?    true    :    Boolean . parseBoolean ( jpaContainerManaged )  ;", "if    ( deployPU )     {", "final   PersistenceProviderDeploymentHolder   persistenceProviderDeploymentHolder    =     . getPersistenceProviderDeploymentHolder ( deploymentUnit )  ;", "final   PersistenceProvider   provider    =     . lookupProvider ( pu ,    persistenceProviderDeploymentHolder ,    deploymentUnit )  ;", "final   PersistenceProviderAdaptor   adaptor    =     . getPersistenceProviderAdaptor ( pu ,    persistenceProviderDeploymentHolder ,    deploymentUnit ,    provider ,    platform )  ;", "final   boolean   twoPhaseBootStrapCapable    =     ( adaptor   instanceof   TwoPhaseBootstrapCapable )     &  &     ( Configuration . allowTwoPhaseBootstrap ( pu )  )  ;", "if    ( startEarly )     {", "if    ( twoPhaseBootStrapCapable )     {", ". deployPersistenceUnitPhaseOne ( phaseContext ,    deploymentUnit ,    eeModuleDescription ,    components ,    serviceTarget ,    classLoader ,    pu ,    adaptor )  ;", "} else", "if    ( false    =  =     ( Configuration . needClassFileTransformer ( pu )  )  )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" persistence   unit    % s   in   deployment    % s   is   configured   to   not   need   class   transformer   to   be   set ,    no   class   rewriting   will   be   allowed \"  ,    pu . getPersistenceUnitName (  )  ,    deploymentUnit . getName (  )  )  ;", "} else    {", "final   boolean   allowCdiBeanManagerAccess    =    false ;", ". deployPersistenceUnit ( phaseContext ,    deploymentUnit ,    eeModuleDescription ,    components ,    serviceTarget ,    classLoader ,    pu ,    startEarly ,    provider ,    adaptor ,    allowCdiBeanManagerAccess )  ;", "}", "} else    {", "if    ( twoPhaseBootStrapCapable )     {", ". deployPersistenceUnitPhaseTwo ( phaseContext ,    deploymentUnit ,    eeModuleDescription ,    components ,    serviceTarget ,    classLoader ,    pu ,    provider ,    adaptor )  ;", "} else", "if    ( false    =  =     ( Configuration . needClassFileTransformer ( pu )  )  )     {", "final   boolean   allowCdiBeanManagerAccess    =    true ;", ". deployPersistenceUnit ( phaseContext ,    deploymentUnit ,    eeModuleDescription ,    components ,    serviceTarget ,    classLoader ,    pu ,    startEarly ,    provider ,    adaptor ,    allowCdiBeanManagerAccess )  ;", "}", "}", "} else    {", "JpaLogger . ROOT _ LOGGER . tracef (  \" persistence   unit    % s   in   deployment    % s   is   not   container   managed    (  % s   is   set   to   false )  \"  ,    pu . getPersistenceUnitName (  )  ,    deploymentUnit . getName (  )  ,    Configuration . JPA _ CONTAINER _ MANAGED )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addPuService"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( dataSourceName    !  =    null )     &  &     (  ( dataSourceName . length (  )  )     >     0  )  )     &  &     (  !  ( dataSourceName . startsWith (  \" java :  \"  )  )  )  )     {", "if    ( dataSourceName . startsWith (  \"  /  \"  )  )     {", "return    \" java :  \"     +    dataSourceName ;", "}", "return    \" java :  /  \"     +    dataSourceName ;", "}", "return   dataSourceName ;", "}", "METHOD_END"], "methodName": ["adjustJndi"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "return   deploymentUnit . getServiceName (  )  . append ( PersistenceUnitServiceHandler . BEANMANAGER _ NAME )  ;", "}", "METHOD_END"], "methodName": ["beanManagerServiceName"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "return   new   JtaManagerImpl ( deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ MANAGER )  ,    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ SYNCHRONIZATION _ REGISTRY )  )  ;", "}", "METHOD_END"], "methodName": ["createManager"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitServiceHandler . handleWarDeployment ( phaseContext ,    startEarly ,    platform )  ;", "PersistenceUnitServiceHandler . handleEarDeployment ( phaseContext ,    startEarly ,    platform )  ;", "PersistenceUnitServiceHandler . handleJarDeployment ( phaseContext ,    startEarly ,    platform )  ;", "if    ( startEarly )     {", "PersistenceUnitServiceHandler . nextPhaseDependsOnPersistenceUnit ( phaseContext ,    platform )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "pu . setClassLoader ( classLoader )  ;", "TransactionManager   transactionManager    =    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ MANAGER )  ;", "TransactionSynchronizationRegistry   transactionSynchronizationRegistry    =    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ SYNCHRONIZATION _ REGISTRY )  ;", "CapabilityServiceSupport   capabilitySupport    =    deploymentUnit . getAttachment ( CAPABILITY _ SERVICE _ SUPPORT )  ;", "try    {", "ValidatorFactory   validatorFactory    =    null ;", "final   HashMap < String ,    ValidatorFactory >    properties    =    new   HashMap <  >  (  )  ;", "if    (  !  ( NONE . equals ( pu . getValidationMode (  )  )  )  )     {", "validatorFactory    =    deploymentUnit . getAttachment ( VALIDATOR _ FACTORY )  ;", "}", "BeanManagerAfterDeploymentValidation   beanManagerAfterDeploymentValidation    =     . registerJPAEntityListenerRegister ( deploymentUnit )  ;", "final   PersistenceUnitServiceImpl   service    =    new   PersistenceUnitServiceImpl ( classLoader ,    pu ,    adaptor ,    provider ,    PersistenceUnitRegistryImpl . INSTANCE ,    deploymentUnit . getServiceName (  )  ,    validatorFactory ,    deploymentUnit . getAttachment ( JAVA _ NAMESPACE _ SETUP _ ACTION )  ,    beanManagerAfterDeploymentValidation )  ;", "final    . PersistenceAdaptorRemoval   persistenceAdaptorRemoval    =    new    . PersistenceAdaptorRemoval ( pu ,    adaptor )  ;", "deploymentUnit . addToAttachmentList (  . REMOVAL _ KEY ,    persistenceAdaptorRemoval )  ;", "adaptor . addProviderProperties ( properties ,    pu )  ;", "final   ServiceName   puServiceName    =    PersistenceUnitServiceImpl . getPUServiceName ( pu )  ;", "deploymentUnit . putAttachment ( JpaAttachments . PERSISTENCE _ UNIT _ SERVICE _ KEY ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( DEPLOYMENT _ COMPLETE _ SERVICES ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( WEB _ DEPENDENCIES ,    puServiceName )  ;", "ServiceBuilder < PersistenceUnitService >    builder    =    serviceTarget . addService ( puServiceName ,    service )  ;", "boolean   useDefaultDataSource    =    Configuration . allowDefaultDataSourceUse ( pu )  ;", "final   String   jtaDataSource    =     . adjustJndi ( pu . getJtaDataSourceName (  )  )  ;", "final   String   nonJtaDataSource    =     . adjustJndi ( pu . getNonJtaDataSourceName (  )  )  ;", "if    (  ( jtaDataSource    !  =    null )     &  &     (  ( jtaDataSource . length (  )  )     >     0  )  )     {", "if    ( jtaDataSource . equals (  . EE _ DEFAULT _ DATASOURCE )  )     {", "useDefaultDataSource    =    true ;", "} else    {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    jtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "}", "if    (  ( nonJtaDataSource    !  =    null )     &  &     (  ( nonJtaDataSource . length (  )  )     >     0  )  )     {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    nonJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getNonJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "if    ( useDefaultDataSource )     {", "String   defaultJtaDataSource    =    null ;", "if    ( eeModuleDescription    !  =    null )     {", "defaultJtaDataSource    =    eeModuleDescription . getDefaultResourceJndiNames (  )  . getDataSource (  )  ;", "}", "if    (  ( defaultJtaDataSource    =  =    null )     |  |     ( defaultJtaDataSource . isEmpty (  )  )  )     {", "defaultJtaDataSource    =     . adjustJndi ( JPAService . getDefaultDataSourceName (  )  )  ;", "}", "if    (  ( defaultJtaDataSource    !  =    null )     &  &     (  !  ( defaultJtaDataSource . isEmpty (  )  )  )  )     {", "builder . addDependency ( ContextNames . bindInfoFor ( defaultJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \"  % s   is   using   the   default   data   source    '  % s '  \"  ,    puServiceName ,    defaultJtaDataSource )  ;", "}", "}", "if    ( allowCdiBeanManagerAccess    &  &     ( WeldDeploymentMarker . isPartOfWeldDeployment ( deploymentUnit )  )  )     {", "builder . addDependency (  . beanManagerServiceName ( deploymentUnit )  ,    new   CastingInjector < BeanManager >  ( service . getBeanManagerInjector (  )  ,    BeanManager . class )  )  ;", "}", "try    {", "CacheDeploymentListener . setInternalDeploymentSupport ( builder ,    capabilitySupport )  ;", "adaptor . addProviderDependencies ( pu )  ;", "}    finally    {", "CacheDeploymentListener . clearInternalDeploymentSupport (  )  ;", "}", ". entityManagerBind ( eeModuleDescription ,    serviceTarget ,    pu ,    puServiceName ,    transactionManager ,    transactionSynchronizationRegistry )  ;", ". entityManagerFactoryBind ( eeModuleDescription ,    serviceTarget ,    pu ,    puServiceName )  ;", "builder . setInitialMode ( ACTIVE )  . addInjection ( service . getPropertiesInjector (  )  ,    properties )  ;", "addServerExecutorDependency ( builder ,    service . getExecutorInjector (  )  )  ;", "builder . install (  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" added   PersistenceUnitService   for    '  % s '  .       PU   is   ready   for   injector   action .  \"  ,    puServiceName )  ;", ". addManagementConsole ( deploymentUnit ,    pu ,    adaptor ,    persistenceAdaptorRemoval )  ;", "}    catch    ( ServiceRegistryException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . failedToAddPersistenceUnit ( e ,    pu . getPersistenceUnitName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deployPersistenceUnit"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "CapabilityServiceSupport   capabilitySupport    =    deploymentUnit . getAttachment ( CAPABILITY _ SERVICE _ SUPPORT )  ;", "pu . setClassLoader ( classLoader )  ;", "try    {", "final   HashMap < String ,    ValidatorFactory >    properties    =    new   HashMap <  >  (  )  ;", "ProxyBeanManager   proxyBeanManager    =    null ;", "if    ( WeldDeploymentMarker . isPartOfWeldDeployment ( deploymentUnit )  )     {", "proxyBeanManager    =    new   ProxyBeanManager (  )  ;", ". registerJPAEntityListenerRegister ( deploymentUnit )  ;", "}", "final   PhaseOnePersistenceUnitServiceImpl   service    =    new   PhaseOnePersistenceUnitServiceImpl ( classLoader ,    pu ,    adaptor ,    deploymentUnit . getServiceName (  )  ,    proxyBeanManager )  ;", "deploymentUnit . addToAttachmentList (  . REMOVAL _ KEY ,    new    . PersistenceAdaptorRemoval ( pu ,    adaptor )  )  ;", "adaptor . addProviderProperties ( properties ,    pu )  ;", "final   ServiceName   puServiceName    =    PersistenceUnitServiceImpl . getPUServiceName ( pu )  . append (  . FIRST _ PHASE )  ;", "deploymentUnit . putAttachment ( JpaAttachments . PERSISTENCE _ UNIT _ SERVICE _ KEY ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( DEPLOYMENT _ COMPLETE _ SERVICES ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( WEB _ DEPENDENCIES ,    puServiceName )  ;", "ServiceBuilder < PhaseOnePersistenceUnitServiceImpl >    builder    =    serviceTarget . addService ( puServiceName ,    service )  ;", "boolean   useDefaultDataSource    =    Configuration . allowDefaultDataSourceUse ( pu )  ;", "final   String   jtaDataSource    =     . adjustJndi ( pu . getJtaDataSourceName (  )  )  ;", "final   String   nonJtaDataSource    =     . adjustJndi ( pu . getNonJtaDataSourceName (  )  )  ;", "if    (  ( jtaDataSource    !  =    null )     &  &     (  ( jtaDataSource . length (  )  )     >     0  )  )     {", "if    ( jtaDataSource . equals (  . EE _ DEFAULT _ DATASOURCE )  )     {", "useDefaultDataSource    =    true ;", "} else    {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    jtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "}", "if    (  ( nonJtaDataSource    !  =    null )     &  &     (  ( nonJtaDataSource . length (  )  )     >     0  )  )     {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    nonJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getNonJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "if    ( useDefaultDataSource )     {", "String   defaultJtaDataSource    =    null ;", "if    ( eeModuleDescription    !  =    null )     {", "defaultJtaDataSource    =    eeModuleDescription . getDefaultResourceJndiNames (  )  . getDataSource (  )  ;", "}", "if    (  ( defaultJtaDataSource    =  =    null )     |  |     ( defaultJtaDataSource . isEmpty (  )  )  )     {", "defaultJtaDataSource    =     . adjustJndi ( JPAService . getDefaultDataSourceName (  )  )  ;", "}", "if    (  ( defaultJtaDataSource    !  =    null )     &  &     (  !  ( defaultJtaDataSource . isEmpty (  )  )  )  )     {", "builder . addDependency ( ContextNames . bindInfoFor ( defaultJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \"  % s   is   using   the   default   data   source    '  % s '  \"  ,    puServiceName ,    defaultJtaDataSource )  ;", "}", "}", "try    {", "CacheDeploymentListener . setInternalDeploymentSupport ( builder ,    capabilitySupport )  ;", "adaptor . addProviderDependencies ( pu )  ;", "}    finally    {", "CacheDeploymentListener . clearInternalDeploymentSupport (  )  ;", "}", "builder . setInitialMode ( ACTIVE )  . addInjection ( service . getPropertiesInjector (  )  ,    properties )  ;", "addServerExecutorDependency ( builder ,    service . getExecutorInjector (  )  )  ;", "builder . install (  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" added   PersistenceUnitService    ( phase    1    of    2  )    for    '  % s '  .       PU   is   ready   for   injector   action .  \"  ,    puServiceName )  ;", "}    catch    ( ServiceRegistryException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . failedToAddPersistenceUnit ( e ,    pu . getPersistenceUnitName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deployPersistenceUnitPhaseOne"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "TransactionManager   transactionManager    =    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ MANAGER )  ;", "TransactionSynchronizationRegistry   transactionSynchronizationRegistry    =    deploymentUnit . getAttachment ( JpaAttachments . TRANSACTION _ SYNCHRONIZATION _ REGISTRY )  ;", "CapabilityServiceSupport   capabilitySupport    =    deploymentUnit . getAttachment ( CAPABILITY _ SERVICE _ SUPPORT )  ;", "pu . setClassLoader ( classLoader )  ;", "try    {", "ValidatorFactory   validatorFactory    =    null ;", "final   HashMap < String ,    ValidatorFactory >    properties    =    new   HashMap <  >  (  )  ;", "if    (  !  ( NONE . equals ( pu . getValidationMode (  )  )  )  )     {", "validatorFactory    =    deploymentUnit . getAttachment ( VALIDATOR _ FACTORY )  ;", "}", "BeanManagerAfterDeploymentValidation   beanManagerAfterDeploymentValidation    =     . registerJPAEntityListenerRegister ( deploymentUnit )  ;", "final   PersistenceUnitServiceImpl   service    =    new   PersistenceUnitServiceImpl ( classLoader ,    pu ,    adaptor ,    provider ,    PersistenceUnitRegistryImpl . INSTANCE ,    deploymentUnit . getServiceName (  )  ,    validatorFactory ,    deploymentUnit . getAttachment ( JAVA _ NAMESPACE _ SETUP _ ACTION )  ,    beanManagerAfterDeploymentValidation )  ;", "final    . PersistenceAdaptorRemoval   persistenceAdaptorRemoval    =    new    . PersistenceAdaptorRemoval ( pu ,    adaptor )  ;", "deploymentUnit . addToAttachmentList (  . REMOVAL _ KEY ,    persistenceAdaptorRemoval )  ;", "adaptor . addProviderProperties ( properties ,    pu )  ;", "final   ServiceName   puServiceName    =    PersistenceUnitServiceImpl . getPUServiceName ( pu )  ;", "deploymentUnit . putAttachment ( JpaAttachments . PERSISTENCE _ UNIT _ SERVICE _ KEY ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( DEPLOYMENT _ COMPLETE _ SERVICES ,    puServiceName )  ;", "deploymentUnit . addToAttachmentList ( WEB _ DEPENDENCIES ,    puServiceName )  ;", "ServiceBuilder < PersistenceUnitService >    builder    =    serviceTarget . addService ( puServiceName ,    service )  ;", "builder . addDependency ( JPAServiceNames . getJPAServiceName (  )  )  ;", "builder . addDependency ( puServiceName . append (  . FIRST _ PHASE )  ,    new   CastingInjector ( service . getPhaseOnePersistenceUnitServiceImplInjector (  )  ,    PhaseOnePersistenceUnitServiceImpl . class )  )  ;", "boolean   useDefaultDataSource    =    Configuration . allowDefaultDataSourceUse ( pu )  ;", "final   String   jtaDataSource    =     . adjustJndi ( pu . getJtaDataSourceName (  )  )  ;", "final   String   nonJtaDataSource    =     . adjustJndi ( pu . getNonJtaDataSourceName (  )  )  ;", "if    (  ( jtaDataSource    !  =    null )     &  &     (  ( jtaDataSource . length (  )  )     >     0  )  )     {", "if    ( jtaDataSource . equals (  . EE _ DEFAULT _ DATASOURCE )  )     {", "useDefaultDataSource    =    true ;", "} else    {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    jtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "}", "if    (  ( nonJtaDataSource    !  =    null )     &  &     (  ( nonJtaDataSource . length (  )  )     >     0  )  )     {", "builder . addDependency ( ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    nonJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getNonJtaDataSourceInjector (  )  )  )  ;", "useDefaultDataSource    =    false ;", "}", "if    ( useDefaultDataSource )     {", "String   defaultJtaDataSource    =    null ;", "if    ( eeModuleDescription    !  =    null )     {", "defaultJtaDataSource    =    eeModuleDescription . getDefaultResourceJndiNames (  )  . getDataSource (  )  ;", "}", "if    (  ( defaultJtaDataSource    =  =    null )     |  |     ( defaultJtaDataSource . isEmpty (  )  )  )     {", "defaultJtaDataSource    =     . adjustJndi ( JPAService . getDefaultDataSourceName (  )  )  ;", "}", "if    (  ( defaultJtaDataSource    !  =    null )     &  &     (  !  ( defaultJtaDataSource . isEmpty (  )  )  )  )     {", "builder . addDependency ( ContextNames . bindInfoFor ( defaultJtaDataSource )  . getBinderServiceName (  )  ,    ManagedReferenceFactory . class ,    new    . ManagedReferenceFactoryInjector ( service . getJtaDataSourceInjector (  )  )  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \"  % s   is   using   the   default   data   source    '  % s '  \"  ,    puServiceName ,    defaultJtaDataSource )  ;", "}", "}", "if    ( WeldDeploymentMarker . isPartOfWeldDeployment ( deploymentUnit )  )     {", "builder . addDependency (  . beanManagerServiceName ( deploymentUnit )  ,    new   CastingInjector < BeanManager >  ( service . getBeanManagerInjector (  )  ,    BeanManager . class )  )  ;", "}", "try    {", "CacheDeploymentListener . setInternalDeploymentSupport ( builder ,    capabilitySupport )  ;", "adaptor . addProviderDependencies ( pu )  ;", "}    finally    {", "CacheDeploymentListener . clearInternalDeploymentSupport (  )  ;", "}", ". entityManagerBind ( eeModuleDescription ,    serviceTarget ,    pu ,    puServiceName ,    transactionManager ,    transactionSynchronizationRegistry )  ;", ". entityManagerFactoryBind ( eeModuleDescription ,    serviceTarget ,    pu ,    puServiceName )  ;", "builder . setInitialMode ( ACTIVE )  . addInjection ( service . getPropertiesInjector (  )  ,    properties )  ;", "addServerExecutorDependency ( builder ,    service . getExecutorInjector (  )  )  ;", "builder . install (  )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" added   PersistenceUnitService    ( phase    2    of    2  )    for    '  % s '  .       PU   is   ready   for   injector   action .  \"  ,    puServiceName )  ;", ". addManagementConsole ( deploymentUnit ,    pu ,    adaptor ,    persistenceAdaptorRemoval )  ;", "}    catch    ( ServiceRegistryException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . failedToAddPersistenceUnit ( e ,    pu . getPersistenceUnitName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deployPersistenceUnitPhaseTwo"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( pu . getProperties (  )  . containsKey ( PersistenceUnitServiceHandler . ENTITYMANAGER _ JNDI _ PROPERTY )  )     {", "String   jndiName    =    pu . getProperties (  )  . get ( PersistenceUnitServiceHandler . ENTITYMANAGER _ JNDI _ PROPERTY )  . toString (  )  ;", "final   ContextNames . BindInfo   bindingInfo ;", "if    ( jndiName . startsWith (  \" java :  \"  )  )     {", "bindingInfo    =    ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    jndiName )  ;", "} else    {", "bindingInfo    =    ContextNames . bindInfoFor ( jndiName )  ;", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" binding   the   transaction   scoped   entity   manager   to   jndi   name    '  % s '  \"  ,    bindingInfo . getAbsoluteJndiName (  )  )  ;", "final   BinderService   binderService    =    new   BinderService ( bindingInfo . getBindName (  )  )  ;", "serviceTarget . addService ( bindingInfo . getBinderServiceName (  )  ,    binderService )  . addDependency ( bindingInfo . getParentContextServiceName (  )  ,    ServiceBasedNamingStore . class ,    binderService . getNamingStoreInjector (  )  )  . addDependency ( puServiceName ,    PersistenceUnitServiceImpl . class ,    new   Injector < PersistenceUnitServiceImpl >  (  )     {", "@ Override", "public   void   inject ( final   PersistenceUnitServiceImpl   value )    throws   InjectionException    {", "binderService . getManagedObjectInjector (  )  . inject ( new   ValueManagedReferenceFactory ( new   ImmediateValue < Object >  ( new   TransactionScopedEntityManager ( pu . getScopedPersistenceUnitName (  )  ,    emptyMap (  )  ,    value . getEntityManagerFactory (  )  ,    SYNCHRONIZED ,    transactionSynchronizationRegistry ,    transactionManager )  )  )  )  ;", "}", "@ Override", "public   void   uninject (  )     {", "binderService . getNamingStoreInjector (  )  . uninject (  )  ;", "}", "}  )  . install (  )  ;", "}", "}", "METHOD_END"], "methodName": ["entityManagerBind"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( pu . getProperties (  )  . containsKey ( PersistenceUnitServiceHandler . ENTITYMANAGERFACTORY _ JNDI _ PROPERTY )  )     {", "String   jndiName    =    pu . getProperties (  )  . get ( PersistenceUnitServiceHandler . ENTITYMANAGERFACTORY _ JNDI _ PROPERTY )  . toString (  )  ;", "final   ContextNames . BindInfo   bindingInfo ;", "if    ( jndiName . startsWith (  \" java :  \"  )  )     {", "bindingInfo    =    ContextNames . bindInfoForEnvEntry ( eeModuleDescription . getApplicationName (  )  ,    eeModuleDescription . getModuleName (  )  ,    eeModuleDescription . getModuleName (  )  ,    false ,    jndiName )  ;", "} else    {", "bindingInfo    =    ContextNames . bindInfoFor ( jndiName )  ;", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" binding   the   entity   manager   factory   to   jndi   name    '  % s '  \"  ,    bindingInfo . getAbsoluteJndiName (  )  )  ;", "final   BinderService   binderService    =    new   BinderService ( bindingInfo . getBindName (  )  )  ;", "serviceTarget . addService ( bindingInfo . getBinderServiceName (  )  ,    binderService )  . addDependency ( bindingInfo . getParentContextServiceName (  )  ,    ServiceBasedNamingStore . class ,    binderService . getNamingStoreInjector (  )  )  . addDependency ( puServiceName ,    PersistenceUnitServiceImpl . class ,    new   Injector < PersistenceUnitServiceImpl >  (  )     {", "@ Override", "public   void   inject ( final   PersistenceUnitServiceImpl   value )    throws   InjectionException    {", "binderService . getManagedObjectInjector (  )  . inject ( new   ValueManagedReferenceFactory ( new   ImmediateValue < Object >  ( value . getEntityManagerFactory (  )  )  )  )  ;", "}", "@ Override", "public   void   uninject (  )     {", "binderService . getNamingStoreInjector (  )  . uninject (  )  ;", "}", "}  )  . install (  )  ;", "}", "}", "METHOD_END"], "methodName": ["entityManagerFactoryBind"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "synchronized ( parent )     {", "if    ( parent . hasChild ( element )  )     {", "return   parent . requireChild ( element )  ;", "} else    {", "final   Resource   resource    =    Factory . create (  )  ;", "parent . regrChild ( element ,    resource )  ;", "return   resource ;", "}", "}", "}", "METHOD_END"], "methodName": ["getOrCreateResource"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deploymentUnit . getParent (  )  )     !  =    null )     {", "deploymentUnit    =    deploymentUnit . getParent (  )  ;", "}", "synchronized ( deploymentUnit )     {", "Map < String ,    PersistenceProviderAdaptor >    map    =    deploymentUnit . getAttachment (  . providerAdaptorMapKey )  ;", "if    ( map    =  =    null )     {", "map    =    new   HashMap (  )  ;", "deploymentUnit . putAttachment (  . providerAdaptorMapKey ,    map )  ;", "}", "String   key ;", "if    ( adaptorModule    !  =    null )     {", "key    =    adaptorModule ;", "} else    {", "key    =    provider . getClass (  )  . getName (  )  ;", "}", "return   map . get ( key )  ;", "}", "}", "METHOD_END"], "methodName": ["getPerDeploymentSharedPersistenceProviderAdaptor"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "String   adapterClass    =    pu . getProperties (  )  . getProperty ( Configuration . ADAPTER _ CLASS )  ;", "if    (  ( persistenceProviderDeploymentHolder    !  =    null )     &  &     ( adapterClass    !  =    null )  )     {", "List < PersistenceProviderAdaptor >    persistenceProviderAdaptors    =    persistenceProviderDeploymentHolder . getAdapters (  )  ;", "for    ( PersistenceProviderAdaptor   persistenceProviderAdaptor    :    persistenceProviderAdaptors )     {", "if    ( adapterClass . equals ( persistenceProviderAdaptor . getClass (  )  . getName (  )  )  )     {", "return   persistenceProviderAdaptor ;", "}", "}", "}", "String   adaptorModule    =    pu . getProperties (  )  . getProperty ( Configuration . ADAPTER _ MODULE )  ;", "PersistenceProviderAdaptor   adaptor ;", "adaptor    =     . getPerDeploymentSharedPersistenceProviderAdaptor ( deploymentUnit ,    adaptorModule ,    provider )  ;", "if    ( adaptor    =  =    null )     {", "try    {", "if    ( adaptorModule    !  =    null )     {", "adaptor    =    PersistenceProviderAdaptorLoader . loadPersistenceAdapterModule ( adaptorModule ,    platform ,     . createManager ( deploymentUnit )  )  ;", "} else    {", "adaptor    =    PersistenceProviderAdaptorLoader . loadPersistenceAdapter ( provider ,    platform ,     . createManager ( deploymentUnit )  )  ;", "}", "}    catch    ( ModuleLoadException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . persistenceProviderAdaptorModuleLoadError ( e ,    adaptorModule )  ;", "}", "adaptor    =     . savePerDeploymentSharedPersistenceProviderAdaptor ( deploymentUnit ,    adaptorModule ,    adaptor ,    provider )  ;", "}", "if    ( adaptor    =  =    null )     {", "throw   JpaLogger . ROOT _ LOGGER . failedToGetAdapter ( pu . getPersistenceProviderClassName (  )  )  ;", "}", "return   adaptor ;", "}", "METHOD_END"], "methodName": ["getPersistenceProviderAdaptor"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "deploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "return   deploymentUnit . getAttachment ( JpaAttachments . DEPLOYED _ PERSISTENCE _ PROVIDER )  ;", "}", "METHOD_END"], "methodName": ["getPersistenceProviderDeploymentHolder"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "return   PersistenceUnitServiceHandler . getProviderByName ( pu ,    PersistenceProviderResolverHolder . getPersistenceProviderResolver (  )  . getPersistenceProviders (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProviderByName"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "String   providerName    =    pu . getPersistenceProviderClassName (  )  ;", "for    ( PersistenceProvider   provider    :    providers )     {", "if    (  (  ( providerName    =  =    null )     |  |     ( provider . getClass (  )  . getName (  )  . equals ( providerName )  )  )     |  |     (  ( provider . getClass (  )  . getName (  )  . equals ( Configuration . PROVIDER _ CLASS _ DEFAULT )  )     &  &     ( providerName . equals ( Configuration . PROVIDER _ CLASS _ HIBERNATE 4  _  1  )  )  )  )     {", "return   provider ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getProviderByName"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  (  . isEarDeployment ( deploymentUnit )  )     &  &     ( JPADeploymentMarker . isJPADeployment ( deploymentUnit )  )  )     {", "final   List < ResourceRoot >    deploymentRoots    =    DeploymentUtils . allResourceRoots ( deploymentUnit )  ;", "for    ( final   ResourceRoot   root    :    deploymentRoots )     {", "if    (  !  ( SubDeploymentMarker . isSubDeployment ( root )  )  )     {", "PersistenceUnitMetadataHolder   holder ;", "ArrayList < PersistenceUnitMetadataHolder >    puList    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "if    (  (  ( root    !  =    null )     &  &     (  ( holder    =    root . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  )     !  =    null )  )     &  &     (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     0  )  )     {", "puList . add ( holder )  ;", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" install   persistence   unit   definitions   for   ear    % s \"  ,    root . getRootName (  )  )  ;", ". addPuService ( phaseContext ,    puList ,    startEarly ,    platform )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["handleEarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  (  (  !  (  . isEarDeployment ( deploymentUnit )  )  )     &  &     (  !  (  . isWarDeployment ( deploymentUnit )  )  )  )     &  &     ( JPADeploymentMarker . isJPADeployment ( deploymentUnit )  )  )     {", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "PersistenceUnitMetadataHolder   holder ;", "if    (  (  ( deploymentRoot    !  =    null )     &  &     (  ( holder    =    deploymentRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  )     !  =    null )  )     &  &     (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     0  )  )     {", "ArrayList < PersistenceUnitMetadataHolder >    puList    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "puList . add ( holder )  ;", "JpaLogger . ROOT _ LOGGER . tracef (  \" install   persistence   unit   definition   for   jar    % s \"  ,    deploymentRoot . getRootName (  )  )  ;", ". addPuService ( phaseContext ,    puList ,    startEarly ,    platform )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["handleJarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  (  . isWarDeployment ( deploymentUnit )  )     &  &     ( JPADeploymentMarker . isJPADeployment ( deploymentUnit )  )  )     {", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "PersistenceUnitMetadataHolder   holder ;", "ArrayList < PersistenceUnitMetadataHolder >    puList    =    new   ArrayList < PersistenceUnitMetadataHolder >  (  1  )  ;", "String   deploymentRootName    =    null ;", "if    (  (  ( deploymentRoot    !  =    null )     &  &     (  ( holder    =    deploymentRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  )     !  =    null )  )     &  &     (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     0  )  )     {", "puList . add ( holder )  ;", "deploymentRootName    =    deploymentRoot . getRootName (  )  ;", "}", "List < ResourceRoot >    resourceRoots    =    deploymentUnit . getAttachmentList ( RESOURCE _ ROOTS )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "if    ( resourceRoot . getRoot (  )  . getName (  )  . toLowerCase ( Locale . ENGLISH )  . endsWith (  \"  . jar \"  )  )     {", "if    (  (  ( holder    =    resourceRoot . getAttachment ( PersistenceUnitMetadataHolder . PERSISTENCE _ UNITS )  )     !  =    null )     &  &     (  ( holder . getPersistenceUnits (  )  . size (  )  )     >     0  )  )     {", "puList . add ( holder )  ;", "}", "}", "}", "if    ( startEarly )     {", "deploymentUnit . addToAttachmentList ( WEB _ SETUP _ ACTIONS ,    new   WebNonTxEmCloserAction (  )  )  ;", "}", "JpaLogger . ROOT _ LOGGER . tracef (  \" install   persistence   unit   definitions   for   war    % s \"  ,    deploymentRootName )  ;", ". addPuService ( phaseContext ,    puList ,    startEarly ,    platform )  ;", "}", "}", "METHOD_END"], "methodName": ["handleWarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "return   DeploymentTypeMarker . isType ( EAR ,    context )  ;", "}", "METHOD_END"], "methodName": ["isEarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "return   DeploymentTypeMarker . isType ( WAR ,    context )  ;", "}", "METHOD_END"], "methodName": ["isWarDeployment"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "List < PersistenceProvider >    providerList    =     ( persistenceProviderDeploymentHolder    !  =    null )     ?    persistenceProviderDeploymentHolder . getProviders (  )     :    null ;", "if    ( providerList    !  =    null )     {", "for    ( PersistenceProvider   persistenceProvider    :    providerList )     {", "if    ( persistenceProvider . getClass (  )  . getName (  )  . equals ( pu . getPersistenceProviderClassName (  )  )  )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" deployment    % s   is   using    % s \"  ,    deploymentUnit . getName (  )  ,    pu . getPersistenceProviderClassName (  )  )  ;", "return   persistenceProvider ;", "}", "}", "}", "String   configuredPersistenceProviderModule    =    pu . getProperties (  )  . getProperty ( Configuration . PROVIDER _ MODULE )  ;", "String   persistenceProviderClassName    =    pu . getPersistenceProviderClassName (  )  ;", "if    ( persistenceProviderClassName    =  =    null )     {", "persistenceProviderClassName    =    Configuration . PROVIDER _ CLASS _ DEFAULT ;", "}", "if    ( configuredPersistenceProviderModule    !  =    null )     {", "List < PersistenceProvider >    providers ;", "if    ( Configuration . PROVIDER _ MODULE _ APPLICATION _ SUPPLIED . equals ( configuredPersistenceProviderModule )  )     {", "try    {", "final   ModuleClassLoader   classLoader    =    deploymentUnit . getAttachment ( MODULE )  . getClassLoader (  )  ;", "PersistenceProvider   provider    =    PersistenceProviderLoader . loadProviderFromDeployment ( classLoader ,    persistenceProviderClassName )  ;", "providers    =    new   ArrayList (  )  ;", "providers . add ( provider )  ;", "PersistenceProviderDeploymentHolder . savePersistenceProviderInDeploymentUnit ( deploymentUnit ,    providers ,    null )  ;", "return   provider ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotDeployApp ( e ,    persistenceProviderClassName )  ;", "}    catch    ( InstantiationException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotDeployApp ( e ,    persistenceProviderClassName )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotDeployApp ( e ,    persistenceProviderClassName )  ;", "}", "} else    {", "try    {", "providers    =    PersistenceProviderLoader . loadProviderModuleByName ( configuredPersistenceProviderModule )  ;", "PersistenceProviderDeploymentHolder . savePersistenceProviderInDeploymentUnit ( deploymentUnit ,    providers ,    null )  ;", "PersistenceProvider   provider    =     . getProviderByName ( pu ,    providers )  ;", "if    ( provider    !  =    null )     {", "return   provider ;", "}", "}    catch    ( ModuleLoadException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotLoadPersistenceProviderModule ( e ,    configuredPersistenceProviderModule ,    persistenceProviderClassName )  ;", "}", "}", "}", "String   providerNameDerivedFromClassName    =    Configuration . getProviderModuleNameFromProviderClassName ( persistenceProviderClassName )  ;", "PersistenceProvider   provider    =     . getProviderByName ( pu )  ;", "if    (  ( provider    =  =    null )     &  &     ( providerNameDerivedFromClassName    !  =    null )  )     {", "try    {", "List < PersistenceProvider >    providers    =    PersistenceProviderLoader . loadProviderModuleByName ( providerNameDerivedFromClassName )  ;", "PersistenceProviderDeploymentHolder . savePersistenceProviderInDeploymentUnit ( deploymentUnit ,    providers ,    null )  ;", "provider    =     . getProviderByName ( pu ,    providers )  ;", "}    catch    ( ModuleLoadException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . cannotLoadPersistenceProviderModule ( e ,    providerNameDerivedFromClassName ,    persistenceProviderClassName )  ;", "}", "}", "if    ( provider    =  =    null )", "throw   JpaLogger . ROOT _ LOGGER . persistenceProviderNotFound ( persistenceProviderClassName )  ;", "return   provider ;", "}", "METHOD_END"], "methodName": ["lookupProvider"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   topDeploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( phaseContext . getDeploymentUnit (  )  )  ;", "final   PersistenceUnitsInApplication   persistenceUnitsInApplication    =    topDeploymentUnit . getAttachment ( PersistenceUnitsInApplication . PERSISTENCE _ UNITS _ IN _ APPLICATION )  ;", "for    ( final   PersistenceUnitMetadataHolder   holder    :    persistenceUnitsInApplication . getPersistenceUnitHolders (  )  )     {", "for    ( final   PersistenceUnitMetadata   pu    :    holder . getPersistenceUnits (  )  )     {", "String   jpaContainerManaged    =    pu . getProperties (  )  . getProperty ( Configuration . JPA _ CONTAINER _ MANAGED )  ;", "boolean   deployPU    =     ( jpaContainerManaged    =  =    null )     ?    true    :    Boolean . parseBoolean ( jpaContainerManaged )  ;", "if    ( deployPU )     {", "final   ServiceName   puServiceName    =    PersistenceUnitServiceImpl . getPUServiceName ( pu )  ;", "final   PersistenceProviderDeploymentHolder   persistenceProviderDeploymentHolder    =     . getPersistenceProviderDeploymentHolder ( phaseContext . getDeploymentUnit (  )  )  ;", "final   PersistenceProvider   provider    =     . lookupProvider ( pu ,    persistenceProviderDeploymentHolder ,    phaseContext . getDeploymentUnit (  )  )  ;", "final   PersistenceProviderAdaptor   adaptor    =     . getPersistenceProviderAdaptor ( pu ,    persistenceProviderDeploymentHolder ,    phaseContext . getDeploymentUnit (  )  ,    provider ,    platform )  ;", "final   boolean   twoPhaseBootStrapCapable    =     ( adaptor   instanceof   TwoPhaseBootstrapCapable )     &  &     ( Configuration . allowTwoPhaseBootstrap ( pu )  )  ;", "if    ( Configuration . needClassFileTransformer ( pu )  )     {", "phaseContext . addToAttachmentList ( NEXT _ PHASE _ DEPS ,     ( twoPhaseBootStrapCapable    ?    puServiceName . append (  . FIRST _ PHASE )     :    puServiceName )  )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["nextPhaseDependsOnPersistenceUnit"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "deploymentUnit    =    DeploymentUtils . getTopDeploymentUnit ( deploymentUnit )  ;", "if    ( WeldDeploymentMarker . isPartOfWeldDeployment ( deploymentUnit )  )     {", "synchronized ( deploymentUnit )     {", "BeanManagerAfterDeploymentValidation   beanManagerAfterDeploymentValidation    =    deploymentUnit . getAttachment ( JpaAttachments . BEAN _ MANAGER _ AFTER _ DEPLOYMENT _ VALIDATION _ ATTACHMENT _ KEY )  ;", "if    ( null    =  =    beanManagerAfterDeploymentValidation )     {", "beanManagerAfterDeploymentValidation    =    new   BeanManagerAfterDeploymentValidation (  )  ;", "deploymentUnit . putAttachment ( JpaAttachments . BEAN _ MANAGER _ AFTER _ DEPLOYMENT _ VALIDATION _ ATTACHMENT _ KEY ,    beanManagerAfterDeploymentValidation )  ;", "WeldPortableExtensions   extensions    =    WeldPortableExtensions . getPortableExtensions ( deploymentUnit )  ;", "extensions . registerExtensionInstance ( beanManagerAfterDeploymentValidation ,    deploymentUnit )  ;", "}", "return   beanManagerAfterDeploymentValidation ;", "}", "} else    {", "return   new   BeanManagerAfterDeploymentValidation ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["registerJPAEntityListenerRegister"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deploymentUnit . getParent (  )  )     !  =    null )     {", "deploymentUnit    =    deploymentUnit . getParent (  )  ;", "}", "synchronized ( deploymentUnit )     {", "Map < String ,    PersistenceProviderAdaptor >    map    =    deploymentUnit . getAttachment (  . providerAdaptorMapKey )  ;", "String   key ;", "if    ( adaptorModule    !  =    null )     {", "key    =    adaptorModule ;", "} else    {", "key    =    provider . getClass (  )  . getName (  )  ;", "}", "PersistenceProviderAdaptor   current    =    map . get ( key )  ;", "if    ( current    =  =    null )     {", "map . put ( key ,    adaptor )  ;", "current    =    adaptor ;", "}", "return   current ;", "}", "}", "METHOD_END"], "methodName": ["savePerDeploymentSharedPersistenceProviderAdaptor"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "final   Map < URL ,    Index >    annotationIndexes    =    new   HashMap <  >  (  )  ;", "do    {", "for    ( ResourceRoot   root    :    DeploymentUtils . allResourceRoots ( deploymentUnit )  )     {", "final   Index   index    =    root . getAttachment ( ANNOTATION _ INDEX )  ;", "if    ( index    !  =    null )     {", "try    {", "JpaLogger . ROOT _ LOGGER . tracef (  \" adding    '  % s '    to   annotation   index   map \"  ,    root . getRoot (  )  . toURL (  )  )  ;", "annotationIndexes . put ( root . getRoot (  )  . toURL (  )  ,    index )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "}", "deploymentUnit    =    deploymentUnit . getParent (  )  ;", "}    while    ( deploymentUnit    !  =    null    )  ;", "for    ( Metadata   pu    :    puHolder . gets (  )  )     {", "pu . setAnnotationIndex ( annotationIndexes )  ;", "}", "}", "METHOD_END"], "methodName": ["setAnnotationIndexes"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "List < PersistenceUnitServiceHandler . PersistenceAdaptorRemoval >    removals    =    context . getAttachmentList ( PersistenceUnitServiceHandler . REMOVAL _ KEY )  ;", "if    ( removals    !  =    null )     {", "for    ( PersistenceUnitServiceHandler . PersistenceAdaptorRemoval   removal    :    removals )     {", "removal . cleanup (  )  ;", "}", "context . removeAttachment ( PersistenceUnitServiceHandler . REMOVAL _ KEY )  ;", "}", "}", "METHOD_END"], "methodName": ["undeploy"], "fileName": "org.jboss.as.jpa.processor.PersistenceUnitServiceHandler"}, {"methodBody": ["METHOD_START", "{", "CacheDeploymentListener . DEPLOYMENT _ SUPPORT . remove (  )  ;", "}", "METHOD_END"], "methodName": ["clearInternalDeploymentSupport"], "fileName": "org.jboss.as.jpa.processor.secondLevelCache.CacheDeploymentListener"}, {"methodBody": ["METHOD_START", "{", "return   CacheDeploymentListener . DEPLOYMENT _ SUPPORT . get (  )  . getCapabilityServiceSupport (  )  ;", "}", "METHOD_END"], "methodName": ["getInternalDeploymentCapablityServiceSupport"], "fileName": "org.jboss.as.jpa.processor.secondLevelCache.CacheDeploymentListener"}, {"methodBody": ["METHOD_START", "{", "return   CacheDeploymentListener . DEPLOYMENT _ SUPPORT . get (  )  . getServiceBuilder (  )  ;", "}", "METHOD_END"], "methodName": ["getInternalDeploymentServiceBuilder"], "fileName": "org.jboss.as.jpa.processor.secondLevelCache.CacheDeploymentListener"}, {"methodBody": ["METHOD_START", "{", "CacheDeploymentListener . DEPLOYMENT _ SUPPORT . set ( new   CacheDeploymentListener . DeploymentSupport (  )     {", "@ Override", "public   ServiceBuilder <  ?  >    getServiceBuilder (  )     {", "return   serviceBuilder ;", "}", "@ Override", "public   CapabilityServiceSupport   getCapabilityServiceSupport (  )     {", "return   support ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["setInternalDeploymentSupport"], "fileName": "org.jboss.as.jpa.processor.secondLevelCache.CacheDeploymentListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   CurrentServiceContainer . getServiceContainer (  )  ;", "}", "return   AcController . doPrivileged ( GET _ ACTION )  ;", "}", "METHOD_END"], "methodName": ["currentServiceContainer"], "fileName": "org.jboss.as.jpa.processor.secondLevelCache.InfinispanCacheDeploymentListener"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.jpa.puparser.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.jpa.puparser.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.jpa.puparser.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.jpa.puparser.Element"}, {"methodBody": ["METHOD_START", "{", "return   propertyReplacer . replaceProperties ( reader . getAttributeValue ( i )  )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParser"}, {"methodBody": ["METHOD_START", "{", "return   propertyReplacer . replaceProperties ( reader . getElementText (  )  )  ;", "}", "METHOD_END"], "methodName": ["getElement"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParser"}, {"methodBody": ["METHOD_START", "{", "reader . require ( START _ DOCUMENT ,    null ,    null )  ;", "Version   version    =    null ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . next (  )  )     !  =     ( START _ ELEMENT )  )  )     {", "if    (  ( reader . getEventType (  )  )     =  =     ( DTD )  )     {", "final   String   dtdLocation    =    readDTDLocation ( reader )  ;", "if    ( dtdLocation    !  =    null )     {", "version    =    Version . forLocation ( dtdLocation )  ;", "}", "}", "}", "final   String   schemaLocation    =    readSchemaLocation ( reader )  ;", "if    ( schemaLocation    !  =    null )     {", "version    =    Version . forLocation ( schemaLocation )  ;", "}", "if    (  ( version    =  =    null )     |  |     ( Version . UNKNOWN . equals ( version )  )  )     {", "String   versionString    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final   String   attributeNamespace    =    reader . getAttributeNamespace ( i )  ;", "if    (  ( attributeNamespace    !  =    null )     &  &     (  !  ( attributeNamespace . isEmpty (  )  )  )  )     {", "continue ;", "}", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "if    ( attribute    =  =     ( Attribute . VERSION )  )     {", "versionString    =    reader . getAttributeValue ( i )  ;", "}", "}", "if    (  \"  1  .  0  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  1  _  0  ;", "} else", "if    (  \"  1  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  1  _  0  ;", "} else", "if    (  \"  2  .  0  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  2  _  0  ;", "} else", "if    (  \"  2  .  1  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  2  _  1  ;", "} else", "if    (  \"  2  .  2  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  2  _  2  ;", "} else", "if    (  \"  2  \"  . equals ( versionString )  )     {", "version    =    Version . JPA _  2  _  0  ;", "} else    {", "version    =    Version . JPA _  2  _  1  ;", "}", "}", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final   String   attributeNamespace    =    reader . getAttributeNamespace ( i )  ;", "if    (  ( attributeNamespace    !  =    null )     &  &     (  !  ( attributeNamespace . isEmpty (  )  )  )  )     {", "continue ;", "}", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   VERSION    :", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   List < PersistenceUnitMetadata >    PUs    =    new   ArrayList < PersistenceUnitMetadata >  (  )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   PERSISTENCEUNIT    :", "PersistenceUnitMetadata   pu    =     . parsePU ( reader ,    version ,    propertyReplacer )  ;", "PUs . add ( pu )  ;", "JpaLogger . ROOT _ LOGGER . readingPersistenceXml ( pu . getPersistenceUnitName (  )  )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "PersistenceUnitMetadataHolder   result    =    new   PersistenceUnitMetadataHolder ( PUs )  ;", "if    ( JpaLogger . ROOT _ LOGGER . isTraceEnabled (  )  )", "JpaLogger . ROOT _ LOGGER . trace ( result . toString (  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParser"}, {"methodBody": ["METHOD_START", "{", "PersistenceUnitMetadata   pu    =    new   PersistenceUnitMetadataImpl (  )  ;", "List < String >    classes    =    new   ArrayList < String >  (  1  )  ;", "List < String >    jarFiles    =    new   ArrayList < String >  (  1  )  ;", "List < String >    mappingFiles    =    new   ArrayList < String >  (  1  )  ;", "Properties   properties    =    new   Properties (  )  ;", "pu . setTransactionType ( JTA )  ;", "pu . setValidationMode ( AUTO )  ;", "pu . setSharedCacheMode ( UNSPECIFIED )  ;", "pu . setPersistenceProviderClassName ( Configuration . PROVIDER _ CLASS _ DEFAULT )  ;", "if    ( version . equals ( Version . JPA _  1  _  0  )  )     {", "pu . setPersistenceXMLSchemaVersion (  \"  1  .  0  \"  )  ;", "} else", "if    ( version . equals ( Version . JPA _  2  _  0  )  )     {", "pu . setPersistenceXMLSchemaVersion (  \"  2  .  0  \"  )  ;", "} else    {", "pu . setPersistenceXMLSchemaVersion (  \"  2  .  1  \"  )  ;", "}", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final   String   value    =    reader . getAttributeValue ( i )  ;", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" parse   persistence . xml :    attribute   value (  % d )     =     % s \"  ,    i ,    value )  ;", "}", "final   String   attributeNamespace    =    reader . getAttributeNamespace ( i )  ;", "if    (  ( attributeNamespace    !  =    null )     &  &     (  !  ( attributeNamespace . isEmpty (  )  )  )  )     {", "continue ;", "}", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "pu . setPersistenceUnitName ( value )  ;", "break ;", "case   TRANSACTIONTYPE    :", "if    ( value . equalsIgnoreCase (  \" RESOURCE _ LOCAL \"  )  )", "pu . setTransactionType ( PersistenceUnitTransactionType . RESOURCE _ LOCAL )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . tracef (  \" parse   persistence . xml :    element =  % s \"  ,    element . getLocalName (  )  )  ;", "}", "switch    ( element )     {", "case   CLASS    :", "classes . add (  . getElement ( reader ,    propertyReplacer )  )  ;", "break ;", "case   DESCRIPTION    :", "final   String   description    =     . getElement ( reader ,    propertyReplacer )  ;", "break ;", "case   EXCLUDEUNLISTEDCLASSES    :", "String   text    =     . getElement ( reader ,    propertyReplacer )  ;", "if    (  ( text    =  =    null )     |  |     ( text . isEmpty (  )  )  )     {", "pu . setExcludeUnlistedClasses ( true )  ;", "} else    {", "pu . setExcludeUnlistedClasses ( Boolean . valueOf ( text )  )  ;", "}", "break ;", "case   JARFILE    :", "String   file    =     . getElement ( reader ,    propertyReplacer )  ;", "jarFiles . add ( file )  ;", "break ;", "case   JTADATASOURCE    :", "pu . setJtaDataSourceName (  . getElement ( reader ,    propertyReplacer )  )  ;", "break ;", "case   NONJTADATASOURCE    :", "pu . setNonJtaDataSourceName (  . getElement ( reader ,    propertyReplacer )  )  ;", "break ;", "case   MAPPINGFILE    :", "mappingFiles . add (  . getElement ( reader ,    propertyReplacer )  )  ;", "break ;", "case   PROPERTIES    :", ". parseProperties ( reader ,    properties ,    propertyReplacer )  ;", "break ;", "case   PROVIDER    :", "pu . setPersistenceProviderClassName (  . getElement ( reader ,    propertyReplacer )  )  ;", "break ;", "case   SHAREDCACHEMODE    :", "String   cm    =     . getElement ( reader ,    propertyReplacer )  ;", "pu . setSharedCacheMode ( SharedCacheMode . valueOf ( cm )  )  ;", "break ;", "case   VALIDATIONMODE    :", "String   validationMode    =     . getElement ( reader ,    propertyReplacer )  ;", "pu . setValidationMode ( ValidationMode . valueOf ( validationMode )  )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  . traceEnabled )     {", "JpaLogger . ROOT _ LOGGER . trace (  \" parse   persistence . xml :    reached   ending   persistence - unit   tag \"  )  ;", "}", "pu . setManagedClassNames ( classes )  ;", "pu . setJarFiles ( jarFiles )  ;", "pu . setMappingFiles ( mappingFiles )  ;", "pu . setProperties ( properties )  ;", "return   pu ;", "}", "METHOD_END"], "methodName": ["parsePU"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParser"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   PROPERTY    :", "final   int   count    =    reader . getAttributeCount (  )  ;", "String   name    =    null ;", "String   value    =    null ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final   String   attributeValue    =     . getAttribute ( reader ,    i ,    propertyReplacer )  ;", "final   String   attributeNamespace    =    reader . getAttributeNamespace ( i )  ;", "if    (  ( attributeNamespace    !  =    null )     &  &     (  !  ( attributeNamespace . isEmpty (  )  )  )  )     {", "continue ;", "}", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NAME    :", "name    =    attributeValue ;", "break ;", "case   VALUE    :", "value    =    attributeValue ;", "if    (  ( name    !  =    null )     &  &     ( value    !  =    null )  )     {", "properties . put ( name ,    value )  ;", "}", "name    =    value    =    null ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( END _ ELEMENT )  )  )", "throw   unexpectedElement ( reader )  ;", "break ;", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseProperties"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParser"}, {"methodBody": ["METHOD_START", "{", "final   String   persistence _ xml    =     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >     \"     +     (  (  (  (  (  (  (  (  \"  < persistence   xmlns =  \\  \" http :  /  / com / xml / ns / persistence \\  \"    version =  \\  \"  1  .  0  \\  \"  >  \"     +     \"        < persistence - unit   name =  \\  \" mypc \\  \"  >  \"  )     +     \"              < description > Persistence   Unit .  \"  )     +     \"              <  / description >  \"  )     +     \"              < jta - data - source > java :  / H 2 DS <  / jta - data - source >  \"  )     +     \"              < class > MyEntity <  / class >  \"  )     +     \"              < properties >     < property   name =  \\  \" hibernate . hbm 2 ddl . auto \\  \"    value =  \\  \" create - drop \\  \"  /  >  <  / properties >  \"  )     +     \"        <  / persistence - unit >  \"  )     +     \"  <  / persistence >  \"  )  ;", "XMLStreamReader   reader    =    XMLInputFactory . newInstance (  )  . createXMLStreamReader ( new   StringReader ( persistence _ xml )  )  ;", "PersistenceUnitMetadataHolder   metadataHolder    =     . parse ( reader ,    PropertyReplacers . noop (  )  )  ;", "PersistenceUnitMetadata   metadata    =    metadataHolder . getPersistenceUnits (  )  . get (  0  )  ;", "String   version    =    metadata . getPersistenceXMLSchemaVersion (  )  ;", "assertEquals (  \"  1  .  0  \"  ,    version )  ;", "}", "METHOD_END"], "methodName": ["testVersion"], "fileName": "org.jboss.as.jpa.puparser.PersistenceUnitXmlParserTestCase"}, {"methodBody": ["METHOD_START", "{", "final   Version   version    =    Version . bindings . get ( location )  ;", "return   version    !  =    null    ?    version    :    Version . UNKNOWN ;", "}", "METHOD_END"], "methodName": ["forLocation"], "fileName": "org.jboss.as.jpa.puparser.Version"}, {"methodBody": ["METHOD_START", "{", "JPAService   jpaService    =    new   JPAService (  )  ;", "JPAService . setDefaultDataSourceName ( defaultDataSourceName )  ;", "JPAService . setDefaultExtendedPersistenceInheritance ( defaultExtendedPersistenceInheritance )  ;", "target . addService ( JPAService . SERVICE _ NAME ,    jpaService )  . setInitialMode ( ACTIVE )  . addDependency ( JPAUserTransactionListenerService . SERVICE _ NAME )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "synchronized ( JPAService . existingResourceDescriptionResolver )     {", "final   EntityManagerFactoryLookup   entityManagerFactoryLookup    =    new   EntityManagerFactoryLookup (  )  ;", "final   Statistics   statistics    =    managementAdaptor . getStatistics (  )  ;", "if    ( false    =  =     ( JPAService . existingResourceDescriptionResolver . contains ( managementAdaptor . getVersion (  )  )  )  )     {", "ResourceDescriptionResolver   resourceDescriptionResolver    =    new   StandardResourceDescriptionResolver ( statistics . getResourceBundleKeyPrefix (  )  ,    statistics . getResourceBundleName (  )  ,    statistics . getClass (  )  . getClassLoader (  )  )     {", "private   ResourceDescriptionResolver   fallback    =    JPAExtension . getResourceDescriptionResolver (  )  ;", "@ Override", "public   String   getResourceAttributeDescription ( String   attributeName ,    Locale   locale ,    ResourceBundle   bundle )     {", "if    ( bundle . containsKey ( getBundleKey ( attributeName )  )  )     {", "return   super . getResourceAttributeDescription ( attributeName ,    locale ,    bundle )  ;", "} else    {", "return   fallback . getResourceAttributeDescription ( attributeName ,    locale ,    fallback . getResourceBundle ( locale )  )  ;", "}", "}", "}  ;", "PathElement   subsystemPE    =    PathElement . pathElement ( SUBSYSTEM ,    JPAExtension . SUBSYSTEM _ NAME )  ;", "ManagementResourceRegistration   deploymentResourceRegistration    =    deploymentUnit . getAttachment ( MUTABLE _ REGISTRATION _ ATTACHMENT )  ;", "ManagementResourceRegistration   deploymentSubsystemRegistration    =    deploymentResourceRegistration . getSubModel ( PathAddress . pathAddress ( subsystemPE )  )  ;", "ManagementResourceRegistration   subdeploymentSubsystemRegistration    =    deploymentResourceRegistration . getSubModel ( PathAddress . pathAddress ( PathElement . pathElement ( SUBDEPLOYMENT )  ,    subsystemPE )  )  ;", "ManagementResourceRegistration   providerResource    =    deploymentSubsystemRegistration . registerSubModel ( new   ManagementResourceDefinition ( PathElement . pathElement ( managementAdaptor . getIdentificationLabel (  )  )  ,    resourceDescriptionResolver ,    statistics ,    entityManagerFactoryLookup )  )  ;", "providerResource . registerReadOnlyAttribute ( PersistenceUnitServiceHandler . SCOPED _ UNIT _ NAME ,    null )  ;", "providerResource    =    subdeploymentSubsystemRegistration . registerSubModel ( new   ManagementResourceDefinition ( PathElement . pathElement ( managementAdaptor . getIdentificationLabel (  )  )  ,    resourceDescriptionResolver ,    statistics ,    entityManagerFactoryLookup )  )  ;", "providerResource . registerReadOnlyAttribute ( PersistenceUnitServiceHandler . SCOPED _ UNIT _ NAME ,    null )  ;", "JPAService . existingResourceDescriptionResolver . add ( managementAdaptor . getVersion (  )  )  ;", "}", "return   new   DynamicManagementStatisticsResource ( statistics ,    scopedPersistenceUnitName ,    managementAdaptor . getIdentificationLabel (  )  ,    entityManagerFactoryLookup )  ;", "}", "}", "METHOD_END"], "methodName": ["createManagementStatisticsResource"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "JpaLogger . ROOT _ LOGGER . tracef (  \" JPAService . getDefaultDataSourceName (  )     =  =     % s \"  ,    JPAService . defaultDataSourceName )  ;", "return   JPAService . defaultDataSourceName ;", "}", "METHOD_END"], "methodName": ["getDefaultDataSourceName"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "JpaLogger . ROOT _ LOGGER . tracef (  \" JPAService . getDefaultExtendedPersistenceInheritance (  )     =  =     % s \"  ,    JPAService . defaultExtendedPersistenceInheritance . toString (  )  )  ;", "return   JPAService . defaultExtendedPersistenceInheritance ;", "}", "METHOD_END"], "methodName": ["getDefaultExtendedPersistenceInheritance"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "JpaLogger . ROOT _ LOGGER . tracef (  \" JPAService . setDefaultDataSourceName (  % s )  ,    previous   value    =     % s \"  ,    dataSourceName ,    JPAService . defaultDataSourceName )  ;", "JPAService . defaultDataSourceName    =    dataSourceName ;", "}", "METHOD_END"], "methodName": ["setDefaultDataSourceName"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "JpaLogger . ROOT _ LOGGER . tracef (  \" JPAService . setDefaultExtendedPersistenceInheritance (  % s )  \"  ,    defaultExtendedPersistenceInheritance . toString (  )  )  ;", "JPAService . defaultExtendedPersistenceInheritance    =    defaultExtendedPersistenceInheritance ;", "}", "METHOD_END"], "methodName": ["setDefaultExtendedPersistenceInheritance"], "fileName": "org.jboss.as.jpa.service.JPAService"}, {"methodBody": ["METHOD_START", "{", "JPAUserTransactionListenerService   jpaUserTransactionListenerService    =    new   JPAUserTransactionListenerService (  )  ;", "target . addService ( JPAUserTransactionListenerService . SERVICE _ NAME ,    jpaUserTransactionListenerService )  . addDependency ( SERVICE _ NAME ,    new   CastingInjector < UserTransactionRegistry >  ( jpaUserTransactionListenerService . getUserTransactionRegistryInjectedValue (  )  ,    UserTransactionRegistry . class )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.jpa.service.JPAUserTransactionListenerService"}, {"methodBody": ["METHOD_START", "{", "return   userTransactionRegistryInjectedValue ;", "}", "METHOD_END"], "methodName": ["getUserTransactionRegistryInjectedValue"], "fileName": "org.jboss.as.jpa.service.JPAUserTransactionListenerService"}, {"methodBody": ["METHOD_START", "{", "persistenceProviderAdaptor . beforeCreateContainerEntityManagerFactory ( pu )  ;", "try    {", "JpaLogger . ROOT _ LOGGER . tracef (  \" calling   createContainerEntityManagerFactory   for   pu =  % s   with   integration   properties =  % s ,    application   properties =  % s \"  ,    pu . getScopedName (  )  ,    properties . getValue (  )  ,    pu . getProperties (  )  )  ;", "return   persistenceProvider . createContainerEntityManagerFactory ( pu ,    properties . getValue (  )  )  ;", "}    finally    {", "try    {", "persistenceProviderAdaptor . afterCreateContainerEntityManagerFactory ( pu )  ;", "}    finally    {", "pu . setAnnotationIndex ( null )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createContainerEntityManagerFactory"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   beanManagerInjector ;", "}", "METHOD_END"], "methodName": ["getBeanManagerInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   executorInjector ;", "}", "METHOD_END"], "methodName": ["getExecutorInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   jtaDataSource ;", "}", "METHOD_END"], "methodName": ["getJtaDataSourceInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   nonJtaDataSource ;", "}", "METHOD_END"], "methodName": ["getNonJtaDataSourceInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   JPAServiceNames . getPUServiceName ( scopedPersistenceUnitName )  ;", "}", "METHOD_END"], "methodName": ["getPUServiceName"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   JPAServiceNames . getPUServiceName ( pu . getScopedPersistenceUnitName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPUServiceName"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   phaseOnePersistenceUnitServiceInjectedValue ;", "}", "METHOD_END"], "methodName": ["getPhaseOnePersistenceUnitServiceImplInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getPropertiesInjector"], "fileName": "org.jboss.as.jpa.service.PersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "persistenceProviderAdaptor . beforeCreateContainerEntityManagerFactory ( pu )  ;", "try    {", "TwoPhaseBootstrapCapable   twoPhaseBootstrapCapable    =     (  ( TwoPhaseBootstrapCapable )     ( persistenceProviderAdaptor )  )  ;", "return   twoPhaseBootstrapCapable . getBootstrap ( pu ,    properties . getValue (  )  )  ;", "}    finally    {", "try    {", "persistenceProviderAdaptor . afterCreateContainerEntityManagerFactory ( pu )  ;", "}    finally    {", "pu . setAnnotationIndex ( null )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createContainerEntityManagerFactoryBuilder"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   proxyBeanManager ;", "}", "METHOD_END"], "methodName": ["getBeanManager"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   wrapperBeanManagerLifeCycle ;", "}", "METHOD_END"], "methodName": ["getBeanManagerLifeCycle"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   entityManagerFactoryBuilder ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactoryBuilder"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   executorInjector ;", "}", "METHOD_END"], "methodName": ["getExecutorInjector"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   jtaDataSource ;", "}", "METHOD_END"], "methodName": ["getJtaDataSourceInjector"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   nonJtaDataSource ;", "}", "METHOD_END"], "methodName": ["getNonJtaDataSourceInjector"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getPropertiesInjector"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "this . secondPhaseStarted    =    secondPhaseStarted ;", "}", "METHOD_END"], "methodName": ["setSecondPhaseStarted"], "fileName": "org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.jpa.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.jpa.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   getLocalName (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.jpa.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.jpa.subsystem.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.jpa.subsystem.Element"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( JPAExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    JPAExtension . RESOURCE _ NAME ,    JPAExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.jpa.subsystem.JPAExtension"}, {"methodBody": ["METHOD_START", "{", "runtimeValidator . validate ( operation . resolve (  )  )  ;", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "protected   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "PersistenceProviderResolverHolder . setPersistenceProviderResolver ( PersistenceProviderResolverImpl . getInstance (  )  )  ;", "final   boolean   appclient    =     ( context . getProcessType (  )  )     =  =     ( ProcessType . APPLICATION _ CLIENT )  ;", "PlatformImpl   platform ;", "if    ( appclient )     {", "platform    =    new   PlatformImpl ( Classification . NONE )  ;", "} else    {", "platform    =    new   PlatformImpl ( Classification . INFINISPAN ,    Classification . INFINISPAN )  ;", "}", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ REGISTER _ JBOSS _ ALL _ JPA ,    new   server . deployment . jbossallxml . JBossAllXmlParserRegisteringProcessor ( JPAJarJBossAllParser . ROOT _ ELEMENT ,    JpaAttachments . DEPLOYMENT _ SETTINGS _ KEY ,    new   JPAJarJBossAllParser (  )  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ PERSISTENCE _ UNIT ,    new   PersistenceUnitParseProcessor ( appclient )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ PERSISTENCE _ ANNOTATION ,    new   JPAAnnotationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ JPA ,    new   JPADependencyProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ HIBERNATE _ SEARCH ,    new   HibernateSearchProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    FIRST _ MODULE _ USE ,    FIRST _ MODULE _ USE _ PERSISTENCE _ CLASS _ FILE _ TRANSFORMER ,    new   JPAClassFileTransformerProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    FIRST _ MODULE _ USE ,    FIRST _ MODULE _ USE _ INTERCEPTORS ,    new   JPAInterceptorProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    FIRST _ MODULE _ USE ,    FIRST _ MODULE _ USE _ PERSISTENCE _ PREPARE ,    new   PersistenceBeginInstallProcessor ( platform )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ PERSISTENCE _ REF ,    new   PersistenceRefProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JPAExtension . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ PERSISTENTUNIT ,    new   PersistenceCompleteInstallProcessor ( platform )  )  ;", "}", "}  ,    RUNTIME )  ;", "final   ModelNode   defaultDSNode    =    operation . require ( CommonAttributes . DEFAULT _ DATASOURCE )  ;", "final   String   dataSourceName    =    defaultDSNode . resolve (  )  . asString (  )  ;", "ExtendedPersistenceInheritance   defaultExtendedPersistenceInheritance    =    ExtendedPersistenceInheritance . DEEP ;", "if    ( operation . hasDefined ( CommonAttributes . DEFAULT _ EXTENDEDPERSISTENCE _ INHERITANCE )  )     {", "final   ModelNode   defaultExtendedPersistenceInheritanceNode    =    operation . get ( CommonAttributes . DEFAULT _ EXTENDEDPERSISTENCE _ INHERITANCE )  ;", "defaultExtendedPersistenceInheritance    =    ExtendedPersistenceInheritance . valueOf ( defaultExtendedPersistenceInheritanceNode . resolve (  )  . asString (  )  )  ;", "}", "final   ServiceTarget   target    =    context . getServiceTarget (  )  ;", "JPAService . addService ( target ,    dataSourceName ,    defaultExtendedPersistenceInheritance )  ;", "JPAUserTransactionListenerService . addService ( target )  ;", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.jpa.subsystem.JPASubSystemAdd"}, {"methodBody": ["METHOD_START", "{", "JPADefinition . DEFAULT _ DATASOURCE . validateAndSet ( operation ,    model )  ;", "JPADefinition . DEFAULT _ EXTENDEDPERSISTENCE _ INHERITANCE . validateAndSet ( operation ,    model )  ;", "}", "METHOD_END"], "methodName": ["populateModel"], "fileName": "org.jboss.as.jpa.subsystem.JPASubSystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.jpa.subsystem.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.jpa.subsystem.Namespace"}, {"methodBody": ["METHOD_START", "{", "registry . put ( scopedPersistenceUnitName ,    service )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.jboss.as.jpa.subsystem.PersistenceUnitRegistryImpl"}, {"methodBody": ["METHOD_START", "{", "registry . remove ( scopedPersistenceUnitName )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.jboss.as.jpa.subsystem.PersistenceUnitRegistryImpl"}, {"methodBody": ["METHOD_START", "{", "return   Thread . currentThread (  )  . getName (  )  ;", "}", "METHOD_END"], "methodName": ["currentThread"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "String   result    =     ( TransactionUtil . currentThread (  )  )     +     \"  :  \"  ;", "if    ( manager   instanceof   ExtendedEntityManager )     {", "result    +  =    manager . toString (  )  ;", "} else    {", "result    +  =     (  \" transaction   scoped   EntityManager    [  \"     +    scopedPuName )     +     \"  ]  \"  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getEntityManagerDetails"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( EntityManager )     ( tsr . getResource ( scopedPuName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getEntityManagerInTransactionRegistry"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Manager . getTransaction (  )  ;", "}    catch    ( SystemException   e )     {", "throw   JpaLogger . ROOT _ LOGGER . errorGettingTransaction ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTransaction"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "return   TransactionUtil . getEntityManagerInTransactionRegistry ( puScopedName ,    tsr )  ;", "}", "METHOD_END"], "methodName": ["getTransactionScopedEntityManager"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "Transaction   tx    =    TransactionUtil . getTransaction ( transactionManager )  ;", "if    (  ( tx    =  =    null )     |  |     (  !  ( TxUtils . isActive ( tx )  )  )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["isInTx"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "tsr . putResource ( scopedPuName ,    entityManager )  ;", "}", "METHOD_END"], "methodName": ["putEntityManagerInTransactionRegistry"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . SessionSynchronization   sessionSynchronization    =    new   TransactionUtil . SessionSynchronization ( entityManager ,    puScopedName )  ;", "tsr . registerInterposedSynchronization ( sessionSynchronization )  ;", "final   AbstractTransaction   transaction    =     (  ( ContextTransactionManager )     ( transactionManager )  )  . getTransaction (  )  ;", "AccessController . doPrivileged (  (  ( PrivilegedAction < Void >  )     (  (  )     -  >     {", "transaction . registerAssociationListener ( sessionSynchronization )  ;", "return   null ;", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["registerSynchronization"], "fileName": "org.jboss.as.jpa.transaction.TransactionUtil"}, {"methodBody": ["METHOD_START", "{", "return   JPAServiceNames . JPA _ SERVICE _ NAME ;", "}", "METHOD_END"], "methodName": ["getJPAServiceName"], "fileName": "org.jboss.as.jpa.util.JPAServiceNames"}, {"methodBody": ["METHOD_START", "{", "return   JPAServiceNames . PERSISTENCE _ UNIT _ SERVICE _ NAME . append ( scopedPersistenceUnitName )  ;", "}", "METHOD_END"], "methodName": ["getPUServiceName"], "fileName": "org.jboss.as.jpa.util.JPAServiceNames"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" rawtypes \"  )", "Iterator < ValidationProvider >    providerIterator    =    ServiceLoader . load ( ValidationProvider . class ,    classLoader )  . iterator (  )  ;", "LinkedList < ValidationProvider <  ?  >  >    providers    =    new   LinkedList < ValidationProvider <  ?  >  >  (  )  ;", "while    ( providerIterator . hasNext (  )  )     {", "try    {", "ValidationProvider <  ?  >    provider    =    providerIterator . next (  )  ;", "if    ( provider . getClass (  )  . getName (  )  . equals (  \" hibernateHibernateValidator \"  )  )     {", "providers . addFirst ( provider )  ;", "} else    {", "providers . add ( provider )  ;", "}", "}    catch    ( ServiceConfigurationError   e )     {", "}", "}", "return   providers ;", "}", "METHOD_END"], "methodName": ["loadProviders"], "fileName": "org.jboss.as.jpa.validator.WildFlyProviderResolver"}]