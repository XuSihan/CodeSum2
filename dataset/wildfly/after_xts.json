[{"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.xts.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.xts.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   getLocalName (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.xts.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.xts.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.xts.Element"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.xts.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.xts.Namespace"}, {"methodBody": ["METHOD_START", "{", "if    (  ( inboundBridgeRecoveryManager )     !  =    null )     {", "try    {", "inboundBridgeRecoveryManager . stop (  )  ;", "}    catch    ( Exception   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.xts.TxBridgeInboundRecoveryService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( outboundBridgeRecoveryManager )     !  =    null )     {", "try    {", "outboundBridgeRecoveryManager . stop (  )  ;", "}    catch    ( Exception   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.xts.TxBridgeOutboundRecoveryService"}, {"methodBody": ["METHOD_START", "{", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "final   ModuleSpecification   moduleSpec    =    unit . getAttachment ( MODULE _ SPECIFICATION )  ;", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . XTS _ MODULE ,    false ,    false ,    false ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addXTSModuleDependency"], "fileName": "org.jboss.as.xts.XTSDependenciesDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( Class   annotation    :    XTSDependenciesDeploymentProcessor . COMPENSATABLE _ ANNOTATIONS )     {", "if    (  ( compositeIndex . getAnnotations ( DotName . createSimple ( annotation . getName (  )  )  )  . size (  )  )     >     0  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isCompensationAnnotationPresent"], "fileName": "org.jboss.as.xts.XTSDependenciesDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   List < AnnotationInstance >    annotations    =    new   ArrayList <  >  (  )  ;", "annotations . addAll ( compositeIndex . getAnnotations ( DotName . createSimple ( Transactional . clagetName (  )  )  )  )  ;", "annotations . addAll ( compositeIndex . getAnnotations ( DotName . createSimple ( TransactionAttribute . clagetName (  )  )  )  )  ;", "for    ( final   AnnotationInstance   annotation    :    annotations )     {", "final   Object   target    =    annotation . target (  )  ;", "if    ( target   instanceof   Clanfo )     {", "final   Clanfo   clanfo    =     (  ( Clanfo )     ( target )  )  ;", "if    (  ( clanfo . annotations (  )  . get ( DotName . createSimple ( WebService . clagetName (  )  )  )  )     !  =    null )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isTransactionalEndpointPresent"], "fileName": "org.jboss.as.xts.XTSDependenciesDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return   unit . hasAttachment ( XTSDeploymentMarker . MARKER )  ;", "}", "METHOD_END"], "methodName": ["isXTSAnnotationDeployment"], "fileName": "org.jboss.as.xts.XTSDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "unit . putAttachment ( XTSDeploymentMarker . MARKER ,    new   XTSDeploymentMarker (  )  )  ;", "}", "METHOD_END"], "methodName": ["mark"], "fileName": "org.jboss.as.xts.XTSDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =     ( XTSExtension . SUBSYSTEM _ NAME )     +     ( keyPrefix    =  =    null    ?     \"  \"     :     \"  .  \"     +    keyPrefix )  ;", "return   new   StandardResourceDescriptionResolver ( prefix ,    XTSExtension . RESOURCE _ NAME ,    XTSExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.xts.XTSExtension"}, {"methodBody": ["METHOD_START", "{", "XtsAsLogger . ROOT _ LOGGER . debug (  \" Initializing   XTS   Extension \"  )  ;", "final   SubsystemRegistration   subsystem    =    context . registerSubsystem (  . SUBSYSTEM _ NAME ,     . CURRENT _ MODEL _ VERSION )  ;", "subsystem . registerSubsystemModel ( new   XTSSubsystemDefinition (  )  )  ;", "subsystem . registerXMLElementWriter ( new   XTSSubsystemParser (  )  )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "org.jboss.as.xts.XTSExtension"}, {"methodBody": ["METHOD_START", "{", "context . setSubsystemXmlMapping ( XTSExtension . SUBSYSTEM _ NAME ,    Namespace . XTS _  1  _  0  . getUriString (  )  ,    XTSSubsystemParser :  : new )  ;", "context . setSubsystemXmlMapping ( XTSExtension . SUBSYSTEM _ NAME ,    Namespace . XTS _  2  _  0  . getUriString (  )  ,    XTSSubsystemParser :  : new )  ;", "}", "METHOD_END"], "methodName": ["initializeParsers"], "fileName": "org.jboss.as.xts.XTSExtension"}, {"methodBody": ["METHOD_START", "{", "for    ( AnnotationInstance   annotationInstance    :    annotations )     {", "Object   target    =    annotationInstance . target (  )  ;", "if    ( target   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( annotationInstance . target (  )  )  )  ;", "final   String   endpointClass    =    classInfo . name (  )  . toString (  )  ;", "endpoints . add ( endpointClass )  ;", "} else", "if    ( target   instanceof   jandex . MethodInfo )     {", "final   jandex . MethodInfo   methodInfo    =     (  ( jandex . MethodInfo )     ( target )  )  ;", "final   String   endpointClass    =    methodInfo . declaringClass (  )  . name (  )  . toString (  )  ;", "endpoints . add ( endpointClass )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addEndpointsToList"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "List < UnifiedHandlerMetaData >    handlers    =    new   ArrayList < UnifiedHandlerMetaData >  (  )  ;", "for    ( String   handlerClass    :    handlerClasses )     {", "handlers . add ( new   UnifiedHandlerMetaData ( handlerClass ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "return   new   UnifiedHandlerChainsMetaData ( new   wsf . spi . metadata . j 2 ee . serviceref . UnifiedHandlerChainMetaData ( null ,    null ,    null ,    handlers ,    false ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["buildHandlerChains"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return   new   PortComponentMetaData ( null ,    portQname ,    endpointClass ,     ( isEJB    ?    getClassName ( endpointClass )     :    null )  ,     ( isEJB    ?    null    :    endpointClass )  ,    null ,    null ,    null ,    null ,    unifiedHandlerChainsMetaData )  ;", "}", "METHOD_END"], "methodName": ["buildPortComponent"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   List < WebserviceDescriptionMetaData >    webserviceDescriptions    =    new   ArrayList < WebserviceDescriptionMetaData >  (  )  ;", "boolean   modifiedWSMeta    =    false ;", "for    ( String   endpoint    :    getDeploymentClasses ( unit )  )     {", "try    {", "final   EndpointMetaData   endpointMetaData    =    EndpointMetaData . build ( unit ,    endpoint )  ;", "if    ( endpointMetaData . isXTSEnabled (  )  )     {", "XTSDeploymentMarker . mark ( unit )  ;", "final   boolean   result    =    updateXTSEndpoint ( endpoint ,    endpointMetaData ,    webserviceDescriptions ,    unit )  ;", "modifiedWSMeta    =    modifiedWSMeta    |  |    result ;", "}", "}    catch    ( XTSException   e )     {", "throw   new   DeploymentUnitProcessingException (  (  (  \" Error   processing   endpoint    '  \"     +    endpoint )     +     \"  '  \"  )  ,    e )  ;", "}", "}", "if    ( modifiedWSMeta )     {", "unit . putAttachment ( WEBSERVICES _ METADATA _ KEY ,    new   WebservicesMetaData ( null ,    webserviceDescriptions )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "String [  ]    split    =    fQClass . split (  \"  \\  \\  .  \"  )  ;", "return   split [  (  ( split . length )     -     1  )  ]  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    endpoints    =    new   HashSet < String >  (  )  ;", "for    ( final   String   annotation    :    CompensatableAnnotation . COMPENSATABLE _ ANNOTATIONS )     {", "addEndpointsToList ( endpoints ,    ASHelper . getAnnotations ( unit ,    DotName . createSimple ( annotation )  )  )  ;", "}", "for    ( final   String   annotation    :    TransactionalAnnotation . TRANSACTIONAL _ ANNOTATIONS )     {", "addEndpointsToList ( endpoints ,    ASHelper . getAnnotations ( unit ,    DotName . createSimple ( annotation )  )  )  ;", "}", "for    ( final   String   annotation    :    OldCompensatableAnnotation . COMPENSATABLE _ ANNOTATIONS )     {", "addEndpointsToList ( endpoints ,    ASHelper . getAnnotations ( unit ,    DotName . createSimple ( annotation )  )  )  ;", "}", "return   endpoints ;", "}", "METHOD_END"], "methodName": ["getDeploymentClasses"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   WSEndpointHandlersMapping   mapping    =    unit . getAttachment ( WS _ ENDPOINT _ HANDLERS _ MAPPING _ KEY )  ;", "if    ( mapping    =  =    null )     {", "return   false ;", "}", "final   Set < String >    existingHandlers    =    mapping . getHandlers ( endpointClass )  ;", "if    ( existingHandlers    =  =    null )     {", "return   false ;", "}", "for    ( final   String   handler    :    handlers )     {", "if    ( existingHandlers . contains ( handler )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isAnyOfHandlersRegistered"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "WSEndpointHandlersMapping   mapping    =    unit . getAttachment ( WS _ ENDPOINT _ HANDLERS _ MAPPING _ KEY )  ;", "if    ( mapping    =  =    null )     {", "mapping    =    new   WSEndpointHandlersMapping (  )  ;", "unit . putAttachment ( WS _ ENDPOINT _ HANDLERS _ MAPPING _ KEY ,    mapping )  ;", "}", "Set < String >    existingHandlers    =    mapping . getHandlers ( endpointClass )  ;", "if    ( existingHandlers    =  =    null )     {", "existingHandlers    =    new   HashSet < String >  (  )  ;", "} else    {", "existingHandlers    =    new   HashSet < String >  ( existingHandlers )  ;", "}", "for    ( String   handler    :    handlersToAdd )     {", "existingHandlers . add ( handler )  ;", "}", "mapping . registerEndpointHandlers ( endpointClass ,    existingHandlers )  ;", "}", "METHOD_END"], "methodName": ["registerHandlersWithAS"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( endpointMetaData . isWebservice (  )  )     {", "final   List < String >    handlers    =    new   ArrayList < String >  (  )  ;", "if    ( endpointMetaData . isBridgeEnabled (  )  )     {", "handlers . add (  . TX _ BRIDGE _ HANDLER )  ;", "}", "handlers . add (  . TX _ CONTEXT _ HANDLER )  ;", "if    (  !  ( isAnyOfHandlersRegistered ( unit ,    endpoint ,    handlers )  )  )     {", "final   UnifiedHandlerChainsMetaData   unifiedHandlerChainsMetaData    =    buildHandlerChains ( handlers )  ;", "final   QName   portQname    =    endpointMetaData . getWebServiceAnnotation (  )  . buildPortQName (  )  ;", "webserviceDescriptions . add ( new   WebserviceDescriptionMetaData ( null ,    null ,    null ,    buildPortComponent ( endpointMetaData . isEJB (  )  ,    endpoint ,    portQname ,    unifiedHandlerChainsMetaData )  )  )  ;", "registerHandlersWithAS ( unit ,    endpoint ,    handlers )  ;", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["updateXTSEndpoint"], "fileName": "org.jboss.as.xts.XTSHandlerDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "List < UnifiedHandlerMetaData >    handlers    =    new   ArrayList < UnifiedHandlerMetaData >  (  2  )  ;", "if    ( enabled )     {", "handlers . add ( new   UnifiedHandlerMetaData (  . BRIDGE _ ENABLED _ HANDLER _ CLASS ,     . BRIDGE _ HANDLER _ NAME ,    null ,    null ,    null ,    null )  )  ;", "handlers . add ( new   UnifiedHandlerMetaData (  . WSAT _ ENABLED _ HANDLER _ CLASS ,     . WSAT _ HANDLER _ NAME ,    null ,    null ,    null ,    null )  )  ;", "} else    {", "handlers . add ( new   UnifiedHandlerMetaData (  . BRIDGE _ DISABLED _ HANDLER _ CLASS ,     . BRIDGE _ HANDLER _ NAME ,    null ,    null ,    null ,    null )  )  ;", "handlers . add ( new   UnifiedHandlerMetaData (  . WSAT _ DISABLED _ HANDLER _ CLASS ,     . WSAT _ HANDLER _ NAME ,    null ,    null ,    null ,    null )  )  ;", "}", "return   new   UnifiedHandlerChainMetaData ( null ,    null ,     . HANDLER _ PROTOCOL _ BINDINGS ,    handlers ,    false ,     . HANDLER _ CHAIN _ ID )  ;", "}", "METHOD_END"], "methodName": ["getHandlerChain"], "fileName": "org.jboss.as.xts.XTSHandlersManager"}, {"methodBody": ["METHOD_START", "{", "final   XTSHandlersService   xtsHandlersService    =    new   XTSHandlersService ( isDefaultContextPropagation )  ;", "ServiceBuilder <  ?  >    builder    =    target . addService ( XTSServices . JBOSS _ XTS _ HANDLERS ,    xtsHandlersService )  ;", "builder . setInitialMode ( ACTIVE )  ;", "builder . install (  )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.xts.XTSHandlersService"}, {"methodBody": ["METHOD_START", "{", "handlerChainMetaData    =    null ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.xts.XTSHandlersService"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   unit    =    phaseContext . getDeploymentUnit (  )  ;", "final   EEModuleDescription   moduleDescription    =    unit . getAttachment ( EE _ MODULE _ DESCRIPTION )  ;", "for    ( ComponentDescription   component    :    moduleDescription . getComponentDescriptions (  )  )     {", "if    ( component   instanceof   SessionBeanComponentDescription )     {", "registerSessionBeans (  (  ( SessionBeanComponentDescription )     ( component )  )  )  ;", "}", "if    ( component   instanceof   WSComponentDescription )     {", "registerWSPOJOs (  (  ( WSComponentDescription )     ( component )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.xts.XTSInterceptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( Annotation   a    :    method . getDeclaredAnnotations (  )  )     {", "if    ( a   instanceof   ServiceRequest )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["methodHasServiceRequestAnnotation"], "fileName": "org.jboss.as.xts.XTSInterceptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( componentDescription . isStateless (  )  )     {", "componentDescription . getConfigurators (  )  . addFirst ( new   ComponentConfigurator (  )     {", "@ Override", "public   void   configure ( haseContext   context ,    ComponentDescription   description ,    ComponentConfiguration   configuration )    throws   DeploymentUnitProcessingException    {", "for    ( Method   method    :    configuration . getDefinedComponentMethods (  )  )     {", "if    ( methodHasServiceRequestAnnotation ( method )  )     {", "configuration . addComponentInterceptor ( method ,    XTSEJBInterceptor . FACTORY ,    XTS _ INTERCEPTOR )  ;", "configuration . getInterceptorContextKeys (  )  . add ( XTSEJBInterceptor . CONTEXT _ KEY )  ;", "}", "}", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerSessionBeanInterceptors"], "fileName": "org.jboss.as.xts.XTSInterceptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( ViewDescription   view    :    componentDescription . getViews (  )  )     {", "view . getConfigurators (  )  . add ( new   ViewConfigurator (  )     {", "@ Override", "public   void   configure ( haseContext   context ,    ComponentConfiguration   componentConfiguration ,    ViewDescription   description ,    ViewConfiguration   configuration )    throws   DeploymentUnitProcessingException    {", "for    ( final   Method   method    :    configuration . getProxyFactory (  )  . getCachedMethods (  )  )     {", "if    ( methodHasServiceRequestAnnotation ( method )  )     {", "configuration . addViewInterceptor ( method ,    XTSPOJOInterceptor . FACTORY ,    XTS _ INTERCEPTOR )  ;", "}", "}", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerWSPOJOInterceptors"], "fileName": "org.jboss.as.xts.XTSInterceptorDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return   wsServerConfig ;", "}", "METHOD_END"], "methodName": ["getWSServerConfig"], "fileName": "org.jboss.as.xts.XTSManagerService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( xtsService )     !  =    null )     {", "try    {", "xtsService . stop (  )  ;", "}    catch    ( Exception   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.xts.XTSManagerService"}, {"methodBody": ["METHOD_START", "{", "return   XTSServices . JBOSS _ XTS _ ENDPOINT . append ( name )  ;", "}", "METHOD_END"], "methodName": ["endpointServiceName"], "fileName": "org.jboss.as.xts.XTSServices"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   logging . XtsAsLogger . ROOT _ LOGGER . xtsServiceIsNotStarted (  )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["notNull"], "fileName": "org.jboss.as.xts.XTSServices"}, {"methodBody": ["METHOD_START", "{", "return   XTSSubsystemAdd . contextDefinitions ;", "}", "METHOD_END"], "methodName": ["getContextDefinitions"], "fileName": "org.jboss.as.xts.XTSSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   namespace    =    Namespace . forUri ( reader . getNamespaceURI (  )  )  ;", "final   List < Element >    elements    =    new   ArrayList <  >  (  )  ;", "if    ( Namespace _  1  _  0  . equals ( namespace )  )     {", "elements . add ( Element _ ENVIRONMENT )  ;", "} else", "if    ( Namespace _  2  _  0  . equals ( namespace )  )     {", "elements . add ( Element _ ENVIRONMENT )  ;", "elements . add ( Element . HOST )  ;", "elements . add ( Element . DEFAULT _ CONTEXT _ PROPAGATION )  ;", "}", "return   elements ;", "}", "METHOD_END"], "methodName": ["getExpectedElements"], "fileName": "org.jboss.as.xts.XTSSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLED    :", "if    (  ( value    =  =    null )     |  |     (  (  !  ( value . toLowerCase (  )  . equals (  \" true \"  )  )  )     &  &     (  !  ( value . toLowerCase (  )  . equals (  \" false \"  )  )  )  )  )     {", "throw   ParseUtils . invalidAttributeValue ( reader ,    i )  ;", "}", "Definition . DEFAULT _ CONTEXT _ PROPAGATION . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseDefaultContextPropagationElement"], "fileName": "org.jboss.as.xts.XTSSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . NAME )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   NAME    :", "Definition . HOST _ NAME . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   ParseUtils . missingRequired ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseHostElement"], "fileName": "org.jboss.as.xts.XTSSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "ParseUtils . requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   URL    :", "Definition . ENVIRONMENT _ URL . parseAndSetParameter ( value ,    subsystem ,    reader )  ;", "break ;", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "ParseUtils . requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseXTSEnvironmentElement"], "fileName": "org.jboss.as.xts.XTSSubsystemParser"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =    readResource (  \" subsystem . xml \"  )  ;", "ModelVersion   modelVersion    =    ModelVersion . create (  1  ,     1  ,     0  )  ;", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXml ( subsystemXml )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    modelVersion )  . configureReverseControllerCheck ( MANAGEMENT ,    null ,    new   OperationFixer (  )     {", "@ Override", "public   ModelNode   fixOperation ( ModelNode   operation )     {", "String   name    =    operation . get ( OP )  . asString (  )  ;", "PathAddress   addr    =    PathAddress . pathAddress ( operation . require ( OP _ ADDR )  )  ;", "if    (  (  ( name . equals ( ADD )  )     &  &     (  ( addr . size (  )  )     =  =     1  )  )     &  &     ( addr . getElement (  0  )  . equals ( XTSExtension . SUBSYSTEM _ PATH )  )  )     {", "operation . get ( HOST )  . set (  \" default - host \"  )  ;", "operation . get ( Definition . DEFAULT _ CONTEXT _ PROPAGATION . getName (  )  )  . set ( false )  ;", "}", "return   operation ;", "}", "}  )  . addMavenResourceURL (  (  \" as : jboss - as - xts :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "Assert . assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "checkSubsystemModelTransformation ( mainServices ,    modelVersion )  ;", "}", "METHOD_END"], "methodName": ["testBoot1_1_0"], "fileName": "org.jboss.as.xts.XTSSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testBoot 1  _  1  _  0  ( EAP _  6  _  4  _  0  )  ;", "}", "METHOD_END"], "methodName": ["testBootEAP640"], "fileName": "org.jboss.as.xts.XTSSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( annotationInstance . value (  \" bridgeType \"  )  )     =  =    null )     {", "return   BridgeType . DEFAULT ;", "}", "String   bridgeType    =    annotationInstance . value (  \" bridgeType \"  )  . asString (  )  ;", "if    ( bridgeType . equals (  \" DEFAULT \"  )  )     {", "return   BridgeType . DEFAULT ;", "} else", "if    ( bridgeType . equals (  \" NONE \"  )  )     {", "return   BridgeType . NONE ;", "} else", "if    ( bridgeType . equals (  \" JTA \"  )  )     {", "return   BridgeType . JTA ;", "} else    {", "throw   new   XTSException (  (  (  \" Unexpected   bridge   type :     '  \"     +    bridgeType )     +     \"  '  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.BridgeType"}, {"methodBody": ["METHOD_START", "{", "for    ( final   String   annotation    :    CompensatableAnnotation . COMPENSATABLE _ ANNOTATIONS )     {", "if    (  ( JandexHelper . getAnnotation ( unit ,    endpoint ,    annotation )  )     !  =    null )     {", "return   new   CompensatableAnnotation (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.CompensatableAnnotation"}, {"methodBody": ["METHOD_START", "{", "final   TransactionalAnnotation   transactionalAnnotation    =    TransactionalAnnotation . build ( unit ,    endpoint )  ;", "final   CompensatableAnnotation   compensatableAnnotation    =    CompensatableAnnotation . build ( unit ,    endpoint )  ;", "final   OldCompensatableAnnotation   oldCompensatableAnnotation    =    OldCompensatableAnnotation . build ( unit ,    endpoint )  ;", "final   StatelessAnnotation   statelessAnnotation    =    StatelessAnnotation . build ( unit ,    endpoint )  ;", "final   WebServiceAnnotation   webServiceAnnotation    =    WebServiceAnnotation . build ( unit ,    endpoint )  ;", "return   new    ( statelessAnnotation ,    transactionalAnnotation ,    compensatableAnnotation ,    oldCompensatableAnnotation ,    webServiceAnnotation )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "return   webServiceAnnotation ;", "}", "METHOD_END"], "methodName": ["getWebServiceAnnotation"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "return    ( transactionalAnnotation )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isBridgeEnabled"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "return    ( statelessAnnotation )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isEJB"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "return    ( webServiceAnnotation )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isWebservice"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( transactionalAnnotation )     !  =    null )     |  |     (  ( compensatableAnnotation )     !  =    null )  )     |  |     (  ( oldCompensatableAnnotation )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["isXTSEnabled"], "fileName": "org.jboss.as.xts.jandex.EndpointMetaData"}, {"methodBody": ["METHOD_START", "{", "final   List < AnnotationInstance >    annotations    =    ASHelper . getAnnotations ( unit ,    DotName . createSimple ( annotationClassName )  )  ;", "for    ( AnnotationInstance   annotationInstance    :    annotations )     {", "Object   target    =    annotationInstance . target (  )  ;", "if    ( target   instanceof   ClassInfo )     {", "final   ClassInfo   classInfo    =     (  ( ClassInfo )     ( target )  )  ;", "final   String   endpointClass    =    classInfo . name (  )  . toString (  )  ;", "if    ( endpointClass . equals ( endpoint )  )     {", "return   annotationInstance ;", "}", "} else", "if    ( target   instanceof   jandex . MethodInfo )     {", "final   jandex . MethodInfo   methodInfo    =     (  ( jandex . MethodInfo )     ( target )  )  ;", "final   String   endpointClass    =    methodInfo . declaringClass (  )  . name (  )  . toString (  )  ;", "if    ( endpointClass . equals ( endpoint )  )     {", "return   annotationInstance ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getAnnotation"], "fileName": "org.jboss.as.xts.jandex.JandexHelper"}, {"methodBody": ["METHOD_START", "{", "for    ( final   String   annotation    :    OldCompensatableAnnotation . COMPENSATABLE _ ANNOTATIONS )     {", "if    (  ( JandexHelper . getAnnotation ( unit ,    endpoint ,    annotation )  )     !  =    null )     {", "return   new   OldCompensatableAnnotation (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.OldCompensatableAnnotation"}, {"methodBody": ["METHOD_START", "{", "final   AnnotationInstance   annotationInstance    =    JandexHelper . getAnnotation ( unit ,    endpoint ,    StatelessAnnotation . STATELESS _ ANNOTATION )  ;", "if    ( annotationInstance    =  =    null )     {", "return   null ;", "}", "return   new   StatelessAnnotation (  )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.StatelessAnnotation"}, {"methodBody": ["METHOD_START", "{", "for    ( final   String   annotation    :    TransactionalAnnotation . TRANSACTIONAL _ ANNOTATIONS )     {", "if    (  ( JandexHelper . getAnnotation ( unit ,    endpoint ,    annotation )  )     !  =    null )     {", "return   new   TransactionalAnnotation (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.TransactionalAnnotation"}, {"methodBody": ["METHOD_START", "{", "AnnotationInstance   annotationInstance    =    JandexHelper . getAnnotation ( unit ,    endpoint ,    WebServiceAnnotation . WEBSERVICE _ ANNOTATION )  ;", "if    ( annotationInstance    =  =    null )     {", "return   null ;", "}", "final   String   portName    =    WebServiceAnnotation . getStringValue ( annotationInstance ,     \" portName \"  )  ;", "final   String   serviceName    =    WebServiceAnnotation . getStringValue ( annotationInstance ,     \" serviceName \"  )  ;", "final   String   name    =    WebServiceAnnotation . getStringValue ( annotationInstance ,     \" name \"  )  ;", "final   String   targetNamespace    =    WebServiceAnnotation . getStringValue ( annotationInstance ,     \" targetNamespace \"  )  ;", "return   new   WebServiceAnnotation ( portName ,    serviceName ,    name ,    targetNamespace )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "return   new   QName ( targetNamespace ,    portName )  ;", "}", "METHOD_END"], "methodName": ["buildPortQName"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "return   portName ;", "}", "METHOD_END"], "methodName": ["getPortName"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "return   serviceName ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "final   AnnotationValue   value    =    annotationInstance . value ( key )  ;", "if    ( value    !  =    null )     {", "return   value . asString (  )  ;", "} else", "if    (  \" portName \"  . equals ( key )  )     {", "return    (  . getTargetClassName ( annotationInstance )  )     +     \" Port \"  ;", "} else", "if    (  \" serviceName \"  . equals ( key )  )     {", "return    (  . getTargetClassName ( annotationInstance )  )     +     \" Service \"  ;", "} else", "if    (  \" name \"  . equals ( key )  )     {", "return    . getTargetClassName ( annotationInstance )  ;", "} else", "if    (  \" targetNamespace \"  . equals ( key )  )     {", "return    . getTargetNamespace ( annotationInstance )  ;", "} else    {", "return    \"  \"  ;", "}", "}", "METHOD_END"], "methodName": ["getStringValue"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "final   String   fullName    =    annotationInstance . target (  )  . toString (  )  ;", "final   int   lastDotIndex    =    fullName . lastIndexOf (  \"  .  \"  )  ;", "if    ( lastDotIndex    =  =     (  -  1  )  )     {", "return   fullName ;", "} else    {", "return   fullName . substring (  ( lastDotIndex    +     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTargetClassName"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "return   targetNamespace ;", "}", "METHOD_END"], "methodName": ["getTargetNamespace"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}, {"methodBody": ["METHOD_START", "{", "final   String [  ]    parts    =    annotationInstance . target (  )  . toString (  )  . split (  \"  \\  \\  .  \"  )  ;", "if    (  ( parts . length )     <     2  )     {", "return    \"  \"  ;", "}", "String   targetNamespace    =     \" http :  /  /  \"  ;", "for    ( int   i    =     ( parts . length )     -     2  ;    i    >  =     0  ;    i -  -  )     {", "targetNamespace    +  =     ( parts [ i ]  )     +     \"  .  \"  ;", "}", "return    ( targetNamespace . substring (  0  ,     (  ( targetNamespace . length (  )  )     -     1  )  )  )     +     \"  /  \"  ;", "}", "METHOD_END"], "methodName": ["getTargetNamespace"], "fileName": "org.jboss.as.xts.jandex.WebServiceAnnotation"}]