[{"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isIntercepted"], "fileName": "org.jboss.as.appclient.component.ApplicationClientComponentDescription"}, {"methodBody": ["METHOD_START", "{", "final   XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "inputFactory . setXMLResolver ( NoopXMLResolver . create (  )  )  ;", "XMLStreamReader   xmlReader    =    inputFactory . createXMLStreamReader ( is )  ;", "return   xmlReader ;", "}", "METHOD_END"], "methodName": ["getXMLStreamReader"], "fileName": "org.jboss.as.appclient.deployment.ApplicationClientParsingDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ResourceRoot   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "final   VirtualFile   alternateDescriptor    =    deploymentRoot . getAttachment ( ALTERNATE _ CLIENT _ DEPLOYMENT _ DESCRIPTOR )  ;", "final   VirtualFile   descriptor ;", "if    ( alternateDescriptor    !  =    null )     {", "descriptor    =    alternateDescriptor ;", "} else    {", "descriptor    =    deploymentRoot . getRoot (  )  . getChild (  . APP _ XML )  ;", "}", "if    ( descriptor . exists (  )  )     {", "InputStream   is    =    null ;", "try    {", "is    =    descriptor . openStream (  )  ;", "ApplicationClientMetaData   data    =    new   ApplicationClientMetaDataParser (  )  . parse ( getXMLStreamReader ( is )  ,    propertyReplacer )  ;", "return   data ;", "}    catch    ( XMLStreamException   e )     {", "throw   AppClientLogger . ROOT _ LOGGER . failedToParseXml ( e ,    descriptor ,    e . getLocation (  )  . getLineNumber (  )  ,    e . getLocation (  )  . getColumnNumber (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   DeploymentUnitProcessingException (  (  \" Failed   to   parse    \"     +    descriptor )  ,    e )  ;", "}    finally    {", "try    {", "if    ( is    !  =    null )     {", "is . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "}", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["parseAppClient"], "fileName": "org.jboss.as.appclient.deployment.ApplicationClientParsingDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   VirtualFile   deploymentRoot    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  . getRoot (  )  ;", "final   VirtualFile   appXml    =    deploymentRoot . getChild (  . JBOSS _ CLIENT _ XML )  ;", "if    ( appXml . exists (  )  )     {", "InputStream   is    =    null ;", "try    {", "is    =    appXml . openStream (  )  ;", "JBossClientMetaData   data    =    new   JBossClientMetaDataParser (  )  . parse ( getXMLStreamReader ( is )  ,    propertyReplacer )  ;", "return   data ;", "}    catch    ( XMLStreamException   e )     {", "throw   AppClientLogger . ROOT _ LOGGER . failedToParseXml ( e ,    appXml ,    e . getLocation (  )  . getLineNumber (  )  ,    e . getLocation (  )  . getColumnNumber (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   AppClientLogger . ROOT _ LOGGER . failedToParseXml ( e ,    appXml )  ;", "}    finally    {", "try    {", "if    ( is    !  =    null )     {", "is . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "}", "} else    {", "return   deploymentUnit . getAttachment ( AppClientJBossAllParser . ATTACHMENT _ KEY )  ;", "}", "}", "METHOD_END"], "methodName": ["parseJBossClient"], "fileName": "org.jboss.as.appclient.deployment.ApplicationClientParsingDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   explode    ?    VFS . mountZipExpanded ( moduleFile ,    moduleFile ,    TempFileProviderService . provider (  )  )     :    VFS . mountZip ( moduleFile ,    moduleFile ,    TempFileProviderService . provider (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   DUnitProcessingException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["mount"], "fileName": "org.jboss.as.appclient.deployment.ApplicationClientStructureProcessor"}, {"methodBody": ["METHOD_START", "{", "return   controllerValue ;", "}", "METHOD_END"], "methodName": ["getControllerValue"], "fileName": "org.jboss.as.appclient.service.ApplicationClientDeploymentService"}, {"methodBody": ["METHOD_START", "{", "return   deploymentCompleteLatch ;", "}", "METHOD_END"], "methodName": ["getDeploymentCompleteLatch"], "fileName": "org.jboss.as.appclient.service.ApplicationClientDeploymentService"}, {"methodBody": ["METHOD_START", "{", "return   applicationClientComponent ;", "}", "METHOD_END"], "methodName": ["getApplicationClientComponent"], "fileName": "org.jboss.as.appclient.service.ApplicationClientStartService"}, {"methodBody": ["METHOD_START", "{", "return   applicationClientDeploymentServiceInjectedValue ;", "}", "METHOD_END"], "methodName": ["getApplicationClientDeploymentServiceInjectedValue"], "fileName": "org.jboss.as.appclient.service.ApplicationClientStartService"}, {"methodBody": ["METHOD_START", "{", "if    (  ( System . getSecurityManager (  )  )     =  =    null )     {", "return   context . getSubjectInfo (  )  ;", "}", "return   AccessController . doPrivileged ( new   PrivilegedAc < SubjectInfo >  (  )     {", "@ Override", "public   SubjectInfo   run (  )     {", "return   context . getSubjectInfo (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getSubjectInfo"], "fileName": "org.jboss.as.appclient.service.DefaultApplicationClientCallbackHandler"}, {"methodBody": ["METHOD_START", "{", "return   new   NonResolvingResourceDescriptionResolver (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.appclient.subsystem.AppClientExtension"}, {"methodBody": ["METHOD_START", "{", "AppClientServerConfiguration . loadExtension ( nodes ,     \" appclient \"  )  ;", "ModelNode   add    =    Util . createAddOperation ( PathAddress . pathAddress ( AppClientExtension . SUBSYSTEM _ PATH )  )  ;", "add . get ( Constants . FILE )  . set ( filePath )  ;", "if    ( deploymentName    !  =    null )     {", "add . get ( Constants . DEPLOYMENT )  . set ( deploymentName )  ;", "}", "if    ( parameters . isEmpty (  )  )     {", "add . get ( Constants . PARAMETERS )  . setEmptyList (  )  ;", "} else    {", "for    ( String   param    :    parameters )     {", "add . get ( Constants . PARAMETERS )  . add ( param )  ;", "}", "}", "if    ( hostUrl    !  =    null )     {", "add . get ( Constants . HOST _ URL )  . set ( hostUrl )  ;", "}", "if    ( propertiesFileUrl    !  =    null )     {", "add . get ( Constants . CONNECTION _ PROPERTIES _ URL )  . set ( propertiesFileUrl )  ;", "}", "nodes . add ( add )  ;", "}", "METHOD_END"], "methodName": ["appclient"], "fileName": "org.jboss.as.appclient.subsystem.AppClientServerConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   add    =    new   ModelNode (  )  ;", "add . get ( ModelDescripConstants . OP _ ADDR )  . set ( new   ModelNode (  )  . setEmptyList (  )  )  . add ( ModelDescripConstants . EXTENSION ,    moduleName )  ;", "add . get ( ModelDescripConstants . OP )  . set ( ModelDescripConstants . ADD )  ;", "nodes . add ( add )  ;", "}", "METHOD_END"], "methodName": ["loadExtension"], "fileName": "org.jboss.as.appclient.subsystem.AppClientServerConfiguration"}, {"methodBody": ["METHOD_START", "{", "List < ModelNode >    ret    =    new   ArrayList < ModelNode >  (  )  ;", "for    ( final   ModelNode   node    :    xmlNodes )     {", "ret . add ( node )  ;", "}", ". appclient ( ret ,    filePath ,    deploymentName ,    hostUrl ,    propertiesFileUrl ,    parameters )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["serverConfiguration"], "fileName": "org.jboss.as.appclient.subsystem.AppClientServerConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   String   deployment    =    AppClientSubsystemResourceDefinition . DEPLOYMENT . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   File   file    =    new   File ( AppClientSubsystemResourceDefinition . FILE . resolveModelAttribute ( context ,    model )  . asString (  )  )  ;", "final   String   hostUrl    =     ( model . hasDefined ( Constants . HOST _ URL )  )     ?    AppClientSubsystemResourceDefinition . HOST _ URL . resolveModelAttribute ( context ,    model )  . asString (  )     :    null ;", "final   String   connectionPropertiesUrl    =     ( model . hasDefined ( Constants . CONNECTION _ PROPERTIES _ URL )  )     ?    AppClientSubsystemResourceDefinition . CONNECTION _ PROPERTIES _ URL . resolveModelAttribute ( context ,    model )  . asString (  )     :    null ;", "final   List < String >    parameters    =    AppClientSubsystemResourceDefinition . PARAMETERS . unwrap ( context ,    model )  ;", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "protected   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "if    (  ( deployment    !  =    null )     &  &     (  !  ( deployment . isEmpty (  )  )  )  )     {", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ APP _ CLIENT ,    new   ApplicationClientStructureProcessor ( deployment )  )  ;", "}", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ REGISTER _ JBOSS _ ALL _ APPCLIENT ,    new   JBossAllXmlParserRegisteringProcessor ( AppClientJBossAllParser . ROOT _ ELEMENT ,    AppClientJBossAllParser . ATTACHMENT _ KEY ,    new   AppClientJBossAllParser (  )  )  )  ;", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ APP _ CLIENT _ XML ,    new   ApplicationClientParsingDeploymentProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ APPLICATION _ CLIENT _ MANIFEST ,    new   ApplicationClientManifestProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ APPLICATION _ CLIENT _ ACTIVE ,    new   ActiveApplicationClientProcessor ( deployment )  )  ;", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ APPLICATION _ CLIENT ,    new   ApplicationClientDependencyProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( Constants . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ APPLICATION _ CLIENT ,    new   ApplicationClientStartProcessor ( parameters . toArray ( EMPTY _ STRING )  )  )  ;", "}", "}  ,    RUNTIME )  ;", "final   ApplicationClientDeploymentService   service    =    new   ApplicationClientDeploymentService ( file )  ;", "context . getServiceTarget (  )  . addService ( ApplicationClientDeploymentService . SERVICE _ NAME ,    service )  . addDependency ( JBOSS _ SERVER _ CONTROLLER ,    ModelController . class ,    service . getControllerValue (  )  )  . install (  )  ;", "try    {", "if    ( connectionPropertiesUrl    !  =    null )     {", "context . getServiceTarget (  )  . addService (  . APP _ CLIENT _ URI _ SERVICE _ NAME ,    new    . ConstantService ( null )  )  . install (  )  ;", "context . getServiceTarget (  )  . addService (  . APP _ CLIENT _ EJB _ PROPERTIES _ SERVICE _ NAME ,    new    . ConstantService ( connectionPropertiesUrl )  )  . install (  )  ;", "} else    {", "URI   uri ;", "if    ( hostUrl    =  =    null )     {", "uri    =    new   URI (  \" remote + http :  /  / localhost :  8  0  8  0  \"  )  ;", "} else    {", "uri    =    new   URI ( hostUrl )  ;", "}", "context . getServiceTarget (  )  . addService (  . APP _ CLIENT _ URI _ SERVICE _ NAME ,    new    . ConstantService ( uri )  )  . install (  )  ;", "context . getServiceTarget (  )  . addService (  . APP _ CLIENT _ EJB _ PROPERTIES _ SERVICE _ NAME ,    new    . ConstantService ( connectionPropertiesUrl )  )  . install (  )  ;", "}", "}    catch    ( URISyntaxException   e )     {", "throw   new   OperationFailedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.appclient.subsystem.AppClientSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "for    ( AttributeDefinition   attr    :    AppClientSubsystemResourceDefinition . ATTRIBUTES )     {", "attr . validateAndSet ( operation ,    model )  ;", "}", "}", "METHOD_END"], "methodName": ["populateModel"], "fileName": "org.jboss.as.appclient.subsystem.AppClientSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "addArguments (  (  ( CommandLineConstants . APPCLIENT _ CONFIG )     +     \"  =  < config >  \"  )  )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argAppClientConfig (  )  )  ;", "addArguments ( SHORT _ HELP ,    HELP )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argHelp (  )  )  ;", "addArguments (  (  ( CommandLineConstants . HOST )     +     \"  =  < url >  \"  )  ,     (  ( CommandLineConstants . SHORT _ HOST )     +     \"  =  < url >  \"  )  )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argHost (  )  )  ;", "addArguments (  (  ( CommandLineConstants . SHORT _ PROPERTIES )     +     \"  =  < url >  \"  )  ,     (  ( CommandLineConstants . PROPERTIES )     +     \"  =  < url >  \"  )  )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argProperties (  )  )  ;", "addArguments (  (  ( CommandLineConstants . CONNECTION _ PROPERTIES )     +     \"  =  < url >  \"  )  )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argConnectionProperties (  )  )  ;", "addArguments (  (  ( CommandLineConstants . SYS _ PROP )     +     \"  < name >  [  = value ]  \"  )  )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argSystemProperty (  )  )  ;", "addArguments ( SHORT _ VERSION ,    VERSION )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argVersion (  )  )  ;", "addArguments ( SECMGR )  ;", "instructions . add ( AppClientLogger . ROOT _ LOGGER . argSecMgr (  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.jboss.as.appclient.subsystem.CommandLineArgumentUsageImpl"}, {"methodBody": ["METHOD_START", "{", "CommandLineArgumentUsageImpl . init (  )  ;", "out . print ( AppClientLogger . ROOT _ LOGGER . usageDescription (  )  )  ;", "out . print ( usage (  \" appclient \"  )  )  ;", "}", "METHOD_END"], "methodName": ["printUsage"], "fileName": "org.jboss.as.appclient.subsystem.CommandLineArgumentUsageImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( t    !  =    null )     {", "t . printStackTrace ( Main . STDERR )  ;", "}", "}    finally    {", "SExiter . exit (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["abort"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "List < String >    clientArguments    =    new   ArrayList < String >  (  )  ;", "Main . ParsedOptions   ret    =    new   Main . ParsedOptions (  )  ;", "ret . clientArguments    =    clientArguments ;", "final   int   argsLength    =    args . length ;", "String   appClientConfig    =     \" appclient . xml \"  ;", "boolean   clientArgs    =    false ;", "ProductConfig   productConfig ;", "boolean   hostSet    =    false ;", "for    ( int   i    =     0  ;    i    <    argsLength ;    i +  +  )     {", "final   String   arg    =    args [ i ]  ;", "try    {", "if    ( clientArgs )     {", "clientArguments . add ( arg )  ;", "} else", "if    (  (  (  ( CommandLineConstants . VERSION . equals ( arg )  )     |  |     ( CommandLineConstants . SHORT _ VERSION . equals ( arg )  )  )     |  |     ( CommandLineConstants . OLD _ VERSION . equals ( arg )  )  )     |  |     ( CommandLineConstants . OLD _ SHORT _ VERSION . equals ( arg )  )  )     {", "productConfig    =    new   ProductConfig ( Module . getBootModuleLoader (  )  ,    WildFlySecurityManager . getPropertyPrivileged ( HOME _ DIR ,    null )  ,    null )  ;", "Main . STDOUT . println ( productConfig . getPrettyVersionString (  )  )  ;", "return   null ;", "} else", "if    (  (  ( CommandLineConstants . HELP . equals ( arg )  )     |  |     ( CommandLineConstants . SHORT _ HELP . equals ( arg )  )  )     |  |     ( CommandLineConstants . OLD _ HELP . equals ( arg )  )  )     {", "Main . usage (  )  ;", "return   null ;", "} else", "if    (  (  ( CommandLineConstants . PROPERTIES . equals ( arg )  )     |  |     ( CommandLineConstants . OLD _ PROPERTIES . equals ( arg )  )  )     |  |     ( CommandLineConstants . SHORT _ PROPERTIES . equals ( arg )  )  )     {", "if    (  !  ( Main . processProperties ( arg ,    args [  (  +  + i )  ]  )  )  )     {", "return   null ;", "}", "} else", "if    ( arg . startsWith ( CommandLineConstants . PROPERTIES )  )     {", "String   urlSpec    =    Main . parseValue ( arg ,    CommandLineConstants . PROPERTIES )  ;", "if    (  ( urlSpec    =  =    null )     |  |     (  !  ( Main . processProperties ( arg ,    urlSpec )  )  )  )     {", "return   null ;", "}", "} else", "if    ( arg . startsWith ( CommandLineConstants . SHORT _ PROPERTIES )  )     {", "String   urlSpec    =    Main . parseValue ( arg ,    CommandLineConstants . SHORT _ PROPERTIES )  ;", "if    (  ( urlSpec    =  =    null )     |  |     (  !  ( Main . processProperties ( arg ,    urlSpec )  )  )  )     {", "return   null ;", "}", "} else", "if    ( arg . startsWith ( CommandLineConstants . OLD _ PROPERTIES )  )     {", "String   urlSpec    =    Main . parseValue ( arg ,    CommandLineConstants . OLD _ PROPERTIES )  ;", "if    (  ( urlSpec    =  =    null )     |  |     (  !  ( Main . processProperties ( arg ,    urlSpec )  )  )  )     {", "return   null ;", "}", "} else", "if    (  ( arg . equals ( CommandLineConstants . SHORT _ HOST )  )     |  |     ( arg . equals ( CommandLineConstants . HOST )  )  )     {", "if    (  ( ret . propertiesFile )     !  =    null )     {", "throw   AppClientLogger . ROOT _ LOGGER . cannotSpecifyBothHostAndPropertiesFile (  )  ;", "}", "hostSet    =    true ;", "String   urlSpec    =    args [  (  +  + i )  ]  ;", "ret . hostUrl    =    urlSpec ;", "} else", "if    ( arg . startsWith ( CommandLineConstants . SHORT _ HOST )  )     {", "if    (  ( ret . propertiesFile )     !  =    null )     {", "throw   AppClientLogger . ROOT _ LOGGER . cannotSpecifyBothHostAndPropertiesFile (  )  ;", "}", "hostSet    =    true ;", "String   urlSpec    =    Main . parseValue ( arg ,    CommandLineConstants . SHORT _ HOST )  ;", "ret . hostUrl    =    urlSpec ;", "} else", "if    ( arg . startsWith ( CommandLineConstants . HOST )  )     {", "if    (  ( ret . propertiesFile )     !  =    null )     {", "throw   AppClientLogger . ROOT _ LOGGER . cannotSpecifyBothHostAndPropertiesFile (  )  ;", "}", "hostSet    =    true ;", "String   urlSpec    =    Main . parseValue ( arg ,    CommandLineConstants . HOST )  ;", "ret . hostUrl    =    urlSpec ;", "} else", "if    ( arg . startsWith ( CommandLineConstants . CONNECTION _ PROPERTIES )  )     {", "if    ( hostSet )     {", "throw   AppClientLogger . ROOT _ LOGGER . cannotSpecifyBothHostAndPropertiesFile (  )  ;", "}", "String   fileUrl    =    Main . parseValue ( arg ,    CommandLineConstants . CONNECTION _ PROPERTIES )  ;", "ret . propertiesFile    =    fileUrl ;", "} else", "if    ( arg . startsWith ( CommandLineConstants . SYS _ PROP )  )     {", "String   name ;", "String   value ;", "int   idx    =    arg . indexOf (  \"  =  \"  )  ;", "if    ( idx    =  =     (  -  1  )  )     {", "name    =    arg . substring (  2  )  ;", "value    =     \" true \"  ;", "} else    {", "name    =    arg . substring (  2  ,    idx )  ;", "value    =    arg . substring (  ( idx    +     1  )  ,    arg . length (  )  )  ;", "}", "systemProperties . setProperty ( name ,    value )  ;", "WildFlySecurityManager . setPropertyPrivileged ( name ,    value )  ;", "} else", "if    ( arg . startsWith ( CommandLineConstants . APPCLIENT _ CONFIG )  )     {", "appClientConfig    =    Main . parseValue ( arg ,    CommandLineConstants . APPCLIENT _ CONFIG )  ;", "} else", "if    ( CommandLineConstants . SECMGR . equals ( arg )  )     {", "} else    {", "if    ( arg . startsWith (  \"  -  \"  )  )     {", "Main . STDOUT . println ( AppClientLogger . ROOT _ LOGGER . unknownOption ( arg )  )  ;", "Main . usage (  )  ;", "return   null ;", "}", "clientArgs    =    true ;", "clientArguments . add ( arg )  ;", "}", "}    catch    ( IndexOutOfBoundsException   e )     {", "Main . STDERR . println ( AppClientLogger . ROOT _ LOGGER . argumentExpected ( arg )  )  ;", "Main . usage (  )  ;", "return   null ;", "}", "}", "String   hostControllerName    =    null ;", "productConfig    =    new   ProductConfig ( Module . getBootModuleLoader (  )  ,    WildFlySecurityManager . getPropertyPrivileged ( HOME _ DIR ,    null )  ,    systemProperties )  ;", "ret . environment    =    new   server . ServerEnvironment ( hostControllerName ,    systemProperties ,    systemEnvironment ,    appClientConfig ,    null ,    launchType ,    null ,    productConfig )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["determineEnvironment"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "if    ( LogManager . getLogManager (  )  . getClass (  )  . getName (  )  . equals (  \" LogManager \"  )  )     {", "try    {", "Class . forName ( ConsoleHandler . class . getName (  )  ,    true ,    ConsoleHandler . class . getClassLoader (  )  )  ;", "}    catch    ( Throwable   ignored )     {", "}", "StdioContext . install (  )  ;", "final   StdioContext   context    =    StdioContext . create ( new   NullInputStream (  )  ,    new   LoggingOutputStream ( getLogger (  \" stdout \"  )  ,    Level . INFO )  ,    new   LoggingOutputStream ( getLogger (  \" stderr \"  )  ,    Level . ERROR )  )  ;", "StdioContext . setStdioContextSelector ( new   SimpleStdioContextSelector ( context )  )  ;", "}", "try    {", "Module . registerURLStreamHandlerFactoryModule ( Module . getBootModuleLoader (  )  . loadModule ( ModuleIdentifier . create (  \" vfs \"  )  )  )  ;", "final   Main . ParsedOptions   options    =    Main . determineEnvironment ( args ,    new   Properties ( WildFlySecurityManager . getSystemPropertiesPrivileged (  )  )  ,    WildFlySecurityManager . getSystemEnvironmentPrivileged (  )  ,    APPCLIENT )  ;", "if    ( options    =  =    null )     {", "return ;", "}", "ServerEnvironment   serverEnvironment    =    options . environment ;", "final   List < String >    clientArgs    =    options . clientArguments ;", "if    ( clientArgs . isEmpty (  )  )     {", "Main . STDERR . println ( AppClientLogger . ROOT _ LOGGER . appClientNotSpecified (  )  )  ;", "Main . usage (  )  ;", "Main . abort ( null )  ;", "} else    {", "final   QName   rootElement    =    new   QName ( CURRENT . getUriString (  )  ,     \" server \"  )  ;", "final   String   file    =    clientArgs . get (  0  )  ;", "final   List < String >    params    =    clientArgs . subList (  1  ,    clientArgs . size (  )  )  ;", "final   String   deploymentName ;", "final   String   earPath ;", "int   pos    =    file . lastIndexOf (  \"  #  \"  )  ;", "if    ( pos    =  =     (  -  1  )  )     {", "earPath    =    file ;", "deploymentName    =    null ;", "} else    {", "deploymentName    =    file . substring (  ( pos    +     1  )  )  ;", "earPath    =    file . substring (  0  ,    pos )  ;", "}", "File   realFile    =    new   File ( earPath )  ;", "if    (  !  ( realFile . exists (  )  )  )     {", "throw   AppClientLogger . ROOT _ LOGGER . cannotFindAppClientFile ( realFile . getAbsoluteFile (  )  )  ;", "}", "final   Bootstrap   bootstrap    =    Factory . newInstance (  )  ;", "final   Bootstrap . Configuration   configuration    =    new   Bootstrap . Configuration ( serverEnvironment )  ;", "configuration . setModuleLoader ( Module . getBootModuleLoader (  )  )  ;", "final   ExtensionRegistry   extensionRegistry    =    configuration . getExtensionRegistry (  )  ;", "final   AppClientXml   parser    =    new   AppClientXml ( Module . getBootModuleLoader (  )  ,    extensionRegistry )  ;", "final   Bootstrap . ConfigurationPersisterFactory   configurationPersisterFactory    =    new   Bootstrap . ConfigurationPersisterFactory (  )     {", "@ Override", "public   ExtensibleConfigurationPersister   createConfigurationPersister ( ServerEnvironment   serverEnvironment ,    ExecutorService   executorService )     {", "ApplicationClientConfigurationPersister   persister    =    new   ApplicationClientConfigurationPersister ( earPath ,    deploymentName ,    options . hostUrl ,    options . propertiesFile ,    params ,    serverEnvironment . getServerConfigurationFile (  )  . getBootFile (  )  ,    rootElement ,    parser )  ;", "for    ( Namespace   namespace    :    Namespace . domainValues (  )  )     {", "if    (  !  ( namespace . equals ( CURRENT )  )  )     {", "persister . registerAdditionalRootElement ( new   QName ( namespace . getUriString (  )  ,     \" server \"  )  ,    parser )  ;", "}", "}", "extensionRegistry . setWriterRegistry ( persister )  ;", "return   persister ;", "}", "}  ;", "configuration . setConfigurationPersisterFactory ( configurationPersisterFactory )  ;", "bootstrap . bootstrap ( configuration ,    Collections .  < ServiceActivator > emptyList (  )  )  . get (  )  ;", "}", "}    catch    ( Throwable   t )     {", "Main . abort ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "urlspec    =    urlspec . trim (  )  ;", "URL   url ;", "try    {", "url    =    new   URL ( urlspec )  ;", "if    ( url . getProtocol (  )  . equals (  \" file \"  )  )     {", "File   file    =    new   File ( url . getFile (  )  )  . getCanonicalFile (  )  ;", "url    =    file . toURI (  )  . toURL (  )  ;", "}", "}    catch    ( Exception   e )     {", "try    {", "File   file    =    new   File ( urlspec )  . getCanonicalFile (  )  ;", "url    =    file . toURI (  )  . toURL (  )  ;", "}    catch    ( Exception   n )     {", "throw   new   MalfmedURLException ( n . toString (  )  )  ;", "}", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["makeURL"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "String   value    =    null ;", "int   splitPos    =    key . length (  )  ;", "if    (  (  ( arg . length (  )  )     <  =     ( splitPos    +     1  )  )     |  |     (  ( arg . charAt ( splitPos )  )     !  =     '  =  '  )  )     {", "Main . usage (  )  ;", "} else    {", "value    =    argtring (  ( splitPos    +     1  )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["parseValue"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    null ;", "try    {", "url    =    Main . makeURL ( urlSpec )  ;", "Properties   props    =    SgetProperties (  )  ;", "props . load ( url . openConnection (  )  . getInputStream (  )  )  ;", "return   true ;", "}    catch    ( MalformedURLException   e )     {", "Main . STDERR . println ( AppClientLogger . ROOT _ LOGGER . malformedUrl ( arg )  )  ;", "Main . usage (  )  ;", "return   false ;", "}    catch    ( IOException   e )     {", "Main . STDERR . println ( AppClientLogger . ROOT _ LOGGER . cannotLoadProperties ( url )  )  ;", "Main . usage (  )  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["processProperties"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "CommandLineArgumentUsageImpl . printUsage ( Main . STDOUT )  ;", "}", "METHOD_END"], "methodName": ["usage"], "fileName": "org.jboss.as.appclient.subsystem.Main"}, {"methodBody": ["METHOD_START", "{", "requireNoAttributes ( reader )  ;", "final   Set < String >    configuredSubsystemTypes    =    new   HashSet < String >  (  )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "if    (  ( Element . forName ( reader . getLocalName (  )  )  )     !  =     ( Element . SUBSYSTEM )  )     {", "throw   unexpectedElement ( reader )  ;", "}", "if    (  !  ( configuredSubsystemTypes . add ( reader . getNamespaceURI (  )  )  )  )     {", "throw   Logger . ROOT _ LOGGER . duplicateSubsystemDeclaration ( reader . getLocation (  )  )  ;", "}", "final   List < ModelNode >    subsystems    =    new   ArrayList < ModelNode >  (  )  ;", "reader . handleAny ( subsystems )  ;", "for    ( final   ModelNode   update    :    subsystems )     {", "final   ModelNode   subsystemAddress    =    address . clone (  )  ;", "for    ( final   Property   path    :    update . get ( ModelDescriptionConstants . OP _ ADDR )  . asPropertyList (  )  )     {", "subsystemAddress . add ( path . getName (  )  ,    path . getValue (  )  . asString (  )  )  ;", "}", "update . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( subsystemAddress )  ;", "list . add ( update )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseServerProfile"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    uniqueBindingNames    =    new   HashSet < String >  (  )  ;", "ModelNode   op    =    Util . getEmptyOperation ( ModelDescriptionConstants . ADD ,    null )  ;", "String   socketBindingGroupName    =    null ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( NAME ,    DEFAULT _ INTERFACE )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final   String   value    =    reader . getAttributeValue ( i )  ;", "if    (  !  ( isNoNamespaceAttribute ( reader ,    i )  )  )     {", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ModelDescriptionConstants . NAME    :", "{", "socketBindingGroupName    =    value ;", "required . remove ( attribute )  ;", "break ;", "}", "case   DEFAULT _ INTERFACE    :", "{", "SocketBindingGroupResourceDefinition . DEFAULT _ INTERFACEeAndSetParameter ( value ,    op ,    reader )  ;", "required . remove ( attribute )  ;", "break ;", "}", "case   PORT _ OFFSET    :", "{", "PORT _ OFFSETeAndSetParameter ( value ,    op ,    reader )  ;", "break ;", "}", "default    :", "throw   ParseUtils . unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "ModelNode   groupAddress    =    address . clone (  )  . add ( ModelDescriptionConstants . SOCKET _ BINDING _ GROUP ,    socketBindingGroupName )  ;", "op . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( groupAddress )  ;", "updates . add ( op )  ;", "while    (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )     {", "requireNamespace ( reader ,    expectedNs )  ;", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   SOCKET _ BINDING    :", "{", "final   String   bindingName    = eSocketBinding ( reader ,    interfaces ,    groupAddress ,    updates )  ;", "if    (  !  ( uniqueBindingNames . add ( bindingName )  )  )     {", "throw   ROOT _ LOGGER . alreadyDeclared ( SOCKET _ BINDING . getLocalName (  )  ,    OUTBOUND _ SOCKET _ BINDING . getLocalName (  )  ,    bindingName ,    SOCKET _ BINDING _ GROUP . getLocalName (  )  ,    socketBindingGroupName ,    reader . getLocation (  )  )  ;", "}", "break ;", "}", "case   OUTBOUND _ SOCKET _ BINDING    :", "{", "final   String   bindingName    = eOutboundSocketBinding ( reader ,    interfaces ,    groupAddress ,    updates )  ;", "if    (  !  ( uniqueBindingNames . add ( bindingName )  )  )     {", "throw   ROOT _ LOGGER . alreadyDeclared ( SOCKET _ BINDING . getLocalName (  )  ,    OUTBOUND _ SOCKET _ BINDING . getLocalName (  )  ,    bindingName ,    SOCKET _ BINDING _ GROUP . getLocalName (  )  ,    socketBindingGroupName ,    reader . getLocation (  )  )  ;", "}", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseSocketBindingGroup"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   address    =    new   ModelNode (  )  . setEmptyList (  )  ;", "if    (  ( ElemforName ( reader . getLocalName (  )  )  )     !  =     ( ElemSERVER )  )     {", "throw   unexpectedElemreader )  ;", "}", "Namespace   readerNS    =    Namespace . forUri ( reader . getNamespaceURI (  )  )  ;", "switch    ( readerNS )     {", "case   DOMAIN _  1  _  0     :", "readServerElem 1  _  0  ( reader ,    address ,    operationList )  ;", "break ;", "default    :", "for    ( Namespace   curr :    Namespace . domainValues (  )  )     {", "if    ( readerNS . equals ( curr )     {", "readServerElem 1  _  1  ( readerNS ,    reader ,    address ,    operationList )  ;", "return ;", "}", "}", "throw   unexpectedElemreader )  ;", "}", "}", "METHOD_END"], "methodName": ["readElement"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}, {"methodBody": ["METHOD_START", "{", "eNamespaces ( reader ,    address ,    list )  ;", "String   serverName    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "switch    ( Namespace . forUri ( reader . getAttributeNamespace ( i )  )  )     {", "case   NONE    :", "{", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ModelDescriptionConstants . NAME    :", "{", "serverName    =    value ;", "break ;", "}", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "break ;", "}", "case   XML _ SCHEMA _ INSTANCE    :", "{", "switch    ( Attribute . forName ( reader . getAttributeLocalName ( i )  )  )     {", "case   SCHEMA _ LOCATION    :", "{", "eSchemaLocations ( reader ,    address ,    list ,    i )  ;", "break ;", "}", "case   NO _ NAMESPACE _ SCHEMA _ LOCATION    :", "{", "break ;", "}", "default    :", "{", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "break ;", "}", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "setServerName ( address ,    list ,    serverName )  ;", "Element   element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "if    ( element    =  =     ( Element . EXTENSIONS )  )     {", "extensionXmleExtensions ( reader ,    address ,    DOMAIN _  1  _  0  ,    list )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "if    ( element    =  =     ( Element . SYSTEM _ PROPERTIES )  )     {", "eSystemProperties ( reader ,    address ,    DOMAIN _  1  _  0  ,    list ,    true )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "if    ( element    =  =     ( Element . PATHS )  )     {", "ePaths ( reader ,    address ,    DOMAIN _  1  _  0  ,    list ,    true )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "if    ( element    =  =     ( Element . PROFILE )  )     {", "eServerProfile ( reader ,    address ,    list )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "final   Set < String >    interfaceNames    =    new   HashSet < String >  (  )  ;", "if    ( element    =  =     ( Element . INTERFACES )  )     {", "eInterfaces ( reader ,    interfaceNames ,    address ,    DOMAIN _  1  _  0  ,    list ,    true )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "if    ( element    =  =     ( Element . SOCKET _ BINDING _ GROUP )  )     {", "eSocketBindingGroup ( reader ,    interfaceNames ,    address ,    DOMAIN _  1  _  0  ,    list )  ;", "element    =    nextElement ( reader ,    DOMAIN _  1  _  0  )  ;", "}", "if    ( element    !  =    null )     {", "throw   unexpectedElement ( reader )  ;", "}", "}", "METHOD_END"], "methodName": ["readServerElement_1_0"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}, {"methodBody": ["METHOD_START", "{", "eNamespaces ( reader ,    address ,    list )  ;", "String   serverName    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "switch    ( Namespace . forUri ( reader . getAttributeNamespace ( i )  )  )     {", "case   NONE    :", "{", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ModelDescriptionConstants . NAME    :", "{", "serverName    =    value ;", "break ;", "}", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "break ;", "}", "case   XML _ SCHEMA _ INSTANCE    :", "{", "switch    ( Attribute . forName ( reader . getAttributeLocalName ( i )  )  )     {", "case   SCHEMA _ LOCATION    :", "{", "eSchemaLocations ( reader ,    address ,    list ,    i )  ;", "break ;", "}", "case   NO _ NAMESPACE _ SCHEMA _ LOCATION    :", "{", "break ;", "}", "default    :", "{", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "break ;", "}", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "setServerName ( address ,    list ,    serverName )  ;", "Element   element    =    nextElement ( reader ,    namespace )  ;", "if    ( element    =  =     ( Element . EXTENSIONS )  )     {", "extensionXmleExtensions ( reader ,    address ,    namespace ,    list )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    =  =     ( Element . SYSTEM _ PROPERTIES )  )     {", "eSystemProperties ( reader ,    address ,    namespace ,    list ,    true )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    =  =     ( Element . PATHS )  )     {", "ePaths ( reader ,    address ,    namespace ,    list ,    true )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    =  =     ( Element . VAULT )  )     {", "eVault ( reader ,    address ,    namespace ,    list )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    =  =     ( Element . PROFILE )  )     {", "eServerProfile ( reader ,    address ,    list )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "final   Set < String >    interfaceNames    =    new   HashSet < String >  (  )  ;", "if    ( element    =  =     ( Element . INTERFACES )  )     {", "eInterfaces ( reader ,    interfaceNames ,    address ,    namespace ,    list ,    true )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    =  =     ( Element . SOCKET _ BINDING _ GROUP )  )     {", "eSocketBindingGroup ( reader ,    interfaceNames ,    address ,    namespace ,    list )  ;", "element    =    nextElement ( reader ,    namespace )  ;", "}", "if    ( element    !  =    null )     {", "throw   unexpectedElement ( reader )  ;", "}", "}", "METHOD_END"], "methodName": ["readServerElement_1_1"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    !  =    null )     &  &     (  ( value . length (  )  )     >     0  )  )     {", "final   ModelNode   update    =    Util . getWriteAttributeOperation ( address ,    ModelDescriptionConstants . NAME ,    value )  ;", "operationList . add ( update )  ;", "}", "}", "METHOD_END"], "methodName": ["setServerName"], "fileName": "org.jboss.as.appclient.subsystem.parsing.AppClientXml"}]