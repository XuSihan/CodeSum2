[{"methodBody": ["METHOD_START", "{", "for    ( Parameter   param    :    method . getParameters (  )  )     {", ". ParamInfo   paramInfo    =    new    . ParamInfo (  )  ;", "paramInfo . cls    =    param . getType (  )  ;", "paramInfo . defaultValue    =    null ;", "paramInfo . name    =    null ;", "paramInfo . type    =    null ;", "Annotation   annotation ;", "if    (  ( annotation    =    param . getAnnotation ( PathParam . class )  )     !  =    null )     {", "PathParam   pathParam    =     (  ( PathParam )     ( annotation )  )  ;", "paramInfo . name    =    pathParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( PathParam . class . getSimpleName (  )  )  ;", "} else", "if    (  ( annotation    =    param . getAnnotation ( class )  )     !  =    null )     {", "QueryParam   queryParam    =     (  ( QueryParam )     ( annotation )  )  ;", "paramInfo . name    =    queryParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( getSimpleName (  )  )  ;", "} else", "if    (  ( annotation    =    param . getAnnotation ( class )  )     !  =    null )     {", "HeaderParam   headerParam    =     (  ( HeaderParam )     ( annotation )  )  ;", "paramInfo . name    =    headerParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( getSimpleName (  )  )  ;", "} else", "if    (  ( annotation    =    param . getAnnotation ( class )  )     !  =    null )     {", "CookieParam   cookieParam    =     (  ( CookieParam )     ( annotation )  )  ;", "paramInfo . name    =    cookieParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( getSimpleName (  )  )  ;", "} else", "if    (  ( annotation    =    param . getAnnotation ( class )  )     !  =    null )     {", "MatrixParam   matrixParam    =     (  ( MatrixParam )     ( annotation )  )  ;", "paramInfo . name    =    matrixParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( getSimpleName (  )  )  ;", "} else", "if    (  ( annotation    =    param . getAnnotation ( class )  )     !  =    null )     {", "FormParam   formParam    =     (  ( FormParam )     ( annotation )  )  ;", "paramInfo . name    =    formParam . value (  )  ;", "paramInfo . type    =     \"  @  \"     +     ( getSimpleName (  )  )  ;", "}", "if    (  ( paramInfo . name )     =  =    null )     {", "paramInfo . name    =    param . getName (  )  ;", "}", "if    (  ( annotation    =    param . getAnnotation ( DefaultValue . class )  )     !  =    null )     {", "DefaultValue   defaultValue    =     (  ( DefaultValue )     ( annotation )  )  ;", "paramInfo . defaultValue    =    defaultValue . value (  )  ;", "}", "jaxrsRes . parameters . add ( paramInfo )  ;", "}", "}", "METHOD_END"], "methodName": ["addMethodParameters"], "fileName": "org.jboss.as.jaxrs.DeploymentRestResourcesDefintion"}, {"methodBody": ["METHOD_START", "{", "DeploymentRestResourcesDefintion . JaxrsResourceLocatorDescription   locatorRes    =    new   DeploymentRestResourcesDefintion . JaxrsResourceLocatorDescription (  )  ;", "locatorRes . resourceClass    =    resClass . getClazz (  )  ;", "resolvedCls . add ( resClass . getClazz (  )  )  ;", "for    ( ResourceMethod   resMethod    :    resClass . getResourceMethods (  )  )     {", "DeploymentRestResourcesDefintion . JaxrsResourceMethodDescription   jaxrsRes    =    new   DeploymentRestResourcesDefintion . JaxrsResourceMethodDescription (  )  ;", "jaxrsRes . consumeTypes    =    resMethod . getConsumes (  )  ;", "jaxrsRes . contextPath    =    contextPath ;", "jaxrsRes . httpMethods    =    resMethod . getHttpMethods (  )  ;", "jaxrsRes . method    =    resMethod . getMethod (  )  ;", "jaxrsRes . produceTypes    =    resMethod . getProduces (  )  ;", "jaxrsRes . resourceClass    =    resClass . getClazz (  )  ;", "String   resPath    =    new   StringBuilder ( mapping )  . append (  \"  /  \"  )  . append ( resMethod . getFullpath (  )  )  . toString (  )  . replace (  \"  /  /  \"  ,     \"  /  \"  )  ;", "jaxrsRes . resourcePath    =    resPath ;", "jaxrsRes . servletMappings    =    servletMappings ;", "addMethodParameters ( jaxrsRes ,    resMethod . getMethod (  )  )  ;", "locatorRes . methodsDescriptions . add ( jaxrsRes )  ;", "}", "for    ( ResourceLocator   resLocator    :    resClass . getResourceLocators (  )  )     {", "Class <  ?  >    clz    =    resLocator . getReturnType (  )  ;", "if    ( clz . equals ( resClass . getClazz (  )  )  )     {", "break ;", "}", "if    ( resolvedCls . contains ( clz )  )     {", "break ;", "} else    {", "resolvedCls . add ( clz )  ;", "}", "ResourceClass   subResClass    =    ResourceBuilder . locatorFromAnnotations ( clz )  ;", "String   subMapping    =    new   StringBuilder ( mapping )  . append (  \"  /  \"  )  . append ( resLocator . getFullpath (  )  )  . toString (  )  . replace (  \"  /  /  \"  ,     \"  /  \"  )  ;", "DeploymentRestResourcesDefintion . JaxrsResourceLocatorDescription   inner    =    resLocatorDescription ( subResClass ,    contextPath ,    subMapping ,    servletMappings ,    resolvedCls )  ;", "if    ( inner . containsMethodResources (  )  )     {", "locatorRes . subLocatorDescriptions . add ( inner )  ;", "}", "}", "return   locatorRes ;", "}", "METHOD_END"], "methodName": ["resLocatorDescription"], "fileName": "org.jboss.as.jaxrs.DeploymentRestResourcesDefintion"}, {"methodBody": ["METHOD_START", "{", "DeploymentRestResourcesDefintion . JaxrsResourceMethodDescription   jaxrsRes    =    new   DeploymentRestResourcesDefintion . JaxrsResourceMethodDescription (  )  ;", "jaxrsRes . consumeTypes    =    methodInvoker . getConsumes (  )  ;", "jaxrsRes . contextPath    =    contextPath ;", "jaxrsRes . httpMethods    =    methodInvoker . getHttpMethods (  )  ;", "jaxrsRes . method    =    methodInvoker . getMethod (  )  ;", "jaxrsRes . produceTypes    =    methodInvoker . getProduces (  )  ;", "jaxrsRes . resourceClass    =    methodInvoker . getResourceClass (  )  ;", "jaxrsRes . resourcePath    =    mapping ;", "jaxrsRes . servletMappings    =    servletMappings ;", "addMethodParameters ( jaxrsRes ,    methodInvoker . getMethod (  )  )  ;", "return   jaxrsRes ;", "}", "METHOD_END"], "methodName": ["resMethodDescription"], "fileName": "org.jboss.as.jaxrs.DeploymentRestResourcesDefintion"}, {"methodBody": ["METHOD_START", "{", "return   dotName ;", "}", "METHOD_END"], "methodName": ["getDotName"], "fileName": "org.jboss.as.jaxrs.JaxrsAnnotations"}, {"methodBody": ["METHOD_START", "{", "return   simpleName ;", "}", "METHOD_END"], "methodName": ["getSimpleName"], "fileName": "org.jboss.as.jaxrs.JaxrsAnnotations"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( JaxrsExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    JaxrsExtension . RESOURCE _ NAME ,    JaxrsExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResolver"], "fileName": "org.jboss.as.jaxrs.JaxrsExtension"}, {"methodBody": ["METHOD_START", "{", "final   ServiceTarget   serviceTarget    =    context . getServiceTarget (  )  ;", "JaxrsLogger . JAXRS _ LOGGER . resteasyVersion ( ResteasyDeployment . class . getPackage (  )  . getImplementationVersion (  )  )  ;", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "public   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ JAXRS _ ANNOTATIONS ,    new   JaxrsAnnotationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ JAXRS _ SPRING ,    new   pringProcessor ( serviceTarget )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ JAXRS ,    new   JaxrsDependencyProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ JAXRS _ SCANNING ,    new   canningProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ JAXRS _ COMPONENT ,    new   JaxrsComponentDeployer (  )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ JAXRS _ CDI _ INTEGRATION ,    new   JaxrsCdiIntegrationProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( JaxrsExtension . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ JAXRS _ DEPLOYMENT ,    new   JaxrsIntegrationProcessor (  )  )  ;", "}", "}  ,    RUNTIME )  ;", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.jaxrs.JaxrsSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "model . setEmptyObject (  )  ;", "}", "METHOD_END"], "methodName": ["populateModel"], "fileName": "org.jboss.as.jaxrs.JaxrsSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "ParamValueMetaData   param    =    new   ParamValueMetaData (  )  ;", "param . setParamName ( name )  ;", "param . setParamValue ( value )  ;", "List < ParamValueMetaData >    params    =    webdata . getCoxtParams (  )  ;", "if    ( params    =  =    null )     {", "params    =    new   ArrayList < ParamValueMetaData >  (  )  ;", "webdata . setCoxtParams ( params )  ;", "}", "params . add ( param )  ;", "}", "METHOD_END"], "methodName": ["setContextParameter"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsCdiIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    c    =    component . getClass (  )  ;", "while    (  ( c    !  =     ( Object . class )  )     &  &     ( c    !  =    null )  )     {", "if    ( c . getName (  )  . equals ( className )  )     {", "return   true ;", "}", "c    =    c . getSuperclass (  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isInstanceOf"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsComponentDeployer"}, {"methodBody": ["METHOD_START", "{", "ModuleDependency   dependency    =    new   ModuleDependency ( moduleLoader ,    moduleIdentifier ,    optional ,    false ,    true ,    false )  ;", "if    ( deploymentBundelesClientBuilder )     {", "dependency . addImportFilter ( PathFilters . is (  . CLIENT _ BUILDER )  ,    false )  ;", "}", "moduleSpecification . addSystemDependency ( dependency )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsDependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ModuleSpecification   moduleSpecification    =    deploymentUnit . getAttachment ( MODULE _ SPECIFICATION )  ;", "boolean   deploymentBundlesClientBuilder    =    isClientBuilderInDeployment ( deploymentUnit )  ;", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JAXRS _ API ,    false ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JAXB _ API ,    false ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JSON _ API ,    false ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ ATOM ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ VALIDATOR _  1  1  ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JAXRS ,    true ,    deploymentBundlesClientBuilder )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JAXB ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JACKSON 2  ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JSON _ P _ PROVIDER ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JSON _ B _ PROVIDER ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ JSAPI ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ MULTIPART ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ YAML ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JACKSON _ CORE _ ASL ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ CRYPTO ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JACKSON _ DATATYPE _ JDK 8  ,    true ,    false )  ;", "addDependency ( moduleSpecification ,    moduleLoader ,     . JACKSON _ DATATYPE _ JSR 3  1  0  ,    true ,    false )  ;", "if    ( WeldDeploymentMarker . isPartOfWeldDeployment ( deploymentUnit )  )     {", "addDependency ( moduleSpecification ,    moduleLoader ,     . RESTEASY _ CDI ,    true ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsDependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "ResourceRoot   root    =    deploymentUnit . getAttachment ( DEPLOYMENT _ ROOT )  ;", "List < ResourceRoot >    roots    =    new   ArrayList ( deploymentUnit . getAttachmentList ( RESOURCE _ ROOTS )  )  ;", "roots . add ( root )  ;", "for    ( ResourceRoot   r    :    roots )     {", "VirtualFile   file    =    r . getRoot (  )  . getChild (  . CLIENT _ BUILDER )  ;", "if    ( file . exists (  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isClientBuilderInDeployment"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsDependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "DeploymentUnit   deployment    =     (  ( deploymentUnit . getParent (  )  )     =  =    null )     ?    deploymentUnit    :    deploymentUnit . getParent (  )  ;", "Boolean   val    =    deployment . getAttachment (  . ATTACHMENT _ KEY )  ;", "return    ( val    !  =    null )     &  &    val ;", "}", "METHOD_END"], "methodName": ["isJaxrsDeployment"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deployment . getParent (  )  )     !  =    null )     {", "deployment . getParent (  )  . putAttachment (  . ATTACHMENT _ KEY ,    true )  ;", "} else    {", "deployment . putAttachment (  . ATTACHMENT _ KEY ,    true )  ;", "}", "}", "METHOD_END"], "methodName": ["mark"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsDeploymentMarker"}, {"methodBody": ["METHOD_START", "{", "if    (  ( webdata . getServlets (  )  )     =  =    null )     {", "webdata . setServlets ( new   JBServletsMetaData (  )  )  ;", "}", "webdata . getServlets (  )  . add ( servlet )  ;", "}", "METHOD_END"], "methodName": ["addServlet"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "List < ParamValueMetaData >    params    =    webdata . getContextParams (  )  ;", "if    ( params    =  =    null )", "return   null ;", "for    ( ParamValueMetaData   param    :    params )     {", "if    ( param . getParamName (  )  . equals ( name )  )     {", "return   param ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findContextParam"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "JBossServletsMetaData   servlets    =    webdata . getServlets (  )  ;", "if    ( servlets    =  =    null )", "return   null ;", "for    ( JBossServletMetaData   servlet    :    servlets )     {", "List < ParamValueMetaData >    initParams    =    servlet . getInitParam (  )  ;", "if    ( initParams    !  =    null )     {", "for    ( ParamValueMetaData   param    :    initParams )     {", "if    ( param . getParamName (  )  . equals ( name )  )     {", "return   param ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findInitParam"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "List < ServletMappingMetaData >    mappings    =    webdata . getServletMappings (  )  ;", "if    ( mappings    =  =    null )", "return   false ;", "for    ( ServletMappingMetaData   mapping    :    mappings )     {", "if    ( mapping . getServletName (  )  . equals ( servletName )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["servletMappingsExist"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "ParamValueMetaData   param    =    new   ParamValueMetaData (  )  ;", "param . setParamName ( name )  ;", "param . setParamValue ( value )  ;", "List < ParamValueMetaData >    params    =    webdata . getCoxtParams (  )  ;", "if    ( params    =  =    null )     {", "params    =    new   ArrayList < ParamValueMetaData >  (  )  ;", "webdata . setCoxtParams ( params )  ;", "}", "params . add ( param )  ;", "}", "METHOD_END"], "methodName": ["setContextParameter"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "ParamValueMetaData   param    =    new   ParamValueMetaData (  )  ;", "param . setParamName ( name )  ;", "param . setParamValue ( value )  ;", "List < ParamValueMetaData >    params    =    filter . getInitParam (  )  ;", "if    ( params    =  =    null )     {", "params    =    new   ArrayList < ParamValueMetaData >  (  )  ;", "filter . setInitParam ( params )  ;", "}", "paramdd ( param )  ;", "}", "METHOD_END"], "methodName": ["setFilterInitParam"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "ParamValueMetaData   param    =    new   ParamValueMetaData (  )  ;", "param . setParamName ( name )  ;", "param . setParamValue ( value )  ;", "List < ParamValueMetaData >    params    =    servlet . getInitParam (  )  ;", "if    ( params    =  =    null )     {", "params    =    new   ArrayList < ParamValueMetaData >  (  )  ;", "servlet . setInitParam ( params )  ;", "}", "paramdd ( param )  ;", "}", "METHOD_END"], "methodName": ["setServletInitParam"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "final   List < ServletMappingMetaData >    mappings    =    webdata . getServletMappings (  )  ;", "if    ( mappings    !  =    null )     {", "boolean   mappingSet    =    false ;", "for    ( final   ServletMappingMetaData   mapping    :    mappings )     {", "if    ( mapping . getServletName (  )  . equals ( servletName )  )     {", "if    (  ( mapping . getUrlPatterns (  )  )     !  =    null )     {", "for    ( String   pattern    :    mapping . getUrlPatterns (  )  )     {", "if    ( mappingSet )     {", "Logger . JAXRS _ LOGGER . moreThanOneServletMapping ( servletName ,    pattern )  ;", "} else    {", "mappingSet    =    true ;", "String   realPattern    =    pattern ;", "if    ( realPattern . endsWith (  \"  *  \"  )  )     {", "realPattern    =    realPattern . substring (  0  ,     (  ( realPattern . length (  )  )     -     1  )  )  ;", "}", "setServletInitParam ( servlet ,     \" resteasy . servlet . mapping . prefix \"  ,    realPattern )  ;", "}", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["setServletMappingPrefix"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsIntegrationProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   DeploymentResourceSupport   ResourceSupport    =    Unit . getAttachment ( DEPLOYMENT _ RESOURCE _ SUPPORT )  ;", "ResourceSupport . getDeploymentSubModel ( JaxrsExtension . SUBSYSTEM _ NAME ,    PathElement . pathElement ( DeploymentRestResourcesDefintion . REST _ RESOURCE _ NAME ,    componentClass )  )  ;", "}    catch    ( Exception   e )     {", "JaxrsLogger . JAXRS _ LOGGER . failedToRegisterManagementViewForRESTResources ( componentClass ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["addManagement"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( webData . getServlets (  )  )     =  =    null )", "return   null ;", "for    ( ServletMetaData   servlet    :    webData . getServlets (  )  )     {", "String   servletClass    =    servlet . getServletClass (  )  ;", "if    ( servletClass    =  =    null )", "continue ;", "Class <  ?  >    clazz    =    null ;", "try    {", "clazz    =    classLoader . loadClass ( servletClass )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   DUnitProcessingException ( e )  ;", "}", "if    ( Application . class . isAssignableFrom ( clazz )  )     {", "servlet . setServletClass ( HttpServlet 3  0 Dispatcher . class . getName (  )  )  ;", "servlet . setAsyncSupported ( true )  ;", "ParamValueMetaData   param    =    new   ParamValueMetaData (  )  ;", "param . setParamName (  \" Application \"  )  ;", "param . setParamValue ( servletClass )  ;", "List < ParamValueMetaData >    params    =    servlet . getInitParam (  )  ;", "if    ( params    =  =    null )     {", "params    =    new   ArrayList < ParamValueMetaData >  (  )  ;", "servlet . setInitParam ( params )  ;", "}", "params . add ( param )  ;", "return   clazz ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["checkDeclaredApplicationClassAsServlet"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "HashSet < String >    appClazzList    =    new   HashSet <  >  (  )  ;", "List < ParamValueMetaData >    contextParamList    =    webdata . getContextParams (  )  ;", "if    ( contextParamList    !  =    null )     {", "for    ( ParamValueMetaData   param    :    contextParamList )     {", "if    (  \" Application \"  . equals ( param . getParamName (  )  )  )     {", "appClazzList . add ( param . getParamValue (  )  )  ;", "}", "}", "}", "if    (  ( webdata . getServlets (  )  )     !  =    null )     {", "for    ( ServletMetaData   servlet    :    webdata . getServlets (  )  )     {", "List < ParamValueMetaData >    initParamList    =    servlet . getInitParam (  )  ;", "if    ( initParamList    !  =    null )     {", "for    ( ParamValueMetaData   param    :    initParamList )     {", "if    (  \" Application \"  . equals ( param . getParamName (  )  )  )     {", "appClazzList . add ( param . getParamValue (  )  )  ;", "}", "}", "}", "}", "}", "processDeclaredApplicationClasses ( du ,    appClazzList ,    webdata ,    classLoader ,    resteasyDData )  ;", "}", "METHOD_END"], "methodName": ["checkOtherParams"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( webdata . getServlets (  )  )     !  =    null )     {", "for    ( ServletMetaData   servlet    :    webdata . getServlets (  )  )     {", "String   servletClass    =    servlet . getServletClass (  )  ;", "if    (  . BOOT _ CLASSES . contains ( servletClass )  )", "return   true ;", "}", "}", "if    (  ( webdata . getFilters (  )  )     !  =    null )     {", "for    ( FilterMetaData   filter    :    webdata . getFilters (  )  )     {", "if    (  . BOOT _ CLASSES . contains ( filter . getFilterClass (  )  )  )", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasBootClasses"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "final   CompositeIndex   index    =    du . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "List < AnnotationInstance >    resources    =    index . getAnnotations ( JaxrsAnnotations . PATH . getDotName (  )  )  ;", "Map < String ,    ClassInfo >    resourceMap    =    new   HashMap ( resources . size (  )  )  ;", "if    ( resources    !  =    null )     {", "for    ( AnnotationInstance   a    :    resources )     {", "if    (  ( a . target (  )  )    instanceof   ClassInfo )     {", "resourceMap . put (  (  ( ClassInfo )     ( a . target (  )  )  )  . name (  )  . toString (  )  ,     (  ( ClassInfo )     ( a . target (  )  )  )  )  ;", "}", "}", "}", "for    ( String   clazzName    :    appClazzList )     {", "Class <  ?  >    clazz    =    null ;", "try    {", "clazz    =    classLoader . loadClass ( clazzName )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "if    ( Application . class . isAssignableFrom ( clazz )  )     {", "try    {", "Application   appClazz    =     (  ( Application )     ( clazz . newInstance (  )  )  )  ;", "Set < Class <  ?  >  >    declClazzs    =    appClazz . getClasses (  )  ;", "Set < Object >    declSingletons    =    appClazz . getSingletons (  )  ;", "HashSet < Class <  ?  >  >    clazzSet    =    new   HashSet <  >  (  )  ;", "if    ( declClazzs    !  =    null )     {", "clazzSet . addAll ( declClazzs )  ;", "}", "if    ( declSingletons    !  =    null )     {", "for    ( Object   obj    :    declSingletons )     {", "clazzSet . add (  (  ( Class )     ( obj )  )  )  ;", "}", "}", "Set < String >    scannedResourceClasses    =    resteasyDeploymentData . getScannedResourceClasses (  )  ;", "for    ( Class <  ?  >    cClazz    :    clazzSet )     {", "if    ( cClazz . isAnnotationPresent ( Path . class )  )     {", "final   ClassInfo   info    =    resourceMap . get ( cClazz . getName (  )  )  ;", "if    ( info    !  =    null )     {", "if    ( info . annotations (  )  . containsKey (  . DECORATOR )  )     {", "continue ;", "}", "if    (  !  ( Modifier . isInterface ( info . flags (  )  )  )  )     {", "scannedResourceClasses . add ( info . name (  )  . toString (  )  )  ;", "}", "}", "}", "}", "}    catch    ( Exception   e )     {", "JaxrsLogger . JAXRS _ LOGGER . cannotLoadApplicationClass ( e )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["processDeclaredApplicationClasses"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "final   CompositeIndex   index    =    du . getAttachment ( COMPOSITE _ ANNOTATION _ INDEX )  ;", "if    (  !  ( resteasyDeploymentData . shouldScan (  )  )  )     {", "return ;", "}", "if    (  !  ( resteasyDeploymentData . isDispatcherCreated (  )  )  )     {", "final   Set < ClassInfo >    applicationClasses    =    index . getAllKnownSubclasses (  . APPLICATION )  ;", "try    {", "for    ( ClassInfo   c    :    applicationClasses )     {", "if    ( Modifier . isAbstract ( c . flags (  )  )  )", "continue ;", "@ SuppressWarnings (  \" unchecked \"  )", "Class <  ?    extends   Application >    scanned    =     (  ( Class <  ?    extends   Application >  )     ( classLoader . loadClass ( c . name (  )  . toString (  )  )  )  )  ;", "resteasyDeploymentData . getScannedApplicationClasses (  )  . add ( scanned )  ;", "}", "}    catch    ( ClassNotFoundException   e )     {", "throw   JaxrsLogger . JAXRS _ LOGGER . cannotLoadApplicationClass ( e )  ;", "}", "}", "List < AnnotationInstance >    resources    =    null ;", "List < AnnotationInstance >    providers    =    null ;", "if    ( resteasyDeploymentData . isScanResources (  )  )     {", "resources    =    index . getAnnotations ( JaxrsAnnotations . PATH . getDotName (  )  )  ;", "}", "if    ( resteasyDeploymentData . isScanProviders (  )  )     {", "providers    =    index . getAnnotations ( JaxrsAnnotations . PROVIDER . getDotName (  )  )  ;", "}", "if    (  (  ( resources    =  =    null )     |  |     ( resources . isEmpty (  )  )  )     &  &     (  ( providers    =  =    null )     |  |     ( providers . isEmpty (  )  )  )  )", "return ;", "final   Set < ClassInfo >    pathInterfaces    =    new   HashSet < ClassInfo >  (  )  ;", "if    ( resources    !  =    null )     {", "for    ( AnnotationInstance   e    :    resources )     {", "final   ClassInfo   info ;", "if    (  ( e . target (  )  )    instanceof   ClassInfo )     {", "info    =     (  ( ClassInfo )     ( e . target (  )  )  )  ;", "} else", "if    (  ( e . target (  )  )    instanceof   MethodInfo )     {", "continue ;", "} else    {", "JaxrsLogger . JAXRS _ LOGGER . classOrMethodAnnotationNotFound (  \"  @ Path \"  ,    e . target (  )  )  ;", "continue ;", "}", "if    ( info . name (  )  . toString (  )  . startsWith (  . ORG _ APACHE _ CXF )  )     {", "continue ;", "}", "if    ( info . annotations (  )  . containsKey (  . DECORATOR )  )     {", "continue ;", "}", "if    (  !  ( Modifier . isInterface ( info . flags (  )  )  )  )     {", "resteasyDeploymentData . getScannedResourceClasses (  )  . add ( info . name (  )  . toString (  )  )  ;", "} else    {", "pathInterfaces . add ( info )  ;", "}", "}", "}", "if    ( providers    !  =    null )     {", "for    ( AnnotationInstance   e    :    providers )     {", "if    (  ( e . target (  )  )    instanceof   ClassInfo )     {", "ClassInfo   info    =     (  ( ClassInfo )     ( e . target (  )  )  )  ;", "if    ( info . name (  )  . toString (  )  . startsWith (  . ORG _ APACHE _ CXF )  )     {", "continue ;", "}", "if    ( info . annotations (  )  . containsKey (  . DECORATOR )  )     {", "continue ;", "}", "if    (  !  ( Modifier . isInterface ( info . flags (  )  )  )  )     {", "resteasyDeploymentData . getScannedProviderClasses (  )  . add ( info . name (  )  . toString (  )  )  ;", "}", "} else    {", "JaxrsLogger . JAXRS _ LOGGER . classAnnotationNotFound (  \"  @ Provider \"  ,    e . target (  )  )  ;", "}", "}", "}", "for    ( final   ClassInfo   iface    :    pathInterfaces )     {", "final   Set < ClassInfo >    implementors    =    index . getAllKnownImplementors ( iface . name (  )  )  ;", "for    ( final   ClassInfo   implementor    :    implementors )     {", "if    ( implementor . name (  )  . toString (  )  . startsWith (  . ORG _ APACHE _ CXF )  )     {", "continue ;", "}", "if    ( implementor . annotations (  )  . containsKey (  . DECORATOR )  )     {", "continue ;", "}", "resteasyDeploymentData . getScannedResourceClasses (  )  . add ( implementor . name (  )  . toString (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["scan"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "boolean   hasBoot    =    hasBootClasses ( webdata )  ;", "resteasyDData . setBootClasses ( hasBoot )  ;", "Class <  ?  >    declaredApplicationClass    =    checkDeclaredApplicationClassAsServlet ( webdata ,    classLoader )  ;", "if    ( declaredApplicationClass    !  =    null )     {", "resteasyDData . setDispatcherCreated ( true )  ;", "resteasyDData . setScanProviders ( true )  ;", "resteasyDData . setScanResources ( true )  ;", "}", "if    (  (  ! hasBoot )     &  &     (  !  ( webdata . isMetadataComplete (  )  )  )  )     {", "resteasyDData . setScanAll ( true )  ;", "resteasyDData . setScanProviders ( true )  ;", "resteasyDData . setScanResources ( true )  ;", "}", "List < ParamValueMetaData >    contextParams    =    webdata . getContextParams (  )  ;", "if    ( contextParams    !  =    null )     {", "for    ( ParamValueMetaData   param    :    contextParams )     {", "if    ( param . getParamName (  )  . equals ( RESTEASY _ SCAN )  )     {", "resteasyDData . setScanAll ( valueOf ( RESTEASY _ SCAN ,    param . getParamValue (  )  )  )  ;", "} else", "if    ( param . getParamName (  )  . equals ( ResteasyContextParameters . RESTEASY _ SCAN _ PROVIDERS )  )     {", "resteasyDData . setScanProviders ( valueOf ( RESTEASY _ SCAN _ PROVIDERS ,    param . getParamValue (  )  )  )  ;", "} else", "if    ( param . getParamName (  )  . equals ( RESTEASY _ SCAN _ RESOURCES )  )     {", "resteasyDData . setScanResources ( valueOf ( RESTEASY _ SCAN _ RESOURCES ,    param . getParamValue (  )  )  )  ;", "} else", "if    ( param . getParamName (  )  . equals ( ResteasyContextParameters . RESTEASY _ UNWRAPPED _ EXCEPTIONS )  )     {", "resteasyDData . setUnwrappedExceptionsParameterSet ( true )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["scanWebDeployment"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   Logger . JAXRS _ LOGGER . invalidParamValue ( paramName ,    value )  ;", "}", "if    ( value . toLowerCase ( Locale . ENGLISH )  . equals (  \" true \"  )  )     {", "return   true ;", "} else", "if    ( value . toLowerCase ( Locale . ENGLISH )  . equals (  \" false \"  )  )     {", "return   false ;", "} else    {", "throw   Logger . JAXRS _ LOGGER . invalidParamValue ( paramName ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["valueOf"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsScanningProcessor"}, {"methodBody": ["METHOD_START", "{", "DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  ( deploymentUnit . getParent (  )  )     !  =    null )     {", "return ;", "}", "final   List < DeploymentUnit >    deploymentUnits    =    new   ArrayList < DeploymentUnit >  (  )  ;", "deploymentUnits . add ( deploymentUnit )  ;", "deploymentUnits . addAll ( deploymentUnit . getAttachmentList ( SUB _ DEPLOYMENTS )  )  ;", "boolean   found    =    false ;", "for    ( DeploymentUnit   unit    :    deploymentUnits )     {", "WarMetaData   warMetaData    =    unit . getAttachment ( ATTACHMENT _ KEY )  ;", "if    ( warMetaData    =  =    null )     {", "continue ;", "}", "JBossWebMetaData   md    =    warMetaData . getMergedJBossWebMetaData (  )  ;", "if    ( md    =  =    null )     {", "continue ;", "}", "if    (  ( md . getContextParams (  )  )     !  =    null )     {", "boolean   skip    =    false ;", "for    ( ParamValueMetaData   prop    :    md . getContextParams (  )  )     {", "if    ( prop . getParamName (  )  . equals (  . ENABLE _ PROPERTY )  )     {", "boolean   explicitEnable    =    Boolean . parseBoolean ( prop . getParamValue (  )  )  ;", "if    ( explicitEnable )     {", "found    =    true ;", "} else    {", "skip    =    true ;", "}", "break ;", "} else", "if    (  ( prop . getParamName (  )  . equals (  . DISABLE _ PROPERTY )  )     &  &     (  \" true \"  . equals ( prop . getParamValue (  )  )  )  )     {", "skip    =    true ;", "disablePropertyDeprecated (  )  ;", "break ;", "}", "}", "if    ( skip )     {", "continue ;", "}", "}", "if    (  ( md . getListeners (  )  )     !  =    null )     {", "for    ( ListenerMetaData   listener    :    md . getListeners (  )  )     {", "if    (  . SPRING _ LISTENER . equals ( listener . getListenerClass (  )  )  )     {", "found    =    true ;", "break ;", "}", "}", "}", "if    (  ( md . getServlets (  )  )     !  =    null )     {", "for    ( JBossServletMetaData   servlet    :    md . getServlets (  )  )     {", "if    (  . SPRING _ SERVLET . equals ( servlet . getServletClass (  )  )  )     {", "found    =    true ;", "break ;", "}", "}", "}", "if    ( found )     {", "try    {", "MountHandle   mh    =    new   MountHandle ( null )  ;", "ResourceRoot   resourceRoot    =    new   ResourceRoot ( getResteasySpringVirtualFile (  )  ,    mh )  ;", "ModuleRootMarker . mark ( resourceRoot )  ;", "deploymentUnit . addToAttachmentList ( RESOURCE _ ROOTS ,    resourceRoot )  ;", "}    catch    ( Exception   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "return ;", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsSpringProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resourceRoot )     !  =    null )     {", "return   resourceRoot ;", "}", "try    {", "Module   module    =    Module . getBootModuleLoader (  )  . loadModule (  . MODULE )  ;", "URL   fileUrl    =    module . getClassLoader (  )  . getResource (  . JAR _ LOCATION )  ;", "if    ( fileUrl    =  =    null )     {", "throw   JaxrsLogger . JAXRS _ LOGGER . noSpringIntegrationJar (  )  ;", "}", "File   dir    =    new   File ( fileUrl . toURI (  )  )  ;", "File   file    =    null ;", "for    ( String   jar    :    dir . list (  )  )     {", "if    ( jar . endsWith (  \"  . jar \"  )  )     {", "file    =    new   File ( dir ,    jar )  ;", "break ;", "}", "}", "if    ( file    =  =    null )     {", "throw   JaxrsLogger . JAXRS _ LOGGER . noSpringIntegrationJar (  )  ;", "}", "VirtualFile   vf    =    VFS . getChild ( file . toURI (  )  )  ;", "final   Closeable   mountHandle    =    VFS . mountZip ( file ,    vf ,    TempFileProviderService . provider (  )  )  ;", "Service < Closeable >    mountHandleService    =    new   Service < Closeable >  (  )     {", "public   void   start ( StartContext   startContext )    throws   StartException    {", "}", "public   void   stop ( StopContext   stopContext )     {", "VFSUtils . safeClose ( mountHandle )  ;", "}", "public   Closeable   getValue (  )    throws   IllegalArgumentException ,    IllegalStateException    {", "return   mountHandle ;", "}", "}  ;", "ServiceBuilder < Closeable >    builder    =    serviceTarget . addService ( JBOSS . append (  . SERVICE _ NAME )  ,    mountHandleService )  ;", "builder . setInitialMode ( ACTIVE )  . install (  )  ;", "resourceRoot    =    vf ;", "return   resourceRoot ;", "}    catch    ( Exception   e )     {", "throw   new   DeploymentUnitProcessingException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getResteasySpringVirtualFile"], "fileName": "org.jboss.as.jaxrs.deployment.JaxrsSpringProcessor"}, {"methodBody": ["METHOD_START", "{", "return   scannedApplicationClasses ;", "}", "METHOD_END"], "methodName": ["getScannedApplicationClasses"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scannedJndiComponentResources ;", "}", "METHOD_END"], "methodName": ["getScannedJndiComponentResources"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scannedProviderClasses ;", "}", "METHOD_END"], "methodName": ["getScannedProviderClasses"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scannedResourceClasses ;", "}", "METHOD_END"], "methodName": ["getScannedResourceClasses"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   bootClasses ;", "}", "METHOD_END"], "methodName": ["hasBootClasses"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   dispatcherCreated ;", "}", "METHOD_END"], "methodName": ["isDispatcherCreated"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scanAll ;", "}", "METHOD_END"], "methodName": ["isScanAll"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scanProviders ;", "}", "METHOD_END"], "methodName": ["isScanProviders"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   scanResources ;", "}", "METHOD_END"], "methodName": ["isScanResources"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return   unwrappedExceptionsParameterSet ;", "}", "METHOD_END"], "methodName": ["isUnwrappedExceptionsParameterSet"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "for    ( ResteasyDeploymentData   data    :    deploymentData )     {", "scannedApplicationClasses . addAll ( data . getScannedApplicationClasses (  )  )  ;", "if    ( scanResources )     {", "scannedResourceClasses . addAll ( data . getScannedResourceClasses (  )  )  ;", "scannedJndiComponentResources . addAll ( data . getScannedJndiComponentResources (  )  )  ;", "}", "if    ( scanProviders )     {", "scannedProviderClasses . addAll ( data . getScannedProviderClasses (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "this . bootClasses    =    bootClasses ;", "}", "METHOD_END"], "methodName": ["setBootClasses"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "this . dispatcherCreated    =    dispatcherCreated ;", "}", "METHOD_END"], "methodName": ["setDispatcherCreated"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "if    ( scanAll )     {", "scanources    =    true ;", "scanProviders    =    true ;", "}", "this . scanAll    =    scanAll ;", "}", "METHOD_END"], "methodName": ["setScanAll"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "this . scanProviders    =    scanProviders ;", "}", "METHOD_END"], "methodName": ["setScanProviders"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "this . scanResources    =    scanResources ;", "}", "METHOD_END"], "methodName": ["setScanResources"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "this . unwrappedExceptionsParameterSet    =    unwrappedExceptionsParameterSet ;", "}", "METHOD_END"], "methodName": ["setUnwrappedExceptionsParameterSet"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}, {"methodBody": ["METHOD_START", "{", "return    (  ( scanAll )     |  |     ( scanResources )  )     |  |     ( scanProviders )  ;", "}", "METHOD_END"], "methodName": ["shouldScan"], "fileName": "org.jboss.as.jaxrs.deployment.ResteasyDeploymentData"}]