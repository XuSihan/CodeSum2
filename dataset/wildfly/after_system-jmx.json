[{"methodBody": ["METHOD_START", "{", "jbossInternalCreate (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "try    {", "jbossInternalDestroy (  )  ;", "}    catch    ( Throwable   t )     {", "log . warn ( Logger . ROOT _ LOGGER . errorInDestroy ( jbossInternalDescription (  )  )  ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   log ;", "}", "METHOD_END"], "methodName": ["getLog"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "final   String   s    =    log . getName (  )  ;", "final   int   i    =    s . lastIndexOf (  \"  .  \"  )  ;", "return   i    !  =     (  -  1  )     ?    ubstring (  ( i    +     1  )  ,    s . length (  )  )     :    s ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   nextNotificationSequenceNumber (  )  ;", "}", "METHOD_END"], "methodName": ["getNextNotificationSequenceNumber"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getObjectName"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   server ;", "}", "METHOD_END"], "methodName": ["getServer"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   serviceName ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   ServiceMBean . states [ state ]  ;", "}", "METHOD_END"], "methodName": ["getStateString"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state )     !  =     ( ServiceMBean . REGISTERED )  )     {", "createIgnored    =    true ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Ignoring   create   call ;    current   state   is    \"     +     ( getStateString (  )  )  )  )  ;", "}", "return ;", "}", "createIgnored    =    false ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Creating    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "try    {", "createService (  )  ;", "state    =    ServiceMBean . CREATED ;", "}    catch    ( Exception   e )     {", "log . warn ( ServiceMBeanLogger . ROOT _ LOGGER . initializationFailed ( jbossInternalDescription (  )  )  ,    e )  ;", "throw   e ;", "}", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Created    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "if    ( startIgnored )     {", "start (  )  ;", "}", "}", "METHOD_END"], "methodName": ["jbossInternalCreate"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( serviceName )     !  =    null )", "return   serviceName . toString (  )  ;", "else", "return   getName (  )  ;", "}", "METHOD_END"], "methodName": ["jbossInternalDescription"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state )     !  =     ( ServiceMBean . STOPPED )  )     {", "destroyIgnored    =    true ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Ignoring   destroy   call ;    current   state   is    \"     +     ( getStateString (  )  )  )  )  ;", "}", "return ;", "}", "destroyIgnored    =    false ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Destroying    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "try    {", "destroyService (  )  ;", "}    catch    ( Throwable   t )     {", "log . warn ( ServiceMBeanLogger . ROOT _ LOGGER . destroyingFailed ( jbossInternalDescription (  )  )  ,    t )  ;", "}", "state    =    ServiceMBean . DESTROYED ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Destroyed    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "if    ( unregisterIgnored )     {", "postDeregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["jbossInternalDestroy"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    ( method    =  =    null )", "throw   logging . ServiceMBeanLogger . ROOT _ LOGGER . nullMethodName (  )  ;", "if    ( method . equals (  \" create \"  )  )", "jbossInternalCreate (  )  ;", "else", "if    ( method . equals (  \" start \"  )  )", "jbossInternalStart (  )  ;", "else", "if    ( method . equals (  \" stop \"  )  )", "jbossInternalStop (  )  ;", "else", "if    ( method . equals (  \" destroy \"  )  )", "jbossInternalDestroy (  )  ;", "else", "throw   logging . ServiceMBeanLogger . ROOT _ LOGGER . unknownLifecycleMethod ( method )  ;", "}", "METHOD_END"], "methodName": ["jbossInternalLifecycle"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( state )     !  =     ( ServiceMBean . CREATED )  )     &  &     (  ( state )     !  =     ( ServiceMBean . STOPPED )  )  )     {", "startIgnored    =    true ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Ignoring   start   call ;    current   state   is    \"     +     ( getStateString (  )  )  )  )  ;", "}", "return ;", "}", "startIgnored    =    false ;", "state    =    ServiceMBean . STARTING ;", "sendStateChangeNotification ( ServiceMBean . STOPPED ,    ServiceMBean . STARTING ,     (  ( getName (  )  )     +     \"    starting \"  )  ,    null )  ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Starting    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "try    {", "startService (  )  ;", "}    catch    ( Exception   e )     {", "state    =    ServiceMBean . FAILED ;", "sendStateChangeNotification ( ServiceMBean . STARTING ,    ServiceMBean . FAILED ,     (  ( getName (  )  )     +     \"    failed \"  )  ,    e )  ;", "log . warn ( ServiceMBeanLogger . ROOT _ LOGGER . startingFailed ( jbossInternalDescription (  )  )  ,    e )  ;", "throw   e ;", "}", "state    =    ServiceMBean . STARTED ;", "sendStateChangeNotification ( ServiceMBean . STARTING ,    ServiceMBean . STARTED ,     (  ( getName (  )  )     +     \"    started \"  )  ,    null )  ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Started    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "if    ( stopIgnored )     {", "stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["jbossInternalStart"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state )     !  =     ( ServiceMBean . STARTED )  )     {", "stopIgnored    =    true ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Ignoring   stop   call ;    current   state   is    \"     +     ( getStateString (  )  )  )  )  ;", "}", "return ;", "}", "stopIgnored    =    false ;", "state    =    ServiceMBean . STOPPING ;", "sendStateChangeNotification ( ServiceMBean . STARTED ,    ServiceMBean . STOPPING ,     (  ( getName (  )  )     +     \"    stopping \"  )  ,    null )  ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Stopping    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "try    {", "stopService (  )  ;", "}    catch    ( Throwable   e )     {", "state    =    ServiceMBean . FAILED ;", "sendStateChangeNotification ( ServiceMBean . STOPPING ,    ServiceMBean . FAILED ,     (  ( getName (  )  )     +     \"    failed \"  )  ,    e )  ;", "log . warn ( ServiceMBeanLogger . ROOT _ LOGGER . stoppingFailed ( jbossInternalDescription (  )  )  ,    e )  ;", "return ;", "}", "state    =    ServiceMBean . STOPPED ;", "sendStateChangeNotification ( ServiceMBean . STOPPING ,    ServiceMBean . STOPPED ,     (  ( getName (  )  )     +     \"    stopped \"  )  ,    null )  ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Stopped    \"     +     ( jbossInternalDescription (  )  )  )  )  ;", "}", "if    ( destroyIgnored )     {", "destroy (  )  ;", "}", "}", "METHOD_END"], "methodName": ["jbossInternalStop"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "return   sequenceNumber . incrementAndGet (  )  ;", "}", "METHOD_END"], "methodName": ["nextNotificationSequenceNumber"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state )     !  =     ( ServiceMBean . DESTROYED )  )     {", "unregisterIgnored    =    true ;", "if    ( log . isDebugEnabled (  )  )     {", "log . debug (  (  \" Ignoring   postDeregister   call ;    current   state   is    \"     +     ( getStateString (  )  )  )  )  ;", "}", "return ;", "}", "unregisterIgnored    =    false ;", "server    =    null ;", "serviceName    =    null ;", "state    =    ServiceMBean . UNREGISTERED ;", "}", "METHOD_END"], "methodName": ["postDeregister"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( registrationDone . booleanValue (  )  )  )     {", "log . debug (  \" Registration   is   not   done    -  >    stop \"  )  ;", "stop (  )  ;", "} else    {", "state    =     . REGISTERED ;", "if    ( createIgnored )     {", "try    {", "create (  )  ;", "}    catch    ( Exception   e )     {", "log . error ( Logger . ROOT _ LOGGER . postRegisterInitializationFailed (  )  ,    e )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["postRegister"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "this . server    =    server ;", "sName    =    getObjectName ( server ,    name )  ;", "return   sName ;", "}", "METHOD_END"], "methodName": ["preRegister"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "long   now    =    System . currentTimeMillis (  )  ;", "AttributeChangeNotification   stateChangeNotification    =    new   AttributeChangeNotification ( this ,    getNextNotificationSequenceNumber (  )  ,    now ,    msg ,     \" State \"  ,     \" Integer \"  ,    new   Integer ( oldState )  ,    new   Integer ( newState )  )  ;", "stateChangeNotification . setUserData ( t )  ;", "sendNotification ( stateChangeNotification )  ;", "}", "METHOD_END"], "methodName": ["sendStateChangeNotification"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "jbossInternalStart (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.system.ServiceMBeanSupport"}, {"methodBody": ["METHOD_START", "{", "try    {", "jbossInternalStop (  )  ;", "}    catch    ( Throwable   t )     {", "log . warn ( Logger . ROOT _ LOGGER . errorInStop ( jbossInternalDescription (  )  )  ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.system.ServiceMBeanSupport"}]