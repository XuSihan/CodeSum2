[{"methodBody": ["METHOD_START", "{", "return   executor ;", "}", "METHOD_END"], "methodName": ["getExecutorInjector"], "fileName": "org.jboss.as.service.AbstractService"}, {"methodBody": ["METHOD_START", "{", "return   mBeanInstance ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.service.AbstractService"}, {"methodBody": ["METHOD_START", "{", "if    ( method    !  =    null )     {", "try    {", "for    ( SetupAction   ion    :    setupActions )     {", "ion . setup ( Collections .  < String ,    Object > emptyMap (  )  )  ;", "}", "final   ClassLoader   old    =    WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( this . mbeanContextClassLoader )  ;", "try    {", "method . invoke ( mBeanInstance )  ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( old )  ;", "}", "}    finally    {", "ListIterator < SetupAction >    it    =    setupActions . listIterator ( setupActions . size (  )  )  ;", "while    ( it . hasPrevious (  )  )     {", "SetupAction   ion    =    it . previous (  )  ;", "ion . teardown ( Collections .  < String ,    Object > emptyMap (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["invokeLifecycleMethod"], "fileName": "org.jboss.as.service.AbstractService"}, {"methodBody": ["METHOD_START", "{", "if    ( SarLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "SarLogger . ROOT _ LOGGER . tracef (  \" Creating    :     % s \"  ,    context . getController (  )  . getName (  )  )  ;", "}", "final   Runnable   task    =    new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "try    {", "invokeLifecycleMethod ( createMethod ,    context )  ;", "if    (  ( componentInstantiator )     !  =    null )     {", "managedReference    =    componentInstantiator . initializeInstance ( getValue (  )  )  ;", "}", "context . complete (  )  ;", "}    catch    ( Throwable   e )     {", "context . failed ( new   StartException ( SarLogger . ROOT _ LOGGER . failedExecutingLegacyMethod (  \" create (  )  \"  )  ,    e )  )  ;", "}", "}", "}  ;", "try    {", "executor . getValue (  )  . submit ( task )  ;", "}    catch    ( RejectedExecutionException   e )     {", "task . run (  )  ;", "}    finally    {", "context . asynchronous (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.service.CreateDestroyService"}, {"methodBody": ["METHOD_START", "{", "if    ( SarLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "SarLogger . ROOT _ LOGGER . tracef (  \" ing   Service :     % s \"  ,    context . getController (  )  . getName (  )  )  ;", "}", "final   Runnable   task    =    new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "try    {", "if    (  ( managedReference )     !  =    null )     {", "managedReference . release (  )  ;", "}", "invokeLifecycleMethod ( destroyMethod ,    context )  ;", "}    catch    ( Exception   e )     {", "SarLogger . ROOT _ LOGGER . error ( SarLogger . ROOT _ LOGGER . failedExecutingLegacyMethod (  \" destroy (  )  \"  )  ,    e )  ;", "}    finally    {", "context . complete (  )  ;", "}", "}", "}  ;", "try    {", "executor . getValue (  )  . submit ( task )  ;", "}    catch    ( RejectedExecutionException   e )     {", "task . run (  )  ;", "}    finally    {", "context . asynchronous (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.service.CreateDestroyService"}, {"methodBody": ["METHOD_START", "{", "return   testClass . getResource ( path )  ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.jboss.as.service.JBossServiceXmlDescriptorParserTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( getResource ( testClass ,    path )  . toURI (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFile"], "fileName": "org.jboss.as.service.JBossServiceXmlDescriptorParserTestCase"}, {"methodBody": ["METHOD_START", "{", "parser    =    new   JBossServiceXmlDescriptorParser ( propertyReplacer )  ;", "xmlMapper    =    Factory . create (  )  ;", "xmlMapper . registerRootElement ( new   QName ( JBossServiceXmlDescriptorParser . NAMESPACE ,     \" server \"  )  ,    parser )  ;", "inputFactory    =    XMLInputFactory . newInstance (  )  ;", "}", "METHOD_END"], "methodName": ["setupParser"], "fileName": "org.jboss.as.service.JBossServiceXmlDescriptorParserTestCase"}, {"methodBody": ["METHOD_START", "{", "final   File   testXmlFile    =    getResourceFile ( JBossServiceXmlDescriptorParserTestCase . class ,     \"  / test / serviceXmlDeployment . jar / META - INF / jboss - service . xml \"  )  ;", "final   ParseResult < JBossServiceXmlDescriptor >    jBossServiceXmlDescriptorParseResult    =    new   ParseResult < JBossServiceXmlDescriptor >  (  )  ;", "InputStream   inputStream    =    null ;", "try    {", "inputStream    =    new   FileInputStream ( testXmlFile )  ;", "final   XMLStreamReader   reader    =    inputFactory . createXMLStreamReader ( inputStream )  ;", "xmlMapper . parseDocument ( jBossServiceXmlDescriptorParseResult ,    reader )  ;", "}    finally    {", "if    ( inputStream    !  =    null )", "inputStream . close (  )  ;", "}", "final   JBossServiceXmlDescriptor   xmlDescriptor    =    jBossServiceXmlDescriptorParseResult . getResult (  )  ;", "assertNotNull ( xmlDescriptor )  ;", "final   List < JBossServiceConfig >    serviceConfigs    =    xmlDescriptor . getServiceConfigs (  )  ;", "assertEquals (  3  ,    serviceConfigs . size (  )  )  ;", "for    ( JBossServiceConfig   jBossServiceConfig    :    serviceConfigs )     {", "assertEquals (  \" LegacyService \"  ,    jBossServiceConfig . getCode (  )  )  ;", "if    ( jBossServiceConfig . getName (  )  . equals (  \" jboss . test . service \"  )  )     {", "final   JBossServiceConstructorConfig   constructorConfig    =    jBossServiceConfig . getConstructorConfig (  )  ;", "assertNotNull ( constructorConfig )  ;", "final   JBossServiceConstructorConfig . Argument [  ]    arguments    =    constructorConfig . getArguments (  )  ;", "assertEquals (  1  ,    arguments . length )  ;", "assertEquals ( String . class . getName (  )  ,    arguments [  0  ]  . getType (  )  )  ;", "assertEquals (  \" Test   Value \"  ,    arguments [  0  ]  . getValue (  )  )  ;", "} else", "if    ( jBossServiceConfig . getName (  )  . equals (  \" jboss . test . service . second \"  )  )     {", "assertNull ( jBossServiceConfig . getConstructorConfig (  )  )  ;", "final   JBossServiceDependencyConfig [  ]    dependencyConfigs    =    jBossServiceConfig . getDependencyConfigs (  )  ;", "assertEquals (  1  ,    dependencyConfigs . length )  ;", "assertEquals (  \" jboss . test . service \"  ,    dependencyConfigs [  0  ]  . getDependencyName (  )  )  ;", "assertEquals (  \" other \"  ,    dependencyConfigs [  0  ]  . getOptionalAttributeName (  )  )  ;", "final   JBossServiceAttributeConfig [  ]    attributeConfigs    =    jBossServiceConfig . getAttributeConfigs (  )  ;", "assertEquals (  1  ,    attributeConfigs . length )  ;", "assertEquals (  \" somethingElse \"  ,    attributeConfigs [  0  ]  . getName (  )  )  ;", "assertNull ( attributeConfigs [  0  ]  . getInject (  )  )  ;", "final   ValueFactory   valueFactory    =    attributeConfigs [  0  ]  . getValueFactory (  )  ;", "assertNotNull ( valueFactory )  ;", "assertEquals (  \" jboss . test . service \"  ,    valueFactory . getBeanName (  )  )  ;", "assertEquals (  \" appendSomethingElse \"  ,    valueFactory . getMethodName (  )  )  ;", "final   ValueFactoryParameter [  ]    parameters    =    valueFactory . getParameters (  )  ;", "assertEquals (  1  ,    parameters . length )  ;", "assertEquals (  \" String \"  ,    parameters [  0  ]  . getType (  )  )  ;", "assertEquals (  \" more   value \"  ,    parameters [  0  ]  . getValue (  )  )  ;", "} else", "if    ( jBossServiceConfig . getName (  )  . equals (  \" jboss . test . service . third \"  )  )     {", "assertNull ( jBossServiceConfig . getConstructorConfig (  )  )  ;", "final   JBossServiceAttributeConfig [  ]    attributeConfigs    =    jBossServiceConfig . getAttributeConfigs (  )  ;", "assertEquals (  2  ,    attributeConfigs . length )  ;", "assertEquals (  \" other \"  ,    attributeConfigs [  0  ]  . getName (  )  )  ;", "assertNull ( attributeConfigs [  0  ]  . getValueFactory (  )  )  ;", "final   Inject   inject    =    attributeConfigs [  0  ]  . getInject (  )  ;", "assertNotNull ( inject )  ;", "assertEquals (  \" jboss . test . service . second \"  ,    inject . getBeanName (  )  )  ;", "assertEquals (  \" other \"  ,    inject . getPropertyName (  )  )  ;", "assertEquals (  \" somethingElse \"  ,    attributeConfigs [  1  ]  . getName (  )  )  ;", "assertNull ( attributeConfigs [  1  ]  . getValueFactory (  )  )  ;", "assertNull ( attributeConfigs [  1  ]  . getInject (  )  )  ;", "assertEquals (  \" Another   test   value \"  ,    attributeConfigs [  1  ]  . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testParse"], "fileName": "org.jboss.as.service.JBossServiceXmlDescriptorParserTestCase"}, {"methodBody": ["METHOD_START", "{", "return    (  ( somethingElse )     +     \"     -     \"  )     +    more ;", "}", "METHOD_END"], "methodName": ["appendSomethingElse"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "return   other ;", "}", "METHOD_END"], "methodName": ["getOther"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "return   somethingElse ;", "}", "METHOD_END"], "methodName": ["getSomethingElse"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "this . other    =    other ;", "}", "METHOD_END"], "methodName": ["setOther"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "this . somethingElse    =    somethingElse ;", "}", "METHOD_END"], "methodName": ["setSomethingElse"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "LegacyService . logger . info (  \" Started \"  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "LegacyService . logger . info (  \" Stopped \"  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.service.LegacyService"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "final   Name   injectedMBeanCreateDestroyName    =    NameFactory . newCreateDestroy ( attributeMBeanName )  ;", "createDestroyBuilder . addDependency ( injectedMBeanCreateDestroyName ,    injector )  ;", "final   Name   injectedMBeanStartStopName    =    NameFactory . newStartStop ( attributeMBeanName )  ;", "startStopBuilder . addDependency ( injectedMBeanStartStopName )  ;", "}", "METHOD_END"], "methodName": ["addAttribute"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "final   Name   injectedMBeanCreateDestroyName    =    NameFactory . newCreateDestroy ( dependencyMBeanName )  ;", "createDestroyBuilder . addDependency ( injectedMBeanCreateDestroyName )  ;", "final   Name   injectedMBeanStartStopName    =    NameFactory . newStartStop ( dependencyMBeanName )  ;", "startStopBuilder . addDependency ( injectedMBeanStartStopName )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "createDestroyBuilder . addInjectionValue ( injector ,    value )  ;", "}", "METHOD_END"], "methodName": ["addInjectionValue"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "if    ( installed )     {", "throw   new   IllegalStateExption (  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertState"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "return   createDestroy ;", "}", "METHOD_END"], "methodName": ["getCreateDestroyService"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "return   startStop ;", "}", "METHOD_END"], "methodName": ["getStartStopService"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "assertState (  )  ;", "createDestroyServiceBuilder . install (  )  ;", "startStopServiceBuilder . install (  )  ;", "final   MBeanRegistrationService < Object >    mbeanRegistrationService    =    new   MBeanRegistrationService < Object >  ( mBeanName ,    setupActions )  ;", "target . addService ( SERVICE _ NAME . append ( mBeanName )  ,    mbeanRegistrationService )  . addDependency ( mbeanServerServiceName ,    er . class ,    mbeanRegistrationService . geterInjector (  )  )  . addDependency ( startStopServiceName ,    Object . class ,    mbeanRegistrationService . getValueInjector (  )  )  . install (  )  ;", "installed    =    true ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.jboss.as.service.MBeanServices"}, {"methodBody": ["METHOD_START", "{", "return   NullInjector . SINGLETON ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.service.NullInjector"}, {"methodBody": ["METHOD_START", "{", "if    ( attributeConfigs    !  =    null )     {", "final   Service < Object >    createDestroyService    =    mBeanServices . getCreateDestroyService (  )  ;", "for    ( final   JBossServiceAttributeConfig   attributeConfig    :    attributeConfigs )     {", "final   String   propertyName    =    attributeConfig . getName (  )  ;", "final   JBossServiceAttributeConfig . Inject   injectConfig    =    attributeConfig . getInject (  )  ;", "final   JBossServiceAttributeConfig . ValueFactory   valueFactoryConfig    =    attributeConfig . getValueFactory (  )  ;", "if    ( injectConfig    !  =    null )     {", "final   Value <  ?  >    value    =     . getValue ( injectConfig )  ;", "final   Injector < Object >    injector    =     . getPropertyInjector ( propertyName ,    mBeanClassHierarchy ,    createDestroyService ,    value )  ;", "mBeanServices . addAttribute ( injectConfig . getBeanName (  )  ,    injector )  ;", "} else", "if    ( valueFactoryConfig    !  =    null )     {", "final   Value <  ?  >    value    =     . getValue ( valueFactoryConfig ,    classLoader )  ;", "final   Injector < Object >    injector    =     . getPropertyInjector ( propertyName ,    mBeanClassHierarchy ,    createDestroyService ,    value )  ;", "mBeanServices . addAttribute ( valueFactoryConfig . getBeanName (  )  ,    injector )  ;", "} else    {", "final   Value <  ?  >    value    =     . getValue ( attributeConfig ,    mBeanClassHierarchy )  ;", "final   Injector < Object >    injector    =     . getPropertyInjector ( propertyName ,    mBeanClassHierarchy ,    createDestroyService ,    injectedValue (  )  )  ;", "mBeanServices . addInjectionValue ( injector ,    value )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addAttributes"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyConfigs    !  =    null )     {", "final   Service < Object >    createDestroyService    =    mBeanServices . getCreateDestroyService (  )  ;", "for    ( final   JBossServiceDependencyConfig   dependencyConfig    :    dependencyConfigs )     {", "final   String   optionalAttributeName    =    dependencyConfig . getOptionalAttributeName (  )  ;", "if    ( optionalAttributeName    !  =    null )     {", "final   Injector < Object >    injector    =     . getOptionalAttributeInjector ( optionalAttributeName ,    mBeanClassHierarchy ,    createDestroyService )  ;", "final   ObjectName   dependencyObjectName    =    createDependencyObjectName ( dependencyConfig . getDependencyName (  )  )  ;", "final   ImmediateValue < ObjectName >    dependencyNameValue    =    new   ImmediateValue < ObjectName >  ( dependencyObjectName )  ;", "mBeanServices . addInjectionValue ( injector ,    dependencyNameValue )  ;", "}", "mBeanServices . addDependency ( dependencyConfig . getDependencyName (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDependencies"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyListConfigs    !  =    null )     {", "final   Service < Object >    createDestroyService    =    mBeanServices . getCreateDestroyService (  )  ;", "for    ( final   JBossServiceDependencyListConfig   dependencyListConfig    :    dependencyListConfigs )     {", "final   List < ObjectName >    dependencyObjectNames    =    new   ArrayList < ObjectName >  ( dependencyListConfig . getDependencyConfigs (  )  . length )  ;", "for    ( final   JBossServiceDependencyConfig   dependencyConfig    :    dependencyListConfig . getDependencyConfigs (  )  )     {", "final   String   dependencyName    =    dependencyConfig . getDependencyName (  )  ;", "mBeanServices . addDependency ( dependencyName )  ;", "final   ObjectName   dependencyObjectName    =    createDependencyObjectName ( dependencyName )  ;", "dependencyObjectNames . add ( dependencyObjectName )  ;", "}", "final   String   optionalAttributeName    =    dependencyListConfig . getOptionalAttributeName (  )  ;", "if    ( optionalAttributeName    !  =    null )     {", "final   Injector < Object >    injector    =     . getOptionalAttributeInjector ( optionalAttributeName ,    mBeanClassHierarchy ,    createDestroyService )  ;", "final   ImmediateValue < List < ObjectName >  >    dependencyNamesValue    =    new   ImmediateValue < List < ObjectName >  >  ( dependencyObjectNames )  ;", "mBeanServices . addInjectionValue ( injector ,    dependencyNamesValue )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addDependencyLists"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   mBeanClassName    =    mBeanConfig . getCode (  )  ;", "final   List < ClassReflectionIndex >    mBeanClassHierarchy    =    ReflectionUtils . getClassHierarchy ( mBeanClassName ,    index ,    classLoader )  ;", "final   Object   mBeanInstance    =     . newInstance ( mBeanConfig ,    mBeanClassHierarchy ,    classLoader )  ;", "final   String   mBeanName    =    mBeanConfig . getName (  )  ;", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   MBeanServices   mBeanServices    =    new   MBeanServices ( mBeanName ,    mBeanInstance ,    mBeanClassHierarchy ,    target ,    componentInstantiator ,    deploymentUnit . getAttachmentList ( WEB _ SETUP _ ACTIONS )  ,    classLoader ,    mbeanServerServiceName )  ;", "final   JBossServiceDependencyConfig [  ]    dependencyConfigs    =    mBeanConfig . getDependencyConfigs (  )  ;", "addDependencies ( dependencyConfigs ,    mBeanClassHierarchy ,    mBeanServices )  ;", "final   JBossServiceDependencyListConfig [  ]    dependencyListConfigs    =    mBeanConfig . getDependencyConfigLists (  )  ;", "addDependencyLists ( dependencyListConfigs ,    mBeanClassHierarchy ,    mBeanServices )  ;", "final   JBossServiceAttributeConfig [  ]    attributeConfigs    =    mBeanConfig . getAttributeConfigs (  )  ;", "addAttributes ( attributeConfigs ,    mBeanClassHierarchy ,    mBeanServices ,    classLoader )  ;", "mBeanServices . install (  )  ;", "}", "METHOD_END"], "methodName": ["addServices"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   ObjectName ( dependencyName )  ;", "}    catch    ( MalformedObjectNameException   exception )     {", "throw   SarLogger . ROOT _ LOGGER . malformedendencyName ( exception ,    dependencyName )  ;", "}", "}", "METHOD_END"], "methodName": ["createDependencyObjectName"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "return   ParsedServiceDeploymentProcessor . getPropertyInjector ( attributeName ,    mBeanClassHierarchy ,    service ,    Values . injectedValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["getOptionalAttributeInjector"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Method   setterMethod    =    ReflectionUtils . getSetter ( mBeanClassHierarchy ,    propertyName )  ;", "return   new   msc . inject . MethodInjector < Object >  ( setterMethod ,    service ,    Values . nullValue (  )  ,    Collections . singletonList ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getPropertyInjector"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   propertyName    =    injectConfig . getPropertyName (  )  ;", "Value <  ?  >    valueToInject    =    Values . injectedValue (  )  ;", "if    ( propertyName    !  =    null )     {", "final   Value < Method >    methodValue    =    new   InjectedBeanMethodValue ( Values . injectedValue (  )  ,    new   InjectedBeanMethodValue . MethodFinder (  )     {", "@ Override", "public   Method   find ( Class <  ?  >    clazz )     {", "return   ReflectionUtils . getGetter ( clazz ,    propertyName )  ;", "}", "}  )  ;", "valueToInject    =    cached ( new   msc . value . MethodValue < Object >  ( methodValue ,    valueToInject ,    Values .  < Object > emptyList (  )  )  )  ;", "}", "return   valueToInject ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   methodName    =    valueFactory . getMethodName (  )  ;", "final   JBossServiceAttributeConfig . ValueFactoryParameter [  ]    parameters    =    valueFactory . getParameters (  )  ;", "final   List < Class <  ?  >  >    paramTypes    =    new   ArrayList < Class <  ?  >  >  ( parameters . length )  ;", "final   List < Value <  ?  >  >    paramValues    =    new   ArrayList < Value <  ?  >  >  ( parameters . length )  ;", "for    ( JBossServiceAttributeConfig . ValueFactoryParameter   parameter    :    parameters )     {", "final   Class <  ?  >    attributeTypeValue    =    ReflectionUtils . getClass ( parameter . getType (  )  ,    classLoader )  ;", "paramTypes . add ( attributeTypeValue )  ;", "paramValues . add ( new   ImmediateValue < Object >  (  . newValue ( attributeTypeValue ,    parameter . getValue (  )  )  )  )  ;", "}", "final   Value < Method >    methodValue    =    new   InjectedBeanMethodValue ( Values . injectedValue (  )  ,    new   InjectedBeanMethodValue . MethodFinder (  )     {", "@ Override", "public   Method   find ( Class <  ?  >    clazz )     {", "return   ReflectionUtils . getMethod ( clazz ,    methodName ,    paramTypes . toArray ( new   Class <  ?  >  [  0  ]  )  )  ;", "}", "}  )  ;", "return   cached ( new   MethodValue < Object >  ( methodValue ,    Values . injectedValue (  )  ,    paramValues )  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   String   attributeName    =    attributeConfig . getName (  )  ;", "final   Method   setterMethod    =    ReflectionUtils . getSetter ( mBeanClassHierarchy ,    attributeName )  ;", "final   Class <  ?  >    setterType    =    setterMethod . getParameterTypes (  )  [  0  ]  ;", "return   new   ImmediateValue < Object >  (  . newValue ( setterType ,    attributeConfig . getValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ClassLoader   oldTCCL    =    WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( deploymentClassLoader )  ;", "try    {", "final   JBossServiceConstructorConfig   constructorConfig    =    serviceConfig . getConstructorConfig (  )  ;", "final   int   paramCount    =     ( constructorConfig    !  =    null )     ?    constructorConfig . getArguments (  )  . length    :     0  ;", "final   Class <  ?  >  [  ]    types    =    new   Class <  ?  >  [ paramCount ]  ;", "final   Object [  ]    params    =    new   Object [ paramCount ]  ;", "if    ( constructorConfig    !  =    null )     {", "final   JBossServiceConstructorConfig . Argument [  ]    arguments    =    constructorConfig . getArguments (  )  ;", "for    ( int   i    =     0  ;    i    <    paramCount ;    i +  +  )     {", "final   JBossServiceConstructorConfig . Argument   argument    =    arguments [ i ]  ;", "types [ i ]     =    ReflectionUtils . getClass ( argument . getType (  )  ,    deploymentClassLoader )  ;", "params [ i ]     =     . newValue ( ReflectionUtils . getClass ( argument . getType (  )  ,    deploymentClassLoader )  ,    argument . getValue (  )  )  ;", "}", "}", "final   Constructor <  ?  >    constructor    =    mBeanClassHierarchy . get (  0  )  . getConstructor ( types )  ;", "if    ( constructor    =  =    null )     {", "throw   SarLogger . ROOT _ LOGGER . defaultConstructorNotFound ( mBeanClassHierarchy . get (  0  )  . getIndexedClass (  )  )  ;", "}", "final   Object   mBeanInstance    =    ReflectionUtils . newInstance ( constructor ,    params )  ;", "return   mBeanInstance ;", "}    finally    {", "WildFlySecurityManager . setCurrentContextClassLoaderPrivileged ( oldTCCL )  ;", "}", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   PropertyEditor   editor    =    PropertyEditorFinder . getInstance (  )  . find ( type )  ;", "if    ( editor    =  =    null )     {", "SarLogger . ROOT _ LOGGER . propertyNotFound ( type )  ;", "return   null ;", "}", "editor . setAsText ( value )  ;", "return   editor . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["newValue"], "fileName": "org.jboss.as.service.ParsedServiceDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Class . forName ( className ,    false ,    classLoader )  ;", "}    catch    ( final   ClassNotFoundExcep   e )     {", "throw   SarLogger . ROOT _ LOGGER . classNotFound ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getClass"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "final   List < ClassReflectionIndex >    retVal    =    new   LinkedList < ClassReflectionIndex >  (  )  ;", "Class <  ?  >    temp    =     . getClass ( className ,    classLoader )  ;", "while    ( temp    !  =    null )     {", "retVal . add ( index . getClassIndex ( temp )  )  ;", "temp    =    temp . getSuperclass (  )  ;", "}", "return   Collections . unmodifiableList ( retVal )  ;", "}", "METHOD_END"], "methodName": ["getClassHierarchy"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "final   String   getterName    =     (  \" get \"     +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "final   String   iserName    =     (  \" is \"     +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "try    {", "return   clazz . getMethod ( getterName ,    new   Class [  ]  {        }  )  ;", "}    catch    ( NoSuchMethodExcep   e )     {", "}", "try    {", "return   clazz . getMethod ( iserName ,    new   Class [  ]  {        }  )  ;", "}    catch    ( NoSuchMethodExcep   e )     {", "final   String   className    =    clazz . getName (  )  ;", "throw   SarLogger . ROOT _ LOGGER . propertyMethodNotFound (  \" Get \"  ,    propertyName ,    className )  ;", "}", "}", "METHOD_END"], "methodName": ["getGetter"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "final   String   getterName    =     (  \" get \"     +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "final   String   iserName    =     (  \" is \"     +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "for    ( final   ClassIndex   classIndex    :    classHierarchy )     {", "final   Iterator < Method >    methods    =    classIndex . getMethods (  )  . iterator (  )  ;", "Method   method    =    null ;", "String   methodName    =    null ;", "while    ( methods . hasNext (  )  )     {", "method    =    methods . next (  )  ;", "methodName    =    method . getName (  )  ;", "if    (  (  ( getterName . equals ( methodName )  )     |  |     ( iserName . equals ( methodName )  )  )     &  &     (  ( method . getParameterTypes (  )  . length )     =  =     0  )  )     {", "return   method ;", "}", "}", "}", "final   String   className    =    classHierarchy . get (  0  )  . getIndexedClass (  )  . getName (  )  ;", "throw   SarLogger . ROOT _ LOGGER . propertyMethodNotFound (  \" Get \"  ,    propertyName ,    className )  ;", "}", "METHOD_END"], "methodName": ["getGetter"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   clazz . getMethod ( methodName ,    argumentList )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   SarLogger . ROOT _ LOGGER . methodNotFound ( methodName ,     . parameterList ( argumentList )  ,    clazz . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( final   ClassReflectionIndex   classIndex    :    classHierarchy )     {", "final   Collection < Method >    methods    =    classIndex . getMethods ( methodName ,    types )  ;", "if    (  ( methods . size (  )  )     =  =     1  )     {", "return   methods . iterator (  )  . next (  )  ;", "}", "}", "if    ( fail )     {", "final   String   className    =    classHierarchy . get (  0  )  . getIndexedClass (  )  . getName (  )  ;", "throw   SarLogger . ROOT _ LOGGER . methodNotFound ( methodName ,     . parameterList ( types )  ,    className )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "final   String   setterName    =     (  \" set \"     +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "for    ( final   ClassIndex   classIndex    :    classHierarchy )     {", "final   Iterator < Method >    methods    =    classIndex . getMethods (  )  . iterator (  )  ;", "Method   method    =    null ;", "String   methodName    =    null ;", "while    ( methods . hasNext (  )  )     {", "method    =    methods . next (  )  ;", "methodName    =    method . getName (  )  ;", "if    (  ( setterName . equals ( methodName )  )     &  &     (  ( method . getParameterTypes (  )  . length )     =  =     1  )  )     {", "return   method ;", "}", "}", "}", "final   String   className    =    classHierarchy . get (  0  )  . getIndexedClass (  )  . getName (  )  ;", "throw   SarLogger . ROOT _ LOGGER . propertyMethodNotFound (  \" Set \"  ,    propertyName ,    className )  ;", "}", "METHOD_END"], "methodName": ["getSetter"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   constructor . newInstance ( args )  ;", "}    catch    ( Excep   e )     {", "throw   SarLogger . ROOT _ LOGGER . classNotInstantiated ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   result    =    new   StringBuilder (  )  ;", "if    (  ( parameterTypes    !  =    null )     &  &     (  ( parameterTypes . length )     >     0  )  )     {", "result . append ( parameterTypes [  0  ]  )  ;", "for    ( int   i    =     1  ;    i    <     ( parameterTypes . length )  ;    i +  +  )     {", "result . append (  \"  ,     \"  )  . append ( parameterTypes [ i ]  )  ;", "}", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["parameterList"], "fileName": "org.jboss.as.service.ReflectionUtils"}, {"methodBody": ["METHOD_START", "{", "ReflectionUtils . getGetter ( ReflectionUtilsTest . Foo . class ,     \" c \"  )  ;", "fail (  \" Should   have   thrown   exception    -    getC   is   not   a   getter \"  )  ;", "}", "METHOD_END"], "methodName": ["doNotFindGetterWithArgument"], "fileName": "org.jboss.as.service.ReflectionUtilsTest"}, {"methodBody": ["METHOD_START", "{", "final   Method   getter    =    ReflectionUtils . getGetter ( ReflectionUtilsTest . Foo . class ,     \" b \"  )  ;", "assertNotNull ( getter )  ;", "assertEquals (  \" isB \"  ,    getter . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["findBooleanGetter"], "fileName": "org.jboss.as.service.ReflectionUtilsTest"}, {"methodBody": ["METHOD_START", "{", "final   Method   getter    =    ReflectionUtils . getGetter ( ReflectionUtilsTest . Foo . class ,     \" a \"  )  ;", "assertNotNull ( getter )  ;", "assertEquals (  \" getA \"  ,    getter . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["findNonBooleanGetter"], "fileName": "org.jboss.as.service.ReflectionUtilsTest"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   subsystem    =    new   ModelNode (  )  ;", "subsystem . get ( OP )  . set ( ADD )  ;", "subsystem . get ( OP _ ADDR )  . add ( SUBSYSTEM ,     . SUBSYSTEM _ NAME )  ;", "return   subsystem ;", "}", "METHOD_END"], "methodName": ["createAddOperation"], "fileName": "org.jboss.as.service.SarExtension"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "final   ModuleSpecification   moduleSpecification    =    deploymentUnit . getAttachment ( MODULE _ SPECIFICATION )  ;", "final   JBossServiceXmlDescriptor   serviceXmlDescriptor    =    deploymentUnit . getAttachment ( JBossServiceXmlDescriptor . ATTACHMENT _ KEY )  ;", "if    ( serviceXmlDescriptor    =  =    null )     {", "return ;", "}", "moduleSpecification . addSystemDependency ( new   ModuleDependency ( Module . getBootModuleLoader (  )  ,     . JBOSS _ MODULES _ ID ,    false ,    false ,    false ,    false )  )  ;", "moduleSpecification . addSystemDependency ( new   ModuleDependency ( Module . getBootModuleLoader (  )  ,     . JBOSS _ AS _ SYSTEM _ JMX _ ID ,    true ,    false ,    false ,    false )  )  ;", "moduleSpecification . addSystemDependency ( new   ModuleDependency ( Module . getBootModuleLoader (  )  ,     . PROPERTIES _ EDITOR _ MODULE _ ID ,    false ,    false ,    true ,    false )  )  ;", "moduleSpecification . addPermissionFactory (  . REGISTER _ PERMISSION _ FACTORY )  ;", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.service.SarModuleDependencyProcessor"}, {"methodBody": ["METHOD_START", "{", "final   DeploymentUnit   deploymentUnit    =    phaseContext . getDeploymentUnit (  )  ;", "if    (  ( deploymentUnit . getParent (  )  )     !  =    null )     {", "return ;", "}", "final   List < ResourceRoot >    resourceRoots    =    deploymentUnit . getAttachmentList ( RESOURCE _ ROOTS )  ;", "for    ( ResourceRoot   resourceRoot    :    resourceRoots )     {", "final   VirtualFile   rootFile    =    resourceRoot . getRoot (  )  ;", "if    (  !  ( Marker . is ( resourceRoot )  )  )     {", "final   VirtualFile   sarDescriptor    =    rootFile . getChild ( ServiceDeploymentParsingProcessor . SERVICE _ DESCRIPTOR _ PATH )  ;", "if    ( sarDescriptor . exists (  )  )     {", "Marker . mark ( resourceRoot )  ;", "ModuleRootMarker . mark ( resourceRoot )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.service.SarSubDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "context . addStep ( new   AbstractDeploymentChainStep (  )     {", "public   void   execute ( DeploymentProcessorTarget   processorTarget )     {", "SName   jmxCapability    =    context . getCapabilitySName ( SarExtension . JMX _ CAPABILITY ,    MBeanServer . class )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ SAR _ SUB _ DEPLOY _ CHECK ,    new   SarSubDeploymentProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    STRUCTURE ,    STRUCTURE _ SAR ,    new   SarStructureProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    DEPENDENCIES ,    DEPENDENCIES _ SAR _ MODULE ,    new   SarModuleDependencyProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    PARSE ,    PARSE _ SERVICE _ DEPLOYMENT ,    new   SDeploymentParsingProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    POST _ MODULE ,    POST _ MODULE _ SAR _ SERVICE _ COMPONENT ,    new   SComponentProcessor (  )  )  ;", "processorTarget . addDeploymentProcessor ( SarExtension . SUBSYSTEM _ NAME ,    INSTALL ,    INSTALL _ SERVICE _ DEPLOYMENT ,    new   ParsedSDeploymentProcessor ( jmxCapability )  )  ;", "}", "}  ,    RUNTIME )  ;", "}", "METHOD_END"], "methodName": ["performBoottime"], "fileName": "org.jboss.as.service.SarSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "model . setEmptyObject (  )  ;", "}", "METHOD_END"], "methodName": ["populateModel"], "fileName": "org.jboss.as.service.SarSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   VirtualFile   deploymentRoot    =    phaseContext . getDeploymentUnit (  )  . getAttachment ( DEPLOYMENT _ ROOT )  . getRoot (  )  ;", "if    (  ( deploymentRoot    =  =    null )     |  |     (  !  ( deploymentRoot . exists (  )  )  )  )", "return ;", "VirtualFile   serviceXmlFile    =    null ;", "if    ( deploymentRoot . isDirectory (  )  )     {", "serviceXmlFile    =    deploymentRoot . getChild (  . SERVICE _ DESCRIPTOR _ PATH )  ;", "} else", "if    ( deploymentRoot . getName (  )  . toLowerCase ( ENGLISH )  . endsWith (  . SERVICE _ DESCRIPTOR _ SUFFIX )  )     {", "serviceXmlFile    =    deploymentRoot ;", "}", "if    (  ( serviceXmlFile    =  =    null )     |  |     (  !  ( serviceXmlFile . exists (  )  )  )  )", "return ;", "final   XMLMapper   xmlMapper    =    Factory . create (  )  ;", "final   JBossServiceXmlDescriptorParser   jBossServiceXmlDescriptorParser    =    new   JBossServiceXmlDescriptorParser ( JBossDescriptorPropertyReplacement . propertyReplacer ( phaseContext . getDeploymentUnit (  )  )  )  ;", "xmlMapper . registerRootElement ( new   QName (  \" urn : jboss : service :  7  .  0  \"  ,     \" server \"  )  ,    jBossServiceXmlDescriptorParser )  ;", "xmlMapper . registerRootElement ( new   QName ( null ,     \" server \"  )  ,    jBossServiceXmlDescriptorParser )  ;", "InputStream   xmlStream    =    null ;", "try    {", "xmlStream    =    serviceXmlFile . openStream (  )  ;", "final   XMLStreamReader   reader    =    inputFactory . createXMLStreamReader ( xmlStream )  ;", "final   ParseResult < JBossServiceXmlDescriptor >    result    =    new   ParseResult < JBossServiceXmlDescriptor >  (  )  ;", "xmlMapper . parseDocument ( result ,    reader )  ;", "final   JBossServiceXmlDescriptor   xmlDescriptor    =    result . getResult (  )  ;", "if    ( xmlDescriptor    !  =    null )", "phaseContext . getDeploymentUnit (  )  . putAttachment ( JBossServiceXmlDescriptor . ATTACHMENT _ KEY ,    xmlDescriptor )  ;", "else", "throw   SarLogger . ROOT _ LOGGER . failedXmlParsing ( serviceXmlFile )  ;", "}    catch    ( Exception   e )     {", "throw   SarLogger . ROOT _ LOGGER . failedXmlParsing ( e ,    serviceXmlFile )  ;", "}    finally    {", "VFSUtils . safeClose ( xmlStream )  ;", "}", "}", "METHOD_END"], "methodName": ["deploy"], "fileName": "org.jboss.as.service.ServiceDeploymentParsingProcessor"}, {"methodBody": ["METHOD_START", "{", "return   ServiceNameFactory . newServiceName ( mBeanName )  . append ( ServiceNameFactory . CREATE _ SUFFIX )  ;", "}", "METHOD_END"], "methodName": ["newCreateDestroy"], "fileName": "org.jboss.as.service.ServiceNameFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "throw   SarLogger . ROOT _ LOGGER . nullVar (  \" name \"  )  ;", "}", "return    . MBEAN _ SERVICE _ NAME _ BASE . append ( name )  ;", "}", "METHOD_END"], "methodName": ["newServiceName"], "fileName": "org.jboss.as.service.ServiceNameFactory"}, {"methodBody": ["METHOD_START", "{", "return   ServiceNameFactory . newServiceName ( mBeanName )  . append ( ServiceNameFactory . START _ SUFFIX )  ;", "}", "METHOD_END"], "methodName": ["newStartStop"], "fileName": "org.jboss.as.service.ServiceNameFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( SarLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "SarLogger . ROOT _ LOGGER . tracef (  \" Starting    :     % s \"  ,    context . getController (  )  . getName (  )  )  ;", "}", "final   Runnable   task    =    new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "try    {", "invokeLifecycleMethod ( startMethod ,    context )  ;", "context . complete (  )  ;", "}    catch    ( Throwable   e )     {", "context . failed ( new   StartException ( SarLogger . ROOT _ LOGGER . failedExecutingLegacyMethod (  \" start (  )  \"  )  ,    e )  )  ;", "}", "}", "}  ;", "try    {", "executor . getValue (  )  . submit ( task )  ;", "}    catch    ( RejectedExecutionException   e )     {", "task . run (  )  ;", "}    finally    {", "context . asynchronous (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.service.StartStopService"}, {"methodBody": ["METHOD_START", "{", "if    ( SarLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "SarLogger . ROOT _ LOGGER . tracef (  \" Stopping    :     % s \"  ,    context . getController (  )  . getName (  )  )  ;", "}", "final   Runnable   task    =    new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "try    {", "invokeLifecycleMethod ( stopMethod ,    context )  ;", "}    catch    ( Exception   e )     {", "SarLogger . ROOT _ LOGGER . error ( SarLogger . ROOT _ LOGGER . failedExecutingLegacyMethod (  \" stop (  )  \"  )  ,    e )  ;", "}    finally    {", "context . complete (  )  ;", "}", "}", "}  ;", "try    {", "executor . getValue (  )  . submit ( task )  ;", "}    catch    ( RejectedExecutionException   e )     {", "task . run (  )  ;", "}    finally    {", "context . asynchronous (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.service.StartStopService"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isIntercepted"], "fileName": "org.jboss.as.service.component.ServiceComponentDescription"}, {"methodBody": ["METHOD_START", "{", "return   componentStartServiceName ;", "}", "METHOD_END"], "methodName": ["getComponentStartServiceName"], "fileName": "org.jboss.as.service.component.ServiceComponentInstantiator"}, {"methodBody": ["METHOD_START", "{", "setupComponent (  )  ;", "return   new   ManagedReference (  )     {", "private   final   ce   componentInstance    =    component . createInstance ( instance )  ;", "private   boolean   destroyed ;", "@ Override", "public   synchronized   void   release (  )     {", "if    (  !  ( destroyed )  )     {", "componentInstance . destroy (  )  ;", "destroyed    =    true ;", "}", "}", "@ Override", "public   Object   getInstance (  )     {", "return   componentInstance . getInstance (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["initializeInstance"], "fileName": "org.jboss.as.service.component.ServiceComponentInstantiator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( component )     =  =    null )     {", "component    =     (  ( ServiceController < BasicComponent >  )     ( serviceRegistry . getRequiredService ( componentStartServiceName )  )  )  . getValue (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupComponent"], "fileName": "org.jboss.as.service.component.ServiceComponentInstantiator"}, {"methodBody": ["METHOD_START", "{", "return   inject ;", "}", "METHOD_END"], "methodName": ["getInject"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   valueFactory ;", "}", "METHOD_END"], "methodName": ["getValueFactory"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   replace ;", "}", "METHOD_END"], "methodName": ["isReplace"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   trim ;", "}", "METHOD_END"], "methodName": ["isTrim"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . inject    =    inject ;", "}", "METHOD_END"], "methodName": ["setInject"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . replace    =    replace ;", "}", "METHOD_END"], "methodName": ["setReplace"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . trim    =    trim ;", "}", "METHOD_END"], "methodName": ["setTrim"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "this . valueFactory    =    valueFactory ;", "}", "METHOD_END"], "methodName": ["setValueFactory"], "fileName": "org.jboss.as.service.descriptor.JBossServiceAttributeConfig"}, {"methodBody": ["METHOD_START", "{", "return   aliases ;", "}", "METHOD_END"], "methodName": ["getAliases"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   annotations ;", "}", "METHOD_END"], "methodName": ["getAnnotations"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   attributeConfigs ;", "}", "METHOD_END"], "methodName": ["getAttributeConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["getCode"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   constructorConfig ;", "}", "METHOD_END"], "methodName": ["getConstructorConfig"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   dependencyConfigLists ;", "}", "METHOD_END"], "methodName": ["getDependencyConfigLists"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   dependencyConfigs ;", "}", "METHOD_END"], "methodName": ["getDependencyConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . aliases    =    aliases ;", "}", "METHOD_END"], "methodName": ["setAliases"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . annotations    =    annotations ;", "}", "METHOD_END"], "methodName": ["setAnnotations"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . attributeConfigs    =    attributeConfigs ;", "}", "METHOD_END"], "methodName": ["setAttributeConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . code    =    code ;", "}", "METHOD_END"], "methodName": ["setCode"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . constructorConfig    =    constructorConfig ;", "}", "METHOD_END"], "methodName": ["setConstructorConfig"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyConfigLists    =    dependencyConfigLists ;", "}", "METHOD_END"], "methodName": ["setDependencyConfigLists"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyConfigs    =    dependencyConfigs ;", "}", "METHOD_END"], "methodName": ["setDependencyConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConfig"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "this . arguments    =    arguments ;", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "org.jboss.as.service.descriptor.JBossServiceConstructorConfig"}, {"methodBody": ["METHOD_START", "{", "return   dependencyName ;", "}", "METHOD_END"], "methodName": ["getDependencyName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "return   optionalAttributeName ;", "}", "METHOD_END"], "methodName": ["getOptionalAttributeName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "return   proxyType ;", "}", "METHOD_END"], "methodName": ["getProxyType"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "return   serviceConfig ;", "}", "METHOD_END"], "methodName": ["getServiceConfig"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyName    =    dependencyName ;", "}", "METHOD_END"], "methodName": ["setDependencyName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "this . optionalAttributeName    =    optionalAttributeName ;", "}", "METHOD_END"], "methodName": ["setOptionalAttributeName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "this . proxyType    =    proxyType ;", "}", "METHOD_END"], "methodName": ["setProxyType"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "this . serviceConfig    =    serviceConfig ;", "}", "METHOD_END"], "methodName": ["setServiceConfig"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyConfig"}, {"methodBody": ["METHOD_START", "{", "return   dependencyConfigs ;", "}", "METHOD_END"], "methodName": ["getDependencyConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyListConfig"}, {"methodBody": ["METHOD_START", "{", "return   optionalAttributeName ;", "}", "METHOD_END"], "methodName": ["getOptionalAttributeName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyListConfig"}, {"methodBody": ["METHOD_START", "{", "this . dependencyConfigs    =    dependencyConfigs ;", "}", "METHOD_END"], "methodName": ["setDependencyConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyListConfig"}, {"methodBody": ["METHOD_START", "{", "this . optionalAttributeName    =    optionalAttributeName ;", "}", "METHOD_END"], "methodName": ["setOptionalAttributeName"], "fileName": "org.jboss.as.service.descriptor.JBossServiceDependencyListConfig"}, {"methodBody": ["METHOD_START", "{", "return   controllerMode ;", "}", "METHOD_END"], "methodName": ["getControllerMode"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   serviceConfigs ;", "}", "METHOD_END"], "methodName": ["getServiceConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . controllerMode    =    controllerMode ;", "}", "METHOD_END"], "methodName": ["setControllerMode"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . serviceConfigs    =    serviceConfigs ;", "}", "METHOD_END"], "methodName": ["setServiceConfigs"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptor"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   b    =    new   StringBuilder ( SarLogger . ROOT _ LOGGER . missingRequiredAttributes (  )  )  ;", "for    (  . Attribute   attribute    :    required )     {", "b . append (  '     '  )  . append ( attribute )  ;", "}", "return   new   XMLStreamException ( b . toString (  )  ,    location )  ;", "}", "METHOD_END"], "methodName": ["missingAttributes"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "String   type    =    null ;", "String   value    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . TYPE ,     . Attribute . VALUE )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   TYPE    :", "type    =    attributeValue ;", "break ;", "case   VALUE    :", "value    =    attributeValue ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "reader . discardRemainder (  )  ;", "return   new   JBossServiceConstructorConfig . Argument ( type ,    value )  ;", "}", "METHOD_END"], "methodName": ["parseArgument"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceAttributeConfig   attributeConfig    =    new   JBossServiceAttributeConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . NAME )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   NAME    :", "attributeConfig . setName ( attributeValue )  ;", "break ;", "case   TRIM    :", "attributeConfig . setTrim ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "case   REPLACE    :", "attributeConfig . setReplace ( Boolean . parseBoolean ( attributeValue )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "final   StringBuilder   valueBuilder    =    new   StringBuilder (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "attributeConfig . setValue ( propertyReplacer . replaceProperties ( valueBuilder . toString (  )  . trim (  )  )  )  ;", "return   attributeConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   INJECT    :", "attributeConfig . setInject ( parseInject ( reader )  )  ;", "break ;", "case   VALUE _ FACTORY    :", "attributeConfig . setValueFactory ( parseValueFactory ( reader )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "case   XMLStreamConstants . CHARACTERS    :", "valueBuilder . append ( reader . getText (  )  )  ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseAttribute"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceConstructorConfig   constructorConfig    =    new   JBossServiceConstructorConfig (  )  ;", "final   List < JBossServiceConstructorConfig . Argument >    arguments    =    new   ArrayList < JBossServiceConstructorConfig . Argument >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "constructorConfig . setArguments ( arguments . toArray ( new   JBossServiceConstructorConfig . Argument [ arguments . size (  )  ]  )  )  ;", "return   constructorConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   ARG    :", "arguments . add ( parseArgument ( reader )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseConstructor"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   nameBuilder    =    new   StringBuilder (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "dependencyConfig . setDependencyName ( nameBuilder . toString (  )  . trim (  )  )  ;", "return ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   MBEAN    :", "dependencyConfig . setServiceConfig ( parseMBean ( reader )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "case   XMLStreamConstants . CHARACTERS    :", "nameBuilder . append ( reader . getText (  )  )  ;", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["parseDependency"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceDependencyConfig   dependencyConfig    =    new   JBossServiceDependencyConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   OPTIONAL _ ATTRIBUTE _ NAME    :", "dependencyConfig . setOptionalAttributeName ( attributeValue )  ;", "break ;", "case   PROXY _ TYPE    :", "dependencyConfig . setProxyType ( attributeValue )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "parseDependency ( reader ,    dependencyConfig )  ;", "return   dependencyConfig ;", "}", "METHOD_END"], "methodName": ["parseDepends"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceDependencyListConfig   dependencyListConfig    =    new   JBossServiceDependencyListConfig (  )  ;", "final   List < JBossServiceDependencyConfig >    dependencyConfigs    =    new   ArrayList < JBossServiceDependencyConfig >  (  )  ;", "String   optionalAttributeName    =    null ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   OPTIONAL _ ATTRIBUTE _ NAME    :", "optionalAttributeName    =    attributeValue ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "dependencyListConfig . setOptionalAttributeName ( optionalAttributeName )  ;", "dependencyListConfig . setDependencyConfigs ( dependencyConfigs . toArray ( new   JBossServiceDependencyConfig [ dependencyConfigs . size (  )  ]  )  )  ;", "return   dependencyListConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   DEPENDS _ LIST _ ELEMENT    :", "final   JBossServiceDependencyConfig   dependencyConfig    =    new   JBossServiceDependencyConfig (  )  ;", "parseDependency ( reader ,    dependencyConfig )  ;", "dependencyConfigs . add ( dependencyConfig )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseDependsList"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceAttributeConfig . Inject   injectConfig    =    new   JBossServiceAttributeConfig . Inject (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . BEAN )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   BEAN    :", "injectConfig . setBeanName ( attributeValue )  ;", "break ;", "case   PROPERTY    :", "injectConfig . setPropertyName ( attributeValue )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "reader . discardRemainder (  )  ;", "return   injectConfig ;", "}", "METHOD_END"], "methodName": ["parseInject"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceConfig   serviceConfig    =    new   JBossServiceConfig (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . NAME ,     . Attribute . CODE )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   NAME    :", "serviceConfig . setName ( attributeValue )  ;", "break ;", "case   CODE    :", "serviceConfig . setCode ( attributeValue )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "final   List < JBossServiceDependencyConfig >    dependencyConfigs    =    new   ArrayList < JBossServiceDependencyConfig >  (  )  ;", "final   List < JBossServiceDependencyListConfig >    dependencyListConfigs    =    new   ArrayList < JBossServiceDependencyListConfig >  (  )  ;", "final   List < JBossServiceAttributeConfig >    attributes    =    new   ArrayList < JBossServiceAttributeConfig >  (  )  ;", "final   List < String >    aliases    =    new   ArrayList < String >  (  )  ;", "final   List < String >    annotations    =    new   ArrayList < String >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "serviceConfig . setDependencyConfigs ( dependencyConfigs . toArray ( new   JBossServiceDependencyConfig [ dependencyConfigs . size (  )  ]  )  )  ;", "serviceConfig . setDependencyConfigLists ( dependencyListConfigs . toArray ( new   JBossServiceDependencyListConfig [ dependencyListConfigs . size (  )  ]  )  )  ;", "serviceConfig . setAliases ( aliases . toArray ( new   String [ aliases . size (  )  ]  )  )  ;", "serviceConfig . setAnnotations ( annotations . toArray ( new   String [ annotations . size (  )  ]  )  )  ;", "serviceConfig . setAttributeConfigs ( attributes . toArray ( new   JBossServiceAttributeConfig [ attributes . size (  )  ]  )  )  ;", "return   serviceConfig ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   CONSTRUCTOR    :", "serviceConfig . setConstructorConfig ( parseConstructor ( reader )  )  ;", "break ;", "case   DEPENDS    :", "dependencyConfigs . add ( parseDepends ( reader )  )  ;", "break ;", "case   DEPENDS _ LIST    :", "dependencyListConfigs . add ( parseDependsList ( reader )  )  ;", "break ;", "case   ALIAS    :", "aliases . add ( parseTextElement ( reader )  )  ;", "break ;", "case   ANNOTATION    :", "annotations . add ( parseTextElement ( reader )  )  ;", "break ;", "case   XMLStreamConstants . ATTRIBUTE    :", "attributes . add ( parseAttribute ( reader )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseMBean"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   valueBuilder    =    new   StringBuilder (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   valueBuilder . toString (  )  . trim (  )  ;", "case   XMLStreamConstants . CHARACTERS    :", "valueBuilder . append ( reader . getText (  )  )  ;", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseTextElement"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceAttributeConfig . ValueFactory   valueFactory    =    new   JBossServiceAttributeConfig . ValueFactory (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . BEAN ,     . Attribute . METHOD )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   BEAN    :", "valueFactory . setBeanName ( attributeValue )  ;", "break ;", "case   METHOD    :", "valueFactory . setMethodName ( attributeValue )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "final   List < JBossServiceAttributeConfig . ValueFactoryParameter >    parameters    =    new   ArrayList < JBossServiceAttributeConfig . ValueFactoryParameter >  (  )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "valueFactory . setParameters ( parameters . toArray ( new   JBossServiceAttributeConfig . ValueFactoryParameter [ parameters . size (  )  ]  )  )  ;", "return   valueFactory ;", "case   XMLStreamConstants . START _ ELEMENT    :", "switch    (  . Namespace . of ( reader . getNamespaceURI (  )  )  )     {", "case   NONE    :", "case   SERVICE _  7  _  0     :", "{", "break ;", "}", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "switch    (  . Element . of ( reader . getLocalName (  )  )  )     {", "case   PARAMETER    :", "parameters . add ( parseValueFactoryParameter ( reader )  )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseValueFactory"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   JBossServiceAttributeConfig . ValueFactoryParameter   parameterConfig    =    new   JBossServiceAttributeConfig . ValueFactoryParameter (  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   Set <  . Attribute >    required    =    EnumSet . of (  . Attribute . CLASS )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "final    . Attribute   attribute    =     . Attribute . of ( reader . getAttributeName ( i )  )  ;", "required . remove ( attribute )  ;", "final   String   attributeValue    =    reader . getAttributeValue ( i )  ;", "switch    ( attribute )     {", "case   CLASS    :", "parameterConfig . setType ( attributeValue )  ;", "break ;", "default    :", "throw    . unexpectedContent ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw    . missingAttributes ( reader . getLocation (  )  ,    required )  ;", "}", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . next (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "return   parameterConfig ;", "case   XMLStreamConstants . CHARACTERS    :", "parameterConfig . setValue ( reader . getText (  )  )  ;", "break ;", "}", "}", "throw    . unexpectedContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseValueFactoryParameter"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "final   String   kind ;", "switch    ( reader . getEventType (  )  )     {", "case   XMLStreamConstants . ATTRIBUTE    :", "kind    =     \" attribute \"  ;", "break ;", "case   XMLStreamConstants . CDATA    :", "kind    =     \" cdata \"  ;", "break ;", "case   XMLStreamConstants . CHARACTERS    :", "kind    =     \" characters \"  ;", "break ;", "case   XMLStreamConstants . COMMENT    :", "kind    =     \" comment \"  ;", "break ;", "case   XMLStreamConstants . DTD    :", "kind    =     \" dtd \"  ;", "break ;", "case   XMLStreamConstants . END _ DOCUMENT    :", "kind    =     \" document   end \"  ;", "break ;", "case   XMLStreamConstants . END _ ELEMENT    :", "kind    =     \" element   end \"  ;", "break ;", "case   XMLStreamConstants . ENTITY _ DECLARATION    :", "kind    =     \" entity   decl \"  ;", "break ;", "case   XMLStreamConstants . ENTITY _ REFERENCE    :", "kind    =     \" entity   ref \"  ;", "break ;", "case   XMLStreamConstants . NAMESPACE    :", "kind    =     \" namespace \"  ;", "break ;", "case   XMLStreamConstants . NOTATION _ DECLARATION    :", "kind    =     \" notation   decl \"  ;", "break ;", "case   XMLStreamConstants . PROCESSING _ INSTRUCTION    :", "kind    =     \" processing   instruction \"  ;", "break ;", "case   XMLStreamConstants . SPACE    :", "kind    =     \" whitespace \"  ;", "break ;", "case   XMLStreamConstants . START _ DOCUMENT    :", "kind    =     \" document   start \"  ;", "break ;", "case   XMLStreamConstants . START _ ELEMENT    :", "kind    =     \" element   start \"  ;", "break ;", "default    :", "kind    =     \" unknown \"  ;", "break ;", "}", "return   new   XMLStreamException ( SarLogger . ROOT _ LOGGER . unexpectedContent ( kind ,    reader . getName (  )  ,    reader . getText (  )  )  ,    reader . getLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["unexpectedContent"], "fileName": "org.jboss.as.service.descriptor.JBossServiceXmlDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.jboss.as.service.descriptor.ParseResult"}, {"methodBody": ["METHOD_START", "{", "this . result    =    result ;", "}", "METHOD_END"], "methodName": ["setResult"], "fileName": "org.jboss.as.service.descriptor.ParseResult"}]