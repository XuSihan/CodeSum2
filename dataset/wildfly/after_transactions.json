[{"methodBody": ["METHOD_START", "{", "jtaPropertyManager . getJTAEnvironmentBean (  )  . setTransactionManagerClassName (  \" com . arjuna . ats . internal . jta . transaction . arjunacore . TransactionManagerImple \"  )  ;", "final   TransactionSynchronizationRegistry   tsr    =    new   TransactionSynchronizationRegistryWrapper ( new   TransactionSynchronizationRegistryImple (  )  )  ;", "TransactionManager   transactionManager    =    com . arjuna . ats . jta . TransactionManager . transactionManager (  )  ;", "transactionManager . begin (  )  ;", "tsr . registerInterposedSynchronization ( new   Synchronization (  )     {", "@ Override", "public   void   beforeCompletion (  )     {", "tsr . registerInterposedSynchronization ( new   Synchronization (  )     {", "@ Override", "public   void   beforeCompletion (  )     {", "innerSyncCalled    =    true ;", "}", "@ Override", "public   void   afterCompletion ( int   status )     {", "}", "}  )  ;", "}", "@ Override", "public   void   afterCompletion ( int   status )     {", "}", "}  )  ;", "transactionManager . commit (  )  ;", "assertTrue ( innerSyncCalled )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "org.jboss.as.txn.TestWildFlyTSR"}, {"methodBody": ["METHOD_START", "{", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "final   ModuleSpecification   moduleSpec    =    unit . getAttachment ( MODULE _ SPECIFICATION )  ;", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . JTS _ MODULE ,    false ,    false ,    true ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addJTSModuleDependencyToDeployment"], "fileName": "org.jboss.as.txn.deployment.TransactionDependenciesProcessor"}, {"methodBody": ["METHOD_START", "{", "final   ServiceName   userTransactionServiceName    =    contextServiceName . append (  \" UserTransaction \"  )  ;", "final   UserTransactionBindingService   userTransactionBindingService    =    new   UserTransactionBindingService (  \" UserTransaction \"  )  ;", "serviceTarget . addService ( userTransactionServiceName ,    userTransactionBindingService )  . addDependency ( UserTransactionAccessControlService . SERVICE _ NAME ,    UserTransactionAccessControlService . class ,    userTransactionBindingService . getUserTransactionAccessControlServiceInjector (  )  )  . addDependency ( UserTransactionService . SERVICE _ NAME ,    UserTransaction . class ,    new   naming . ManagedReferenceInjector < UserTransaction >  ( userTransactionBindingService . getManagedObjectInjector (  )  )  )  . addDependency ( contextServiceName ,    ServiceBasedNamingStore . class ,    userTransactionBindingService . getNamingStoreInjector (  )  )  . install (  )  ;", "deploymentUnit . addToAttachmentList ( JNDI _ DEPENDENCIES ,    userTransactionServiceName )  ;", "final   ServiceName   transactionSynchronizationRegistryName    =    contextServiceName . append (  \" TransactionSynchronizationRegistry \"  )  ;", "BinderService   transactionSyncBinderService    =    new   BinderService (  \" TransactionSynchronizationRegistry \"  )  ;", "serviceTarget . addService ( transactionSynchronizationRegistryName ,    transactionSyncBinderService )  . addDependency ( TransactionSynchronizationRegistryService . SERVICE _ NAME ,    TransactionSynchronizationRegistry . class ,    new   naming . ManagedReferenceInjector < TransactionSynchronizationRegistry >  ( transactionSyncBinderService . getManagedObjectInjector (  )  )  )  . addDependency ( contextServiceName ,    ServiceBasedNamingStore . class ,    transactionSyncBinderService . getNamingStoreInjector (  )  )  . install (  )  ;", "deploymentUnit . addToAttachmentList ( JNDI _ DEPENDENCIES ,    transactionSynchronizationRegistryName )  ;", "}", "METHOD_END"], "methodName": ["bindServices"], "fileName": "org.jboss.as.txn.deployment.TransactionJndiBindingProcessor"}, {"methodBody": ["METHOD_START", "{", "TransactionRollbackSetupAction . Holder   holder    =    TransactionRollbackSetupAction . depth . get (  )  ;", "if    ( holder    =  =    null )     {", "holder    =    new   TransactionRollbackSetupAction . Holder (  )  ;", "try    {", "final   TransactionManager   tm    =    transactionManager . getOptionalValue (  )  ;", "if    ( tm    !  =    null )     {", "holder . actuallyCleanUp    =     !  ( isTransactionActive ( tm ,    tm . getStatus (  )  )  )  ;", "}", "TransactionRollbackSetupAction . depth . set ( holder )  ;", "}    catch    ( Exception   e )     {", "TransactionLogger . ROOT _ LOGGER . unableToGetTransactionStatus ( e )  ;", "}", "}", "holder . depth    +  =    increment ;", "if    (  ( holder . depth )     =  =     0  )     {", "TransactionRollbackSetupAction . depth . set ( null )  ;", "return   holder . actuallyCleanUp ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["changeDepth"], "fileName": "org.jboss.as.txn.deployment.TransactionRollbackSetupAction"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   Manager   tm    =    transactionManager . getOptionalValue (  )  ;", "if    ( tm    =  =    null )     {", "return ;", "}", "final   int   status    =    tm . getStatus (  )  ;", "final   boolean   active    =    isActive ( tm ,    status )  ;", "if    ( active )     {", "try    {", "Logger . ROOT _ LOGGER . transactionStillOpen ( status )  ;", "tm . rollback (  )  ;", "}    catch    ( Exception   ex )     {", "Logger . ROOT _ LOGGER . unableToRollBack ( ex )  ;", "}", "}", "}    catch    ( Exception   e )     {", "Logger . ROOT _ LOGGER . unableToGetStatus ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTransactionStatus"], "fileName": "org.jboss.as.txn.deployment.TransactionRollbackSetupAction"}, {"methodBody": ["METHOD_START", "{", "return   transactionManager ;", "}", "METHOD_END"], "methodName": ["getTransactionManager"], "fileName": "org.jboss.as.txn.deployment.TransactionRollbackSetupAction"}, {"methodBody": ["METHOD_START", "{", "switch    ( status )     {", "case   Status . STATUS _ ACTIVE    :", "case   Status . STATUS _ COMMITTING    :", "case   Status . STATUS _ MARKED _ ROLLBACK    :", "case   Status . STATUS _ PREPARING    :", "case   Status . STATUS _ ROLLING _ BACK    :", "case   Status . STATUS _ ROLLEDBACK    :", "case   Status . STATUS _ PREPARED    :", "rrn   true ;", "}", "rrn   false ;", "}", "METHOD_END"], "methodName": ["isTransactionActive"], "fileName": "org.jboss.as.txn.deployment.TransactionRollbackSetupAction"}, {"methodBody": ["METHOD_START", "{", "return   transactionManagerInjectedValue ;", "}", "METHOD_END"], "methodName": ["getTransactionManagerInjectedValue"], "fileName": "org.jboss.as.txn.ee.concurrency.TransactionSetupProviderService"}, {"methodBody": ["METHOD_START", "{", "final   TransactionSetupProvider   value    =    this . transactionSetupProvider ;", "if    ( value    =  =    null )     {", "throw   TransactionLogger . ROOT _ LOGGER . tNotStarted (  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.ee.concurrency.TransactionSetupProviderService"}, {"methodBody": ["METHOD_START", "{", "transactionSetupProvider    =    new   ServiceTransactionSetupProvider ( new   TransactionSetupProviderImpl ( transactionManagerInjectedValue . getValue (  )  )  ,    context . getController (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.ee.concurrency.TransactionSetupProviderService"}, {"methodBody": ["METHOD_START", "{", "transactionSetupProvider    =    null ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.ee.concurrency.TransactionSetupProviderService"}, {"methodBody": ["METHOD_START", "{", "return   pathManagerInjector ;", "}", "METHOD_END"], "methodName": ["getPathManagerInjector"], "fileName": "org.jboss.as.txn.service.ArjunaObjectStoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "return   bindingManager ;", "}", "METHOD_END"], "methodName": ["getBindingManager"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   orbInjector ;", "}", "METHOD_END"], "methodName": ["getOrbInjector"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   recoveryBindingInjector ;", "}", "METHOD_END"], "methodName": ["getRecoveryBindingInjector"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   statusBindingInjector ;", "}", "METHOD_END"], "methodName": ["getStatusBindingInjector"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   suspendControllerInjector ;", "}", "METHOD_END"], "methodName": ["getSuspendControllerInjector"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   recoveryManagerService ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "final   RecoveryEnvironmentBean   recoveryEnvironmentBean    =    recoveryPropertyManager . getRecoveryEnvironmentBean (  )  ;", "final   SocketBinding   recoveryBinding    =    recoveryBindingInjector . getValue (  )  ;", "recoveryEnvironmentBean . setRecoveryInetAddress ( recoveryBinding . getSocketAddress (  )  . getAddress (  )  )  ;", "recoveryEnvironmentBean . setRecoveryPort ( recoveryBinding . getSocketAddress (  )  . getPort (  )  )  ;", "final   SocketBinding   statusBinding    =    statusBindingInjector . getValue (  )  ;", "recoveryEnvironmentBean . setTransactionStatusManagerInetAddress ( statusBinding . getSocketAddress (  )  . getAddress (  )  )  ;", "recoveryEnvironmentBean . setTransactionStatusManagerPort ( statusBinding . getSocketAddress (  )  . getPort (  )  )  ;", "recoveryEnvironmentBean . setRecoveryListener ( recoveryListener )  ;", "if    ( recoveryListener )     {", "ManagedBinding   binding    =    Factory . createSimpleManagedBinding ( recoveryBinding )  ;", "bindingManager . getValue (  )  . getNamedRegistry (  )  . registerBinding ( binding )  ;", "}", "final   List < String >    recoveryExtensions    =    new   ArrayList < String >  (  )  ;", "recoveryExtensions . add ( CommitMarkableResourceRecordRecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( AtomicActionRecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( TORecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( SubordinateAtomicActionRecoveryModule . class . getName (  )  )  ;", "final   List < String >    expiryScanners ;", "if    (  ( System . getProperty (  \" RecoveryEnvironmentBean . expiryScannerClassNames \"  )  )     !  =    null )     {", "expiryScanners    =    recoveryEnvironmentBean . getExpiryScannerClassNames (  )  ;", "} else    {", "expiryScanners    =    new   ArrayList < String >  (  )  ;", "expiryScanners . add ( ExpiredTransactionStatusManagerScanner . class . getName (  )  )  ;", "}", "if    (  !  ( jts )  )     {", "recoveryExtensions . add ( XARecoveryModule . class . getName (  )  )  ;", "recoveryEnvironmentBean . setRecoveryModuleClassNames ( recoveryExtensions )  ;", "recoveryEnvironmentBean . setExpiryScannerClassNames ( expiryScanners )  ;", "recoveryEnvironmentBean . setRecoveryActivators ( null )  ;", "final      recoveryManagerService    =    new    (  )  ;", "try    {", "recoveryManagerService . create (  )  ;", "}    catch    ( Exception   e )     {", "throw   TransactionLogger . ROOT _ LOGGER . managerStartFailure ( e ,     \" Recovery \"  )  ;", "}", "recoveryManagerService . start (  )  ;", "this . recoveryManagerService    =    recoveryManagerService ;", "} else    {", "final   ORB   orb    =    orbInjector . getValue (  )  ;", "new   PostInitLoader ( PostInitLoader . generateORBPropertyName (  \" com . arjuna . orbportability . orb \"  )  ,    orb )  ;", "recoveryExtensions . add ( TopLevelTransactionRecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( ServerTransactionRecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( JCAServerTransactionRecoveryModule . class . getName (  )  )  ;", "recoveryExtensions . add ( com . arjuna . ats . internal . jta . recovery . jts . XARecoveryModule . class . getName (  )  )  ;", "expiryScanners . add ( ExpiredContactScanner . class . getName (  )  )  ;", "expiryScanners . add ( ExpiredToplevelScanner . class . getName (  )  )  ;", "expiryScanners . add ( ExpiredServerScanner . class . getName (  )  )  ;", "recoveryEnvironmentBean . setRecoveryModuleClassNames ( recoveryExtensions )  ;", "recoveryEnvironmentBean . setExpiryScannerClassNames ( expiryScanners )  ;", "recoveryEnvironmentBean . setRecoveryActivatorClassNames ( Collections . singletonList ( RecoveryEnablement . class . getName (  )  )  )  ;", "try    {", "final      recoveryManagerService    =    new   com . arjuna . ats . jbossatx . jts .  ( orb )  ;", "recoveryManagerService . create (  )  ;", "recoveryManagerService . start (  )  ;", "this . recoveryManagerService    =    recoveryManagerService ;", "}    catch    ( Exception   e )     {", "throw   TransactionLogger . ROOT _ LOGGER . managerStartFailure ( e ,     \" Recovery \"  )  ;", "}", "}", "recoverySuspendController    =    new   RecoverySuspendController ( recoveryManagerService )  ;", "suspendControllerInjector . getValue (  )  . registerActivity ( recoverySuspendController )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "suspendControllerInjector . getValue (  )  . unRegisterActivity ( recoverySuspendController )  ;", "try    {", "r . stop (  )  ;", "}    catch    ( Exception   e )     {", "}", "r . destroy (  )  ;", "r    =    null ;", "recoverySuspendController    =    null ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.service.ArjunaRecoveryManagerService"}, {"methodBody": ["METHOD_START", "{", "return   this . jtaEnvironmentBean ;", "}", "METHOD_END"], "methodName": ["getJTAEnvironmentBeanInjector"], "fileName": "org.jboss.as.txn.service.ArjunaTransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "return   orbInjector ;", "}", "METHOD_END"], "methodName": ["getOrbInjector"], "fileName": "org.jboss.as.txn.service.ArjunaTransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "return   userTransactionRegistry ;", "}", "METHOD_END"], "methodName": ["getUserTransactionRegistry"], "fileName": "org.jboss.as.txn.service.ArjunaTransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "return   xaTerminatorInjector ;", "}", "METHOD_END"], "methodName": ["getXaTerminatorInjector"], "fileName": "org.jboss.as.txn.service.ArjunaTransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "return   this . jtaEnvironmentBean ;", "}", "METHOD_END"], "methodName": ["getJTAEnvironmentBeanInjector"], "fileName": "org.jboss.as.txn.service.CMResourceService"}, {"methodBody": ["METHOD_START", "{", "return   socketProcessBindingInjector ;", "}", "METHOD_END"], "methodName": ["getSocketProcessBindingInjector"], "fileName": "org.jboss.as.txn.service.CoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "return   getValue (  )  . getSocketProcessIdMaxPorts (  )  ;", "}", "METHOD_END"], "methodName": ["getSocketProcessIdMaxPorts"], "fileName": "org.jboss.as.txn.service.CoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "getValue (  )  . setProcessImplementation ( instance )  ;", "}", "METHOD_END"], "methodName": ["setProcessImplementation"], "fileName": "org.jboss.as.txn.service.CoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "getValue (  )  . setProcessImplementationClassName ( clazz )  ;", "}", "METHOD_END"], "methodName": ["setProcessImplementationClassName"], "fileName": "org.jboss.as.txn.service.CoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "getValue (  )  . setSocketProcessIdMaxPorts ( socketProcessIdMaxPorts )  ;", "}", "METHOD_END"], "methodName": ["setSocketProcessIdMaxPorts"], "fileName": "org.jboss.as.txn.service.CoreEnvironmentService"}, {"methodBody": ["METHOD_START", "{", "return   TxnServices . notNull ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.ExtendedJBossXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "return   jbossXATerminatorInjector ;", "}", "METHOD_END"], "methodName": ["getJBossXATerminatorInjector"], "fileName": "org.jboss.as.txn.service.JBossContextXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "return   localTransactionContextInjector ;", "}", "METHOD_END"], "methodName": ["getLocalTransactionContextInjector"], "fileName": "org.jboss.as.txn.service.JBossContextXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "return   TxnServices . notNull ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.JBossContextXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "this . value    =    new   JBossContextXATerminator ( localTransactionContextInjector . getValue (  )  ,    jbossXATerminatorInjector . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.JBossContextXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "this . value    =    null ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.service.JBossContextXATerminatorService"}, {"methodBody": ["METHOD_START", "{", "return   extendedJBossXATerminatorInjector ;", "}", "METHOD_END"], "methodName": ["getExtendedJBossXATerminatorInjector"], "fileName": "org.jboss.as.txn.service.LocalTransactionContextService"}, {"methodBody": ["METHOD_START", "{", "return   transactionManagerInjector ;", "}", "METHOD_END"], "methodName": ["getTransactionManagerInjector"], "fileName": "org.jboss.as.txn.service.LocalTransactionContextService"}, {"methodBody": ["METHOD_START", "{", "return   context ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.LocalTransactionContextService"}, {"methodBody": ["METHOD_START", "{", "JBossLocalTransactionProvider . Builder   builder    =    JBossLocalTransactionProvider . builder (  )  ;", "builder . setExtendedJBossXATerminator ( extendedJBossXATerminatorInjector . getValue (  )  )  ;", "builder . setTransactionManager ( transactionManagerInjector . getValue (  )  . getTransactionManager (  )  )  ;", "builder . setTransactionSynchronizationRegistry ( transactionManagerInjector . getValue (  )  . getTransactionSynchronizationRegistry (  )  )  ;", "builder . setXATerminator ( transactionManagerInjector . getValue (  )  . getJbossXATerminator (  )  )  ;", "final      transactionContext    =    this . context    =    new    ( builder . build (  )  )  ;", "AccessController . doPrivileged (  (  ( PrivilegedAction < Void >  )     (  (  )     -  >     {", ". getContextManager (  )  . setGlobalDefault ( transactionContext )  ;", "return   null ;", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.LocalTransactionContextService"}, {"methodBody": ["METHOD_START", "{", "this . context    =    null ;", "AccessController . doPrivileged (  (  ( PrivilegedAction < Void >  )     (  (  )     -  >     {", ". getContextManager (  )  . setGlobalDefault ( null )  ;", "return   null ;", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.service.LocalTransactionContextService"}, {"methodBody": ["METHOD_START", "{", "return   endpointInjector ;", "}", "METHOD_END"], "methodName": ["getEndpointInjector"], "fileName": "org.jboss.as.txn.service.RemotingTransactionServiceService"}, {"methodBody": ["METHOD_START", "{", "return   localTransactionContextInjector ;", "}", "METHOD_END"], "methodName": ["getLocalTransactionContextInjector"], "fileName": "org.jboss.as.txn.service.RemotingTransactionServiceService"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.RemotingTransactionServiceService"}, {"methodBody": ["METHOD_START", "{", "final   RemotingTransactionService   remotingTransactionService    =    RemotingTransactionService . builder (  )  . setEndpoint ( endpointInjector . getValue (  )  )  . setTransactionContext ( localTransactionContextInjector . getValue (  )  )  . build (  )  ;", "try    {", "registration    =    remotingTransactionService . register (  )  ;", "}    catch    ( ServiceRegistrationException   e )     {", "throw   new   StartException ( e )  ;", "}", "value    =    remotingTransactionService ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.RemotingTransactionServiceService"}, {"methodBody": ["METHOD_START", "{", "value    =    null ;", "registra . close (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.service.RemotingTransactionServiceService"}, {"methodBody": ["METHOD_START", "{", "final   TransactionManagerService   service    =    new   TransactionManagerService (  )  ;", "ServiceBuilder < TransactionManager >    serviceBuilder    =    target . addService ( TransactionManagerService . SERVICE _ NAME ,    service )  ;", "serviceBuilder . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT )  ;", "serviceBuilder . addDependency ( UserTransactionRegistryService . SERVICE _ NAME ,    UserTransactionRegistry . class ,    service . registryInjector )  ;", "return   serviceBuilder . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.txn.service.TransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "final   UserTransactionRegistry   registry    =    registryInjector . getValue (  )  ;", "LocalTransactionContext . getCurrent (  )  . registerCreationListener (  (    txn ,    createdBy )     -  >     {", "if    ( createdBy    =  =    CreationListener . CreatedBy . USER _ TRANSACTION )     {", "if    ( WildFlySecurityManager . isChecking (  )  )     {", "AccessController . doPrivileged (  (  ( PrivilegedAction < Void >  )     (  (  )     -  >     {", "txn . registerAssociationListener ( new   AssociationListener (  )     {", "private   final   AtomicBoolean   first    =    new   AtomicBoolean (  )  ;", "public   void   associationChanged ( final   AbstractTransaction   t ,    final   boolean   a )     {", "if    ( a    &  &     ( first . compareAndSet ( false ,    true )  )  )", "registry . userTransactionStarted (  )  ;", "}", "}  )  ;", "return   null ;", "}  )  )  )  ;", "} else    {", "txn . registerAssociationListener ( new   AssociationListener (  )     {", "private   final   AtomicBoolean   first    =    new   AtomicBoolean (  )  ;", "public   void   associationChanged ( final   AbstractTransaction   t ,    final   boolean   a )     {", "if    ( a    &  &     ( first . compareAndSet ( false ,    true )  )  )", "registry . userTransactionStarted (  )  ;", "}", "}  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.TransactionManagerService"}, {"methodBody": ["METHOD_START", "{", "return   localTransactionContextInjectedValue ;", "}", "METHOD_END"], "methodName": ["getLocalTransactionContextInjectedValue"], "fileName": "org.jboss.as.txn.service.TransactionRemoteHTTPService"}, {"methodBody": ["METHOD_START", "{", "return   pathHandlerInjectedValue ;", "}", "METHOD_END"], "methodName": ["getPathHandlerInjectedValue"], "fileName": "org.jboss.as.txn.service.TransactionRemoteHTTPService"}, {"methodBody": ["METHOD_START", "{", "TransactionSynchronizationRegistryService   service    =    new   TransactionSynchronizationRegistryService (  )  ;", "ServiceBuilder < TransactionSynchronizationRegistry >    serviceBuilder    =    target . addService ( TransactionSynchronizationRegistryService . SERVICE _ NAME ,    service )  ;", "serviceBuilder . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT )  ;", "serviceBuilder . addDependency ( ArjunaTransactionManagerService . SERVICE _ NAME ,    TransactionManagerService . class ,    service . injectedArjunaTM )  ;", "return   serviceBuilder . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.txn.service.TransactionSynchronizationRegistryService"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )", "throw   logging . TransactionLogger . ROOT _ LOGGER . serviceNotStarted (  )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["notNull"], "fileName": "org.jboss.as.txn.service.TxnServices"}, {"methodBody": ["METHOD_START", "{", "final   UserTransactionAccessControl   accessControl    =    this . accessControl ;", "if    ( accessControl    !  =    null )     {", "accessControl . authorizeAccess (  )  ;", "}", "}", "METHOD_END"], "methodName": ["authorizeAccess"], "fileName": "org.jboss.as.txn.service.UserTransactionAccessControlService"}, {"methodBody": ["METHOD_START", "{", "return   accessControl ;", "}", "METHOD_END"], "methodName": ["getAccessControl"], "fileName": "org.jboss.as.txn.service.UserTransactionAccessControlService"}, {"methodBody": ["METHOD_START", "{", "this . accessControl    =    accessControl ;", "}", "METHOD_END"], "methodName": ["setAccessControl"], "fileName": "org.jboss.as.txn.service.UserTransactionAccessControlService"}, {"methodBody": ["METHOD_START", "{", "return   accessControlService ;", "}", "METHOD_END"], "methodName": ["getUserTransactionAccessControlServiceInjector"], "fileName": "org.jboss.as.txn.service.UserTransactionBindingService"}, {"methodBody": ["METHOD_START", "{", "return   userTransactionRegistry ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.UserTransactionRegistryService"}, {"methodBody": ["METHOD_START", "{", "userTransactionRegistry    =    new   UserTransactionRegistry (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.jboss.as.txn.service.UserTransactionRegistryService"}, {"methodBody": ["METHOD_START", "{", "userTransactionRegistry    =    null ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.jboss.as.txn.service.UserTransactionRegistryService"}, {"methodBody": ["METHOD_START", "{", "ServiceBuilder < UserTransaction >    serviceBuilder    =    target . addService ( UserTransactionService . SERVICE _ NAME ,    UserTransactionService . INSTANCE )  ;", "serviceBuilder . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT )  ;", "return   serviceBuilder . install (  )  ;", "}", "METHOD_END"], "methodName": ["addService"], "fileName": "org.jboss.as.txn.service.UserTransactionService"}, {"methodBody": ["METHOD_START", "{", "return   TxnServices . notNull ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.jboss.as.txn.service.XATerminatorService"}, {"methodBody": ["METHOD_START", "{", "int   status    =    tx . getStatus (  )  ;", "switch    ( status )     {", "case   Status . STATUS _ ACTIVE    :", "case   Status . STATUS _ PREPARING    :", "break ;", "default    :", "throw   TransactionLogger . ROOT _ LOGGER . syncsnotallowed ( status )  ;", "}", "if    ( synchronization . getClass (  )  . getName (  )  . startsWith (  \" jca \"  )  )     {", "if    ( TransactionLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "TransactionLogger . ROOT _ LOGGER . trace (  (  (  (  (  (  \"  . jcaSyncs . add    -    Class :     \"     +     ( synchronization . getClass (  )  )  )     +     \"    HashCode :     \"  )     +     ( synchronization . hashCode (  )  )  )     +     \"    toString :     \"  )     +    synchronization )  )  ;", "}", "jcaSyncs . add ( synchronization )  ;", "} else    {", "if    ( TransactionLogger . ROOT _ LOGGER . isTraceEnabled (  )  )     {", "TransactionLogger . ROOT _ LOGGER . trace (  (  (  (  (  (  \"  . preJcaSyncs . add    -    Class :     \"     +     ( synchronization . getClass (  )  )  )     +     \"    HashCode :     \"  )     +     ( synchronization . hashCode (  )  )  )     +     \"    toString :     \"  )     +    synchronization )  )  ;", "}", "preJcaSyncs . add ( synchronization )  ;", "}", "}", "METHOD_END"], "methodName": ["registerInterposedSynchronization"], "fileName": "org.jboss.as.txn.service.internal.tsr.JCAOrderedLastSynchronizationList"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   element    =    Attribute . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Attribute . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.txn.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.txn.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   getLocalName (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.jboss.as.txn.subsystem.Attribute"}, {"methodBody": ["METHOD_START", "{", "final   ModuleLoader   moduleLoader    =    Module . getBootModuleLoader (  )  ;", "final   ModuleSpecification   moduleSpec    =    unit . getAttachment ( MODULE _ SPECIFICATION )  ;", "moduleSpec . addSystemDependency ( new   ModuleDependency ( moduleLoader ,     . COMPENSATIONS _ MODULE ,    false ,    false ,    true ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addCompensationsModuleDependency"], "fileName": "org.jboss.as.txn.subsystem.CompensationsDependenciesDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( Class <  ?  >    annotation    :    CompensationsDependenciesDeploymentProcessor . COMPENSATABLE _ ANNOTATIONS )     {", "if    (  ( compositeIndex . getAnnotations ( DotName . createSimple ( annotation . getName (  )  )  )  . size (  )  )     >     0  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isCompensationAnnotationPresent"], "fileName": "org.jboss.as.txn.subsystem.CompensationsDependenciesDeploymentProcessor"}, {"methodBody": ["METHOD_START", "{", "final   Element   element    =    Element . MAP . get ( localName )  ;", "return   element    =  =    null    ?    Element . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.jboss.as.txn.subsystem.Element"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getLocalName"], "fileName": "org.jboss.as.txn.subsystem.Element"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    String >    e    :    map . entrySet (  )  )     {", "if    ( jmxName . equals ( e . getValue (  )  )  )", "return   e . getKey (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["jmxNameToModelName"], "fileName": "org.jboss.as.txn.subsystem.LogStoreConstants"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   operation    =    Util . createEmptyOperation (  \" refresh - log - store \"  ,    context . getCurrentAddress (  )  . getParent (  )  . getParent (  )  )  ;", "context . addStep ( operation ,    new   OperationStepHandler (  )     {", "@ Override", "public   void   execute ( OperationContext   context ,    ModelNode   operation )    throws   OperationFailedException    {", "prob . execute ( context ,    operation )  ;", "}", "}  ,    MODEL )  ;", "}", "METHOD_END"], "methodName": ["refreshParticipant"], "fileName": "org.jboss.as.txn.subsystem.LogStoreParticipantDeleteHandler"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbs    =    TransactionExtension . getMBeanServer ( context )  ;", "final   Resource   resource    =    context . readResource ( EMPTY _ ADDRESS )  ;", "try    {", "final   ObjectName   on    =    LogStoreResource . getObjectName ( resource )  ;", "mbs . invoke ( on ,    operationName ,    null ,    null )  ;", "}    catch    ( Exception   e )     {", "throw   new   OperationFailedException (  (  \" JMX   error :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "refresh ( context )  ;", "context . completeStep ( NOOP _ ROLLBACK _ HANDLER )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.txn.subsystem.LogStoreParticipantOperationHandler"}, {"methodBody": ["METHOD_START", "{", "context . addStep ( refreshHandler ,    MODEL ,    true )  ;", "}", "METHOD_END"], "methodName": ["refreshParticipant"], "fileName": "org.jboss.as.txn.subsystem.LogStoreParticipantRecoveryHandler"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbs    =    TransactionExtension . getMBeanServer ( context )  ;", "final   Resource   resource    =    context . readResource ( EMPTY _ ADDRESS )  ;", "try    {", "final   ObjectName   on    =    Resource . getObjectName ( resource )  ;", "final   ModelNode   model    =    resource . getModel (  )  . clone (  )  ;", "AttributeList   attributes    =    mbs . getAttributes ( on ,    Constants . PARTICIPANT _ JMX _ NAMES )  ;", "for    ( Attribute   attribute    :    attributes . asList (  )  )     {", "String   modelName    =    Constants . jmxNameToModelName ( Constants . MODEL _ TO _ JMX _ PARTICIPANT _ NAMES ,    attribute . getName (  )  )  ;", "if    ( modelName    !  =    null )     {", "ModelNode   aNode    =    model . get ( modelName )  ;", "Object   value    =    attribute . getValue (  )  ;", "if    ( aNode    !  =    null )", "aNode . set (  ( value    =  =    null    ?     \"  \"     :    value . toString (  )  )  )  ;", "}", "}", "resource . writeModel ( model )  ;", "}    catch    ( Exception   e )     {", "throw   new   OperationFailedException (  (  \" JMX   error :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "context . completeStep ( NOOP _ ROLLBACK _ HANDLER )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.txn.subsystem.LogStoreParticipantRefreshHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    String >    e    :    model 2 JmxNames . entrySet (  )  )     {", "String   attributeValue    =    attributes . get ( e . getValue (  )  )  ;", "if    ( attributeValue    !  =    null )", "node . get ( e . getKey (  )  )  . set ( attributeValue )  ;", "}", "}", "METHOD_END"], "methodName": ["addAttributes"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "int   i    =     1  ;", "for    ( ObjectInstance   participant    :    participants )     {", "final   Resource   resource    =    new   LogStoreResource . LogStoreRuntimeResource ( participant . getObjectName (  )  )  ;", "final   ModelNode   model    =    resource . getModel (  )  ;", "Map < String ,    String >    pAttributes    =    getMBeanValues ( mbs ,    participant . getObjectName (  )  ,    LogStoreConstants . PARTICIPANT _ JMX _ NAMES )  ;", "String   pAddress    =    pAttributes . get (  . JNDI _ PROPNAME )  ;", "if    (  ( pAddress    =  =    null )     |  |     (  ( pAddress . length (  )  )     =  =     0  )  )     {", "pAttributes . put (  . JNDI _ PROPNAME ,    String . valueOf (  ( i +  +  )  )  )  ;", "pAddress    =    pAttributes . get (  . JNDI _ PROPNAME )  ;", "}", "addAttributes ( model ,    LogStoreConstants . MODEL _ TO _ JMX _ PARTICIPANT _ NAMES ,    pAttributes )  ;", "final   PathElement   element    =    PathElement . pathElement ( LogStoreConstants . PARTICIPANTS ,    pAddress )  ;", "parent . registerChild ( element ,    resource )  ;", "}", "}", "METHOD_END"], "methodName": ["addParticipants"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( ObjectInstance   oi    :    transactions )     {", "String   transactionId    =    oi . getObjectName (  )  . getCanonicalName (  )  ;", "if    (  (  !  ( transactionId . contains (  \" puid \"  )  )  )     &  &     ( transactionId . contains (  \" itype \"  )  )  )     {", "final   Resource   transaction    =    newResourceRuntimeResource ( oi . getObjectName (  )  )  ;", "final   ModelNode   model    =    transaction . getModel (  )  ;", "Map < String ,    String >    tAttributes    =    getMBeanValues ( mbs ,    oi . getObjectName (  )  , Constants . TXN _ JMX _ NAMES )  ;", "String   txnId    =    tAttributes . get (  \" Id \"  )  ;", "addAttributes ( model , Constants . MODEL _ TO _ JMX _ TXN _ NAMES ,    tAttributes )  ;", "String   participantQuery    =    transactionId    +     \"  , puid =  *  \"  ;", "Set < ObjectInstance >    participants    =    mbs . queryMBeans ( new   ObjectName ( participantQuery )  ,    null )  ;", "addParticipants ( transaction ,    participants ,    mbs )  ;", "final   PathElement   element    =    PathElement . pathElementConstants . TRANSACTIONS ,    txnId )  ;", "parent . registerChild ( element ,    transaction )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addTransactions"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( context . isNormalServer (  )  )  )     {", "context . completeStep ( NOOP _ ROLLBACK _ HANDLER )  ;", "return ;", "}", "final   MBeanServer   mbs    =    TransactionExtension . getMBeanServer ( context )  ;", "if    ( mbs    !  =    null )     {", "final   Resource   resource    =    context . readResource ( EMPTY _ ADDRESS )  ;", "assert   resource   instanceof   Resource ;", "final   Resource   logStore    =     (  ( Resource )     ( resource )  )  ;", "final   ModelNode   subModel    =    context . readResource ( EMPTY _ ADDRESS )  . getModel (  )  ;", "final   boolean   exposeAllLogs    =    Constants . EXPOSE _ ALL _ LOGS . resolveModelAttribute ( context ,    subModel )  . asBoolean (  )  ;", "final   Resource   storeModel    =    probeTransactions ( mbs ,    exposeAllLogs )  ;", "context . acquireControllerLock (  )  ;", "storeModel . writeModel ( logStore . getModel (  )  )  ;", "logStore . update ( storeModel )  ;", "}", "context . completeStep ( NOOP _ ROLLBACK _ HANDLER )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( attributeNames    =  =    null )     {", "MBeanInfo   info    =    cnx . getMBeanInfo ( on )  ;", "MBeanAttributeInfo [  ]    attributeArray    =    info . getAttributes (  )  ;", "int   i    =     0  ;", "attributeNames    =    new   String [ attributeArray . length ]  ;", "for    ( MBeanAttributeInfo   ai    :    attributeArray )", "attributeNames [  ( i +  +  )  ]     =    ai . getName (  )  ;", "}", "AttributeList   attributes    =    cnx . getAttributes ( on ,    attributeNames )  ;", "Map < String ,    String >    values    =    new   HashMap < String ,    String >  (  )  ;", "for    ( Attribute   attribute    :    attributeList (  )  )     {", "Object   value    =    attribute . getValue (  )  ;", "values . put ( attribute . getName (  )  ,     ( value    =  =    null    ?     \"  \"     :    value . toString (  )  )  )  ;", "}", "return   values ;", "}", "METHOD_END"], "methodName": ["getMBeanValues"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "ObjectName   on    =    new   ObjectName (  . osMBeanName )  ;", "mbs . setAttribute ( on ,    new   Attribute (  \" ExposeAllRecordsAsMBeans \"  ,    Boolean . valueOf ( exposeAllLogs )  )  )  ;", "mbs . invoke ( on ,     \" probe \"  ,    null ,    null )  ;", "Set < ObjectInstance >    transactions    =    mbs . queryMBeans ( new   ObjectName (  (  (  . osMBeanName )     +     \"  ,  *  \"  )  )  ,    null )  ;", "final   Resource   resource    =    Factory . create (  )  ;", "addTransactions ( resource ,    transactions ,    mbs )  ;", "return   resource ;", "}    catch    ( JMException   e )     {", "throw   new   OperationFailedException (  \" Transaction   discovery   error :     \"  ,    e )  ;", "}    catch    ( IOException   e )     {", "throw   new   OperationFailedException (  \" Transaction   discovery   error :     \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["probeTransactions"], "fileName": "org.jboss.as.txn.subsystem.LogStoreProbeHandler"}, {"methodBody": ["METHOD_START", "{", "assert   resource   instanceof   LogStoreResource . LogStoreRuntimeResource ;", "return    (  ( LogStoreResource . LogStoreRuntimeResource )     ( resource )  )  . getObjectName (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectName"], "fileName": "org.jboss.as.txn.subsystem.LogStoreResource"}, {"methodBody": ["METHOD_START", "{", "delegate    =    updated ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "org.jboss.as.txn.subsystem.LogStoreResource"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mbs    =    TransactionExtension . getMBeanServer ( context )  ;", "final   Resource   resource    =    context . readResourceForUpdate ( EMPTY _ ADDRESS )  ;", "try    {", "final   ObjectName   on    =    LogStoreResource . getObjectName ( resource )  ;", "Object   res    =    mbs . invoke ( on ,     \" remove \"  ,    null ,    null )  ;", "try    {", "mbs . getObjectInstance ( on )  ;", "String   reason    =     ( res    !  =    null )     ?    res . toString (  )     :     . LOG _ DELETE _ FAILURE _ MESSAGE ;", "throw   new   OperationFailedException ( reason )  ;", "}    catch    ( InstanceNotFoundException   e )     {", "final   PathAddress   address    =    PathAddress . pathAddress ( operation . require ( OP _ ADDR )  )  ;", "final   PathElement   element    =    address . getLastElement (  )  ;", "logStoreResource . removeChild ( element )  ;", "}", "}    catch    ( OperationFailedException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "throw   new   OperationFailedException ( e . getMessage (  )  )  ;", "}", "context . completeStep ( NOOP _ ROLLBACK _ HANDLER )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.jboss.as.txn.subsystem.LogStoreTransactionDeleteHandler"}, {"methodBody": ["METHOD_START", "{", "final   Namespace   element    =    Namespace . MAP . get ( uri )  ;", "return   element    =  =    null    ?    Namespace . UNKNOWN    :    element ;", "}", "METHOD_END"], "methodName": ["forUri"], "fileName": "org.jboss.as.txn.subsystem.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getUriString"], "fileName": "org.jboss.as.txn.subsystem.Namespace"}, {"methodBody": ["METHOD_START", "{", "return   clazz ;", "}", "METHOD_END"], "methodName": ["getClazz"], "fileName": "org.jboss.as.txn.subsystem.ProcessIdType"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.jboss.as.txn.subsystem.ProcessIdType"}, {"methodBody": ["METHOD_START", "{", "final   ServiceRegistry   serviceRegistry    =    context . getServiceRegistry ( false )  ;", "final   ServiceController <  ?  >    serviceController    =    serviceRegistry . getService (  . MBEAN _ SERVER _ SERVICE _ NAME )  ;", "if    ( serviceController    =  =    null )     {", "throw   TransactionLogger . ROOT _ LOGGER . jmxSubsystemNotInstalled (  )  ;", "}", "return    (  ( MBeanServer )     ( serviceController . getValue (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMBeanServer"], "fileName": "org.jboss.as.txn.subsystem.TransactionExtension"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   prefix    =    new   StringBuilder ( TransactionExtension . SUBSYSTEM _ NAME )  ;", "for    ( String   kp    :    keyPrefix )     {", "prefix . append (  '  .  '  )  . append ( kp )  ;", "}", "return   new   StandardResourceDescriptionResolver ( prefix . toString (  )  ,    TransactionExtension . RESOURCE _ NAME ,    TransactionExtension . class . getClassLoader (  )  ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResourceDescriptionResolver"], "fileName": "org.jboss.as.txn.subsystem.TransactionExtension"}, {"methodBody": ["METHOD_START", "{", "TransactionLogger . ROOT _ LOGGER . debug (  \" Initializing   Transactions   Extension \"  )  ;", "final   LogStoreResource   resource    =    new   LogStoreResource (  )  ;", "final   boolean   registerRuntimeOnly    =    context . isRuntimeOnlyRegistrationValid (  )  ;", "final   SubsystemRegistration   subsystem    =    context . registerSubsystem (  . SUBSYSTEM _ NAME ,     . CURRENT _ MODEL _ VERSION )  ;", "final   TransactionSubsystemRootResourceDefinition   rootResourceDefinition    =    new   TransactionSubsystemRootResourceDefinition ( registerRuntimeOnly )  ;", "final   ManagementResourceRegistration   registration    =    subsystem . registerSubsystemModel ( rootResourceDefinition )  ;", "registration . registerOperationHandler ( DEFINITION ,    INSTANCE )  ;", "if    ( context . getProcessType (  )  . isServer (  )  )     {", "final   ResolvePathHandler   objectStorePathHandler    =    Builder . of (  . RESOLVE _ OBJECT _ STORE _ PATH ,    context . getPathManager (  )  )  . setPathAttribute ( TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ PATH )  . setRelativeToAttribute ( TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO )  . build (  )  ;", "registration . registerOperationHandler ( objectStorePathHandler . getOperationDefinition (  )  ,    objectStorePathHandler )  ;", "}", "ManagementResourceRegistration   logStoreChild    =    registration . registerSubModel ( new   LogStoreDefinition ( resource ,    registerRuntimeOnly )  )  ;", "if    ( registerRuntimeOnly )     {", "ManagementResourceRegistration   transactionChild    =    logStoreChild . registerSubModel ( new   LogStoreTransactionDefinition ( resource )  )  ;", "transactionChild . registerSubModel ( LogStoreTransactionParticipantDefinition . INSTANCE )  ;", "}", "subsystem . registerXMLElementWriter ( TransactionSubsystemXMLPersister . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "org.jboss.as.txn.subsystem.TransactionExtension"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . STATISTICS _ ENABLED . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NODE _ IDENTIFIER    :", "TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "case   RELATIVE _ TO    :", "throw   TransactionLogger . ROOT _ LOGGER . unsupportedAttribute ( attribute . getLocalName (  )  ,    reader . getLocation (  )  )  ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   EnumSet < Element >    required    =    EnumSet . of ( Element . PROCESS _ ID )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "required . remove ( element )  ;", "switch    ( element )     {", "case   PROCESS _ ID    :", "{", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   duplicateNamedElement ( reader ,    reader . getLocalName (  )  )  ;", "}", ". parseProcessIdEnvironmentElement ( reader ,    operation )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequiredElement ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseCoreEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   RELATIVE _ TO    :", "RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "RootResourceDefinition . OBJECT _ STORE _ PATH . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseObjectStoreEnvironmentElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "boolean   encountered    =    false ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   UUID    :", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "coreEnvironmentAdd . get ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . set ( true )  ;", "requireNoContent ( reader )  ;", "break ;", "case   SOCKET    :", "{", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", ". parseSocketProcessIdElement ( reader ,    coreEnvironmentAdd )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  ! encountered )     {", "throw   missingOneOf ( reader ,    EnumSet . of ( Element . UUID ,    Element . SOCKET )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProcessIdEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute >    required    =    EnumSet . of ( Attribute . BINDING ,    Attribute . STATUS _ BINDING )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   STATUS _ BINDING    :", "RootResourceDefinition . STATUS _ BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   RECOVERY _ LISTENER    :", "RootResourceDefinition . RECOVERY _ LISTENER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseRecoveryEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . BINDING )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "case   SOCKET _ PROCESS _ ID _ MAX _ PORTS    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSocketProcessIdElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem10Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . ENABLE _ STATISTICS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NODE _ IDENTIFIER    :", "TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "case   RELATIVE _ TO    :", "throw   TransactionLogger . ROOT _ LOGGER . unsupportedAttribute ( attribute . getLocalName (  )  ,    reader . getLocation (  )  )  ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   EnumSet < Element >    required    =    EnumSet . of ( Element . PROCESS _ ID )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "required . remove ( element )  ;", "switch    ( element )     {", "case   PROCESS _ ID    :", "{", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   duplicateNamedElement ( reader ,    reader . getLocalName (  )  )  ;", "}", ". parseProcessIdEnvironmentElement ( reader ,    operation )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequiredElement ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseCoreEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "opera . get ( CommonAttributes . JTS )  . set ( true )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJts"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   RELATIVE _ TO    :", "RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "RootResourceDefinition . OBJECT _ STORE _ PATH . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseObjectStoreEnvironmentElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "boolean   encountered    =    false ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   UUID    :", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "coreEnvironmentAdd . get ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . set ( true )  ;", "requireNoContent ( reader )  ;", "break ;", "case   SOCKET    :", "{", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", ". parseSocketProcessIdElement ( reader ,    coreEnvironmentAdd )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  ! encountered )     {", "throw   missingOneOf ( reader ,    EnumSet . of ( Element . UUID ,    Element . SOCKET )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProcessIdEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute >    required    =    EnumSet . of ( Attribute . BINDING ,    Attribute . STATUS _ BINDING )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   STATUS _ BINDING    :", "RootResourceDefinition . STATUS _ BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   RECOVERY _ LISTENER    :", "RootResourceDefinition . RECOVERY _ LISTENER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseRecoveryEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . BINDING )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "case   SOCKET _ PROCESS _ ID _ MAX _ PORTS    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSocketProcessIdElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem11Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . ENABLE _ STATISTICS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NODE _ IDENTIFIER    :", "TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "case   RELATIVE _ TO    :", "throw   TransactionLogger . ROOT _ LOGGER . unsupportedAttribute ( attribute . getLocalName (  )  ,    reader . getLocation (  )  )  ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   EnumSet < Element >    required    =    EnumSet . of ( Element . PROCESS _ ID )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "required . remove ( element )  ;", "switch    ( element )     {", "case   PROCESS _ ID    :", "{", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   duplicateNamedElement ( reader ,    reader . getLocalName (  )  )  ;", "}", ". parseProcessIdEnvironmentElement ( reader ,    operation )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequiredElement ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseCoreEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "opera . get ( CommonAttributes . JTS )  . set ( true )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJts"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   RELATIVE _ TO    :", "RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "RootResourceDefinition . OBJECT _ STORE _ PATH . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseObjectStoreEnvironmentElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "boolean   encountered    =    false ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   UUID    :", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "coreEnvironmentAdd . get ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . set ( true )  ;", "requireNoContent ( reader )  ;", "break ;", "case   SOCKET    :", "{", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", ". parseSocketProcessIdElement ( reader ,    coreEnvironmentAdd )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  ! encountered )     {", "throw   missingOneOf ( reader ,    EnumSet . of ( Element . UUID ,    Element . SOCKET )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProcessIdEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute >    required    =    EnumSet . of ( Attribute . BINDING ,    Attribute . STATUS _ BINDING )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   STATUS _ BINDING    :", "RootResourceDefinition . STATUS _ BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   RECOVERY _ LISTENER    :", "RootResourceDefinition . RECOVERY _ LISTENER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseRecoveryEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . BINDING )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "case   SOCKET _ PROCESS _ ID _ MAX _ PORTS    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSocketProcessIdElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "operation . get ( LogStoreConstants . LOG _ STORE _ TYPE . getName (  )  )  . set (  \" journal \"  )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseUseJournalstore"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem12Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . ENABLE _ STATISTICS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NODE _ IDENTIFIER    :", "TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "case   RELATIVE _ TO    :", "throw   TransactionLogger . ROOT _ LOGGER . unsupportedAttribute ( attribute . getLocalName (  )  ,    reader . getLocation (  )  )  ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   EnumSet < Element >    required    =    EnumSet . of ( Element . PROCESS _ ID )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "required . remove ( element )  ;", "switch    ( element )     {", "case   PROCESS _ ID    :", "{", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   duplicateNamedElement ( reader ,    reader . getLocalName (  )  )  ;", "}", ". parseProcessIdEnvironmentElement ( reader ,    operation )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequiredElement ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseCoreEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   TABLE _ PREFIX    :", "tablePrefix . parseAndSetParameter ( value ,    opera ,    reader )  ;", "break ;", "case   DROP _ TABLE    :", "dropTable . parseAndSetParameter ( value ,    opera ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJdbcStoreConfigElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   DATASOURCE _ JNDI _ NAME    :", "TransactionSubsystemRootResourceDefinition . JDBC _ STORE _ DATASOURCE . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   JDBC _ ACTION _ STORE    :", "{", ". parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    TransactionSubsystemRootResourceDefinition . JDBC _ ACTION _ STORE _ TABLE _ PREFIX ,    TransactionSubsystemRootResourceDefinition . JDBC _ ACTION _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "case   JDBC _ STATE _ STORE    :", "{", ". parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    TransactionSubsystemRootResourceDefinition . JDBC _ STATE _ STORE _ TABLE _ PREFIX ,    TransactionSubsystemRootResourceDefinition . JDBC _ STATE _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "case   JDBC _ COMMUNICATION _ STORE    :", "{", ". parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    TransactionSubsystemRootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ TABLE _ PREFIX ,    TransactionSubsystemRootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseJdbcStoreElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "opera . get ( CommonAttributes . JTS )  . set ( true )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJts"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   RELATIVE _ TO    :", "RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "RootResourceDefinition . OBJECT _ STORE _ PATH . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseObjectStoreEnvironmentElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "boolean   encountered    =    false ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   UUID    :", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "coreEnvironmentAdd . get ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . set ( true )  ;", "requireNoContent ( reader )  ;", "break ;", "case   SOCKET    :", "{", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", ". parseSocketProcessIdElement ( reader ,    coreEnvironmentAdd )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  ! encountered )     {", "throw   missingOneOf ( reader ,    EnumSet . of ( Element . UUID ,    Element . SOCKET )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProcessIdEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute >    required    =    EnumSet . of ( Attribute . BINDING ,    Attribute . STATUS _ BINDING )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   STATUS _ BINDING    :", "RootResourceDefinition . STATUS _ BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   RECOVERY _ LISTENER    :", "RootResourceDefinition . RECOVERY _ LISTENER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseRecoveryEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . BINDING )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "case   SOCKET _ PROCESS _ ID _ MAX _ PORTS    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSocketProcessIdElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "operation . get ( LogStoreConstants . LOG _ STORE _ TYPE . getName (  )  )  . set (  \" journal \"  )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseUseJournalstore"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem13Parser"}, {"methodBody": ["METHOD_START", "{", "return   validNamespace ;", "}", "METHOD_END"], "methodName": ["getExpectedNamespace"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . ENABLE _ STATISTICS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   NODE _ IDENTIFIER    :", "RootResourceDefinition . NODE _ IDENTIFIER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   PATH    :", "case   RELATIVE _ TO    :", "throw   TransactionLogger . ROOT _ LOGGER . unsupportedAttribute ( attribute . getLocalName (  )  ,    reader . getLocation (  )  )  ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "final   EnumSet < Element >    required    =    EnumSet . of ( Element . PROCESS _ ID )  ;", "final   EnumSet < Element >    encountered    =    EnumSet . noneOf ( Element . class )  ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "required . remove ( element )  ;", "switch    ( element )     {", "case   PROCESS _ ID    :", "{", "if    (  !  ( encountered . add ( element )  )  )     {", "throw   duplicateNamedElement ( reader ,    reader . getLocalName (  )  )  ;", "}", "parseProcessIdEnvironmentElement ( reader ,    operation )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequiredElement ( reader ,    required )  ;", "}", "}", "METHOD_END"], "methodName": ["parseCoreEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   TABLE _ PREFIX    :", "tablePrefix . parseAndSetParameter ( value ,    opera ,    reader )  ;", "break ;", "case   DROP _ TABLE    :", "dropTable . parseAndSetParameter ( value ,    opera ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJdbcStoreConfigElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "logStoreOperation . get ( LogStoreConstants . LOG _ STORE _ TYPE . getName (  )  )  . set (  \" jdbc \"  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   DATASOURCE _ JNDI _ NAME    :", "RootResourceDefinition . JDBC _ STORE _ DATASOURCE . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   JDBC _ ACTION _ STORE    :", "{", "parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    RootResourceDefinition . JDBC _ ACTION _ STORE _ TABLE _ PREFIX ,    RootResourceDefinition . JDBC _ ACTION _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "case   JDBC _ STATE _ STORE    :", "{", "parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    RootResourceDefinition . JDBC _ STATE _ STORE _ TABLE _ PREFIX ,    RootResourceDefinition . JDBC _ STATE _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "case   JDBC _ COMMUNICATION _ STORE    :", "{", "parseJdbcStoreConfigElementAndEnrichOperation ( reader ,    operation ,    RootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ TABLE _ PREFIX ,    RootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ DROP _ TABLE )  ;", "break ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseJdbcStoreElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "opera . get ( CommonAttributes . JTS )  . set ( true )  ;", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseJts"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   RELATIVE _ TO    :", "RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "needsDefaultRelativeTo    =    false ;", "break ;", "case   PATH    :", "RootResourceDefinition . OBJECT _ STORE _ PATH . parseAndSetParameter ( value ,    operation ,    reader )  ;", "if    (  !  ( value . equals ( RootResourceDefinition . OBJECT _ STORE _ PATH . getDefaultValue (  )  . asString (  )  )  )  )     {", "needsDefaultRelativeTo    =    false ;", "}", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseObjectStoreEnvironmentElementAndEnrichOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "boolean   encountered    =    false ;", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   UUID    :", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "if    (  ( reader . getAttributeCount (  )  )     >     0  )     {", "throw   unexpectedAttribute ( reader ,     0  )  ;", "}", "coreEnvironmentAdd . get ( RootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . set ( true )  ;", "requireNoContent ( reader )  ;", "break ;", "case   SOCKET    :", "{", "if    ( encountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "encountered    =    true ;", "parseSocketProcessIdElement ( reader ,    coreEnvironmentAdd )  ;", "break ;", "}", "default    :", "throw   unexpectedElement ( reader )  ;", "}", "}", "if    (  ! encountered )     {", "throw   missingOneOf ( reader ,    EnumSet . of ( Element . UUID ,    Element . SOCKET )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseProcessIdEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute >    required    =    EnumSet . of ( Attribute . BINDING ,    Attribute . STATUS _ BINDING )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   STATUS _ BINDING    :", "RootResourceDefinition . STATUS _ BINDING . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   RECOVERY _ LISTENER    :", "RootResourceDefinition . RECOVERY _ LISTENER . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseRecoveryEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "final   EnumSet < Attribute >    required    =    EnumSet . of ( Attribute . BINDING )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "required . remove ( attribute )  ;", "switch    ( attribute )     {", "case   BINDING    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "case   SOCKET _ PROCESS _ ID _ MAX _ PORTS    :", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . parseAndSetParameter ( value ,    coreEnvironmentAdd ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "if    (  !  ( required . isEmpty (  )  )  )     {", "throw   missingRequired ( reader ,    required )  ;", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseSocketProcessIdElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "logStoreOperation . get ( LogStoreConstants . LOG _ STORE _ TYPE . getName (  )  )  . set (  \" journal \"  )  ;", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   ENABLE _ ASYNC _ IO    :", "RootResourceDefinition . JOURNAL _ STORE _ ENABLE _ ASYNC _ IO . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseUseJournalstore"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "switch    ( element )     {", "case   RECOVERY _ ENVIRONMENT    :", "{", "parseRecoveryEnvironmentElement ( reader ,    Operation )  ;", "break ;", "}", "case   CORE _ ENVIRONMENT    :", "{", "parseCoreEnvironmentElement ( reader ,    Operation )  ;", "break ;", "}", "case   COORDINATOR _ ENVIRONMENT    :", "{", "parseCoordinatorEnvironmentElement ( reader ,    Operation )  ;", "break ;", "}", "case   OBJECT _ STORE    :", "{", "parseObjectStoreEnvironmentElementAndEnrichOperation ( reader ,    Operation )  ;", "break ;", "}", "case   JTS    :", "{", "parseJts ( reader ,    Operation )  ;", "break ;", "}", "case   USE _ HORNETQ _ STORE    :", "{", "if    ( choiceObjectStoreEncountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "choiceObjectStoreEncountered    =    true ;", "parseUseJournalstore ( reader ,    logStoreOperation ,    Operation )  ;", "Operation . get ( CommonAttributes . USE _ JOURNAL _ STORE )  . set ( true )  ;", "break ;", "}", "case   JDBC _ STORE    :", "{", "if    ( choiceObjectStoreEncountered )     {", "throw   unexpectedElement ( reader )  ;", "}", "choiceObjectStoreEncountered    =    true ;", "parseJdbcStoreElementAndEnrichOperation ( reader ,    logStoreOperation ,    Operation )  ;", "Operation . get ( CommonAttributes . USE _ JDBC _ STORE )  . set ( true )  ;", "break ;", "}", "default    :", "{", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["readElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem14Parser"}, {"methodBody": ["METHOD_START", "{", "String   value    =    rawAttributeText ( reader ,    attributeDefinition . getXmlName (  )  ,    null )  ;", "if    ( value    !  =    null )     {", "attributeDefinition . parseAndSetParameter ( value ,    operation ,    reader )  ;", "} else    {", "throw   missingRequired ( reader ,    attributeDefinition . getXmlName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addAttribute"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem15Parser"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   address    =    new   ModelNode (  )  ;", "address . add ( SUBSYSTEM ,    Extension . SUBSYSTEM _ NAME )  ;", "address . protect (  )  ;", "final   ModelNode   cmrAddress    =    address . clone (  )  ;", "final   ModelNode   cmrOperation    =    new   ModelNode (  )  ;", "cmrOperation . get ( ModelDescriptionConstants . OP )  . set ( ModelDescriptionConstants . ADD )  ;", "String   jndiName    =    null ;", "for    ( Attribute   attribute    :    Attribute . values (  )  )     {", "switch    ( attribute )     {", "case   JNDI _ NAME    :", "{", "jndiName    =    rawAttributeText ( reader ,    CMResourceResourceDefinition . JNDI _ NAME . getXmlName (  )  ,    null )  ;", "break ;", "}", "default    :", "break ;", "}", "}", "if    ( jndiName    =  =    null )     {", "throw   missingRequired ( reader ,    CMResourceResourceDefinition . JNDI _ NAME . getXmlName (  )  )  ;", "}", "cmrAddress . add ( CommonAttributes . CM _ RESOURCE ,    jndiName )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    (  ( Element . forName ( reader . getLocalName (  )  )  )     =  =     ( Element . CM _ RESPOURCE )  )     {", "cmrAddress . protect (  )  ;", "cmrOperation . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( cmrAddress )  ;", "operations . add ( cmrOperation )  ;", "return ;", "} else    {", "if    (  ( Element . forName ( reader . getLocalName (  )  )  )     =  =     ( Element . UNKNOWN )  )     {", "throw   unexpectedElement ( reader )  ;", "}", "}", "break ;", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "switch    ( Element . forName ( reader . getLocalName (  )  )  )     {", "case   CM _ TABLE    :", "{", "for    ( Attribute   attribute    :    Attribute . values (  )  )     {", "switch    ( attribute )     {", "case   NAME    :", "{", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ NAME )  ;", "break ;", "}", "case   CM _ TABLE _ BATCH _ SIZE    :", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ BATCH _ SIZE )  ;", "break ;", "case   CM _ TABLE _ IMMEDIATE _ CLEANUP    :", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ IMMEDIATE _ CLEANUP )  ;", "break ;", "default    :", "break ;", "}", "}", "break ;", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseCM"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem15Parser"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   CM _ RESPOURCE    :", "pCM ( reader ,    operations )  ;", "break ;", "default    :", "{", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseCMs"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem15Parser"}, {"methodBody": ["METHOD_START", "{", "return    ( reader . getAttributeValue (  \"  \"  ,    attributeName )  )     =  =    null    ?    defaultValue    :    reader . getAttributeValue (  \"  \"  ,    attributeName )  . trim (  )  ;", "}", "METHOD_END"], "methodName": ["rawAttributeText"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem15Parser"}, {"methodBody": ["METHOD_START", "{", "final   int   count    =    reader . getAttributeCount (  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "requireNoNamespaceAttribute ( reader ,    i )  ;", "final   String   value    =    reader . getAttributeValue ( i )  ;", "final   Attribute   attribute    =    Attribute . forName ( reader . getAttributeLocalName ( i )  )  ;", "switch    ( attribute )     {", "case   STATISTICS _ ENABLED    :", "RootResourceDefinition . STATISTICS _ ENABLED . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ STATISTICS    :", "RootResourceDefinition . ENABLE _ STATISTICS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   ENABLE _ TSM _ STATUS    :", "RootResourceDefinition . ENABLE _ TSM _ STATUS . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "case   DEFAULT _ TIMEOUT    :", "RootResourceDefinition . DEFAULT _ TIMEOUT . parseAndSetParameter ( value ,    operation ,    reader )  ;", "break ;", "default    :", "throw   unexpectedAttribute ( reader ,    i )  ;", "}", "}", "requireNoContent ( reader )  ;", "}", "METHOD_END"], "methodName": ["parseCoordinatorEnvironmentElement"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem20Parser"}, {"methodBody": ["METHOD_START", "{", "String   value    =    rawAttributeText ( reader ,    attributeDefinition . getXmlName (  )  ,    null )  ;", "if    ( value    !  =    null )     {", "attributeDefinition . parseAndSetParameter ( value ,    operation ,    reader )  ;", "} else    {", "throw   missingRequired ( reader ,    attributeDefinition . getXmlName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addAttribute"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem30Parser"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   address    =    new   ModelNode (  )  ;", "address . add ( SUBSYSTEM ,    Extension . SUBSYSTEM _ NAME )  ;", "address . protect (  )  ;", "final   ModelNode   cmrAddress    =    address . clone (  )  ;", "final   ModelNode   cmrOperation    =    new   ModelNode (  )  ;", "cmrOperation . get ( ModelDescriptionConstants . OP )  . set ( ModelDescriptionConstants . ADD )  ;", "String   jndiName    =    null ;", "for    ( Attribute   attribute    :    Attribute . values (  )  )     {", "switch    ( attribute )     {", "case   JNDI _ NAME    :", "{", "jndiName    =    rawAttributeText ( reader ,    CMResourceResourceDefinition . JNDI _ NAME . getXmlName (  )  ,    null )  ;", "break ;", "}", "default    :", "break ;", "}", "}", "if    ( jndiName    =  =    null )     {", "throw   missingRequired ( reader ,    CMResourceResourceDefinition . JNDI _ NAME . getXmlName (  )  )  ;", "}", "cmrAddress . add ( CommonAttributes . CM _ RESOURCE ,    jndiName )  ;", "while    ( reader . hasNext (  )  )     {", "switch    ( reader . nextTag (  )  )     {", "case   XMLStreamConstants . END _ ELEMENT    :", "{", "if    (  ( Element . forName ( reader . getLocalName (  )  )  )     =  =     ( Element . CM _ RESPOURCE )  )     {", "cmrAddress . protect (  )  ;", "cmrOperation . get ( ModelDescriptionConstants . OP _ ADDR )  . set ( cmrAddress )  ;", "operations . add ( cmrOperation )  ;", "return ;", "} else    {", "if    (  ( Element . forName ( reader . getLocalName (  )  )  )     =  =     ( Element . UNKNOWN )  )     {", "throw   unexpectedElement ( reader )  ;", "}", "}", "break ;", "}", "case   XMLStreamConstants . START _ ELEMENT    :", "{", "switch    ( Element . forName ( reader . getLocalName (  )  )  )     {", "case   CM _ TABLE    :", "{", "for    ( Attribute   attribute    :    Attribute . values (  )  )     {", "switch    ( attribute )     {", "case   NAME    :", "{", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ NAME )  ;", "break ;", "}", "case   CM _ TABLE _ BATCH _ SIZE    :", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ BATCH _ SIZE )  ;", "break ;", "case   CM _ TABLE _ IMMEDIATE _ CLEANUP    :", "addAttribute ( reader ,    cmrOperation ,    CMResourceResourceDefinition . CM _ TABLE _ IMMEDIATE _ CLEANUP )  ;", "break ;", "default    :", "break ;", "}", "}", "break ;", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseCM"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem30Parser"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . hasNext (  )  )     &  &     (  ( reader . nextTag (  )  )     !  =     ( XMLStreamConstants . END _ ELEMENT )  )  )     {", "final   Element   element    =    Element . forName ( reader . getLocalName (  )  )  ;", "switch    ( element )     {", "case   CM _ RESPOURCE    :", "pCM ( reader ,    operations )  ;", "break ;", "default    :", "{", "throw   unexpectedElement ( reader )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["parseCMs"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem30Parser"}, {"methodBody": ["METHOD_START", "{", "return    ( reader . getAttributeValue (  \"  \"  ,    attributeName )  )     =  =    null    ?    defaultValue    :    reader . getAttributeValue (  \"  \"  ,    attributeName )  . trim (  )  ;", "}", "METHOD_END"], "methodName": ["rawAttributeText"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystem30Parser"}, {"methodBody": ["METHOD_START", "{", "final   String   nodeIdentifier    =    TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   String   defaultNodeIdentifier    =    TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . getDefaultValue (  )  . asString (  )  ;", "if    ( defaultNodeIdentifier . equals ( nodeIdentifier )  )     {", "TransactionLogger . ROOT _ LOGGER . nodeIdentifierIsSetToDefault ( CommonAttributes . NODE _ IDENTIFIER ,    context . getCurrentAddress (  )  . toCLIStyleString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkIfNodeIdentifierIsDefault"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   boolean   coordinatorEnableStatistics    =    TransactionSubsystemRootResourceDefinition . STATISTICS _ ENABLED . resolveModelAttribute ( context ,    coordEnvModel )  . asBoolean (  )  ;", "final   boolean   transactionStatusManagerEnable    =    TransactionSubsystemRootResourceDefinition . ENABLE _ TSM _ STATUS . resolveModelAttribute ( context ,    coordEnvModel )  . asBoolean (  )  ;", "final   int   coordinatorDefaultTimeout    =    TransactionSubsystemRootResourceDefinition . DEFAULT _ TIMEOUT . resolveModelAttribute ( context ,    coordEnvModel )  . asInt (  )  ;", "ContextTransactionManager . setGlobalDefaultTransactionTimeout ( coordinatorDefaultTimeout )  ;", "final   ArjunaTransactionManagerService   transactionManagerService    =    new   ArjunaTransactionManagerService ( coordinatorEnableStatistics ,    coordinatorDefaultTimeout ,    transactionStatusManagerEnable ,    jts )  ;", "final   ServiceBuilder < TransactionManagerService >    transactionManagerServiceServiceBuilder    =    context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ ARJUNA _ TRANSACTION _ MANAGER ,    transactionManagerService )  ;", "transactionManagerServiceServiceBuilder . addDependency ( TxnServices . JBOSS _ TXN _ JTA _ ENVIRONMENT ,    JTAEnvironmentBean . class ,    transactionManagerService . getJTAEnvironmentBeanInjector (  )  )  ;", "if    ( jts )     {", "transactionManagerServiceServiceBuilder . addDependency ( JBOSS . append (  \" iiop - openjdk \"  ,     \" orb - service \"  )  ,    ORB . class ,    transactionManagerService . getOrbInjector (  )  )  ;", "transactionManagerServiceServiceBuilder . addDependency ( SERVICE _ NAME )  ;", "}", "transactionManagerServiceServiceBuilder . addDependency ( TxnServices . JBOSS _ TXN _ XA _ TERMINATOR ,    JBossXATerminator . class ,    transactionManagerService . getXaTerminatorInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ USER _ TRANSACTION _ REGISTRY ,    UserTransactionRegistry . class ,    transactionManagerService . getUserTransactionRegistry (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ CORE _ ENVIRONMENT )  . addDependency ( TxnServices . JBOSS _ TXN _ ARJUNA _ OBJECTSTORE _ ENVIRONMENT )  . addDependency ( TxnServices . JBOSS _ TXN _ ARJUNA _ RECOVERY _ MANAGER )  . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["performCoordinatorEnvBoottime"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   nodeIdentifier    =    TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . resolveModelAttribute ( context ,    coreEnvModel )  . asString (  )  ;", "TransactionLogger . ROOT _ LOGGER . debugf (  \" nodeIdentifier =  % s % n \"  ,    nodeIdentifier )  ;", "final   CoreEnvironmentService   coreEnvironmentService    =    new   CoreEnvironmentService ( nodeIdentifier )  ;", "String   socketBindingName    =    null ;", "if    ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . resolveModelAttribute ( context ,    coreEnvModel )  . asBoolean ( false )  )     {", "UuidProcessId   id    =    new   UuidProcessId (  )  ;", "coreEnvironmentService . setProcessImplementation ( id )  ;", "} else    {", "coreEnvironmentService . setProcessImplementationClassName ( ProcessIdType . SOCKET . getClazz (  )  )  ;", "socketBindingName    =    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . resolveModelAttribute ( context ,    coreEnvModel )  . asString (  )  ;", "int   ports    =    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . resolveModelAttribute ( context ,    coreEnvModel )  . asInt (  )  ;", "coreEnvironmentService . setSocketProcessIdMaxPorts ( ports )  ;", "}", "final   ServiceBuilder <  ?  >    coreEnvBuilder    =    context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ CORE _ ENVIRONMENT ,    coreEnvironmentService )  ;", "if    ( socketBindingName    !  =    null )     {", "ServiceName   bindingName    =    JBOSS _ BINDING _ NAME . append ( socketBindingName )  ;", "coreEnvBuilder . addDependency ( bindingName ,    SocketBinding . class ,    coreEnvironmentService . getSocketProcessBindingInjector (  )  )  ;", "}", "coreEnvBuilder . setInitialMode ( ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["performCoreEnvironmentBootTime"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "boolean   useJournalStore    =     ( model . hasDefined ( CommonAttributes . USE _ JOURNAL _ STORE )  )     &  &     ( model . get ( CommonAttributes . USE _ JOURNAL _ STORE )  . asBoolean (  )  )  ;", "final   boolean   enableAsyncIO    =    RootResourceDefinition . JOURNAL _ STORE _ ENABLE _ ASYNC _ IO . resolveModelAttribute ( context ,    model )  . asBoolean (  )  ;", "final   String   objectStorePathRef    =     ( RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . resolveModelAttribute ( context ,    model )  . isDefined (  )  )     ?    RootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . resolveModelAttribute ( context ,    model )  . asString (  )     :    null ;", "final   String   objectStorePath    =    RootResourceDefinition . OBJECT _ STORE _ PATH . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   boolean   useJdbcStore    =     ( model . hasDefined ( CommonAttributes . USE _ JDBC _ STORE )  )     &  &     ( model . get ( CommonAttributes . USE _ JDBC _ STORE )  . asBoolean (  )  )  ;", "final   String   dataSourceJndiName    =    RootResourceDefinition . JDBC _ STORE _ DATASOURCE . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "ArjunaObjectStoreEnvironmentService . JdbcStoreConfigBulder   confiBuilder    =    new   ArjunaObjectStoreEnvironmentService . JdbcStoreConfigBulder (  )  ;", "confiBuilder . setActionDropTable ( RootResourceDefinition . JDBC _ ACTION _ STORE _ DROP _ TABLE . resolveModelAttribute ( context ,    model )  . asBoolean (  )  )  . setStateDropTable ( RootResourceDefinition . JDBC _ STATE _ STORE _ DROP _ TABLE . resolveModelAttribute ( context ,    model )  . asBoolean (  )  )  . setCommunicationDropTable ( RootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ DROP _ TABLE . resolveModelAttribute ( context ,    model )  . asBoolean (  )  )  ;", "if    ( model . hasDefined ( RootResourceDefinition . JDBC _ ACTION _ STORE _ TABLE _ PREFIX . getName (  )  )  )", "confiBuilder . setActionTablePrefix ( RootResourceDefinition . JDBC _ ACTION _ STORE _ TABLE _ PREFIX . resolveModelAttribute ( context ,    model )  . asString (  )  )  ;", "if    ( model . hasDefined ( RootResourceDefinition . JDBC _ STATE _ STORE _ TABLE _ PREFIX . getName (  )  )  )", "confiBuilder . setStateTablePrefix ( RootResourceDefinition . JDBC _ STATE _ STORE _ TABLE _ PREFIX . resolveModelAttribute ( context ,    model )  . asString (  )  )  ;", "if    ( model . hasDefined ( RootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ TABLE _ PREFIX . getName (  )  )  )", "confiBuilder . setCommunicationTablePrefix ( RootResourceDefinition . JDBC _ COMMUNICATION _ STORE _ TABLE _ PREFIX . resolveModelAttribute ( context ,    model )  . asString (  )  )  ;", "TransactionLogger . ROOT _ LOGGER . debugf (  \" objectStorePathRef =  % s ,    objectStorePath =  % s % n \"  ,    objectStorePathRef ,    objectStorePath )  ;", "ServiceTarget   target    =    context . getServiceTarget (  )  ;", "final   ArjunaObjectStoreEnvironmentService   objStoreEnvironmentService    =    new   ArjunaObjectStoreEnvironmentService ( useJournalStore ,    enableAsyncIO ,    objectStorePath ,    objectStorePathRef ,    useJdbcStore ,    dataSourceJndiName ,    confiBuilder . build (  )  )  ;", "ServiceBuilder < Void >    builder    =    target . addService ( TxnServices . JBOSS _ TXN _ ARJUNA _ OBJECTSTORE _ ENVIRONMENT ,    objStoreEnvironmentService )  . addDependency ( SERVICE _ NAME ,    PathManager . class ,    objStoreEnvironmentService . getPathManagerInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ CORE _ ENVIRONMENT )  ;", "if    ( useJdbcStore )     {", "final   ContextNames . BindInfo   bindInfo    =    ContextNames . bindInfoFor ( dataSourceJndiName )  ;", "builder . addDependency ( bindInfo . getBinderServiceName (  )  )  ;", "}", "builder . setInitialMode ( ACTIVE )  . install (  )  ;", "TransactionManagerService . addService ( target )  ;", "UserTransactionService . addService ( target )  ;", "target . addService ( TxnServices . JBOSS _ TXN _ USER _ TRANSACTION _ REGISTRY ,    new   UserTransactionRegistryService (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "TransactionSynchronizationRegistryService . addService ( target )  ;", "}", "METHOD_END"], "methodName": ["performObjectStoreBoottime"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   String   recoveryBindingName    =    TransactionSubsystemRootResourceDefinition . BINDING . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   String   recoveryStatusBindingName    =    TransactionSubsystemRootResourceDefinition . STATUS _ BINDING . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   boolean   recoveryListener    =    TransactionSubsystemRootResourceDefinition . RECOVERY _ LISTENER . resolveModelAttribute ( context ,    model )  . asBoolean (  )  ;", "final   ArjunaRecoveryManagerService   recoveryManagerService    =    new   ArjunaRecoveryManagerService ( recoveryListener ,    jts )  ;", "final   ServiceBuilder < RecoveryManagerService >    recoveryManagerServiceServiceBuilder    =    context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ ARJUNA _ RECOVERY _ MANAGER ,    recoveryManagerService )  ;", "recoveryManagerServiceServiceBuilder . addDependencies ( deps )  ;", "final   LocalTransactionContextService   localTransactionContextService    =    new   LocalTransactionContextService (  )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT ,    localTransactionContextService )  . addDependency ( TxnServices . JBOSS _ TXN _ EXTENDED _ JBOSS _ XA _ TERMINATOR ,    ExtendedJBossXATerminator . class ,    localTransactionContextService . getExtendedJBossXATerminatorInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ ARJUNA _ TRANSACTION _ MANAGER ,    TransactionManagerService . class ,    localTransactionContextService . getTransactionManagerInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ ARJUNA _ RECOVERY _ MANAGER )  . setInitialMode ( ACTIVE )  . install (  )  ;", "if    ( context . hasOptionalCapability (  \" endpoint \"  ,    TransactionSubsystemRootResourceDefinition . TRANSACTION _ CAPABILITY . getName (  )  ,    null )  )     {", "final   RemotingTransactionServiceService   remoteTransactionServiceService    =    new   RemotingTransactionServiceService (  )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ REMOTE _ TRANSACTION _ SERVICE ,    remoteTransactionServiceService )  . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT ,    LocalTransactionContext . class ,    remoteTransactionServiceService . getLocalTransactionContextInjector (  )  )  . addDependency ( SUBSYSTEM _ ENDPOINT ,    Endpoint . class ,    remoteTransactionServiceService . getEndpointInjector (  )  )  . setInitialMode ( LAZY )  . install (  )  ;", "}", "if    ( context . hasOptionalCapability (  . UNDERTOW _ HTTP _ INVOKER _ CAPABILITY _ NAME ,    TransactionSubsystemRootResourceDefinition . TRANSACTION _ CAPABILITY . getName (  )  ,    null )  )     {", "final   TransactionRemoteHTTPService   remoteHTTPService    =    new   TransactionRemoteHTTPService (  )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ HTTP _ REMOTE _ TRANSACTION _ SERVICE ,    remoteHTTPService )  . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT ,    LocalTransactionContext . class ,    remoteHTTPService . getLocalTransactionContextInjectedValue (  )  )  . addDependency ( context . getCapabilityServiceName (  . UNDERTOW _ HTTP _ INVOKER _ CAPABILITY _ NAME ,    PathHandler . class )  ,    PathHandler . class ,    remoteHTTPService . getPathHandlerInjectedValue (  )  )  . install (  )  ;", "}", "final   String   nodeIdentifier    =    TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . resolveModelAttribute ( context ,    model )  . asString (  )  ;", "final   JTAEnvironmentBeanService   jtaEnvironmentBeanService    =    new   JTAEnvironmentBeanService ( nodeIdentifier )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ JTA _ ENVIRONMENT ,    jtaEnvironmentBeanService )  . setInitialMode ( ACTIVE )  . install (  )  ;", "final   XATerminatorService   xaTerminatorService ;", "final   ExtendedJBossXATerminatorService   extendedJBossXATerminatorService ;", "if    ( jts )     {", "jtaEnvironmentBeanService . getValue (  )  . setTransactionManagerClassName ( TransactionManagerDelegate . class . getName (  )  )  ;", "recoveryManagerServiceServiceBuilder . addDependency ( JBOSS . append (  \" iiop - openjdk \"  ,     \" orb - service \"  )  ,    ORB . class ,    recoveryManagerService . getOrbInjector (  )  )  ;", "XATerminator   terminator    =    new   XATerminator (  )  ;", "xaTerminatorService    =    new   XATerminatorService ( terminator )  ;", "extendedJBossXATerminatorService    =    new   ExtendedJBossXATerminatorService ( terminator )  ;", "} else    {", "jtaEnvironmentBeanService . getValue (  )  . setTransactionManagerClassName ( com . arjuna . ats . jbossatx . jta . TransactionManagerDelegate . class . getName (  )  )  ;", "com . arjuna . ats . internal . jbossatx . jta . jca . XATerminator   terminator    =    new   com . arjuna . ats . internal . jbossatx . jta . jca . XATerminator (  )  ;", "xaTerminatorService    =    new   XATerminatorService ( terminator )  ;", "extendedJBossXATerminatorService    =    new   ExtendedJBossXATerminatorService ( terminator )  ;", "}", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ XA _ TERMINATOR ,    xaTerminatorService )  . setInitialMode ( ACTIVE )  . install (  )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ EXTENDED _ JBOSS _ XA _ TERMINATOR ,    extendedJBossXATerminatorService )  . setInitialMode ( ACTIVE )  . install (  )  ;", "final   JBossContextXATerminatorService   contextXATerminatorService    =    new   JBossContextXATerminatorService (  )  ;", "context . getServiceTarget (  )  . addService ( TxnServices . JBOSS _ TXN _ CONTEXT _ XA _ TERMINATOR ,    contextXATerminatorService )  . addDependency ( TxnServices . JBOSS _ TXN _ XA _ TERMINATOR ,    JBossXATerminator . class ,    contextXATerminatorService . getJBossXATerminatorInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ LOCAL _ TRANSACTION _ CONTEXT ,    LocalTransactionContext . class ,    contextXATerminatorService . getLocalTransactionContextInjector (  )  )  . setInitialMode ( ACTIVE )  . install (  )  ;", "recoveryManagerServiceServiceBuilder . addDependency ( JBOSS _ BINDING _ NAME . append ( recoveryBindingName )  ,    SocketBinding . class ,    recoveryManagerService . getRecoveryBindingInjector (  )  )  . addDependency ( JBOSS _ BINDING _ NAME . append ( recoveryStatusBindingName )  ,    SocketBinding . class ,    recoveryManagerService . getStatusBindingInjector (  )  )  . addDependency ( SOCKET _ BINDING _ MANAGER ,    SocketBindingManager . class ,    recoveryManagerService . getBindingManager (  )  )  . addDependency ( SERVICE _ NAME ,    SuspendController . class ,    recoveryManagerService . getSuspendControllerInjector (  )  )  . addDependency ( TxnServices . JBOSS _ TXN _ CORE _ ENVIRONMENT )  . addDependency ( TxnServices . JBOSS _ TXN _ ARJUNA _ OBJECTSTORE _ ENVIRONMENT )  . setInitialMode ( ServiceController . Mode . ACTIVE )  . install (  )  ;", "}", "METHOD_END"], "methodName": ["performRecoveryEnvBoottime"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "TransactionSubsystemRootResourceDefinition . STATISTICS _ ENABLED . validateAndSet ( operation ,    coordEnvModel )  ;", "TransactionSubsystemRootResourceDefinition . ENABLE _ STATISTICS . validateAndSet ( operation ,    coordEnvModel )  ;", "TransactionSubsystemRootResourceDefinition . ENABLE _ TSM _ STATUS . validateAndSet ( operation ,    coordEnvModel )  ;", "TransactionSubsystemRootResourceDefinition . DEFAULT _ TIMEOUT . validateAndSet ( operation ,    coordEnvModel )  ;", "ModelNode   mceVal    =    coordEnvModel . get ( TransactionSubsystemRootResourceDefinition . ENABLE _ STATISTICS . getName (  )  )  ;", "if    ( mceVal . isDefined (  )  )     {", "ModelNode   seVal    =    coordEnvModel . get ( TransactionSubsystemRootResourceDefinition . STATISTICS _ ENABLED . getName (  )  )  ;", "if    (  ( seVal . isDefined (  )  )     &  &     (  !  ( seVal . equals ( mceVal )  )  )  )     {", "throw   TransactionLogger . ROOT _ LOGGER . inconsistentStatisticsSettings ( TransactionSubsystemRootResourceDefinition . STATISTICS _ ENABLED . getName (  )  ,    TransactionSubsystemRootResourceDefinition . ENABLE _ STATISTICS . getName (  )  )  ;", "}", "seVal . set ( mceVal )  ;", "mceVal . set ( new   ModelNode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["populateModelWithCoordinatorEnvConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "TransactionSubsystemRootResourceDefinition . NODE _ IDENTIFIER . validateAndSet ( operation ,    model )  ;", "if    (  ( operation . hasDefined ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  )     &  &     ( operation . get ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . asBoolean (  )  )  )     {", "TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . validateAndSet ( operation ,    model )  ;", "if    ( operation . hasDefined ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . getName (  )  )  )     {", "throw   new   OperationFailedException ( String . format (  \"  % s   must   be   undefined   if    % s   is    ' true '  .  \"  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . getName (  )  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  )  ;", "} else", "if    ( operation . hasDefined ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . getName (  )  )  )     {", "throw   new   OperationFailedException ( String . format (  \"  % s   must   be   undefined   if    % s   is    ' true '  .  \"  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . getName (  )  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  )  ;", "}", "} else", "if    ( operation . hasDefined ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . getName (  )  )  )     {", "TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . validateAndSet ( operation ,    model )  ;", "TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . validateAndSet ( operation ,    model )  ;", "} else", "if    ( operation . hasDefined ( TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . getName (  )  )  )     {", "throw   new   OperationFailedException ( String . format (  \"  % s   must   be   defined   if    % s   is   defined .  \"  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . getName (  )  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . getName (  )  )  )  ;", "} else    {", "throw   new   OperationFailedException ( String . format (  \" Either    % s   must   be    ' true '    or       % s   must   be   defined .  \"  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  ,    TransactionSubsystemRootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["populateModelWithCoreEnvConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . validateAndSet ( operation ,    objectStoreModel )  ;", "TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ PATH . validateAndSet ( operation ,    objectStoreModel )  ;", "ModelNode   relativeVal    =    objectStoreModel . get ( TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ RELATIVE _ TO . getName (  )  )  ;", "ModelNode   pathVal    =    objectStoreModel . get ( TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ PATH . getName (  )  )  ;", "if    (  (  !  ( relativeVal . isDefined (  )  )  )     &  &     (  (  !  ( pathVal . isDefined (  )  )  )     |  |     ( pathVal . asString (  )  . equals ( TransactionSubsystemRootResourceDefinition . OBJECT _ STORE _ PATH . getDefaultValue (  )  . asString (  )  )  )  )  )     {", "relativeVal . set ( new   ModelNode (  )  . set (  \" jboss . server . data . dir \"  )  )  ;", "TransactionLogger . ROOT _ LOGGER . objectStoreRelativeToIsSetToDefault (  )  ;", "}", "}", "METHOD_END"], "methodName": ["populateModelWithObjectStoreConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "TransactionSubsystemRootResourceDefinition . BINDING . validateAndSet ( operation ,    model )  ;", "TransactionSubsystemRootResourceDefinition . STATUS _ BINDING . validateAndSet ( operation ,    model )  ;", "TransactionSubsystemRootResourceDefinition . RECOVERY _ LISTENER . validateAndSet ( operation ,    model )  ;", "}", "METHOD_END"], "methodName": ["populateModelWithRecoveryEnvConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  ( operation . hasDefined ( CommonAttributes . USE _ JDBC _ STORE )  )     &  &     ( operation . get ( CommonAttributes . USE _ JDBC _ STORE )  . asBoolean (  )  )  )     &  &     ( operation . hasDefined ( CommonAttributes . USE _ JOURNAL _ STORE )  )  )     &  &     ( operation . get ( CommonAttributes . USE _ JOURNAL _ STORE )  . asBoolean (  )  )  )     {", "throw   Logger . ROOT _ LOGGER . onlyOneCanBeTrue ( CommonAttributes . USE _ JDBC _ STORE ,    CommonAttributes . USE _ JOURNAL _ STORE )  ;", "}", "if    (  (  ( operation . hasDefined ( CommonAttributes . USE _ JDBC _ STORE )  )     &  &     ( operation . get ( CommonAttributes . USE _ JDBC _ STORE )  . asBoolean (  )  )  )     &  &     (  !  ( operation . hasDefined ( CommonAttributes . JDBC _ STORE _ DATASOURCE )  )  )  )     {", "throw   Logger . ROOT _ LOGGER . mustBeDefinedIfTrue ( CommonAttributes . JDBC _ STORE _ DATASOURCE ,    CommonAttributes . USE _ JDBC _ STORE )  ;", "}", "}", "METHOD_END"], "methodName": ["validateStoreConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemAdd"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   address    =    new   ModelNode (  )  ;", "address . add ( SUBSYSTEM ,    getMaiName (  )  )  ;", "final   ModelNode   operation    =    new   ModelNode (  )  ;", "operation . get ( OP )  . set ( READ _ ATTRIBUTE _ OPERATION )  ;", "operation . get ( OP _ ADDR )  . set ( address )  ;", "operation . get ( NAME )  . set ( name )  ;", "return   operation ;", "}", "METHOD_END"], "methodName": ["createReadAttributeOperation"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "final   ModelNode   result    =    new   ModelNode (  )  ;", "result . get ( OUTCOME )  . set ( SUCCESS )  ;", "result . get ( RESULT )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["success"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" async - io - expressions . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testAsyncIOExpressions"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" full - expressions . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testExpressions"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" jdbc - store . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcStore"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" jdbc - store - expressions . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcStoreExpressions"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" jdbc - store - minimal . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testJdbcStoreMinimal"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" minimal . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testMinimalConfig"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" full -  1  .  2  . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testParser_1_2"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" full -  1  .  3  . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testParser_1_3"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" full -  3  .  0  . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testParser_3_0"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "standardSubsystemTest (  \" full -  4  .  0  . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["testParser_4_0"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  ;", "builder . createLegacyKernelServicesBuilder ( createAdditionalInitialization (  )  ,    controllerVersion ,    modelVersion )  . addMavenResourceURL (  (  \"  : jboss - as - transactions :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  . excludeFromParent ( SingleClassFilter . createFilter ( TransactionLogger . class )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "assertNotNull ( legacyServices )  ;", "assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "List < ModelNode >    ops    =    builder . parseXmlResource (  \" full - expressions . xml \"  )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    modelVersion ,    ops ,    config )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformers"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( createAdditionalInitialization (  )  )  ;", "builder . createLegacyKernelServicesBuilder ( createAdditionalInitialization (  )  ,    controllerVersion ,    modelVersion )  . addMavenResourceURL (  (  \" eap : wildfly - transactions :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  . excludeFromParent ( SingleClassFilter . createFilter ( TransactionLogger . class )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "assertNotNull ( legacyServices )  ;", "assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "List < ModelNode >    ops    =    builder . parseXmlResource (  \" full - expressions . xml \"  )  ;", "ModelTestUtils . checkFailedTransformedBootOperations ( mainServices ,    modelVersion ,    ops ,    config )  ;", "PathAddress   subsystemAddress    =    PathAddress . pathAddress ( TransactionExtension . SUBSYSTEM _ PATH )  ;", "PathAddress   participants    =    subsystemAddress . append ( TransactionExtension . LOG _ STORE _ PATH )  . append ( TransactionExtension . TRANSACTION _ PATH )  . append ( TransactionExtension . PARTICIPANT _ PATH )  ;", "OperationTransformer . TransformedOperation   transOp    =    mainServices . transformOperation ( modelVersion ,    Util . createOperation (  \" delete \"  ,    participants )  )  ;", "Assert . assertTrue ( transOp . getFailureDescription (  )  ,    transOp . rejectOperation (  . success (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformers7"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectTransformers ( EAP _  6  _  2  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  2  ,    new   FailedOperationTransformationConfig (  )  . addFailedAttribute ( PathAddress . pathAddress ( PathElement . pathElement ( ModelDescriptionConstants . SUBSYSTEM ,    TransactionExtension . SUBSYSTEM _ NAME )  )  . append ( CMResourceResourceDefinition . PATH _ CM _ RESOURCE )  ,    REJECTED _ RESOURCE )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformersEAP620"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectTransformers ( EAP _  6  _  3  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  3  ,    new   FailedOperationTransformationConfig (  )  . addFailedAttribute ( PathAddress . pathAddress ( PathElement . pathElement ( ModelDescriptionConstants . SUBSYSTEM ,    TransactionExtension . SUBSYSTEM _ NAME )  )  . append ( CMResourceResourceDefinition . PATH _ CM _ RESOURCE )  ,    REJECTED _ RESOURCE )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformersEAP630"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectTransformers ( EAP _  6  _  4  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  4  ,    new   FailedOperationTransformationConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformersEAP640"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testRejectTransformers 7  ( EAP _  7  _  0  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 7  0  ,    new   FailedOperationTransformationConfig (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRejectTransformersEAP7"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "String   subsystemXml    =    readResource (  \" full - expressions - transform . xml \"  )  ;", "KernelServicesBuilder   builder    =    createKernelServicesBuilder ( MANAGEMENT )  . setSubsystemXml ( subsystemXml )  ;", "builder . createLegacyKernelServicesBuilder ( null ,    controllerVersion ,    modelVersion )  . addMavenResourceURL (  (  \" as : jboss - as - transactions :  \"     +     ( controllerVersion . getMavenGavVersion (  )  )  )  )  . addSingleChildFirstClass ( RemoveProcessUUIDOperationFixer . class )  . configureReverseControllerCheck ( MANAGEMENT ,     . ADD _ REMOVED _ HORNETQ _ STORE _ ENABLE _ ASYNC _ IO ,    RemoveProcessUUIDOperationFixer . INSTANCE )  . excludeFromParent ( SingleClassFilter . createFilter ( TransactionLogger . class )  )  ;", "KernelServices   mainServices    =    builder . build (  )  ;", "KernelServices   legacyServices    =    mainServices . getLegacyServices ( modelVersion )  ;", "Assert . assertTrue ( mainServices . isSuccessfulBoot (  )  )  ;", "Assert . assertTrue ( legacyServices . isSuccessfulBoot (  )  )  ;", "checkSubsystemModelTransformation ( mainServices ,    modelVersion ,     (    modelNode )     -  >     {", "modelNode . remove (  \" path \"  )  ;", "modelNode . remove (  \" relative - to \"  )  ;", "modelNode . get (  \" process - id - uuid \"  )  . set ( false )  ;", "return   modelNode ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersFull"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformersFull ( EAP _  6  _  2  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  2  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersFullEAP620"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformersFull ( EAP _  6  _  3  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  3  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersFullEAP630"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "testTransformersFull ( EAP _  6  _  4  _  0  ,    TransactionTransformers . MODEL _ VERSION _ EAP 6  4  )  ;", "}", "METHOD_END"], "methodName": ["testTransformersFullEAP640"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "final   String   subsystemXml    =    getSubsystemXml (  )  ;", "final   KernelServices   kernelServices    =    super . createKernelServicesBuilder ( createAdditionalInitialization (  )  )  . setSubsystemXml ( subsystemXml )  . build (  )  ;", "Assert . assertTrue (  \" Subsystem   boot   failed !  \"  ,    kernelServices . isSuccessfulBoot (  )  )  ;", "ModelNode   operation    =    createReadAttributeOperation ( CommonAttributes . NUMBER _ OF _ SYSTEM _ ROLLBACKS )  ;", "ModelNode   result    =    kernelServices . executeOperation ( operation )  ;", "Assert . assertEquals (  \" success \"  ,    result . get (  \" outcome \"  )  . asString (  )  )  ;", "Assert . assertEquals ( TxStats . getInstance (  )  . getNumberOfSystemRollbacks (  )  ,    result . get ( RESULT )  . asLong (  )  )  ;", "operation    =    createReadAttributeOperation ( CommonAttributes . AVERAGE _ COMMIT _ TIME )  ;", "result    =    kernelServices . executeOperation ( operation )  ;", "Assert . assertEquals (  \" success \"  ,    result . get (  \" outcome \"  )  . asString (  )  )  ;", "Assert . assertEquals ( TxStats . getInstance (  )  . getAverageCommitTime (  )  ,    result . get ( RESULT )  . asLong (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTxStats"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemTestCase"}, {"methodBody": ["METHOD_START", "{", "writer . writeStartElement ( Element . PROCESS _ ID . getLocalName (  )  )  ;", "if    ( value . get ( RootResourceDefinition . PROCESS _ ID _ UUID . getName (  )  )  . asBoolean ( false )  )     {", "writer . writeEmptyElement ( Element . UUID . getLocalName (  )  )  ;", "} else    {", "writer . writeStartElement ( Element . SOCKET . getLocalName (  )  )  ;", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ BINDING . marshallAsAttribute ( value ,    writer )  ;", "RootResourceDefinition . PROCESS _ ID _ SOCKET _ MAX _ PORTS . marshallAsAttribute ( value ,    writer )  ;", "writer . writeEndElement (  )  ;", "}", "writer . writeEndElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeProcessId"], "fileName": "org.jboss.as.txn.subsystem.TransactionSubsystemXMLPersister"}, {"methodBody": ["METHOD_START", "{", "for    ( TxStatsHandler . TxStat   stat    :    TxStatsHandler . TxStat . values (  )  )     {", "resourceRegistration . registerMetric ( stat . definition ,    this )  ;", "}", "}", "METHOD_END"], "methodName": ["registerMetrics"], "fileName": "org.jboss.as.txn.subsystem.TxStatsHandler"}, {"methodBody": ["METHOD_START", "{", "final   LocalTransactionContext   current    =    LocalTransactionContext . getCurrent (  )  ;", "try    {", "current . importProviderTransaction (  )  ;", "}    catch    ( SystemException   e )     {", "throw   new   RuntimeException (  \"    unable   to   determine   inbound   transaction   context \"  ,    e )  ;", "}", "try    {", "return   ContextTransactionManager . getInstance (  )  . suspend (  )  ;", "}    catch    ( SystemException   e )     {", "throw   new   RuntimeException (  \"    unable   to   suspend   inbound   transaction   context \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getCurrentTransaction"], "fileName": "org.jboss.iiop.tm.InboundTransactionCurrentImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "info . register _ initial _ reference ( InboundTransactionCurrent . NAME ,    new   mpl (  )  )  ;", "}    catch    ( InvalidName   e )     {", "throw   new   RuntimeException (  (  (  \" Could   not   register   initial    \"     +     \" reference   for   InboundTransactionCurrent   implementation :     \"  )     +    e )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["pre_init"], "fileName": "org.jboss.iiop.tm.InboundTransactionCurrentInitializer"}]