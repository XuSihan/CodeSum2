[{"methodBody": ["METHOD_START", "{", "Cat . ids . add ( getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["addIdsToList"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "Calendar   birth    =    new   GregorianCalendar (  )  ;", "birth . setTime ( dOfBirth )  ;", "Calendar   now    =    new   GregorianCalendar (  )  ;", "now . setTime ( new   D (  )  )  ;", "int   adjust    =     0  ;", "if    (  (  ( now . get ( Calendar . DAY _ OF _ YEAR )  )     -     ( birth . get ( Calendar . DAY _ OF _ YEAR )  )  )     <     0  )     {", "adjust    =     -  1  ;", "}", "age    =     (  ( now . get ( Calendar . YEAR )  )     -     ( birth . get ( Calendar . YEAR )  )  )     +    adjust ;", "}", "METHOD_END"], "methodName": ["calculateAge"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   dateOfBirth ;", "}", "METHOD_END"], "methodName": ["getDateOfBirth"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( Cat . ids )  ;", "}", "METHOD_END"], "methodName": ["getIdList"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   kittens ;", "}", "METHOD_END"], "methodName": ["getKittens"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   lastUpdate ;", "}", "METHOD_END"], "methodName": ["getLastUpdate"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   length ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   manualVersion ;", "}", "METHOD_END"], "methodName": ["getManualVersion"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . dateOfBirth    =    dateOfBirth ;", "}", "METHOD_END"], "methodName": ["setDateOfBirth"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . kittens    =    kittens ;", "}", "METHOD_END"], "methodName": ["setKittens"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . lastUpdate    =    lastUpdate ;", "}", "METHOD_END"], "methodName": ["setLastUpdate"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . length    =    length ;", "}", "METHOD_END"], "methodName": ["setLength"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . manualVersion    =    manualVersion ;", "}", "METHOD_END"], "methodName": ["setManualVersion"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "Cat . log . debug (  (  \" PostUpdate   for :     \"     +     ( this . toString (  )  )  )  )  ;", "( Cat . postVersion )  +  +  ;", "}", "METHOD_END"], "methodName": ["someLateUpdateWorking"], "fileName": "org.hibernate.jpa.test.pack.Cat"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "final      distributor    =     (  (  )     ( o )  )  ;", "if    (  !  ( name . equals ( distributor . name )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "return   name . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.Distributor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( distributors )     =  =    null )     {", "distributors    =    new   HashSet (  )  ;", "}", "distributors . add ( d )  ;", "}", "METHOD_END"], "methodName": ["addDistributor"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "return   descr ;", "}", "METHOD_END"], "methodName": ["getDescr"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "return   distributors ;", "}", "METHOD_END"], "methodName": ["getDistributors"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "this . descr    =    desc ;", "}", "METHOD_END"], "methodName": ["setDescr"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "this . distributors    =    distributors ;", "}", "METHOD_END"], "methodName": ["setDistributors"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.Item"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.Kitten"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.Kitten"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.Kitten"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.Kitten"}, {"methodBody": ["METHOD_START", "{", "final   String   TAB    =     \"              \"  ;", "String   retValue    =     \"  \"  ;", "retValue    =     (  (  (  (  (  (  (  (  \"     (     \"     +     ( super . toString (  )  )  )     +    TAB )     +     \" id    =     \"  )     +     ( this . id )  )     +    TAB )     +     \" name    =     \"  )     +     ( this . name )  )     +    TAB )     +     \"     )  \"  ;", "return   retValue ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jpa.test.pack.Kitten"}, {"methodBody": ["METHOD_START", "{", "o . setLastUpdate ( new   Date (  )  )  ;", "o . setManualVersion (  (  ( o . getManualVersion (  )  )     +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["setLastUpdate"], "fileName": "org.hibernate.jpa.test.pack.LastUpdateListener"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.cfgxmlpar.Morito"}, {"methodBody": ["METHOD_START", "{", "return   power ;", "}", "METHOD_END"], "methodName": ["getPower"], "fileName": "org.hibernate.jpa.test.pack.cfgxmlpar.Morito"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.cfgxmlpar.Morito"}, {"methodBody": ["METHOD_START", "{", "this . power    =    power ;", "}", "METHOD_END"], "methodName": ["setPower"], "fileName": "org.hibernate.jpa.test.pack.cfgxmlpar.Morito"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   IncrementListener . increment ;", "}", "METHOD_END"], "methodName": ["getIncrement"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "( IncrementListener . increment )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "IncrementListener . increment    =     0  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Money"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Money"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Mouse"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Mouse"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Mouse"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Mouse"}, {"methodBody": ["METHOD_START", "{", "return   OtherIncrementListener . increment ;", "}", "METHOD_END"], "methodName": ["getIncrement"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "( OtherIncrementListener . increment )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "OtherIncrementListener . increment    =     0  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "return   major ;", "}", "METHOD_END"], "methodName": ["getMajor"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "return   micro ;", "}", "METHOD_END"], "methodName": ["getMicro"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "return   minor ;", "}", "METHOD_END"], "methodName": ["getMinor"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "this . major    =    major ;", "}", "METHOD_END"], "methodName": ["setMajor"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "this . micro    =    micro ;", "}", "METHOD_END"], "methodName": ["setMicro"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "this . minor    =    minor ;", "}", "METHOD_END"], "methodName": ["setMinor"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "return   new   StringBuffer ( major )  . append ( Version . DOT )  . append ( minor )  . append ( Version . DOT )  . append ( micro )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jpa.test.pack.defaultpar.Version"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.excludehbmpar.Caipirinha"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.excludehbmpar.Caipirinha"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.excludehbmpar.Caipirinha"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.excludehbmpar.Caipirinha"}, {"methodBody": ["METHOD_START", "{", "return   country ;", "}", "METHOD_END"], "methodName": ["getCountry"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Carpet"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Carpet"}, {"methodBody": ["METHOD_START", "{", "this . country    =    country ;", "}", "METHOD_END"], "methodName": ["setCountry"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Carpet"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Carpet"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Elephant"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Elephant"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Elephant"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.explodedpar.Elephant"}, {"methodBody": ["METHOD_START", "{", "return   model ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.hibernate.jpa.test.pack.externaljar.Scooter"}, {"methodBody": ["METHOD_START", "{", "return   speed ;", "}", "METHOD_END"], "methodName": ["getSpeed"], "fileName": "org.hibernate.jpa.test.pack.externaljar.Scooter"}, {"methodBody": ["METHOD_START", "{", "this . model    =    model ;", "}", "METHOD_END"], "methodName": ["setModel"], "fileName": "org.hibernate.jpa.test.pack.externaljar.Scooter"}, {"methodBody": ["METHOD_START", "{", "this . speed    =    speed ;", "}", "METHOD_END"], "methodName": ["setSpeed"], "fileName": "org.hibernate.jpa.test.pack.externaljar.Scooter"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   subject ;", "}", "METHOD_END"], "methodName": ["getSubject"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . comment    =    comment ;", "}", "METHOD_END"], "methodName": ["setComment"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . subject    =    subject ;", "}", "METHOD_END"], "methodName": ["setSubject"], "fileName": "org.hibernate.jpa.test.pack.overridenpar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   subject ;", "}", "METHOD_END"], "methodName": ["getSubject"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . comment    =    comment ;", "}", "METHOD_END"], "methodName": ["setComment"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "this . subject    =    subject ;", "}", "METHOD_END"], "methodName": ["setSubject"], "fileName": "org.hibernate.jpa.test.pack.spacepar.Bug"}, {"methodBody": ["METHOD_START", "{", "return   serialNumber ;", "}", "METHOD_END"], "methodName": ["getSerialNumber"], "fileName": "org.hibernate.jpa.test.pack.various.Airplane"}, {"methodBody": ["METHOD_START", "{", "this . serialNumber    =    serialNumber ;", "}", "METHOD_END"], "methodName": ["setSerialNumber"], "fileName": "org.hibernate.jpa.test.pack.various.Airplane"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.jpa.test.pack.various.Seat"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.jpa.test.pack.various.Seat"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.hibernate.jpa.test.pack.war.ApplicationServer"}, {"methodBody": ["METHOD_START", "{", "return   IncrementListener . increment ;", "}", "METHOD_END"], "methodName": ["getIncrement"], "fileName": "org.hibernate.jpa.test.pack.war.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "( IncrementListener . increment )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "org.hibernate.jpa.test.pack.war.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "IncrementListener . increment    =     0  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.hibernate.jpa.test.pack.war.IncrementListener"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.war.Money"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.war.Money"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jpa.test.pack.war.Mouse"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jpa.test.pack.war.Mouse"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jpa.test.pack.war.Mouse"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jpa.test.pack.war.Mouse"}, {"methodBody": ["METHOD_START", "{", "return   OtherIncrementListener . increment ;", "}", "METHOD_END"], "methodName": ["getIncrement"], "fileName": "org.hibernate.jpa.test.pack.war.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "( OtherIncrementListener . increment )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "org.hibernate.jpa.test.pack.war.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "OtherIncrementListener . increment    =     0  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.hibernate.jpa.test.pack.war.OtherIncrementListener"}, {"methodBody": ["METHOD_START", "{", "return   major ;", "}", "METHOD_END"], "methodName": ["getMajor"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "return   micro ;", "}", "METHOD_END"], "methodName": ["getMicro"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "return   minor ;", "}", "METHOD_END"], "methodName": ["getMinor"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "this . major    =    major ;", "}", "METHOD_END"], "methodName": ["setMajor"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "this . micro    =    micro ;", "}", "METHOD_END"], "methodName": ["setMicro"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "this . minor    =    minor ;", "}", "METHOD_END"], "methodName": ["setMinor"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "return   new   StringBuffer ( major )  . append ( Version . DOT )  . append ( minor )  . append ( Version . DOT )  . append ( micro )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jpa.test.pack.war.Version"}, {"methodBody": ["METHOD_START", "{", "return   DefaultJtaPlatform . delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.jboss.as.jpa.hibernate5.DefaultJtaPlatform"}, {"methodBody": ["METHOD_START", "{", "DefaultJtaPlatform . delegate    =    delegate ;", "}", "METHOD_END"], "methodName": ["setDelegate"], "fileName": "org.jboss.as.jpa.hibernate5.DefaultJtaPlatform"}, {"methodBody": ["METHOD_START", "{", "for    ( LifecycleListener   hibernateCallback    :    lifecycleListeners )     {", "hibernateCallback . bInitialized ( b )  ;", "}", "}", "METHOD_END"], "methodName": ["beanManagerIsAvailableForUse"], "fileName": "org.jboss.as.jpa.hibernate5.HibernateExtendedBeanManager"}, {"methodBody": ["METHOD_START", "{", "return   new   TwoPhaseBootstrapImpl ( info ,    map )  ;", "}", "METHOD_END"], "methodName": ["getBootstrap"], "fileName": "org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class . forName (  . HIBERNATE _ EXTENDED _ BEANMANAGER )  ;", "return   true ;", "}    catch    ( ClassNotFoundException   ignore )     {", "return   false ;", "}    catch    ( NoClassDefFoundError   ignore )     {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["isHibernateExtendedBeanManagerSupported"], "fileName": "org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pu . getProperties (  )  . containsKey ( property )  )  )     {", "properties . put ( property ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["putPropertyIfAbsent"], "fileName": "org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mutableProperties . getProperty ( CACHE _ REGION _ PREFIX )  )     =  =    null )     {", "if    ( scopedPersistenceUnitName    !  =    null )     {", "mutableProperties . setProperty ( CACHE _ REGION _ PREFIX ,    scopedPersistenceUnitName )  ;", "}", "}", "String   regionFactory    =    mutableProperties . getProperty ( CACHE _ REGION _ FACTORY )  ;", "if    ( regionFactory    =  =    null )     {", "regionFactory    =     . DEFAULT _ REGION _ FACTORY ;", "mutableProperties . setProperty ( CACHE _ REGION _ FACTORY ,    regionFactory )  ;", "}", "if    ( regionFactory . equals (  . DEFAULT _ REGION _ FACTORY )  )     {", "String   container    =    mutableProperties . getProperty ( InfinispanRegionFactory . CACHE _ CONTAINER )  ;", "if    ( container    =  =    null )     {", "container    =    InfinispanRegionFactory . DEFAULT _ CACHE _ CONTAINER ;", "mutableProperties . setProperty ( InfinispanRegionFactory . CACHE _ CONTAINER ,    container )  ;", "}", "Properties   cacheSettings    =    new   Properties (  )  ;", "cacheSettings . setProperty (  . CONTAINER ,    container )  ;", "cacheSettings . setProperty (  . CACHES ,    String . join (  \"     \"  ,     . findCaches ( mutableProperties )  )  )  ;", "Notification . addCacheDependencies ( INFINISPAN ,    cacheSettings )  ;", "}", "}", "METHOD_END"], "methodName": ["addSecondLevelCacheDependencies"], "fileName": "org.jboss.as.jpa.hibernate5.HibernateSecondLevelCache"}, {"methodBody": ["METHOD_START", "{", "Set < String >    caches    =    new   HashSet <  >  (  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . ENTITY _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . IMMUTABLE _ ENTITY _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . COLLECTION _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . NATURAL _ ID _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ ENTITY _ RESOURCE )  )  ;", "if    ( properties . containsKey ( InfinispanRegionFactory . PENDING _ PUTS _ CACHE _ RESOURCE _ PROP )  )     {", "caches . add ( properties . getProperty ( InfinispanRegionFactory . PENDING _ PUTS _ CACHE _ RESOURCE _ PROP )  )  ;", "}", "if    ( Boolean . parseBoolean ( properties . getProperty ( USE _ QUERY _ CACHE )  )  )     {", "caches . add ( properties . getProperty ( InfinispanRegionFactory . QUERY _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ QUERY _ RESOURCE )  )  ;", "caches . add ( properties . getProperty ( InfinispanRegionFactory . TIMESTAMPS _ CACHE _ RESOURCE _ PROP ,    InfinispanRegionFactory . DEF _ QUERY _ RESOURCE )  )  ;", "}", "int   length    =    InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . length (  )  ;", "String   customRegionPrefix    =     ( InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . substring (  0  ,     ( length    -     3  )  )  )     +     ( properties . getProperty ( CACHE _ REGION _ PREFIX ,     \"  \"  )  )  ;", "String   customRegionSuffix    =    InfinispanRegionFactory . INFINISPAN _ CONFIG _ RESOURCE _ PROP . substring (  ( length    -     4  )  ,    length )  ;", "for    ( String   propertyName    :    properties . stringPropertyNames (  )  )     {", "if    (  ( propertyName . startsWith ( customRegionPrefix )  )     &  &     ( propertyName . endsWith ( customRegionSuffix )  )  )     {", "caches . add ( properties . getProperty ( propertyName )  )  ;", "}", "}", "return   caches ;", "}", "METHOD_END"], "methodName": ["findCaches"], "fileName": "org.jboss.as.jpa.hibernate5.HibernateSecondLevelCache"}, {"methodBody": ["METHOD_START", "{", "return   jtaManager ;", "}", "METHOD_END"], "methodName": ["getJtaManager"], "fileName": "org.jboss.as.jpa.hibernate5.JBossAppServerJtaPlatform"}, {"methodBody": ["METHOD_START", "{", "return   root ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.jboss.as.jpa.hibernate5.VirtualFileSystemArchiveDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( path    =  =    null )     {", "path    =     \"  \"  ;", "} else    {", "if    (  !  ( path . endsWith (  \"  /  '  \"  )  )  )     {", "path    =    path    +     \"  /  \"  ;", "}", "}", "for    (    child    :    virtualFile . getChildren (  )  )     {", "if    (  !  ( child . exists (  )  )  )     {", "continue ;", "}", "if    ( child . isDirectory (  )  )     {", "process ( child ,     ( path    +     ( child . getName (  )  )  )  ,    archiveContext )  ;", "continue ;", "}", "final   String   name    =    child . getPathName (  )  ;", "final   String   relativeName    =    path    +     ( child . getName (  )  )  ;", "final   InputStreamAccess   inputStreamAccess    =    new   InputStreamAccess ( name ,    child )  ;", "final   ArchiveEntry   entry    =    new   ArchiveEntry (  )     {", "@ Override", "public   String   getName (  )     {", "return   name ;", "}", "@ Override", "public   String   getNameWithinArchive (  )     {", "return   relativeName ;", "}", "@ Override", "public   InputStreamAccess   getStreamAccess (  )     {", "return   inputStreamAccess ;", "}", "}  ;", "archiveContext . obtainArchiveEntryHandler ( entry )  . handleEntry ( entry ,    archiveContext )  ;", "}", "}", "METHOD_END"], "methodName": ["processVirtualFile"], "fileName": "org.jboss.as.jpa.hibernate5.VirtualFileSystemArchiveDescriptor"}, {"methodBody": ["METHOD_START", "{", "PathAddress   pathAddress    =    getPathAddress ( args )  ;", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   EntityManagerFactoryAccess )     {", "EntityManagerFactoryAccess   entityManagerFactoryAccess    =     (  ( EntityManagerFactoryAccess )     ( arg )  )  ;", "return   entityManagerFactoryAccess . entityManagerFactory ( pathAddress . getValue ( Hibernate . PROVIDER _ LABEL )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactory"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   EntityMrFactoryAccess )     {", "EntityMrFactoryAccess   entityMrFactoryAccess    =     (  ( EntityMrFactoryAccess )     ( arg )  )  ;", "return   entityMrFactoryAccess ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getEntityManagerFactoryAccess"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   PathAddress )     {", "return    (  ( PathAddress )     ( arg )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPathAddress"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "if    ( arg   instanceof   Name )     {", "Name   name    =     (  ( Name )     ( arg )  )  ;", "return   name . getName (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatisticName"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateAbstractStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateCollectionStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . get ( collectionName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateCollectionStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateEntityCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "String   scopedPersistenceUnitName    =    pathAddress . getValue ( HibernateStatistics . PROVIDER _ LABEL )  ;", "SessionFactory   sessionFactory    =    entityManagerFactoryaccess . entityManagerFactory ( scopedPersistenceUnitName )  . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . getSecondLevel (  (  ( scopedPersistenceUnitName    +     \"  .  \"  )     +     ( pathAddress . getValue ( HibernateStatistics . ENTITYCACHE )  )  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateEntityCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateEntityStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . getStatistics (  )  . get ( entityName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateEntityStatistics"}, {"methodBody": ["METHOD_START", "{", "return   HibernateManagementAdaptor . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateManagementAdaptor"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getBaseStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateQueryCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "PathAddress   pathAddress    =    getPathAddress ( args )  ;", "if    ( pathAddress    !  =    null )     {", "return   pathAddress . getValue ( Hibernat . QUERYCACHE )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getQueryName"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateQueryCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "String [  ]    originalQueryNames    =    sessionFactory . get (  )  . getQueries (  )  ;", "if    ( originalQueryNames    !  =    null )     {", "for    ( String   originalQueryName    :    originalQueryNames )     {", "if    ( QueryName . queryName ( originalQueryName )  . getDisplayName (  )  . equals ( displayQueryName )  )     {", "return   sessionFactory . get (  )  . getQuery ( originalQueryName )  ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateQueryCacheStatistics"}, {"methodBody": ["METHOD_START", "{", "if    ( entityManagerFactory    =  =    null )     {", "return   null ;", "}", "SessionFactory   sessionFactory    =    entityManagerFactory . unwrap ( SessionFactory . class )  ;", "if    ( sessionFactory    !  =    null )     {", "return   sessionFactory . get (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.jboss.as.jpa.hibernate5.management.HibernateStatistics"}, {"methodBody": ["METHOD_START", "{", "if    (  ( query    =  =    null )     |  |     (  ( query . length (  )  )     =  =     0  )  )     {", "return   query ;", "}", "StringBuilder   buff    =    new   StringBuilder ( query )  ;", ". subst ( buff ,     . SQL _ NE ,     . NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . NE _ BANG ,     . BANG _ NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . NE _ HAT ,     . HAT _ NOT _ EQUAL _  _  )  ;", ". subst ( buff ,     . LE ,     . LESS _ THAN _ EQUAL _  _  )  ;", ". subst ( buff ,     . GE ,     . GREATER _ THAN _ EQUAL _  _  )  ;", ". subst ( buff ,     . CONCAT ,     . CONCAT _  _  )  ;", ". subst ( buff ,     . LT ,     . LESS _ THAN _  _  )  ;", ". subst ( buff ,     . EQ ,     . EQUAL _  _  )  ;", ". subst ( buff ,     . GT ,     . GREATER _  _  )  ;", ". subst ( buff ,     . OPEN ,     . LEFT _ PAREN _  _  )  ;", ". subst ( buff ,     . CLOSE ,     . RIGHT _ PAREN _  _  )  ;", ". subst ( buff ,     . OPEN _ BRACKET ,     . LEFT _ BRACKET _  _  )  ;", ". subst ( buff ,     . CLOSE _ BRACKET ,     . RIGHT _ BRACKET _  _  )  ;", ". subst ( buff ,     . PLUS ,     . PLUS _  _  )  ;", ". subst ( buff ,     . MINUS ,     . MINUS _  _  )  ;", ". subst ( buff ,     . STAR ,     . STAR _  _  )  ;", ". subst ( buff ,     . DIV ,     . DIVIDE _  _  )  ;", ". subst ( buff ,     . MOD ,     . MODULUS _  _  )  ;", ". subst ( buff ,     . COLON ,     . COLON _  _  )  ;", ". subst ( buff ,     . PARAM ,     . PARAM _  _  )  ;", ". subst ( buff ,     . COMMA ,     . COMMA _  _  )  ;", ". subst ( buff ,     . SPACE ,     . SPACE _  _  )  ;", ". subst ( buff ,     . TAB ,     . TAB _  _  )  ;", ". subst ( buff ,     . NEWLINE ,     . NEWLINE _  _  )  ;", ". subst ( buff ,     . LINEFEED ,     . LINEFEED _  _  )  ;", ". subst ( buff ,     . QUOTE ,     . QUOTE _  _  )  ;", ". subst ( buff ,     . DQUOTE ,     . DQUOTE _  _  )  ;", ". subst ( buff ,     . TICK ,     . TICK _  _  )  ;", ". subst ( buff ,     . OPEN _ BRACE ,     . OPEN _ BRACE _  _  )  ;", ". subst ( buff ,     . CLOSE _ BRACE ,     . CLOSE _ BRACE _  _  )  ;", ". subst ( buff ,     . HAT ,     . HAT _  _  )  ;", ". subst ( buff ,     . AMPERSAND ,     . AMPERSAND _  _  )  ;", "return   buff . toString (  )  ;", "}", "METHOD_END"], "methodName": ["displayable"], "fileName": "org.jboss.as.jpa.hibernate5.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "return   displayQuery ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.jboss.as.jpa.hibernate5.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryName ( query )  ;", "}", "METHOD_END"], "methodName": ["queryName"], "fileName": "org.jboss.as.jpa.hibernate5.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "int   begin    =     0  ;", "int   end    =     0  ;", "while    (  ( end    =    stringBuilder . indexOf ( from ,    end )  )     !  =     (  -  1  )  )     {", "stringBuilder . delete ( end ,     ( end    +     ( from . length (  )  )  )  )  ;", "stringBuilder . insert ( end ,    to )  ;", "begin    =    end    +     ( to . length (  )  )  ;", "end    =    begin ;", "}", "}", "METHOD_END"], "methodName": ["subst"], "fileName": "org.jboss.as.jpa.hibernate5.management.QueryName"}, {"methodBody": ["METHOD_START", "{", "final   String   fileName    =     \" large . jar \"  ;", "final   JavaArchive   archive    =    ShrinkWrap . create ( JavaArchive . class ,    fileName )  ;", "final   Path   loremipsumTxtFile    =    Paths . get (  . class . getResource (  \"  / org / hibernate / jpa / test / packaging / loremipsum . txt \"  )  . toURI (  )  )  ;", "for    ( int   i    =     0  ;    i    <     1  0  0  ;    i +  +  )     {", "ArchivePath   path    =    ArchivePaths . create (  (  \" META - INF / file \"     +    i )  )  ;", "archive . addAsResource ( loremipsumTxtFile . toFile (  )  ,    path )  ;", "}", "File   testPackage    =    new   File (  . shrinkwrapArchiveDirectory ,    fileName )  ;", "archive . as ( ZipExporter . class )  . exportTo ( testPackage ,    true )  ;", "return   testPackage ;", "}", "METHOD_END"], "methodName": ["buildLargeJar"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}, {"methodBody": ["METHOD_START", "{", "int   size ;", "by [  ]    entryBys    =    new   by [  0  ]  ;", "for    (  ;     ;  )     {", "by [  ]    tmpBy    =    new   by [  4  0  9  6  ]  ;", "size    =    inputStream . read ( tmpBy )  ;", "if    ( size    =  =     (  -  1  )  )     {", "break ;", "}", "by [  ]    current    =    new   by [  ( entryBys . length )     +    size ]  ;", "Sysm . arraycopy ( entryBys ,     0  ,    current ,     0  ,    entryBys . length )  ;", "Sysm . arraycopy ( tmpBy ,     0  ,    current ,    entryBys . length ,    size )  ;", "entryBys    =    current ;", "}", "return   entryBys ;", "}", "METHOD_END"], "methodName": ["getBytesFromInputStream"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}, {"methodBody": ["METHOD_START", "{", "Thread . currentThread (  )  . setContextClassLoader ( ScannerTests . bundleClassLoader )  ;", "}", "METHOD_END"], "methodName": ["prepareTCCL"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}, {"methodBody": ["METHOD_START", "{", "Thread . currentThread (  )  . setContextClassLoader ( ScannerTests . originalClassLoader )  ;", "}", "METHOD_END"], "methodName": ["resetTCCL"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}, {"methodBody": ["METHOD_START", "{", "File   file    =    buildLargeJar (  )  ;", "long   start    =    System . currentTimeMillis (  )  ;", "InputStream   stream    =    new   BufferedInputStream ( new   FileInputStream ( file )  )  ;", "int   oldLength    =    getBytesFromInputStream ( stream )  . length ;", "stream . close (  )  ;", "long   oldTime    =     ( System . currentTimeMillis (  )  )     -    start ;", "start    =    System . currentTimeMillis (  )  ;", "stream    =    new   BufferedInputStream ( new   FileInputStream ( file )  )  ;", "int   newLength    =    ArchiveHelper . getBytesFromInputStream ( stream )  . length ;", "stream . close (  )  ;", "long   newTime    =     ( System . currentTimeMillis (  )  )     -    start ;", "assertEquals ( oldLength ,    newLength )  ;", "assertTrue (  ( oldTime    >    newTime )  )  ;", "}", "METHOD_END"], "methodName": ["testGetBytesFromInputStream"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}, {"methodBody": ["METHOD_START", "{", "URL   emptyTxtUrl    =    getClass (  )  . getResource (  \"  / org / hibernate / jpa / test / packaging / empty . txt \"  )  ;", "if    ( emptyTxtUrl    =  =    null )     {", "throw   new   RuntimeException (  \" Bah !  \"  )  ;", "}", "InputStream   emptyStream    =    new   BufferedInputStream ( emptyTxtUrl . openStream (  )  )  ;", "int   length    =    ArchiveHelper . getBytesFromInputStream ( emptyStream )  . length ;", "assertEquals ( length ,     0  )  ;", "emptyStream . close (  )  ;", "}", "METHOD_END"], "methodName": ["testGetBytesFromZeroInputStream"], "fileName": "org.jboss.as.jpa.hibernate5.scan.ScannerTests"}]