[{"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    className ,    notAllTagNames ,    notAnyTagNames ,    allTagNames ,    anyTagNames )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    className ,    notAllCategoryIds ,    notAnyCategoryIds ,    allCategoryIds ,    anyCategoryIds )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    classNames )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    classNames ,    classTypeIds )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    classNames ,    classTypeIds ,    notAllCategoryIds ,    notAnyCategoryIds ,    allCategoryIds ,    anyCategoryIds ,    notAllTagNames ,    notAnyTagNames ,    allTagNames ,    anyTagNames )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {    groupId    }  ,    classNameIds ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( groupIds ,    new   String [  ]  {    className    }  ,    null ,    null ,    null ,    null ,    null ,    notAllTagNames ,    notAnyTagNames ,    allTagNames ,    anyTagNames )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( groupIds ,    new   String [  ]  {    className    }  ,    null ,    notAllCategoryIds ,    notAnyCategoryIds ,    allCategoryIds ,    anyCategoryIds ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( groupIds ,    classNames ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryQueryTestUtil . createAssetEntryQuery ( groupIds ,    classNames ,    classTypeIds ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "long [  ]    classNameIds    =    new   long [ classNames . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( classNames . length )  ;    i +  +  )     {", "classNameIds [ i ]     =    PortalUtil . getClassNameId ( classNames [ i ]  )  ;", "}", "return    . createAssetEntryQuery ( groupIds ,    classNameIds ,    classTypeIds ,    notAllCategoryIds ,    notAnyCategoryIds ,    allCategoryIds ,    anyCategoryIds ,    notAllTagNames ,    notAnyTagNames ,    allTagNames ,    anyTagNames )  ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    new   AssetEntryQuery (  )  ;", "assetEntryQuery . setClassNameIds ( classNameIds )  ;", "if    ( Validator . isNotNull ( classTypeIds )  )     {", "assetEntryQuery . setClassTypeIds ( classTypeIds )  ;", "}", "if    ( Validator . isNotNull ( notAllCategoryIds )  )     {", "assetEntryQuery . setNotAllCategoryIds ( notAllCategoryIds )  ;", "}", "if    ( Validator . isNotNull ( notAnyCategoryIds )  )     {", "assetEntryQuery . setNotAnyCategoryIds ( notAnyCategoryIds )  ;", "}", "if    ( Validator . isNotNull ( anyCategoryIds )  )     {", "assetEntryQuery . setAnyCategoryIds ( anyCategoryIds )  ;", "}", "if    ( Validator . isNotNull ( allCategoryIds )  )     {", "assetEntryQuery . setAllCategoryIds ( allCategoryIds )  ;", "}", "if    ( ArrayUtil . isNotEmpty ( notAllTagNames )  )     {", "for    ( String   assetTagName    :    notAllTagNames )     {", "long [  ]    notAllAssetTagIds    =    AssetTagLocalServiceUtil . getTagIds ( groupIds ,    assetTagName )  ;", "assetEntryQuery . addNotAllTagIdsArray ( notAllAssetTagIds )  ;", "}", "}", "if    ( ArrayUtil . isNotEmpty ( notAnyTagNames )  )     {", "assetEntryQuery . setNotAnyTagIds (  . getAssetTagsIds ( groupIds ,    notAnyTagNames )  )  ;", "}", "if    ( ArrayUtil . isNotEmpty ( anyTagNames )  )     {", "assetEntryQuery . setAnyTagIds (  . getAssetTagsIds ( groupIds ,    anyTagNames )  )  ;", "}", "if    ( ArrayUtil . isNotEmpty ( allTagNames )  )     {", "for    ( String   assetTagName    :    allTagNames )     {", "long [  ]    allAssetTagIds    =    AssetTagLocalServiceUtil . getTagIds ( groupIds ,    assetTagName )  ;", "assetEntryQuery . addAllTagIdsArray ( allAssetTagIds )  ;", "}", "}", "assetEntryQuery . setGroupIds ( groupIds )  ;", "return   assetEntryQuery ;", "}", "METHOD_END"], "methodName": ["createAssetEntryQuery"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( ArrayUtil . isEmpty ( assetTagNames )  )     {", "return   new   long [  0  ]  ;", "}", "return   AssetTagLocalSUtil . getTagIds ( groupIds ,    assetTagNames )  ;", "}", "METHOD_END"], "methodName": ["getAssetTagsIds"], "fileName": "com.liferay.portlet.asset.service.persistence.test.AssetEntryQueryTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . addStructure ( TestPropsValues . getGroupId (  )  ,    className ,    null ,    DDMStructureTestUtil . getSampleDDMForm (  )  ,    LocaleUtil . getSiteDefault (  )  ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addStructure"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . addStructure ( groupId ,    className ,    null ,    DDMStructureTestUtil . getSampleDDMForm (  )  ,    LocaleUtil . getSiteDefault (  )  ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addStructure"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( defaultLocale ,     \" Test   Structure \"  )  ;", "serviceContext . setAddGroupPermissions ( true )  ;", "serviceContext . setAddGuestPermissions ( true )  ;", "return   ManagerUtil . addStructure ( TestPropsValues . getUserId (  )  ,    groupId ,    parentStructureId ,    PortalUtil . getClassNameId ( className )  ,    null ,    nameMap ,    null ,    ddmForm ,    STORAGE _ TYPE _ DEFAULT ,    STRUCTURE _ TYPE _ DEFAULT ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addStructure"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . getSampleDDMForm (  \" name \"  )  ;", "}", "METHOD_END"], "methodName": ["getSampleDDMForm"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . getSampleDDMForm ( name ,    new   Locale [  ]  {    LocaleUtil . US    }  ,    US )  ;", "}", "METHOD_END"], "methodName": ["getSampleDDMForm"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "DDMForm   ddmForm    =    new   DDMForm (  )  ;", "ddmForm . setAvailableLocales ( Se . fromArray ( availableLocales )  )  ;", "ddmForm . setDefaultLocale ( defaultLocale )  ;", "DDMFormField   ddmFormField    =    new   DDMFormField ( name ,    type )  ;", "ddmFormField . setDataType ( dataType )  ;", "ddmFormField . setIndexType ( indexType )  ;", "ddmFormField . setLocalizable ( true )  ;", "ddmFormField . setRepeatable ( repeatable )  ;", "LocalizedValue   label    =    new   LocalizedValue ( defaultLocale )  ;", "label . addString ( defaultLocale ,     \" Field \"  )  ;", "ddmFormField . setLabel ( label )  ;", "ddmForm . addDDMFormField ( ddmFormField )  ;", "return   ddmForm ;", "}", "METHOD_END"], "methodName": ["getSampleDDMForm"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . getSampleDDMForm ( name ,     \" string \"  ,     \" text \"  ,    true ,     \" text \"  ,    availableLocales ,    defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["getSampleDDMForm"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMStructureTestUtil . getSampleDDMForm (  \" name \"  ,    availableLocales ,    defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["getSampleDDMForm"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMStructureTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DDMTemplateTestUtil . addTemplate ( groupId ,    classNameId ,    classPK ,    resourceClassNameId ,    LANG _ TYPE _ VM ,    DDMTemplateTestUtil . getSampleTemplateXSL (  )  ,    LocaleUtil . getSiteDefault (  )  )  ;", "}", "METHOD_END"], "methodName": ["addTemplate"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMTemplateTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( defaultLocale ,     \" Test   Template \"  )  ;", "ServiceContext   serviceContext    =    new   ServiceContext (  )  ;", "serviceContext . setAddGroupPermissions ( true )  ;", "serviceContext . setAddGuestPermissions ( true )  ;", "return   ManagerUtil . addTemplate ( TestPropsValues . getUserId (  )  ,    groupId ,    classNameId ,    classPK ,    resourceClassNameId ,    null ,    nameMap ,    null ,    TEMPLATE _ TYPE _ DISPLAY ,    null ,    language ,    script ,    false ,    false ,    null ,    null ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addTemplate"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMTemplateTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    \"  $ name . getData (  )  \"  ;", "}", "METHOD_END"], "methodName": ["getSampleTemplateXSL"], "fileName": "com.liferay.portlet.dynamicdatamapping.util.test.DDMTemplateTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoColumnLocalServiceUtil . addColumn ( table . getTableId (  )  ,    columnName ,    type )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoColumnLocalServiceUtil . addColumn ( table . getTableId (  )  ,    columnName ,    type ,    defaultData )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoTableLocalServiceUtil . addTable ( TestPropsValues . getCompanyId (  )  ,    classNameId ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["addTable"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoTestUtil . addValue ( table ,    column ,    CounterLocalServiceUtil . increment (  )  ,    data )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoValueLocalServiceUtil . addValue ( TestPropsValues . getCompanyId (  )  ,    PortalUtil . getClassName ( table . getClassNameId (  )  )  ,    table . getName (  )  ,    column . getName (  )  ,    CounterLocalServiceUtil . increment (  )  ,    data ,    defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExpandoValueLocalServiceUtil . addValue ( TestPropsValues . getCompanyId (  )  ,    PortalUtil . getClassName ( table . getClassNameId (  )  )  ,    table . getName (  )  ,    column . getName (  )  ,    classPK ,    data )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "ExpandoTable   table    =    ExpandoTestUtil . addTable ( classNameId ,    RandomTestUtil . randomString (  )  )  ;", "ExpandoColumn   column    =    ExpandoTestUtil . addColumn ( table ,    RandomTestUtil . randomString (  )  ,    STRING )  ;", "return   ExpandoTestUtil . addValue ( table ,    column ,    classPK ,    data )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.liferay.portlet.expando.util.test.ExpandoTestUtil"}, {"methodBody": ["METHOD_START", "{", "boolean   workflowEnabled    =    WorkflowThreadLocal . isEnabled (  )  ;", "try    {", "WorkflowThreadLocal . setEnabled ( true )  ;", "serviceContext    =     (  ( ServiceContext )     ( serviceContext . clone (  )  )  )  ;", "serviceContext . setWorkflowAction ( ACTION _ SAVE _ DRAFT )  ;", "MBMessage   message    =    MBMessageLocalServiceUtil . addMessage ( serviceContext . getUserId (  )  ,    RandomTestUtil . randomString (  )  ,    groupId ,    categoryId ,    subject ,    body ,    serviceContext )  ;", "if    ( approved )     {", "return    . updateStatus ( message ,    serviceContext )  ;", "}", "return   message ;", "}    finally    {", "WorkflowThreadLocal . setEnabled ( workflowEnabled )  ;", "}", "}", "METHOD_END"], "methodName": ["addMessageWithWorkflow"], "fileName": "com.liferay.portlet.messageboards.util.test.MBTestUtil"}, {"methodBody": ["METHOD_START", "{", "List < ObjectValuePair < String ,    InputStream >  >    inputStreamOVPs    =    new   ArrayList <  >  (  1  )  ;", "InputStream   inputStream    =    clazz . getResourceAsStream (  (  \" dependencies /  \"     +    fileName )  )  ;", "ObjectValuePair < String ,    InputStream >    inputStreamOVP    =    null ;", "if    ( Validator . isBlank ( keywords )  )     {", "inputStreamOVP    =    new   ObjectValuePair ( fileName ,    inputStream )  ;", "} else    {", "inputStreamOVP    =    new   ObjectValuePair ( keywords ,    inputStream )  ;", "}", "inputStreamOVPs . add ( inputStreamOVP )  ;", "return   inputStreamOVPs ;", "}", "METHOD_END"], "methodName": ["getInputStreamOVPs"], "fileName": "com.liferay.portlet.messageboards.util.test.MBTestUtil"}, {"methodBody": ["METHOD_START", "{", "serviceContext . setAttribute (  \" entryURL \"  ,     \" http :  /  / localhost \"  )  ;", "if    ( Validator . isNotNull ( mand )  )     {", "serviceContext . setCommand ( mand )  ;", "}", "serviceContext . setLayoutFullURL (  \" http :  /  / localhost \"  )  ;", "}", "METHOD_END"], "methodName": ["populateNotificationsServiceContext"], "fileName": "com.liferay.portlet.messageboards.util.test.MBTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    workflowContext    =    new   HashMap <  >  (  )  ;", "workflowContext . put ( CONTEXT _ URL ,     \" http :  /  / localhost \"  )  ;", "=    MBMessageLocalServiceUtil . updateStatus (  . getUserId (  )  ,     . getMessageId (  )  ,    STATUS _ APPROVED ,    serviceContext ,    workflowContext )  ;", "return    ;", "}", "METHOD_END"], "methodName": ["updateStatus"], "fileName": "com.liferay.portlet.messageboards.util.test.MBTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PasswordPolicyTestUtil . addPasswordPolicy ( serviceContext ,    false )  ;", "}", "METHOD_END"], "methodName": ["addPasswordPolicy"], "fileName": "com.liferay.portlet.passwordpoliciesadmin.util.test.PasswordPolicyTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PasswordPolicyLocalServiceUtil . addPasswordPolicy ( serviceContext . getUserId (  )  ,    defaultPolicy ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . randomLong (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,     \"  (  ?  =  .  {  4  }  )  (  ?  :  [ a - zA - Z 0  -  9  ]  *  )  \"  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . randomLong (  )  ,    RandomTestUtil . randomLong (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . randomBoolean (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . randomLong (  )  ,    RandomTestUtil . randomLong (  )  ,    RandomTestUtil . randomLong (  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addPasswordPolicy"], "fileName": "com.liferay.portlet.passwordpoliciesadmin.util.test.PasswordPolicyTestUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getBaseModelClass (  )  ;", "return   clazz . getName (  )  ;", "}", "METHOD_END"], "methodName": ["_getBaseModelClassName"], "fileName": "com.liferay.portlet.ratings.test.BaseRatingsTestCase"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getParentBaseModel"], "fileName": "com.liferay.portlet.ratings.test.BaseRatingsTestCase"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Long )     ( classedModel . getPrimaryKeyObj (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRatingsClassPK"], "fileName": "com.liferay.portlet.ratings.test.BaseRatingsTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.ratings.test.BaseRatingsTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel ( parentBaseModel ,    serviceContext )  ;", "RatingsStats   ratingsStats    =    Util . addStats (  _ getBaseModelClassName (  )  ,    getRatingsClassPK ( baseModel )  )  ;", "deleteBaseModel ( baseModel ,    serviceContext )  ;", "RatingsStatsLocalServiceUtil . getRatingsStats ( ratingsStats . getStatsId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteRatings"], "fileName": "com.liferay.portlet.ratings.test.BaseRatingsTestCase"}, {"methodBody": ["METHOD_START", "{", "return   RatingsTestUtil . addEntry ( className ,    classPK ,     1  .  0  ,    TestPropsValues . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["addEntry"], "fileName": "com.liferay.portlet.ratings.util.test.RatingsTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RatingsEntryLocalServiceUtil . updateEntry ( userId ,    className ,    classPK ,    score ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addEntry"], "fileName": "com.liferay.portlet.ratings.util.test.RatingsTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RatingsTestUtil . addStats ( className ,    classPK ,    RandomTestUtil . randomInt (  )  )  ;", "}", "METHOD_END"], "methodName": ["addStats"], "fileName": "com.liferay.portlet.ratings.util.test.RatingsTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   statsId    =    CounterLocalServiceUtil . increment (  )  ;", "RatingsStats   ratingsStats    =    RatingsStatsLocalServiceUtil . createRatingsStats ( statsId )  ;", "ratingsStats . setClassName ( className )  ;", "ratingsStats . setClassPK ( classPK )  ;", "ratingsStats . setTotalEntries ( Random . randomInt (  )  )  ;", "ratingsStats . setTotalScore ( Random . randomInt (  )  )  ;", "ratingsStats . setAverageScore ( averageScore )  ;", "return   RatingsStatsLocalServiceUtil . updateRatingsStats ( ratingsStats )  ;", "}", "METHOD_END"], "methodName": ["addStats"], "fileName": "com.liferay.portlet.ratings.util.test.RatingsTestUtil"}]