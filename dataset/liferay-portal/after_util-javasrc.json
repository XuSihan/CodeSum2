[{"methodBody": ["METHOD_START", "{", "String [  ]  [  ]    pairArray    =    new   String [ array . length ]  [  2  ]  ;", "for    ( int   i    =     0  ;    i    <     ( array . length )  ;    i +  +  )     {", "pairArray [ i ]  [  0  ]     =    HtmlUtil . escape ( array [ i ]  )  ;", "pairArray [ i ]  [  1  ]     =    array [ i ]  ;", "}", "return   pairArray ;", "}", "METHOD_END"], "methodName": ["_singleToPairArray"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "return   Autocomplete . arrayToJson ( Autocomplete .  _ singleToPairArray ( array )  ,    max )  ;", "}", "METHOD_END"], "methodName": ["arrayToJson"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "if    ( max    <  =     0  )     {", "max    =    arlength ;", "}", "JSONArjsonAr =    JSONFactoryUtil . createJSONAr )  ;", "for    ( int   i    =     0  ;     ( i    <     ( arlength )  )     &  &     ( i    <    max )  ;    i +  +  )     {", "String   text    =    ari ]  [  0  ]  ;", "String   value    =    ari ]  [  1  ]  ;", "Map < String ,    String >    map    =    new   HashMap <  >  (  )  ;", "map . put (  \" text \"  ,    text )  ;", "map . put (  \" value \"  ,    value )  ;", "jsonArput ( map )  ;", "}", "return   jsonAr", "}", "METHOD_END"], "methodName": ["arrayToJson"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "return   Autocomplete . arrayToXml ( Autocomplete .  _ singleToPairArray ( array )  ,    max )  ;", "}", "METHOD_END"], "methodName": ["arrayToXml"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "if    ( max    <  =     0  )     {", "max    =    arlength ;", "}", "StringBundler   sb    =    new   StringBundler (  (  (  ( arlength )     *     8  )     +     3  )  )  ;", "sb . append (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"  ?  >  \"  )  ;", "sb . append (  \"  < ajaxresponse >  \"  )  ;", "for    ( int   i    =     0  ;     ( i    <     ( arlength )  )     &  &     ( i    <    max )  ;    i +  +  )     {", "String   text    =    ari ]  [  0  ]  ;", "String   value    =    ari ]  [  1  ]  ;", "sb . append (  \"  < item >  \"  )  ;", "sb . append (  \"  < text >  <  !  [ CDATA [  \"  )  ;", "sb . append ( text )  ;", "sb . append (  \"  ]  ]  >  <  / text >  \"  )  ;", "sb . append (  \"  < value >  <  !  [ CDATA [  \"  )  ;", "sb . append ( value )  ;", "sb . append (  \"  ]  ]  >  <  / value >  \"  )  ;", "sb . append (  \"  <  / item >  \"  )  ;", "}", "sb . append (  \"  <  / ajaxresponse >  \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["arrayToXml"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "String [  ]  [  ]    array    =    new   String [ list . size (  )  ]  [  2  ]  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "Object   bean    =    list . get ( i )  ;", "Object   text    =    BeanPropertiesUgetObject ( bean ,    textParam )  ;", "if    ( text    =  =    null )     {", "text    =    StringPool . BLANK ;", "}", "Object   value    =    BeanPropertiesUgetObject ( bean ,    valueParam )  ;", "if    ( value    =  =    null )     {", "value    =    StringPool . BLANK ;", "}", "array [ i ]  [  0  ]     =    text . toString (  )  ;", "array [ i ]  [  1  ]     =    value . toString (  )  ;", "}", "return   array ;", "}", "METHOD_END"], "methodName": ["listToArray"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "return   Autocomplete . arrayToJson ( Autocomplete . listToArray ( list ,    textParam ,    valueParam )  ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["listToJson"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "return   Autocomplete . arrayToXml ( Autocomplete . listToArray ( list ,    textParam ,    valueParam )  ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["listToXml"], "fileName": "com.liferay.util.Autocomplete"}, {"methodBody": ["METHOD_START", "{", "Color   blended    =    new   Color (  (  ( int )     (  (  (  ( color 2  [  0  ]  )     -     ( color 1  [  0  ]  )  )     *    ratio )     +     ( color 1  [  0  ]  )  )  )  ,     (  ( int )     (  (  (  ( color 2  [  1  ]  )     -     ( color 1  [  1  ]  )  )     *    ratio )     +     ( color 1  [  1  ]  )  )  )  ,     (  ( int )     (  (  (  ( color 2  [  2  ]  )     -     ( color 1  [  2  ]  )  )     *    ratio )     +     ( color 1  [  2  ]  )  )  )  )  ;", "return   blended ;", "}", "METHOD_END"], "methodName": ["blend"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "int [  ]    rgb 1     =    new   int [  ]  {    color 1  . getRed (  )  ,    color 1  . getGreen (  )  ,    color 1  . getBlue (  )     }  ;", "int [  ]    rgb 2     =    new   int [  ]  {    color 2  . getRed (  )  ,    color 2  . getGreen (  )  ,    color 2  . getBlue (  )     }  ;", "return    . blend ( rgb 1  ,    rgb 2  ,    ratio )  ;", "}", "METHOD_END"], "methodName": ["blend"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "Color   darkened    =    new   Color (  (  ( int )     (  ( color [  0  ]  )     -     (  ( color [  0  ]  )     *    ratio )  )  )  ,     (  ( int )     (  ( color [  1  ]  )     -     (  ( color [  1  ]  )     *    ratio )  )  )  ,     (  ( int )     (  ( color [  2  ]  )     -     (  ( color [  2  ]  )     *    ratio )  )  )  )  ;", "return   darkened ;", "}", "METHOD_END"], "methodName": ["darker"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  7  )  ;", "sb . append (  \"  #  \"  )  ;", "sb . append (  .  _ KEY . substring (  (  ( int )     ( Math . floor (  (  ( rgb [  0  ]  )     /     1  6  )  )  )  )  ,     (  (  ( int )     ( Math . floor (  (  ( rgb [  0  ]  )     /     1  6  )  )  )  )     +     1  )  )  )  ;", "sb . append (  .  _ KEY . substring (  (  ( rgb [  0  ]  )     %     1  6  )  ,     (  (  ( rgb [  0  ]  )     %     1  6  )     +     1  )  )  )  ;", "sb . append (  .  _ KEY . substring (  (  ( int )     ( Math . floor (  (  ( rgb [  1  ]  )     /     1  6  )  )  )  )  ,     (  (  ( int )     ( Math . floor (  (  ( rgb [  1  ]  )     /     1  6  )  )  )  )     +     1  )  )  )  ;", "sb . append (  .  _ KEY . substring (  (  ( rgb [  1  ]  )     %     1  6  )  ,     (  (  ( rgb [  1  ]  )     %     1  6  )     +     1  )  )  )  ;", "sb . append (  .  _ KEY . substring (  (  ( int )     ( Math . floor (  (  ( rgb [  2  ]  )     /     1  6  )  )  )  )  ,     (  (  ( int )     ( Math . floor (  (  ( rgb [  2  ]  )     /     1  6  )  )  )  )     +     1  )  )  )  ;", "sb . append (  .  _ KEY . substring (  (  ( rgb [  2  ]  )     %     1  6  )  ,     (  (  ( rgb [  2  ]  )     %     1  6  )     +     1  )  )  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getHex"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( hex . startsWith (  \"  #  \"  )  )     {", "hex    =    StringUtil . toUpperCase ( hex . substring (  1  )  )  ;", "} else    {", "hex    =    StringUtil . toUpperCase ( hex )  ;", "}", "int [  ]    hexArray    =    new   int [  6  ]  ;", "if    (  ( hex . length (  )  )     =  =     6  )     {", "char [  ]    c    =    hex . toCharArray (  )  ;", "for    ( int   i    =     0  ;    i    <     ( hex . length (  )  )  ;    i +  +  )     {", "if    (  ( c [ i ]  )     =  =     ' A '  )     {", "hexArray [ i ]     =     1  0  ;", "} else", "if    (  ( c [ i ]  )     =  =     ' B '  )     {", "hexArray [ i ]     =     1  1  ;", "} else", "if    (  ( c [ i ]  )     =  =     ' C '  )     {", "hexArray [ i ]     =     1  2  ;", "} else", "if    (  ( c [ i ]  )     =  =     ' D '  )     {", "hexArray [ i ]     =     1  3  ;", "} else", "if    (  ( c [ i ]  )     =  =     ' E '  )     {", "hexArray [ i ]     =     1  4  ;", "} else", "if    (  ( c [ i ]  )     =  =     ' F '  )     {", "hexArray [ i ]     =     1  5  ;", "} else    {", "Character   characterValue    =    Character . valueOf ( c [ i ]  )  ;", "hexArray [ i ]     =    portal . kernel . util . GetterUtil . getInteger ( characterValue . toString (  )  )  ;", "}", "}", "}", "int [  ]    rgb    =    new   int [  3  ]  ;", "rgb [  0  ]     =     (  ( hexArray [  0  ]  )     *     1  6  )     +     ( hexArray [  1  ]  )  ;", "rgb [  1  ]     =     (  ( hexArray [  2  ]  )     *     1  6  )     +     ( hexArray [  3  ]  )  ;", "rgb [  2  ]     =     (  ( hexArray [  4  ]  )     *     1  6  )     +     ( hexArray [  5  ]  )  ;", "return   rgb ;", "}", "METHOD_END"], "methodName": ["getRGB"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "Color   lightened    =    new   Color (  (  ( int )     (  (  (  2  5  5     -     ( color [  0  ]  )  )     *    ratio )     +     ( color [  0  ]  )  )  )  ,     (  ( int )     (  (  (  2  5  5     -     ( color [  1  ]  )  )     *    ratio )     +     ( color [  1  ]  )  )  )  ,     (  ( int )     (  (  (  2  5  5     -     ( color [  2  ]  )  )     *    ratio )     +     ( color [  2  ]  )  )  )  )  ;", "return   lightened ;", "}", "METHOD_END"], "methodName": ["lighter"], "fileName": "com.liferay.util.ColorUtil"}, {"methodBody": ["METHOD_START", "{", "List < String >    keys    =    new   ArrayList <  >  (  )  ;", "List < String >    values    =    new   ArrayList <  >  (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :     _ c . entrySet (  )  )     {", "String   entryKey    =    entry . getKey (  )  ;", "String   entryValue    =    entry . getValue (  )  ;", "keys . add (  (  (  \"  $  {  \"     +    entryKey )     +     \"  }  \"  )  )  ;", "values . add ( entryValue )  ;", "}", "_ keys    =    keys . toArray ( new   String [ keys . size (  )  ]  )  ;", "_ values    =    values . toArray ( new   String [ values . size (  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["_updateArrays"], "fileName": "com.liferay.util.ContextReplace"}, {"methodBody": ["METHOD_START", "{", "if    (  ( key    !  =    null )     &  &     ( value    !  =    null )  )     {", "_ c . put ( key ,    value )  ;", "_ updateArrays (  )  ;", "}", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.liferay.util.ContextReplace"}, {"methodBody": ["METHOD_START", "{", "if    ( text    =  =    null )     {", "return   null ;", "}", "if    (  (  _ keys . length )     =  =     0  )     {", "return   text ;", "}", "return   StringUtil . r ( text ,     _ keys ,     _ values )  ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "com.liferay.util.ContextReplace"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Cookie >    cookieMap    =     (  ( Map < String ,    Cookie >  )     ( request . getAttribute ( CookieUtil . class . getName (  )  )  )  )  ;", "if    ( cookieMap    !  =    null )     {", "return   cookieMap ;", "}", "Cookie [  ]    cookies    =    request . getCookies (  )  ;", "if    ( cookies    =  =    null )     {", "cookieMap    =    Collections . emptyMap (  )  ;", "} else    {", "cookieMap    =    new   HashMap (  (  (  ( cookies . length )     *     4  )     /     3  )  )  ;", "for    ( Cookie   cookie    :    cookies )     {", "String   cookieName    =    GetterUtil . getString ( cookie . getName (  )  )  ;", "cookieName    =    StringUtil . toUpperCase ( cookieName )  ;", "cookieMap . put ( cookieName ,    cookie )  ;", "}", "}", "request . setAttribute ( CookieUtil . class . getName (  )  ,    cookieMap )  ;", "return   cookieMap ;", "}", "METHOD_END"], "methodName": ["_getCookieMap"], "fileName": "com.liferay.util.CookieUtil"}, {"methodBody": ["METHOD_START", "{", "return   CookieUtil . get ( request ,    name ,    true )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.CookieUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Cookie >    cookieMap    =    CookieUtil .  _ getCookieMap ( request )  ;", "if    ( toUpperCase )     {", "name    =    StringUtil . toUpperCase ( name )  ;", "}", "Cookie   cookie    =    cookieMap . get ( name )  ;", "if    ( cookie    =  =    null )     {", "return   null ;", "} else    {", "return   cookie . getValue (  )  ;", "}", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.CookieUtil"}, {"methodBody": ["METHOD_START", "{", "return   CreditCard . hide ( number ,    STAR )  ;", "}", "METHOD_END"], "methodName": ["hide"], "fileName": "com.liferay.util.CreditCard"}, {"methodBody": ["METHOD_START", "{", "if    ( number    =  =    null )     {", "return   number ;", "}", "int   numberLen    =    number . length (  )  ;", "if    ( numberLen    >     4  )     {", "StringBundler   sb    =    new   StringBundler (  ( numberLen    -     3  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( numberLen    -     4  )  ;    i +  +  )     {", "sb . append ( x )  ;", "}", "sb . append ( number . substring (  ( numberLen    -     4  )  ,    numberLen )  )  ;", "number    =    sb . toString (  )  ;", "}", "return   number ;", "}", "METHOD_END"], "methodName": ["hide"], "fileName": "com.liferay.util.CreditCard"}, {"methodBody": ["METHOD_START", "{", "Calendar   calendar    =    CalendarFactoryUtil . getCalendar ( TimeZoneUtil . getDefault (  )  ,    LocaleUtil . getDefault (  )  )  ;", "if    ( CalendarUtil . isFuture ( expirationMonth ,    expirationYear )  )     {", "return   true ;", "} else", "if    (  ( expirationMonth    =  =     ( calendar . get ( Calendar . MONTH )  )  )     &  &     ( expirationYear    =  =     ( calendar . get ( Calendar . YEAR )  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isValidExpirationDate"], "fileName": "com.liferay.util.CreditCard"}, {"methodBody": ["METHOD_START", "{", "number    =    StringUtil . extractDigits ( number )  ;", "if    ( type . equals (  \" visa \"  )  )     {", "if    (  !  ( number . startsWith (  \"  4  \"  )  )  )     {", "return   false ;", "}", "if    (  (  ( number . length (  )  )     !  =     1  3  )     &  &     (  ( number . length (  )  )     !  =     1  6  )  )     {", "return   false ;", "}", "} else", "if    ( type . equals (  \" mastercard \"  )  )     {", "if    (  (  (  (  (  !  ( number . startsWith (  \"  5  1  \"  )  )  )     &  &     (  !  ( number . startsWith (  \"  5  2  \"  )  )  )  )     &  &     (  !  ( number . startsWith (  \"  5  3  \"  )  )  )  )     &  &     (  !  ( number . startsWith (  \"  5  4  \"  )  )  )  )     &  &     (  !  ( number . startsWith (  \"  5  5  \"  )  )  )  )     {", "return   false ;", "}", "if    (  ( number . length (  )  )     !  =     1  6  )     {", "return   false ;", "}", "} else", "if    ( type . equals (  \" discover \"  )  )     {", "if    (  !  ( number . startsWith (  \"  6  0  1  1  \"  )  )  )     {", "return   false ;", "}", "if    (  ( number . length (  )  )     !  =     1  6  )     {", "return   false ;", "}", "} else", "if    ( type . equals (  \" amex \"  )  )     {", "if    (  (  (  (  !  ( number . startsWith (  \"  3  4  \"  )  )  )     &  &     (  !  ( number . startsWith (  \"  3  5  \"  )  )  )  )     &  &     (  !  ( number . startsWith (  \"  3  6  \"  )  )  )  )     &  &     (  !  ( number . startsWith (  \"  3  7  \"  )  )  )  )     {", "return   false ;", "}", "if    (  ( number . length (  )  )     !  =     1  5  )     {", "return   false ;", "}", "}", "return   Validator . isLUHN ( number )  ;", "}", "METHOD_END"], "methodName": ["isValidNumber"], "fileName": "com.liferay.util.CreditCard"}, {"methodBody": ["METHOD_START", "{", "lat 1     =     (  ( Math . PI )     *    lat 1  )     /     1  8  0  ;", "lon 1     =     (  ( Math . PI )     *    lon 1  )     /     1  8  0  ;", "lat 2     =     (  ( Math . PI )     *    lat 2  )     /     1  8  0  ;", "lon 2     =     (  ( Math . PI )     *    lon 2  )     /     1  8  0  ;", "double   miles    =     3  9  6  3  .  4     *     ( Math . as (  (  (  ( Math . sin ( lat 1  )  )     *     ( Math . sin ( lat 2  )  )  )     +     (  (  ( Math . s ( lat 1  )  )     *     ( Math . s ( lat 2  )  )  )     *     ( Math . s (  ( lon 1     -    lon 2  )  )  )  )  )  )  )  ;", "return   miles ;", "}", "METHOD_END"], "methodName": ["calculate"], "fileName": "com.liferay.util.Distance"}, {"methodBody": ["METHOD_START", "{", "return   km    *     0  .  6  2  1  ;", "}", "METHOD_END"], "methodName": ["kmToMiles"], "fileName": "com.liferay.util.Distance"}, {"methodBody": ["METHOD_START", "{", "return   miles    /     0  .  6  2  1  ;", "}", "METHOD_END"], "methodName": ["milesToKm"], "fileName": "com.liferay.util.Distance"}, {"methodBody": ["METHOD_START", "{", "return    _ images ;", "}", "METHOD_END"], "methodName": ["getImages"], "fileName": "com.liferay.util.HTMLParser"}, {"methodBody": ["METHOD_START", "{", "return    _ links ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.liferay.util.HTMLParser"}, {"methodBody": ["METHOD_START", "{", "_ hostAddressProperty    =    hostAddressProperty ;", "}", "METHOD_END"], "methodName": ["setHostAddressProperty"], "fileName": "com.liferay.util.InetAddressTask"}, {"methodBody": ["METHOD_START", "{", "_ hostNameProperty    =    hostNameProperty ;", "}", "METHOD_END"], "methodName": ["setHostNameProperty"], "fileName": "com.liferay.util.InetAddressTask"}, {"methodBody": ["METHOD_START", "{", "_ vmId 1 Property    =    vmId 1 Property ;", "}", "METHOD_END"], "methodName": ["setVmId1Property"], "fileName": "com.liferay.util.InetAddressTask"}, {"methodBody": ["METHOD_START", "{", "_ vmId 2 Property    =    vmId 2 Property ;", "}", "METHOD_END"], "methodName": ["setVmId2Property"], "fileName": "com.liferay.util.InetAddressTask"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    JS .  _ pattern . matcher ( s )  ;", "s    =    matcher . replaceAll ( BLANK )  ;", "s    =    StringUreplace ( s ,     '  +  '  ,     \"  %  2 B \"  )  ;", "s    =    StringUreplace ( s ,     \"  %  2  0  \"  ,     \"  +  \"  )  ;", "try    {", "s    =    URLDecoder . decode ( s ,    UTF 8  )  ;", "}    catch    ( Exception   e )     {", "}", "return   s ;", "}", "METHOD_END"], "methodName": ["decodeURIComponent"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "try    {", "s    =    URLEncoder . encode ( s ,    UTF 8  )  ;", "}    catch    ( Exception   e )     {", "}", "s    =    StringUreplace ( s ,     '  +  '  ,     \"  %  2  0  \"  )  ;", "s    =    StringUreplace ( s ,     \"  %  2 B \"  ,     \"  +  \"  )  ;", "return   s ;", "}", "METHOD_END"], "methodName": ["encodeURIComponent"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "return   JS . encodeURIComponent ( s )  ;", "}", "METHOD_END"], "methodName": ["escape"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "return   null ;", "}", "StringBuilder   sb    =    null ;", "int   index    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( name . length (  )  )  ;    i +  +  )     {", "char   c    =    name . charAt ( i )  ;", "if    (  (  ( c    =  =     ( CharPool . DASH )  )     |  |     ( c    =  =     ( CharPool . PERIOD )  )  )     |  |     ( c    =  =     ( CharPool . SPACE )  )  )     {", "if    ( sb    =  =    null )     {", "sb    =    new   StringBuilder (  (  ( name . length (  )  )     -     1  )  )  ;", "sb . append ( name ,    index ,    i )  ;", "}", "} else", "if    ( sb    !  =    null )     {", "sb . append ( c )  ;", "}", "}", "if    ( sb    =  =    null )     {", "return   name ;", "} else    {", "return   sb . toString (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getSafeName"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  (  (  ( array . length )     *     4  )     +     2  )  )  ;", "sb . append ( OPEN _ BRACKET )  ;", "for    ( int   i    =     0  ;    i    <     ( array . length )  ;    i +  +  )     {", "sb . append ( APOSTROPHE )  ;", "sb . append ( UnicodeFormatter . toString ( array [ i ]  )  )  ;", "sb . append ( APOSTROPHE )  ;", "if    (  ( i    +     1  )     <     ( array . length )  )     {", "sb . append ( COMMA )  ;", "}", "}", "sb . append ( CLOSE _ BRACKET )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toScript"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "return   JS . decodeURIComponent ( s )  ;", "}", "METHOD_END"], "methodName": ["unescape"], "fileName": "com.liferay.util.JS"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( s . length (  )  )  ;    i +  +  )     {", "if    (  ( s . charAt ( i )  )     >     1  2  7  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["_hasNonASCIICode"], "fileName": "com.liferay.util.Normalizer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Normalizer .  _ hasNonASCIICode ( s )  )  )     {", "return   s ;", "}", "String   normalizedText    =    Normalizer .  _ transliterator . transform ( s )  ;", "return   StringUtil . replace ( normalizedText ,    Normalizer .  _ UNICODE _ TEXT ,    Normalizer .  _ NORMALIZED _ TEXT )  ;", "}", "METHOD_END"], "methodName": ["normalizeToAscii"], "fileName": "com.liferay.util.Normalizer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Double . isNaN ( number )  )     |  |     ( Double . isInfinite ( number )  )  )     {", "return   n . format ( defaultValue )  ;", "} else    {", "return   n . format ( number )  ;", "}", "}", "METHOD_END"], "methodName": ["format"], "fileName": "com.liferay.util.NumberFormatUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Float . isNaN ( number )  )     |  |     ( Float . isInfinite ( number )  )  )     {", "return   n . format ( defaultValue )  ;", "} else    {", "return   n . format ( number )  ;", "}", "}", "METHOD_END"], "methodName": ["format"], "fileName": "com.liferay.util.NumberFormatUtil"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getBoolean ( getString ( key )  )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getDouble ( getString ( key )  )  ;", "}", "METHOD_END"], "methodName": ["getDouble"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getInteger ( getString ( key )  )  ;", "}", "METHOD_END"], "methodName": ["getInteger"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getLong ( getString ( key )  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getShort ( getString ( key )  )  ;", "}", "METHOD_END"], "methodName": ["getShort"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "String   value    =     _ fields . get ( key )  ;", "( value    =  =    null )     {", "return   StringPool . BLANK ;", "} else    {", "return   value ;", "}", "}", "METHOD_END"], "methodName": ["getString"], "fileName": "com.liferay.util.PKParser"}, {"methodBody": ["METHOD_START", "{", "return   RSSThreadLocal .  _ exportRSS . get (  )  ;", "}", "METHOD_END"], "methodName": ["isExportRSS"], "fileName": "com.liferay.util.RSSThreadLocal"}, {"methodBody": ["METHOD_START", "{", "RSSThreadLocal .  _ exportRSS . set ( exportRSS )  ;", "}", "METHOD_END"], "methodName": ["setExportRSS"], "fileName": "com.liferay.util.RSSThreadLocal"}, {"methodBody": ["METHOD_START", "{", "syndFeed . setTitle ( RSSUtil .  _ regexpStrip ( syndFeed . getTitle (  )  )  )  ;", "syndFeed . setDescription ( RSSUtil .  _ regexpStrip ( syndFeed . getDescription (  )  )  )  ;", "List < SyndEntry >    syndEntries    =    syndFeed . getEntries (  )  ;", "for    ( SyndEntry   syndEntry    :    syndEntries )     {", "syndEntry . setTitle ( RSSUtil .  _ regexpStrip ( syndEntry . getTitle (  )  )  )  ;", "SyndContent   syndContent    =    syndEntry . getDescription (  )  ;", "syndContent . setValue ( RSSUtil .  _ regexpStrip ( syndContent . getValue (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["_regexpStrip"], "fileName": "com.liferay.util.RSSUtil"}, {"methodBody": ["METHOD_START", "{", "text    =    Normalizer . normalizeToAscii ( text )  ;", "char [  ]    array    =    text . toCharArray (  )  ;", "for    ( int   i    =     0  ;    i    <     ( array . length )  ;    i +  +  )     {", "String   s    =    String . valueOf ( array [ i ]  )  ;", "if    (  !  ( s . matches (  .  _ REGEXP _ STRIP )  )  )     {", "array [ i ]     =    CharPool . SPACE ;", "}", "}", "return   new   String ( array )  ;", "}", "METHOD_END"], "methodName": ["_regexpStrip"], "fileName": "com.liferay.util.RSSUtil"}, {"methodBody": ["METHOD_START", "{", "feed . setEncoding ( UTF 8  )  ;", "SyndFeedOutput   output    =    new   SyndFeedOutput (  )  ;", "try    {", "return   output . outputString ( feed )  ;", "}    catch    ( IllegalDataException   ide )     {", ".  _ regexpStrip ( feed )  ;", "return   output . outputString ( feed )  ;", "}", "}", "METHOD_END"], "methodName": ["export"], "fileName": "com.liferay.util.RSSUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    object . getClass (  )  ;", "return    . deserialize (  . serialize ( object )  ,    clazz . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["clone"], "fileName": "com.liferay.util.SerializableUtil"}, {"methodBody": ["METHOD_START", "{", "try    ( ObjectInputStream   objectInputStream    =    new   com . liferay . portal . kernel . io . ProtectedObjectInputStream ( new   UnsyncByteArrayInputStream ( bytes )  )  )     {", "return   objectInputStream . readObject (  )  ;", "}    catch    ( ClassNotFoundException   cnfe )     {", "throw   new   RuntimeException ( cnfe )  ;", "}    catch    ( IOException   ioe )     {", "throw   new   RuntimeException ( ioe )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.liferay.util.SerializableUtil"}, {"methodBody": ["METHOD_START", "{", "try    ( ObjectInputStream   objectInputStream    =    new   com . liferay . portal . kernel . util . ProtectedClassLoaderObjectInputStream ( new   UnsyncByteArrayInputStream ( bytes )  ,    classLoader )  )     {", "return   objectInputStream . readObject (  )  ;", "}    catch    ( ClassNotFoundException   cnfe )     {", "throw   new   RuntimeException ( cnfe )  ;", "}    catch    ( IOException   ioe )     {", "throw   new   RuntimeException ( ioe )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.liferay.util.SerializableUtil"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   unsyncByteArrayOutputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "try    ( ObjectOutputStream   objectOutputStream    =    new   ObjectOutputStream ( unsyncByteArrayOutputStream )  )     {", "objectOutputStream . writeObject ( object )  ;", "}    catch    ( IOException   ioe )     {", "throw   new   RuntimeException ( ioe )  ;", "}", "return   unsyncByteArrayOutputStream . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.liferay.util.SerializableUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  _ counter )  +  +  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.SimpleCounter"}, {"methodBody": ["METHOD_START", "{", "return   String . valueOf ( get (  )  )  ;", "}", "METHOD_END"], "methodName": ["getString"], "fileName": "com.liferay.util.SimpleCounter"}, {"methodBody": ["METHOD_START", "{", "State   state    =     (  ( State )     ( obj )  )  ;", "if    (  (  ( getId (  )  )     !  =    null )     &  &     (  ( state . getId (  )  )     !  =    null )  )     {", "String   lowerCaseId    =    StringUtil . toLowerCase ( getId (  )  )  ;", "return   lowerCaseId . compareTo ( StringUtil . toLowerCase ( state . getId (  )  )  )  ;", "} else", "if    (  (  ( getName (  )  )     !  =    null )     &  &     (  ( state . getName (  )  )     !  =    null )  )     {", "String   lowerCaseName    =    StringUtil . toLowerCase ( getName (  )  )  ;", "return   lowerCaseName . compareTo ( StringUtil . toLowerCase ( state . getName (  )  )  )  ;", "} else    {", "return    -  1  ;", "}", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "com.liferay.util.State"}, {"methodBody": ["METHOD_START", "{", "return    _ id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.liferay.util.State"}, {"methodBody": ["METHOD_START", "{", "return    _ name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.liferay.util.State"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Arrays . binarySearch ( StateUtil . STATES ,    state )  )     >  =     0  )     {", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["isState"], "fileName": "com.liferay.util.StateUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Arrays . binarySearch ( StateUtil . STATE _ IDS _ ORDERED ,    stateId )  )     >  =     0  )     {", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["isStateId"], "fileName": "com.liferay.util.StateUtil"}, {"methodBody": ["METHOD_START", "{", "Set < ThreadLocal <  ?  >  >    threadLocalSet    =    ThirdPartyThreadLocalRegistry .  _ threadLocalSet . get (  )  ;", "threadLocalSet . add ( threadLocal )  ;", "}", "METHOD_END"], "methodName": ["registerThreadLocal"], "fileName": "com.liferay.util.ThirdPartyThreadLocalRegistry"}, {"methodBody": ["METHOD_START", "{", "Set < ThreadLocal <  ?  >  >    threadLocalSet    =    ThirdPartyThreadLocalRegistry .  _ threadLocalSet . get (  )  ;", "if    ( threadLocalSet    =  =    null )     {", "return ;", "}", "for    ( ThreadLocal <  ?  >    threadLocal    :    threadLocalSet )     {", "threadLocal . remove (  )  ;", "}", "}", "METHOD_END"], "methodName": ["resetThreadLocals"], "fileName": "com.liferay.util.ThirdPartyThreadLocalRegistry"}, {"methodBody": ["METHOD_START", "{", "setValue (  ( value    ?     \" TRUE \"     :     \" FALSE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.liferay.util.TimeZoneSensitive"}, {"methodBody": ["METHOD_START", "{", "Project   project    =    new   Project (  )  ;", "BuildLogger   buildLogger    =    new   DefaultLogger (  )     {", "@ Override", "public   void   messageLogged ( BuildEvent   buildEvent )     {", "int   priority    =    buildEvent . getPriority (  )  ;", "if    ( priority    >     ( msgOutputLevel )  )     {", "return ;", "}", "StringBundler   sb    =    new   StringBundler (  )  ;", "try    ( UnsyncBufferedReader   unsyncBufferedReader    =    new   UnsyncBufferedReader ( new   portal . kernel . io . unsync . UnsyncStringReader ( buildEvent . getMessage (  )  )  )  )     {", "boolean   first    =    true ;", "String   line    =    unsyncBufferedReader . readLine (  )  ;", "while    ( line    !  =    null )     {", "if    (  ! first )     {", "sb . append ( OS _ EOL )  ;", "}", "first    =    false ;", "sb . append ( DOUBLE _ SPACE )  ;", "sb . append ( line )  ;", "line    =    unsyncBufferedReader . readLine (  )  ;", "}", "}    catch    ( IOException   ioe )     {", "}", "String   message    =    sb . toString (  )  ;", "if    ( priority    !  =     ( Project . MSG _ ERR )  )     {", "printMessage ( message ,    out ,    priority )  ;", "} else    {", "printMessage ( message ,    err ,    priority )  ;", "}", "log ( message )  ;", "}", "}  ;", "buildLogger . setErrorPrintStream ( System . err )  ;", "buildLogger . setMessageOutputLevel ( MSG _ WARN )  ;", "buildLogger . setOutputPrintStream ( System . out )  ;", "project . addBuildListener ( buildLogger )  ;", "return   project ;", "}", "METHOD_END"], "methodName": ["getProject"], "fileName": "com.liferay.util.ant.AntUtil"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyDirectory ( source ,    destination ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyDirectory ( source ,    destination ,    includes ,    excludes ,    false ,    true )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "Copy   copy    =    new   Copy (  )  ;", "FileSet   fileSet    =    new   FileSet (  )  ;", "fileSet . setDir ( source )  ;", "if    ( Validator . isNotNull ( excludes )  )     {", "fileSet . setExcludes ( excludes )  ;", "}", "if    ( Validator . isNotNull ( includes )  )     {", "fileSet . setIncludes ( includes )  ;", "}", "copy . addFileset ( fileSet )  ;", "copy . setOverwrite ( overwrite )  ;", "copy . setPreserveLastModified ( preserveLastModified )  ;", "copy . setProject ( AntUtil . getProject (  )  )  ;", "copy . setTodir ( destination )  ;", "copy . execute (  )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyDirectory ( source ,    destination ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyDirectory ( new   File ( source )  ,    new   File ( destination )  ,    includes ,    excludes )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyDirectory ( new   File ( source )  ,    new   File ( destination )  ,    includes ,    excludes ,    overwrite ,    preserveLastModified )  ;", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyFile ( sourceFile ,    destinationDir ,    null ,    overwrite ,    preserveLastModified )  ;", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "Copy   copy    =    new   Copy (  )  ;", "copy . setFile ( sourceFile )  ;", "copy . setFiltering ( true )  ;", "copy . setOverwrite ( overwrite )  ;", "copy . setPreserveLastModified ( preserveLastModified )  ;", "copy . setProject ( AntUtil . getProject (  )  )  ;", "if    ( destinationFileName    =  =    null )     {", "copy . setTodir ( destinationDir )  ;", "} else    {", "copy . setTofile ( new   File ( destinationDir ,    destinationFileName )  )  ;", "}", "if    ( filterMap    !  =    null )     {", "FilterSet   filterSet    =    copy . createFilterSet (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    filterMap . entrySet (  )  )     {", "String   token    =    entry . getKey (  )  ;", "String   replacement    =    entry . getValue (  )  ;", "filterSet . addFilter ( token ,    replacement )  ;", "}", "}", "copy . execute (  )  ;", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "CopyTask . copyFile ( sourceFile ,    destinationDir ,    null ,    filterMap ,    overwrite ,    preserveLastModified )  ;", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.liferay.util.ant.CopyTask"}, {"methodBody": ["METHOD_START", "{", "Delete   delete    =    new   Delete (  )  ;", "delete . setProject ( AntUtil . getProject (  )  )  ;", "delete . setDir ( dir )  ;", "delete . setFailOnError ( false )  ;", "delete . execute (  )  ;", "}", "METHOD_END"], "methodName": ["deleteDirectory"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "DeleteTask . deleteDirectory ( new   File ( dir )  )  ;", "}", "METHOD_END"], "methodName": ["deleteDirectory"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "Delete   delete    =    new   Delete (  )  ;", "delete . setProject ( AntUtil . getProject (  )  )  ;", "delete . setFile ( file )  ;", "delete . setFailOnError ( false )  ;", "delete . execute (  )  ;", "}", "METHOD_END"], "methodName": ["deleteFile"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "DeleteTask . deleteFile ( new   File ( file )  )  ;", "}", "METHOD_END"], "methodName": ["deleteFile"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "Delete   delete    =    new   Delete (  )  ;", "delete . setProject ( AntUtil . getProject (  )  )  ;", "delete . setFailOnError ( false )  ;", "FileSet   fileSet    =    new   FileSet (  )  ;", "fileSet . setDir ( dir )  ;", "fileSet . setIncludes ( includes )  ;", "fileSet . setExcludes ( excludes )  ;", "delete . addFileset ( fileSet )  ;", "delete . execute (  )  ;", "}", "METHOD_END"], "methodName": ["deleteFiles"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "DeleteTask . deleteFiles ( new   File ( dir )  ,    includes ,    excludes )  ;", "}", "METHOD_END"], "methodName": ["deleteFiles"], "fileName": "com.liferay.util.ant.DeleteTask"}, {"methodBody": ["METHOD_START", "{", "Expand   expand    =    new   Expand (  )  ;", "expand . setDest ( destination )  ;", "expand . setProject ( AntUtil . getProject (  )  )  ;", "expand . setSrc ( source )  ;", "expand . execute (  )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.liferay.util.ant.ExpandTask"}, {"methodBody": ["METHOD_START", "{", "ExpandTask . expand ( new   File ( source )  ,    new   File ( destination )  )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.liferay.util.ant.ExpandTask"}, {"methodBody": ["METHOD_START", "{", "_ arguments    =    arguments ;", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "com.liferay.util.ant.FormatTask"}, {"methodBody": ["METHOD_START", "{", "_ property    =    property ;", "}", "METHOD_END"], "methodName": ["setProperty"], "fileName": "com.liferay.util.ant.FormatTask"}, {"methodBody": ["METHOD_START", "{", "_ separator    =    separator ;", "}", "METHOD_END"], "methodName": ["setSeparator"], "fileName": "com.liferay.util.ant.FormatTask"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( baseDir . exists (  )  )  )     |  |     (  !  ( baseDir . isDirectory (  )  )  )  )     {", "throw   new   BuildException (  )  ;", "}", "Set < String >    missingClassNames    =    new   HashSet <  >  (  )  ;", "missingClassNames . addAll ( classNames )  ;", "try    {", "Files . walkFileTree ( baseDir . toPath (  )  ,    new   SimpleFileVisitor < Path >  (  )     {", "@ Override", "public   FileVisitResult   preVisitDirectory ( Path   path ,    BasicFileAttributes   basicFileAttributes )    throws   IOException    {", "Path   fileNamePath    =    path . gName (  )  ;", "String   fileName    =    fileNamePath . toString (  )  ;", "if    (  _ isSkip ( fileName )  )     {", "return   FileVisitResult . SKIP _ SUBTREE ;", "}", "return   FileVisitResult . CONTINUE ;", "}", "@ Override", "public   FileVisitResult   visitFile ( Path   path ,    BasicFileAttributes   basicFileAttributes )    throws   IOException    {", "Path   fileNamePath    =    path . gName (  )  ;", "String   fileName    =    fileNamePath . toString (  )  ;", "for    ( String   className    :    classNames )     {", "if    (  _ isClass ( className ,    fileName )  )     {", "classPaths . add ( path )  ;", "missingClassNames . remove ( className )  ;", "} else", "if    ( fileName . equals ( className . concat (  \"  . java \"  )  )  )     {", "srcPaths . add ( path )  ;", "}", "}", "return   FileVisitResult . CONTINUE ;", "}", "}  )  ;", "}    catch    ( IOException   ioe )     {", "throw   new   BuildException ( ioe )  ;", "}", "return   missingClassNames ;", "}", "METHOD_END"], "methodName": ["_getMissingClassNames"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "for    ( String   className    :    classNames )     {", "if    ( className . endsWith (  \" Test \"  )  )     {", "invalidClassNames . add ( className )  ;", "}", "}", "if    (  !  ( invalidClassNames . isEmpty (  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["_hasInvalidClassNames"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "if    ( fileName . equals ( className . concat (  \"  . class \"  )  )  )     {", "return   true ;", "}", "if    (  ( fileName . startsWith ( className . concat (  \"  $  \"  )  )  )     &  &     ( fileName . endsWith (  \"  . class \"  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["_isClass"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( absoluteFileName . contains (  \" src \"  )  )  )     {", "int   x    =    absoluteFileName . lastIndexOf ( File . separator )  ;", "int   y    =    absoluteFileName . lastIndexOf (  \"  .  \"  )  ;", "invalidClassNames . add ( absoluteFileName . substring (  ( x    +     1  )  ,    y )  )  ;", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["_isInvalidClassName"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fileName . startsWith (  \"  .  \"  )  )     |  |     ( GetFileSetTask .  _ skipFileNames . contains ( fileName )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["_isSkip"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "_ classNames    =    classNames ;", "}", "METHOD_END"], "methodName": ["setClassNames"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "_ rootDir    =    rootDir ;", "}", "METHOD_END"], "methodName": ["setRootDir"], "fileName": "com.liferay.util.ant.GetFileSetTask"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Ey < String ,    Eleme   ey    :    eleme . eySet (  )  )     {", "ElemechildEleme =    ey . getValue (  )  ;", "elemeadd ( childEleme ;", "}", "}", "METHOD_END"], "methodName": ["_addElements"], "fileName": "com.liferay.util.ant.Java2WsddTask"}, {"methodBody": ["METHOD_START", "{", "content    =    Java 2 WsddTask .  _ stripComments ( content )  ;", "SAXReader   saxReader    =    new   SAXReader (  )  ;", "Document   document    =    saxReader . read ( new   XMLSafeReader ( content )  )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "Element   serviceElement    =    rootElement . element (  \" service \"  )  ;", "Map < String ,    Element >    arrayMappingElements    =    new   TreeMap <  >  (  )  ;", "Map < String ,    Element >    typeMappingElements    =    new   TreeMap <  >  (  )  ;", "Map < String ,    Element >    operationElements    =    new   TreeMap <  >  (  )  ;", "Map < String ,    Element >    parameterElements    =    new   TreeMap <  >  (  )  ;", "List < Element >    elements    =    serviceElement . elements (  )  ;", "for    ( Element   element    :    elements )     {", "String   elementName    =    element . getName (  )  ;", "if    ( elementName . equals (  \" arrayMapping \"  )  )     {", "element . detach (  )  ;", "arrayMappingElements . put ( Java 2 WsddTask .  _ formattedString ( element )  ,    element )  ;", "} else", "if    ( elementName . equals (  \" operation \"  )  )     {", "element . detach (  )  ;", "List < Element >    parameters    =    element . elements (  \" parameter \"  )  ;", "com . liferay . portal . kernel . util . StringBundler   sb    =    new   com . liferay . portal . kernel . util . StringBundler (  (  (  2     *     ( parameters . size (  )  )  )     +     2  )  )  ;", "String   name    =    element . attributeValue (  \" name \"  )  ;", "sb . append ( name )  ;", "sb . append (  \"  _ METHOD _  \"  )  ;", "for    ( Element   parameterElement    :    parameters )     {", "String   type    =    parameterElement . attributeValue (  \" type \"  )  ;", "sb . append ( type )  ;", "sb . append (  \"  _ PARAMETER _  \"  )  ;", "}", "operationElements . put ( sb . toString (  )  ,    element )  ;", "} else", "if    ( elementName . equals (  \" parameter \"  )  )     {", "element . detach (  )  ;", "String   name    =    element . attributeValue (  \" name \"  )  ;", "if    ( name . equals (  \" allowedMethods \"  )  )     {", "Attribute   valueAttribute    =    element . attribute (  \" value \"  )  ;", "String [  ]    values    =    StringUtil . split ( valueAttribute . getValue (  )  ,    CharPool . SPACE )  ;", "sort ( values )  ;", "valueAttribute . setValue ( StringUtil . merge ( values ,    StringPool . SPACE )  )  ;", "} else", "if    ( name . equals (  \" schemaUnqualified \"  )  )     {", "Attribute   valueAttribute    =    element . attribute (  \" value \"  )  ;", "String [  ]    values    =    StringUtil . split ( valueAttribute . getValue (  )  )  ;", "sort ( values )  ;", "valueAttribute . setValue ( StringUtil . merge ( values )  )  ;", "}", "parameterElements . put ( name ,    element )  ;", "} else", "if    ( elementName . equals (  \" typeMapping \"  )  )     {", "element . detach (  )  ;", "typeMappingElements . put ( Java 2 WsddTask .  _ formattedString ( element )  ,    element )  ;", "}", "}", "Java 2 WsddTask .  _ addElements ( serviceElement ,    arrayMappingElements )  ;", "Java 2 WsddTask .  _ addElements ( serviceElement ,    typeMappingElements )  ;", "Java 2 WsddTask .  _ addElements ( serviceElement ,    operationElements )  ;", "Java 2 WsddTask .  _ addElements ( serviceElement ,    parameterElements )  ;", "content    =    StringUtil . replace ( Java 2 WsddTask .  _ formattedString ( document )  ,     \"  \\  \"  /  >  \"  ,     \"  \\  \"     /  >  \"  )  ;", "return   content ;", "}", "METHOD_END"], "methodName": ["_format"], "fileName": "com.liferay.util.ant.Java2WsddTask"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   unsyncByteArrayOutputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "OutputFormat   outputFormat    =    OutputFormat . createPrettyPrint (  )  ;", "outputFormat . setExpandEmptyElements ( false )  ;", "outputFormat . setIndent ( TAB )  ;", "outputFormat . setLineSeparator ( NEW _ LINE )  ;", "outputFormat . setTrimText ( true )  ;", "XMLWriter   xmlWriter    =    new   XMLWriter ( unsyncByteArrayOutputStream ,    outputFormat )  ;", "xmlWriter . write ( node )  ;", "String   content    =    unsyncByteArrayOutputStream . toString ( UTF 8  )  ;", "if    ( content . endsWith (  \"  \\ n \\ n \"  )  )     {", "content    =    content . substring (  0  ,     (  ( content . length (  )  )     -     2  )  )  ;", "}", "if    ( content . endsWith (  \"  \\ n \"  )  )     {", "content    =    content . substring (  0  ,     (  ( content . length (  )  )     -     1  )  )  ;", "}", "while    ( content . contains (  \"     \\ n \"  )  )     {", "content    =    StringUreplace ( content ,     \"     \\ n \"  ,     \"  \\ n \"  )  ;", "}", "if    ( content . startsWith (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \"  )  )     {", "content    =    StringUreplaceFirst ( content ,     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \"  ,     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"  ?  >  \"  )  ;", "}", "return   content ;", "}", "METHOD_END"], "methodName": ["_formattedString"], "fileName": "com.liferay.util.ant.Java2WsddTask"}, {"methodBody": ["METHOD_START", "{", "return   StringUtil . stripBetween ( text ,     \"  <  !  -  -  \"  ,     \"  -  -  >  \"  )  ;", "}", "METHOD_END"], "methodName": ["_stripComments"], "fileName": "com.liferay.util.ant.Java2WsddTask"}, {"methodBody": ["METHOD_START", "{", "Path   tempDirPath    =    Files . createTempDirectory ( Paths . get ( SystemProperties . get ( TMP _ DIR )  )  ,    null )  ;", "File   tempDir    =    tempDirPath . toFile (  )  ;", "tempDir . mkdir (  )  ;", "String   wsdlFileName    =    tempDir    +     \"  / service . wsdl \"  ;", "int   pos    =    className . lastIndexOf (  \"  .  \"  )  ;", "String   packagePath    =    className . substring (  0  ,    pos )  ;", "String [  ]    packagePaths    =    StringUtil . split ( packagePath ,     '  .  '  )  ;", "String   namespace    =     \" urn :  \"  ;", "for    ( int   i    =     ( packagePaths . length )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "namespace    +  =    packagePaths [ i ]  ;", "if    ( i    >     0  )     {", "namespace    +  =     \"  .  \"  ;", "}", "}", "String   location    =     \" http :  /  / localhost / services /  \"     +    serviceName ;", "String   mappingPackage    =     ( packagePath . substring (  0  ,    packagePath . lastIndexOf (  \"  .  \"  )  )  )     +     \"  . ws \"  ;", "Project   project    =    AntUtil . getProject (  )  ;", "Java 2 WsdlAntTask   java 2 Wsdl    =    new   Java 2 WsdlAntTask (  )  ;", "NamespaceMapping   mapping    =    new   NamespaceMapping (  )  ;", "mapping . setNamespace ( namespace )  ;", "mapping . setPackage ( mappingPackage )  ;", "setProject ( project )  ;", "setClassName ( className )  ;", "if    ( Validator . isNotNull ( classPath )  )     {", "setClasspath ( new   Path ( project ,    classPath )  )  ;", "}", "setOutput ( new   File ( wsdlFileName )  )  ;", "setLocation ( location )  ;", "setNamespace ( namespace )  ;", "addMapping ( mapping )  ;", "execute (  )  ;", "Wsdl 2 javaAntTask   wsdl 2 Java    =    new   Wsdl 2 javaAntTask (  )  ;", "wsdl 2 Java . setProject ( project )  ;", "wsdl 2 Java . setURL ( wsdlFileName )  ;", "wsdl 2 Java . setOutput ( tempDir )  ;", "wsdl 2 Java . setServerSide ( true )  ;", "wsdl 2 Java . setTestCase ( false )  ;", "wsdl 2 Java . setVerbose ( false )  ;", "wsdl 2 Java . execute (  )  ;", "String   packagePathWithSlashes    =    StringUtil . replace ( packagePath ,    PERIOD ,    SLASH )  ;", "File   deployFile    =    new   File ( StringBundler . concat ( String . valueOf ( tempDir )  ,     \"  /  \"  ,    packagePathWithSlashes ,     \"  / deploy . wsdd \"  )  )  ;", "String   deployContent    =    new   String ( Files . readAllBytes ( deployFile . toPath (  )  )  )  ;", "deployContent    =    StringUtil . replace ( deployContent ,    StringBundler . concat ( packagePath ,     \"  .  \"  ,    serviceName ,     \" SoapBindingImpl \"  )  ,    className )  ;", "deployContent    =     .  _ format ( deployContent )  ;", "File   undeployFile    =    new   File ( StringBundler . concat ( String . valueOf ( tempDir )  ,     \"  /  \"  ,    packagePathWithSlashes ,     \"  / undeploy . wsdd \"  )  )  ;", "String   undeployContent    =    new   String ( Files . readAllBytes ( undeployFile . toPath (  )  )  )  ;", "undeployContent    =     .  _ format ( undeployContent )  ;", "DeleteTask . deleteDirectory ( tempDir )  ;", "return   new   String [  ]  {    deployContent ,    undeployContent    }  ;", "}", "METHOD_END"], "methodName": ["generateWsdd"], "fileName": "com.liferay.util.ant.Java2WsddTask"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ projectDirPropertyName )     =  =    null )     {", "throw   new   BuildException (  \" Attribute   projectDirPropertyName   must   be   set \"  )  ;", "}", "Project   project    =    getProject (  )  ;", "project . setProperty (  \" build . revision \"  ,    getBuildRevision (  )  )  ;", "project . setProperty (  \" build . time \"  ,    getDateString ( new   Date (  )  )  )  ;", "project . setProperty (  \" release . info . build . date \"  ,    String . valueOf ( ReleaseInfo . getBuildDate (  )  )  )  ;", "project . setProperty (  \" release . info . build . number \"  ,    String . valueOf ( ReleaseInfo . getBuildNumber (  )  )  )  ;", "project . setProperty (  \" release . info . code . name \"  ,    ReleaseInfo . getCodeName (  )  )  ;", "project . setProperty (  \" release . info . parent . build . number \"  ,    String . valueOf ( ReleaseInfo . getParentBuildNumber (  )  )  )  ;", "project . setProperty (  \" release . info . release . info \"  ,    ReleaseInfo . getReleaseInfo (  )  )  ;", "project . setProperty (  \" release . info . server . info \"  ,    ReleaseInfo . getServerInfo (  )  )  ;", "project . setProperty (  \" release . info . vendor \"  ,    ReleaseInfo . getVendor (  )  )  ;", "String   releaseInfoVersion    =    project . getProperty (  \" release . info . version \"  )  ;", "if    ( Validator . isNull ( releaseInfoVersion )  )     {", "project . setProperty (  \" release . info . version \"  ,    ReleaseInfo . getVersion (  )  )  ;", "}", "if    (  !  (  _ analyze )  )     {", "return ;", "}", "try    ( Analyzer   analyzer    =    new   Analyzer (  )  )     {", "analyzer . setBase ( project . getBaseDir (  )  )  ;", "File   classesDir    =    new   File ( project . getBaseDir (  )  ,     \" classes \"  )  ;", "analyzer . setJar ( classesDir )  ;", "File   file    =    new   File ( project . getBaseDir (  )  ,     \" bnd . bnd \"  )  ;", "if    ( file . exists (  )  )     {", "analyzer . setProperties ( file )  ;", "} else    {", "analyzer . setProperty ( EXPORT _ PACKAGE ,     \"  *  \"  )  ;", "analyzer . setProperty ( IMPORT _ PACKAGE ,     \"  *  ; resolution :  = optional \"  )  ;", "}", "manifest    =    analyzer . calc (  )  ;", "Attributes   attributes    =    manifest . getMainAttributes (  )  ;", "project . setProperty (  \" export . packages \"  ,    attributes . getValue ( EXPORT _ PACKAGE )  )  ;", "project . setProperty (  \" import . packages \"  ,    attributes . getValue ( IMPORT _ PACKAGE )  )  ;", "}", "}", "METHOD_END"], "methodName": ["doExecute"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "Runtime   runtime    =    Runtime . getRuntime (  )  ;", "Process   process    =    runtime . exec ( command )  ;", "return   StringUread ( process . getInputStream (  )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "Project   project    =    getProject (  )  ;", "File   projectDir    =    new   File ( project . getBaseDir (  )  ,    project . getProty (  _ projectDirProtyName )  )  ;", "File   gitDir    =    new   File ( projectDir ,     \"  . git \"  )  ;", "if    ( gitDir . exists (  )  )     {", "if    ( OSDetector . isWindows (  )  )     {", "return   execute (  \" cmd    / c   git   rev - parse   HEAD \"  )  ;", "} else    {", "return   execute (  \" git   rev - parse   HEAD \"  )  ;", "}", "}", "File   svnDir    =    new   File ( projectDir ,     \"  . svn \"  )  ;", "if    ( svnDir . exists (  )  )     {", "if    ( OSDetector . isWindows (  )  )     {", "return   execute (  \" cmd    / c   svnversion    .  \"  )  ;", "} else    {", "return   execute (  \" svnversion    .  \"  )  ;", "}", "}", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getBuildRevision"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "DateFormat   dateFormat    =    new   SimpleDateFormat ( ManifestHelperTask .  _ PATTERN )  ;", "return   dateFormat . format ( date )  ;", "}", "METHOD_END"], "methodName": ["getDateString"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "_ analyze    =    analyze ;", "}", "METHOD_END"], "methodName": ["setAnalyze"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ path )     =  =    null )     {", "_ path    =    new   Path ( getProject (  )  )  ;", "}", "Path   path    =     _ path . createPath (  )  ;", "path . setRefid ( reence )  ;", "}", "METHOD_END"], "methodName": ["setClasspathRef"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "_ projectDirPropertyName    =    projectDirPropertyName ;", "}", "METHOD_END"], "methodName": ["setProjectDirPropertyName"], "fileName": "com.liferay.util.ant.ManifestHelperTask"}, {"methodBody": ["METHOD_START", "{", "String   parentFile    =    file . getParent (  )  ;", "if    ( parentFile    !  =    null )     {", "MkdirTask . mkdir ( parentFile )  ;", "}", "taskdefs   manifest    =    new   taskdefs (  )  ;", "manifest . setProject ( AntUtil . getProject (  )  )  ;", "manifest . setFile ( file )  ;", "for    ( int   i    =     0  ;    i    <     ( attributes . length )  ;    i +  +  )     {", "manifest . addConfiguredAttribute ( attributes [ i ]  )  ;", "}", "manifest . execute (  )  ;", "}", "METHOD_END"], "methodName": ["manifest"], "fileName": "com.liferay.util.ant.ManifestTask"}, {"methodBody": ["METHOD_START", "{", "ManifestTask . manifest ( new   File ( file )  ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["manifest"], "fileName": "com.liferay.util.ant.ManifestTask"}, {"methodBody": ["METHOD_START", "{", "Mkdir   mkdir    =    new   Mkdir (  )  ;", "mkdir . setProject ( AntUtil . getProject (  )  )  ;", "mkdir . setDir ( dir )  ;", "mkdir . execute (  )  ;", "}", "METHOD_END"], "methodName": ["mkdir"], "fileName": "com.liferay.util.ant.MkdirTask"}, {"methodBody": ["METHOD_START", "{", "MkdirTask . mkdir ( new   File ( dir )  )  ;", "}", "METHOD_END"], "methodName": ["mkdir"], "fileName": "com.liferay.util.ant.MkdirTask"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( source . exists (  )  )  )     |  |     (  !  ( target . exists (  )  )  )  )     {", "return   false ;", "}", "Project   project    =    AntUtil . getProject (  )  ;", "upToDate    =    new    (  )  ;", "upToDate . setProject ( project )  ;", "upToDate . setProperty (  \" uptodate \"  )  ;", "upToDate . setSrcfile ( source )  ;", "upToDate . setTargetFile ( target )  ;", "upToDate . execute (  )  ;", "if    (  ( project . getProperty (  \" uptodate \"  )  )     !  =    null )     {", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["isUpToDate"], "fileName": "com.liferay.util.ant.UpToDateTask"}, {"methodBody": ["METHOD_START", "{", "return   UpToDateTask . isUpToDate ( new   File ( source )  ,    new   File ( target )  )  ;", "}", "METHOD_END"], "methodName": ["isUpToDate"], "fileName": "com.liferay.util.ant.UpToDateTask"}, {"methodBody": ["METHOD_START", "{", "Project   project    =    AntUtil . getProject (  )  ;", "War   war    =    new   War (  )  ;", "war . setBasedir ( baseDir )  ;", "war . setDestFile ( destination )  ;", "war . setExcludes ( excludes )  ;", "File   manifestFile    =    new   File (  (  ( baseDir . getAbsolutePath (  )  )     +     \"  / META - INF / MANIFEST . MF \"  )  )  ;", "if    ( manifestFile . exists (  )  )     {", "war . setManifest ( manifestFile )  ;", "}", "war . setProject ( project )  ;", "war . setWebxml ( webxml )  ;", "war . execute (  )  ;", "}", "METHOD_END"], "methodName": ["war"], "fileName": "com.liferay.util.ant.WarTask"}, {"methodBody": ["METHOD_START", "{", "WarTask . war ( new   File ( baseDir )  ,    new   File ( destination )  ,    excludes ,    new   File ( webxml )  )  ;", "}", "METHOD_END"], "methodName": ["war"], "fileName": "com.liferay.util.ant.WarTask"}, {"methodBody": ["METHOD_START", "{", "Wsdl 2 JavaTask . generateJava ( url ,    output ,    null )  ;", "}", "METHOD_END"], "methodName": ["generateJava"], "fileName": "com.liferay.util.ant.Wsdl2JavaTask"}, {"methodBody": ["METHOD_START", "{", "Wsdl 2 javaAntTask   wsdl 2 Java    =    new   Wsdl 2 javaAntTask (  )  ;", "if    ( mapping    !  =    null )     {", "NamespaceMapping   namespaceMapping    =    new   NamespaceMapping (  )  ;", "namespaceMapping . setFile ( new   File ( mapping )  )  ;", "wsdl 2 Java . addMapping ( namespaceMapping )  ;", "}", "wsdl 2 Java . setFailOnNetworkErrors ( true )  ;", "wsdl 2 Java . setOutput ( new   File ( output )  )  ;", "wsdl 2 Java . setPrintStackTraceOnFailure ( true )  ;", "wsdl 2 Java . setProject ( AntUtil . getProject (  )  )  ;", "wsdl 2 Java . setServerSide ( true )  ;", "wsdl 2 Java . setTestCase ( false )  ;", "wsdl 2 Java . setURL ( url )  ;", "try    {", "wsdl 2 Java . execute (  )  ;", "}    catch    ( Exception   e )     {", "e . printStackTrace (  )  ;", "}", "}", "METHOD_END"], "methodName": ["generateJava"], "fileName": "com.liferay.util.ant.Wsdl2JavaTask"}, {"methodBody": ["METHOD_START", "{", "MethodSignature   methodSignature    =     (  ( MethodSignature )     ( proceedingJoinPoint . getSignature (  )  )  )  ;", "return    . getMethod ( methodSignature )  ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "com.liferay.util.aspectj.AspectJUtil"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    null ;", "if    ( ServerDetor . isWebSphere (  )  )     {", "Class <  ?  >    declaringType    =    methodSignature . getDeclaringType (  )  ;", "String   name    =    methodSignature . getName (  )  ;", "Class <  ?  >  [  ]    parameterTypes    =    methodSignature . getParameterTypes (  )  ;", "method    =    declaringType . getMethod ( name ,    parameterTypes )  ;", "} else    {", "method    =    methodSignature . getMethod (  )  ;", "}", "return   method ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "com.liferay.util.aspectj.AspectJUtil"}, {"methodBody": ["METHOD_START", "{", "_ ready    =    false ;", "sup . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["doDestroy"], "fileName": "com.liferay.util.axis.AxisServlet"}, {"methodBody": ["METHOD_START", "{", "super . init (  _ servletConfig )  ;", "_ fixContent    =    GetterUtil . getBoolean (  _ servletConfig . getInitParameter (  \" fix - content \"  )  ,    true )  ;", "_ ready    =    true ;", "}", "METHOD_END"], "methodName": ["doInit"], "fileName": "com.liferay.util.axis.AxisServlet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( xml . contains (  \"  < wsdl : definitions \"  )  )  )     {", "return   xml ;", "}", "xml    =    StringUreplace ( xml ,    new   String [  ]  {     \"  \\ r \\ n \"  ,     \"  \\ n \"  ,     \"        \"  ,     \"  >     <  \"  ,     _ incorrectOrderByComparator ,     _ incorrectLongArray ,     _ incorrectStringArray    }  ,    new   String [  ]  {    StringPool . BLANK ,    StringPool . BLANK ,    StringPool . BLANK ,     \"  >  <  \"  ,     _ correctOrderByComparator ,     _ correctLongArray ,     _ correctStringArray    }  )  ;", "Document   document    =    UnsecureSAXReaderUread ( xml )  ;", "return   document . formattedString (  )  ;", "}", "METHOD_END"], "methodName": ["fixXml"], "fileName": "com.liferay.util.axis.AxisServlet"}, {"methodBody": ["METHOD_START", "{", "MessageContext   messageContext    =    AxisEngine . getCurrentMessageContext (  )  ;", "return    (  ( HttpRequest )     ( messageContext . getProperty ( MC _ HTTP _ SERVLETREQUEST )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRequest"], "fileName": "com.liferay.util.axis.ServletUtil"}, {"methodBody": ["METHOD_START", "{", "MessageContext   messageContext    =    AxisEngine . getCurrentMessageContext (  )  ;", "return    (  ( Http )     ( messageContext . getProperty ( MC _ HTTP _ SERVLET )  )  )  ;", "}", "METHOD_END"], "methodName": ["getServlet"], "fileName": "com.liferay.util.axis.ServletUtil"}, {"methodBody": ["METHOD_START", "{", "return   ServletUtil . getServlet (  )  . getServletContext (  )  ;", "}", "METHOD_END"], "methodName": ["getServletContext"], "fileName": "com.liferay.util.axis.ServletUtil"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   request    =    ServletUtil . getRequest (  )  ;", "return   request . getSession (  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.liferay.util.axis.ServletUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   userName    =    messageContext . getUsername (  )  ;", "String   password    =    messageContext . getPassword (  )  ;", "if    (  ( userName    !  =    null )     &  &     ( password    !  =    null )  )     {", "Authenticator . setDefault ( new   Authenticator ( userName ,    password )  )  ;", "}", "URL   urlObj    =    new   URL ( url )  ;", "URLConnection   urlConnection    =    urlObj . openConnection (  )  ;", "_ writeToConnection ( urlConnection ,    messageContext )  ;", "_ readFromConnection ( urlConnection ,    messageContext )  ;", "}    catch    ( Exception   e )     {", "throw   AxisFault . makeFault ( e )  ;", "}    finally    {", "Authenticator . setDefault ( null )  ;", "}", "}", "METHOD_END"], "methodName": ["_invoke"], "fileName": "com.liferay.util.axis.SimpleHTTPSender"}, {"methodBody": ["METHOD_START", "{", "HttpURLConnection   httpURLConnection    =     (  ( HttpURLConnection )     ( urlConnection )  )  ;", "InputStream   inputStream    =    httpURLConnection . getErrorStream (  )  ;", "if    ( inputStream    =  =    null )     {", "inputStream    =    urlConnection . getInputStream (  )  ;", "}", "inputStream    =    new   UnsyncBufedInputStream ( inputStream ,     8  1  9  2  )  ;", "String   contentType    =    urlConnection . getContentType (  )  ;", "String   contentLocation    =    urlConnection . getHeaderField (  \" Content - Location \"  )  ;", "Message   message    =    new   Message ( inputStream ,    false ,    contentType ,    contentLocation )  ;", "message . setMessageType ( RESPONSE )  ;", "messageContext . setResponseMessage ( message )  ;", "}", "METHOD_END"], "methodName": ["_readFromConnection"], "fileName": "com.liferay.util.axis.SimpleHTTPSender"}, {"methodBody": ["METHOD_START", "{", "urlConnection . setDoOutput ( true )  ;", "Message   message    =    messageContext . getRequestMessage (  )  ;", "String   contentType    =    message . getContentType ( messageContext . getSOAPConstants (  )  )  ;", "urlConnection . setRequestProperty (  \" Content - Type \"  ,    contentType )  ;", "if    ( messageContext . useSOAPAction (  )  )     {", "urlConnection . setRequestProperty (  \" SOAPAction \"  ,    messageContext . getSOAPActionURI (  )  )  ;", "}", "OutputStream   outputStream    =    new   UnsyncBufedOutputStream ( urlConnection . getOutputStream (  )  ,     8  1  9  2  )  ;", "message . writeTo ( outputStream )  ;", "outputStream . flush (  )  ;", "}", "METHOD_END"], "methodName": ["_writeToConnection"], "fileName": "com.liferay.util.axis.SimpleHTTPSender"}, {"methodBody": ["METHOD_START", "{", "return   PortletBeanLocatorUtil .  _ beanLocator ;", "}", "METHOD_END"], "methodName": ["getBeanLocator"], "fileName": "com.liferay.util.bean.PortletBeanLocatorUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( PortletBeanLocatorUtil .  _ beanLocator )     =  =    null )     {", "PortletBeanLocatorUtil .  _ log . error (  \" BeanLocator   is   null \"  )  ;", "throw   new   BeanLocatorException (  \" BeanLocator   is   not   set \"  )  ;", "} else    {", "return   PortletBeanLocatorUtil .  _ beanLocator . locate ( name )  ;", "}", "}", "METHOD_END"], "methodName": ["locate"], "fileName": "com.liferay.util.bean.PortletBeanLocatorUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( PortletBeanLocatorUtil .  _ log . isDebugEnabled (  )  )     {", "if    ( beanLocator    !  =    null )     {", "PortletBeanLocatorUtil .  _ log . debug (  (  \" Setting   BeanLocator    \"     +     ( beanLocator . hashCode (  )  )  )  )  ;", "} else    {", "PortletBeanLocatorUtil .  _ log . debug (  \" Setting   BeanLocator   null \"  )  ;", "}", "}", "PortletBeanLocatorUtil .  _ beanLocator    =    beanLocator ;", "}", "METHOD_END"], "methodName": ["setBeanLocator"], "fileName": "com.liferay.util.bean.PortletBeanLocatorUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( isVendorMySQL (  )  )  )     &  &     (  !  ( isVendorOracle (  )  )  )  )     {", "return   keywords ;", "}", "StringBuilder   sb    =    new   StringBuilder ( keywords )  ;", "for    ( int   i    =     0  ;    i    <     ( sb . length (  )  )  ;     +  + i )     {", "char   c    =    sb . charAt ( i )  ;", "if    ( c    =  =     ( CharPool . BACK _ SLASH )  )     {", "i +  +  ;", "continue ;", "}", "if    (  ( c    =  =     ( CharPool . UNDERLINE )  )     |  |     ( c    =  =     ( CharPool . PERCENT )  )  )     {", "sb . insert ( i ,    BACK _ SLASH )  ;", "i +  +  ;", "continue ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["_escapeWildCards"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "try    ( InputStream   is    =    classLoader . getResourceAsStream ( source )  )     {", "if    ( is    =  =    null )     {", "return ;", "}", "if    (  .  _ log . isDebugEnabled (  )  )     {", ".  _ log . debug (  (  \" Loading    \"     +    source )  )  ;", "}", "Document   document    =    UnsecureSAXReaderUtil . read ( is )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "for    ( Element   sqlElement    :    rootElement . elements (  \" sql \"  )  )     {", "String   file    =    sqlElement . attributeValue (  \" file \"  )  ;", "if    ( Validator . isNotNull ( file )  )     {", "_ read ( classLoader ,    file ,    sqlPool )  ;", "} else    {", "String   id    =    sqlElement . attributeValue (  \" id \"  )  ;", "String   content    =    transform ( sqlElement . getText (  )  )  ;", "content    =    replaceIsNull ( content )  ;", "sqlPool . put ( id ,    content )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["_read"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNull ( criteria )  )     {", "return   sql ;", "}", "if    (  !  ( criteria . startsWith ( SPACE )  )  )     {", "criteria    =    SPACE . concat ( criteria )  ;", "}", "if    (  !  ( criteria . endsWith ( SPACE )  )  )     {", "criteria    =    criteria . concat ( SPACE )  ;", "}", "int   pos    =    sql . indexOf (  .  _ GROUP _ BY _ CLAUSE )  ;", "if    ( pos    !  =     (  -  1  )  )     {", "return   sql . substring (  0  ,     ( pos    +     1  )  )  . concat ( criteria )  . concat ( sql . substring (  ( pos    +     1  )  )  )  ;", "}", "pos    =    sql . indexOf (  .  _ ORDER _ BY _ CLAUSE )  ;", "if    ( pos    !  =     (  -  1  )  )     {", "return   sql . substring (  0  ,     ( pos    +     1  )  )  . concat ( criteria )  . concat ( sql . substring (  ( pos    +     1  )  )  )  ;", "}", "return   sql . concat ( criteria )  ;", "}", "METHOD_END"], "methodName": ["appendCriteria"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ sqlPool . get ( id )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   get ( id ,    queryDefinition ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    get ( id )  ;", "if    (  (  !  ( Validator . isBlank ( tableName )  )  )     &  &     (  !  ( tableName . endsWith ( PERIOD )  )  )  )     {", "tableName    =    tableName . concat ( PERIOD )  ;", "}", "if    (  ( queryDefinition . getStatus (  )  )     =  =     ( WorkflowConstants . STATUS _ ANY )  )     {", "sql    =    sql . replace (  .  _ STATUS _ KEYWORD ,     .  _ STATUS _ CONDITION _ EMPTY )  ;", "} else    {", "if    ( queryDefinition . isExcludeStatus (  )  )     {", "sql    =    sql . replace (  .  _ STATUS _ KEYWORD ,    tableName . concat (  .  _ STATUS _ CONDITION _ INVERSE )  )  ;", "} else    {", "sql    =    sql . replace (  .  _ STATUS _ KEYWORD ,    tableName . concat (  .  _ STATUS _ CONDITION _ DEFAULT )  )  ;", "}", "}", "if    (  ( queryDefinition . getOwnerUserId (  )  )     >     0  )     {", "if    ( queryDefinition . isIncludeOwner (  )  )     {", "StringBundler   sb    =    new   StringBundler (  7  )  ;", "sb . append ( OPEN _ PARENTHESIS )  ;", "sb . append ( tableName )  ;", "sb . append (  .  _ OWNER _ USER _ ID _ CONDITION _ DEFAULT )  ;", "sb . append (  \"    AND    \"  )  ;", "sb . append ( tableName )  ;", "sb . append (  .  _ STATUS _ CONDITION _ INVERSE )  ;", "sb . append ( CLOSE _ PARENTHESIS )  ;", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ KEYWORD ,    sb . toString (  )  )  ;", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ AND _ OR _ CONNECTOR ,     \"    OR    \"  )  ;", "} else    {", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ KEYWORD ,    tableName . concat (  .  _ OWNER _ USER _ ID _ CONDITION _ DEFAULT )  )  ;", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ AND _ OR _ CONNECTOR ,     \"    AND    \"  )  ;", "}", "} else    {", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ KEYWORD ,    BLANK )  ;", "sql    =    sql . replace (  .  _ OWNER _ USER _ ID _ AND _ OR _ CONNECTOR ,    BLANK )  ;", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   classLoader    =    CustomSQL . class . getClassLoader (  )  ;", "if    ( PortalClassLoaderUtil . isPortalClassLoader ( classLoader )  )     {", "Properties   propsUtil    =    PortalUtil . getPortalProperties (  )  ;", "return   StringUtil . split ( propsUtil . getProperty (  \" custom . sql . configs \"  )  )  ;", "}", "if    (  ( classLoader . getResource (  \" portlet . properties \"  )  )     !  =    null )     {", "Configuration   configuration    =    ConfigurationFactoryUtil . getConfiguration ( classLoader ,     \" portlet \"  )  ;", "return   ArrayUtil . append ( StringUtil . split ( configuration . get (  \" custom . sql . configs \"  )  )  ,    new   String [  ]  {     \" custom - sql / default . xml \"  ,     \" META - INF / custom - sql / default . xml \"     }  )  ;", "}", "return   new   String [  ]  {     \" custom - sql / default . xml \"  ,     \" META - INF / custom - sql / default . xml \"     }  ;", "}", "METHOD_END"], "methodName": ["getConfigs"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( wildcardMode    =  =     ( WildcardMode . LEADING )  )     {", "return   PERCENT . concat ( keyword )  ;", "} else", "if    ( wildcardMode    =  =     ( WildcardMode . SURROUND )  )     {", "return   portal . kernel . util . StringUtil . quote ( keyword ,    PERCENT )  ;", "} else", "if    ( wildcardMode    =  =     ( WildcardMode . TRAILING )  )     {", "return   keyword . concat ( PERCENT )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Invalid   wildcard   mode    \"     +    wildcardMode )  )  ;", "}", "}", "METHOD_END"], "methodName": ["insertWildcard"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorDB 2  ;", "}", "METHOD_END"], "methodName": ["isVendorDB2"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorHSQL ;", "}", "METHOD_END"], "methodName": ["isVendorHSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorInformix ;", "}", "METHOD_END"], "methodName": ["isVendorInformix"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorMySQL ;", "}", "METHOD_END"], "methodName": ["isVendorMySQL"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorOracle ;", "}", "METHOD_END"], "methodName": ["isVendorOracle"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorPostgreSQL ;", "}", "METHOD_END"], "methodName": ["isVendorPostgreSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return    _ vendorSybase ;", "}", "METHOD_END"], "methodName": ["isVendorSybase"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   keywords ( keywords ,    true ,    SURROUND )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   keywords ( keywords ,    lowerCase ,    SURROUND )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNull ( keywords )  )     {", "return   new   String [  ]  {    null    }  ;", "}", "if    (  .  _ CUSTOM _ SQL _ AUTO _ ESCAPE _ WILDCARDS _ ENABLED )     {", "keywords    =     _ escapeWildCards ( keywords )  ;", "}", "if    ( lowerCase )     {", "keywords    =    StringUtil . toLowerCase ( keywords )  ;", "}", "keywords    =    keywords . trim (  )  ;", "List < String >    keywordsList    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( keywords . length (  )  )  ;    i +  +  )     {", "char   c    =    keywords . charAt ( i )  ;", "if    ( c    =  =     ( CharPool . QUOTE )  )     {", "int   pos    =    i    +     1  ;", "i    =    keywords . indexOf ( QUOTE ,    pos )  ;", "if    ( i    =  =     (  -  1  )  )     {", "i    =    keywords . length (  )  ;", "}", "if    ( i    >    pos )     {", "String   keyword    =    keywords . substring ( pos ,    i )  ;", "keywordsList . add ( insertWildcard ( keyword ,    wildcardMode )  )  ;", "}", "} else    {", "while    ( Character . isWhitespace ( c )  )     {", "i +  +  ;", "c    =    keywords . charAt ( i )  ;", "}", "int   pos    =    i ;", "while    (  !  ( Character . isWhitespace ( c )  )  )     {", "i +  +  ;", "if    ( i    =  =     ( keywords . length (  )  )  )     {", "break ;", "}", "c    =    keywords . charAt ( i )  ;", "}", "String   keyword    =    keywords . substring ( pos ,    i )  ;", "keywordsList . add ( insertWildcard ( keyword ,    wildcardMode )  )  ;", "}", "}", "return   keywordsList . toArray ( new   String [ keywordsList . size (  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   keywords ( keywords ,    true ,    wildcardMode )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   keywords ( keywordsArray ,    true )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( ArrayUtil . isEmpty ( keywordsArray )  )     {", "return   new   String [  ]  {    null    }  ;", "}", "if    ( lowerCase )     {", "for    ( int   i    =     0  ;    i    <     ( keywordsArray . length )  ;    i +  +  )     {", "keywordsArray [ i ]     =    StringUtil . lowerCase ( keywordsArray [ i ]  )  ;", "}", "}", "return   keywordsArray ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "PortalUtil . initCustomSQL (  )  ;", "Connection   con    =    DataAccess . getConnection (  )  ;", "String   functionIsNull    =    PortalUtil . getCustomSQLFunctionIsNull (  )  ;", "String   functionIsNotNull    =    PortalUtil . getCustomSQLFunctionIsNotNull (  )  ;", "try    {", "if    (  ( Validator . isNotNull ( functionIsNull )  )     &  &     ( Validator . isNotNull ( functionIsNotNull )  )  )     {", "_ functionIsNull    =    functionIsNull ;", "_ functionIsNotNull    =    functionIsNotNull ;", "if    ( CustomSQL .  _ log . isDebugEnabled (  )  )     {", "CustomSQL .  _ log . debug (  (  \" functionIsNull   is   manually   set   to    \"     +    functionIsNull )  )  ;", "CustomSQL .  _ log . debug (  (  \" functionIsNotNull   is   manually   set   to    \"     +    functionIsNotNull )  )  ;", "}", "} else", "if    ( con    !  =    null )     {", "DatabaseMetaData   metaData    =    con . getMetaData (  )  ;", "String   dbName    =    portal . kernel . util . GetterUtil . getString ( metaData . getDatabaseProductName (  )  )  ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Database   name    \"     +    dbName )  )  ;", "}", "if    ( dbName . startsWith (  \" DB 2  \"  )  )     {", "_ vendorDB 2     =    true ;", "_ functionIsNull    =    CustomSQL . DB 2  _ FUNCTION _ IS _ NULL ;", "_ functionIsNotNull    =    CustomSQL . DB 2  _ FUNCTION _ IS _ NOT _ NULL ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   DB 2    with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    ( dbName . startsWith (  \" HSQL \"  )  )     {", "_ vendorHSQL    =    true ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   HSQL   with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    ( dbName . startsWith (  \" Informix \"  )  )     {", "_ vendorInformix    =    true ;", "_ functionIsNull    =    CustomSQL . INFORMIX _ FUNCTION _ IS _ NULL ;", "_ functionIsNotNull    =    CustomSQL . INFORMIX _ FUNCTION _ IS _ NOT _ NULL ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   Informix   with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    ( dbName . startsWith (  \" MySQL \"  )  )     {", "_ vendorMySQL    =    true ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   MySQL   with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    (  ( dbName . startsWith (  \" Sybase \"  )  )     |  |     ( dbName . equals (  \" ASE \"  )  )  )     {", "_ vendorSybase    =    true ;", "_ functionIsNull    =    CustomSQL . SYBASE _ FUNCTION _ IS _ NULL ;", "_ functionIsNotNull    =    CustomSQL . SYBASE _ FUNCTION _ IS _ NOT _ NULL ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   Sybase   with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    ( dbName . startsWith (  \" Oracle \"  )  )     {", "_ vendorOracle    =    true ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   Oracle   with   database   name    \"     +    dbName )  )  ;", "}", "} else", "if    ( dbName . startsWith (  \" PostgreSQL \"  )  )     {", "_ vendorPostgreSQL    =    true ;", "if    ( CustomSQL .  _ log . isInfoEnabled (  )  )     {", "CustomSQL .  _ log . info (  (  \" Detected   PostgreSQL   with   database   name    \"     +    dbName )  )  ;", "}", "} else    {", "if    ( CustomSQL .  _ log . isDebugEnabled (  )  )     {", "CustomSQL .  _ log . debug (  (  \" Unable   to   detect   database   with   name    \"     +    dbName )  )  ;", "}", "}", "}", "}    catch    ( Exception   e )     {", "CustomSQL .  _ log . error ( e ,    e )  ;", "}    finally    {", "DataAccess . cleanUp ( con )  ;", "}", "try    {", "Class <  ?  >    clazz    =    getClass (  )  ;", "ClassLoader   classLoader    =    clazz . getClassLoader (  )  ;", "String [  ]    configs    =    getConfigs (  )  ;", "Map < String ,    String >    sqlPool    =    new   HashMap <  >  (  )  ;", "for    ( String   config    :    configs )     {", "_ read ( classLoader ,    config ,    sqlPool )  ;", "}", "_ sqlPool    =    sqlPool ;", "}    catch    ( Exception   e )     {", "CustomSQL .  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["reloadCustomSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "int   x    =    sql . indexOf ( CustomSQL .  _ GROUP _ BY _ CLAUSE )  ;", "if    ( x    !  =     (  -  1  )  )     {", "int   y    =    sql . indexOf ( CustomSQL .  _ ORDER _ BY _ CLAUSE )  ;", "if    ( y    =  =     (  -  1  )  )     {", "sql    =    sql . substring (  0  ,    x )  ;", "} else    {", "sql    =     ( sql . substring (  0  ,    x )  )     +     ( sql . substring ( y )  )  ;", "}", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["removeGroupBy"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "int   pos    =    sql . indexOf ( CustomSQL .  _ ORDER _ BY _ CLAUSE )  ;", "if    ( pos    !  =     (  -  1  )  )     {", "sql    =    sql . substring (  0  ,    pos )  ;", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["removeOrderBy"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "String   andOrConnector    =     \" OR \"  ;", "String   andOrNullCheck    =     \" AND    ?    IS   NOT   NULL \"  ;", "if    ( andOperator )     {", "andOrConnector    =     \" AND \"  ;", "andOrNullCheck    =     \" OR    ?    IS   NULL \"  ;", "}", "sql    =    StringUreplace ( sql ,    new   String [  ]  {     \"  [  $ AND _ OR _ CONNECTOR $  ]  \"  ,     \"  [  $ AND _ OR _ NULL _ CHECK $  ]  \"     }  ,    new   String [  ]  {    andOrConnector ,    andOrNullCheck    }  )  ;", "if    (  _ vendorPostgreSQL )     {", "sql    =    StringUreplace ( sql ,    new   String [  ]  {     \" Date    >  =     ?    AND    ?    IS   NOT   NULL \"  ,     \" Date    <  =     ?    AND    ?    IS   NOT   NULL \"  ,     \" Date    >  =     ?    OR    ?    IS   NULL \"  ,     \" Date    <  =     ?    OR    ?    IS   NULL \"     }  ,    new   String [  ]  {     \" Date    >  =     ?    AND   CAST (  ?    AS   TIMESTAMP )    IS   NOT   NULL \"  ,     \" Date    <  =     ?    AND   CAST (  ?    AS   TIMESTAMP )    IS   NOT   NULL \"  ,     \" Date    >  =     ?    OR   CAST (  ?    AS   TIMESTAMP )    IS   NULL \"  ,     \" Date    <  =     ?    OR   CAST (  ?    AS   TIMESTAMP )    IS   NULL \"     }  )  ;", "}", "sql    =    replaceIsNull ( sql )  ;", "return   sql ;", "}", "METHOD_END"], "methodName": ["replaceAndOperator"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( groupBy    =  =    null )     {", "return   sql ;", "}", "int   x    =    sql . indexOf (  .  _ GROUP _ BY _ CLAUSE )  ;", "if    ( x    !  =     (  -  1  )  )     {", "int   y    =    sql . indexOf (  .  _ ORDER _ BY _ CLAUSE )  ;", "if    ( y    =  =     (  -  1  )  )     {", "sql    =    sql . substring (  0  ,     ( x    +     (  .  _ GROUP _ BY _ CLAUSE . length (  )  )  )  )  . concat ( groupBy )  ;", "} else    {", "sql    =    sql . substring (  0  ,     ( x    +     (  .  _ GROUP _ BY _ CLAUSE . length (  )  )  )  )  . concat ( groupBy )  . concat ( sql . substring ( y )  )  ;", "}", "} else    {", "int   y    =    sql . indexOf (  .  _ ORDER _ BY _ CLAUSE )  ;", "if    ( y    =  =     (  -  1  )  )     {", "sql    =    sql . concat (  .  _ GROUP _ BY _ CLAUSE )  . concat ( groupBy )  ;", "} else    {", "StringBundler   sb    =    new   StringBundler (  4  )  ;", "sb . append ( sql . substring (  0  ,    y )  )  ;", "sb . append (  .  _ GROUP _ BY _ CLAUSE )  ;", "sb . append ( groupBy )  ;", "sb . append ( sql . substring ( y )  )  ;", "sql    =    sb . toString (  )  ;", "}", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["replaceGroupBy"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNotNull (  _ functionIsNull )  )     {", "sql    =    StringUreplace ( sql ,    new   String [  ]  {     \"  ?    IS   NULL \"  ,     \"  ?    IS   NOT   NULL \"     }  ,    new   String [  ]  {     _ functionIsNull ,     _ functionIsNotNull    }  )  ;", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["replaceIsNull"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    (  ( values    !  =    null )     &  &     (  ( values . length )     =  =     1  )  )     {", "return   sql ;", "}", "StringBundler   oldSqlSB    =    new   StringBundler (  4  )  ;", "oldSqlSB . append ( OPEN _ PARENTHESIS )  ;", "oldSqlSB . append ( field )  ;", "oldSqlSB . append (  \"     =     ?  )  \"  )  ;", "if    (  ! last )     {", "oldSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "if    ( ArrayUisEmpty ( values )  )     {", "return   StringUreplace ( sql ,    oldSqlSB . toString (  )  ,    BLANK )  ;", "}", "StringBundler   newSqlSB    =    new   StringBundler (  (  (  ( values . length )     *     4  )     +     3  )  )  ;", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "newSqlSB . append (  \"    OR    \"  )  ;", "}", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "newSqlSB . append ( field )  ;", "newSqlSB . append (  \"     =     ?  )  \"  )  ;", "}", "newSqlSB . append ( CLOSE _ PARENTHESIS )  ;", "if    (  ! last )     {", "newSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "return   StringUreplace ( sql ,    oldSqlSB . toString (  )  ,    newSqlSB . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    (  ( values    !  =    null )     &  &     (  ( values . length )     =  =     1  )  )     {", "return   sql ;", "}", "StringBundler   oldSqlSB    =    new   StringBundler (  4  )  ;", "oldSqlSB . append ( OPEN _ PARENTHESIS )  ;", "oldSqlSB . append ( field )  ;", "oldSqlSB . append (  \"     =     ?  )  \"  )  ;", "if    (  ! last )     {", "oldSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "if    ( ArrayUisEmpty ( values )  )     {", "return   StringUreplace ( sql ,    oldSqlSB . toString (  )  ,    BLANK )  ;", "}", "StringBundler   newSqlSB    =    new   StringBundler (  (  (  ( values . length )     *     4  )     +     3  )  )  ;", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "newSqlSB . append (  \"    OR    \"  )  ;", "}", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "newSqlSB . append ( field )  ;", "newSqlSB . append (  \"     =     ?  )  \"  )  ;", "}", "newSqlSB . append ( CLOSE _ PARENTHESIS )  ;", "if    (  ! last )     {", "newSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "return   StringUreplace ( sql ,    oldSqlSB . toString (  )  ,    newSqlSB . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    (  ( values    !  =    null )     &  &     (  ( values . length )     <  =     1  )  )     {", "return   sql ;", "}", "StringBundler   oldSqlSB    =    new   StringBundler (  6  )  ;", "oldSqlSB . append ( OPEN _ PARENTHESIS )  ;", "oldSqlSB . append ( field )  ;", "oldSqlSB . append (  \"     \"  )  ;", "oldSqlSB . append ( operator )  ;", "oldSqlSB . append (  \"     ?     [  $ AND _ OR _ NULL _ CHECK $  ]  )  \"  )  ;", "if    (  ! last )     {", "oldSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "StringBundler   newSqlSB    =    new   StringBundler (  (  (  ( values . length )     *     6  )     +     2  )  )  ;", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "newSqlSB . append (  \"    OR    \"  )  ;", "}", "newSqlSB . append ( OPEN _ PARENTHESIS )  ;", "newSqlSB . append ( field )  ;", "newSqlSB . append (  \"     \"  )  ;", "newSqlSB . append ( operator )  ;", "newSqlSB . append (  \"     ?     [  $ AND _ OR _ NULL _ CHECK $  ]  )  \"  )  ;", "}", "newSqlSB . append ( CLOSE _ PARENTHESIS )  ;", "if    (  ! last )     {", "newSqlSB . append (  \"     [  $ AND _ OR _ CONNECTOR $  ]  \"  )  ;", "}", "return   StringUreplace ( sql ,    oldSqlSB . toString (  )  ,    newSqlSB . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "if    ( obc    =  =    null )     {", "return   sql ;", "}", "String   orderBy    =    obc . getOrderBy (  )  ;", "int   pos    =    sql . indexOf (  .  _ ORDER _ BY _ CLAUSE )  ;", "if    (  ( pos    !  =     (  -  1  )  )     &  &     ( pos    <     ( sql . length (  )  )  )  )     {", "sql    =    sql . substring (  0  ,     ( pos    +     (  .  _ ORDER _ BY _ CLAUSE . length (  )  )  )  )  . concat ( orderBy )  ;", "} else    {", "sql    =    sql . concat (  .  _ ORDER _ BY _ CLAUSE )  . concat ( orderBy )  ;", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["replaceOrderBy"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "sql    =    PortalUtil . transformCustomSQL ( sql )  ;", "StringBundler   sb    =    new   StringBundler (  )  ;", "try    ( UnsyncBufferedReader   unsyncBufferedReader    =    new   UnsyncBufferedReader ( new   UnsyncStringReader ( sql )  )  )     {", "String   line    =    null ;", "while    (  ( line    =    unsyncBufferedReader . readLine (  )  )     !  =    null )     {", "line    =    line . trim (  )  ;", "if    ( line . startsWith ( CLOSE _ PARENTHESIS )  )     {", "sb . setIndex (  (  ( sb . index (  )  )     -     1  )  )  ;", "}", "sb . append ( line )  ;", "if    (  !  ( line . endsWith ( OPEN _ PARENTHESIS )  )  )     {", "sb . append ( SPACE )  ;", "}", "}", "}    catch    ( IOException   ioe )     {", "return   sql ;", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.liferay.util.dao.orm.CustomSQL"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . appendCriteria ( sql ,    criteria )  ;", "}", "METHOD_END"], "methodName": ["appendCriteria"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . get ( id )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . get ( id ,    queryDefinition )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . get ( id ,    queryDefinition ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorDB 2  (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorDB2"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorHSQL (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorHSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorInformix (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorInformix"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorMySQL (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorMySQL"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorOracle (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorOracle"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . isVendorSybase (  )  ;", "}", "METHOD_END"], "methodName": ["isVendorSybase"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywords )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywords ,    lowerCase )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywords ,    lowerCase ,    wildcardMode )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywords ,    wildcardMode )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywordsArray )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . keywords ( keywordsArray ,    lowerCase )  ;", "}", "METHOD_END"], "methodName": ["keywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "CustomSQLUtil .  _ instance .  _ customSQL . reloadCustomSQL (  )  ;", "}", "METHOD_END"], "methodName": ["reloadCustomSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . removeGroupBy ( sql )  ;", "}", "METHOD_END"], "methodName": ["removeGroupBy"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . removeOrderBy ( sql )  ;", "}", "METHOD_END"], "methodName": ["removeOrderBy"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceAndOperator ( sql ,    andOperator )  ;", "}", "METHOD_END"], "methodName": ["replaceAndOperator"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceGroupBy ( sql ,    groupBy )  ;", "}", "METHOD_END"], "methodName": ["replaceGroupBy"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceIsNull ( sql )  ;", "}", "METHOD_END"], "methodName": ["replaceIsNull"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceKeywords ( sql ,    field ,    last ,    values )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceKeywords ( sql ,    field ,    last ,    values )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceKeywords ( sql ,    field ,    operator ,    last ,    values )  ;", "}", "METHOD_END"], "methodName": ["replaceKeywords"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "return   CustomSQLUtil .  _ instance .  _ customSQL . replaceOrderBy ( sql ,    obc )  ;", "}", "METHOD_END"], "methodName": ["replaceOrderBy"], "fileName": "com.liferay.util.dao.orm.CustomSQLUtil"}, {"methodBody": ["METHOD_START", "{", "_ query . setBoolean (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setDouble (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setFloat (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setInteger (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setBoolean (  (  (  _ pos )  +  +  )  ,    value . booleanValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setDouble (  (  (  _ pos )  +  +  )  ,    value . doubleValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setFloat (  (  (  _ pos )  +  +  )  ,    value . intValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setInteger (  (  (  _ pos )  +  +  )  ,    value . intValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setLong (  (  (  _ pos )  +  +  )  ,    value . longValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "_ q . setShort (  (  (  _ pos )  +  +  )  ,    value . shortValue (  )  )  ;", "} else    {", "addNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setString (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "add ( values ,     1  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "for    ( int   j    =     0  ;    j    <    count ;    j +  +  )     {", "add ( values [ i ]  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setTimestamp (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setLong (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setShort (  (  (  _ pos )  +  +  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "_ query . setSerializable (  (  (  _ pos )  +  +  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["addNull"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryPos ( query )  ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "return    _ pos ;", "}", "METHOD_END"], "methodName": ["getPos"], "fileName": "com.liferay.util.dao.orm.hibernate.QueryPos"}, {"methodBody": ["METHOD_START", "{", "boolean   insideHtmlTag    =    false ;", "for    ( int   i    =    pos ;    i    >  =     0  ;    i -  -  )     {", "if    (  (  _ textCharAri ]  )     =  =     '  <  '  )     {", "insideHtmlTag    =    true ;", "break ;", "} else", "if    (  (  _ textCharAri ]  )     =  =     '  >  '  )     {", "break ;", "}", "}", "if    ( insideHtmlTag )     {", "for    ( int   i    =    pos ;    i    <     (  _ textCharArlength )  ;    i +  +  )     {", "if    (  (  _ textCharAri ]  )     =  =     '  <  '  )     {", "insideHtmlTag    =    false ;", "break ;", "} else", "if    (  (  _ textCharAri ]  )     =  =     '  >  '  )     {", "break ;", "}", "}", "}", "return   insideHtmlTag ;", "}", "METHOD_END"], "methodName": ["_isInsideHtmlTag"], "fileName": "com.liferay.util.jazzy.BasicSpellCheckListener"}, {"methodBody": ["METHOD_START", "{", "return    _ invalidWords ;", "}", "METHOD_END"], "methodName": ["getInvalidWords"], "fileName": "com.liferay.util.jazzy.BasicSpellCheckListener"}, {"methodBody": ["METHOD_START", "{", "return    _ text ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "com.liferay.util.poi.XLSTextStripper"}, {"methodBody": ["METHOD_START", "{", "PortletProps .  _ instance .  _ configuration . addProperties ( properties )  ;", "}", "METHOD_END"], "methodName": ["addProperties"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . contains ( key )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . get ( key ,    filter )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . getArray ( key )  ;", "}", "METHOD_END"], "methodName": ["getArray"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . getArray ( key ,    filter )  ;", "}", "METHOD_END"], "methodName": ["getArray"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "return   PortletProps .  _ instance .  _ configuration . getProperties (  )  ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "PortletProps .  _ instance .  _ configuration . removeProperties ( properties )  ;", "}", "METHOD_END"], "methodName": ["removeProperties"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "PortletProps .  _ instance .  _ configuration . set ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.liferay.util.portlet.PortletProps"}, {"methodBody": ["METHOD_START", "{", "PortletRequestModel   portletRequestModel    =    new   PortletRequestModel ( portletRequest ,    portletResponse )  ;", "return   portletRequestModel . toXML (  )  ;", "}", "METHOD_END"], "methodName": ["toXML"], "fileName": "com.liferay.util.portlet.PortletRequestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( dir . exists (  )  )  )     |  |     (  !  ( dir . isDirectory (  )  )  )  )     {", "throw   new   RuntimeException (  (  \" Unable   to   find   directory    \"     +     ( dir . getAbsolute (  )  )  )  )  ;", "}", "File [  ]    files    =    dir . listFiles (  )  ;", "Arrays . sort ( files )  ;", "for    ( File   file    :    files )     {", "String   fileName    =    file . getName (  )  ;", "if    ( fileName . endsWith (  \"  . jar \"  )  )     {", "jarFiles . add ( file )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addJarFiles"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListener"}, {"methodBody": ["METHOD_START", "{", "String   path    =    ClassUtil . getParentPath ( classLoader ,    className )  ;", "int   pos    =    path . lastIndexOf (  \"  . jar \"  )  ;", "pos    =    path . lastIndexOf ( SLASH ,    pos )  ;", "path    =    path . substring (  0  ,    pos )  ;", "addJarFiles ( jarFiles ,    new   File ( path )  )  ;", "}", "METHOD_END"], "methodName": ["addJarFiles"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListener"}, {"methodBody": ["METHOD_START", "{", "synchronized ( classLoader )     {", "Method   findLoadedMethod    =    ReflectionUtil . getDeclaredMethod ( Loader . class ,     \" findLoaded \"  ,    String . class )  ;", "<  ?  >    clazz    =     (  (  <  ?  >  )     ( findLoadedMethod . invoke ( classLoader ,    className )  )  )  ;", "if    ( clazz    =  =    null )     {", "Method   findMethod    =    ReflectionUtil . getDeclaredMethod ( Loader . class ,     \" find \"  ,    String . class )  ;", "clazz    =     (  (  <  ?  >  )     ( findMethod . invoke ( classLoader ,    className )  )  )  ;", "}", "Method   resolveMethod    =    ReflectionUtil . getDeclaredMethod ( Loader . class ,     \" resolve \"  ,     . class )  ;", "resolveMethod . invoke ( classLoader ,    clazz )  ;", "return   clazz ;", "}", "}", "METHOD_END"], "methodName": ["loadClassDirectly"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListener"}, {"methodBody": ["METHOD_START", "{", "ServiceProps .  _ instance .  _ configuration . addProperties ( properties )  ;", "}", "METHOD_END"], "methodName": ["addProperties"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . contains ( key )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . get ( key ,    filter )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . getArray ( key )  ;", "}", "METHOD_END"], "methodName": ["getArray"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . getArray ( key ,    filter )  ;", "}", "METHOD_END"], "methodName": ["getArray"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "return   ServiceProps .  _ instance .  _ configuration . getProperties (  )  ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "ServiceProps .  _ instance .  _ configuration . removeProperties ( properties )  ;", "}", "METHOD_END"], "methodName": ["removeProperties"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "ServiceProps .  _ instance .  _ configuration . set ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.liferay.util.service.ServiceProps"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ contentLength )     >     ( Integer . MAX _ VALUE )  )     {", "return    -  1  ;", "}", "return    (  ( int )     (  _ contentLength )  )  ;", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "com.liferay.util.servlet.GenericServletResponse"}, {"methodBody": ["METHOD_START", "{", "return    _ contentLength ;", "}", "METHOD_END"], "methodName": ["getContentLengthLong"], "fileName": "com.liferay.util.servlet.GenericServletResponse"}, {"methodBody": ["METHOD_START", "{", "return    _ ubaos . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.liferay.util.servlet.GenericServletResponse"}, {"methodBody": ["METHOD_START", "{", "super . setContentLengthLong ( length )  ;", "_ contentLength    =    length ;", "}", "METHOD_END"], "methodName": ["setContentLengthLong"], "fileName": "com.liferay.util.servlet.GenericServletResponse"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    parameters    =    null ;", "try    {", "parameters    =     (  ( Map < String ,    String >  )     ( portletSession . getAttribute (  . KEY )  )  )  ;", "if    ( parameters    =  =    null )     {", "parameters    =    new   LinkedHashMap <  >  (  )  ;", "portletSession . setAttribute (  . KEY ,    parameters )  ;", "}", "}    catch    ( IllegalStateException   ise )     {", "parameters    =    new   LinkedHashMap <  >  (  )  ;", "}", "return   parameters ;", "}", "METHOD_END"], "methodName": ["_getParameters"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    parameters    =    null ;", "try    {", "parameters    =     (  ( Map < String ,    String >  )     ( session . getAttribute (  . KEY )  )  )  ;", "if    ( parameters    =  =    null )     {", "parameters    =    new   HashMap <  >  (  )  ;", "session . setAttribute (  . KEY ,    parameters )  ;", "}", "}    catch    ( IllegalStateException   ise )     {", "parameters    =    new   HashMap <  >  (  )  ;", "}", "return   parameters ;", "}", "METHOD_END"], "methodName": ["_getParameters"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "return   SessionParameters . get ( portletRequest . getPortletSession (  )  ,    parameter )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( SessionParameters . USE _ SESSION _ PARAMETERS )  )     {", "return   parameter ;", "}", "Map < String ,    String >    parameters    =    SessionParameters .  _ getParameters ( portletSession )  ;", "String   newParameter    =    parameters . get ( parameter )  ;", "if    ( newParameter    =  =    null )     {", "newParameter    =     (  ( StringUtil . randomString (  )  )     +     ( StringPool . UNDERLINE )  )     +    parameter ;", "parameters . put ( parameter ,    newParameter )  ;", "}", "return   newParameter ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "return   SessionParameters . get ( request . getSession (  )  ,    parameter )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( SessionParameters . USE _ SESSION _ PARAMETERS )  )     {", "return   parameter ;", "}", "Map < String ,    String >    parameters    =    SessionParameters .  _ getParameters ( session )  ;", "String   newParameter    =    parameters . get ( parameter )  ;", "if    ( newParameter    =  =    null )     {", "newParameter    =     (  ( StringUtil . randomString (  )  )     +     ( StringPool . UNDERLINE )  )     +    parameter ;", "parameters . put ( parameter ,    newParameter )  ;", "}", "return   newParameter ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.util.servlet.SessionParameters"}, {"methodBody": ["METHOD_START", "{", "return    _ attributes . get ( name )  ;", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "return   ByteBuffer . wrap (  _ content ,     _ offset ,     _ length )  ;", "}", "METHOD_END"], "methodName": ["getByteBuffer"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "return    _ contentType ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "return    _ headers ;", "}", "METHOD_END"], "methodName": ["getHeaders"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "return    _ valid ;", "}", "METHOD_END"], "methodName": ["isValid"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "objectInputStream . defaultReadObject (  )  ;", "_ length    =    objectInputStream . readInt (  )  ;", "if    (  (  _ length )     >     0  )     {", "_ content    =    new   byte [  _ length ]  ;", "objectInputStream . readFully (  _ content )  ;", "}", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "_ attributes . put ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAttribute"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "objectOutputStream . defaultWriteObject (  )  ;", "objectOutputStream . writeInt (  _ length )  ;", "if    (  (  _ length )     >     0  )     {", "objectOutputStream . write (  _ content ,     _ offset ,     _ length )  ;", "}", "}", "METHOD_END"], "methodName": ["writeObject"], "fileName": "com.liferay.util.servlet.filters.CacheResponseData"}, {"methodBody": ["METHOD_START", "{", "if    ( response . isCommitted (  )  )     {", "return ;", "}", "for    ( Map . Entry < String ,    Set < Header >  >    entry    :    headers . entrySet (  )  )     {", "String   key    =    entry . getKey (  )  ;", "boolean   first    =    true ;", "for    ( Header   header    :    entry . getValue (  )  )     {", "if    ( first )     {", "header . setTo ( key ,    response )  ;", "first    =    false ;", "} else    {", "header . addTo ( key ,    response )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["setHeaders"], "fileName": "com.liferay.util.servlet.filters.CacheResponseUtil"}, {"methodBody": ["METHOD_START", "{", "CacheResponseUtil . setHeaders ( response ,    cacheResponseData . getHeaders (  )  )  ;", "response . setContentType ( cacheResponseData . getContentType (  )  )  ;", "ServletResponseUtil . write ( response ,    cacheResponseData . getByteBuffer (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "com.liferay.util.servlet.filters.CacheResponseUtil"}, {"methodBody": ["METHOD_START", "{", "_ parameters . put ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["addInitParameter"], "fileName": "com.liferay.util.servlet.filters.DynamicFilterConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    argsMap    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( args . length )  ;    i +  +  )     {", "if    ( args [ i ]  . equals (  \"  - g \"  )  )     {", "argsMap . put (  \" gzip \"  ,    Boolean . TRUE )  ;", "} else", "if    ( args [ i ]  . equals (  \"  - s \"  )  )     {", "argsMap . put (  \" short \"  ,    Boolean . TRUE )  ;", "} else", "if    ( args [ i ]  . equals (  \"  - h \"  )  )     {", "argsMap . put (  \" host \"  ,    args [  ( i    +     1  )  ]  )  ;", "i +  +  ;", "} else", "if    ( args [ i ]  . equals (  \"  - p \"  )  )     {", "argsMap . put (  \"  \"  ,    Integer . valueOf ( args [  ( i    +     1  )  ]  )  )  ;", "i +  +  ;", "}", "}", "if    (  !  ( argsMap . containsKey (  \" gzip \"  )  )  )     {", "argsMap . put (  \" gzip \"  ,    Boolean . FALSE )  ;", "}", "if    (  !  ( argsMap . containsKey (  \" short \"  )  )  )     {", "argsMap . put (  \" short \"  ,    Boolean . FALSE )  ;", "}", "return   argsMap ;", "}", "METHOD_END"], "methodName": ["_getArgsMap"], "fileName": "com.liferay.util.transport.MulticastClientTool"}, {"methodBody": ["METHOD_START", "{", "try    {", "new    ( args )  ;", "}    catch    ( Exception   e )     {", "e . printStackTrace (  )  ;", "StringBuilder   sb    =    new   StringBuilder (  3  )  ;", "sb . append (  \" Usage :    java    - classpath   util - jar    \"  )  ;", "sb . append (  . class . getName (  )  )  ;", "sb . append (  \"  [  - g ]     [  - s ]     - h    [ multicastAddress ]     - p    [ port ]  \"  )  ;", "System . err . println ( sb . toString (  )  )  ;", "System . exit (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.liferay.util.transport.MulticastClientTool"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   ubaos    =    new   UnsyncByteArrayOutputStream ( bytes . length )  ;", "try    ( InputStream   is    =    new   GZIPInputStream ( new   UnsyncByteArrayInputStream ( bytes )  )  )     {", "byte [  ]    buffer    =    new   byte [  1  5  0  0  ]  ;", "int   c    =     0  ;", "while    ( true )     {", "if    ( c    =  =     (  -  1  )  )     {", "break ;", "}", "c    =    is . read ( buffer ,     0  ,     1  5  0  0  )  ;", "if    ( c    !  =     (  -  1  )  )     {", "ubaos . write ( buffer ,     0  ,    c )  ;", "}", "}", "}", "ubaos . flush (  )  ;", "ubaos . close (  )  ;", "return   ubaos . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["getUnzippedBytes"], "fileName": "com.liferay.util.transport.MulticastDatagramHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "int   port    =    GetterUtil . getInteger ( args [  1  ]  )  ;", "long   interval    =    GetterUtil . getLong ( args [  2  ]  )  ;", "DatagramHandler   handler    =    new   DatagramHandler (  )     {", "@ Override", "public   void   errorReceived ( Throwable   t )     {", "t . printStackTrace (  )  ;", "}", "@ Override", "public   void   process ( DatagramPacket   packet )     {", "String   s    =    new   String ( packet . getData (  )  ,     0  ,    packet . getLength (  )  )  ;", "System . out . println ( s )  ;", "}", "}  ;", "MulticastTransport   transport    =    new   MulticastTransport ( handler ,    args [  0  ]  ,    port )  ;", "transport . connect (  )  ;", "InetAddress   inetAddress    =    InetAddress . getLocalHost (  )  ;", "String   msg    =    StringBundler . concat ( inetAddress . getHostName (  )  ,     \"  :  \"  ,    String . valueOf ( port )  ,     \"    heartbeat    \"  )  ;", "int   i    =     0  ;", "while    ( true )     {", "transport . sendMessage (  ( msg    +    i )  )  ;", "i +  +  ;", "Thread . sleep ( interval )  ;", "}", "}    catch    ( Exception   e )     {", "e . printStackTrace (  )  ;", "System . err . println (  (  \" Usage :    java      multicastAddress   port    \"     +     \" interval \"  )  )  ;", "System . exit (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.liferay.util.transport.MulticastServerTool"}, {"methodBody": ["METHOD_START", "{", "_ outboundPacket . setData ( bytes )  ;", "_ outboundPacket . setAddress (  _ address )  ;", "_ outboundPacket . setPort (  _  )  ;", "_ socket . send (  _ outboundPacket )  ;", "}", "METHOD_END"], "methodName": ["sendMessage"], "fileName": "com.liferay.util.transport.MulticastTransport"}, {"methodBody": ["METHOD_START", "{", "Element   childElement    =    element . addElement ( name )  ;", "childElement . addText ( GetterUgetString ( text )  )  ;", "return   childElement ;", "}", "METHOD_END"], "methodName": ["_add"], "fileName": "com.liferay.util.xml.BeanToXMLUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    obj . getClass (  )  ;", "String   classNameWithoutPackage    =     . getClassNameWithoutPackage ( clazz . getName (  )  )  ;", "Element   el    =    parentEl . addElement ( classNameWithoutPackage )  ;", ". addFields ( obj ,    el )  ;", "}", "METHOD_END"], "methodName": ["addBean"], "fileName": "com.liferay.util.xml.BeanToXMLUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    obj . getClass (  )  ;", "Method [  ]    methods    =    clazz . getMethods (  )  ;", "for    ( Method   method    :    methods )     {", "String   methodName    =    method . getName (  )  ;", "if    (  ( methodName . startsWith (  \" get \"  )  )     &  &     (  !  ( methodName . equals (  \" getClass \"  )  )  )  )     {", "String   memberName    =    StringUtil . replace ( methodName ,     \" get \"  ,    BLANK )  ;", "memberName    =    TextFormatter . format ( memberName ,    I )  ;", "memberName    =    TextFormatter . format ( memberName ,    K )  ;", "try    {", "Object   returnValue    =    method . invoke ( obj ,    new   Object [  0  ]  )  ;", "if    ( returnValue   instanceof   List <  ?  >  )     {", "List < Object >    list    =     (  ( List < Object >  )     ( returnValue )  )  ;", "Element   listEl    =    parentEl . addElement ( memberName )  ;", "for    ( int   j    =     0  ;    j    <     ( list . size (  )  )  ;    j +  +  )     {", ". addBean ( list . get ( j )  ,    listEl )  ;", "}", "} else    {", ".  _ add ( parentEl ,    memberName ,    returnValue . toString (  )  )  ;", "}", "}    catch    ( Exception   e )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", ".  _ log . warn ( e . getMessage (  )  )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addFields"], "fileName": "com.liferay.util.xml.BeanToXMLUtil"}, {"methodBody": ["METHOD_START", "{", "String [  ]    classNameArray    =    StringUtil . split ( className ,    PERIOD )  ;", "String   classNameWithoutPackage    =    classNameArray [  (  ( classNameArray . length )     -     1  )  ]  ;", "classNameWithoutPackage    =    TextFormatter . format ( classNameWithoutPackage ,    I )  ;", "classNameWithoutPackage    =    TextFormatter . format ( classNameWithoutPackage ,    K )  ;", "return   classNameWithoutPackage ;", "}", "METHOD_END"], "methodName": ["getClassNameWithoutPackage"], "fileName": "com.liferay.util.xml.BeanToXMLUtil"}, {"methodBody": ["METHOD_START", "{", "return   element . addElement ( qName )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "Element   childElement    =    element . addElement ( qName )  ;", "childElement . addText ( GetterUgetString ( text )  )  ;", "return   childElement ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "QName   qName    =    SAXReaderUtil . createQName ( name ,    namespace )  ;", "return   element . addElement ( qName )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "QName   qName    =    SAXReaderUtil . createQName ( name ,    namespace )  ;", "return    . add ( element ,    qName ,    text )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "Element   childElement    =    element . addElement ( name )  ;", "childElement . addText ( GetterUgetString ( text )  )  ;", "return   childElement ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   DocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.DocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "Element   childElement    =    element . addElement ( name )  ;", "childElement . addText ( GetterUgetString ( text )  )  ;", "return   childElement ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "QName   qName    =    DocumentHelper . createQName ( name ,    namespace )  ;", "return   element . addElement ( qName )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "QName   qName    =    DocumentHelper . createQName ( name ,    namespace )  ;", "return    . add ( element ,    qName ,    text )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    namespace ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    name ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   element . addElement ( qName )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "Element   childElement    =    element . addElement ( qName )  ;", "childElement . addText ( GetterUgetString ( text )  )  ;", "return   childElement ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jDocUtil . add ( element ,    qName ,    String . valueOf ( text )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.util.xml.Dom4jDocUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jUtil . toString ( xml ,    TAB )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "XMLReader   xmlReader    =    null ;", "if    (  ( SecureXMLFactoryProviderUtil . getSecureXMLFactoryProvider (  )  )     !  =    null )     {", "xmlReader    =    SecureXMLFactoryProviderUtil . newXMLReader (  )  ;", "}", "SAXReader   saxReader    =    new   SAXReader ( xmlReader )  ;", "Document   document    =    saxReader . read ( new   UnsyncStringReader ( xml )  )  ;", "return    . toString ( document ,    indent )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jUtil . toString ( node ,    TAB )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jUtil . toString ( node ,    TAB ,    false )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "return   Dom 4 jUtil . toString ( node ,    indent ,    expandEmptyElements ,    true )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   unsyncByteArrayOutputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "OutputFormat   outputFormat    =    OutputFormat . createPrettyPrint (  )  ;", "outputFormat . setExpandEmptyElements ( expandEmptyElements )  ;", "outputFormat . setIndent ( indent )  ;", "outputFormat . setLineSeparator ( NEW _ LINE )  ;", "outputFormat . setTrimText ( trimText )  ;", "XMLWriter   xmlWriter    =    new   XMLWriter ( unsyncByteArrayOutputStream ,    outputFormat )  ;", "xmlWriter . write ( node )  ;", "String   content    =    unsyncByteArrayOutputStream . toString ( UTF 8  )  ;", "if    ( content . endsWith (  \"  \\ n \\ n \"  )  )     {", "content    =    content . substring (  0  ,     (  ( content . length (  )  )     -     2  )  )  ;", "}", "if    ( content . endsWith (  \"  \\ n \"  )  )     {", "content    =    content . substring (  0  ,     (  ( content . length (  )  )     -     1  )  )  ;", "}", "while    ( content . contains (  \"     \\ n \"  )  )     {", "content    =    StringUreplace ( content ,     \"     \\ n \"  ,     \"  \\ n \"  )  ;", "}", "if    ( content . startsWith (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \"  )  )     {", "content    =    StringUreplaceFirst ( content ,     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \"  ,     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"  ?  >  \"  )  ;", "}", "return   content ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.liferay.util.xml.Dom4jUtil"}, {"methodBody": ["METHOD_START", "{", "int   firstValue    =     -  1  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "Attribute   o    =    list . get ( i )  ;", "int   value    =    c . compare ( obj ,    o )  ;", "if    ( i    =  =     0  )     {", "firstValue    =    value ;", "}", "if    ( value    =  =     0  )     {", "return    0  ;", "}", "}", "return   firstValue ;", "}", "METHOD_END"], "methodName": ["_compare"], "fileName": "com.liferay.util.xml.ElementComparator"}, {"methodBody": ["METHOD_START", "{", "int   firstValue    =     -  1  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "Element   o    =    list . get ( i )  ;", "int   value    =    c . compare ( obj ,    o )  ;", "if    ( i    =  =     0  )     {", "firstValue    =    value ;", "}", "if    ( value    =  =     0  )     {", "return    0  ;", "}", "}", "return   firstValue ;", "}", "METHOD_END"], "methodName": ["_compare"], "fileName": "com.liferay.util.xml.ElementComparator"}, {"methodBody": ["METHOD_START", "{", "return    _ elementName ;", "}", "METHOD_END"], "methodName": ["getElementName"], "fileName": "com.liferay.util.xml.ElementIdentifier"}, {"methodBody": ["METHOD_START", "{", "return    _ identifierName ;", "}", "METHOD_END"], "methodName": ["getIdentifierName"], "fileName": "com.liferay.util.xml.ElementIdentifier"}, {"methodBody": ["METHOD_START", "{", "QName   javaxQName    =    new   QName ( dom 4 jQName . getNamespaceURI (  )  ,    dom 4 jQName . getName (  )  ,    dom 4 jQName . getNamespacePrefix (  )  )  ;", "return   javaxQName ;", "}", "METHOD_END"], "methodName": ["toJavaxQName"], "fileName": "com.liferay.util.xml.XMLConverter"}, {"methodBody": ["METHOD_START", "{", "DOMWriter   dom 4 jWriter    =    new   DOMWriter (  )  ;", "Document   w 3 cDoc    =    dom 4 jWriter . write ( dom 4 jDoc )  ;", "return   w 3 cDoc ;", "}", "METHOD_END"], "methodName": ["toW3CDocument"], "fileName": "com.liferay.util.xml.XMLConverter"}, {"methodBody": ["METHOD_START", "{", "DocumentFactory   documentFactory    =    DocumentFactory . getInstance (  )  ;", "Document   dom 4 jDoc    =    documentFactory . createDocument (  )  ;", "dom 4 jDoc . setRootElement ( dom 4 jEl . createCopy (  )  )  ;", "Document   w 3 cDoc    =     . toW 3 CDocument ( dom 4 jDoc )  ;", "return   w 3 cDoc . getDocumentElement (  )  ;", "}", "METHOD_END"], "methodName": ["toW3CElement"], "fileName": "com.liferay.util.xml.XMLConverter"}, {"methodBody": ["METHOD_START", "{", "return    _ descriptor . canJoinChildren ( element )  ;", "}", "METHOD_END"], "methodName": ["canJoinChildren"], "fileName": "com.liferay.util.xml.XMLElementComparator"}, {"methodBody": ["METHOD_START", "{", "List < Element >    elements    =    firstElement . elements (  )  ;", "for    ( Element   chdElement    :    chdElements )     {", "elements . add (  (  ( Element )     ( chdElement . clone (  )  )  )  )  ;", "}", "_ orderChdren ( firstElement ,     _ descriptor . getChdrenOrder ( firstElement )  )  ;", "}", "METHOD_END"], "methodName": ["_addChildren"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "for    ( Element   curElement    :    elements )     {", "if    (  ( elementComparator . pare ( element ,    curElement )  )     =  =     0  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["_containsObjectEqualTo"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "for    ( Element   curElement    :    elements )     {", "if    (  ( elementComparator . pare ( element ,    curElement )  )     =  =     0  )     {", "return   curElement ;", "}", "}", "return   element ;", "}", "METHOD_END"], "methodName": ["_findObjectEqualTo"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "List < Element >    childElements    =    element . elements (  )  ;", "if    ( childElements . isEmpty (  )  )     {", "return ;", "}", "List < Element >    originalElements    =    new   ArrayList <  >  (  )  ;", "List < Element >    duplicateElements    =    new   ArrayList <  >  (  )  ;", "for    ( Element   childElement    :    childElements )     {", "if    (  _ containsObjectEqualTo ( childElement ,    originalElements ,    elementComparator )  )     {", "if    (  _ descriptor . canJoinChildren ( childElement )  )     {", "Element   firstElement    =     _ findObjectEqualTo ( childElement ,    originalElements ,    elementComparator )  ;", "_ addChildren ( firstElement ,    childElement . elements (  )  )  ;", "}", "duplicateElements . add ( childElement )  ;", "} else    {", "originalElements . add ( childElement )  ;", "}", "_ orderChildren ( childElement ,     _ descriptor . getChildrenOrder ( childElement )  )  ;", "}", "for    ( Element   duplicateElement    :    duplicateElements )     {", "duplicateElement . detach (  )  ;", "}", "for    ( Element   childElement    :    originalElements )     {", "_ mDuplicateElements ( childElement ,    elementComparator )  ;", "}", "}", "METHOD_END"], "methodName": ["_mergeDuplicateElements"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "if    ( orderedChildrenNames    =  =    null )     {", "return ;", "}", "List < Element >    elements    =    new   ArList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( orderedChildrenNames . length )  ;    i +  +  )     {", "elements . addAll ( parentElement . elements ( orderedChildrenNames [ i ]  )  )  ;", "}", "for    ( Element   element    :    elements )     {", "element . detach (  )  ;", "parentElement . add ( element )  ;", "}", "}", "METHOD_END"], "methodName": ["_orderChildren"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "return   new   XMLElementComparator (  _ descriptor )  ;", "}", "METHOD_END"], "methodName": ["getElementComparator"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "Document   mergedDocument    =     (  ( Document )     ( masterDocument . clone (  )  )  )  ;", "Element   mergedRootElement    =    mergedDocument . getRootElement (  )  ;", "Element   slaveRootElement    =    slaveDocument . getRootElement (  )  ;", "for    ( Element   slaveElement    :     (  ( List < Element >  )     ( slaveRootElement . elements (  )  )  )  )     {", "Element   clonedSlaveElement    =     (  ( Element )     ( slaveElement . clone (  )  )  )  ;", "clonedSlaveElement . detach (  )  ;", "mergedRootElement . add ( clonedSlaveElement )  ;", "}", "organizeXML ( mergedDocument )  ;", "return   mergedDocument ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "Element   rootElement    =    document . getRootElement (  )  ;", "_ orderChildren ( rootElement ,     _ descriptor . getRootChildrenOrder (  )  )  ;", "_ mDuplicateElements ( rootElement ,    getElementComparator (  )  )  ;", "}", "METHOD_END"], "methodName": ["organizeXML"], "fileName": "com.liferay.util.xml.XMLMerger"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   unsyncByteArrayOutputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "OutputFormat   format    =    OutputFormat . createPrettyPrint (  )  ;", "format . setIndent (  \"  \\ t \"  )  ;", "format . setLineSeparator (  \"  \\ n \"  )  ;", "XMLWriter   writer    =    new   XMLWriter ( unsyncByteArrayOutputStream ,    format )  ;", "writer . write ( doc )  ;", "String    =    unsyncByteArrayOutputStream . toString (  )  ;", "int   pos    =    indexOf (  \"  <  ?  \"  )  ;", "String   header    =    substring ( pos ,     (  ( indexOf (  \"  ?  >  \"  ,    pos )  )     +     2  )  )  ;", "=    StringUtil . replace (    header ,     \"  \"  )  ;", "=    StringBundler . concat ( header ,     \"  \\ n \"  ,    docType ,     \"  \\ n \"  ,     ;", "return", "}", "METHOD_END"], "methodName": ["_documentToString"], "fileName": "com.liferay.util.xml.XMLMergerRunner"}, {"methodBody": ["METHOD_START", "{", "int   pos    =    masterXml . indexOf (  \"  <  ! DOCTYPE \"  )  ;", "String   masterDoctype    =     \"  \"  ;", "if    ( pos    >  =     0  )     {", "masterDoctype    =    masterXml . substring ( pos ,     (  ( masterXml . indexOf (  \"  >  \"  ,    pos )  )     +     1  )  )  ;", "masterXml    =    StringUtil . replace ( masterXml ,    masterDoctype ,     \"  \"  )  ;", "}", "pos    =    slaveXml . indexOf (  \"  <  ! DOCTYPE \"  )  ;", "String   slaveDoctype    =     \"  \"  ;", "if    ( pos    >  =     0  )     {", "slaveDoctype    =    slaveXml . substring ( pos ,     (  ( slaveXml . indexOf (  \"  >  \"  ,    pos )  )     +     1  )  )  ;", "slaveXml    =    StringUtil . replace ( slaveXml ,    slaveDoctype ,     \"  \"  )  ;", "}", "String   doctype    =    null ;", "if    ( Validator . isNotNull ( masterDoctype )  )     {", "doctype    =    masterDoctype ;", "} else    {", "doctype    =    slaveDoctype ;", "}", "SAXReader   reader    =    new   SAXReader (  )  ;", "Document   masterDoc    =    reader . read ( new   UnsyncStringReader ( masterXml )  )  ;", "Document   slaveDoc    =    reader . read ( new   UnsyncStringReader ( slaveXml )  )  ;", "XMLDescriptor   descriptor    =    null ;", "if    (  _ descriptorClassName . equals (  .  _ AUTO _ DESCRIPTOR )  )     {", "descriptor    =    XMLTypeDetector . determineType ( doctype ,    masterDoc )  ;", "} else    {", "Class <  ?  >    clazz    =    Class . forName (  _ descriptorClassName )  ;", "descriptor    =     (  ( XMLDescriptor )     ( clazz . newInstance (  )  )  )  ;", "}", "XMLMerger   merger    =    new   XMLMerger ( descriptor )  ;", "Document   mergedDoc    =    merger . merge ( masterDoc ,    slaveDoc )  ;", "return    _ documentToString ( mergedDoc ,    doctype )  ;", "}", "METHOD_END"], "methodName": ["_merge"], "fileName": "com.liferay.util.xml.XMLMergerRunner"}, {"methodBody": ["METHOD_START", "{", "String   xml 1     =    FileUtil . read ( masterFile )  ;", "String   xml 2     =    FileUtil . read ( slaveFile )  ;", "String   mergedXml    =     _ merge ( xml 1  ,    xml 2  )  ;", "FileUtil . write ( mergedFile ,    mergedXml )  ;", "}", "METHOD_END"], "methodName": ["mergeAndSave"], "fileName": "com.liferay.util.xml.XMLMergerRunner"}, {"methodBody": ["METHOD_START", "{", "mergeAndSave ( new   File ( masterFile )  ,    new   File ( slaveFile )  ,    new   File ( mergedFile )  )  ;", "}", "METHOD_END"], "methodName": ["mergeAndSave"], "fileName": "com.liferay.util.xml.XMLMergerRunner"}, {"methodBody": ["METHOD_START", "{", "_ validateMandatoryAttribute (  _ masterFile ,     \" masterFile \"  )  ;", "_ validateMandatoryAttribute (  _ slaveFile ,     \" slaveFile \"  )  ;", "_ validateMandatoryAttribute (  _ outputFile ,     \" outputFile \"  )  ;", "}", "METHOD_END"], "methodName": ["_validateAttributes"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   new   BuildException (  ( name    +     \"    is   a   required   attribute \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["_validateMandatoryAttribute"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "_ masterFile    =    masterFile ;", "}", "METHOD_END"], "methodName": ["setMasterFile"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "_ outputFile    =    outputFile ;", "}", "METHOD_END"], "methodName": ["setOutputFile"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "_ slaveFile    =    slaveFile ;", "}", "METHOD_END"], "methodName": ["setSlaveFile"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.util.xml.XMLMergerTask"}, {"methodBody": ["METHOD_START", "{", "if    (  !  =    null )     {", "int   pos    =    indexOf ( LESS _ THAN )  ;", "if    ( pos    >     0  )     {", "=    substring ( pos )  ;", "}", "}", "return", "}", "METHOD_END"], "methodName": ["_fixProlog"], "fileName": "com.liferay.util.xml.XMLSafeReader"}, {"methodBody": ["METHOD_START", "{", "for    ( XMLDescriptor   descriptor    :    XMLTypeDetector . REGISTERED _ DESCRIPTORS )     {", "if    ( descriptor . canHandleType ( doctype ,    root )  )     {", "return   descriptor ;", "}", "}", "return   new   StrictXMLDescriptor (  )  ;", "}", "METHOD_END"], "methodName": ["determineType"], "fileName": "com.liferay.util.xml.XMLTypeDetector"}, {"methodBody": ["METHOD_START", "{", "if    (  !  =    null )     {", "int   pos    =    indexOf ( LESS _ THAN )  ;", "if    ( pos    >     0  )     {", "=    substring ( pos )  ;", "}", "}", "return", "}", "METHOD_END"], "methodName": ["fixProlog"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   document . formattedString (  .  _ XML _ INDENT )  ;", "}    catch    ( IOException   ioe )     {", "throw   new   SystemException ( ioe )  ;", "}", "}", "METHOD_END"], "methodName": ["formatXML"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "xml    =    StringUtil . replace ( xml ,     \"  &  #  \"  ,     \"  [  $ SPECIAL _ CHARACTER $  ]  \"  )  ;", "xml    =    Dom 4 jUtil . toString ( xml ,     .  _ XML _ INDENT )  ;", "xml    =    StringUtil . replace ( xml ,     \"  [  $ SPECIAL _ CHARACTER $  ]  \"  ,     \"  &  #  \"  )  ;", "return   xml ;", "}    catch    ( IOException   ioe )     {", "throw   new   SystemException ( ioe )  ;", "}    catch    ( DocumentException   de )     {", "throw   new   SystemException ( de )  ;", "}", "}", "METHOD_END"], "methodName": ["formatXML"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "return   StringUtil . replace ( xml ,     \"  [  $ NEW _ LINE $  ]  \"  ,    NEW _ LINE )  ;", "}", "METHOD_END"], "methodName": ["fromCompactSafe"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNull (  )     {", "return", "}", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( length (  )  )  ;    i +  +  )     {", "char   c    =    charAt ( i )  ;", "if    (  (  (  (  ( c    =  =     9  )     |  |     ( c    =  =     1  0  )  )     |  |     ( c    =  =     1  3  )  )     |  |     (  ( c    >  =     3  2  )     &  &     ( c    <  =     5  5  2  9  5  )  )  )     |  |     (  ( c    >  =     5  7  3  4  4  )     &  &     ( c    <  =     6  5  5  3  3  )  )  )     {", "sb . append ( c )  ;", "}", "if    (  ( Character . isHighSurrogate ( c )  )     &  &     (  ( i    +     1  )     <     ( length (  )  )  )  )     {", "char   c 2     =    charAt (  ( i    +     1  )  )  ;", "if    ( Character . isLowSurrogate ( c 2  )  )     {", "int   codePoint    =    Character . toCodePoint ( c ,    c 2  )  ;", "if    (  ( codePoint    >  =     6  5  5  3  6  )     &  &     ( codePoint    <  =     1  1  1  4  1  1  1  )  )     {", "sb . appendCodePoint ( codePoint )  ;", "}", "}", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["stripInvalidChars"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "return   StringUtil . replace ( xml ,    XMLUtil .  _ COMPACT _ SAFE _ OLD _ SUBS ,    XMLUtil .  _ COMPACT _ SAFE _ NEW _ SUBS )  ;", "}", "METHOD_END"], "methodName": ["toCompactSafe"], "fileName": "com.liferay.util.xml.XMLUtil"}, {"methodBody": ["METHOD_START", "{", "String   name 1     =    el 1  . attributeValue ( attrName )  ;", "String   name 2     =    el 2  . attributeValue ( attrName )  ;", "if    (  ( name 1     =  =    null )     |  |     ( name 2     =  =    null )  )     {", "return    -  1  ;", "}", "return   name 1  . pareTo ( name 2  )  ;", "}", "METHOD_END"], "methodName": ["_compareAttribute"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "Element   child 1     =     _ getChild ( el 1  ,    childName )  ;", "Element   child 2     =     _ getChild ( el 2  ,    childName )  ;", "if    (  ( child 1     =  =    null )     |  |     ( child 2     =  =    null )  )     {", "return    -  1  ;", "}", "String   name 1     =    child 1  . getText (  )  ;", "String   name 2     =    child 2  . getText (  )  ;", "if    (  ( name 1     =  =    null )     |  |     ( name 2     =  =    null )  )     {", "return    -  1  ;", "}", "return   name 1  . pareTo ( name 2  )  ;", "}", "METHOD_END"], "methodName": ["_compareChildText"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "Element   child    =    parent . element ( childName )  ;", "return   child ;", "}", "METHOD_END"], "methodName": ["_getChild"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   new   ElementIdentifier [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getElementsIdentifiedByAttribute"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   new   ElementIdentifier [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getElementsIdentifiedByChild"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getJoinableElements"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getUniqueElements"], "fileName": "com.liferay.util.xml.descriptor.SimpleXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "Element   el 1     =     (  ( Element )     ( obj 1  )  )  ;", "Element   el 2     =     (  ( Element )     ( obj 2  )  )  ;", "ng   el 1 Name    =    el 1  . getName (  )  ;", "ng   el 2 Name    =    el 2  . getName (  )  ;", "if    (  !  ( el 1 Name . equals ( el 2 Name )  )  )     {", "return   el 1 Name . compareTo ( el 2 Name )  ;", "}", "ng   el 1 Text    =    el 1  . getTextTrim (  )  ;", "ng   el 2 Text    =    el 2  . getTextTrim (  )  ;", "if    (  !  ( el 1 Text . equals ( el 2 Text )  )  )     {", "return   el 1 Text . compareTo ( el 2 Text )  ;", "}", "int   attributeComparison    =     _ compareAttributes ( el 1  ,    el 2  )  ;", "if    ( attributeComparison    !  =     0  )     {", "return   attributeComparison ;", "}", "int   childrenComparison    =     _ compareChildren ( el 1  ,    el 2  )  ;", "if    ( childrenComparison    !  =     0  )     {", "return   childrenComparison ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["_compare"], "fileName": "com.liferay.util.xml.descriptor.StrictXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "List < Attribute >    el 1 Attrs    =    el 1  . attributes (  )  ;", "List < Attribute >    el 2 Attrs    =    el 2  . attributes (  )  ;", "if    (  ( el 1 Attrs . size (  )  )     <     ( el 2 Attrs . size (  )  )  )     {", "return    -  1  ;", "} else", "if    (  ( el 1 Attrs . size (  )  )     >     ( el 2 Attrs . size (  )  )  )     {", "return    1  ;", "}", "for    ( Attribute   attr    :    el 1 Attrs )     {", "int   value    =     _ contains ( el 2 Attrs ,    attr ,    new   AttributeComparator (  )  )  ;", "if    ( value    !  =     0  )     {", "return   value ;", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["_compareAttributes"], "fileName": "com.liferay.util.xml.descriptor.StrictXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "List < Element >    el 1 Children    =    el 1  . elements (  )  ;", "List < Element >    el 2 Children    =    el 2  . elements (  )  ;", "if    (  ( el 1 Children . size (  )  )     <     ( el 2 Children . size (  )  )  )     {", "return    -  1  ;", "} else", "if    (  ( el 1 Children . size (  )  )     >     ( el 2 Children . size (  )  )  )     {", "return    1  ;", "}", "for    ( Element   el    :    el 1 Children )     {", "int   value    =     _ contains ( el 2 Children ,    el ,    new   ElementCompara (  )  )  ;", "if    ( value    !  =     0  )     {", "return   value ;", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["_compareChildren"], "fileName": "com.liferay.util.xml.descriptor.StrictXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "int   firstValue    =     -  1  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "Attribute   o    =    list . get ( i )  ;", "int   value    =    comparacompare ( obj ,    o )  ;", "if    ( i    =  =     0  )     {", "firstValue    =    value ;", "}", "if    ( value    =  =     0  )     {", "return    0  ;", "}", "}", "return   firstValue ;", "}", "METHOD_END"], "methodName": ["_contains"], "fileName": "com.liferay.util.xml.descriptor.StrictXMLDescriptor"}, {"methodBody": ["METHOD_START", "{", "int   firstValue    =     -  1  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "Element   o    =    list . get ( i )  ;", "int   value    =    comparacompare ( obj ,    o )  ;", "if    ( i    =  =     0  )     {", "firstValue    =    value ;", "}", "if    ( value    =  =     0  )     {", "return    0  ;", "}", "}", "return   firstValue ;", "}", "METHOD_END"], "methodName": ["_contains"], "fileName": "com.liferay.util.xml.descriptor.StrictXMLDescriptor"}]