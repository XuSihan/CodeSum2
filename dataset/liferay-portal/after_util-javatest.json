[{"methodBody": ["METHOD_START", "{", "String   asciiAlphabet    =     \" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \"  ;", "Assert . assertEquals (  \" ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \"  ,     . normalizeToAscii ( asciiAlphabet )  )  ;", "}", "METHOD_END"], "methodName": ["testAscii"], "fileName": "com.liferay.util.NormalizerTest"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  6  )  ;", "sb . append (  \"  \\ u 0  3  9  1  \\ u 0  3  9  2  \\ u 0  3  9  3  \\ u 0  3  9  4  \\ u 0  3  9  5  \\ u 0  3  9  6  \\ u 0  3  9  7  \\ u 0  3  9  8  \\ u 0  3  9  9  \"  )  ;", "sb . append (  \"  \\ u 0  3  9 a \\ u 0  3  9 b \\ u 0  3  9 c \\ u 0  3  9 d \\ u 0  3  9 e \\ u 0  3  9 f \\ u 0  3 a 0  \\ u 0  3 a 1  \\ u 0  3 a 3  \"  )  ;", "sb . append (  \"  \\ u 0  3 a 4  \\ u 0  3 a 5  \\ u 0  3 a 6  \\ u 0  3 a 7  \\ u 0  3 a 8  \\ u 0  3 a 9  \\ u 0  3 b 1  \\ u 0  3 b 2  \\ u 0  3 b 3  \"  )  ;", "sb . append (  \"  \\ u 0  3 b 4  \\ u 0  3 b 5  \\ u 0  3 b 6  \\ u 0  3 b 7  \\ u 0  3 b 8  \\ u 0  3 b 9  \\ u 0  3 ba \\ u 0  3 bb \\ u 0  3 bc \"  )  ;", "sb . append (  \"  \\ u 0  3 bd \\ u 0  3 be \\ u 0  3 bf \\ u 0  3 c 0  \\ u 0  3 c 1  \\ u 0  3 c 2  \\ u 0  3 c 3  \\ u 0  3 c 4  \\ u 0  3 c 5  \"  )  ;", "sb . append (  \"  \\ u 0  3 c 6  \\ u 0  3 c 7  \\ u 0  3 c 8  \\ u 0  3 c 9  \"  )  ;", "String   greekAlphabet    =    sb . toString (  )  ;", "Assert . assertEquals (  \" ABGDEZETHIKLMN ' XOPRSTYPHCHPSOabgdezethiklmn ' xoprsstyphchpso \"  ,     . normalizeToAscii ( greekAlphabet )  )  ;", "}", "METHOD_END"], "methodName": ["testGreek"], "fileName": "com.liferay.util.NormalizerTest"}, {"methodBody": ["METHOD_START", "{", "String   hungarianAlphabet    =     \" A \\ u 0  0 c 1 BCDE \\ u 0  0 c 9 FGHI \\ u 0  0 cdJKLMNO \\ u 0  0 d 3  \\ u 0  0 d 6  \\ u 0  1  5  0 PQRSTU \\ u 0  0 da \"     +     (  \"  \\ u 0  0 dc \\ u 0  1  7  0 VWXYZa \\ u 0  0 e 1 bcde \\ u 0  0 e 9 fghi \\ u 0  0 edjklmno \\ u 0  0 f 3  \"     +     \"  \\ u 0  0 f 6  \\ u 0  1  5  1 pqrstu \\ u 0  0 fa \\ u 0  0 fc \\ u 0  1  7  1 vwxyz \"  )  ;", "Assert . assertEquals (  (  \" AABCDEEFGHIIJKLMNOOOOPQRSTUUUUVWXYZaabcdeefghiijklmnoooopqrstuuu \"     +     \" uvwxyz \"  )  ,     . normalizeToAscii ( hungarianAlphabet )  )  ;", "}", "METHOD_END"], "methodName": ["testHungarian"], "fileName": "com.liferay.util.NormalizerTest"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  8  )  ;", "sb . append (  \"  \\ u 0  4  1  0  \\ u 0  4  1  1  \\ u 0  4  1  2  \\ u 0  4  1  3  \\ u 0  4  1  4  \\ u 0  4  1  5  \\ u 0  4  0  1  \\ u 0  4  1  6  \\ u 0  4  1  7  \"  )  ;", "sb . append (  \"  \\ u 0  4  1  8  \\ u 0  4  1  9  \\ u 0  4  1 a \\ u 0  4  1 b \\ u 0  4  1 c \\ u 0  4  1 d \\ u 0  4  1 e \\ u 0  4  1 f \\ u 0  4  2  0  \"  )  ;", "sb . append (  \"  \\ u 0  4  2  1  \\ u 0  4  2  2  \\ u 0  4  2  3  \\ u 0  4  2  4  \\ u 0  4  2  5  \\ u 0  4  2  6  \\ u 0  4  2  7  \\ u 0  4  2  8  \\ u 0  4  2  9  \"  )  ;", "sb . append (  \"  \\ u 0  4  2 a \\ u 0  4  2 b \\ u 0  4  2 c \\ u 0  4  2 d \\ u 0  4  2 e \\ u 0  4  2 f \\ u 0  4  3  0  \\ u 0  4  3  1  \\ u 0  4  3  2  \"  )  ;", "sb . append (  \"  \\ u 0  4  3  3  \\ u 0  4  3  4  \\ u 0  4  3  5  \\ u 0  4  5  1  \\ u 0  4  3  6  \\ u 0  4  3  7  \\ u 0  4  3  8  \\ u 0  4  3  9  \\ u 0  4  3 a \"  )  ;", "sb . append (  \"  \\ u 0  4  3 b \\ u 0  4  3 c \\ u 0  4  3 d \\ u 0  4  3 e \\ u 0  4  3 f \\ u 0  4  4  0  \\ u 0  4  4  1  \\ u 0  4  4  2  \\ u 0  4  4  3  \"  )  ;", "sb . append (  \"  \\ u 0  4  4  4  \\ u 0  4  4  5  \\ u 0  4  4  6  \\ u 0  4  4  7  \\ u 0  4  4  8  \\ u 0  4  4  9  \\ u 0  4  4 a \\ u 0  4  4 b \\ u 0  4  4 c \"  )  ;", "sb . append (  \"  \\ u 0  4  4 d \\ u 0  4  4 e \\ u 0  4  4 f \"  )  ;", "String   russianAlphabet    =    sb . toString (  )  ;", "Assert . assertEquals (  (  \" ABVGDEEZZIJKLMNOPRSTUFHCCSS \\  \" Y \\  ' EUAabvgdeezzijklmnoprstufhccss \\  \" y \"     +     \"  ' eua \"  )  ,     . normalizeToAscii ( russianAlphabet )  )  ;", "}", "METHOD_END"], "methodName": ["testRussian"], "fileName": "com.liferay.util.NormalizerTest"}, {"methodBody": ["METHOD_START", "{", "String   spanishAlphabet    =     \" ABCDEFGIJKLMN \\ u 0  0 d 1 OPQRSTUVWXYZabcdefghijklmn \\ u 0  0 f 1 opqrstuvwxyz \"  ;", "Assert . assertEquals (  \" ABCDEFGIJKLMNNOPQRSTUVWXYZabcdefghijklmnnopqrstuvwxyz \"  ,     . normalizeToAscii ( spanishAlphabet )  )  ;", "}", "METHOD_END"], "methodName": ["testSpanish"], "fileName": "com.liferay.util.NormalizerTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  \"  1  \"  ,    NumberFormatUtil . format (  _ numberFormat ,     1  ,     1  .  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoDecimal"], "fileName": "com.liferay.util.NumberFormatUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  \"  1  .  1  \"  ,    NumberFormatUtil . format (  _ numberFormat ,     1  .  1  ,     1  .  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testOneDecimal"], "fileName": "com.liferay.util.NumberFormatUtilTest"}, {"methodBody": ["METHOD_START", "{", "PortalBeanLocatorUtil . setBeanLocator ( null )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.util.bean.PortalBeanLocatorUtilTest"}, {"methodBody": ["METHOD_START", "{", "try    ( CaptureHandler   captureHandler    =    JDKLoggerTestUtil . configureJDKLogger ( PortalBeanLocatorUtil . class . getName (  )  ,    Level . SEVERE )  )     {", "try    {", "PortalBeanLocatorUtil . locate (  \" beanName \"  )  ;", "Assert . fail (  )  ;", "}    catch    ( BeanLocatorException   ble )     {", "Assert . assertEquals (  \" BeanLocator   is   not   set \"  ,    ble . getMessage (  )  )  ;", "List < LogRecord >    logRecords    =    captureHandler . getLogRecords (  )  ;", "Assert . assertEquals ( logRecords . toString (  )  ,     1  ,    logRecords . size (  )  )  ;", "LogRecord   logRecord    =    logRecords . get (  0  )  ;", "Assert . assertEquals (  \" BeanLocator   is   null \"  ,    logRecord . getMessage (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testBeanLocatorHasNotBeenSet"], "fileName": "com.liferay.util.bean.PortalBeanLocatorUtilTest"}, {"methodBody": ["METHOD_START", "{", "when (  _ beanLocator . locate (  \" existingBean \"  )  )  . thenReturn ( new   String (  \" existingBean \"  )  )  ;", ". setBeanLocator (  _ beanLocator )  ;", "String   bean    =     (  ( String )     (  . locate (  \" existingBean \"  )  )  )  ;", "Assert . assertNotNull ( bean )  ;", "Assert . assertEquals (  \" existingBean \"  ,    bean )  ;", "Mockito . verify (  _ beanLocator ,    Mockito . times (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testLocateExistingBean"], "fileName": "com.liferay.util.bean.PortalBeanLocatorUtilTest"}, {"methodBody": ["METHOD_START", "{", "when (  _ beanLocator . locate (  \" nonExistingBean \"  )  )  . thenReturn ( null )  ;", ". setBeanLocator (  _ beanLocator )  ;", "String   bean    =     (  ( String )     (  . locate (  \" nonExistingBean \"  )  )  )  ;", "Assert . assertNull ( bean )  ;", "Mockito . verify (  _ beanLocator ,    Mockito . times (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testLocateNonExistingBean"], "fileName": "com.liferay.util.bean.PortalBeanLocatorUtilTest"}, {"methodBody": ["METHOD_START", "{", "_ customSQL    =    new   CustomSQLTest . TestCustomSQL (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "Field   paclField    =    ReflectionUtil . getDeclaredField ( DataAccess . class ,     \"  _ pacl \"  )  ;", ".  _ pacl    =     (  ( DataAccess . PACL )     ( paclField . get ( null )  )  )  ;", "paclField . set ( null ,    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    PACL . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )    throws   Throwable    {", "String   methodName    =    method . getName (  )  ;", "if    (  !  ( methodName . equals (  \" getDataSource \"  )  )  )     {", "return    \" test \"  ;", "}", "return   ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    DataSource . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )    throws   Throwable    {", "return   null ;", "}", "}  )  ;", "}", "}  )  )  ;", "Field   portalField    =    ReflectionUtil . getDeclaredField ( PortalUtil . class ,     \"  _ portal \"  )  ;", ".  _ portal    =     (  ( Portal )     ( portalField . get ( null )  )  )  ;", "portalField . set ( null ,    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Portal . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )    throws   Throwable    {", "return    \" test \"  ;", "}", "}  )  )  ;", "Field   propsField    =    ReflectionUtil . getDeclaredField ( PropsUtil . class ,     \"  _ props \"  )  ;", ".  _ props    =     (  ( Props )     ( propsField . get ( null )  )  )  ;", "propsField . set ( null ,    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Props . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )    throws   Throwable    {", "return    \" test \"  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["setUpClass"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "Field   paclField    =    ReflectionUtil . getDeclaredField ( DataAccess . class ,     \"  _ pacl \"  )  ;", "paclField . set ( null ,     .  _ pacl )  ;", "Field   portalField    =    ReflectionUtil . getDeclaredField ( PortalUtil . class ,     \"  _ portal \"  )  ;", "portalField . set ( null ,     .  _ portal )  ;", "Field   propsField    =    ReflectionUtil . getDeclaredField ( PropsUtil . class ,     \"  _ props \"  )  ;", "propsField . set ( null ,     .  _ props )  ;", "}", "METHOD_END"], "methodName": ["tearDownClass"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setStatus ( STATUS _ ANY )  ;", "tSQL (  \"  (        -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetAnyStatus"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( true )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ ANY )  ;", "testSQL (  \"  (  ( userId    =     ?    AND   status    !  =     ?  )       OR       -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetAnyStatusIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( false )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ ANY )  ;", "testSQL (  \"  ( userId    =     ?       AND       -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetAnyStatusNotIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setStatus ( STATUS _ IN _ TRASH ,    true )  ;", "tSQL (  \"  (       status    !  =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetExcludeStatus"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( true )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ IN _ TRASH ,    true )  ;", "testSQL (  \"  (  ( userId    =     ?    AND   status    !  =     ?  )       OR      status    !  =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetExcludeStatusIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( false )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ IN _ TRASH ,    true )  ;", "testSQL (  \"  ( userId    =     ?       AND      status    !  =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetExcludeStatusNotIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( true )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "testSQL (  \"  (  ( userId    =     ?    AND   status    !  =     ?  )       OR       -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setStatus ( STATUS _ APPROVED )  ;", "tSQL (  \"  (       status    =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetIncludeStatus"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( true )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ APPROVED )  ;", "testSQL (  \"  (  ( userId    =     ?    AND   status    !  =     ?  )       OR      status    =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetIncludeStatusIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( false )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ APPROVED )  ;", "testSQL (  \"  ( userId    =     ?       AND      status    =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetIncludeStatusNotIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( false )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "testSQL (  \"  ( userId    =     ?       AND       -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetNotIncludeOwner"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "_ queryDefinition . setIncludeOwner ( true )  ;", "_ queryDefinition . setOwnerUserId (  .  _ USER _ ID )  ;", "_ queryDefinition . setStatus ( STATUS _ APPROVED )  ;", "Assert . assertEquals (  \"  (  ( Test . userId    =     ?    AND   Test . status    !  =     ?  )       OR      Test . status    =     ?  )     \"  ,     _ customSQL . get (  \" test \"  ,     _ queryDefinition ,     \" Test \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetTableName"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "testSQL (  \"  (        -  1     =     ?  )     \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetWithEmptyQueryDefinition"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( expected ,     _ customSQL . get (  \" test \"  ,     _ queryDefinition )  )  ;", "}", "METHOD_END"], "methodName": ["testSQL"], "fileName": "com.liferay.util.dao.orm.CustomSQLTest"}, {"methodBody": ["METHOD_START", "{", "InternetAddress [  ]    internetAddresses    =    new   InternetAddress [ size ]  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "internetAddresses [ i ]     =    new   InternetAddress (  (  ( String . valueOf ( i )  )     +     (  .  _ INTERNET _ ADDRESS _ SUFFIX )  )  )  ;", "}", "return   internetAddresses ;", "}", "METHOD_END"], "methodName": ["buildInternetAddresses"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "_ internetAddresses    =    buildInternetAddresses (  1  1  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertFalse ( InternetAddressUtil . contains (  _ internetAddresses ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testContainsNullEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue ( InternetAddressUtil . contains (  _ internetAddresses ,     \"  1  @ liferay . com \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testContainsValidEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertFalse ( InternetAddressUtil . isValid (  \" miguel . pastor \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertFalse ( InternetAddressUtil . isValid (  \" miguel . pastor @  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidEmailAddressWithAt"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertFalse ( InternetAddressUtil . contains (  _ internetAddresses ,     \"  1  2  @ liferay . com \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotContainsValidEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "InternetAddress [  ]    internetAddresses    =    InternetAddressUtil . removeEntry (  _ internetAddresses ,     \"  1  @ liferay . com \"  )  ;", "Assert . assertEquals ( Arrays . toString ( internetAddresses )  ,     1  0  ,    internetAddresses . length )  ;", "}", "METHOD_END"], "methodName": ["testRemoveExistingEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "InternetAddress [  ]    restOfInternetAddresses    =    InternetAddressUtil . removeEntry (  _ internetAddresses ,     \"  1  2  @ liferay . com \"  )  ;", "Assert . assertEquals ( Arrays . toString ( restOfInternetAddresses )  ,     1  1  ,    restOfInternetAddresses . length )  ;", "}", "METHOD_END"], "methodName": ["testRemoveNonexistentEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue ( InternetAddressUtil . isValid (  \" miguel . pastor @ liferay . com \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testValidEmailAddress"], "fileName": "com.liferay.util.mail.InternetAddressUtilTest"}, {"methodBody": ["METHOD_START", "{", "Queue < File >    fileQueue    =    new   LinkedList <  >  (  )  ;", "fileQueue . offer ( file )  ;", "while    (  ( file    =    fileQueue . poll (  )  )     !  =    null )     {", "if    ( file . isFile (  )  )     {", "file . delete (  )  ;", "} else", "if    ( file . isDirectory (  )  )     {", "File [  ]    files    =    file . listFiles (  )  ;", "if    (  ( files . length )     =  =     0  )     {", "file . delete (  )  ;", "} else    {", "addAll ( fileQueue ,    files )  ;", "fileQueue . add ( file )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["deleteFile"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "String   resourceName    =    className . replace ( PERIOD ,    SLASH )  ;", "resourceName    =    resourceName . concat (  \"  . class \"  )  ;", "URL   url    =    new   URL ( StringBundler . concat (  \" file :  /  /  \"  ,    jarFile . getAbsolutePath (  )  ,     \"  !  /  \"  ,    resourceName )  )  ;", "resources . put ( resourceName ,    url )  ;", "}", "METHOD_END"], "methodName": ["putResource"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "File   spiEmbeddedLibDir    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ DIR _ NAME )  ;", "spiEmbeddedLibDir . mkdir (  )  ;", "_ jarFile    =    new   File ( spiEmbeddedLibDir ,     \" jarFile . jar \"  )  ;", "_ jarFile . createNewFile (  )  ;", "File   notJarFile    =    new   File ( spiEmbeddedLibDir ,     \" notJarFile . zip \"  )  ;", "notJarFile . createNewFile (  )  ;", "File   spiEmbeddedLibExtDir    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ EXT _ DIR _ NAME )  ;", "spiEmbeddedLibExtDir . mkdir (  )  ;", "_ extJarFile    =    new   File ( spiEmbeddedLibExtDir ,     \" extJarFile . jar \"  )  ;", "_ extJarFile . createNewFile (  )  ;", "File   extNotJarFile    =    new   File ( spiEmbeddedLibExtDir ,     \" extNotJarFile . zip \"  )  ;", "extNotJarFile . createNewFile (  )  ;", "File   globalLib 1 Dir    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  1  _ DIR _ NAME )  ;", "globalLib 1 Dir . mkdir (  )  ;", "_ portalServiceJarFile    =    new   File ( globalLib 1 Dir ,     \" portal - kernel . jar \"  )  ;", "_ portalServiceJarFile . createNewFile (  )  ;", "_ global 1 JarFile    =    new   File ( globalLib 1 Dir ,     \" global 1 JarFile . jar \"  )  ;", "_ global 1 JarFile . createNewFile (  )  ;", "File   global 1 NotJarFile    =    new   File ( globalLib 1 Dir ,     \" global 1 NotJarFile . zip \"  )  ;", "global 1 NotJarFile . createNewFile (  )  ;", "File   globalLib 2 Dir    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  2  _ DIR _ NAME )  ;", "globalLib 2 Dir . mkdir (  )  ;", "_ jdbcDriverJarFile    =    new   File ( globalLib 2 Dir ,     \" jdbcDriver . jar \"  )  ;", "_ jdbcDriverJarFile . createNewFile (  )  ;", "_ global 2 JarFile    =    new   File ( globalLib 2 Dir ,     \" global 2 JarFile . jar \"  )  ;", "_ global 2 JarFile . createNewFile (  )  ;", "File   global 2 NotJarFile    =    new   File ( globalLib 2 Dir ,     \" global 2 NotJarFile . zip \"  )  ;", "global 2 NotJarFile . createNewFile (  )  ;", "final   Map < String ,    URL >    resources    =    new   HashMap <  >  (  )  ;", "final   String   driverClassName    =     \" TestDriver \"  ;", "putResource ( resources ,     _ jdbcDriverJarFile ,    driverClassName )  ;", "putResource ( resources ,     _ portalServiceJarFile ,    PortalException . class . getName (  )  )  ;", "final   Method   getMethod    =    Props . class . getMethod (  \" get \"  ,    String . class )  ;", "PropsUtil . setProps (  (  ( Props )     ( ProxyUtil . newProxyInstance ( Props . class . getClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Props . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "if    ( getMethod . equals ( method )  )     {", "if    ( args [  0  ]  . equals ( JDBC _ DEFAULT _ DRIVER _ CLASS _ NAME )  )     {", "return   driverClassName ;", "}", "return   StringPool . BLANK ;", "}", "throw   new   UnsupportedOperationException (  )  ;", "}", "}  )  )  )  )  ;", "PortalClassLoaderUtil . setClassLoader ( new   ClassLoader (  )     {", "@ Override", "public   URL   getResource ( String   name )     {", "URL   url    =    resources . get ( name )  ;", "if    ( url    !  =    null )     {", "return   url ;", "}", "return   super . getResource ( name )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "deleteFile ( new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ DIR _ NAME )  )  ;", "deleteFile ( new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  1  _ DIR _ NAME )  )  ;", "deleteFile ( new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  2  _ DIR _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "try    ( CaptureHandler   captureHandler    =    JDKLoggerTestUtil . configureJDKLogger ( SPIClassPathContextListener . class . getName (  )  ,    Level . FINE )  )     {", "List < LogRecord >    logRecords    =    captureHandler . getLogRecords (  )  ;", "_ mockServletContext . addInitParameter (  \" spiProviderClassName \"  ,     \" InvalidSPIProvider \"  )  ;", "SPIClassPathContextListener   spiClassPathContextListener    =    new   SPIClassPathContextListener (  )  ;", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "StringBundler   sb    =    new   StringBundler (  1  4  )  ;", "sb . append (  _ jarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  _ global 1 JarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  _ portalServiceJarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  _ global 2 JarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  _ jdbcDriverJarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  _ extJarFile . getAbsolutePath (  )  )  ;", "sb . append ( File . pathSeparator )  ;", "sb . append (  .  _ CONTEXT _ PATH )  ;", "sb . append (  \"  / WEB - INF / classes \"  )  ;", "String   spiClassPath    =    sb . toString (  )  ;", "Assert . assertEquals ( spiClassPath ,    SPI _ CLASS _ PATH )  ;", "Assert . assertEquals ( logRecords . toString (  )  ,     2  ,    logRecords . size (  )  )  ;", "LogRecord   logRecord    =    logRecords . get (  0  )  ;", "Assert . assertEquals (  (  \" SPI   class   path    \"     +    spiClassPath )  ,    logRecord . getMessage (  )  )  ;", "logRecord    =    logRecords . get (  1  )  ;", "Assert . assertEquals (  \" Unable   to   create   SPI   provider   with   name   InvalidSPIProvider \"  ,    logRecord . getMessage (  )  )  ;", "logRecords    =    captureHandler . resetLogLevel ( Level . OFF )  ;", "ReflectionTestUtil . setFieldValue ( SPIUtil . class ,     \"  _ spi \"  ,    new   MockSPI (  )  )  ;", "try    {", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "}    finally    {", "ReflectionTestUtil . setFieldValue ( SPIUtil . class ,     \"  _ spi \"  ,    null )  ;", "}", "Assert . assertEquals ( spiClassPath ,    SPI _ CLASS _ PATH )  ;", "Assert . assertTrue ( logRecords . toString (  )  ,    logRecords . isEmpty (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testClassPathGeneration"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "String   jvmClassPath    =    ClassPathUtil . getJVMClassPath ( false )  ;", "URL [  ]    urls    =    ClassPathUtil . getClassPathURLs ( jvmClassPath )  ;", "ClassLoader   parentClassLoader    =    new   URLClassLoader ( urls ,    null )  ;", "ClassLoader   childClassLoader    =    new   URLClassLoader ( urls ,    parentClassLoader )  ;", "Class <  ?  >    clazz    =    SPIClassPathContextListener . loadClassDirectly ( childClassLoader ,     . TestClass . class . getName (  )  )  ;", "Assert . assertNotSame (  . TestClass . class ,    clazz )  ;", "Assert . assertEquals (  . TestClass . class . getName (  )  ,    clazz . getName (  )  )  ;", "Assert . assertSame ( childClassLoader ,    clazz . getClassLoader (  )  )  ;", "Assert . assertSame ( clazz ,    ReflectionTestUtil . invoke ( childClassLoader ,     \" findLoadedClass \"  ,    new   Class <  ?  >  [  ]  {    String . class    }  ,     . TestClass . class . getName (  )  )  )  ;", "Assert . assertNull ( ReflectionTestUtil . invoke ( parentClassLoader ,     \" findLoadedClass \"  ,    new   Class <  ?  >  [  ]  {    String . class    }  ,     . TestClass . class . getName (  )  )  )  ;", "Assert . assertSame ( clazz ,    SPIClassPathContextListener . loadClassDirectly ( childClassLoader ,     . TestClass . class . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLoadClassDirectly"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "File   file    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    dirName )  ;", "deleteFile ( file )  ;", "SPIClassPathContextListener   spiClassPathContextListener    =    new   SPIClassPathContextListener (  )  ;", "try    {", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "Assert . fail (  )  ;", "}    catch    ( RuntimeException   re )     {", "Assert . assertEquals (  (  \" Unable   to   find   directory    \"     +     ( file . getAbsolutePath (  )  )  )  ,    re . getMessage (  )  )  ;", "}", "file . deleteOnExit (  )  ;", "file . createNewFile (  )  ;", "try    {", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "Assert . fail (  )  ;", "}    catch    ( RuntimeException   re )     {", "Assert . assertEquals (  (  \" Unable   to   find   directory    \"     +     ( file . getAbsolutePath (  )  )  )  ,    re . getMessage (  )  )  ;", "}    finally    {", "file . delete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testMissingDir"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "testMissingDir ( SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  1  _ DIR _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testMissingGlobalLibDir1"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "testMissingDir ( SPIClassPathContextListenerTest .  _ GLOBAL _ LIB _  2  _ DIR _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testMissingGlobalLibDir2"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "testMissingDir ( SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ DIR _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testMissingSPIEmbeddedLibDir"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "testMissingDir ( SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ EXT _ DIR _ NAME )  ;", "}", "METHOD_END"], "methodName": ["testMissingSPIEmbeddedLibExtDir"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "File   embeddedLibDir    =    new   File ( SPIClassPathContextListenerTest .  _ CONTEXT _ PATH ,    SPIClassPathContextListenerTest .  _ EMBEDDED _ LIB _ DIR _ NAME )  ;", "SPIClassPathContextListener   spiClassPathContextListener    =    new   SPIClassPathContextListener (  )  ;", "_ mockServletContext . addInitParameter (  \" spiProviderClassName \"  ,    MockSPIProvider . class . getName (  )  )  ;", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "AtomicReference < SPIProvider >    spiProviderReference    =    SPIClassPathContextListener . spiProviderReference ;", "Assert . assertNotNull ( spiProviderReference . get (  )  )  ;", "List < SPIProvider >    spiProviders    =    MPIHelperUtil . getSPIProviders (  )  ;", "Assert . assertEquals ( spiProviders . toString (  )  ,     1  ,    spiProviders . size (  )  )  ;", "Assert . assertSame ( spiProviderReference . get (  )  ,    spiProviders . get (  0  )  )  ;", "try    ( CaptureHandler   captureHandler    =    JDKLoggerTestUtil . configureJDKLogger ( SPIClassPathContextListener . class . getName (  )  ,    Level . SEVERE )  )     {", "List < LogRecord >    logRecords    =    captureHandler . getLogRecords (  )  ;", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "Assert . assertEquals ( logRecords . toString (  )  ,     1  ,    logRecords . size (  )  )  ;", "LogRecord   logRecord    =    logRecords . get (  0  )  ;", "Assert . assertEquals ( StringBundler . concat (  \" Duplicate   SPI   provider    \"  ,    String . valueOf ( spiProviderReference . get (  )  )  ,     \"    is   already   registered   in   servlet   context    \"  ,     _ mockServletContext . getContextPath (  )  )  ,    logRecord . getMessage (  )  )  ;", "}", "spiClassPathContextListener . contextDestroyed ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "Assert . assertNull ( spiProviderReference . get (  )  )  ;", "spiProviders    =    MPIHelperUtil . getSPIProviders (  )  ;", "Assert . assertTrue ( spiProviders . toString (  )  ,    spiProviders . isEmpty (  )  )  ;", "spiClassPathContextListener . contextDestroyed ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "Assert . assertNull ( spiProviderReference . get (  )  )  ;", "spiProviders    =    MPIHelperUtil . getSPIProviders (  )  ;", "Assert . assertTrue ( spiProviders . toString (  )  ,    spiProviders . isEmpty (  )  )  ;", "_ mockServletContext . addInitParameter (  \" spiProviderClassName \"  ,    MockSPIProvider . class . getName (  )  )  ;", "ReflectionTestUtil . setFieldValue ( SPIUtil . class ,     \"  _ spi \"  ,    new   MockSPI (  )  )  ;", "try    {", "spiClassPathContextListener . contextInitialized ( new   ServletContextEvent (  _ mockServletContext )  )  ;", "}    finally    {", "ReflectionTestUtil . setFieldValue ( SPIUtil . class ,     \"  _ spi \"  ,    null )  ;", "}", "spiProviderReference    =    SPIClassPathContextListener . spiProviderReference ;", "Assert . assertNotNull ( spiProviderReference . get (  )  )  ;", "spiProviders    =    MPIHelperUtil . getSPIProviders (  )  ;", "Assert . assertEquals ( spiProviders . toString (  )  ,     1  ,    spiProviders . size (  )  )  ;", "Assert . assertSame ( spiProviderReference . get (  )  ,    spiProviders . get (  0  )  )  ;", "embeddedLibDir . delete (  )  ;", "}", "METHOD_END"], "methodName": ["testRegistration"], "fileName": "com.liferay.util.resiliency.spi.provider.SPIClassPathContextListenerTest"}, {"methodBody": ["METHOD_START", "{", "BufferCacheServletResponse   bufferCacheServletResponse    =    new   BufferCacheServletResponse ( new   MockHttpServletResponse (  )  )  ;", "byte [  ]    data    =    new   byte [  1  0  ]  ;", "Random   random    =    new   Random (  )  ;", "random . nextBytes ( data )  ;", "ByteBuffer   byteBuffer    =    ByteBuffer . wrap ( data ,     2  ,     5  )  ;", "bufferCacheServletResponse . setByteBuffer ( byteBuffer )  ;", "cacheResponseData    =    new    ( bufferCacheServletResponse )  ;", "cacheResponseData . setAttribute (  \" a 1  \"  ,     \" v 1  \"  )  ;", "cacheResponseData . setAttribute (  \" b 1  \"  ,     \" v 2  \"  )  ;", "deserialized    =     (  (  )     ( SerializableUtil . deserialize ( SerializableUtil . serialize ( cacheResponseData )  )  )  )  ;", "Assert . assertEquals (  \" Content   type   not   correctly   recreated \"  ,    cacheResponseData . getContentType (  )  ,    deserialized . getContentType (  )  )  ;", "Assert . assertEquals (  \" Headers   not   correctly   recreated \"  ,    cacheResponseData . getHeaders (  )  ,    deserialized . getHeaders (  )  )  ;", "Assert . assertEquals (  \" Attribute   a 1    not   correctly   recreated \"  ,    cacheResponseData . getAttribute (  \" a 1  \"  )  ,    deserialized . getAttribute (  \" a 1  \"  )  )  ;", "Assert . assertEquals (  \" Attribute   a 2    not   correctly   recreated \"  ,    cacheResponseData . getAttribute (  \" a 2  \"  )  ,    deserialized . getAttribute (  \" a 2  \"  )  )  ;", "ByteBuffer   deserializedByteBuffer    =    deserialized . getByteBuffer (  )  ;", "Assert . assertArrayEquals (  \" Byte   buffer   data   not   correctly   recreated \"  ,    Arrays . copyOfRange ( byteBuffer . array (  )  ,     (  ( byteBuffer . arrayOffset (  )  )     +     ( byteBuffer . position (  )  )  )  ,     (  ( byteBuffer . arrayOffset (  )  )     +     ( byteBuffer . limit (  )  )  )  )  ,    Arrays . copyOfRange ( deserializedByteBuffer . array (  )  ,     (  ( deserializedByteBuffer . arrayOffset (  )  )     +     ( deserializedByteBuffer . position (  )  )  )  ,     (  ( deserializedByteBuffer . arrayOffset (  )  )     +     ( deserializedByteBuffer . limit (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testReconstructFromSerialialization"], "fileName": "com.liferay.util.servlet.filters.CacheResponseDataTest"}]