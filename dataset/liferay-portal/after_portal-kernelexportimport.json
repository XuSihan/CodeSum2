[{"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT )  )     {", "return   ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ EXPORT _ PORTLET )  )     {", "return   ExportImportConfigurationConstants . TYPE _ EXPORT _ PORTLET _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ IMPORT _ LAYOUT )  )     {", "return   ExportImportConfigurationConstants . TYPE _ IMPORT _ LAYOUT _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ IMPORT _ PORTLET )  )     {", "return   ExportImportConfigurationConstants . TYPE _ IMPORT _ PORTLET _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL )  )     {", "return   ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE )  )     {", "return   ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ PORTLET _ LOCAL )  )     {", "return   ExportImportConfigurationConstants . TYPE _ PUBLISH _ PORTLET _ LOCAL _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ PORTLET _ REMOTE )  )     {", "return   ExportImportConfigurationConstants . TYPE _ PUBLISH _ PORTLET _ REMOTE _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ LOCAL )  )     {", "return   ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ LOCAL _ LABEL ;", "} else", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ REMOTE )  )     {", "return   ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ REMOTE _ LABEL ;", "} else    {", "return   com . liferay . petra . string . StringPool . BLANK ;", "}", "}", "METHOD_END"], "methodName": ["getTypeLabel"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationConstants"}, {"methodBody": ["METHOD_START", "{", "parameterMap . put ( PortletDataHandlerKeys . DELETIONS ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . IGNORE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ SETTINGS ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . LOGO ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PERMISSIONS ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ SETUP _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( DateUtil . RANGE ,    new   String [  ]  {    DateUtil . RANGE _ FROM _ LAST _ PUBLISH _ DATE    }  )  ;", "parameterMap . put ( PortletDataHandlerKeys . THEME _ REFERENCE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["addDefaultPublishingParameters"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFactory . buildDefaultLocalPublishingExportImportConfiguration ( user ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    ExportImportConfigurationFactory . getDefaultPublishingParameters (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultLocalPublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    publishLayoutLocalSettingsMap    =    ExportImportConfigurationSettingsMapFactory . buildPublishLayoutLocalSettingsMap ( user ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    ExportImportHelperUtil . getAllLayoutIds ( sourceGroupId ,    privateLayout )  ,    parameterMap )  ;", "return   ExportImportConfigurationLocalServiceUtil . addDraftExportImportConfiguration ( user . getUserId (  )  ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL ,    publishLayoutLocalSettingsMap )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultLocalPublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "long   sourceGroupId    =    ParamUtil . getLong ( portletRequest ,     \" sourceGroupId \"  )  ;", "long   targetGroupId    =    ParamUtil . getLong ( portletRequest ,     \" targetGroupId \"  )  ;", "boolean   privateLayout    =    ParamUtil . getBoolean ( portletRequest ,     \" privateLayout \"  )  ;", "Map < String ,    String [  ]  >    parameterMap    =     . getDefaultPublishingParameters ( portletRequest )  ;", "return    . buildDefaultLocalPublishingExportImportConfiguration ( themeDisplay . getUser (  )  ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultLocalPublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFactory . buildDefaultRemotePublishingExportImportConfiguration ( user ,    sourceGroupId ,    privateLayout ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    ExportImportConfigurationFactory . getDefaultPublishingParameters (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultRemotePublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    publishLayoutRemoteSettingsMap    =    ExportImportConfigurationSettingsMapFactory . buildPublishLayoutRemoteSettingsMap ( user . getUserId (  )  ,    sourceGroupId ,    privateLayout ,    ExportImportHelperUtil . getAllLayoutIdsMap ( sourceGroupId ,    privateLayout )  ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    privateLayout ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "return   ExportImportConfigurationLocalServiceUtil . addDraftExportImportConfiguration ( user . getUserId (  )  ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE ,    publishLayoutRemoteSettingsMap )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultRemotePublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "long   sourceGroupId    =    ParamUtil . getLong ( portletRequest ,     \" sourceGroupId \"  )  ;", "boolean   privateLayout    =    ParamUtil . getBoolean ( portletRequest ,     \" privateLayout \"  )  ;", "String   remoteAddress    =    ParamUtil . getString ( portletRequest ,     \" remoteAddress \"  )  ;", "int   remotePort    =    ParamUtil . getInteger ( portletRequest ,     \" remotePort \"  )  ;", "String   remotePathContext    =    ParamUtil . getString ( portletRequest ,     \" remotePathContext \"  )  ;", "boolean   secureConnection    =    ParamUtil . getBoolean ( portletRequest ,     \" secureConnection \"  )  ;", "long   remoteGroupId    =    ParamUtil . getLong ( portletRequest ,     \" remoteGroupId \"  )  ;", "Map < String ,    String [  ]  >    parameterMap    =     . getDefaultPublishingParameters ( portletRequest )  ;", "return    . buildDefaultRemotePublishingExportImportConfiguration ( themeDisplay . getUser (  )  ,    sourceGroupId ,    privateLayout ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["buildDefaultRemotePublishingExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( exportImportConfiguration    =  =    null )     {", "return   null ;", "}", "return   LocalServiceUtil . add ( exportImportConfiguration . getUserId (  )  ,    exportImportConfiguration . getGroupId (  )  ,    exportImportConfiguration . getName (  )  ,    exportImportConfiguration . getDescription (  )  ,    exportImportConfiguration . getType (  )  ,    exportImportConfiguration . getSettingsMap (  )  ,    exportImportConfiguration . getStatus (  )  ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["cloneExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    ExportImportConfigurationParameterMapFactory . buildParameterMap (  )  ;", "return    . addDefaultPublishingParameters ( parameterMap )  ;", "}", "METHOD_END"], "methodName": ["getDefaultPublishingParameters"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    ExportImportConfigurationParameterMapFactory . buildParameterMap ( portletRequest )  ;", "return    . addDefaultPublishingParameters ( parameterMap )  ;", "}", "METHOD_END"], "methodName": ["getDefaultPublishingParameters"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationFactory"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "long   groupId    =    ParamUtil . getLong ( portletRequest ,     \" groupId \"  )  ;", "if    ( type    =  =     ( Constants . TYPE _ EXPORT _ LAYOUT )  )     {", "groupId    =    ParamUtil . getLong ( portletRequest ,     \" liveGroupId \"  )  ;", "}", "String   name    =    ParamUtil . getString ( portletRequest ,     \" name \"  )  ;", "String   description    =    ParamUtil . getString ( portletRequest ,     \" description \"  )  ;", "Map < String ,    Serializable >    settingsMap    =    SettingsMapFactory . buildSettingsMap ( portletRequest ,    groupId ,    type )  ;", "Map < String ,    String [  ]  >    parameterMap    =     (  ( Map < String ,    String [  ]  >  )     ( settingsMap . get (  \" parameterMap \"  )  )  )  ;", "if    (  ( parameterMap    !  =    null )     &  &     ( type    =  =     ( Constants . TYPE _ PUBLISH _ LAYOUT _ LOCAL )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . PERFORM _ DIRECT _ BINARY _ IMPORT ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "}", "return   LocalServiceUtil . add ( themeDisplay . getUserId (  )  ,    groupId ,    name ,    description ,    type ,    settingsMap ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . addExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT )  ;", "}", "METHOD_END"], "methodName": ["addExportLayoutExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . addExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL )  ;", "}", "METHOD_END"], "methodName": ["addPublishLayoutLocalExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . addExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE )  ;", "}", "METHOD_END"], "methodName": ["addPublishLayoutRemoteExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    settingsMap    =    exportImportConfiguration . getSettingsMap (  )  ;", "Map < String ,    String [  ]  >    parameterMap    =     (  ( HashMap < String ,    String [  ]  >  )     ( settingsMap . get (  \" parameterMap \"  )  )  )  ;", "return   parameterMap . get ( parameterName )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationParameter"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    taskContextMap    =    backgroundTask . getTaskContextMap (  )  ;", "ExportImportConfiguration   exportImportConfiguration    =    ExportImportConfigurationLocalServiceUtil . getExportImportConfiguration ( GetterUtil . getLong ( taskContextMap . get (  \" exportImportConfigurationId \"  )  )  )  ;", "return    . getExportImportConfigurationParameter ( exportImportConfiguration ,    parameterName )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationParameter"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "long   exportImportConfigurationId    =    ParamUtil . getLong ( portletRequest ,     \" exportImportConfigurationId \"  )  ;", "long   groupId    =    ParamUtil . getLong ( portletRequest ,     \" groupId \"  )  ;", "String   name    =    ParamUtil . getString ( portletRequest ,     \" name \"  )  ;", "String   description    =    ParamUtil . getString ( portletRequest ,     \" description \"  )  ;", "Map < String ,    Serializable >    settingsMap    =    SettingsMapFactory . buildSettingsMap ( portletRequest ,    groupId ,    type )  ;", "return   LocalServiceUtil . update ( themeDisplay . getUserId (  )  ,    exportImportConfigurationId ,    name ,    description ,    settingsMap ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . updateExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT )  ;", "}", "METHOD_END"], "methodName": ["updateExportLayoutExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . updateExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL )  ;", "}", "METHOD_END"], "methodName": ["updatePublishLayoutLocalExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationHelper . updateExportImportConfiguration ( portletRequest ,    ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE )  ;", "}", "METHOD_END"], "methodName": ["updatePublishLayoutRemoteExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationHelper"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationParameterMapFactory . buildParameterMap ( PortletDataHandlerKeys . DATA _ STRATEGY _ MIRROR _ OVERWRITE ,    true ,    false ,    false ,    false ,    false ,    false ,    true ,    true ,    true ,    true ,    true ,    true ,    ExportImportDateUtil . RANGE _ FROM _ LAST _ PUBLISH _ DATE ,    true ,    true ,    UserIdStrategy . CURRENT _ USER _ ID )  ;", "}", "METHOD_END"], "methodName": ["buildParameterMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationParameterMapFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap <  >  (  )  ;", "String   dataStrategyParameter    =    PortletDataHandlerKeys . DATA _ STRATEGY _ MIRROR _ OVERWRITE ;", "if    ( Validator . isNotNull ( dataStrategy )  )     {", "parameterMap . put ( PortletDataHandlerKeys . DATA _ STRATEGY ,    new   String [  ]  {    dataStrategyParameter    }  )  ;", "}", "boolean   deleteMissingLayoutsParameter    =    true ;", "if    ( deleteMissingLayouts    !  =    null )     {", "deleteMissingLayoutsParameter    =    deleteMissingLayouts . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . DELETE _ MISSING _ LAYOUTS ,    new   String [  ]  {    String . valueOf ( deleteMissingLayoutsParameter )     }  )  ;", "boolean   deletePortletDataParameter    =    false ;", "if    ( deletePortletData    !  =    null )     {", "deletePortletDataParameter    =    deletePortletData . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . DELETE _ PORTLET _ DATA ,    new   String [  ]  {    String . valueOf ( deletePortletDataParameter )     }  )  ;", "boolean   ignoreLastPublishDateParameter    =    true ;", "if    ( ignoreLastPublishDate    !  =    null )     {", "ignoreLastPublishDateParameter    =    ignoreLastPublishDate . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . IGNORE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    String . valueOf ( ignoreLastPublishDateParameter )     }  )  ;", "boolean   layoutSetPrototypeLinkEnabledParameter    =    false ;", "if    ( layoutSetPrototypeLinkEnabled    !  =    null )     {", "layoutSetPrototypeLinkEnabledParameter    =    layoutSetPrototypeLinkEnabled . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ LINK _ ENABLED ,    new   String [  ]  {    String . valueOf ( layoutSetPrototypeLinkEnabledParameter )     }  )  ;", "boolean   layoutSetPrototypeSettingsParameter    =    false ;", "if    ( layoutSetPrototypeLinkEnabled    !  =    null )     {", "layoutSetPrototypeSettingsParameter    =    layoutSetPrototypeLinkEnabled . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ SETTINGS ,    new   String [  ]  {    String . valueOf ( layoutSetPrototypeSettingsParameter )     }  )  ;", "boolean   layoutSetSettingsParameter    =    false ;", "if    ( layoutSetSettings    !  =    null )     {", "layoutSetSettingsParameter    =    layoutSetSettings . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ SETTINGS ,    new   String [  ]  {    String . valueOf ( layoutSetSettingsParameter )     }  )  ;", "boolean   logoParameter    =    false ;", "if    ( logo    !  =    null )     {", "logoParameter    =    logo . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . LOGO ,    new   String [  ]  {    String . valueOf ( logoParameter )     }  )  ;", "boolean   permissionsParameter    =    true ;", "if    ( permissions    !  =    null )     {", "permissionsParameter    =    permissions . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PERMISSIONS ,    new   String [  ]  {    String . valueOf ( permissionsParameter )     }  )  ;", "boolean   portle    =    true ;", "if    ( portletConfiguration    !  =    null )     {", "portle    =    portletConfiguration . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION ,    new   String [  ]  {    String . valueOf ( portle )     }  )  ;", "boolean   portletConfigurationAllParameter    =    true ;", "if    ( portletConfigurationAll    !  =    null )     {", "portletConfigurationAllParameter    =    portletConfigurationAll . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    String . valueOf ( portletConfigurationAllParameter )     }  )  ;", "boolean   portletDataParameter    =    false ;", "if    ( portletData    !  =    null )     {", "portletDataParameter    =    portletData . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA ,    new   String [  ]  {    String . valueOf ( portletDataParameter )     }  )  ;", "boolean   portletDataAllParameter    =    false ;", "if    ( portletDataAll    !  =    null )     {", "portletDataAllParameter    =    portletDataAll . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA _ ALL ,    new   String [  ]  {    String . valueOf ( portletDataAllParameter )     }  )  ;", "boolean   portletSetupAllParameter    =    true ;", "if    ( portletSetupAll    !  =    null )     {", "portletSetupAllParameter    =    portletSetupAll . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ SETUP _ ALL ,    new   String [  ]  {    String . valueOf ( portletSetupAllParameter )     }  )  ;", "String   rangeParameter    =    ExportImportDateUtil . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "if    ( Validator . isNotNull ( range )  )     {", "rangeParameter    =    range ;", "}", "parameterMap . put ( ExportImportDateUtil . RANGE ,    new   String [  ]  {    rangeParameter    }  )  ;", "boolean   themeReferenceParameter    =    false ;", "if    ( themeReference    !  =    null )     {", "themeReferenceParameter    =    themeReference . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . THEME _ REFERENCE ,    new   String [  ]  {    String . valueOf ( themeReferenceParameter )     }  )  ;", "boolean   updateLastPublishDateParameter    =    true ;", "if    ( updateLastPublishDate    !  =    null )     {", "updateLastPublishDateParameter    =    updateLastPublishDate . booleanValue (  )  ;", "}", "parameterMap . put ( PortletDataHandlerKeys . UPDATE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    String . valueOf ( updateLastPublishDateParameter )     }  )  ;", "String   userIdStrategyParameter    =    UserIdStrategy . CURRENT _ USER _ ID ;", "if    ( Validator . isNotNull ( userIdStrategy )  )     {", "userIdStrategyParameter    =    userIdStrategy ;", "}", "parameterMap . put ( PortletDataHandlerKeys . USER _ ID _ STRATEGY ,    new   String [  ]  {    userIdStrategyParameter    }  )  ;", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["buildParameterMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationParameterMapFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap ( portletRequest . getParameterMap (  )  )  ;", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . DATA _ STRATEGY )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . DATA _ STRATEGY ,    new   String [  ]  {    PortletDataHandlerKeys . DATA _ STRATEGY _ MIRROR _ OVERWRITE    }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . DELETE _ PORTLET _ DATA )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . DELETE _ PORTLET _ DATA ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ LINK _ ENABLED )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ LINK _ ENABLED ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ SETTINGS )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ PROTOTYPE _ SETTINGS ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . LAYOUT _ SET _ SETTINGS )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . LAYOUT _ SET _ SETTINGS ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . LOGO )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . LOGO ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ CONFIGURATION ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . PORTLET _ DATA )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . PORTLET _ DATA _ ALL )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . THEME _ REFERENCE )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . THEME _ REFERENCE ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . UPDATE _ LAST _ PUBLISH _ DATE )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . UPDATE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "}", "if    (  !  ( parameterMap . containsKey ( PortletDataHandlerKeys . USER _ ID _ STRATEGY )  )  )     {", "parameterMap . put ( PortletDataHandlerKeys . USER _ ID _ STRATEGY ,    new   String [  ]  {    UserIdStrategy . CURRENT _ USER _ ID    }  )  ;", "}", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["buildParameterMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationParameterMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildExportLayoutSettingsMap ( user . getUserId (  )  ,    groupId ,    privateLayout ,    layoutIds ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildExportLayoutSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildPublishLayoutLocalSettingsMap ( userId ,    groupId ,     0  ,    privateLayout ,    layoutIds ,    parameterMap ,    locale ,    timeZone )  ;", "}", "METHOD_END"], "methodName": ["buildExportLayoutSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildExportPortletSettingsMap ( user . getUserId (  )  ,    sourcePlid ,    sourceGroupId ,    portletId ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["buildExportPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,    sourceGroupId ,    sourcePlid ,     0  ,     0  ,    portletId ,    null ,    null ,    null ,    parameterMap ,    BLANK ,     0  ,    BLANK ,    null ,    null ,    locale ,    timeZone ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["buildExportPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildImportLayoutSettingsMap ( user . getUserId (  )  ,    targetGroupId ,    privateLayout ,    layoutIds ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildImportLayoutSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,     0  ,     0  ,    targetGroupId ,     0  ,    BLANK ,    privateLayout ,    null ,    layoutIds ,    parameterMap ,    BLANK ,     0  ,    BLANK ,    null ,    null ,    locale ,    timeZone ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["buildImportLayoutSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildImportPortletSettingsMap ( user . getUserId (  )  ,    targetPlid ,    targetGroupId ,    portletId ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildImportPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,     0  ,     0  ,    targetGroupId ,    targetPlid ,    portletId ,    null ,    null ,    null ,    parameterMap ,    BLANK ,     0  ,    BLANK ,    null ,    null ,    locale ,    timeZone ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["buildImportPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildPublishLayoutLocalSettingsMap ( user . getUserId (  )  ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    layoutIds ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildPublishLayoutLocalSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,    sourceGroupId ,     0  ,    targetGroupId ,     0  ,    BLANK ,    privateLayout ,    null ,    layoutIds ,    parameterMap ,    BLANK ,     0  ,    BLANK ,    null ,    null ,    locale ,    timeZone ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["buildPublishLayoutLocalSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildPublishLayoutRemoteSettingsMap ( user . getUserId (  )  ,    sourceGroupId ,    privateLayout ,    layoutIdMap ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    remotePrivateLayout ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildPublishLayoutRemoteSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,    sourceGroupId ,     0  ,    remoteGroupId ,     0  ,    BLANK ,    privateLayout ,    layoutIdMap ,    null ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remotePrivateLayout ,    locale ,    timeZone ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["buildPublishLayoutRemoteSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildPublishPortletSettingsMap ( user . getUserId (  )  ,    sourceGroupId ,    sourcePlid ,    targetGroupId ,    targetPlid ,    portletId ,    parameterMap ,    user . getLocale (  )  ,    user . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildPublishPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationSettingsMapFactory . buildSettingsMap ( userId ,    sourceGroupId ,    sourcePlid ,    targetGroupId ,    targetPlid ,    portletId ,    null ,    null ,    null ,    parameterMap ,    BLANK ,     0  ,    BLANK ,    null ,    null ,    locale ,    timeZone ,    null )  ;", "}", "METHOD_END"], "methodName": ["buildPublishPortletSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "boolean   privateLayout    =    ParamUtil . getBoolean ( portletRequest ,     \" privateLayout \"  )  ;", "Map < Long ,    Boolean >    layoutIdMap    =    ExportImportHelperUtil . getLayoutIdMap ( portletRequest )  ;", "if    ( type    =  =     ( ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT )  )     {", "long [  ]    layoutIds    =    ExportImportHelperUtil . getLayoutIds ( layoutIdMap )  ;", "return    . buildExportLayoutSettingsMap ( themeDisplay . getUserId (  )  ,    groupId ,    privateLayout ,    layoutIds ,    portletRequest . getParameterMap (  )  ,    themeDisplay . getLocale (  )  ,    themeDisplay . getTimeZone (  )  )  ;", "}", "Group   stagingGroup    =    GroupLocalServiceUtil . getGroup ( groupId )  ;", "Group   liveGroup    =    stagingGroup . getLiveGroup (  )  ;", "Map < String ,    String [  ]  >    parameterMap    =    ExportImportConfigurationParameterMapFactory . buildParameterMap ( portletRequest )  ;", "if    ( liveGroup    !  =    null )     {", "long [  ]    layoutIds    =    ExportImportHelperUtil . getLayoutIds ( layoutIdMap ,    liveGroup . getGroupId (  )  )  ;", "return    . buildPublishLayoutLocalSettingsMap ( themeDisplay . getUserId (  )  ,    stagingGroup . getGroupId (  )  ,    liveGroup . getGroupId (  )  ,    privateLayout ,    layoutIds ,    parameterMap ,    themeDisplay . getLocale (  )  ,    themeDisplay . getTimeZone (  )  )  ;", "}", "UnicodeProperties   groupTypeSettingsProperties    =    stagingGroup . getTypeSettingsProperties (  )  ;", "String   remoteAddress    =    ParamUtil . getString ( portletRequest ,     \" remoteAddress \"  ,    groupTypeSettingsProperties . getProperty (  \" remoteAddress \"  )  )  ;", "remoteAddress    =    StagingUtil . stripProtocolFromRemoteAddress ( remoteAddress )  ;", "int   remotePort    =    ParamUtil . getInteger ( portletRequest ,     \" remotePort \"  ,    GetterUtil . getInteger ( groupTypeSettingsProperties . getProperty (  \" remotePort \"  )  )  )  ;", "String   remotePathContext    =    ParamUtil . getString ( portletRequest ,     \" remotePathContext \"  ,    groupTypeSettingsProperties . getProperty (  \" remotePathContext \"  )  )  ;", "boolean   secureConnection    =    ParamUtil . getBoolean ( portletRequest ,     \" secureConnection \"  ,    GetterUtil . getBoolean ( groupTypeSettingsProperties . getProperty (  \" secureConnection \"  )  )  )  ;", "long   remoteGroupId    =    ParamUtil . getLong ( portletRequest ,     \" remoteGroupId \"  ,    GetterUtil . getLong ( groupTypeSettingsProperties . getProperty (  \" remoteGroupId \"  )  )  )  ;", "boolean   remotePrivateLayout    =    ParamUtil . getBoolean ( portletRequest ,     \" remotePrivateLayout \"  )  ;", "StagingUtil . validateRemote ( groupId ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId )  ;", "return    . buildPublishLayoutRemoteSettingsMap ( themeDisplay . getUserId (  )  ,    groupId ,    privateLayout ,    layoutIdMap ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    remotePrivateLayout ,    themeDisplay . getLocale (  )  ,    themeDisplay . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    settingsMap    =    new   HashMap <  >  (  )  ;", "if    ( Validator . isNotNull ( fileName )  )     {", "settingsMap . put (  \" fileName \"  ,    fileName )  ;", "}", "if    ( MapUtil . isNotEmpty ( layoutIdMap )  )     {", "HashMap < Long ,    Boolean >    serializableLayoutIdMap    =    new   HashMap <  >  ( layoutIdMap )  ;", "settingsMap . put (  \" layoutIdMap \"  ,    serializableLayoutIdMap )  ;", "}", "if    ( ArrayUtil . isNotEmpty ( layoutIds )  )     {", "settingsMap . put (  \" layoutIds \"  ,    layoutIds )  ;", "}", "if    ( locale    !  =    null )     {", "settingsMap . put (  \" locale \"  ,    locale )  ;", "}", "if    ( parameterMap    !  =    null )     {", "HashMap < String ,    String [  ]  >    serializableParameterMap    =    new   HashMap <  >  ( parameterMap )  ;", "if    ( layoutIds    !  =    null )     {", "serializableParameterMap . remove (  \" layoutIds \"  )  ;", "}", "settingsMap . put (  \" parameterMap \"  ,    serializableParameterMap )  ;", "}", "if    ( Validator . isNotNull ( portletId )  )     {", "settingsMap . put (  \" portletId \"  ,    portletId )  ;", "}", "if    ( privateLayout    !  =    null )     {", "settingsMap . put (  \" privateLayout \"  ,    privateLayout )  ;", "}", "if    ( Validator . isNotNull ( remoteAddress )  )     {", "settingsMap . put (  \" remoteAddress \"  ,    remoteAddress )  ;", "}", "if    ( Validator . isNotNull ( remotePathContext )  )     {", "settingsMap . put (  \" remotePathContext \"  ,    remotePathContext )  ;", "}", "if    ( remotePort    >     0  )     {", "settingsMap . put (  \" remotePort \"  ,    remotePort )  ;", "}", "if    ( remotePrivateLayout    !  =    null )     {", "settingsMap . put (  \" remotePrivateLayout \"  ,    remotePrivateLayout )  ;", "}", "if    ( secureConnection    !  =    null )     {", "settingsMap . put (  \" secureConnection \"  ,    secureConnection )  ;", "}", "if    ( sourceGroupId    >     0  )     {", "settingsMap . put (  \" sourceGroupId \"  ,    sourceGroupId )  ;", "}", "if    ( sourcePlid    >     0  )     {", "settingsMap . put (  \" sourcePlid \"  ,    sourcePlid )  ;", "}", "if    ( targetGroupId    >     0  )     {", "settingsMap . put (  \" targetGroupId \"  ,    targetGroupId )  ;", "}", "if    ( targetPlid    >     0  )     {", "settingsMap . put (  \" targetPlid \"  ,    targetPlid )  ;", "}", "if    ( timeZone    !  =    null )     {", "settingsMap . put (  \" timezone \"  ,    timeZone )  ;", "}", "settingsMap . put (  \" userId \"  ,    userId )  ;", "return   settingsMap ;", "}", "METHOD_END"], "methodName": ["buildSettingsMap"], "fileName": "com.liferay.exportimport.kernel.configuration.ExportImportConfigurationSettingsMapFactory"}, {"methodBody": ["METHOD_START", "{", "return    _ exportControllers . get ( className )  ;", "}", "METHOD_END"], "methodName": ["_getExportController"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Collection < ExportImportController >    values    =     _ exportImportControllers . values (  )  ;", "return   ListUtil . fromCollection ( values )  ;", "}", "METHOD_END"], "methodName": ["_getExportImportControllers"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ importControllers . get ( className )  ;", "}", "METHOD_END"], "methodName": ["_getImportController"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "ServiceRegistration <  >    serviceRegistration    =    registry . registerService (  . class ,    exportImportController )  ;", "_ serviceRegistrations . put ( exportImportController ,    serviceRegistration )  ;", "}", "METHOD_END"], "methodName": ["_register"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceRegistration < ExportImportController >    serviceRegistration    =     _ serviceRegistrations . remove ( exportImportController )  ;", "if    ( serviceRegistration    !  =    null )     {", "serviceRegistration . unregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_unregister"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportControllerRegistryUtil .  _ instance .  _ getExportController ( className )  ;", "}", "METHOD_END"], "methodName": ["getExportController"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportControllerRegistryUtil .  _ instance .  _ getExportImportControllers (  )  ;", "}", "METHOD_END"], "methodName": ["getExportImportControllers"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportControllerRegistryUtil .  _ instance .  _ getImportController ( className )  ;", "}", "METHOD_END"], "methodName": ["getImportController"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportControllerRegistryUtil .  _ instance .  _ register ( exportImportController )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportControllerRegistryUtil .  _ instance .  _ unregister ( exportImportController )  ;", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.controller.ExportImportControllerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.exception.LARFileException"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.exportimport.kernel.exception.LARFileException"}, {"methodBody": ["METHOD_START", "{", "return    _ actualLARType ;", "}", "METHOD_END"], "methodName": ["getActualLARType"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "return    _ expectedLARTypes ;", "}", "METHOD_END"], "methodName": ["getExpectedLARTypes"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "_ actualLARType    =    actualLARType ;", "}", "METHOD_END"], "methodName": ["setActualLARType"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "_ expectedLARTypes    =    expectedLARTypes ;", "}", "METHOD_END"], "methodName": ["setExpectedLARTypes"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.exportimport.kernel.exception.LARTypeException"}, {"methodBody": ["METHOD_START", "{", "return    _ arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "com.liferay.exportimport.kernel.exception.LayoutImportException"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.exception.LayoutImportException"}, {"methodBody": ["METHOD_START", "{", "_ arguments    =    arguments ;", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "com.liferay.exportimport.kernel.exception.LayoutImportException"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.exportimport.kernel.exception.LayoutImportException"}, {"methodBody": ["METHOD_START", "{", "return    _ missingReferences ;", "}", "METHOD_END"], "methodName": ["getMissingReferences"], "fileName": "com.liferay.exportimport.kernel.exception.MissingReferenceException"}, {"methodBody": ["METHOD_START", "{", "return    _ groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "com.liferay.exportimport.kernel.exception.RemoteExportException"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.exception.RemoteExportException"}, {"methodBody": ["METHOD_START", "{", "return    _ url ;", "}", "METHOD_END"], "methodName": ["getURL"], "fileName": "com.liferay.exportimport.kernel.exception.RemoteExportException"}, {"methodBody": ["METHOD_START", "{", "_ groupId    =    groupId ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "com.liferay.exportimport.kernel.exception.RemoteExportException"}, {"methodBody": ["METHOD_START", "{", "_ url    =    url ;", "}", "METHOD_END"], "methodName": ["setURL"], "fileName": "com.liferay.exportimport.kernel.exception.RemoteExportException"}, {"methodBody": ["METHOD_START", "{", "PortletDataException   pde    =    null ;", "if    ( e   instanceof   PortletDataException )     {", "pde    =     (  ( PortletDataException )     ( e )  )  ;", "} else    {", "pde    =    new   PortletDataException ( e . getMessage (  )  ,    e )  ;", "}", "if    ( Validator . isNull ( pde . getPortletId (  )  )  )     {", "pde . setPortletId ( portletId )  ;", "}", "if    (  ( pde . getType (  )  )     !  =     ( PortletDataException . DEFAULT )  )     {", "return   pde ;", "}", "pde . setType ( type )  ;", "return   pde ;", "}", "METHOD_END"], "methodName": ["_handleException"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    SAXReaderUtil . createDocument (  )  ;", "Class <  ?  >    clazz    =    getClass (  )  ;", "Element   rootElement    =    document . addElement ( clazz . getSimpleName (  )  )  ;", "pContext . setExportDataRootElement ( rootElement )  ;", "return   rootElement ;", "}", "METHOD_END"], "methodName": ["addExportDataRootElement"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    SAXReaderUtil . read ( data )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "pContext . setImportDataRootElement ( rootElement )  ;", "long   groupId    =    GetterUtil . getLong ( rootElement . attributeValue (  \" group - id \"  )  )  ;", "if    ( groupId    !  =     0  )     {", "pContext . setSourceGroupId ( groupId )  ;", "}", "return   rootElement ;", "}", "METHOD_END"], "methodName": ["addImportDataRootElement"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( portletDataHandlerControl   instanceof   PortletDataHandlerBoolean )  )     {", "return ;", "}", "PortletDataHandlerBoolean   portletDataHandlerBoolean    =     (  ( PortletDataHandlerBoolean )     ( portletDataHandlerControl )  )  ;", "PortletDataHandlerControl [  ]    childPortletDataHandlerControls    =    portletDataHandlerBoolean . getChildren (  )  ;", "if    ( childPortletDataHandlerControls    !  =    null )     {", "for    ( PortletDataHandlerControl   childPortletDataHandlerControl    :    childPortletDataHandlerControls )     {", "addUncheckedModelAdditionCount ( portletDataContext ,    childPortletDataHandlerControl )  ;", "}", "}", "if    ( Validator . isNull ( portletDataHandlerControl . getClassName (  )  )  )     {", "return ;", "}", "boolean   checkedControl    =    GetterUtil . getBoolean ( portletDataContext . getBooleanParameter ( portletDataHandlerControl . getNamespace (  )  ,    portletDataHandlerControl . getControlName (  )  ,    false )  )  ;", "if    (  ! checkedControl )     {", "ManifestSummary   manifestSummary    =    portletDataContext . getManifestSummary (  )  ;", "StagedModelType   stagedModelType    =    new   StagedModelType ( portletDataHandlerControl . getClassName (  )  ,    portletDataHandlerBoolean . getReferrerClassName (  )  )  ;", "String   manifestSummaryKey    =    ManifestSummary . getManifestSummaryKey ( stagedModelType )  ;", "manifestSummary . addModelAdditionCount ( manifestSummaryKey ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["addUncheckedModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   portletPreferences ;", "}", "METHOD_END"], "methodName": ["doAddDefaultData"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   portletPreferences ;", "}", "METHOD_END"], "methodName": ["doDeleteData"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["doExportData"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["doImportData"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   portletPreferences ;", "}", "METHOD_END"], "methodName": ["doProcessExportPortletPreferences"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   portletPreferences ;", "}", "METHOD_END"], "methodName": ["doProcessImportPortletPreferences"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "Version   currentVersion    =    Version . getInstance ( getSchemaVersion (  )  )  ;", "Version   edVersion    =    Version . getInstance ( schemaVersion )  ;", "if    (  !  ( Objects . equals ( currentVersion . getMajor (  )  ,    edVersion . getMajor (  )  )  )  )     {", "return   false ;", "}", "int   currentMinorVersion    =    GetterUtil . getInteger ( currentVersion . getMinor (  )  ,     (  -  1  )  )  ;", "int   edMinorVersion    =    GetterUtil . getInteger ( edVersion . getMinor (  )  ,     (  -  1  )  )  ;", "if    (  (  ( currentMinorVersion    =  =     (  -  1  )  )     &  &     ( edMinorVersion    =  =     (  -  1  )  )  )     |  |     ( currentMinorVersion    <    edMinorVersion )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["doValidateSchemaVersion"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( rootElement    =  =    null )     {", "return   StringPool . BLANK ;", "}", "try    {", "Document   document    =    rootElement . gocument (  )  ;", "return   document . formattedString (  )  ;", "}    catch    ( IOException   ioe )     {", "return   StringPool . BLANK ;", "}", "}", "METHOD_END"], "methodName": ["getExportDataRootElementString"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "long   totalModelCount    =     -  1  ;", "for    ( Control   portletDataHandlerControl    :    portletDataHandlerControls )     {", "StagedModelType   stagedModelType    =    new   StagedModelType ( portletDataHandlerControl . getClassName (  )  ,    portletDataHandlerControl . getReferrerClassName (  )  )  ;", "long   modelAdditionCount    =    manifestSummary . getModelAdditionCount ( stagedModelType )  ;", "if    ( portletDataHandlerControl   instanceof   Boolean )     {", "Boolean   portletDataHandlerBoolean    =     (  ( Boolean )     ( portletDataHandlerControl )  )  ;", "Control [  ]    childControls    =    portletDataHandlerBoolean . getChildren (  )  ;", "if    ( childControls    !  =    null )     {", "long   childModelCount    =    getExportModelCount ( manifestSummary ,    childControls )  ;", "if    ( childModelCount    !  =     (  -  1  )  )     {", "if    ( modelAdditionCount    =  =     (  -  1  )  )     {", "modelAdditionCount    =    childModelCount ;", "} else    {", "modelAdditionCount    +  =    childModelCount ;", "}", "}", "}", "}", "if    ( modelAdditionCount    =  =     (  -  1  )  )     {", "continue ;", "}", "if    ( totalModelCount    =  =     (  -  1  )  )     {", "totalModelCount    =    modelAdditionCount ;", "} else    {", "totalModelCount    +  =    modelAdditionCount ;", "}", "}", "return   totalModelCount ;", "}", "METHOD_END"], "methodName": ["getExportModelCount"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ dataAlwaysStaged    =    dataAlwaysStaged ;", "}", "METHOD_END"], "methodName": ["setDataAlwaysStaged"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ dataLevel    =    dataLevel ;", "}", "METHOD_END"], "methodName": ["setDataLevel"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ dataLocalized    =    dataLocalized ;", "}", "METHOD_END"], "methodName": ["setDataLocalized"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ dataPortletPreferences    =    dataPortletPreferences ;", "}", "METHOD_END"], "methodName": ["setDataPortletPreferences"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ deletionSystemEventStagedModelTypes    =    deletionSystemEventStagedModelTypes ;", "}", "METHOD_END"], "methodName": ["setDeletionSystemEventStagedModelTypes"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ exportControls    =    exportControls ;", "setImportControls ( exportControls )  ;", "}", "METHOD_END"], "methodName": ["setExportControls"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ exportMetadataControls    =    exportMetadataControls ;", "setImportMetadataControls ( exportMetadataControls )  ;", "}", "METHOD_END"], "methodName": ["setExportMetadataControls"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ importControls    =    importControls ;", "}", "METHOD_END"], "methodName": ["setImportControls"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ importMetadataControls    =    importMetadataControls ;", "}", "METHOD_END"], "methodName": ["setImportMetadataControls"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ publishToLiveByDefault    =    publishToLiveByDefault ;", "}", "METHOD_END"], "methodName": ["setPublishToLiveByDefault"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "_ stagingControls    =    stagingControls ;", "}", "METHOD_END"], "methodName": ["setStagingControls"], "fileName": "com.liferay.exportimport.kernel.lar.BasePortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return    !  ( portletDataContext . isStagedModelCounted ( stagedModel )  )  ;", "}", "METHOD_END"], "methodName": ["countStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "importMissingGroupReference ( portletDataContext ,    referenceElement )  ;", "String   uuid    =    referenceElement . attributeValue (  \" uuid \"  )  ;", "Map < Long ,    Long >    groupIds    =     (  ( Map < Long ,    Long >  )     ( portletDataContext . getNewPrimaryKeysMap ( Group . class )  )  )  ;", "long   groupId    =    GetterUtil . getLong ( referenceElement . attributeValue (  \" group - id \"  )  )  ;", "groupId    =    MapUtil . getLong ( groupIds ,    groupId )  ;", "long   classPK    =    GetterUtil . getLong ( referenceElement . attributeValue (  \" class - pk \"  )  )  ;", "importMissingReference ( portletDataContext ,    uuid ,    groupId ,    classPK )  ;", "}", "METHOD_END"], "methodName": ["doImportMissingReference"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["doImportMissingReference"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["doRestoreStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "List < AssetCategory >    assetCategories    =    AssetCategoryLocalServiceUtil . getCategories ( ExportImportClassedModelUtil . getClassNameId ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  )  ;", "for    ( AssetCategory   assetCategory    :    assetCategories )     {", "Util . exportReferenceStagedModel ( portletDataContext ,    stagedModel ,    assetCategory ,    PortletDataContext . REFERENCE _ TYPE _ WEAK )  ;", "}", "}", "METHOD_END"], "methodName": ["exportAssetCategories"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "List < AssetTag >    assetTags    =    AssetTagLocalServiceUtil . getTags ( ExportImportClassedModelUtil . getClassNameId ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  )  ;", "for    ( AssetTag   assetTag    :    assetTags )     {", "Util . exportReferenceStagedModel ( portletDataContext ,    stagedModel ,    assetTag ,    PortletDataContext . REFERENCE _ TYPE _ WEAK )  ;", "}", "}", "METHOD_END"], "methodName": ["exportAssetTags"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . PORTLET _ DATA _ ALL )  )  )     &  &     (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . COMMENTS )  )  )  )     {", "return ;", "}", "DiscussionStagingHandler   discussionStagingHandler    =    CommentManagerUtil . getDiscussionStagingHandler (  )  ;", "if    ( discussionStagingHandler    !  =    null )     {", "discussionStagingHandler . exportReferenceDiscussions ( portletDataContext ,    stagedModel )  ;", "}", "}", "METHOD_END"], "methodName": ["exportComments"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . PORTLET _ DATA _ ALL )  )  )     &  &     (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . RATINGS )  )  )  )     {", "return ;", "}", "List < RatingsEntry >    ratingsEntries    =    RatingsEntryLocalServiceUtil . getEntries ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  )  ;", "if    ( ratingsEntries . isEmpty (  )  )     {", "return ;", "}", "for    ( RatingsEntry   ratingsEntry    :    ratingsEntries )     {", "Util . exportReferenceStagedModel ( portletDataContext ,    stagedModel ,    ratingsEntry ,    PortletDataContext . REFERENCE _ TYPE _ WEAK )  ;", "}", "}", "METHOD_END"], "methodName": ["exportRatings"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( ExportImportThreadLocal . isLayoutStagingInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ LAYOUT _ STAGING _ IN _ PROCESS ;", "} else", "if    ( ExportImportThreadLocal . isPortletStagingInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ PORTLET _ STAGING _ IN _ PROCESS ;", "} else", "if    ( ExportImportThreadLocal . isLayoutExportInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ LAYOUT _ EXPORT _ IN _ PROCESS ;", "} else", "if    ( ExportImportThreadLocal . isLayoutImportInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ LAYOUT _ IMPORT _ IN _ PROCESS ;", "} else", "if    ( ExportImportThreadLocal . isPortletExportInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ PORTLET _ EXPORT _ IN _ PROCESS ;", "} else", "if    ( ExportImportThreadLocal . isPortletImportInProcess (  )  )     {", "return   ExportImportLifecycleConstants . PROCESS _ FLAG _ PORTLET _ IMPORT _ IN _ PROCESS ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["getProcessFlag"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "List < Element >    referenceElements    =    portletDataContext . getReferenceElements ( stagedModel ,    AssetCategory . class )  ;", "if    ( referenceElements . isEmpty (  )  )     {", "return ;", "}", "List < Long >    assetCategoryIds    =    new   ArrayList ( referenceElements . size (  )  )  ;", "for    ( Element   referenceElement    :    referenceElements )     {", "Long   classPK    =    GetterUtil . getLong ( referenceElement . attributeValue (  \" class - pk \"  )  )  ;", "Util . importReferenceStagedModel ( portletDataContext ,    stagedModel ,    AssetCategory . class ,    classPK )  ;", "assetCategoryIds . add ( classPK )  ;", "}", "Map < Long ,    Long >    assetCategoryIdsMap    =     (  ( Map < Long ,    Long >  )     ( portletDataContext . getNewPrimaryKeysMap ( AssetCategory . class )  )  )  ;", "long [  ]    importedAssetCategoryIds    =    new   long [ assetCategoryIds . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( assetCategoryIds . size (  )  )  ;    i +  +  )     {", "long   categoryId    =    assetCategoryIds . get ( i )  ;", "importedAssetCategoryIds [ i ]     =    MapUtil . getLong ( assetCategoryIdsMap ,    categoryId ,    categoryId )  ;", "}", "portletDataContext . addAssetCategories ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  ,    importedAssetCategoryIds )  ;", "}", "METHOD_END"], "methodName": ["importAssetCategories"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "List < Element >    referenceElements    =    portletDataContext . getReferenceElements ( stagedModel ,    AssetTag . class )  ;", "List < Long >    assetTagIds    =    new   ArrayList ( referenceElements . size (  )  )  ;", "for    ( Element   referenceElement    :    referenceElements )     {", "Long   classPK    =    GetterUtil . getLong ( referenceElement . attributeValue (  \" class - pk \"  )  )  ;", "Util . importReferenceStagedModel ( portletDataContext ,    stagedModel ,    AssetTag . class ,    classPK )  ;", "assetTagIds . add ( classPK )  ;", "}", "Map < Long ,    Long >    assetTagIdsMap    =     (  ( Map < Long ,    Long >  )     ( portletDataContext . getNewPrimaryKeysMap ( AssetTag . class )  )  )  ;", "Set < String >    assetTagNames    =    new   HashSet <  >  (  )  ;", "for    ( long   assetTagId    :    assetTagIds )     {", "long   importedStagedAssetTagId    =    MapUtil . getLong ( assetTagIdsMap ,    assetTagId ,    assetTagId )  ;", "AssetTag   assetTag    =    AssetTagLocalServiceUtil . fetchAssetTag ( importedStagedAssetTagId )  ;", "if    ( assetTag    !  =    null )     {", "assetTagNames . add ( assetTag . getName (  )  )  ;", "}", "}", "if    ( assetTagNames . isEmpty (  )  )     {", "return ;", "}", "portletDataContext . addAssetTags ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  ,    assetTagNames . toArray ( new   String [ assetTagNames . size (  )  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["importAssetTags"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( stagedModel   instanceof   ResourcedModel )     {", "ResourcedModel   resourcedModel    =     (  ( ResourcedModel )     ( stagedModel )  )  ;", "if    (  !  ( resourcedModel . isResourceMain (  )  )  )     {", "return ;", "}", "}", "if    (  (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletKeys . PORTLET _ DATA _ ALL )  )  )     &  &     (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletKeys . COMMENTS )  )  )  )     {", "return ;", "}", "DiscussionStagingHandler   discussionStaging    =    CommentManagerUtil . getDiscussionStagingHandler (  )  ;", "if    ( discussionStaging    !  =    null )     {", "discussionStaging . importReferenceDiscussions ( portletDataContext ,    stagedModel )  ;", "}", "}", "METHOD_END"], "methodName": ["importComments"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler <  ?  >    stagedModelDataHandler    =    StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler (  \" com . liferay . site . model . adapter . StagedGroup \"  )  ;", "stagedModelDataHandler . importMissingReference ( portletDataContext ,    referenceElement )  ;", "}", "METHOD_END"], "methodName": ["importMissingGroupReference"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( stagedModel   instanceof   ResourcedModel )     {", "ResourcedModel   resourcedModel    =     (  ( ResourcedModel )     ( stagedModel )  )  ;", "if    (  !  ( resourcedModel . isResourceMain (  )  )  )     {", "return ;", "}", "}", "if    (  (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . PORTLET _ DATA _ ALL )  )  )     &  &     (  !  ( MapUtil . getBoolean ( portletDataContext . getParameterMap (  )  ,    PortletDataHandlerKeys . RATINGS )  )  )  )     {", "return ;", "}", "Util . importReferenceStagedModels ( portletDataContext ,    stagedModel ,    RatingsEntry . class )  ;", "}", "METHOD_END"], "methodName": ["importRatings"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "Element   stagedModelElement    =    portletDataContext . getImportDataStagedModelElement ( stagedModel )  ;", "Element   referencesElement    =    stagedModelElement . element (  \" references \"  )  ;", "if    ( referencesElement    =  =    null )     {", "return ;", "}", "DiscussionStagingHandler   discussionStagingHandler    =    CommentManagerUtil . getDiscussionStagingHandler (  )  ;", "String   stagedModelClassName    =    null ;", "if    ( discussionStagingHandler    !  =    null )     {", "stagedModelClassName    =    discussionStagingHandler . getClassName (  )  ;", "}", "List < Element >    referenceElements    =    referencesElement . elements (  )  ;", "for    ( Element   referenceElement    :    referenceElements )     {", "String   className    =    referenceElement . attributeValue (  \" class - name \"  )  ;", "if    (  (  ( className . equals ( AssetCategory . class . getName (  )  )  )     |  |     ( className . equals ( RatingsEntry . class . getName (  )  )  )  )     |  |     ( className . equals ( stagedModelClassName )  )  )     {", "continue ;", "}", "Long   classPK    =    GetterUtil . getLong ( referenceElement . attributeValue (  \" class - pk \"  )  )  ;", "Util . importReferenceStagedModel ( portletDataContext ,    stagedModel ,    className ,    classPK )  ;", "}", "}", "METHOD_END"], "methodName": ["importReferenceStagedModels"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( stagedModel   instanceof   TrashedModel )  )     {", "return   false ;", "}", "TrashedModel   trashedModel    =     (  ( TrashedModel )     ( stagedModel )  )  ;", "return   trashedModel . isInTrash (  )  ;", "}", "METHOD_END"], "methodName": ["isStagedModelInTrash"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( stagedModel   instanceof   TrashedModel )     {", "TrashedModel   trashedModel    =     (  ( TrashedModel )     ( stagedModel )  )  ;", "if    ( trashedModel . isInTrash (  )  )     {", "PortletDataException   pde    =    new   PortletDataException ( PortletDataException . STATUS _ IN _ TRASH )  ;", "pde . setisplayName ( getDisplayName ( stagedModel )  )  ;", "pde . setStagedModelClassName ( stagedModel . getModelClassName (  )  )  ;", "pde . setStagedModelClassPK ( GetterUtil . getString ( stagedModel . getPrimaryKeyObj (  )  )  )  ;", "throw   pde ;", "}", "}", "if    (  (  !  ( portletDataContext . isInitialPublication (  )  )  )     &  &     ( stagedModel   instanceof   WorkflowedModel )  )     {", "WorkflowedModel   workflowedModel    =     (  ( WorkflowedModel )     ( stagedModel )  )  ;", "if    (  !  ( ArrayUtil . contains ( getExportableStatuses (  )  ,    workflowedModel . getStatus (  )  )  )  )     {", "PortletDataException   pde    =    new   PortletDataException ( PortletDataException . STATUS _ UNAVAILABLE )  ;", "pde . setisplayName ( getDisplayName ( stagedModel )  )  ;", "pde . setStagedModelClassName ( stagedModel . getModelClassName (  )  )  ;", "pde . setStagedModelClassPK ( GetterUtil . getString ( stagedModel . getPrimaryKeyObj (  )  )  )  ;", "throw   pde ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateExport"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler <  ?  >    stagedModelDataHandler    =    StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler (  \" com . liferay . site . model . adapter . StagedGroup \"  )  ;", "return   stagedModelDataHandler . validateReference ( portletDataContext ,    referenceElement )  ;", "}", "METHOD_END"], "methodName": ["validateMissingGroupReference"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "T   existingStagedModel    =    fetchMissingReference ( uuid ,    groupId )  ;", "if    ( existingStagedModel    =  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["validateMissingReference"], "fileName": "com.liferay.exportimport.kernel.lar.BaseStagedModelDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getExportPortletPreferencesUuid"], "fileName": "com.liferay.exportimport.kernel.lar.DefaultConfigurationPortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   Long . valueOf (  0 L )  ;", "}", "METHOD_END"], "methodName": ["getImportPortletPreferencesNewPrimaryKey"], "fileName": "com.liferay.exportimport.kernel.lar.DefaultConfigurationPortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "String [  ]    oldValues    =    portletPreferences . getValues ( key ,    null )  ;", "if    ( oldValues    =  =    null )     {", "return ;", "}", "String [  ]    newValues    =    new   String [ oldValues . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( oldValues . length )  ;    i +  +  )     {", "String   oldValue    =    oldValues [ i ]  ;", "String   newValue    =    oldValue ;", "String [  ]    primaryKeys    =    StringUtil . split ( oldValue )  ;", "for    ( String   primaryKey    :    primaryKeys )     {", "if    (  !  ( Validator . isNumber ( primaryKey )  )  )     {", "break ;", "}", "long   primaryKeyLong    =    GetterUtil . getLong ( primaryKey )  ;", "String   uuid    =    getExportPortletPreferencesUuid ( portletDataContext ,    portlet ,    className ,    primaryKeyLong )  ;", "if    ( Validator . isNull ( uuid )  )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", ".  _ log . warn ( StringBundler . concat (  \" Unable   to   get   UUID   for   class    \"  ,    className ,     \"    with   primary   key    \"  ,    String . valueOf ( primaryKeyLong )  )  )  ;", "}", "continue ;", "}", "newValue    =    StringUtil . replace ( newValue ,    primaryKey ,    uuid )  ;", "}", "newValues [ i ]     =    newValue ;", "}", "portletPreferences . setValues ( key ,    newValues )  ;", "}", "METHOD_END"], "methodName": ["updateExportPortletPreferencesClassPKs"], "fileName": "com.liferay.exportimport.kernel.lar.DefaultConfigurationPortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "String [  ]    oldValues    =    portletPreferences . getValues ( key ,    null )  ;", "if    ( oldValues    =  =    null )     {", "return ;", "}", "Map < Long ,    Long >    primaryKeys    =     (  ( Map < Long ,    Long >  )     ( portletDataContext . getNewPrimaryKeysMap ( clazz )  )  )  ;", "String [  ]    newValues    =    new   String [ oldValues . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( oldValues . length )  ;    i +  +  )     {", "String   oldValue    =    oldValues [ i ]  ;", "String   newValue    =    oldValue ;", "String [  ]    uuids    =    StringUtil . split ( oldValue )  ;", "for    ( String   uuid    :    uuids )     {", "Long   newPrimaryKey    =    getImportPortletPreferencesNewPrimaryKey ( portletDataContext ,    clazz ,    companyGroupId ,    primaryKeys ,    uuid )  ;", "if    ( Validator . isNull ( newPrimaryKey )  )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", "StringBundler   sb    =    new   StringBundler (  8  )  ;", "sb . append (  \" Unable   to   get   primary   key   for    \"  )  ;", "sb . append ( clazz )  ;", "sb . append (  \"    with   UUID    \"  )  ;", "sb . append ( uuid )  ;", "sb . append (  \"    in   company   group    \"  )  ;", "sb . append ( companyGroupId )  ;", "sb . append (  \"    or   in   group    \"  )  ;", "sb . append ( portletDataContext . getScopeGroupId (  )  )  ;", ".  _ log . warn ( sb . toString (  )  )  ;", "}", "} else    {", "newValue    =    StringUtil . replace ( newValue ,    uuid ,    newPrimaryKey . toString (  )  )  ;", "}", "}", "newValues [ i ]     =    newValue ;", "}", "portletPreferences . setValues ( key ,    newValues )  ;", "}", "METHOD_END"], "methodName": ["updateImportPortletPreferencesClassPKs"], "fileName": "com.liferay.exportimport.kernel.lar.DefaultConfigurationPortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "String   modelClassName    =    classedModel . getModelClassName (  )  ;", "if    ( classedModel   instanceof   StagedModel )     {", "StagedModel   stagedModel    =     (  ( StagedModel )     ( classedModel )  )  ;", "StagedModelType   stagedModelType    =    stagedModel . getStagedModelType (  )  ;", "modelClassName    =    stagedModelType . getClassName (  )  ;", "}", "return   modelClassName ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportClassedModelUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( classedModel   instanceof   StagedModel )     {", "StagedModel   stagedModel    =     (  ( StagedModel )     ( classedModel )  )  ;", "StagedModelType   stagedModelType    =    stagedModel . getStagedModelType (  )  ;", "return   stagedModelType . getClassNameId (  )  ;", "}", "return   PortalUtil . getClassNameId ( classedModel . getModelClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassNameId"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportClassedModelUtil"}, {"methodBody": ["METHOD_START", "{", "return   GetterUtil . getLong ( ExportImportClassedModelUtil . getPrimaryKeyObj ( classedModel )  )  ;", "}", "METHOD_END"], "methodName": ["getClassPK"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportClassedModelUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    modelClass    =    classedModel . getModelClass (  )  ;", "String   modelClassSimpleName    =    modelClass . getSimpleName (  )  ;", "if    ( classedModel   instanceof   StagedModel )     {", "StagedModel   stagedModel    =     (  ( StagedModel )     ( classedModel )  )  ;", "StagedModelType   stagedModelType    =    stagedModel . getStagedModelType (  )  ;", "modelClassSimpleName    =    stagedModelType . getClassSimpleName (  )  ;", "}", "return   modelClassSimpleName ;", "}", "METHOD_END"], "methodName": ["getClassSimpleName"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportClassedModelUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( classedModel   instanceof   ResourcedModel )     {", "ResourcedModel   resourcedModel    =     (  ( ResourcedModel )     ( classedModel )  )  ;", "return   resourcedModel . getResourcePrimKey (  )  ;", "}", "return   classedModel . getPrimaryKeyObj (  )  ;", "}", "METHOD_END"], "methodName": ["getPrimaryKeyObj"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportClassedModelUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutSet   layoutSet    =    LayoutSetLocalServiceUtil . getLayoutSet ( groupId ,    privateLayout )  ;", "UnicodeProperties   settingsProperties    =    layoutSet . getSettingsProperties (  )  ;", "settingsProperties . remove (  .  _ LAST _ PUBLISH _ DATE )  ;", "LayoutSetLocalServiceUtil . updateSettings ( groupId ,    privateLayout ,    settingsProperties . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["clearLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( dateAmPm    =  =     ( Calendar . PM )  )     {", "dateHour    +  =     1  2  ;", "}", "if    (  ! timeZoneSensitive )     {", "locale    =    Local . getDefault (  )  ;", "timeZone    =    TimeZon . getTimeZone ( UTC )  ;", "}", "Calendar   calendar    =    CalendarFactoryUtil . getCalendar ( timeZone ,    locale )  ;", "calendar . set ( Calendar . MONTH ,    dateMonth )  ;", "calendar . set ( Calendar . DATE ,    dateDay )  ;", "calendar . set ( Calendar . YEAR ,    dateYear )  ;", "calendar . set ( Calendar . HOUR _ OF _ DAY ,    dateHour )  ;", "calendar . set ( Calendar . MINUTE ,    dateMinute )  ;", "calendar . set ( Calendar . SECOND ,     0  )  ;", "calendar . set ( Calendar . MILLISECOND ,     0  )  ;", "return   calendar ;", "}", "METHOD_END"], "methodName": ["getCalendar"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "int   dateMonth    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" Month \"  )  )  ;", "int   dateDay    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" Day \"  )  )  ;", "int   dateYear    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" Year \"  )  )  ;", "int   dateHour    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" Hour \"  )  )  ;", "int   dateMinute    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" Minute \"  )  )  ;", "int   dateAmPm    =    ParamUtil . getInteger ( portletRequest ,     ( paramPrefix    +     \" AmPm \"  )  )  ;", "return    . getCalendar ( dateAmPm ,    dateYear ,    dateMonth ,    dateDay ,    dateHour ,    dateMinute ,    themeDisplay . getLocale (  )  ,    themeDisplay . getTimeZone (  )  ,    timeZoneSensitive )  ;", "}", "METHOD_END"], "methodName": ["getCalendar"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    settingsMap    =    exportImportConfiguration . getSettingsMap (  )  ;", "String   portletId    =     (  ( String )     ( settingsMap . get (  \" portletId \"  )  )  )  ;", "return    . getDateRange ( exportImportConfiguration ,    portletId )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    settingsMap    =    exportImportConfiguration . getSettingsMap (  )  ;", "Date   startDate    =     (  ( Date )     ( settingsMap . get (  \" startDate \"  )  )  )  ;", "Date   endDate    =     (  ( Date )     ( settingsMap . get (  \" endDate \"  )  )  )  ;", "if    (  ( startDate    !  =    null )     &  &     ( endDate    !  =    null )  )     {", "return   new   DateRange ( startDate ,    endDate )  ;", "}", "Map < String ,    String [  ]  >    parameterMap    =     (  ( Map < String ,    String [  ]  >  )     ( settingsMap . get (  \" parameterMap \"  )  )  )  ;", "String   range    =    MapUtil . getString ( parameterMap ,     . RANGE ,     . getDefaultDateRange ( exportImportConfiguration )  )  ;", "int   rangeLast    =    MapUtil . getInteger ( parameterMap ,     \" last \"  )  ;", "int   startDateAmPm    =    MapUtil . getInteger ( parameterMap ,     \" startDateAmPm \"  )  ;", "int   startDateYear    =    MapUtil . getInteger ( parameterMap ,     \" startDateYear \"  )  ;", "int   startDateMonth    =    MapUtil . getInteger ( parameterMap ,     \" startDateMonth \"  )  ;", "int   startDateDay    =    MapUtil . getInteger ( parameterMap ,     \" startDateDay \"  )  ;", "int   startDateHour    =    MapUtil . getInteger ( parameterMap ,     \" startDateHour \"  )  ;", "int   startDateMinute    =    MapUtil . getInteger ( parameterMap ,     \" startDateMinute \"  )  ;", "int   endDateAmPm    =    MapUtil . getInteger ( parameterMap ,     \" endDateAmPm \"  )  ;", "int   endDateYear    =    MapUtil . getInteger ( parameterMap ,     \" endDateYear \"  )  ;", "int   endDateMonth    =    MapUtil . getInteger ( parameterMap ,     \" endDateMonth \"  )  ;", "int   endDateDay    =    MapUtil . getInteger ( parameterMap ,     \" endDateDay \"  )  ;", "int   endDateHour    =    MapUtil . getInteger ( parameterMap ,     \" endDateHour \"  )  ;", "int   endDateMinute    =    MapUtil . getInteger ( parameterMap ,     \" endDateMinute \"  )  ;", "long   groupId    =    MapUtil . getLong ( settingsMap ,     \" sourceGroupId \"  )  ;", "long   plid    =    MapUtil . getLong ( settingsMap ,     \" sourcePlid \"  )  ;", "boolean   privateLayout    =    MapUtil . getBoolean ( settingsMap ,     \" privateLayout \"  )  ;", "Locale   locale    =     (  ( Locale )     ( settingsMap . get (  \" locale \"  )  )  )  ;", "TimeZone   timeZone    =     (  ( TimeZone )     ( settingsMap . get (  \" timezone \"  )  )  )  ;", "return    . getDateRange ( range ,    rangeLast ,    startDateAmPm ,    startDateYear ,    startDateMonth ,    startDateDay ,    startDateHour ,    startDateMinute ,    endDateAmPm ,    endDateYear ,    endDateMonth ,    endDateDay ,    endDateHour ,    endDateMinute ,    portletId ,    groupId ,    plid ,    privateLayout ,    locale ,    timeZone )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "Date   startDate    =    null ;", "Date   endDate    =    null ;", "if    ( range . equals (  . RANGE _ DATE _ RANGE )  )     {", "Calendar   startCalendar    =     . getCalendar ( startDateAmPm ,    startDateYear ,    startDateMonth ,    startDateDay ,    startDateHour ,    startDateMinute ,    locale ,    timeZone ,    true )  ;", "startDate    =    startCalendar . getTime (  )  ;", "Calendar   endCalendar    =     . getCalendar ( endDateAmPm ,    endDateYear ,    endDateMonth ,    endDateDay ,    endDateHour ,    endDateMinute ,    locale ,    timeZone ,    true )  ;", "endDate    =    endCalendar . getTime (  )  ;", "} else", "if    ( range . equals (  . RANGE _ FROM _ LAST _ PUBLISH _ DATE )  )     {", "Date   lastPublishDate    =    null ;", "if    ( com . liferay . portal . kernel . util . Validator . isNotNull ( portletId )  )     {", "com . liferay . portal . kernel . model . Layout   layout    =    com . liferay . portal . kernel . service . LayoutLocalServiceUtil . fetchLayout ( plid )  ;", "PortletPreferences   portletPreferences    =    null ;", "if    ( layout    =  =    null )     {", "com . liferay . portal . kernel . model . Group   group    =    com . liferay . portal . kernel . service . GroupLocalServiceUtil . getGroup ( groupId )  ;", "portletPreferences    =    com . liferay . portal . kernel . portlet . PortletPreferencesFactoryUtil . getStrictPortletSetup ( group . getCompanyId (  )  ,    groupId ,    portletId )  ;", "} else    {", "portletPreferences    =    com . liferay . portal . kernel . portlet . PortletPreferencesFactoryUtil . getStrictPortletSetup ( layout ,    portletId )  ;", "}", "lastPublishDate    =     . getLastPublishDate ( portletPreferences )  ;", "} else    {", "com . liferay . portal . kernel . model . LayoutSet   layoutSet    =    com . liferay . portal . kernel . service . LayoutSetLocalServiceUtil . getLayoutSet ( groupId ,    privateLayout )  ;", "lastPublishDate    =     . getLastPublishDate ( layoutSet )  ;", "}", "if    ( lastPublishDate    !  =    null )     {", "endDate    =    new   Date (  )  ;", "startDate    =    lastPublishDate ;", "}", "} else", "if    ( range . equals (  . RANGE _ LAST )  )     {", "Date   now    =    new   Date (  )  ;", "startDate    =    new   Date (  (  ( now . getTime (  )  )     -     ( rangeLast    *     ( com . liferay . portal . kernel . util . Time . HOUR )  )  )  )  ;", "endDate    =    now ;", "}", "return   new   DateRange ( startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( portletRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "String   range    =    ParamUtil . getString ( portletRequest ,     . RANGE ,    defaultRange )  ;", "int   rangeLast    =    ParamUtil . getInteger ( portletRequest ,     \" last \"  )  ;", "int   startDateAmPm    =    ParamUtil . getInteger ( portletRequest ,     \" startDateAmPm \"  )  ;", "int   startDateYear    =    ParamUtil . getInteger ( portletRequest ,     \" startDateYear \"  )  ;", "int   startDateMonth    =    ParamUtil . getInteger ( portletRequest ,     \" startDateMonth \"  )  ;", "int   startDateDay    =    ParamUtil . getInteger ( portletRequest ,     \" startDateDay \"  )  ;", "int   startDateHour    =    ParamUtil . getInteger ( portletRequest ,     \" startDateHour \"  )  ;", "int   startDateMinute    =    ParamUtil . getInteger ( portletRequest ,     \" startDateMinute \"  )  ;", "int   endDateAmPm    =    ParamUtil . getInteger ( portletRequest ,     \" endDateAmPm \"  )  ;", "int   endDateYear    =    ParamUtil . getInteger ( portletRequest ,     \" endDateYear \"  )  ;", "int   endDateMonth    =    ParamUtil . getInteger ( portletRequest ,     \" endDateMonth \"  )  ;", "int   endDateDay    =    ParamUtil . getInteger ( portletRequest ,     \" endDateDay \"  )  ;", "int   endDateHour    =    ParamUtil . getInteger ( portletRequest ,     \" endDateHour \"  )  ;", "int   endDateMinute    =    ParamUtil . getInteger ( portletRequest ,     \" endDateMinute \"  )  ;", "return    . getDateRange ( range ,    rangeLast ,    startDateAmPm ,    startDateYear ,    startDateMonth ,    startDateDay ,    startDateHour ,    startDateMinute ,    endDateAmPm ,    endDateYear ,    endDateMonth ,    endDateDay ,    endDateHour ,    endDateMinute ,    portletId ,    groupId ,    plid ,    privateLayout ,    themeDisplay . getLocale (  )  ,    themeDisplay . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfiguration   exportImportConfiguration    =    ExportImportConfigurationLocalServiceUtil . getExportImportConfiguration ( exportImportConfigurationId )  ;", "return    . getDateRange ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ EXPORT _ LAYOUT )  )     {", "return    . RANGE _ ALL ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ EXPORT _ PORTLET )  )     {", "return    . RANGE _ ALL ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ IMPORT _ LAYOUT )  )     {", "return    . RANGE _ ALL ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ IMPORT _ PORTLET )  )     {", "return    . RANGE _ ALL ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ LOCAL )  )     {", "return    . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ LAYOUT _ REMOTE )  )     {", "return    . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ PUBLISH _ PORTLET _ LOCAL )  )     {", "return    . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ LOCAL )  )     {", "return    . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "} else", "if    (  ( exportImportConfiguration . getType (  )  )     =  =     ( ExportImportConfigurationConstants . TYPE _ SCHEDULED _ PUBLISH _ LAYOUT _ REMOTE )  )     {", "return    . RANGE _ FROM _ LAST _ PUBLISH _ DATE ;", "}", "return    . RANGE _ ALL ;", "}", "METHOD_END"], "methodName": ["getDefaultDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "String   range    =    MapUtil . getString ( portletDataContext . getParameterMap (  )  ,    ExportImportDateUtil . RANGE )  ;", "if    ( range . equals ( ExportImportDateUtil . RANGE _ FROM _ LAST _ PUBLISH _ DATE )  )     {", "Date   portletLastPublishDate    =    ExportImportDateUtil . getLastPublishDate ( jxPortletPreferences )  ;", "if    ( portletLastPublishDate    =  =    null )     {", "return   null ;", "}", "if    (  ( portletDataContext . getStartDate (  )  )     =  =    null )     {", "return   portletLastPublishDate ;", "}", "if    ( portletLastPublishDate . before ( portletDataContext . getStartDate (  )  )  )     {", "return   portletLastPublishDate ;", "}", "}", "return   portletDataContext . getStartDate (  )  ;", "}", "METHOD_END"], "methodName": ["getLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "long   lastPublishDate    =    GetterUtil . getLong ( layoutSet . getSettingsProperty ( ExportImportDateUtil .  _ LAST _ PUBLISH _ DATE )  )  ;", "if    ( lastPublishDate    =  =     0  )     {", "return   null ;", "}", "return   new   Date ( lastPublishDate )  ;", "}", "METHOD_END"], "methodName": ["getLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "long   lastPublishDate    =    GetterUtil . getLong ( jxPortletPreferences . getValue ( ExportImportDateUtil .  _ LAST _ PUBLISH _ DATE ,    BLANK )  )  ;", "if    ( lastPublishDate    =  =     0  )     {", "return   null ;", "}", "return   new   Date ( lastPublishDate )  ;", "}", "METHOD_END"], "methodName": ["getLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( dateRange    =  =    null )     {", "return   true ;", "}", "Date   sta    =    dateRange . getSta (  )  ;", "Date   endDate    =    dateRange . getEndDate (  )  ;", "if    ( originalLastPublishDate    !  =    null )     {", "if    (  ( sta    !  =    null )     &  &     ( sta . after ( originalLastPublishDate )  )  )     {", "return   false ;", "}", "if    (  ( endDate    !  =    null )     &  &     ( endDate . before ( originalLastPublishDate )  )  )     {", "return   false ;", "}", "} else", "if    ( sta    !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( lastPublishDate    =  =    null )     {", "lastPublishDate    =    new   Date (  )  ;", "}", "stagedGroupedModel . setLastPublishDate ( lastPublishDate )  ;", "}", "METHOD_END"], "methodName": ["updateLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "Date   originalLastPublishDate    =    ExportImportDateUtil . getLastPublishDate ( portletPreferences )  ;", "if    (  !  ( ExportImportDateUtil . isValidDateRange ( dateRange ,    originalLastPublishDate )  )  )     {", "return ;", "}", "if    ( lastPublishDate    =  =    null )     {", "lastPublishDate    =    new   Date (  )  ;", "}", "try    {", "portletPreferences . setValue ( ExportImportDateUtil .  _ LAST _ PUBLISH _ DATE ,    String . valueOf ( lastPublishDate . getTime (  )  )  )  ;", "portletPreferences . store (  )  ;", "}    catch    ( UnsupportedOperationException   uoe )     {", "if    ( ExportImportDateUtil .  _ log . isDebugEnabled (  )  )     {", "ExportImportDateUtil .  _ log . debug (  (  (  \" Not   updating   the   portlet   setup   for    \"     +    portletId )     +     \"    because   no   setup   was   returned   for   the   current   page \"  )  )  ;", "}", "}    catch    ( Exception   e )     {", "ExportImportDateUtil .  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["updateLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutSet   layoutSet    =    LayoutSetLocalServiceUtil . getLayoutSet ( groupId ,    privateLayout )  ;", "Date   originalLastPublishDate    =     . getLastPublishDate ( layoutSet )  ;", "if    (  !  (  . isValidDateRange ( dateRange ,    originalLastPublishDate )  )  )     {", "return ;", "}", "if    ( lastPublishDate    =  =    null )     {", "lastPublishDate    =    new   Date (  )  ;", "}", "UnicodeProperties   settingsProperties    =    layoutSet . getSettingsProperties (  )  ;", "settingsProperties . setProperty (  .  _ LAST _ PUBLISH _ DATE ,    String . valueOf ( lastPublishDate . getTime (  )  )  )  ;", "LayoutSetLocalServiceUtil . updateSettings ( layoutSet . getGroupId (  )  ,    layoutSet . isPrivateLayout (  )  ,    settingsProperties . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportDateUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getAllLayoutIds ( groupId ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["getAllLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getAllLayoutIdsMap ( groupId ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["getAllLayoutIdsMap"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getCalendar ( portletRequest ,    paramPrefix ,    timeZoneSensitive )  ;", "}", "METHOD_END"], "methodName": ["getCalendar"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getDataSiteLevelPortlets ( companyId )  ;", "}", "METHOD_END"], "methodName": ["getDataSiteLevelPortlets"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getDataSiteLevelPortlets ( companyId ,    excludeDataAlwaysStaged )  ;", "}", "METHOD_END"], "methodName": ["getDataSiteLevelPortlets"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getDateRange ( portletRequest ,    groupId ,    privateLayout ,    plid ,    portletId ,    defaultRange )  ;", "}", "METHOD_END"], "methodName": ["getDateRange"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportPortletControls ( companyId ,    portletId ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["getExportPortletControls"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportPortletControls ( companyId ,    portletId ,    parameterMap ,    type )  ;", "}", "METHOD_END"], "methodName": ["getExportPortletControls"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportPortletControlsMap ( companyId ,    portletId ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["getExportPortletControlsMap"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportPortletControlsMap ( companyId ,    portletId ,    parameterMap ,    type )  ;", "}", "METHOD_END"], "methodName": ["getExportPortletControlsMap"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportableLayout ( themeDisplay )  ;", "}", "METHOD_END"], "methodName": ["getExportableLayout"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getExportableRootPortletId ( companyId ,    portletId )  ;", "}", "METHOD_END"], "methodName": ["getExportableRootPortletId"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getImportPortletControls ( companyId ,    portletId ,    parameterMap ,    portletDataElement )  ;", "}", "METHOD_END"], "methodName": ["getImportPortletControls"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getImportPortletControls ( companyId ,    portletId ,    parameterMap ,    portletDataElement ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["getImportPortletControls"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getImportPortletControlsMap ( companyId ,    portletId ,    parameterMap ,    portletDataElement ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["getImportPortletControlsMap"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIdMap ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIdMap"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIds ( layouts )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIds ( layoutIdMap )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIds ( layoutIdMap ,    targetGroupId )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIds ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutIds ( portletRequest ,    targetGroupId )  ;", "}", "METHOD_END"], "methodName": ["getLayoutIds"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getLayoutSetZipWriter ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getLayoutSetZipWriter"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getManifestSummary ( portletDataContext )  ;", "}", "METHOD_END"], "methodName": ["getManifestSummary"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getManifestSummary ( userId ,    groupId ,    parameterMap ,    fileEntry )  ;", "}", "METHOD_END"], "methodName": ["getManifestSummary"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getManifestSummary ( userId ,    groupId ,    parameterMap ,    file )  ;", "}", "METHOD_END"], "methodName": ["getManifestSummary"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getMissingParentLayouts ( layout ,    liveGroupId )  ;", "}", "METHOD_END"], "methodName": ["getMissingParentLayouts"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getModelDeletionCount ( portletDataContext ,    stagedModelType )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getPortletExportFileName ( portlet )  ;", "}", "METHOD_END"], "methodName": ["getPortletExportFileName"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getPortletZipWriter ( portletId )  ;", "}", "METHOD_END"], "methodName": ["getPortletZipWriter"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getSelectedLayoutsJSON ( groupId ,    privateLayout ,    selectedNodes )  ;", "}", "METHOD_END"], "methodName": ["getSelectedLayoutsJSON"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getTempFileEntry ( groupId ,    userId ,    folderName )  ;", "}", "METHOD_END"], "methodName": ["getTempFileEntry"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . getUserIdStrategy ( userId ,    userIdStrategy )  ;", "}", "METHOD_END"], "methodName": ["getUserIdStrategy"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . isAlwaysIncludeReference ( portletDataContext ,    referenceStagedModel )  ;", "}", "METHOD_END"], "methodName": ["isAlwaysIncludeReference"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . isReferenceWithinExportScope ( portletDataContext ,    stagedModel )  ;", "}", "METHOD_END"], "methodName": ["isReferenceWithinExportScope"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportContentReferences ( portletDataContext ,    entityStagedModel ,    entityElement ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportContentReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportContentReferences ( portletDataContext ,    entityStagedModel ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportContentReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportContentReferences ( portletDataContext ,    entityStagedModel ,    content ,    exportReferencedContent ,    escapeContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportContentReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportDLReferences ( portletDataContext ,    entityStagedModel ,    entityElement ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportDLReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportDLReferences ( portletDataContext ,    entityStagedModel ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportDLReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportLayoutReferences ( portletDataContext ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceExportLayoutReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportLayoutReferences ( portletDataContext ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportLayoutReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportLinksToLayouts ( portletDataContext ,    entityStagedModel ,    entityElement ,    content ,    exportReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceExportLinksToLayouts"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceExportLinksToLayouts ( portletDataContext ,    entityStagedModel ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceExportLinksToLayouts"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportContentReferences ( portletDataContext ,    entityStagedModel ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceImportContentReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportContentReferences ( portletDataContext ,    entityElement ,    content ,    importReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceImportContentReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportDLReferences ( portletDataContext ,    entityStagedModel ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceImportDLReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportDLReferences ( portletDataContext ,    entityElement ,    content ,    importReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceImportDLReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportLayoutReferences ( portletDataContext ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceImportLayoutReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportLayoutReferences ( portletDataContext ,    content ,    importReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceImportLayoutReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportLinksToLayouts ( portletDataContext ,    content )  ;", "}", "METHOD_END"], "methodName": ["replaceImportLinksToLayouts"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . replaceImportLinksToLayouts ( portletDataContext ,    content ,    importReferencedContent )  ;", "}", "METHOD_END"], "methodName": ["replaceImportLinksToLayouts"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportHelperUtil .  _ exportImportHelper . setPortletScope ( portletDataContext ,    portletElement )  ;", "}", "METHOD_END"], "methodName": ["setPortletScope"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportHelperUtil .  _ exportImportHelper . updateExportPortletPreferencesClassPKs ( portletDataContext ,    portlet ,    portletPreferences ,    key ,    className )  ;", "}", "METHOD_END"], "methodName": ["updateExportPortletPreferencesClassPKs"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportHelperUtil .  _ exportImportHelper . updateExportPortletPreferencesClassPKs ( portletDataContext ,    portlet ,    portletPreferences ,    key ,    className ,    rootElement )  ;", "}", "METHOD_END"], "methodName": ["updateExportPortletPreferencesClassPKs"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportHelperUtil .  _ exportImportHelper . updateImportPortletPreferencesClassPKs ( portletDataContext ,    portletPreferences ,    key ,    clazz ,    companyGroupId )  ;", "}", "METHOD_END"], "methodName": ["updateImportPortletPreferencesClassPKs"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . validateMissingReferences ( portletDataContext )  ;", "}", "METHOD_END"], "methodName": ["validateMissingReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportHelperUtil .  _ exportImportHelper . validateMissingReferences ( userId ,    groupId ,    parameterMap ,    file )  ;", "}", "METHOD_END"], "methodName": ["validateMissingReferences"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportHelperUtil .  _ exportImportHelper . writeManifestSummary ( document ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["writeManifestSummary"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportHelperUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( ExportImportPathUtil . PATH _ PREFIX _ COMPANY ,    companyId ,    className ,    classPK ,    null )  ;", "}", "METHOD_END"], "methodName": ["getCompanyModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getCompanyModelPath ( companyId ,    className ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["getCompanyModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Validator . isFilePath ( path ,    false )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Unable   to   get   expando   path    \"     +    path )     +     \"    because   it   is   located   outside   of   the   LAR \"  )  )  ;", "}", "int   pos    =    path . lastIndexOf (  .  _ FILE _ EXTENSION _ XML )  ;", "if    ( pos    =  =     (  -  1  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Unable   to   get   expando   path    \"     +    path )     +     \"    because   it   is   not   an   XML   file \"  )  )  ;", "}", "return   path . substring (  0  ,    pos )  . concat (  \"  - expando \"  )  . concat ( path . substring ( pos )  )  ;", "}", "METHOD_END"], "methodName": ["getExpandoPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  6  )  ;", "sb . append (  . getRootPath ( portletDataContext )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . PATH _ PREFIX _ LAYOUT )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( plid )  ;", "sb . append (  .  _ FILE _ EXTENSION _ XML )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getLayoutPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( portletDataContext ,    className ,    classPK ,    null )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( ExportImportPathUtil . PATH _ PREFIX _ GROUP ,    portletDataContext . getSourceGroupId (  )  ,    className ,    classPK ,    dependentFileName )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( stagedModel ,    null )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelType   stagedModelType    =    stagedModel . getStagedModelType (  )  ;", "if    ( stagedModel   instanceof   StagedGroupedModel )     {", "StagedGroupedModel   stagedGroupedModel    =     (  ( StagedGroupedModel )     ( stagedModel )  )  ;", "return    . getModelPath (  . PATH _ PREFIX _ GROUP ,    stagedGroupedModel . getGroupId (  )  ,    stagedModelType . getClassName (  )  ,    stagedModel . getPrimaryKeyObj (  )  ,    dependentFileName )  ;", "} else    {", "return    . getModelPath (  . PATH _ PREFIX _ COMPANY ,    stagedModel . getCompanyId (  )  ,    stagedModelType . getClassName (  )  ,    stagedModel . getPrimaryKeyObj (  )  ,    dependentFileName )  ;", "}", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  7  )  ;", "sb . append (  . getRootPath ( pathPrefix ,    pathPrimaryKey )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( className )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( primaryKeyObj . toString (  )  )  ;", "if    ( dependentFileName    =  =    null )     {", "sb . append (  .  _ FILE _ EXTENSION _ XML )  ;", "} else    {", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( dependentFileName )  ;", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( ExportImportPathUtil . PATH _ PREFIX _ GROUP ,    groupId ,    className ,    classPK ,    null )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getModelPath ( groupId ,    className ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["getModelPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( ownerType    =  =     ( PortletKeys . PREFS _ OWNER _ TYPE _ ARCHIVED )  )     {", "return    \" archived /  \"  ;", "} else", "if    ( ownerType    =  =     ( PortletKeys . PREFS _ OWNER _ TYPE _ COMPANY )  )     {", "return    \" company /  \"  ;", "} else", "if    ( ownerType    =  =     ( PortletKeys . PREFS _ OWNER _ TYPE _ GROUP )  )     {", "return    \" group /  \"  ;", "} else", "if    ( ownerType    =  =     ( PortletKeys . PREFS _ OWNER _ TYPE _ LAYOUT )  )     {", "return    \" layout /  \"  ;", "} else", "if    ( ownerType    =  =     ( PortletKeys . PREFS _ OWNER _ TYPE _ USER )  )     {", "return    \" user /  \"  ;", "} else    {", "return   petra . string . StringPool . BLANK ;", "}", "}", "METHOD_END"], "methodName": ["getOwnerTypePath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getPortletDataPath ( portletDataContext ,    portletDataContext . getPortletId (  )  ,    portletDataContext . getPlid (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPortletDataPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  4  )  ;", "sb . append (  . getPortletPath ( portletDataContext ,    portletId )  )  ;", "sb . append ( SLASH )  ;", "Portlet   portlet    =    PortletLocalServiceUtil . getPortletById ( portletId )  ;", "if    ( portlet . isPreferencesUniquePerLayout (  )  )     {", "sb . append ( plid )  ;", "} else    {", "sb . append ( portletDataContext . getScopeGroupId (  )  )  ;", "}", "sb . append (  \"  / portlet - data . xml \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPortletDataPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getPortletPath ( portletDataContext ,    portletDataContext . getPortletId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPortletPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  5  )  ;", "sb . append (  . getRootPath ( portletDataContext )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . PATH _ PREFIX _ PORTLET )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( portletId )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPortletPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  8  )  ;", "sb . append (  . getPortletPath ( portletDataContext ,    portletId )  )  ;", "sb . append (  \"  / preferences /  \"  )  ;", "sb . append (  . getOwnerTypePath ( ownerType )  )  ;", "sb . append ( ownerId )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( plid )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  \" portlet - preferences . xml \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferencesPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getRootPath ( ExportImportPathUtil . PATH _ PREFIX _ GROUP ,    portletDataContext . getScopeGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRootPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  4  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( pPrefix )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( pPrimaryKey )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getRootPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  1  0  )  ;", "sb . append (  . getRootPath ( portletDataContext )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . PATH _ PREFIX _ SERVICE )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( serviceName )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . getOwnerTypePath ( ownerType )  )  ;", "sb . append ( ownerId )  ;", "sb . append ( CharPool . FORWARD _ SLASH )  ;", "sb . append (  \" portlet - preferences . xml \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getServicePortletPreferencesPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  5  )  ;", "sb . append (  . getSourceRootPath ( portletDataContext )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . PATH _ PREFIX _ LAYOUT )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( layoutId )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getSourceLayoutPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  5  )  ;", "sb . append (  . getSourceRootPath ( portletDataContext )  )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append (  . PATH _ PREFIX _ PORTLET )  ;", "sb . append ( FORWARD _ SLASH )  ;", "sb . append ( portletId )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getSourcePortletPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportPathUtil . getRootPath ( ExportImportPathUtil . PATH _ PREFIX _ GROUP ,    portletDataContext . getSourceGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSourceRootPath"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportPathUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportProcessCallbackRegistryUtil .  _ exportImportProcessCommitCallbackRegistry . registerCallback ( processId ,    callable )  ;", "}", "METHOD_END"], "methodName": ["registerCallback"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportProcessCallbackRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportProcessCallbackRegistryUtil .  _ exportImportProcessCommitCallbackRegistry . registerCallback ( callable )  ;", "}", "METHOD_END"], "methodName": ["registerCallback"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportProcessCallbackRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportThreadLocal . isLayoutDataDeletionImportInProcess (  )  )     |  |     ( ExportImportThreadLocal . isPortletDataDeletionImportInProcess (  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDataDeletionImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportThreadLocal . isLayoutExportInProcess (  )  )     |  |     ( ExportImportThreadLocal . isPortletExportInProcess (  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isExportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  (  ( ExportImportThreadLocal . isDataDeletionImportInProcess (  )  )     |  |     ( ExportImportThreadLocal . isLayoutImportInProcess (  )  )  )     |  |     ( ExportImportThreadLocal . isLayoutValidationInProcess (  )  )  )     |  |     ( ExportImportThreadLocal . isPortletImportInProcess (  )  )  )     |  |     ( ExportImportThreadLocal . isPortletValidationInProcess (  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ initialLayoutStagingInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isInitialLayoutStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ layoutDataDeletionImportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isLayoutDataDeletionImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ layoutExportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isLayoutExportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ layoutImportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isLayoutImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ layoutStagingInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isLayoutStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ layoutValidationInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isLayoutValidationInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ portletDataDeletionImportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isPortletDataDeletionImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ portletExportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isPortletExportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ portletImportInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isPortletImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ portletStagingInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isPortletStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportThreadLocal .  _ portletValidationInProcess . get (  )  ;", "}", "METHOD_END"], "methodName": ["isPortletValidationInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportThreadLocal . isLayoutStagingInProcess (  )  )     |  |     ( ExportImportThreadLocal . isPortletStagingInProcess (  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ initialLayoutStagingInProcess . set ( initialLayoutStagingInProcess )  ;", "}", "METHOD_END"], "methodName": ["setInitialLayoutStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ layoutDataDeletionImportInProcess . set ( layoutDataDeletionImportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setLayoutDataDeletionImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ layoutExportInProcess . set ( layoutExportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setLayoutExportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ layoutImportInProcess . set ( layoutImportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setLayoutImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ layoutStagingInProcess . set ( layoutStagingInProcess )  ;", "}", "METHOD_END"], "methodName": ["setLayoutStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ layoutValidationInProcess . set ( layoutValidationInProcess )  ;", "}", "METHOD_END"], "methodName": ["setLayoutValidationInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ portletDataDeletionImportInProcess . set ( portletDataDeletionImportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setPortletDataDeletionImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ portletExportInProcess . set ( portletExportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setPortletExportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ portletImportInProcess . set ( portletImportInProcess )  ;", "}", "METHOD_END"], "methodName": ["setPortletImportInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ portletStagingInProcess . set ( portletStagingInProcess )  ;", "}", "METHOD_END"], "methodName": ["setPortletStagingInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "ExportImportThreadLocal .  _ portletValidationInProcess . set ( portletValidationInProcess )  ;", "}", "METHOD_END"], "methodName": ["setPortletValidationInProcess"], "fileName": "com.liferay.exportimport.kernel.lar.ExportImportThreadLocal"}, {"methodBody": ["METHOD_START", "{", "String   rootPortletId    =    portlet . getRootPortletId (  )  ;", "if    (  !  (  _ configurationPortletOptions . containsKey ( rootPortletId )  )  )     {", "_ dataPortlets . add ( portlet )  ;", "_ configurationPortletOptions . put ( rootPortletId ,    configurationPortletOptions )  ;", "}", "}", "METHOD_END"], "methodName": ["addDataPortlet"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "String   rootPortletId    =    portlet . getRootPortletId (  )  ;", "if    (  !  (  _ configurationPortletOptions . containsKey ( rootPortletId )  )  )     {", "_ layoutPortlets . add ( portlet )  ;", "_ configurationPortletOptions . put ( rootPortletId ,    configurationPortletOptions )  ;", "}", "}", "METHOD_END"], "methodName": ["addLayoutPortlet"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "addModelAdditionCount ( ManifestSummary . getManifestSummaryKey ( stagedModelType )  ,    count )  ;", "}", "METHOD_END"], "methodName": ["addModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "LongWrapper   modelAdditionCounter    =     _ modelAdditionCounters . get ( manifestSummaryKey )  ;", "if    ( modelAdditionCounter    =  =    null )     {", "modelAdditionCounter    =    new   LongWrapper (  )  ;", "_ modelAdditionCounters . put ( manifestSummaryKey ,    modelAdditionCounter )  ;", "}", "modelAdditionCounter . setValue ( count )  ;", "_ manifestSummaryKeys . add ( manifestSummaryKey )  ;", "}", "METHOD_END"], "methodName": ["addModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "addModelDeletionCount ( ManifestSummary . getManifestSummaryKey ( stagedModelType )  ,    count )  ;", "}", "METHOD_END"], "methodName": ["addModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "LongWrapper   modelDeletionCounter    =     _ modelDeletionCounters . get ( manifestSummaryKey )  ;", "if    ( modelDeletionCounter    =  =    null )     {", "modelDeletionCounter    =    new   LongWrapper (  )  ;", "_ modelDeletionCounters . put ( manifestSummaryKey ,    modelDeletionCounter )  ;", "}", "modelDeletionCounter . setValue ( count )  ;", "_ manifestSummaryKeys . add ( manifestSummaryKey )  ;", "}", "METHOD_END"], "methodName": ["addModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "long   modelDeletionCount    =     -  1  ;", "for    ( String   mKey    :     _ mKeys )     {", "long   mKeyModelDeletionCount    =    getModelDeletionCount ( mKey )  ;", "if    ( mKeyModelDeletionCount    =  =     (  -  1  )  )     {", "continue ;", "}", "if    ( modelDeletionCount    =  =     (  -  1  )  )     {", "modelDeletionCount    =    mKeyModelDeletionCount ;", "} else    {", "modelDeletionCount    +  =    mKeyModelDeletionCount ;", "}", "}", "return   modelDeletionCount ;", "}", "METHOD_END"], "methodName": ["getAllModelDeletionCounts"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ configurationPortletOptions . get ( rootPortletId )  ;", "}", "METHOD_END"], "methodName": ["getConfigurationPortletOptions"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ dataPortlets ;", "}", "METHOD_END"], "methodName": ["getDataPortlets"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ exportDate ;", "}", "METHOD_END"], "methodName": ["getExportDate"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ layoutPortlets ;", "}", "METHOD_END"], "methodName": ["getLayoutPortlets"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   ManifestSummary . getManifestSummaryKey ( stagedModelType . getClassName (  )  ,    stagedModelType . getReferrerClassName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getManifestSummaryKey"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNull ( referrerModelName )  )     {", "return   modelName ;", "}", "return   modelName . concat ( POUND )  . concat ( referrerModelName )  ;", "}", "METHOD_END"], "methodName": ["getManifestSummaryKey"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ manifestSummaryKeys ;", "}", "METHOD_END"], "methodName": ["getManifestSummaryKeys"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelAdditionCount ( stagedModelType . getClassName (  )  ,    stagedModelType . getReferrerClassName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelAdditionCount ( stagedModel . getStagedModelType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelAdditionCount ( new   StagedModelType ( clazz )  )  ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelAdditionCount ( clazz . getName (  )  ,    referrerClass . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    (  !  (  _ modelAdditionCounters . containsKey ( manifestSummaryKey )  )  )     {", "return    -  1  ;", "}", "LongWrapper   modelAdditionCounter    =     _ modelAdditionCounters . get ( manifestSummaryKey )  ;", "return   modelAdditionCounter . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Validator . isNull ( referrerClassName )  )     |  |     (  (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ALL )  )  )     &  &     (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ANY )  )  )  )  )     {", "String   manifestSummaryKey    =     . getKey ( className ,    referrerClassName )  ;", "return   getModelAdditionCount ( manifestSummaryKey )  ;", "}", "long   modelAdditionCount    =     -  1  ;", "for    ( String   key    :     _ modelAdditionCounters . keySet (  )  )     {", "if    (  (  !  ( key . startsWith ( className . concat ( POUND )  )  )  )     &  &     (  (  !  ( key . equals ( className )  )  )     |  |     (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ALL )  )  )  )  )     {", "continue ;", "}", "long   count    =    getModelAdditionCount ( key )  ;", "if    ( count    >  =     0  )     {", "if    ( modelAdditionCount    <     0  )     {", "modelAdditionCount    =    count ;", "} else    {", "modelAdditionCount    +  =    count ;", "}", "}", "}", "return   modelAdditionCount ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ modelAdditionCounters ;", "}", "METHOD_END"], "methodName": ["getModelAdditionCounters"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getAllModelDeletionCounts (  )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelDeletionCount ( stagedModelType . getClassName (  )  ,    stagedModelType . getReferrerClassName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    ( ArrayUtil . isEmpty ( stagedModelTypes )  )     {", "return    0  ;", "}", "long   modelDeletionCount    =     -  1  ;", "for    ( StagedModelType   stagedModelType    :    stagedModelTypes )     {", "long   stagedModelTypeModelDeletionCount    =    getModelDeletionCount ( stagedModelType )  ;", "if    ( stagedModelTypeModelDeletionCount    =  =     (  -  1  )  )     {", "continue ;", "}", "if    ( modelDeletionCount    =  =     (  -  1  )  )     {", "modelDeletionCount    =    stagedModelTypeModelDeletionCount ;", "} else    {", "modelDeletionCount    +  =    stagedModelTypeModelDeletionCount ;", "}", "}", "return   modelDeletionCount ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelDeletionCount ( stagedModel . getStagedModelType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return   getModelDeletionCount ( new   StagedModelType ( clazz )  )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    (  !  (  _ modelDeletionCounters . containsKey ( manifestSummaryKey )  )  )     {", "return    -  1  ;", "}", "LongWrapper   modelDeletionCounter    =     _ modelDeletionCounters . get ( manifestSummaryKey )  ;", "return   modelDeletionCounter . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Validator . isNull ( referrerClassName )  )     |  |     (  (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ALL )  )  )     &  &     (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ANY )  )  )  )  )     {", "String   manifestSummaryKey    =     . getKey ( className ,    referrerClassName )  ;", "return   getModelDeletionCount ( manifestSummaryKey )  ;", "}", "long   modelDeletionCount    =     -  1  ;", "for    ( String   key    :     _ modelDeletionCounters . keySet (  )  )     {", "if    (  (  !  ( key . startsWith ( className . concat ( POUND )  )  )  )     &  &     (  (  !  ( key . equals ( className )  )  )     |  |     (  !  ( referrerClassName . equals ( StagedModelType . REFERRER _ CLASS _ NAME _ ALL )  )  )  )  )     {", "continue ;", "}", "long   count    =    getModelDeletionCount ( key )  ;", "if    ( count    >  =     0  )     {", "if    ( modelDeletionCount    <     0  )     {", "modelDeletionCount    =    count ;", "} else    {", "modelDeletionCount    +  =    count ;", "}", "}", "}", "return   modelDeletionCount ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "return    _ modelDeletionCounters ;", "}", "METHOD_END"], "methodName": ["getModelDeletionCounters"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "String   manifestSummaryKey    =    ManifestSummary . getManifestSummaryKey ( stagedModelType )  ;", "if    (  !  (  _ modelAdditionCounters . containsKey ( manifestSummaryKey )  )  )     {", "_ modelAdditionCounters . put ( manifestSummaryKey ,    new   LongWrapper (  1  )  )  ;", "_ manifestSummaryKeys . add ( manifestSummaryKey )  ;", "return ;", "}", "LongWrapper   modelAdditionCounter    =     _ modelAdditionCounters . get ( manifestSummaryKey )  ;", "modelAdditionCounter . increment (  )  ;", "}", "METHOD_END"], "methodName": ["incrementModelAdditionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "String   manifestSummaryKey    =    ManifestSummary . getManifestSummaryKey ( stagedModelType )  ;", "if    (  !  (  _ modelDeletionCounters . containsKey ( manifestSummaryKey )  )  )     {", "_ modelDeletionCounters . put ( manifestSummaryKey ,    new   LongWrapper (  1  )  )  ;", "_ manifestSummaryKeys . add ( manifestSummaryKey )  ;", "return ;", "}", "LongWrapper   modelDeletionCounter    =     _ modelDeletionCounters . get ( manifestSummaryKey )  ;", "modelDeletionCounter . increment (  )  ;", "}", "METHOD_END"], "methodName": ["incrementModelDeletionCount"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "_ modelAdditionCounters . clear (  )  ;", "_ modelDeletionCounters . clear (  )  ;", "_ mKeys . clear (  )  ;", "}", "METHOD_END"], "methodName": ["resetCounters"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "_ exportDate    =    exportDate ;", "}", "METHOD_END"], "methodName": ["setExportDate"], "fileName": "com.liferay.exportimport.kernel.lar.ManifestSummary"}, {"methodBody": ["METHOD_START", "{", "_ referrers . put ( referrerDisplayName ,    referrerClassName )  ;", "}", "METHOD_END"], "methodName": ["addReferrer"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "_ referrers . putAll ( referrers )  ;", "}", "METHOD_END"], "methodName": ["addReferrers"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ classPK ;", "}", "METHOD_END"], "methodName": ["getClassPK"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ elementPath ;", "}", "METHOD_END"], "methodName": ["getElementPath"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ referrerClassName ;", "}", "METHOD_END"], "methodName": ["getReferrerClassName"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ referrers . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getReferrerDisplayNames"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ referrers ;", "}", "METHOD_END"], "methodName": ["getReferrers"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "_ groupId    =    groupId ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReference"}, {"methodBody": ["METHOD_START", "{", "String   type    =    missingReference . getType (  )  ;", "if    ( type . equals ( PortletDataContext . REFERENCE _ TYPE _ DEPENDENCY )  )     {", "add (  _ dependency ,    missingReference )  ;", "} else", "if    ( type . equals ( PortletDataContext . REFERENCE _ TYPE _ WEAK )  )     {", "add (  _ weak ,    missingReference )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReferences"}, {"methodBody": ["METHOD_START", "{", "String   key    =    null ;", "String   type    =    missingReference . getType (  )  ;", "if    ( type . equals ( PortletDataContext . REFERENCE _ TYPE _ DEPENDENCY )  )     {", "key    =    missingReference . getDisplayName (  )  ;", "} else", "if    ( type . equals ( PortletDataContext . REFERENCE _ TYPE _ WEAK )  )     {", "key    =    missingReference . getReferrerClassName (  )  ;", "}", "existing    =    missingReferences . get ( key )  ;", "if    ( existing    !  =    null )     {", "existing . addReferrers ( missingReference . getReferrers (  )  )  ;", "} else    {", "missingReferences . put ( key ,    missingReference )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReferences"}, {"methodBody": ["METHOD_START", "{", "return    _ dependencyMissingReferences ;", "}", "METHOD_END"], "methodName": ["getDependencyMissingReferences"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReferences"}, {"methodBody": ["METHOD_START", "{", "return    _ weakMissingReferences ;", "}", "METHOD_END"], "methodName": ["getWeakMissingReferences"], "fileName": "com.liferay.exportimport.kernel.lar.MissingReferences"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataContextFactoryUtil .  _ portletDataContextFactory . clonePortletDataContext ( portletDataContext )  ;", "}", "METHOD_END"], "methodName": ["clonePortletDataContext"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataContextFactoryUtil .  _ portletDataContextFactory . createExportPortletDataContext ( companyId ,    groupId ,    parameterMap ,    startDate ,    endDate ,    zipWriter )  ;", "}", "METHOD_END"], "methodName": ["createExportPortletDataContext"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataContextFactoryUtil .  _ portletDataContextFactory . createImportPortletDataContext ( companyId ,    groupId ,    parameterMap ,    userIdStrategy ,    zipReader )  ;", "}", "METHOD_END"], "methodName": ["createImportPortletDataContext"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataContextFactoryUtil .  _ portletDataContextFactory . createPreparePortletDataContext ( themeDisplay ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["createPreparePortletDataContext"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataContextFactoryUtil .  _ portletDataContextFactory . createPreparePortletDataContext ( companyId ,    groupId ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["createPreparePortletDataContext"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataContextFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ portletId ;", "}", "METHOD_END"], "methodName": ["getPortletId"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return    _ stagedModel ;", "}", "METHOD_END"], "methodName": ["getStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return    _ stagedModelClassName ;", "}", "METHOD_END"], "methodName": ["getStagedModelClassName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return    _ stagedModelClassPK ;", "}", "METHOD_END"], "methodName": ["getStagedModelClassPK"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return    _ stagedModelDisplayName ;", "}", "METHOD_END"], "methodName": ["getStagedModelDisplayName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ portletId    =    portletId ;", "}", "METHOD_END"], "methodName": ["setPortletId"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ stagedModel    =    stagedModel ;", "}", "METHOD_END"], "methodName": ["setStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ stagedModelClassName    =    stagedModelClassName ;", "}", "METHOD_END"], "methodName": ["setStagedModelClassName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ stagedModelClassPK    =    stagedModelClassPK ;", "}", "METHOD_END"], "methodName": ["setStagedModelClassPK"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ stagedModelDisplayName    =    stagedModelDisplayName ;", "}", "METHOD_END"], "methodName": ["setStagedModelDisplayName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataException"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getNamespace"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getStagingControls"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isSupportsDataStrategyCopyAsNew"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isSupportsDataStrategyMirrorWithOverwriting"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandler"}, {"methodBody": ["METHOD_START", "{", "return    _ children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerBoolean"}, {"methodBody": ["METHOD_START", "{", "return    _ defaultState ;", "}", "METHOD_END"], "methodName": ["getDefaultState"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerBoolean"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  _ choices )     =  =    null )     |  |     (  (  _ choices . length )     <     1  )  )     {", "return    .  _ DEFAULT _ CHOICES ;", "} else    {", "return    _ choices ;", "}", "}", "METHOD_END"], "methodName": ["getChoices"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerChoice"}, {"methodBody": ["METHOD_START", "{", "return   getChoices (  )  [ getDefaultChoiceIndex (  )  ]  ;", "}", "METHOD_END"], "methodName": ["getDefaultChoice"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerChoice"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  _ defaultChoice )     <     0  )     |  |     (  (  _ defaultChoice )     >  =     (  _ choices . length )  )  )     {", "return    0  ;", "} else    {", "return    _ defaultChoice ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultChoiceIndex"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerChoice"}, {"methodBody": ["METHOD_START", "{", "return    _ className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return    _ controlLabel ;", "}", "METHOD_END"], "methodName": ["getControlLabel"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return    _ controlName ;", "}", "METHOD_END"], "methodName": ["getControlName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "String   helpMessage    =    LanguageUtil . get ( locale ,    StringBundler . concat ( action ,     \"  -  \"  ,     _ controlLabel ,     \"  - help \"  )  ,    BLANK )  ;", "if    ( Validator . isNull ( helpMessage )  )     {", "helpMessage    =    LanguageUtil . get ( locale ,     (  (  \" export - import - publish -  \"     +     (  _ controlLabel )  )     +     \"  - help \"  )  ,    BLANK )  ;", "}", "return   helpMessage ;", "}", "METHOD_END"], "methodName": ["getHelpMessage"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return    _ namespace ;", "}", "METHOD_END"], "methodName": ["getNamespace"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataHandlerControl . getNamespacedControlName (  _ namespace ,    getControlName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getNamespacedControlName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  4  )  ;", "sb . append ( UNDERLINE )  ;", "sb . append ( namespace )  ;", "sb . append ( UNDERLINE )  ;", "sb . append ( cName )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getNamespacedControlName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return    _ referrerClassName ;", "}", "METHOD_END"], "methodName": ["getReferrerClassName"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "return    _ disabled ;", "}", "METHOD_END"], "methodName": ["isDisabled"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "_ namespace    =    namespace ;", "}", "METHOD_END"], "methodName": ["setNamespace"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerControl"}, {"methodBody": ["METHOD_START", "{", "PortalRuntimePermission . checkGetBeanProperty ( PortletDataHandlerStatusMessageSenderUtil . class )  ;", "return   PortletDataHandlerStatusMessageSenderUtil .  _ dataHandlerStatusMessageSender ;", "}", "METHOD_END"], "methodName": ["_getPortletDataHandlerStatusMessageSender"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletDataHandlerStatusMessageSenderUtil .  _ getPortletDataHandlerStatusMessageSender (  )  ;", "}", "METHOD_END"], "methodName": ["getPortletDataHandlerStatusMessageSender"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerStatusMessageSenderUtil .  _ getPortletDataHandlerStatusMessageSender (  )  . sendStatusMessage ( messageType ,    stagedModel ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["sendStatusMessage"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerStatusMessageSenderUtil .  _ getPortletDataHandlerStatusMessageSender (  )  . sendStatusMessage ( messageType ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["sendStatusMessage"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerStatusMessageSenderUtil .  _ getPortletDataHandlerStatusMessageSender (  )  . sendStatusMessage ( messageType ,    portletId ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["sendStatusMessage"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerStatusMessageSenderUtil .  _ getPortletDataHandlerStatusMessageSender (  )  . sendStatusMessage ( messageType ,    portletIds ,    manifestSummary )  ;", "}", "METHOD_END"], "methodName": ["sendStatusMessage"], "fileName": "com.liferay.exportimport.kernel.lar.PortletDataHandlerStatusMessageSenderUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ stagedModelDataHandlers . get ( className )  ;", "}", "METHOD_END"], "methodName": ["_getStagedModelDataHandler"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Collection < StagedModelDataHandler <  ?  >  >    values    =     _ stagedModelDataHandlers . values (  )  ;", "return   ListUtil . fromCollection ( values )  ;", "}", "METHOD_END"], "methodName": ["_getStagedModelDataHandlers"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "ServiceRegistration <  <  ?  >  >    serviceRegistration    =    registry . registerService (  (  ( Class <  <  ?  >  >  )     (  ( Class <  ?  >  )     (  . class )  )  )  ,    stagedModelDataHandler )  ;", "_ serviceRegistrations . put ( stagedModelDataHandler ,    serviceRegistration )  ;", "}", "METHOD_END"], "methodName": ["_register"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceRegistration < StagedModelDataHandler <  ?  >  >    serviceRegistration    =     _ serviceRegistrations . remove ( stagedModelDataHandler )  ;", "if    ( serviceRegistration    !  =    null )     {", "serviceRegistration . unregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_unregister"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagedModelDataHandlerRegistryUtil .  _ instance .  _ getStagedModelDataHandler ( className )  ;", "}", "METHOD_END"], "methodName": ["getStagedModelDataHandler"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagedModelDataHandlerRegistryUtil .  _ instance .  _ getStagedModelDataHandlers (  )  ;", "}", "METHOD_END"], "methodName": ["getStagedModelDataHandlers"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerRegistryUtil .  _ instance .  _ register ( stagedModelDataHandler )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerRegistryUtil .  _ instance .  _ unregister ( stagedModelDataHandler )  ;", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( StagedModelDataHandler <  ?  >    stagedModelDataHandler    :    stagedModelDataHandlers )     {", ". unregister ( stagedModelDataHandler )  ;", "}", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "long   groupId    =    GetterUtil . getLong ( element . attributeValue (  \" group - id \"  )  )  ;", "String   className    =    element . attributeValue (  \" class - name \"  )  ;", "Serializable   classPK    =    GetterUtil . getString ( element . attributeValue (  \" class - pk \"  )  )  ;", "String   path    =    ExportImportPathUtil . getModelPath ( groupId ,    className ,    classPK )  ;", "stagedModel    =     (  (  )     ( portletDataContext . getZipEntryAsObject ( element ,    path )  )  )  ;", "if    ( stagedModel    !  =    null )     {", "return   stagedModel ;", "}", "path    =    ExportImportPathUtil . getCompanyModelPath ( portletDataContext . getSourceCompanyId (  )  ,    className ,    classPK )  ;", "return    (  (  )     ( portletDataContext . getZipEntryAsObject ( element ,    path )  )  )  ;", "}", "METHOD_END"], "methodName": ["_getReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModel   stagedModel    =    null ;", "String   elementName    =    element . getName (  )  ;", "if    ( elementName . equals (  \" reference \"  )  )     {", "stagedModel    =     .  _ getReferenceStagedModel ( portletDataContext ,    element )  ;", "} else    {", "String   path    =    element . attributeValue (  \" path \"  )  ;", "stagedModel    =     (  ( StagedModel )     ( portletDataContext . getZipEntryAsObject ( element ,    path )  )  )  ;", "}", "return   stagedModel ;", "}", "METHOD_END"], "methodName": ["_getStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( stagedModel    =  =    null )     {", ".  _ log . error (  (  \" Unable   to   get   a   staged   model   data   handler   for   a   null   value    \"     +     \" because   a   model   was   not   exported   properly \"  )  )  ;", "return   null ;", "}", "StagedModelDataHandler < T >    stagedModelDataHandler    =     (  ( StagedModelDataHandler < T >  )     ( StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler ( ExportImportClassedModelUtil . getClassName ( stagedModel )  )  )  )  ;", "return   stagedModelDataHandler ;", "}", "METHOD_END"], "methodName": ["_getStagedModelDataHandler"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "String   className    =    deletionElement . attributeValue (  \" class - name \"  )  ;", "String   extraData    =    deletionElement . attributeValue (  \" extra - data \"  )  ;", "String   uuid    =    deletionElement . attributeValue (  \" uuid \"  )  ;", "<  ?  >    stagedModelDataHandler    =    RegistryUtil . get ( className )  ;", "if    ( stagedModelDataHandler    !  =    null )     {", "stagedModelDataHandler . deleteStagedModel ( uuid ,    portletDataContext . getScopeGroupId (  )  ,    className ,    extraData )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( referenceElement    =  =    null )     {", "return ;", "}", "boolean   missing    =    portletDataContext . isMissingReference ( referenceElement )  ;", "StagedModelDataHandler <  ?  >    stagedModelDataHandler    =    StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler ( stagedModelClassName )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "return ;", "}", "if    ( missing )     {", "stagedModelDataHandler . importMissingReference ( portletDataContext ,    referenceElement )  ;", "return ;", "}", "Attribute   missingAttribute    =    referenceElement . attribute (  \" missing \"  )  ;", "if    (  ( missingAttribute    !  =    null )     &  &     ( GetterUtil . getBoolean ( missingAttribute . getValue (  )  )  )  )     {", "StagedModel   stagedModel    =     .  _ getReferenceStagedModel ( portletDataContext ,    referenceElement )  ;", "Element   missingReferenceElement    =    portletDataContext . getMissingReferenceElement ( stagedModel )  ;", "if    ( missingReferenceElement    !  =    null )     {", "String   elementPath    =    missingReferenceElement . attributeValue (  \" element - path \"  )  ;", "if    ( Validator . isNotNull ( elementPath )  )     {", "Element   importDataRootElement    =    portletDataContext . getImportDataRootElement (  )  ;", "try    {", "Document   document    =    SAXReaderUtil . read ( portletDataContext . getZipEntryAsString ( elementPath )  )  ;", "portletDataContext . setImportDataRootElement ( document . getRootElement (  )  )  ;", ". importStagedModel ( portletDataContext ,    referenceElement )  ;", "}    catch    ( DocumentException   de )     {", "throw   new   RuntimeException ( de )  ;", "}    finally    {", "portletDataContext . setImportDataRootElement ( importDataRootElement )  ;", "}", "return ;", "}", "}", "}", ". importStagedModel ( portletDataContext ,    referenceElement )  ;", "}", "METHOD_END"], "methodName": ["doImportReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "Element   referrerStagedModelElement    =    portletDataContext . getExportDataElement ( referrerStagedModel )  ;", "if    (  (  !  ( ExportImportHelperUtil . isAlwaysIncludeReference ( portletDataContext ,    stagedModel )  )  )     |  |     (  !  ( ExportImportHelperUtil . isReferenceWithinExportScope ( portletDataContext ,    stagedModel )  )  )  )     {", "return   portletDataContext . addReferenceElement ( referrerStagedModel ,    referrerStagedModelElement ,    stagedModel ,    PortletDataContext . REFERENCE _ TYPE _ DEPENDENCY ,    true )  ;", "}", ". exportStagedModel ( portletDataContext ,    stagedModel )  ;", "return   portletDataContext . addReferenceElement ( referrerStagedModel ,    referrerStagedModelElement ,    stagedModel ,    referenceType ,    false )  ;", "}", "METHOD_END"], "methodName": ["exportReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagedModelDataHandlerUtil . exportReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModel ,    referenceType )  ;", "}", "METHOD_END"], "methodName": ["exportReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagedModelDataHandlerUtil . exportReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModel ,    referenceType )  ;", "}", "METHOD_END"], "methodName": ["exportReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "Portlet   referrerPortlet    =    PortletLocalServiceUtil . getPortletById ( referrerPortletId )  ;", "if    (  (  !  ( ExportImportHelperUtil . isAlwaysIncludeReference ( portletDataContext ,    stagedModel )  )  )     |  |     (  !  ( ExportImportHelperUtil . isReferenceWithinExportScope ( portletDataContext ,    stagedModel )  )  )  )     {", "return   portletDataContext . addReferenceElement ( referrerPortlet ,    portletDataContext . getExportDataRootElement (  )  ,    stagedModel ,    PortletDataContext . REFERENCE _ TYPE _ DEPENDENCY ,    true )  ;", "}", ". exportStagedModel ( portletDataContext ,    stagedModel )  ;", "return   portletDataContext . addReferenceElement ( referrerPortlet ,    portletDataContext . getExportDataRootElement (  )  ,    stagedModel ,    PortletDataContext . REFERENCE _ TYPE _ DEPENDENCY ,    false )  ;", "}", "METHOD_END"], "methodName": ["exportReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( ExportImportHelperUtil . isReferenceWithinExportScope ( portletDataContext ,    stagedModel )  )  )     {", "return ;", "}", "StagedModelDataHandler < T >    stagedModelDataHandler    =     .  _ getStagedModelDataHandler ( stagedModel )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "return ;", "}", "stagedModelDataHandler . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "}", "METHOD_END"], "methodName": ["exportStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler < T >    stagedModelDataHandler    =    StagedModelDataHandlerUtil .  _ getStagedModelDataHandler ( stagedModel )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "return   StringPool . BLANK ;", "}", "return   stagedModelDataHandler . getDisplayName ( stagedModel )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler < StagedModel >    stagedModelDataHandler    =    StagedModelDataHandlerUtil .  _ getStagedModelDataHandler ( stagedModel )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "return   Collections . emptyMap (  )  ;", "}", "return   stagedModelDataHandler . getReferenceAttributes ( portletDataContext ,    stagedModel )  ;", "}", "METHOD_END"], "methodName": ["getReferenceAttributes"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModelClass . getName (  )  ,    classPK )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModelClass ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "Element   referenceElement    =    portletDataContext . getReferenceElement ( referrerStagedModel ,    stagedModelClassName ,    classPK )  ;", ". doImportReferenceStagedModel ( portletDataContext ,    referenceElement ,    stagedModelClassName )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModelClassName ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    stagedModelClass . getName (  )  ,    classPK )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    stagedModelClass ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "Element   referenceElement    =    portletDataContext . getReferenceElement ( stagedModelClassName ,    classPK )  ;", ". doImportReferenceStagedModel ( portletDataContext ,    referenceElement ,    stagedModelClassName )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandlerUtil . importReferenceStagedModel ( portletDataContext ,    stagedModelClassName ,    Long . valueOf ( classPK )  )  ;", "}", "METHOD_END"], "methodName": ["importReferenceStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "List < Element >    referenceElements    =    portletDataContext . getReferenceElements ( referrerStagedModel ,    stagedModelClass )  ;", "for    ( Element   referenceElement    :    referenceElements )     {", "Serializable   classPK    =    GetterUtil . getString ( referenceElement . attributeValue (  \" class - pk \"  )  )  ;", ". importReferenceStagedModel ( portletDataContext ,    referrerStagedModel ,    stagedModelClass ,    classPK )  ;", "}", "}", "METHOD_END"], "methodName": ["importReferenceStagedModels"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "Element   importDataRootElement    =    portletDataContext . getImportDataRootElement (  )  ;", "Element   referencesElement    =    importDataRootElement . element (  \" references \"  )  ;", "if    ( referencesElement    =  =    null )     {", "return ;", "}", "List < Element >    referenceElements    =    referencesElement . elements (  )  ;", "for    ( Element   referenceElement    :    referenceElements )     {", "String   className    =    referenceElement . attributeValue (  \" class - name \"  )  ;", "String   stagedModelClassName    =    stagedModelClass . getName (  )  ;", "if    (  !  ( stagedModelClassName . equals ( className )  )  )     {", "continue ;", "}", "boolean   missing    =    portletDataContext . isMissingReference ( referenceElement )  ;", "StagedModelDataHandler <  ?  >    stagedModelDataHandler    =    StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler ( stagedModelClassName )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "continue ;", "}", "if    ( missing )     {", "stagedModelDataHandler . importMissingReference ( portletDataContext ,    referenceElement )  ;", "continue ;", "}", ". importStagedModel ( portletDataContext ,    referenceElement )  ;", "}", "}", "METHOD_END"], "methodName": ["importReferenceStagedModels"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler < T >    stagedModelDataHandler    =    StagedModelDataHandlerUtil .  _ getStagedModelDataHandler ( stagedModel )  ;", "if    ( stagedModelDataHandler    =  =    null )     {", "return ;", "}", "stagedModelDataHandler . importStagedModel ( portletDataContext ,    stagedModel )  ;", "LastSessionRecorderHelperUtil . syncLastSessionState (  )  ;", "}", "METHOD_END"], "methodName": ["importStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "StagedModel   stagedModel    =    StagedModelDataHandlerUtil .  _ getStagedModel ( portletDataContext ,    element )  ;", "StagedModelDataHandlerUtil . importStagedModel ( portletDataContext ,    stagedModel )  ;", "}", "METHOD_END"], "methodName": ["importStagedModel"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "return    _ classNameId ;", "}", "METHOD_END"], "methodName": ["getClassNameId"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "return    _ classSimpleName ;", "}", "METHOD_END"], "methodName": ["getClassSimpleName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "return    _ referrerClassName ;", "}", "METHOD_END"], "methodName": ["getReferrerClassName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "return    _ referrerClassNameId ;", "}", "METHOD_END"], "methodName": ["getReferrerClassNameId"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "if    ( Validator . isNull ( ssName )  )     {", "return   StringPool . BLANK ;", "}", "int   pos    =     ( ssNamestIndexOf ( PERIOD )  )     +     1  ;", "if    ( pos    <  =     0  )     {", "return   ssName ;", "}", "return   ssName . substring ( pos )  ;", "}", "METHOD_END"], "methodName": ["getSimpleName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "_ className    =    className ;", "_ classSleName    =    getSleName (  _ className )  ;", "if    ( Validator . isNotNull ( className )  )     {", "_ classNameId    =    PortalUtil . getClassNameId ( className )  ;", "} else    {", "_ classNameId    =     0  ;", "}", "}", "METHOD_END"], "methodName": ["setClassName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "if    ( classNameId    >     0  )     {", "_ className    =    PalUtil . getClassName ( classNameId )  ;", "_ classSimpleName    =    getSimpleName (  _ className )  ;", "} else    {", "_ className    =    null ;", "_ classSimpleName    =    null ;", "}", "_ classNameId    =    classNameId ;", "}", "METHOD_END"], "methodName": ["setClassNameId"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "_ classSimpleName    =    classSimpleName ;", "}", "METHOD_END"], "methodName": ["setClassSimpleName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "_ referrerClassName    =    referrerClassName ;", "if    ( Validator . isNull ( referrerClassName )  )     {", "_ referrerClassNameId    =     0  ;", "} else", "if    ( referrerClassName . equals (  . REFERRER _ CLASS _ NAME _ ALL )  )     {", "_ referrerClassNameId    =     . REFERRER _ CLASS _ NAME _ ID _ ALL ;", "} else", "if    ( referrerClassName . equals (  . REFERRER _ CLASS _ NAME _ ANY )  )     {", "_ referrerClassNameId    =     . REFERRER _ CLASS _ NAME _ ID _ ANY ;", "} else    {", "_ referrerClassNameId    =    com . liferay . portal . kernel . util . PortalUtil . getClassNameId ( referrerClassName )  ;", "}", "}", "METHOD_END"], "methodName": ["setReferrerClassName"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "_ referrerClassNameId    =    referrerClassNameId ;", "if    ( referrerClassNameId    =  =     0  )     {", "_ referrerClassName    =    null ;", "} else", "if    ( referrerClassNameId    =  =     (  . REFERRER _ CLASS _ NAME _ ID _ ALL )  )     {", "_ referrerClassName    =     . REFERRER _ CLASS _ NAME _ ALL ;", "} else", "if    ( referrerClassNameId    =  =     (  . REFERRER _ CLASS _ NAME _ ID _ ANY )  )     {", "_ referrerClassName    =     . REFERRER _ CLASS _ NAME _ ANY ;", "} else", "if    ( referrerClassNameId    >     0  )     {", "_ referrerClassName    =    com . liferay . portal . kernel . util . PortalUtil . getClassName ( referrerClassNameId )  ;", "}", "}", "METHOD_END"], "methodName": ["setReferrerClassNameId"], "fileName": "com.liferay.exportimport.kernel.lar.StagedModelType"}, {"methodBody": ["METHOD_START", "{", "for    ( Serializable   attribute    :    attributes )     {", "if    ( clazz . isInstance ( attribute )  )     {", "return   clazz . cast ( attribute )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getAttributeByType"], "fileName": "com.liferay.exportimport.kernel.lifecycle.BaseExportImportLifecycleListener"}, {"methodBody": ["METHOD_START", "{", "return   getAttributeByType ( attributes ,    ExportImportConfiguration . class )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationAttribute"], "fileName": "com.liferay.exportimport.kernel.lifecycle.BaseExportImportLifecycleListener"}, {"methodBody": ["METHOD_START", "{", "return   getAttributeByType ( attributes ,    PortletDataContext . class )  ;", "}", "METHOD_END"], "methodName": ["getPortletDataContextAttribute"], "fileName": "com.liferay.exportimport.kernel.lifecycle.BaseExportImportLifecycleListener"}, {"methodBody": ["METHOD_START", "{", "TransientValue < Object >    transientValue    =    getAttributeByType ( attributes ,    TransientValue . class )  ;", "Object   value    =    transientValue . getValue (  )  ;", "if    ( value   instanceof   StagedModel )     {", "return    (  ( StagedModel )     ( value )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStagedModelAttribute"], "fileName": "com.liferay.exportimport.kernel.lifecycle.BaseExportImportLifecycleListener"}, {"methodBody": ["METHOD_START", "{", "return   getAttributeByType ( attributes ,    Throwable . class )  ;", "}", "METHOD_END"], "methodName": ["getThrowableAttribute"], "fileName": "com.liferay.exportimport.kernel.lifecycle.BaseExportImportLifecycleListener"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleEventFactoryUtil .  _ exportImportLifecycleEventFactory . create ( code ,    processFlag ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleEventFactoryUtil .  _ exportImportLifecycleEventFactory . create ( code ,    processFlag ,    processId ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ asyncExportImportLifecycleListeners ;", "}", "METHOD_END"], "methodName": ["_getAsyncExportImportLifecycleListeners"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ syncExportImportLifecycleListeners ;", "}", "METHOD_END"], "methodName": ["_getSyncExportImportLifecycleListeners"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "ServiceRegistration < Listener >    serviceRegistration    =    registry . registerService ( Listener . class ,    exportImportLifecycleListener )  ;", "_ serviceRegistrations . put ( exportImportLifecycleListener ,    serviceRegistration )  ;", "}", "METHOD_END"], "methodName": ["_register"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceRegistration < ExportImportLifecycleListener >    serviceRegistration    =     _ serviceRegistrations . remove ( exportImportLifecycleListener )  ;", "if    ( serviceRegistration    !  =    null )     {", "serviceRegistration . unregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_unregister"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleEventListenerRegistryUtil .  _ instance .  _ getAsyncExportImportLifecycleListeners (  )  ;", "}", "METHOD_END"], "methodName": ["getAsyncExportImportLifecycleListeners"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleEventListenerRegistryUtil .  _ instance .  _ getSyncExportImportLifecycleListeners (  )  ;", "}", "METHOD_END"], "methodName": ["getSyncExportImportLifecycleListeners"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLifecycleEventListenerRegistryUtil .  _ instance .  _ register ( exportImportLifecycleListener )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLifecycleEventListenerRegistryUtil .  _ instance .  _ unregister ( exportImportLifecycleListener )  ;", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( ExportImportLifecycleListener   exportImportLifecycleListener    :    exportImportLifecycleListeners )     {", ". unregister ( exportImportLifecycleListener )  ;", "}", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleEventListenerRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleListenerFactoryUtil .  _ exportImportLifecycleListenerFactory . create ( processAwareExportImportLifecycleListener )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleListenerFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLifecycleListenerFactoryUtil .  _ exportImportLifecycleListenerFactory . create ( processAwareExportImportLifecycleListener )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleListenerFactoryUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLifecycleManagerUtil .  _ exportImportLifecycleManager . fireExportImportLifecycleEvent ( code ,    processFlag ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["fireExportImportLifecycleEvent"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleManagerUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLifecycleManagerUtil .  _ exportImportLifecycleManager . fireExportImportLifecycleEvent ( code ,    processFlag ,    processId ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["fireExportImportLifecycleEvent"], "fileName": "com.liferay.exportimport.kernel.lifecycle.ExportImportLifecycleManagerUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ companyId ;", "}", "METHOD_END"], "methodName": ["getCompanyId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ createDate ;", "}", "METHOD_END"], "methodName": ["getCreateDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ exportImportConfigurationId ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ modifiedDate ;", "}", "METHOD_END"], "methodName": ["getModifiedDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ mvccVersion ;", "}", "METHOD_END"], "methodName": ["getMvccVersion"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ exportImportConfigurationId ;", "}", "METHOD_END"], "methodName": ["getPrimaryKey"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ settings ;", "}", "METHOD_END"], "methodName": ["getSettings"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ statusByUserId ;", "}", "METHOD_END"], "methodName": ["getStatusByUserId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ statusByUserName ;", "}", "METHOD_END"], "methodName": ["getStatusByUserName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ statusDate ;", "}", "METHOD_END"], "methodName": ["getStatusDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ userId ;", "}", "METHOD_END"], "methodName": ["getUserId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return    _ userName ;", "}", "METHOD_END"], "methodName": ["getUserName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ companyId    =    companyId ;", "}", "METHOD_END"], "methodName": ["setCompanyId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ createDate    =    createDate ;", "}", "METHOD_END"], "methodName": ["setCreateDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ exportImportConfigurationId    =    exportImportConfigurationId ;", "}", "METHOD_END"], "methodName": ["setExportImportConfigurationId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ groupId    =    groupId ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ modifiedDate    =    modifiedDate ;", "}", "METHOD_END"], "methodName": ["setModifiedDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ mvccVersion    =    mvccVersion ;", "}", "METHOD_END"], "methodName": ["setMvccVersion"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "setExportImportConfigurationId ( pk )  ;", "}", "METHOD_END"], "methodName": ["setPrimaryKey"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ settings    =    settings ;", "}", "METHOD_END"], "methodName": ["setSettings"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ status    =    status ;", "}", "METHOD_END"], "methodName": ["setStatus"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ statusByUserId    =    statusByUserId ;", "}", "METHOD_END"], "methodName": ["setStatusByUserId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ statusByUserName    =    statusByUserName ;", "}", "METHOD_END"], "methodName": ["setStatusByUserName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ statusDate    =    statusDate ;", "}", "METHOD_END"], "methodName": ["setStatusDate"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ userId    =    userId ;", "}", "METHOD_END"], "methodName": ["setUserId"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "_ userName    =    userName ;", "}", "METHOD_END"], "methodName": ["setUserName"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationSoap   soapModel    =    new   ExportImportConfigurationSoap (  )  ;", "soapModel . setMvccVersion ( model . getMvccVersion (  )  )  ;", "soapModel . setExportImportConfigurationId ( model . getExportImportConfigurationId (  )  )  ;", "soapModel . setGroupId ( model . getGroupId (  )  )  ;", "soapModel . setCompanyId ( model . getCompanyId (  )  )  ;", "soapModel . setUserId ( model . getUserId (  )  )  ;", "soapModel . setUserName ( model . getUserName (  )  )  ;", "soapModel . setCreateDate ( model . getCreateDate (  )  )  ;", "soapModel . setModifiedDate ( model . getModifiedDate (  )  )  ;", "soapModel . setName ( model . getName (  )  )  ;", "soapModel . setDescription ( model . getDescription (  )  )  ;", "soapModel . setType ( model . getType (  )  )  ;", "soapModel . setSettings ( model . getSettings (  )  )  ;", "soapModel . setStatus ( model . getStatus (  )  )  ;", "soapModel . setStatusByUserId ( model . getStatusByUserId (  )  )  ;", "soapModel . setStatusByUserName ( model . getStatusByUserName (  )  )  ;", "soapModel . setStatusDate ( model . getStatusDate (  )  )  ;", "return   soapModel ;", "}", "METHOD_END"], "methodName": ["toSoapModel"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationSoap [  ]    soapModels    =    new   ExportImportConfigurationSoap [ models . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( models . length )  ;    i +  +  )     {", "soapModels [ i ]     =    ExportImportConfigurationSoap . toSoapModel ( models [ i ]  )  ;", "}", "return   soapModels ;", "}", "METHOD_END"], "methodName": ["toSoapModels"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationSoap [  ]  [  ]    soapModels    =    null ;", "if    (  ( models . length )     >     0  )     {", "soapModels    =    new   ExportImportConfigurationSoap [ models . length ]  [ models [  0  ]  . length ]  ;", "} else    {", "soapModels    =    new   ExportImportConfigurationSoap [  0  ]  [  0  ]  ;", "}", "for    ( int   i    =     0  ;    i    <     ( models . length )  ;    i +  +  )     {", "soapModels [ i ]     =    ExportImportConfigurationSoap . toSoapModels ( models [ i ]  )  ;", "}", "return   soapModels ;", "}", "METHOD_END"], "methodName": ["toSoapModels"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "List < ExportImportConfigurationSoap >    soapModels    =    new   ArrayList < ExportImportConfigurationSoap >  ( models . size (  )  )  ;", "for    ( ExportImportConfiguration   model    :    models )     {", "soapModels . add ( ExportImportConfigurationSoap . toSoapModel ( model )  )  ;", "}", "return   soapModels . toArray ( new   ExportImportConfigurationSoap [ soapModels . size (  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["toSoapModels"], "fileName": "com.liferay.exportimport.kernel.model.ExportImportConfigurationSoap"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . addDraftExportImportConfiguration ( userId ,    type ,    settingsMap )  ;", "}", "METHOD_END"], "methodName": ["addDraftExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . addDraftExportImportConfiguration ( userId ,    name ,    type ,    settingsMap )  ;", "}", "METHOD_END"], "methodName": ["addDraftExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . addExportImportConfiguration ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["addExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . addExportImportConfiguration ( userId ,    groupId ,    name ,    description ,    type ,    settingsMap ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . addExportImportConfiguration ( userId ,    groupId ,    name ,    description ,    type ,    settingsMap ,    status ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . createExportImportConfiguration ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["createExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . deleteExportImportConfiguration ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["deleteExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . deleteExportImportConfiguration ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["deleteExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationLocalServiceUtil . getService (  )  . deleteExportImportConfigurations ( groupId )  ;", "}", "METHOD_END"], "methodName": ["deleteExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . deletePersistedModel ( persistedModel )  ;", "}", "METHOD_END"], "methodName": ["deletePersistedModel"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQuery (  )  ;", "}", "METHOD_END"], "methodName": ["dynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQuery ( dynamicQuery )  ;", "}", "METHOD_END"], "methodName": ["dynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQuery ( dynamicQuery ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["dynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQuery ( dynamicQuery ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["dynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQueryCount ( dynamicQuery )  ;", "}", "METHOD_END"], "methodName": ["dynamicQueryCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . dynamicQueryCount ( dynamicQuery ,    projection )  ;", "}", "METHOD_END"], "methodName": ["dynamicQueryCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . fetchExportImportConfiguration ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["fetchExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getActionableDynamicQuery (  )  ;", "}", "METHOD_END"], "methodName": ["getActionableDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfiguration ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( hits )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( start ,    end )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( groupId ,    type )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( groupId ,    type ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( companyId ,    groupId ,    keywords ,    type ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurations ( companyId ,    groupId ,    name ,    description ,    type ,    andSearch ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurationsCount (  )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationsCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurationsCount ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationsCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurationsCount ( groupId ,    type )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationsCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurationsCount ( companyId ,    groupId ,    keywords ,    type )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationsCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getExportImportConfigurationsCount ( companyId ,    groupId ,    name ,    description ,    type ,    andSearch )  ;", "}", "METHOD_END"], "methodName": ["getExportImportConfigurationsCount"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getIndexableActionableDynamicQuery (  )  ;", "}", "METHOD_END"], "methodName": ["getIndexableActionableDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . getPersistedModel ( primaryKeyObj )  ;", "}", "METHOD_END"], "methodName": ["getPersistedModel"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportConfigurationLocalServiceUtil .  _ service )     =  =    null )     {", "ExportImportConfigurationLocalServiceUtil .  _ service    =     (  ( ExportImportConfigurationLocalService )     ( PortalBeanLocatorUtil . locate ( ExportImportConfigurationLocalService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportConfigurationLocalServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   ExportImportConfigurationLocalServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . moveExportImportConfigurationToTrash ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["moveExportImportConfigurationToTrash"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . restoreExportImportConfigurationFromTrash ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["restoreExportImportConfigurationFromTrash"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . searchExportImportConfigurations ( companyId ,    groupId ,    type ,    keywords ,    start ,    end ,    sort )  ;", "}", "METHOD_END"], "methodName": ["searchExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . searchExportImportConfigurations ( companyId ,    groupId ,    type ,    name ,    description ,    andSearch ,    start ,    end ,    sort )  ;", "}", "METHOD_END"], "methodName": ["searchExportImportConfigurations"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . updateExportImportConfiguration ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["updateExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . updateExportImportConfiguration ( userId ,    exportImportConfigurationId ,    name ,    description ,    settingsMap ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["updateExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationLocalServiceUtil . getService (  )  . updateStatus ( userId ,    exportImportConfigurationId ,    status )  ;", "}", "METHOD_END"], "methodName": ["updateStatus"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationServiceUtil . getService (  )  . deleteExportImportConfiguration ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["deleteExportImportConfiguration"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportConfigurationServiceUtil .  _ service )     =  =    null )     {", "ExportImportConfigurationServiceUtil .  _ service    =     (  ( ExportImportConfigurationService )     ( PortalBeanLocatorUtil . locate ( ExportImportConfigurationService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportConfigurationServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   ExportImportConfigurationServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationServiceUtil . getService (  )  . moveExportImportConfigurationToTrash ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["moveExportImportConfigurationToTrash"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationServiceUtil . getService (  )  . restoreExportImportConfigurationFromTrash ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["restoreExportImportConfigurationFromTrash"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportConfigurationServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportLayoutsAsFile ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportLayoutsAsFile ( userId ,    groupId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportLayoutsAsFileInBackground ( userId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportLayoutsAsFileInBackground ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportPortletInfoAsFile ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportPortletInfoAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportPortletInfoAsFileInBackground ( userId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportPortletInfoAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . exportPortletInfoAsFileInBackground ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["exportPortletInfoAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportLocalServiceUtil .  _ service )     =  =    null )     {", "ExportImportLocalServiceUtil .  _ service    =     (  ( ExportImportLocalService )     ( PortalBeanLocatorUtil . locate ( ExportImportLocalService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportLocalServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   ExportImportLocalServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importLayouts ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importLayouts ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importLayouts ( userId ,    groupId ,    privateLayout ,    parameterMap ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importLayoutsDataDeletions ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsDataDeletions"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importLayoutsInBackground ( userId ,    exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importLayoutsInBackground ( userId ,    exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importLayoutsInBackground ( userId ,    exportImportConfigurationId ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importLayoutsInBackground ( userId ,    exportImportConfigurationId ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importPortletDataDeletions ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletDataDeletions"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importPortletInfo ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportLocalServiceUtil . getService (  )  . importPortletInfo ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importPortletInfoInBackground ( userId ,    exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importPortletInfoInBackground ( userId ,    exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importPortletInfoInBackground ( userId ,    exportImportConfigurationId ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . importPortletInfoInBackground ( userId ,    exportImportConfigurationId ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . validateImportLayoutsFile ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["validateImportLayoutsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . validateImportLayoutsFile ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["validateImportLayoutsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . validateImportPortletInfo ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["validateImportPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportLocalServiceUtil . getService (  )  . validateImportPortletInfo ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["validateImportPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportLayoutsAsFile ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportLayoutsAsFile ( userId ,    groupId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportLayoutsAsFileInBackground ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportLayoutsAsFileInBackground ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["exportLayoutsAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportPortletInfoAsFile ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportPortletInfoAsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . exportPortletInfoAsFileInBackground ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportPortletInfoAsFileInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportServiceUtil .  _ service )     =  =    null )     {", "ExportImportServiceUtil .  _ service    =     (  ( ExportImportService )     ( PortalBeanLocatorUtil . locate ( ExportImportService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   ExportImportServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportServiceUtil . getService (  )  . importLayouts ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportServiceUtil . getService (  )  . importLayouts ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportServiceUtil . getService (  )  . importLayouts ( userId ,    groupId ,    privateLayout ,    parameterMap ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . importLayoutsInBackground ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . importLayoutsInBackground ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importLayoutsInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportServiceUtil . getService (  )  . importPortletInfo ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportServiceUtil . getService (  )  . importPortletInfo ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . importPortletInfoInBackground ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . importPortletInfoInBackground ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["importPortletInfoInBackground"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . validateImportLayoutsFile ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["validateImportLayoutsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . validateImportLayoutsFile ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["validateImportLayoutsFile"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . validateImportPortletInfo ( exportImportConfiguration ,    file )  ;", "}", "METHOD_END"], "methodName": ["validateImportPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportServiceUtil . getService (  )  . validateImportPortletInfo ( exportImportConfiguration ,    inputStream )  ;", "}", "METHOD_END"], "methodName": ["validateImportPortletInfo"], "fileName": "com.liferay.exportimport.kernel.service.ExportImportServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . checkDefaultLayoutSetBranches ( userId ,    liveGroup ,    branchingPublic ,    branchingPrivate ,    remote ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["checkDefaultLayoutSetBranches"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . cleanUpStagingRequest ( stagingRequestId )  ;", "}", "METHOD_END"], "methodName": ["cleanUpStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingLocalServiceUtil . getService (  )  . createStagingRequest ( userId ,    groupId ,    checksum )  ;", "}", "METHOD_END"], "methodName": ["createStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . disableStaging ( liveGroup ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["disableStaging"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . disableStaging ( portletRequest ,    liveGroup ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["disableStaging"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . enableLocalStaging ( userId ,    liveGroup ,    branchingPublic ,    branchingPrivate ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["enableLocalStaging"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . enableRemoteStaging ( userId ,    stagingGroup ,    branchingPublic ,    branchingPrivate ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["enableRemoteStaging"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingLocalServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( StagingLocalServiceUtil .  _ service )     =  =    null )     {", "StagingLocalServiceUtil .  _ service    =     (  ( StagingLocalService )     ( PortalBeanLocatorUtil . locate ( StagingLocalService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( StagingLocalServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   StagingLocalServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingLocalServiceUtil . getService (  )  . publishStagingRequest ( userId ,    stagingRequestId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingLocalServiceUtil . getService (  )  . publishStagingRequest ( userId ,    stagingRequestId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["publishStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingLocalServiceUtil . getService (  )  . updateStagingRequest ( userId ,    stagingRequestId ,    fileName ,    bytes )  ;", "}", "METHOD_END"], "methodName": ["updateStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingLocalServiceUtil . getService (  )  . validateStagingRequest ( userId ,    stagingRequestId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["validateStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingLocalServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingServiceUtil . getService (  )  . cleanUpStagingRequest ( stagingRequestId )  ;", "}", "METHOD_END"], "methodName": ["cleanUpStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . createStagingRequest ( groupId ,    checksum )  ;", "}", "METHOD_END"], "methodName": ["createStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . getOSGiServiceIdentifier (  )  ;", "}", "METHOD_END"], "methodName": ["getOSGiServiceIdentifier"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( StagingServiceUtil .  _ service )     =  =    null )     {", "StagingServiceUtil .  _ service    =     (  ( StagingService )     ( PortalBeanLocatorUtil . locate ( StagingService . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( StagingServiceUtil . class ,     \"  _ service \"  )  ;", "}", "return   StagingServiceUtil .  _ service ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . hasRemoteLayout ( uuid ,    groupId ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["hasRemoteLayout"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingServiceUtil . getService (  )  . propagateExportImportLifecycleEvent ( code ,    processFlag ,    processId ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["propagateExportImportLifecycleEvent"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . publishStagingRequest ( stagingRequestId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . publishStagingRequest ( stagingRequestId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["publishStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "StagingServiceUtil . getService (  )  . updateStagingRequest ( stagingRequestId ,    fileName ,    bytes )  ;", "}", "METHOD_END"], "methodName": ["updateStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingServiceUtil . getService (  )  . validateStagingRequest ( stagingRequestId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["validateStagingRequest"], "fileName": "com.liferay.exportimport.kernel.service.StagingServiceUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . countByC _ G _ N _ D _ T ( companyId ,    groupId ,    name ,    description ,    type ,    status ,    andOperator )  ;", "}", "METHOD_END"], "methodName": ["countByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . countByKeywords ( companyId ,    groupId ,    keywords ,    type ,    status )  ;", "}", "METHOD_END"], "methodName": ["countByKeywords"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterCountByC _ G _ N _ D _ T ( companyId ,    groupId ,    name ,    description ,    type ,    status ,    andOperator )  ;", "}", "METHOD_END"], "methodName": ["filterCountByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterCountByC _ G _ N _ D _ T ( companyId ,    groupId ,    names ,    descriptions ,    type ,    status ,    andOperator )  ;", "}", "METHOD_END"], "methodName": ["filterCountByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterCountByKeywords ( companyId ,    groupId ,    keywords ,    type ,    status )  ;", "}", "METHOD_END"], "methodName": ["filterCountByKeywords"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterFindByC _ G _ N _ D _ T ( companyId ,    groupId ,    name ,    description ,    type ,    status ,    andOperator ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["filterFindByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterFindByC _ G _ N _ D _ T ( companyId ,    groupId ,    names ,    descriptions ,    type ,    status ,    andOperator ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["filterFindByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . filterFindByKeywords ( companyId ,    groupId ,    keywords ,    type ,    status ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["filterFindByKeywords"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . findByC _ G _ N _ D _ T ( companyId ,    groupId ,    name ,    description ,    type ,    status ,    andOperator ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . findByC _ G _ N _ D _ T ( companyId ,    groupId ,    names ,    descriptions ,    type ,    status ,    andOperator ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByC_G_N_D_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationFinderUtil . getFinder (  )  . findByKeywords ( companyId ,    groupId ,    keywords ,    type ,    status ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByKeywords"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportConfigurationFinderUtil .  _ finder )     =  =    null )     {", "ExportImportConfigurationFinderUtil .  _ finder    =     (  ( ExportImportConfigurationFinder )     ( PortalBeanLocatorUtil . locate ( ExportImportConfigurationFinder . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportConfigurationFinderUtil . class ,     \"  _ finder \"  )  ;", "}", "return   ExportImportConfigurationFinderUtil .  _ finder ;", "}", "METHOD_END"], "methodName": ["getFinder"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationFinderUtil .  _ finder    =    finder ;", "ReferenceRegistry . registerReference ( ExportImportConfigurationFinderUtil . class ,     \"  _ finder \"  )  ;", "}", "METHOD_END"], "methodName": ["setFinder"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationFinderUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . cacheResult ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["cacheResult"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . cacheResult ( exportImportConfigurations )  ;", "}", "METHOD_END"], "methodName": ["cacheResult"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . clearCache (  )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . clearCache ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countAll (  )  ;", "}", "METHOD_END"], "methodName": ["countAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countByCompanyId ( companyId )  ;", "}", "METHOD_END"], "methodName": ["countByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countByG _ S ( groupId ,    status )  ;", "}", "METHOD_END"], "methodName": ["countByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countByG _ T ( groupId ,    type )  ;", "}", "METHOD_END"], "methodName": ["countByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countByG _ T _ S ( groupId ,    type ,    status )  ;", "}", "METHOD_END"], "methodName": ["countByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countByGroupId ( groupId )  ;", "}", "METHOD_END"], "methodName": ["countByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . countWithDynamicQuery ( dynamicQuery )  ;", "}", "METHOD_END"], "methodName": ["countWithDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . create ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByCompanyId _ First ( companyId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByCompanyId_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByCompanyId _ Last ( companyId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByCompanyId_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ S _ First ( groupId ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_S_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ S _ Last ( groupId ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_S_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ T _ First ( groupId ,    type ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_T_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ T _ Last ( groupId ,    type ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_T_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ T _ S _ First ( groupId ,    type ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_T_S_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByG _ T _ S _ Last ( groupId ,    type ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByG_T_S_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByGroupId _ First ( groupId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByGroupId_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByGroupId _ Last ( groupId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["fetchByGroupId_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByPrimaryKey ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["fetchByPrimaryKey"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . fetchByPrimaryKeys ( primaryKeys )  ;", "}", "METHOD_END"], "methodName": ["fetchByPrimaryKeys"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findAll (  )  ;", "}", "METHOD_END"], "methodName": ["findAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findAll ( start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findAll ( start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findAll ( start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId ( companyId )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId ( companyId ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId ( companyId ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId ( companyId ,    start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId _ First ( companyId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId _ Last ( companyId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByCompanyId _ PrevAndNext ( exportImportConfigurationId ,    companyId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByCompanyId_PrevAndNext"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S ( groupId ,    status )  ;", "}", "METHOD_END"], "methodName": ["findByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S ( groupId ,    status ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S ( groupId ,    status ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S ( groupId ,    status ,    start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S _ First ( groupId ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_S_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S _ Last ( groupId ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_S_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ S _ PrevAndNext ( exportImportConfigurationId ,    groupId ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_S_PrevAndNext"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T ( groupId ,    type )  ;", "}", "METHOD_END"], "methodName": ["findByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T ( groupId ,    type ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T ( groupId ,    type ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T ( groupId ,    type ,    start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ First ( groupId ,    type ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ Last ( groupId ,    type ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ PrevAndNext ( exportImportConfigurationId ,    groupId ,    type ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_PrevAndNext"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S ( groupId ,    type ,    status )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S ( groupId ,    type ,    status ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S ( groupId ,    type ,    status ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S ( groupId ,    type ,    status ,    start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S _ First ( groupId ,    type ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S _ Last ( groupId ,    type ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByG _ T _ S _ PrevAndNext ( exportImportConfigurationId ,    groupId ,    type ,    status ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByG_T_S_PrevAndNext"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId ( groupId )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId ( groupId ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId ( groupId ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId ( groupId ,    start ,    end ,    orderByComparator ,    retrieveFromCache )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId _ First ( groupId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId_First"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId _ Last ( groupId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId_Last"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByGroupId _ PrevAndNext ( exportImportConfigurationId ,    groupId ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findByGroupId_PrevAndNext"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findByPrimaryKey ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["findByPrimaryKey"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findWithDynamicQuery ( dynamicQuery )  ;", "}", "METHOD_END"], "methodName": ["findWithDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findWithDynamicQuery ( dynamicQuery ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["findWithDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . findWithDynamicQuery ( dynamicQuery ,    start ,    end ,    orderByComparator )  ;", "}", "METHOD_END"], "methodName": ["findWithDynamicQuery"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . getBadColumnNames (  )  ;", "}", "METHOD_END"], "methodName": ["getBadColumnNames"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ExportImportConfigurationUtil .  _ persistence )     =  =    null )     {", "ExportImportConfigurationUtil .  _ persistence    =     (  ( ExportImportConfigurationPersistence )     ( PortalBeanLocatorUtil . locate ( ExportImportConfigurationPersistence . class . getName (  )  )  )  )  ;", "ReferenceRegistry . registerReference ( ExportImportConfigurationUtil . class ,     \"  _ persistence \"  )  ;", "}", "return   ExportImportConfigurationUtil .  _ persistence ;", "}", "METHOD_END"], "methodName": ["getPersistence"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . remove ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeAll (  )  ;", "}", "METHOD_END"], "methodName": ["removeAll"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeByCompanyId ( companyId )  ;", "}", "METHOD_END"], "methodName": ["removeByCompanyId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeByG _ S ( groupId ,    status )  ;", "}", "METHOD_END"], "methodName": ["removeByG_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeByG _ T ( groupId ,    type )  ;", "}", "METHOD_END"], "methodName": ["removeByG_T"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeByG _ T _ S ( groupId ,    type ,    status )  ;", "}", "METHOD_END"], "methodName": ["removeByG_T_S"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "ExportImportConfigurationUtil . getPersistence (  )  . removeByGroupId ( groupId )  ;", "}", "METHOD_END"], "methodName": ["removeByGroupId"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . update ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . update ( exportImportConfiguration ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   ExportImportConfigurationUtil . getPersistence (  )  . updateImpl ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["updateImpl"], "fileName": "com.liferay.exportimport.kernel.service.persistence.ExportImportConfigurationUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . getLayoutRevision ( layout )  ;", "}", "METHOD_END"], "methodName": ["getLayoutRevision"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . getLayoutSetBranch ( layoutSet )  ;", "}", "METHOD_END"], "methodName": ["getLayoutSetBranch"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . getLayoutSetStagingHandler ( layoutSet )  ;", "}", "METHOD_END"], "methodName": ["getLayoutSetStagingHandler"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . getLayoutStagingHandler ( layout )  ;", "}", "METHOD_END"], "methodName": ["getLayoutStagingHandler"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . isBranchingLayout ( layout )  ;", "}", "METHOD_END"], "methodName": ["isBranchingLayout"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . isBranchingLayoutSet ( group ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["isBranchingLayoutSet"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . mergeLayoutRevisionIntoLayout ( layout )  ;", "}", "METHOD_END"], "methodName": ["mergeLayoutRevisionIntoLayout"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . mergeLayoutSetRevisionIntoLayoutSet ( layoutSet )  ;", "}", "METHOD_END"], "methodName": ["mergeLayoutSetRevisionIntoLayoutSet"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutStagingUtil .  _ layoutStaging . prepareLayoutStagingHandler ( portletDataContext ,    layout )  ;", "}", "METHOD_END"], "methodName": ["prepareLayoutStagingHandler"], "fileName": "com.liferay.exportimport.kernel.staging.LayoutStagingUtil"}, {"methodBody": ["METHOD_START", "{", "MergeLayoutPrototypesThreadLocal .  _ mergeComplete . remove (  )  ;", "}", "METHOD_END"], "methodName": ["clearMergeComplete"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   MergeLayoutPrototypesThreadLocal .  _ inProgress . get (  )  ;", "}", "METHOD_END"], "methodName": ["isInProgress"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "Set < MergeLayoutPrototypesThreadLocal . MethodKey >    methodKeys    =    MergeLayoutPrototypesThreadLocal .  _ mergeComplete . get (  )  ;", "return   methodKeys . contains ( new   MergeLayoutPrototypesThreadLocal . MethodKey ( methodName ,    arguments )  )  ;", "}", "METHOD_END"], "methodName": ["isMergeComplete"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   MergeLayoutPrototypesThreadLocal . isMergeComplete ( method . getName (  )  ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["isMergeComplete"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "MergeLayoutPrototypesThreadLocal .  _ inProgress . set ( inProgress )  ;", "}", "METHOD_END"], "methodName": ["setInProgress"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "Set < MergeLayoutPrototypesThreadLocal . MethodKey >    methodKeys    =    MergeLayoutPrototypesThreadLocal .  _ mergeComplete . get (  )  ;", "methodKeys . add ( new   MergeLayoutPrototypesThreadLocal . MethodKey ( methodName ,    arguments )  )  ;", "MergeLayoutPrototypesThreadLocal . setInProgress ( false )  ;", "}", "METHOD_END"], "methodName": ["setMergeComplete"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "MergeLayoutPrototypesThreadLocal . setMergeComplete ( method . getName (  )  ,    arguments )  ;", "}", "METHOD_END"], "methodName": ["setMergeComplete"], "fileName": "com.liferay.exportimport.kernel.staging.MergeLayoutPrototypesThreadLocal"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . buildRemoteURL ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["buildRemoteURL"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . buildRemoteURL ( typeSettingsProperties )  ;", "}", "METHOD_END"], "methodName": ["buildRemoteURL"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . buildRemoteURL ( remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection )  ;", "}", "METHOD_END"], "methodName": ["buildRemoteURL"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . buildRemoteURL ( remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["buildRemoteURL"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . checkDefaultLayoutSetBranches ( userId ,    liveGroup ,    branchingPublic ,    branchingPrivate ,    remote ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["checkDefaultLayoutSetBranches"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyFromLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["copyFromLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyFromLive ( portletRequest ,    portlet )  ;", "}", "METHOD_END"], "methodName": ["copyFromLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyPortlet ( portletRequest ,    sourceGroupId ,    targetGroupId ,    sourcePlid ,    targetPlid ,    portletId )  ;", "}", "METHOD_END"], "methodName": ["copyPortlet"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyRemoteLayouts ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["copyRemoteLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyRemoteLayouts ( exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["copyRemoteLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyRemoteLayouts ( sourceGroupId ,    privateLayout ,    layoutIdMap ,    name ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    remotePrivateLayout )  ;", "}", "METHOD_END"], "methodName": ["copyRemoteLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyRemoteLayouts ( sourceGroupId ,    privateLayout ,    layoutIdMap ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    remotePrivateLayout )  ;", "}", "METHOD_END"], "methodName": ["copyRemoteLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . copyRemoteLayouts ( sourceGroupId ,    privateLayout ,    layoutIdMap ,    parameterMap ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId ,    remotePrivateLayout ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["copyRemoteLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . deleteLastImportSettings ( liveGroup ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["deleteLastImportSettings"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . deleteRecentLayoutRevisionId ( user ,    layoutSetBranchId ,    plid )  ;", "}", "METHOD_END"], "methodName": ["deleteRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . deleteRecentLayoutRevisionId ( request ,    layoutSetBranchId ,    plid )  ;", "}", "METHOD_END"], "methodName": ["deleteRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . deleteRecentLayoutRevisionId ( userId ,    layoutSetBranchId ,    plid )  ;", "}", "METHOD_END"], "methodName": ["deleteRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getErrorMessagesJSONArray ( locale ,    missingReferences )  ;", "}", "METHOD_END"], "methodName": ["getErrorMessagesJSONArray"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getErrorMessagesJSONArray ( locale ,    missingReferences ,    contextMap )  ;", "}", "METHOD_END"], "methodName": ["getErrorMessagesJSONArray"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getExceptionMessagesJSONObject ( locale ,    e ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["getExceptionMessagesJSONObject"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getExceptionMessagesJSONObject ( locale ,    e ,    contextMap )  ;", "}", "METHOD_END"], "methodName": ["getExceptionMessagesJSONObject"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getLiveGroup ( group )  ;", "}", "METHOD_END"], "methodName": ["getLiveGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getLiveGroup ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getLiveGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getLiveGroupId ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getLiveGroupId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getMissingParentLayouts ( layout ,    liveGroupId )  ;", "}", "METHOD_END"], "methodName": ["getMissingParentLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getPermissionStagingGroup ( group )  ;", "}", "METHOD_END"], "methodName": ["getPermissionStagingGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getRecentLayoutRevisionId ( user ,    layoutSetBranchId ,    plid )  ;", "}", "METHOD_END"], "methodName": ["getRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getRecentLayoutRevisionId ( request ,    layoutSetBranchId ,    plid )  ;", "}", "METHOD_END"], "methodName": ["getRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getRecentLayoutSetBranchId ( user ,    layoutSetId )  ;", "}", "METHOD_END"], "methodName": ["getRecentLayoutSetBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getRecentLayoutSetBranchId ( request ,    layoutSetId )  ;", "}", "METHOD_END"], "methodName": ["getRecentLayoutSetBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getRemoteSiteURL ( stagingGroup ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["getRemoteSiteURL"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getSchedulerGroupName ( destinationName ,    groupId )  ;", "}", "METHOD_END"], "methodName": ["getSchedulerGroupName"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getStagedPortletId ( portletId )  ;", "}", "METHOD_END"], "methodName": ["getStagedPortletId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getStagingAndLiveGroupIds ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getStagingAndLiveGroupIds"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getStagingGroup ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getStagingGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getStagingParameters (  )  ;", "}", "METHOD_END"], "methodName": ["getStagingParameters"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getStagingParameters ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["getStagingParameters"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getWarningMessagesJSONArray ( locale ,    missingReferences )  ;", "}", "METHOD_END"], "methodName": ["getWarningMessagesJSONArray"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getWarningMessagesJSONArray ( locale ,    missingReferences ,    contextMap )  ;", "}", "METHOD_END"], "methodName": ["getWarningMessagesJSONArray"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . getWorkflowTask ( userId ,    layoutRevision )  ;", "}", "METHOD_END"], "methodName": ["getWorkflowTask"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . hasWorkflowTask ( userId ,    layoutRevision )  ;", "}", "METHOD_END"], "methodName": ["hasWorkflowTask"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . isGroupAccessible ( group ,    fromGroup )  ;", "}", "METHOD_END"], "methodName": ["isGroupAccessible"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . isGroupAccessible ( groupId ,    fromGroupId )  ;", "}", "METHOD_END"], "methodName": ["isGroupAccessible"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . isIncomplete ( layout )  ;", "}", "METHOD_END"], "methodName": ["isIncomplete"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . isIncomplete ( layout ,    layoutSetBranchId )  ;", "}", "METHOD_END"], "methodName": ["isIncomplete"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . lockGroup ( userId ,    groupId )  ;", "}", "METHOD_END"], "methodName": ["lockGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayout ( userId ,    plid ,    liveGroupId ,    includeChildren )  ;", "}", "METHOD_END"], "methodName": ["publishLayout"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    parameterMap ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    layoutIdMap ,    parameterMap ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    layoutIds ,    name ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    layoutIds ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishLayouts ( userId ,    sourceGroupId ,    targetGroupId ,    privateLayout ,    layoutIds ,    parameterMap ,    startDate ,    endDate )  ;", "}", "METHOD_END"], "methodName": ["publishLayouts"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishPortlet ( userId ,    exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["publishPortlet"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishPortlet ( userId ,    exportImportConfigurationId )  ;", "}", "METHOD_END"], "methodName": ["publishPortlet"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishPortlet ( userId ,    sourceGroupId ,    targetGroupId ,    sourcePlid ,    targetPlid ,    portletId ,    parameterMap )  ;", "}", "METHOD_END"], "methodName": ["publishPortlet"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishToLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["publishToLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishToLive ( portletRequest ,    portlet )  ;", "}", "METHOD_END"], "methodName": ["publishToLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . publishToRemote ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["publishToRemote"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . scheduleCopyFromLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["scheduleCopyFromLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . schedulePublishToLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["schedulePublishToLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . schedulePublishToRemote ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["schedulePublishToRemote"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutBranchId ( user ,    layoutSetBranchId ,    plid ,    layoutBranchId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutBranchId ( request ,    layoutSetBranchId ,    plid ,    layoutBranchId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutRevisionId ( user ,    layoutSetBranchId ,    plid ,    layoutRevisionId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutRevisionId ( request ,    layoutSetBranchId ,    plid ,    layoutRevisionId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutRevisionId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutSetBranchId ( user ,    layoutSetId ,    layoutSetBranchId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutSetBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . setRecentLayoutSetBranchId ( request ,    layoutSetId ,    layoutSetBranchId )  ;", "}", "METHOD_END"], "methodName": ["setRecentLayoutSetBranchId"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingUtil .  _ staging . stripProtocolFromRemoteAddress ( remoteAddress )  ;", "}", "METHOD_END"], "methodName": ["stripProtocolFromRemoteAddress"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . transferFileToRemoteLive ( file ,    stagingRequestId ,    httpPrincipal )  ;", "}", "METHOD_END"], "methodName": ["transferFileToRemoteLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . unlockGroup ( groupId )  ;", "}", "METHOD_END"], "methodName": ["unlockGroup"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . unscheduleCopyFromLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["unscheduleCopyFromLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . unschedulePublishToLive ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["unschedulePublishToLive"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . unschedulePublishToRemote ( portletRequest )  ;", "}", "METHOD_END"], "methodName": ["unschedulePublishToRemote"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . updateLastImportSettings ( layoutElement ,    layout ,    portletDataContext )  ;", "}", "METHOD_END"], "methodName": ["updateLastImportSettings"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . updateLastPublishDate ( portletId ,    portletPreferences ,    lastPublishDate )  ;", "}", "METHOD_END"], "methodName": ["updateLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . updateLastPublishDate ( sourceGroupId ,    privateLayout ,    lastPublishDate )  ;", "}", "METHOD_END"], "methodName": ["updateLastPublishDate"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . updateStaging ( portletRequest ,    liveGroup )  ;", "}", "METHOD_END"], "methodName": ["updateStaging"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . validateRemote ( remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId )  ;", "}", "METHOD_END"], "methodName": ["validateRemote"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "StagingUtil .  _ staging . validateRemote ( groupId ,    remoteAddress ,    remotePort ,    remotePathContext ,    secureConnection ,    remoteGroupId )  ;", "}", "METHOD_END"], "methodName": ["validateRemote"], "fileName": "com.liferay.exportimport.kernel.staging.StagingUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingPermissionUtil .  _ stagingPermission . hasPermission ( permissionChecker ,    group ,    className ,    classPK ,    portletId ,    actionId )  ;", "}", "METHOD_END"], "methodName": ["hasPermission"], "fileName": "com.liferay.exportimport.kernel.staging.permission.StagingPermissionUtil"}, {"methodBody": ["METHOD_START", "{", "return   StagingPermissionUtil .  _ stagingPermission . hasPermission ( permissionChecker ,    groupId ,    className ,    classPK ,    portletId ,    actionId )  ;", "}", "METHOD_END"], "methodName": ["hasPermission"], "fileName": "com.liferay.exportimport.kernel.staging.permission.StagingPermissionUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ class ;", "}", "METHOD_END"], "methodName": ["getClazz"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAlias"}, {"methodBody": ["METHOD_START", "{", "return    _ name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAlias"}, {"methodBody": ["METHOD_START", "{", "return    _ xstreamAliases ;", "}", "METHOD_END"], "methodName": ["_getAliases"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamAlias   xStreamAlias    =    new   XStreamAlias ( clazz ,    name )  ;", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "ServiceRegistration < XStreamAlias >    serviceRegistration    =    registry . registerService ( XStreamAlias . class ,    xStreamAlias )  ;", "_ serviceRegistrations . put ( xStreamAlias ,    serviceRegistration )  ;", "}", "METHOD_END"], "methodName": ["_register"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamAlias   xStreamAlias    =    new   XStreamAlias ( clazz ,    name )  ;", "ServiceRegistration < XStreamAlias >    serviceRegistration    =     _ serviceRegistrations . remove ( xStreamAlias )  ;", "if    ( serviceRegistration    !  =    null )     {", "serviceRegistration . unregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_unregister"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap <  >  ( XStreamAliasRegistryUtil .  _ instance .  _ getAliases (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAliases"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamAliasRegistryUtil .  _ instance .  _ register ( clazz ,    name )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamAliasRegistryUtil .  _ instance .  _ unregister ( clazz ,    name )  ;", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamAliasRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ xStreamConverters ;", "}", "METHOD_END"], "methodName": ["_getXStreamConverters"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "ServiceRegistration <  >    serviceRegistration    =    registry . registerService (  . class ,    xStreamConverter )  ;", "_ serviceRegistrations . put ( xStreamConverter ,    serviceRegistration )  ;", "}", "METHOD_END"], "methodName": ["_register"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceRegistration < XStreamConverter >    serviceRegistration    =     _ serviceRegistrations . remove ( xStreamConverter )  ;", "if    ( serviceRegistration    !  =    null )     {", "serviceRegistration . unregister (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_unregister"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return   XStreamConverterRegistryUtil .  _ instance .  _ getXStreamConverters (  )  ;", "}", "METHOD_END"], "methodName": ["getXStreamConverters"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamConverterRegistryUtil .  _ instance .  _ register ( xStreamConverter )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "XStreamConverterRegistryUtil .  _ instance .  _ unregister ( xStreamConverter )  ;", "}", "METHOD_END"], "methodName": ["unregister"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamConverterRegistryUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ typeExpression ;", "}", "METHOD_END"], "methodName": ["getTypeExpression"], "fileName": "com.liferay.exportimport.kernel.xstream.XStreamType"}]