[{"methodBody": ["METHOD_START", "{", "Pattern   pattern    =    Pattern . compile ( containedRegex )  ;", "Matcher   matcher    =    pattern . matcher ( string )  ;", "Assert . assertTrue ( message ,    matcher . find (  )  )  ;", "}", "METHOD_END"], "methodName": ["_assertContainsRegex"], "fileName": "com.liferay.taglib.util.HtmlTopTagTest"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    HtmlTopTagTest .  _ getElementNameAndAttributesPattern . matcher ( element )  ;", "Assert . assertTrue ( matcher . find (  )  )  ;", "return   matcher . group ( HtmlTopTagTest .  _ ELEMENT _ ATTRIBUTES _ GROUP _ INDEX )  ;", "}", "METHOD_END"], "methodName": ["_getElementAttributes"], "fileName": "com.liferay.taglib.util.HtmlTopTagTest"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    HtmlTopTagTest .  _ getElementNameAndAttributesPattern . matcher ( element )  ;", "Assert . assertTrue ( matcher . find (  )  )  ;", "return   matcher . group ( HtmlTopTagTest .  _ ELEMENT _ NAME _ GROUP _ INDEX )  ;", "}", "METHOD_END"], "methodName": ["_getElementName"], "fileName": "com.liferay.taglib.util.HtmlTopTagTest"}, {"methodBody": ["METHOD_START", "{", "HtmlTopTag   htmlTopTag    =    new   HtmlTopTag (  )  ;", "UnsyncStringWriter   unsyncStringWriter    =    new   UnsyncStringWriter (  )  ;", "final   JspWriter   jspWriter    =    new   MockJspWriter ( unsyncStringWriter )  ;", "PageContext   pageContext    =    new   MockPageContext (  )     {", "@ Override", "public   JspWriter   getOut (  )     {", "return   jspWriter ;", "}", "@ Override", "public   ServletRequest   getRequest (  )     {", "return   new   MockHttpServletRequest (  )     {", "@ Override", "public   Object   getAttribute ( String   name )     {", "if    (  !  ( OUTPUT _ DATA . equals ( name )  )  )     {", "return   null ;", "}", "return   new   OutputData (  )     {", "@ Override", "public   void   addData ( String   outputKey ,    String   webKey ,    StringBundler   sb )     {", "try    {", "jspWriter . write ( sb . toString (  )  )  ;", "}    catch    ( IOException   ioe )     {", "ReflectionUtil . throwException ( ioe )  ;", "}", "}", "}  ;", "}", "}  ;", "}", "@ Override", "public   BodyContent   pushBody (  )     {", "final   UnsyncStringWriter   unsyncStringWriter    =    new   UnsyncStringWriter (  )  ;", "return   new   MockBodyContent ( StringPool . BLANK ,    unsyncStringWriter )     {", "@ Override", "public   String   getString (  )     {", "return   unsyncStringWriter . toString (  )  ;", "}", "}  ;", "}", "}  ;", "htmlTopTag . setPageContext ( pageContext )  ;", "htmlTopTag . setPosition (  \" auto \"  )  ;", "htmlTopTag . doStartTag (  )  ;", "BodyContent   bodyContent    =    pageContext . pushBody (  )  ;", "bodyContent . print ( element )  ;", "htmlTopTag . setBodyContent ( bodyContent )  ;", "htmlTopTag . doEndTag (  )  ;", "String   htmlTopTagOutputString    =    unsyncStringWriter . toString (  )  ;", "String   elementName    =     .  _ getElementName ( element )  ;", "String   elementBeginRegex    =     (  \"  <  \"     +    elementName )     +     \"  [  ^  >  ]  +  \"  ;", "String   dataSennaTrackAttributeName    =     \" data - senna - track \"  ;", "if    ( expectedDataSennaTrackValue    !  =    null )     {", "String   dataSennaTrackAttribute    =     (  ( dataSennaTrackAttributeName    +     \"  =  \\  \"  \"  )     +    expectedDataSennaTrackValue )     +     \"  \\  \"  \"  ;", "String   dataSennaTrackAttributeRegex    =     ( elementBeginRegex    +    dataSennaTrackAttribute )     +     \"  [  \\  \\ s >  ]  \"  ;", ".  _ assertContainsRegex ( htmlTopTagOutputString ,    dataSennaTrackAttributeRegex ,     (  ( dataSennaTrackAttribute    +     \"    is   not   contained   in    \"  )     +    htmlTopTagOutputString )  )  ;", "int   countOfDataSennaTrackAttributeNames    =    StringUtil . count ( htmlTopTagOutputString ,    dataSennaTrackAttributeName )  ;", "Assert . assertEquals (  1  ,    countOfDataSennaTrackAttributeNames )  ;", "} else    {", "Assert . assertFalse ( htmlTopTagOutputString . contains ( dataSennaTrackAttributeName )  )  ;", "}", "String   elementAttributes    =     .  _ getElementAttributes ( element )  ;", "String   originalElementAttributesRegex    =    elementBeginRegex    +    elementAttributes ;", ".  _ assertContainsRegex ( htmlTopTagOutputString ,    originalElementAttributesRegex ,    null )  ;", "}", "METHOD_END"], "methodName": ["_testDataSennaTrackAttributeAdded"], "fileName": "com.liferay.taglib.util.HtmlTopTagTest"}, {"methodBody": ["METHOD_START", "{", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < script   type =  \\  \" text / javascript \\  \"     \"     +     \" src =  \\  \" http :  /  / liferay . com / javascript - file . js \\  \"  >  <  / script >  \"  )  ,     \" permanent \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < link   rel =  \\  \" stylesheet \\  \"    type =  \\  \" text / css \\  \"     \"     +     \" src =  \\  \" http :  /  / liferay . com / css - file . css \\  \"  >  \"  )  ,     \" temporary \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  \"  < style   type =  \\  \" text / css \\  \"  >  . example { background - color : red ;  }  <  / style >  \"  ,     \" temporary \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < script   type =  \\  \" text / javascript \\  \"     \"     +     (  \" src =  \\  \" http :  /  / liferay . com / javascript - file . js \\  \"     \"     +     \" data - senna - track =  \\  \" temporary \\  \"  >  <  / script >  \"  )  )  ,     \" temporary \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < link   rel =  \\  \" stylesheet \\  \"    type =  \\  \" text / css \\  \"     \"     +     (  \" src =  \\  \" http :  /  / liferay . com / css - file . css \\  \"     \"     +     \" data - senna - track =  \\  \" permanent \\  \"  >  \"  )  )  ,     \" permanent \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < style   type =  \\  \" text / css \\  \"    data - senna - track =  \\  \" permanent \\  \"  \"     +     \"  >  . example { background - color : red ;  }  <  / style >  \"  )  ,     \" permanent \"  )  ;", "HtmlTopTagTest .  _ testDataSennaTrackAttributeAdded (  (  \"  < meta   content =  \\  \" initial - scale =  1  .  0  ,    width = device - width \\  \"     \"     +     \" name =  \\  \" viewport \\  \"     /  >  \"  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["testDataSennaTrackAttribute"], "fileName": "com.liferay.taglib.util.HtmlTopTagTest"}]