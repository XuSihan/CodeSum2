[{"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModel"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithClassType"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithWorkflow"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "List < BaseModel <  ?  >  >    baseModels    =    new   ArrayList <  >  (  )  ;", "for    ( Group   group    :    groups )     {", "User   user    =    UserTestUtil . getAdminUser ( group . getCompanyId (  )  )  ;", "serviceContext . setCompanyId ( group . getCompanyId (  )  )  ;", "serviceContext . setScopeGroupId ( group . getGroupId (  )  )  ;", "serviceContext . setUserId ( user . getUserId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModels . add ( addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  )  ;", "}", "return   baseModels ;", "}", "METHOD_END"], "methodName": ["addBaseModels"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "assertCount ( expectedCount ,    assetEntryQuery ,    searchContext ,    ALL _ POS ,    ALL _ POS )  ;", "}", "METHOD_END"], "methodName": ["assertCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "int   actualCount    =    searchCount ( assetEntryQuery ,    searchContext ,    start ,    end )  ;", "Assert . assertEquals ( expectedCount ,    actualCount )  ;", "}", "METHOD_END"], "methodName": ["assertCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    strings    =    new   String [ dates . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( strings . length )  ;    i +  +  )     {", "strings [ i ]     =    dateFormat . format ( dates [ i ]  )  ;", "}", "return   strings ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Date [  ]    dates    =    new   Date [ size ]  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "Date   date    =    new   Date (  (  ( startDate . getTime (  )  )     +     (  (  ( RandomUtil . nextInt (  3  6  5  )  )     +     1  )     *     ( Time . DAY )  )  )  )  ;", "Calendar   calendar    =    new   GregorianCalendar (  )  ;", "calendar . setTime ( date )  ;", "calendar . set ( Calendar . SECOND ,     0  )  ;", "calendar . set ( Calendar . MILLISECOND ,     0  )  ;", "dates [ i ]     =    calendar . getTime (  )  ;", "}", "return   dates ;", "}", "METHOD_END"], "methodName": ["generateRandomDates"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getBaseModelClass (  )  ;", "return   clazz . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getBaseModelClassName"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getClassTypeIds"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Date [  ]    dates    =    new   Date [ assetEntries . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( dates . length )  ;    i +  +  )     {", "int   index    =    i ;", "if    ( orderByType . equals (  \" desc \"  )  )     {", "index    =     (  ( dates . length )     -     1  )     -    i ;", "}", "AssetEntry   assetEntry    =    assetEntries . get ( index )  ;", "dates [ i ]     =    assetEntry . getExpirationDate (  )  ;", "}", "return   dates ;", "}", "METHOD_END"], "methodName": ["getExpirationDates"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    titles    =    new   String [ orderedTitleMaps . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    orderedTitleMap    =    orderedTitleMaps . get ( i )  ;", "titles [ i ]     =    orderedTitleMap . get ( locale )  ;", "}", "return   titles ;", "}", "METHOD_END"], "methodName": ["getOrderedTitles"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getParentBaseModel"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    titles    =    new   String [ assetEntries . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "AssetEntry   assetEntry    =    assetEntries . get ( i )  ;", "titles [ i ]     =    assetEntry . getTitle ( locale )  ;", "}", "return   titles ;", "}", "METHOD_END"], "methodName": ["getTitles"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isLocalizableTitle"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   results    =    AssetUtil . search ( searchContext ,    assetEntryQuery ,    ALL _ POS ,    ALL _ POS )  ;", "return   AssetUtil . getAssetEntries ( results )  ;", "}", "METHOD_END"], "methodName": ["search"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   results    =    AssetUtil . search ( searchContext ,    assetEntryQuery ,    start ,    end )  ;", "return   results . getLength (  )  ;", "}", "METHOD_END"], "methodName": ["searchCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "_ group 1     =    GroupTestUtil . addGroup (  )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "AssetVocabulary   vocabulary    =    AssetVocabularyLocalServiceUtil . addVocabulary ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "_ vocabularyId    =    vocabulary . getVocabularyId (  )  ;", "AssetCategory   fashionCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Fashion \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ fashionCategoryId    =    fashionCategory . getCategoryId (  )  ;", "AssetCategory   foodCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Food \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ foodCategoryId    =    foodCategory . getCategoryId (  )  ;", "AssetCategory   healthCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Health \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ healthCategoryId    =    healthCategory . getCategoryId (  )  ;", "AssetCategory   sportCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Sport \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ sportCategoryId    =    sportCategory . getCategoryId (  )  ;", "AssetCategory   travelCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Travel \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ travelCategoryId    =    travelCategory . getCategoryId (  )  ;", "_ assetCategoryIds 1     =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "_ assetCategoryIds 2     =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ healthCategoryId ,     _ sportCategoryId    }  ;", "_ group 2     =    GroupTestUtil . addGroup (  )  ;", "long [  ]    groupIds    =    new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ;", "for    ( long   groupId    :    groupIds )     {", "serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \"  \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" architecture \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" modularity \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" osgi \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" services \"  ,    serviceContext )  ;", "}", "_ assetTagsNames 1     =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" modularity \"  ,     \" osgi \"     }  ;", "_ assetTagsNames 2     =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "testAssetCategorization ( new   Group [  ]  {     _ group 1     }  ,    assetEntryQuery ,    expectedResults )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategorization"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "SearchContext   searchContext    =    SearchContextTestUtil . getSearchContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groups [  0  ]  . getGroupId (  )  )  ;", "serviceContext . setAssetTagNames (  _ assetTagsNames 1  )  ;", "serviceContext . setAssetCategoryIds (  _ assetCategoryIds 1  )  ;", "addBaseModels ( groups ,    getSearchKeywords (  )  ,    serviceContext )  ;", "serviceContext . setAssetTagNames (  _ assetTagsNames 2  )  ;", "serviceContext . setAssetCategoryIds (  _ assetCategoryIds 2  )  ;", "addBaseModels ( groups ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertCount (  ( initialEntries    +    expectedResults )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategorization"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndNotAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId    }  ;", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAnyAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAnyAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" osgi \"  ,     \" modularity \"     }  ;", "String [  ]    allTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" services \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" osgi \"  ,     \" modularity \"     }  ;", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndNotAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"     }  ;", "String [  ]    allTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAnyAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAnyAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassNames ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testClassName1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    classNameIds    =    AssetRendererFactoryRegistryUtil . getClassNameIds ( TestPropsValues . getCompanyId (  )  )  ;", "classNameIds    =    ArrayUtil . remove ( classNameIds ,    PortalUtil . getClassNameId ( getBaseModelClass (  )  )  )  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    classNameIds )  ;", "testClassNames ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testClassName2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "addBaseModel ( parentBaseModel ,    gKeywords (  )  ,    serviceContext )  ;", "assertCount (  ( initialEntries    +    expectedResult )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testClassNames"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "addBaseModelWithClassType ( parentBaseModel ,    gKeywords (  )  ,    serviceContext )  ;", "if    ( classType )     {", "assetEntryQuery . setClassTypeIds ( getClassTypeIds (  )  )  ;", "assertCount (  ( initialEntries    +     1  )  ,    assetEntryQuery ,    searchContext )  ;", "} else    {", "assetEntryQuery . setClassTypeIds ( new   long [  ]  {     0     }  )  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "}", "}", "METHOD_END"], "methodName": ["testClassTypeIds"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassTypeIds ( assetEntryQuery ,    true )  ;", "}", "METHOD_END"], "methodName": ["testClassTypeIds1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassTypeIds ( assetEntryQuery ,    false )  ;", "}", "METHOD_END"], "methodName": ["testClassTypeIds2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    new   AssetEntryQuery (  )  ;", "assetEntryQuery . setClassName ( getBaseModelClassName (  )  )  ;", "Group   group 1     =    GroupTestUtil . addGroup (  )  ;", "Group   group 2     =    GroupTestUtil . addGroup (  )  ;", "assetEntryQuery . setGroupIds ( new   long [  ]  {    group 1  . getGroupId (  )  ,    group 2  . getGroupId (  )     }  )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "ServiceContext   serviceContext 1     =    ServiceContextTestUtil . getServiceContext ( group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 1     =    getParentBaseModel ( group 1  ,    serviceContext 1  )  ;", "addBaseModel ( parentBaseModel 1  ,    gKeywords (  )  ,    serviceContext 1  )  ;", "ServiceContext   serviceContext 2     =    ServiceContextTestUtil . getServiceContext ( group 2  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 2     =    getParentBaseModel ( group 1  ,    serviceContext 2  )  ;", "addBaseModel ( parentBaseModel 2  ,    gKeywords (  )  ,    serviceContext 2  )  ;", "assertCount (  ( initialEntries    +     2  )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testGroups"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "long   createDate    =     0  ;", "BaseModel <  ?  >  [  ]    baseModels    =    new   BaseModel [ titles . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "long   delta    =     1  0  0  0     -     (  ( System . currentTimeMillis (  )  )     -    createDate )  ;", "if    ( delta    >     0  )     {", "Thread . sleep ( delta )  ;", "}", "createDate    =    System . currentTimeMillis (  )  ;", "baseModels [ i ]     =    addBaseModel ( parentBaseModel ,    titles [ i ]  ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" createDate \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( orderedTitles )  ,    ArrayUtils . toString ( getTitles ( assetEntries ,    LocaleUtil . getDefault (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDate"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    titles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" social \"  ,     \" osgi \"  ,     \" content \"  ,     \" life \"     }  ;", "testOrderByCreateDate ( assetEntryQuery ,     \" asc \"  ,    titles ,    titles )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDateAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    titles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" social \"  ,     \" osgi \"  ,     \" content \"  ,     \" life \"     }  ;", "String [  ]    orderedTitles    =    new   String [  ]  {     \" life \"  ,     \" content \"  ,     \" osgi \"  ,     \" social \"  ,     \"  \"  ,     \" open \"     }  ;", "testOrderByCreateDate ( assetEntryQuery ,     \" desc \"  ,    titles ,    orderedTitles )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDateDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( Date   expirationDate    :    expirationDates )     {", "addBaseModel ( parentBaseModel ,    RandomTestUtil . randomString (  )  ,    expirationDate ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" expirationDate \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "Arrays . sort ( expirationDates )  ;", "final   DateFormat   dateFormat    =    DateFormatFactoryUtil . getSimpleDateFormat ( INDEX _ DATE _ FORMAT _ PATTERN )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( format ( expirationDates ,    dateFormat )  )  ,    ArrayUtils . toString ( format ( getExpirationDates ( assetEntries ,    orderByType )  ,    dateFormat )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDate"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "Date [  ]    expirationDates    =    generateRandomDates ( new   Date (  )  ,     6  )  ;", "testOrderByExpirationDate ( assetEntryQuery ,     \" asc \"  ,    expirationDates )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDateAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "Date [  ]    expirationDates    =    generateRandomDates ( new   Date (  )  ,     6  )  ;", "testOrderByExpirationDate ( assetEntryQuery ,     \" desc \"  ,    expirationDates )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDateDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "for    ( Map < Locale ,    String >    titleMap    :    titleMaps )     {", "addBaseModel ( parentBaseModel ,    titleMap ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" title \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( final   Locale   locale    :    locales )     {", "searchContext . setLocale ( locale )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( getOrderedTitles ( orderedTitleMaps ,    locale )  )  ,    ArrayUtils . toString ( getTitles ( assetEntries ,    locale )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testOrderByTitle"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    defaultTitles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" life \"     }  ;", "String [  ]    frenchTitles    =    new   String [  ]  {     \" ouvert \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    titleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultTitles [ i ]  )  ;", "titleMap . put ( FRANCE ,    frenchTitles [ i ]  )  ;", "titleMaps . add ( titleMap )  ;", "}", "String [  ]    defaultOrderedTitles    =    new   String [  ]  {     \" content \"  ,     \" life \"  ,     \"  \"  ,     \" open \"  ,     \" osgi \"  ,     \" social \"     }  ;", "String [  ]    frenchOrderedTitles    =    new   String [  ]  {     \" content \"  ,     \"  \"  ,     \" osgi \"  ,     \" ouvert \"  ,     \" social \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    orderedTitleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultOrderedTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultOrderedTitles [ i ]  )  ;", "String   orderedTitle    =    frenchOrderedTitles [ i ]  ;", "if    (  !  ( isLocalizableTitle (  )  )  )     {", "orderedTitle    =    defaultOrderedTitles [ i ]  ;", "}", "titleMap . put ( FRANCE ,    orderedTitle )  ;", "orderedTitleMaps . add ( titleMap )  ;", "}", "testOrderByTitle ( assetEntryQuery ,     \" asc \"  ,    titleMaps ,    orderedTitleMaps ,    new   Locale [  ]  {    LocaleUtil . getDefault (  )  ,    LocaleUtil . FRANCE    }  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByTitleAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    defaultTitles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" life \"     }  ;", "String [  ]    frenchTitles    =    new   String [  ]  {     \" ouvert \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    titleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultTitles [ i ]  )  ;", "titleMap . put ( FRANCE ,    frenchTitles [ i ]  )  ;", "titleMaps . add ( titleMap )  ;", "}", "String [  ]    defaultOrderedTitles    =    new   String [  ]  {     \" social \"  ,     \" osgi \"  ,     \" open \"  ,     \"  \"  ,     \" life \"  ,     \" content \"     }  ;", "String [  ]    frenchOrderedTitles    =    new   String [  ]  {     \" vie \"  ,     \" social \"  ,     \" ouvert \"  ,     \" osgi \"  ,     \"  \"  ,     \" content \"     }  ;", "List < Map < Locale ,    String >  >    orderedTitleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultOrderedTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultOrderedTitles [ i ]  )  ;", "String   orderedTitle    =    frenchOrderedTitles [ i ]  ;", "if    (  !  ( isLocalizableTitle (  )  )  )     {", "orderedTitle    =    defaultOrderedTitles [ i ]  ;", "}", "titleMap . put ( FRANCE ,    orderedTitle )  ;", "orderedTitleMaps . add ( titleMap )  ;", "}", "testOrderByTitle ( assetEntryQuery ,     \" desc \"  ,    titleMaps ,    orderedTitleMaps ,    new   Locale [  ]  {    LocaleUtil . getDefault (  )  ,    LocaleUtil . FRANCE    }  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByTitleDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "addBaseModel ( parentBaseModel ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "assertCount ( size ,    assetEntryQuery ,    searchContext ,     0  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationType"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" none \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeNone"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" regular \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeRegular"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" simple \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeSimple"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   AssetTestUtil . addAssetEntry ( groupId ,    null )  ;", "}", "METHOD_END"], "methodName": ["addAssetEntry"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   assetEntryId    =    CounterLocalServiceUtil . increment (  )  ;", "AssetEntry   assetEntry    =    AssetEntryLocalServiceUtil . createAssetEntry ( assetEntryId )  ;", "assetEntry . setClassName ( Random . randomString (  )  )  ;", "assetEntry . setClassPK ( Random . randomLong (  )  )  ;", "assetEntry . setGroupId ( groupId )  ;", "assetEntry . setPublishDate ( publishDate )  ;", "assetEntry . setVisible ( true )  ;", "return   AssetEntryLocalServiceUtil . updateAssetEntry ( assetEntry )  ;", "}", "METHOD_END"], "methodName": ["addAssetEntry"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetTestUtil . addCategory ( groupId ,    vocabularyId ,    DEFAULT _ PARENT _ CATEGORY _ ID )  ;", "}", "METHOD_END"], "methodName": ["addCategory"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "Locale   locale    =    LocaleUtil . getSiteDefault (  )  ;", "titleMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "String [  ]    categoryProperties    =    null ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    TestPropsValues . getUserId (  )  )  ;", "return   AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,    groupId ,    parentCategoryId ,    titleMap ,    descriptionMap ,    vocabularyId ,    categoryProperties ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addCategory"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   userId    =    TestPropsValues . getUserId (  )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    userId )  ;", "return   AssetTagLocalServiceUtil . addTag ( userId ,    groupId ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addTag"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   userId    =    TestPropsValues . getUserId (  )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    userId )  ;", "return   AssetVocabularyLocalServiceUtil . addVocabulary ( userId ,    groupId ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addVocabulary"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "Locale   locale    =    LocaleUtil . getSiteDefault (  )  ;", "titleMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "AssetVocabularySettingsHelper   vocabularySettingsHelper    =    new   AssetVocabularySettingsHelper (  )  ;", "vocabularySettingsHelper . setClassNameIdsAndClassTypePKs ( new   long [  ]  {    classNameId    }  ,    new   long [  ]  {    classTypePK    }  ,    new   boolean [  ]  {    required    }  )  ;", "vocabularySettingsHelper . setMultiValued ( true )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    TestPropsValues . getUserId (  )  )  ;", "AssetVocabulary   vocabulary    =    AssetVocabularyServiceUtil . addVocabulary ( groupId ,    RandomTestUtil . randomString (  )  ,    titleMap ,    descriptionMap ,    vocabularySettingsHelper . toString (  )  ,    serviceContext )  ;", "return   vocabulary ;", "}", "METHOD_END"], "methodName": ["addVocabulary"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "_ name    =    PrincipalThreadLocal . getName (  )  ;", "group    =    GroupTestUtil . addGroup (  )  ;", "targetGroup    =    GroupTestUtil . addGroup (  )  ;", "try    {", "DLAppServiceUtil . deleteFolder ( group . getGroupId (  )  ,    DEFAULT _ PARENT _ FOLDER _ ID ,     \" Test   Folder \"  )  ;", "}    catch    ( NoSuchFolderException   nsfe )     {", "if    (  .  _ log . isDebugEnabled (  )  )     {", ".  _ log . debug ( nsfe ,    nsfe )  ;", "}", "}", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  ,    TestPropsValues . getUserId (  )  )  ;", "parentFolder    =    DLAppServiceUtil . addFolder ( group . getGroupId (  )  ,    DEFAULT _ PARENT _ FOLDER _ ID ,     \" Test   Folder \"  ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "RoleTestUtil . addResourcePermission ( GUEST ,    RESOURCE _ NAME ,    SCOPE _ GROUP ,    String . valueOf ( group . getGroupId (  )  )  ,    VIEW )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.documentlibrary.service.test.BaseDLAppTestCase"}, {"methodBody": ["METHOD_START", "{", "PrincipalThreadLocal . setName (  _ name )  ;", "RoleUtil . removeResourcePermission ( GUEST ,    RESOURCE _ NAME ,    SCOPE _ GROUP ,    String . valueOf ( group . getGroupId (  )  )  ,    VIEW )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.documentlibrary.service.test.BaseDLAppTestCase"}, {"methodBody": ["METHOD_START", "{", "String   versionLabel    =     \"  1  .  \"  ;", "for    ( int   i    =     1  ;    i    <  =    newVersionCount ;    i +  +  )     {", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     ( versionLabel    +    i )  ,     .  _ DATA _ VERSION _  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["addVersions"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "File   file    =    File . createTempFile (  \" DBStoreTest - testFile \"  ,    null )  ;", "try    ( OutputStream   outputStream    =    new   FileOutputStream ( file )  )     {", "outputStream . write ( fileData )  ;", "}", "return   file ;", "}", "METHOD_END"], "methodName": ["createFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "StoreFactory   storeFactory    =    StoreFactory . getInstance (  )  ;", "ServiceTrackerMap < String ,    List < StoreWrapper >  >    serviceTrackerMap    =    ReflectionTestUtil . getAndSetFieldValue ( storeFactory ,     \"  _ storeWrapperServiceTrackerMap \"  ,    new   ServiceTrackerMap < String ,    List < StoreWrapper >  >  (  )     {", "@ Override", "public   void   close (  )     {", "}", "@ Override", "public   boolean   containsKey ( String   key )     {", "return   false ;", "}", "@ Override", "public   List < StoreWrapper >    getService ( String   key )     {", "return   Collections . emptyList (  )  ;", "}", "@ Override", "public   Set < String >    keySet (  )     {", "return   Collections . emptySet (  )  ;", "}", "}  )  ;", "try    {", "store    =    storeFactory . getStore ( getype (  )  )  ;", "}    finally    {", "ReflectionTestUtil . setFieldValue ( storeFactory ,     \"  _ storeWrapperServiceTrackerMap \"  ,    serviceTrackerMap )  ;", "}", "companyId    =    RandomTestUtil . nextLong (  )  ;", "repositoryId    =    RandomTestUtil . nextLong (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteDirectory ( companyId ,    repositoryId ,    SLASH )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   BufferedInputStream ( new   ByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithBufferedInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithByteArray"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   ByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithByteArrayInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  1  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    file )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  1  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   FileInputStream ( file )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithFileInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   UnsyncByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithUnsyncByteArrayInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . copyFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  2  \"  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  2  \"  )  )  ;", "Assert . assertArrayEquals (  .  _ DATA _ VERSION _  1  ,    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . copyFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersionDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . copyFileVersion ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersionNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "store . deleteDirectory ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 1  ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 2  ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteDirectory"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "store . deleteDirectory ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 1  ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 2  ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteDirectoryWithTwoLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . deleteFile ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . deleteFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFileWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . getFileAsBytes ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileAsBytesNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "try    ( InputStream   inputStream    =    store . getFileAsStream ( companyId ,    repositoryId ,    fileName )  )     {", "for    ( int   i    =     0  ;    i    <     (  .  _ DATA _ SIZE )  ;    i +  +  )     {", "Assert . assertEquals (  .  _ DATA _ VERSION _  1  [ i ]  ,     (  ( byte )     ( inputStream . read (  )  )  )  )  ;", "}", "Assert . assertEquals (  (  -  1  )  ,    inputStream . read (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetFileAsStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     5  )  ;", "try    ( InputStream   inputStream    =    store . getFileAsStream ( companyId ,    repositoryId ,    fileName ,     \"  1  .  5  \"  )  )     {", "for    ( int   i    =     0  ;    i    <     (  .  _ DATA _ SIZE )  ;    i +  +  )     {", "Assert . assertEquals (  .  _ DATA _ VERSION _  1  [ i ]  ,     (  ( byte )     ( inputStream . read (  )  )  )  )  ;", "}", "Assert . assertEquals (  (  -  1  )  ,    inputStream . read (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetFileAsStreamWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName 1     =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNames"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithDirectoryOneLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 3     =     (  ( RandomTestUtil . randomString (  )  )     +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 3  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    subdirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     1  ,    fileNames . length )  ;", "Assert . assertEquals ( fileName 2  ,    fileNames [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithDirectoryTwoLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String [  ]    fileNames    =    getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     0  ,    fileNames . length )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithInvalidDirectory"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     0  ,    fileNames . length )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithInvalidRepository"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithTwoLevelsDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "long   size    =    store . getFileSize ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertEquals (  .  _ DATA _ SIZE ,    size )  ;", "}", "METHOD_END"], "methodName": ["testGetFileSize"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . getFileSize ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileSizeNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileVersionAsBytesNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "}", "METHOD_END"], "methodName": ["testHasFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     5  )  ;", "String   versionLabel    =     \"  1  .  \"  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     ( versionLabel    +    i )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHasFileWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLogFailedDeletion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    VERSION _ DEFAULT )  ;", "}", "METHOD_END"], "methodName": ["testLogFailedDeletionWithVersionLabel"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "Assert . assertArrayEquals (  .  _ DATA _ VERSION _  1  ,    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFileVersion ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    VERSION _ DEFAULT ,    VERSION _ DEFAULT )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     2  )  ;", "String   newFileName    =    RandomTestUtil . randomString (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    newFileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  0  \"  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  1  \"  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionWithNewFileName"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,     .  _ DATA _ VERSION _  2  )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithByteArray"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  2  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,    file )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,    new   ByteArrayInputStream (  .  _ DATA _ VERSION _  2  )  )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "String   newFileName    =    RandomTestUtil . randomString (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    newFileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileName"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileNameDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileNameNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "long   newRepositoryId    =    RandomTestUtil . nextLong (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    newRepositoryId ,    fileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    newRepositoryId ,    fileName )  )  ;", "store . deleteDirectory ( companyId ,    newRepositoryId ,    SLASH )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryId"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    repositoryId ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryIdDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFile ( companyId ,    repositoryId ,    RandomTestUtil . nextLong (  )  ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryIdNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   workflowEnabled    =    WorkflowThreadLocal . isEnabled (  )  ;", "try    {", "WorkflowThreadLocal . setEnabled ( true )  ;", "serviceContext    =     (  ( ServiceContext )     ( serviceContext . clone (  )  )  )  ;", "serviceContext . setWorkflowAction ( ACTION _ SAVE _ DRAFT )  ;", "FileEntry   fileEntry    =    DLAppLocalServiceUtil . addFileEntry ( userId ,    groupId ,    folderId ,    sourceFileName ,    TEXT _ PLAIN ,    title ,    BLANK ,    BLANK ,    RandomTestUtil . randomBytes ( INSTANCE )  ,    serviceContext )  ;", "if    ( approved )     {", "return    . updateStatus ( fileEntry ,    serviceContext )  ;", "}", "return   fileEntry ;", "}    finally    {", "WorkflowThreadLocal . setEnabled ( workflowEnabled )  ;", "}", "}", "METHOD_END"], "methodName": ["addFileEntryWithWorkflow"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "serviceContext . setAttribute (  \" entryURL \"  ,     \" http :  /  / localhost \"  )  ;", "if    ( Validator . isNotNull ( command )  )     {", "serviceContext . setCommand ( command )  ;", "}", "serviceContext . setLayoutFullURL (  \" http :  /  / localhost \"  )  ;", "}", "METHOD_END"], "methodName": ["populateNotificationsServiceContext"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( fileEntryTypeId    !  =     ( DLFileEntryTypeConstants . FILE _ ENTRY _ TYPE _ ID _ ALL )  )     {", "serviceContext . setAttribute (  \" fileEntryTypeId \"  ,    fileEntryTypeId )  ;", "}", "serviceContext . setLayoutFullURL (  \" http :  /  / localhost \"  )  ;", "}", "METHOD_END"], "methodName": ["populateServiceContext"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    workflowContext    =    new   HashMap <  >  (  )  ;", "workflowContext . put ( CONTEXT _ URL ,     \" http :  /  / localhost \"  )  ;", "workflowContext . put (  \" event \"  ,    EVENT _ ADD )  ;", "DLFileEntryLocalServiceUtil . updateStatus ( TestPropsValues . getUserId (  )  ,    fileEntry . getFileVersion (  )  . getFileVersionId (  )  ,    STATUS _ APPROVED ,    serviceContext ,    workflowContext )  ;", "return   LocalServiceUtil . getFileEntry ( fileEntry . getFileEntryId (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateStatus"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "DLFolder   dlFolder    =    DLFolderLocalServiceUtil . fetchDLFolder ( dlFolderId )  ;", "byte [  ]    bytes    =    Random . randomBytes ( INSTANCE )  ;", "InputStream   is    =    new   ByteArrayInputStream ( bytes )  ;", "ServiceContext   serviceContext    =    ServiceContext . getServiceContext ( dlFolder . getGroupId (  )  )  ;", "return   DLFileEntryLocalServiceUtil . addFileEntry ( TestPropsValues . getUserId (  )  ,    dlFolder . getGroupId (  )  ,    dlFolder . getRepositoryId (  )  ,    dlFolder . getFolderId (  )  ,    Random . randomString (  )  ,    TEXT _ PLAIN ,    Random . randomString (  )  ,    BLANK ,    BLANK ,    FILE _ ENTRY _ TYPE _ ID _ BASIC _ DOCUMENT ,    null ,    null ,    is ,    bytes . length ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFileEntry"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "return    . addDLFolder ( groupId ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DLTestUtil . addDLFolder ( groupId ,    DEFAULT _ PARENT _ FOLDER _ ID ,    deleteExisting ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DLTestUtil . addDLFolder ( groupId ,    true ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   name    =    RandomTestUtil . randomString (  )  ;", "if    ( deleteExisting )     {", "try    {", "DLFolder   folder    =    DLFolderLocalServiceUtil . getFolder ( groupId ,    parentFolderId ,    name )  ;", "DLFolderLocalServiceUtil . deleteFolder ( folder . getFolderId (  )  )  ;", "}    catch    ( NoSuchFolderException   nsfe )     {", "}", "}", "return   DLFolderLocalServiceUtil . addFolder ( TestPropsValues . getUserId (  )  ,    groupId ,    groupId ,    false ,    parentFolderId ,    name ,    BLANK ,    false ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "UserNotificationDeliveryLocalServiceUtil . deleteUserNotificationDeliveries ( user . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["deleteUserNotificationDeliveries"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationEvent >    userNotificationEvents    =    UserNotificationEventLocalServiceUtil . getUserNotificationEvents ( userId )  ;", "for    ( UserNotificationEvent   userNotificationEvent    :    userNotificationEvents )     {", "UserNotificationEventLocalServiceUtil . deletEvent ( userNotificationEvent )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteUserNotificationEvents"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationDelivery >    userNotificationDeliveries    =    new   ArrayList <  >  (  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ EMAIL ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ WEBSITE ,    true )  )  ;", "return   userNotificationDeliveries ;", "}", "METHOD_END"], "methodName": ["getUserNotificationDeliveries"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationEvent >    userNotificationEvents    =    UserNotificationEventLocalServiceUtil . getUserNotificationEvents ( userId )  ;", "List < JSONObject >    userNotificationEventJSONObjects    =    new   ArrayList ( userNotificationEvents . size (  )  )  ;", "for    ( UserNotificationEvent   userNotificationEvent    :    userNotificationEvents )     {", "JSONObject   userNotificationEventJSONObject    =    JSONFactoryUtil . createJSONObject ( userNotificationEvent . getPayload (  )  )  ;", "userNotificationEventJSONObjects . add ( userNotificationEventJSONObject )  ;", "}", "return   userNotificationEventJSONObjects ;", "}", "METHOD_END"], "methodName": ["getUserNotificationEventsJSONObjects"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classPK    =    userNotificationEventJSONObject . getLong (  \" classPK \"  )  ;", "if    ( classPK    !  =    primaryKey )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidUserNotificationEventObject"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "user    =    UserTestUtil . addOmniAdminUser (  )  ;", "group    =    GroupTestUtil . addGroup (  )  ;", "addContainerModel (  )  ;", "userNotificationDeliveries    =    getDeliveries ( user . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "deleteUserNotificationEvents ( user . getUserId (  )  )  ;", "deleteUserNotificationDeliveries (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidEventObject (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "Assert . assertEquals ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAddUserNotification"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidUserNotificationEventObject (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "Assert . assertEquals ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenEmailNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatsDelivery ( false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenWebsiteNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "int   notificationType    =     -  1  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidEventObject (  (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "notificationType    =    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  ;", "Assert . assertEquals ( notificationType ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY )  ;", "}", "}", "METHOD_END"], "methodName": ["testUpdateUserNotification"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "int   notificationType    =     -  1  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidUserNotificationEventObject (  (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "notificationType    =    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  ;", "Assert . assertEquals ( notificationType ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY )  ;", "}", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenEmailNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationsDelivery ( false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenWebsiteNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   exists    =    false ;", "for    ( UserNotificationDelivery   userNotificationDelivery    :    userNotificationDeliveries )     {", "if    (  (  ( userNotificationDelivery . getNotificationType (  )  )     !  =    notificationType )     |  |     (  ( userNotificationDelivery . getDeliveryType (  )  )     !  =    deliveryType )  )     {", "continue ;", "}", "UserNotificationDeliveryLocalServiceUtil . updatDelivery ( userNotificationDelivery . getUserNotificationDeliveryId (  )  ,    deliver )  ;", "exists    =    true ;", "break ;", "}", "Assert . assertTrue (  \" User   notification   does   not   exist \"  ,    exists )  ;", "}", "METHOD_END"], "methodName": ["updateUserNotificationDelivery"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( UserNotificationDelivery   userNotificationDelivery    :    userNotificationDeliveries )     {", "UserNotificationDeliveryLocalServiceUtil . updatDelivery ( userNotificationDelivery . getUserNotificationDeliveryId (  )  ,    deliver )  ;", "}", "}", "METHOD_END"], "methodName": ["updateUserNotificationsDelivery"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    getActivities (  )  ;", "Assert . assertFalse ( activities . toString (  )  ,    activities . isEmpty (  )  )  ;", "Map < String ,    String >    entryTitles    =    new   HashMap <  >  (  )  ;", "activityInterpreter    =    getActivityInterpreter (  )  ;", "for    ( SocialActivity   activity    :    activities )     {", "String   title    =    activity . getExtraDataValue (  \" title \"  ,    serviceContext . getLocale (  )  )  ;", "if    (  ( isSupportsRename ( activity . getClassName (  )  )  )     &  &     ( Validator . isNotNull ( title )  )  )     {", "if    (  ( activity . getCreateDate (  )  )     <    time )     {", "entryTitles . put ( activity . getClassName (  )  ,    title )  ;", "} else    {", "Assert . assertNotNull ( entryTitles . get ( activity . getClassName (  )  )  )  ;", "Assert . assertNotEquals ( entryTitles . get ( activity . getClassName (  )  )  ,    title )  ;", "}", "}", "if    (  ( hasClassName ( activityInterpreter ,    activity . getClassName (  )  )  )     &  &     ( hasActivityType ( activity . getType (  )  )  )  )     {", "SocialActivityFeedEntry   activityFeedEntry    =    activityInterpreter . interpret ( activity ,    serviceContext )  ;", "Assert . assertNotNull ( activityFeedEntry )  ;", "title    =    activityFeedEntry . getTitle (  )  ;", "Assert . assertFalse (  (  \" Title   contains   parameters :     \"     +    title )  ,    title . matches (  \"  \\  \\  {  \\  \\ d \\  \\  }  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkInterpret"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    getActivities (  )  ;", "Assert . assertFalse ( activities . toString (  )  ,    activities . isEmpty (  )  )  ;", "activityInterpreter    =    getActivityInterpreter (  )  ;", "for    ( SocialActivity   activity    :    activities )     {", "if    (  ( hasClassName ( activityInterpreter ,    activity . getClassName (  )  )  )     &  &     ( hasActivityType ( activity . getType (  )  )  )  )     {", "SocialActivityFeedEntry   activityFeedEntry    =    activityInterpreter . interpret ( activity ,    serviceContext )  ;", "PortletURL   portletURL    =    TrashUtil . getViewContentURL ( serviceContext . getRequest (  )  ,    activity . getClassName (  )  ,    activity . getClassPK (  )  )  ;", "if    (  ( Validator . isNull ( activityFeedEntry . getLink (  )  )  )     &  &     ( portletURL    =  =    null )  )     {", "continue ;", "}", "Assert . assertEquals ( portletURL . toString (  )  ,    activityFeedEntry . getLink (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkLinks"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    new   ArrayList ( SocialActivityLocalServiceUtil . getGroupActivities ( group . getGroupId (  )  ,    ALL _ POS ,    ALL _ POS )  )  ;", "Collections . reverse ( activities )  ;", "return   activities ;", "}", "METHOD_END"], "methodName": ["getActivities"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "Collection <  >    socialActivityInterpreters    =    registry . getServices (  . class ,     (  (  \"  ( name =  \"     +    portletId )     +     \"  )  \"  )  )  ;", "for    (    socialActivityInterpreter    :    socialActivityInterpreters )     {", "if    ( ArrayUtil . contains ( socialActivityInterpreter . getClassNames (  )  ,    className )  )     {", "return   socialActivityInterpreter ;", "}", "}", "throw   new   IllegalStateException (  (  \" No   activity   interpreter   found   for   class    \"     +    className )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getActivityInterpreter"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( int   curActivityType    :    getActivityTypes (  )  )     {", "if    ( curActivityType    =  =    activityType )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasActivityType"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( String   curClassName    :    activityInterpreter . getClassNames (  )  )     {", "if    ( curClassName . equals ( className )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasClassName"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isSupportsRename"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isSupportsTrash"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( COMPANY _ ID ,    TestPropsValues . getCompanyId (  )  )  ;", "request . setAttribute ( CURRENT _ URL ,     \" http :  /  / localhost :  8  0  / web / guest / home \"  )  ;", "request . setAttribute ( USER ,    TestPropsValues . getUser (  )  )  ;", "ServicePreAction   servicePreAction    =    new   ServicePreAction (  )  ;", "ThemeDisplay   themeDisplay    =    servicePreAction . initThemeDisplay ( request ,    new   MockHttpServletResponse (  )  )  ;", "request . setAttribute ( THEME _ DISPLAY ,    themeDisplay )  ;", "serviceContext    =    ServiceContextFactory . getInstance ( request )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "addActivities (  )  ;", "long   time    =    System . currentTimeMillis (  )  ;", "renameModels (  )  ;", "if    ( isSupportsTrash (  )  )     {", "moveModelsToTrash (  )  ;", "checkLinks (  )  ;", "restoreModelsFromTrash (  )  ;", "}", "check ( time )  ;", "}", "METHOD_END"], "methodName": ["testActivityInterpreter"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isSubscriptionForAuthorEnabled"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addSubscription ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "if    ( isSubscriptionForAuthorEnabled (  )  )     {", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "} else    {", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSubscriptionForAuthorWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addSubscription ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "if    ( isSubscriptionForAuthorEnabled (  )  )     {", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "} else    {", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSubscriptionForAuthorWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( baseModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( baseModelId )  ;", "removeContainerModelResourceViewPermission (  )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInNoViewableContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( baseModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classTypeId    =    addClassType (  )  ;", "add ( classTypeId )  ;", "addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionClassTypeWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classTypeId    =    addClassType (  )  ;", "long   baseModelId    =    addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "add ( classTypeId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionClassTypeWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "Long   classTypeId    =    getDefaultClassTypeId (  )  ;", "addSubscriptionClassType ( classTypeId )  ;", "addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "delet ( classTypeId )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionDefaultClassTypeWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "Long   classTypeId    =    getDefaultClassTypeId (  )  ;", "long   baseModelId    =    addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "addSubscriptionClassType ( classTypeId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "delet ( classTypeId )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionDefaultClassTypeWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ;", "}", "METHOD_END"], "methodName": ["getDefaultContainerModelId"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Settings   settings    =    SettingsFactoryUtil . getSettings ( new   com . liferay . portal . kernel . settings . GroupServiceSettingsLocator ( group . getGroupId (  )  ,    getServiceName (  )  )  )  ;", "ModifiableSettings   modifiableSettings    =    settings . getModifiableSettings (  )  ;", "for    ( Map . Entry < Locale ,    String >    localizedContent    :    localizedContents . entrySet (  )  )     {", "Locale   locale    =    localizedContent . getKey (  )  ;", "String   subscriptionBodyPreferencesKey    =    LocalizationUtil . getLocalizedName ( bodyPreferenceName ,    LocaleUtil . toLanguageId ( locale )  )  ;", "String   content    =    localizedContent . getValue (  )  ;", "modifiableSettings . setValue ( subscriptionBodyPreferencesKey ,    content )  ;", "}", "modifiableSettings . store (  )  ;", "}", "METHOD_END"], "methodName": ["setBaseModelSubscriptionBodyPreferences"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "LocaleThreadLocal . setDefaultLocale ( defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    previousLocalizedContents    =    new   HashMap <  >  (  )  ;", "previousLocalizedContents . putAll ( localizedContents )  ;", "localizedContents . put ( GERMANY ,     . GERMAN _ BODY )  ;", "setBaseModelSubscriptionBodyPreferences ( getSubscriptionAddedBodyPreferenceName (  )  )  ;", "addSubscriptionContainerModel ( getDefaultContainerModelId (  )  )  ;", "LocaleThreadLocal . setDefaultLocale ( GERMANY )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    getDefaultContainerModelId (  )  )  ;", "List < MailMessage >    messages    =    MailServiceTestUtil . getMailMessages (  \" Body \"  ,     . GERMAN _ BODY )  ;", "Assert . assertEquals ( messages . toString (  )  ,     1  ,    messages . size (  )  )  ;", "localizedContents    =    previousLocalizedContents ;", "}", "METHOD_END"], "methodName": ["testSubscriptionLocalizedContentWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    previousLocalizedContents    =    new   HashMap <  >  (  )  ;", "previousLocalizedContents . putAll ( localizedContents )  ;", "localizedContents . put ( SPAIN ,     . SPANISH _ BODY )  ;", "setBaseModelSubscriptionBodyPreferences ( getSubscriptionUpdatedBodyPreferenceName (  )  )  ;", "LocaleThreadLocal . setDefaultLocale ( SPAIN )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    getDefaultContainerModelId (  )  )  ;", "addSubscriptionContainerModel ( getDefaultContainerModelId (  )  )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "List < MailMessage >    messages    =    MailServiceTestUtil . getMailMessages (  \" Body \"  ,     . SPANISH _ BODY )  ;", "Assert . assertEquals ( messages . toString (  )  ,     1  ,    messages . size (  )  )  ;", "localizedContents    =    previousLocalizedContents ;", "}", "METHOD_END"], "methodName": ["testSubscriptionLocalizedContentWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["addBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["addContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "user    =    UserTestUtil . addGroupUser ( group ,    SITE _ MEMBER )  ;", "creatorUser    =    UserTestUtil . addGroupUser ( group ,    SITE _ MEMBER )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}]