[{"methodBody": ["METHOD_START", "{", "_ afterCallables . put ( method ,    callable )  ;", "}", "METHOD_END"], "methodName": ["putAfterCallable"], "fileName": "com.liferay.portal.kernel.concurrent.test.MappedMethodCallableInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "_ beforeCallables . put ( method ,    callable )  ;", "}", "METHOD_END"], "methodName": ["putBeforeCallable"], "fileName": "com.liferay.portal.kernel.concurrent.test.MappedMethodCallableInvocationHandler"}, {"methodBody": ["METHOD_START", "{", "return    _ runThread ;", "}", "METHOD_END"], "methodName": ["getRunThread"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "return    _ ended ;", "}", "METHOD_END"], "methodName": ["isEnded"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "return    _ interrupted ;", "}", "METHOD_END"], "methodName": ["isInterrupted"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "return    _ started ;", "}", "METHOD_END"], "methodName": ["isStarted"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "_ blockingLatch . countDown (  )  ;", "}", "METHOD_END"], "methodName": ["unBlock"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "if    (  !  (  _ blocking )  )     {", "throw   new   IllegalStateException (  \"    is   not   enabled \"  )  ;", "}", "_ waitLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilBlock"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "_ endedLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilEnded"], "fileName": "com.liferay.portal.kernel.concurrent.test.MarkerBlockingJob"}, {"methodBody": ["METHOD_START", "{", "TestUtil . closePool ( threadPoolExecutor ,    false )  ;", "}", "METHOD_END"], "methodName": ["closePool"], "fileName": "com.liferay.portal.kernel.concurrent.test.TestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( force )     {", "threadPoolExecutor . shutdownNow (  )  ;", "} else    {", "threadPoolExecutor . shutdown (  )  ;", "}", "if    (  !  ( threadPoolExecutor . awaitTermination (  . LONG _ WAIT ,    TimeUnit . MILLISECONDS )  )  )     {", "throw   new   IllegalStateException (  )  ;", "}", "if    (  !  ( threadPoolExecutor . isTerminated (  )  )  )     {", "throw   new   IllegalStateException (  )  ;", "}", "}    catch    ( InterruptedException   ie )     {", "throw   new   RuntimeException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["closePool"], "fileName": "com.liferay.portal.kernel.concurrent.test.TestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( MarkerBlockingJob   markerBlockingJob    :    markerBlockingJobs )     {", "markerBlockingJob . unBlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["unblock"], "fileName": "com.liferay.portal.kernel.concurrent.test.TestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( MarkerBlockingJob   markerBlockingJob    :    markerBlockingJobs )     {", "markerBlockingJob . waitUntilBlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitUntilBlock"], "fileName": "com.liferay.portal.kernel.concurrent.test.TestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( MarkerBlockingJob   markerBlockingJob    :    markerBlockingJobs )     {", "markerBlockingJob . waitUntilEnded (  )  ;", "}", "Thread . sleep (  . SHORT _ WAIT )  ;", "}", "METHOD_END"], "methodName": ["waitUntilEnded"], "fileName": "com.liferay.portal.kernel.concurrent.test.TestUtil"}, {"methodBody": ["METHOD_START", "{", "return   JSONObjectUtil . toOrderedJSONString ( jsonObject . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["toOrderedJSONString"], "fileName": "com.liferay.portal.kernel.json.JSONObjectUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "jsonObject    =    new    ( jsonString )     {", "@ Override", "@ SuppressWarnings (  \" rawtypes \"  )", "public   Iterator   keys (  )     {", "Iterator <  ?  >    iterator    =    super . keys (  )  ;", "List < Object >    list    =    new   ArrayList ( length (  )  )  ;", "while    ( iterator . hasNext (  )  )     {", "list . add ( iterator . next (  )  )  ;", "}", "Collections . sort ( list ,    new   Comparator < Object >  (  )     {", "@ Override", "public   int   compare ( Object   object 1  ,    Object   object 2  )     {", "String   string 1     =    object 1  . toString (  )  ;", "return   string 1  . compareTo ( object 2  . toString (  )  )  ;", "}", "}  )  ;", "return   list . iterator (  )  ;", "}", "}  ;", "return   jsonObject . toString (  )  ;", "}    catch    ( JSONException   jsone )     {", "return   ReflectionUtil . throwException ( jsone )  ;", "}", "}", "METHOD_END"], "methodName": ["toOrderedJSONString"], "fileName": "com.liferay.portal.kernel.json.JSONObjectUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    map    =    new   HashMap <  >  (  )  ;", "map . put ( LocaleUtil . getSiteDefault (  )  ,    value )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["getDefaultLocaleMap"], "fileName": "com.liferay.portal.kernel.locale.test.LocaleTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( path   instanceof   PathWrapper )     {", "PathWrapper   pathWrapper    =     (  ( PathWrapper )     ( path )  )  ;", "path    =    pathWrapper .  _ path ;", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["unwrapPath"], "fileName": "com.liferay.portal.kernel.nio.PathWrapper"}, {"methodBody": ["METHOD_START", "{", "if    ( path    =  =    null )     {", "return   null ;", "}", "return   new    ( path ,    fileSystem )  ;", "}", "METHOD_END"], "methodName": ["wrapPath"], "fileName": "com.liferay.portal.kernel.nio.PathWrapper"}, {"methodBody": ["METHOD_START", "{", "baseIntraband . addResponseWaitingDatagram ( datagram )  ;", "}", "METHOD_END"], "methodName": ["addResponseWaitingDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.BaseIntrabandHelper"}, {"methodBody": ["METHOD_START", "{", "return   Datagram . createACKResponseDatagram ( sequenceId )  ;", "}", "METHOD_END"], "methodName": ["createACKResponseDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   Datagram . createReceiveDatagram (  )  ;", "}", "METHOD_END"], "methodName": ["createReceiveDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . attachment ;", "}", "METHOD_END"], "methodName": ["getAttachment"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . completionHandler ;", "}", "METHOD_END"], "methodName": ["getCompletionHandler"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . completionTypes ;", "}", "METHOD_END"], "methodName": ["getCompletionTypes"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . getSequenceId (  )  ;", "}", "METHOD_END"], "methodName": ["getSequenceId"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . isAckResponse (  )  ;", "}", "METHOD_END"], "methodName": ["isAckResponse"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "return   datagram . readFrom ( scatteringByteChannel )  ;", "}", "METHOD_END"], "methodName": ["readFrom"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . setAckRequest ( true )  ;", "}", "METHOD_END"], "methodName": ["setAckRequest"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . attachment    =    attachment ;", "}", "METHOD_END"], "methodName": ["setAttachment"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . completionHandler    =    completionHandler ;", "}", "METHOD_END"], "methodName": ["setCompletionHandler"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . completionTypes    =    completionTypes ;", "}", "METHOD_END"], "methodName": ["setCompletionTypes"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . setSequenceId ( sequenceId )  ;", "}", "METHOD_END"], "methodName": ["setSequenceId"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "datagram . timeout    =    timeout ;", "}", "METHOD_END"], "methodName": ["setTimeout"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "while    (  !  ( datagram . writeTo ( gatheringByteChannel )  )  )  ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "com.liferay.portal.kernel.nio.intraband.DatagramHelper"}, {"methodBody": ["METHOD_START", "{", "String   message    =    logRecord . getMessage (  )  ;", "Assert . assertTrue ( message . startsWith ( messagePrefix )  )  ;", "}", "METHOD_END"], "methodName": ["assertMessageStartWith"], "fileName": "com.liferay.portal.kernel.nio.intraband.IntrabandTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( T )     ( ProxyUtil . newProxyInstance ( IntrabandTestUtil . class . getClassLoader (  )  ,    interfaces ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "throw   new   UnsupportedOperationException (  )  ;", "}", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "com.liferay.portal.kernel.nio.intraband.IntrabandTestUtil"}, {"methodBody": ["METHOD_START", "{", "SocketChannel   clientPeerSocketChannel    =    null ;", "SocketChannel   serverPeerSocketChannel    =    null ;", "try    ( ServerSocketChannel   serverSocketChannel    =    SocketUtil . createServerSocketChannel ( InetAddress . getLocalHost (  )  ,     1  5  2  3  8  ,     .  _ serverSocketConfigurator )  )     {", "ServerSocket   serverSocket    =    serverSocketChannel . socket (  )  ;", "clientPeerSocketChannel    =    SocketChannel . open ( new   InetSocketAddress ( InetAddress . getLocalHost (  )  ,    serverSocket . getLocalPort (  )  )  )  ;", "serverPeerSocketChannel    =    serverSocketChannel . accept (  )  ;", "}", "SocketChannel [  ]    socketChannels    =    new   SocketChannel [  2  ]  ;", "socketChannels [  0  ]     =    serverPeerSocketChannel ;", "socketChannels [  1  ]     =    clientPeerSocketChannel ;", "return   socketChannels ;", "}", "METHOD_END"], "methodName": ["createSocketChannelPeers"], "fileName": "com.liferay.portal.kernel.nio.intraband.IntrabandTestUtil"}, {"methodBody": ["METHOD_START", "{", "Datagram   datagram    =    DatagramHelper . createReceiveDatagram (  )  ;", "while    (  !  ( DatagramHelper . readFrom ( datagram ,    scatteringByteChan )  )  )  ;", "return   datagram ;", "}", "METHOD_END"], "methodName": ["readDatagramFully"], "fileName": "com.liferay.portal.kernel.nio.intraband.IntrabandTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ attachment ;", "}", "METHOD_END"], "methodName": ["getAttachment"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "return    _ ioe ;", "}", "METHOD_END"], "methodName": ["getIOException"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "_ deliveredCountDownLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilDelivered"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "_ failedCountDownLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilFailed"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "_ repliedCountDownLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilReplied"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "_ submittedCountDownLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilSubmitted"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "_ timeoutedCountDownLatch . await (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilTimeouted"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "while    (  !  (  _ timeoutedCountDownLatch . await (  1  0  ,    TimeUnit . MILLISECONDS )  )  )     {", "selector . wakeup (  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitUntilTimeouted"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordCompletionHandler"}, {"methodBody": ["METHOD_START", "{", "return    _ datagram ;", "}", "METHOD_END"], "methodName": ["getReceiveDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.RecordDatagramReceiveHandler"}, {"methodBody": ["METHOD_START", "{", "return    _ datagram ;", "}", "METHOD_END"], "methodName": ["getDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockIntraband"}, {"methodBody": ["METHOD_START", "{", "return    _ registrationReference ;", "}", "METHOD_END"], "methodName": ["getRegistrationReference"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockIntraband"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["processDatagram"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockIntraband"}, {"methodBody": ["METHOD_START", "{", "_ ioException    =    ioException ;", "}", "METHOD_END"], "methodName": ["setIOException"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockIntraband"}, {"methodBody": ["METHOD_START", "{", "return    _ gatheringByteChannel ;", "}", "METHOD_END"], "methodName": ["getGatheringByteChannel"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockRegistrationReference"}, {"methodBody": ["METHOD_START", "{", "return    _ scatteringByteChannel ;", "}", "METHOD_END"], "methodName": ["getScatteringByteChannel"], "fileName": "com.liferay.portal.kernel.nio.intraband.test.MockRegistrationReference"}, {"methodBody": ["METHOD_START", "{", "Random   random    =    new   Random (  )  ;", "final   byte [  ]    data    =    new   byte [  1  0  2  4     *     1  0  2  4  ]  ;", "random . nextBytes ( data )  ;", "FutureTask < Void >    writeFutureTask    =    new   FutureTask < Void >  ( new   Callable < Void >  (  )     {", "@ Override", "public   Void   call (  )    throws   Exception    {", "ByteBuffer   byteBuffer    =    ByteBuffer . wrap ( data )  ;", "while    ( byteBuffer . hasRemaining (  )  )     {", "gatheringByteChanwrite ( byteBuffer )  ;", "}", "return   null ;", "}", "}  )  ;", "Thread   writeThread    =    new   Thread ( writeFutureTask )  ;", "writeThread . start (  )  ;", "FutureTask < byte [  ]  >    readFutureTask    =    new   FutureTask < byte [  ]  >  ( new   Callable < byte [  ]  >  (  )     {", "@ Override", "public   byte [  ]    call (  )    throws   Exception    {", "ByteBuffer   byteBuffer    =    ByteBuffer . allocate ( data . length )  ;", "while    ( byteBuffer . hasRemaining (  )  )     {", "scatteringByteChanread ( byteBuffer )  ;", "}", "return   byteBuffer . array (  )  ;", "}", "}  )  ;", "Thread   readThread    =    new   Thread ( readFutureTask )  ;", "readThread . start (  )  ;", "writeFutureTask . get (  )  ;", "Assert . assertArrayEquals ( data ,    readFutureTask . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertConnectted"], "fileName": "com.liferay.portal.kernel.nio.intraband.welder.test.WelderTestUtil"}, {"methodBody": ["METHOD_START", "{", "UnsyncByteArrayOutputStream   unsyncByteArrayOutputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "try    ( ObjectOutputStream   objectOutputStream    =    new   ObjectOutputStream ( unsyncByteArrayOutputStream )  )     {", "objectOutputStream . writeObject (  )  ;", "}", "ByteBuffer   byteBuffer    =    unsyncByteArrayOutputStream . unsafeGetByteBuffer (  )  ;", "UnsyncByteArrayInputStream   unsyncByteArrayInputStream    =    new   UnsyncByteArrayInputStream ( byteBuffer . array (  )  ,     0  ,    byteBuffer . remaining (  )  )  ;", "ObjectInputStream   objectInputStream    =    new   ObjectInputStream ( unsyncByteArrayInputStream )  ;", "return    (  ( T )     ( objectInputStream . readObject (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.liferay.portal.kernel.nio.intraband.welder.test.WelderTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    spiProviderContainers    =    ReflectionTestUtil . getFieldValue ( MPIHelperUtil . class ,     \"  _ spiProviderContainers \"  )  ;", "Object   spiProviderContainer    =    spiProviderContainers . get ( spi . getSPIProviderName (  )  )  ;", "Map < String ,    SPI >    spis    =    ReflectionTestUtil . getFieldValue ( spiProviderContainer ,     \"  _ spis \"  )  ;", "spis . put ( spiId ,    spi )  ;", "}", "METHOD_END"], "methodName": ["directResigterSPI"], "fileName": "com.liferay.portal.kernel.resiliency.mpi.MPIHelperUtilTestUtil"}, {"methodBody": ["METHOD_START", "{", "_ failOnDestroy    =    failOnDestroy ;", "}", "METHOD_END"], "methodName": ["setFailOnDestroy"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockRemoteSPI"}, {"methodBody": ["METHOD_START", "{", "_ failOnStop    =    failOnStop ;", "}", "METHOD_END"], "methodName": ["setFailOnStop"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockRemoteSPI"}, {"methodBody": ["METHOD_START", "{", "_ spiProviderName    =    spiProviderName ;", "}", "METHOD_END"], "methodName": ["setSpiProviderName"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockRemoteSPI"}, {"methodBody": ["METHOD_START", "{", "_ name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockSPIProvider"}, {"methodBody": ["METHOD_START", "{", "return    _ clientWelded ;", "}", "METHOD_END"], "methodName": ["isClientWelded"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockWelder"}, {"methodBody": ["METHOD_START", "{", "return   MockWelder .  _ SERVER _ WELDED ;", "}", "METHOD_END"], "methodName": ["isServerWelded"], "fileName": "com.liferay.portal.kernel.resiliency.spi.MockWelder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["setContentLengthLong"], "fileName": "com.liferay.portal.kernel.servlet.StubHttpServletResponse"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( expectedDouble ,    actualDouble ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertEquals"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "Assert . assertArrayEquals ( expectedArray ,    actualArray ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertEquals"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "try    ( InputStream   expectInputStream    =    expectedBlob . getBinaryStream (  )  ; InputStream   actualInputStream    =    actualBlob . getBinaryStream (  )  )     {", "while    ( true )     {", "int   expectValue    =    expectInputStream . read (  )  ;", "int   actualValue    =    actualInputStream . read (  )  ;", ". assertEquals ( expectValue ,    actualValue )  ;", "if    ( expectValue    =  =     (  -  1  )  )     {", "break ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["assertEquals"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  \" The   lists   have   different   sizes \"  ,    expectedList . size (  )  ,    actualList . size (  )  )  ;", "Assert . assertTrue ( expectedList . containsAll ( actualList )  )  ;", "}", "METHOD_END"], "methodName": ["assertEquals"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  \" The   maps   have   different   sizes \"  ,    expectedMap . size (  )  ,    actualMap . size (  )  )  ;", "for    ( String   name    :    expectedMap . keySet (  )  )     {", "Assert . assertEquals (  (  (  \" The   values   for   key    '  \"     +    name )     +     \"  '    are   different \"  )  ,    MapUtil . getString ( expectedMap ,    name )  ,    MapUtil . getString ( actualMap ,    name )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertEquals"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( expectedString    !  =    null )     {", "expectedString    =    StringUtil . toLowerCase ( expectedString )  ;", "}", "if    ( actualString    !  =    null )     {", "actualString    =    StringUtil . toLowerCase ( actualString )  ;", "}", ". assertEquals ( expectedString ,    actualString )  ;", "}", "METHOD_END"], "methodName": ["assertEqualsIgnoreCase"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( expectedStringArray    !  =    null )     {", "Arrays . sort ( expectedStringArray )  ;", "}", "if    ( actualStringArray    !  =    null )     {", "Arrays . sort ( actualStringArray )  ;", "}", ". assertEquals ( StringUtil . merge ( expectedStringArray )  ,    StringUtil . merge ( actualStringArray )  )  ;", "}", "METHOD_END"], "methodName": ["assertEqualsSorted"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( actualDouble    >    expectedDouble )     {", ". fail (  (  ( actualDouble    +     \"    is   not   less   than    \"  )     +    expectedDouble )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertLessThan"], "fileName": "com.liferay.portal.kernel.test.AssertUtils"}, {"methodBody": ["METHOD_START", "{", "return    _ logRecords ;", "}", "METHOD_END"], "methodName": ["getLogRecords"], "fileName": "com.liferay.portal.kernel.test.CaptureHandler"}, {"methodBody": ["METHOD_START", "{", "_ logRecords . clear (  )  ;", "_ logger . setLevel ( level )  ;", "ren    _ logRecords ;", "}", "METHOD_END"], "methodName": ["resetLogLevel"], "fileName": "com.liferay.portal.kernel.test.CaptureHandler"}, {"methodBody": ["METHOD_START", "{", "System . err . flush (  )  ;", "UnsyncByteArOutputStream   unsyncByteArOutputStream    =    new   UnsyncByteArOutputStream (  )  ;", "PrintStream   printStream    =    new   PrintStream ( unsyncByteArOutputStream )  ;", "System . setErr ( printStream )  ;", "return   unsyncByteArOutputStream ;", "}", "METHOD_END"], "methodName": ["hijackStdErr"], "fileName": "com.liferay.portal.kernel.test.ConsoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "System . out . flush (  )  ;", "UnsyncByteArOutputStream   unsyncByteArOutputStream    =    new   UnsyncByteArOutputStream (  )  ;", "PrintStream   printStream    =    new   PrintStream ( unsyncByteArOutputStream )  ;", "System . setOut ( printStream )  ;", "return   unsyncByteArOutputStream ;", "}", "METHOD_END"], "methodName": ["hijackStdOut"], "fileName": "com.liferay.portal.kernel.test.ConsoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "System . out . flush (  )  ;", "FileOutputStream   fileOutputStream    =    new   FileOutputStream ( FileDescriptor . err )  ;", "PrintStream   printStream    =    new   PrintStream ( fileOutputStream )  ;", "System . setErr ( printStream )  ;", "return   unsyncByteArOutputStream . toString ( DEFAULT _ CHARSET _ NAME )  ;", "}", "METHOD_END"], "methodName": ["restoreStdErr"], "fileName": "com.liferay.portal.kernel.test.ConsoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "System . out . flush (  )  ;", "FileOutputStream   fileOutputStream    =    new   FileOutputStream ( FileDescriptor . out )  ;", "PrintStream   printStream    =    new   PrintStream ( fileOutputStream )  ;", "System . setOut ( printStream )  ;", "return   unsyncByteArOutputStream . toString ( DEFAULT _ CHARSET _ NAME )  ;", "}", "METHOD_END"], "methodName": ["restoreStdOut"], "fileName": "com.liferay.portal.kernel.test.ConsoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Assume . assumeTrue ( FixedIssuesUtils . isIssueFixed ( issue )  )  ;", "}", "METHOD_END"], "methodName": ["assumeIssueIsFixed"], "fileName": "com.liferay.portal.kernel.test.FixedIssuesUtils"}, {"methodBody": ["METHOD_START", "{", "Assume . assumeFalse ( FixedIssuesUtils . isIssueFixed ( issue )  )  ;", "}", "METHOD_END"], "methodName": ["assumeIssueIsNotFixed"], "fileName": "com.liferay.portal.kernel.test.FixedIssuesUtils"}, {"methodBody": ["METHOD_START", "{", "return   ArrayUtil . contains ( FixedIssuesUtils .  _ instance .  _ fixedIssues ,    issue )  ;", "}", "METHOD_END"], "methodName": ["isIssueFixed"], "fileName": "com.liferay.portal.kernel.test.FixedIssuesUtils"}, {"methodBody": ["METHOD_START", "{", "ReferenceQueue < Object >    referenceQueue    =    new   ReferenceQueue <  >  (  )  ;", "SoftReference < Object >    softReference    =    new   SoftReference <  >  ( new   Object (  )  ,    referenceQueue )  ;", "List < byte [  ]  >    list    =    new   ArrayList <  >  (  )  ;", "while    ( true )     {", "try    {", "list . add ( new   byte [  (  1  0  0     *     1  0  2  4  )     *     1  0  2  4  ]  )  ;", "}    catch    ( OutOfMemoryError   oome )     {", "list . clear (  )  ;", "list    =    null ;", "break ;", "}", "}", "Assert . assertNull ( softReference . get (  )  )  ;", "Assert . assertSame ( softReference ,    referenceQueue . remove (  )  )  ;", "if    ( ensureEnqueuedReferences )     {", ". fullGC ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["fullGC"], "fileName": "com.liferay.portal.kernel.test.GCUtil"}, {"methodBody": ["METHOD_START", "{", "GCUtil . gc ( true ,    ensureEnqueuedReferences )  ;", "}", "METHOD_END"], "methodName": ["gc"], "fileName": "com.liferay.portal.kernel.test.GCUtil"}, {"methodBody": ["METHOD_START", "{", "ReferenceQueue < Object >    referenceQueue    =    new   ReferenceQueue <  >  (  )  ;", "WeakReference < Object >    weakReference    =    new   WeakReference <  >  ( new   Object (  )  ,    referenceQueue )  ;", "if    ( actively )     {", "while    (  ( weakReference . get (  )  )     !  =    null )     {", "System . gc (  )  ;", "System . runFinalization (  )  ;", "}", "}", "Assert . assertSame ( weakReference ,    referenceQueue . remove (  )  )  ;", "if    ( ensureEnqueuedReferences )     {", ". gc ( actively ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["gc"], "fileName": "com.liferay.portal.kernel.test.GCUtil"}, {"methodBody": ["METHOD_START", "{", "LogWrapper   logWrapper    =     (  ( LogWrapper )     ( LogFactoryUtil . getLog ( name )  )  )  ;", "Log   log    =    logWrapper . getWrappedLog (  )  ;", "if    (  !  ( log   instanceof   Jdk 1  4 LogImpl )  )     {", "throw   new   IllegalStateException (  (  (  \" Log    \"     +    name )     +     \"    is   not   a   JDK   logger \"  )  )  ;", "}", "Jdk 1  4 LogImpl   jdk 1  4 LogImpl    =     (  ( Jdk 1  4 LogImpl )     ( log )  )  ;", "logger    =    jdk 1  4 LogImpl . getWrapped (  )  ;", "CaptureHandler   captureHandler    =    new   CaptureHandler ( logger ,    level )  ;", "logger . addHandler ( captureHandler )  ;", "return   captureHandler ;", "}", "METHOD_END"], "methodName": ["configureJDKLogger"], "fileName": "com.liferay.portal.kernel.test.JDKLoggerTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   name    =    method . getName (  )  ;", "Class <  ?  >  [  ]    parametTypes    =    method . getParametTypes (  )  ;", "bridge    :    for    ( Method   currentMethod    :    methods )     {", "if    (  (  !  ( currentMethod . isBridge (  )  )  )     |  |     (  !  ( name . equals ( currentMethod . getName (  )  )  )  )  )     {", "continue ;", "}", "Class <  ?  >  [  ]    currentParametTypes    =    currentMethod . getParametTypes (  )  ;", "if    (  ( currentParametTypes . length )     !  =     ( parametTypes . length )  )     {", "continue ;", "}", "for    ( int   i    =     0  ;    i    <     ( currentParametTypes . length )  ;    i +  +  )     {", "if    (  !  ( currentParametTypes [ i ]  . isAssignableFrom ( parametTypes [ i ]  )  )  )     {", "continue   bridge ;", "}", "}", "currentMethod . setAccessible ( true )  ;", "return   currentMethod ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["_findBridgeMethod"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( clazz ,    fieldName )  ;", "try    {", "T   t    =     (  ( T )     ( field . get ( null )  )  )  ;", "field . set ( null ,    newValue )  ;", "return   t ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getAndSetFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( instance . getClass (  )  ,    fieldName )  ;", "try    {", "T   t    =     (  ( T )     ( field . get ( instance )  )  )  ;", "field . set ( instance ,    newValue )  ;", "return   t ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getAndSetFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ReflectionTestUtil . getMethod ( clazz ,    methodName ,    parameterTypes )  ;", "if    ( method . isBridge (  )  )     {", "return   method ;", "}", "Method   bridgeMethod    =    ReflectionTestUtil .  _ findBridgeMethod ( clazz . getMethods (  )  ,    method )  ;", "if    ( bridgeMethod    !  =    null )     {", "return   bridgeMethod ;", "}", "while    ( clazz    !  =    null )     {", "bridgeMethod    =    ReflectionTestUtil .  _ findBridgeMethod ( clazz . getDeclaredMethods (  )  ,    method )  ;", "if    ( bridgeMethod    !  =    null )     {", "return   bridgeMethod ;", "}", "clazz    =    clazz . getSuperclass (  )  ;", "}", "return   ReflectionUtil . throwException ( new   NoSuchMethodException ( StringBundler . concat (  \" No   bridge   method   on    \"  ,    String . valueOf ( clazz )  ,     \"    with   name    \"  ,    methodName ,     \"    and   parameter   types    \"  ,    Arrays . toString ( parameterTypes )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getBridgeMethod"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "Field   field    =    clazz . getField ( fieldName )  ;", "field . setAccessible ( true )  ;", "Util . unfinalField ( field )  ;", "return   field ;", "}    catch    ( NoSuchFieldException   nsfe )     {", "}    catch    ( Exception   e )     {", "return   Util . throwException ( e )  ;", "}", "while    ( clazz    !  =    null )     {", "try    {", "Field   field    =    clazz . getDeclaredField ( fieldName )  ;", "field . setAccessible ( true )  ;", "Util . unfinalField ( field )  ;", "return   field ;", "}    catch    ( NoSuchFieldException   nsfe )     {", "clazz    =    clazz . getSuperclass (  )  ;", "}    catch    ( Exception   e )     {", "return   Util . throwException ( e )  ;", "}", "}", "return   Util . throwException ( new   NoSuchFieldException ( StringBundler . concat (  \" No   field   on    \"  ,    String . valueOf ( clazz )  ,     \"    with   name    \"  ,    fieldName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getField"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( clazz ,    fieldName )  ;", "try    {", "return    (  ( T )     ( field . get ( null )  )  )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( instance . getClass (  )  ,    fieldName )  ;", "try    {", "return    (  ( T )     ( field . get ( instance )  )  )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "Method   method    =    clazz . getMethod ( methodName ,    parameterTypes )  ;", "method . setAccessible ( true )  ;", "return   method ;", "}    catch    ( NoSuchMethodException   nsme )     {", "}", "while    ( clazz    !  =    null )     {", "try    {", "Method   method    =    clazz . getDeclaredMethod ( methodName ,    parameterTypes )  ;", "method . setAccessible ( true )  ;", "return   method ;", "}    catch    ( NoSuchMethodException   nsme )     {", "clazz    =    clazz . getSuperclass (  )  ;", "}", "}", "return   Util . throwException ( new   NoSuchMethodException ( StringBundler . concat (  \" No   method   on    \"  ,    String . valueOf ( clazz )  ,     \"    with   name    \"  ,    methodName ,     \"    and   parameter   types    \"  ,    Arrays . toString ( parameterTypes )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ReflectionTestUtil . getMethod ( clazz ,    methodName ,    parameterTypes )  ;", "try    {", "return    (  ( T )     ( method . invoke ( null ,    parameters )  )  )  ;", "}    catch    ( InvocationTargetException   ite )     {", "return   ReflectionUtil . throwException ( ite . getCause (  )  )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ReflectionTestUtil . getMethod ( instance . getClass (  )  ,    methodName ,    parameterTypes )  ;", "try    {", "return    (  ( T )     ( method . invoke ( instance ,    parameters )  )  )  ;", "}    catch    ( InvocationTargetException   ite )     {", "return   ReflectionUtil . throwException ( ite . getCause (  )  )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Method   method    =    ReflectionTestUtil . getBridgeMethod ( instance . getClass (  )  ,    methodName ,    parameterTypes )  ;", "try    {", "return    (  ( T )     ( method . invoke ( instance ,    parameters )  )  )  ;", "}    catch    ( InvocationTargetException   ite )     {", "return   ReflectionUtil . throwException ( ite . getCause (  )  )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["invokeBridge"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    null ;", "if    (  ( constructorParameterTypes    !  =    null )     &  &     (  ( constructorParameterTypes . length )     !  =     0  )  )     {", "parameterTypes    =    new   Class <  ?  >  [  ( constructorParameterTypes . length )     +     2  ]  ;", "parameterTypes [  0  ]     =    String . class ;", "parameterTypes [  1  ]     =    int . class ;", "System . arraycopy ( constructorParameterTypes ,     0  ,    parameterTypes ,     2  ,    constructorParameterTypes . length )  ;", "} else    {", "parameterTypes    =    new   Class <  ?  >  [  2  ]  ;", "parameterTypes [  0  ]     =    String . class ;", "parameterTypes [  1  ]     =    int . class ;", "}", "try    {", "Constructor < T >    constructor    =    enumClass . getDeclaredConstructor ( parameterTypes )  ;", "Method   acquireConstructorAccessorMethod    =    Util . getDeclaredMethod ( Constructor . class ,     \" acquireConstructorAccessor \"  )  ;", "acquireConstructorAccessorMethod . invoke ( constructor )  ;", "Field   constructorAccessorField    =    Util . getDeclaredField ( Constructor . class ,     \" constructorAccessor \"  )  ;", "Object   constructorAccessor    =    constructorAccessorField . get ( constructor )  ;", "Method   newInstanceMethod    =    Util . getDeclaredMethod ( constructorAccessor . getClass (  )  ,     \" newInstance \"  ,    Object [  ]  . class )  ;", "Object [  ]    parameters    =    null ;", "if    (  ( constructorParameters    !  =    null )     &  &     (  ( constructorParameters . length )     !  =     0  )  )     {", "parameters    =    new   Object [  ( constructorParameters . length )     +     2  ]  ;", "parameters [  0  ]     =    name ;", "parameters [  1  ]     =    ordinal ;", "System . arraycopy ( constructorParameters ,     0  ,    parameters ,     2  ,    constructorParameters . length )  ;", "} else    {", "parameters    =    new   Object [  2  ]  ;", "parameters [  0  ]     =    name ;", "parameters [  1  ]     =    ordinal ;", "}", "return    (  ( T )     ( newInstanceMethod . invoke ( constructorAccessor ,    new   Object [  ]  {    parameters    }  )  )  )  ;", "}    catch    ( Exception   e )     {", "return   Util . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["newEnumElement"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ReflectionTestUtil . newEnumElement ( enumClass ,    null ,    name ,    ordinal ,     (  ( Object [  ]  )     ( null )  )  )  ;", "}", "METHOD_END"], "methodName": ["newEnumElement"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( clazz ,    fieldName )  ;", "try    {", "field . set ( null ,    value )  ;", "}    catch    ( Exception   e )     {", "ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["setFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    ReflectionTestUtil . getField ( instance . getClass (  )  ,    fieldName )  ;", "try    {", "field . set ( instance ,    value )  ;", "}    catch    ( Exception   e )     {", "ReflectionUtil . throwException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["setFieldValue"], "fileName": "com.liferay.portal.kernel.test.ReflectionTestUtil"}, {"methodBody": ["METHOD_START", "{", "System . setSecurityManager ( this )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "com.liferay.portal.kernel.test.SwappableSecurityManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "join (  )  ;", "return    _ futureTask . get (  )  ;", "}    catch    (    t )     {", "return   ReflectionUtil . throwException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["sync"], "fileName": "com.liferay.portal.kernel.test.SyncThrowableThread"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( AutoBalanceTestCase . testClassGroupIndex )     >  =     0  )     &  &     (  ( AutoBalanceTestCase . testClassGroupsSize )     >     0  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isCIMode"], "fileName": "com.liferay.portal.kernel.test.ci.AutoBalanceTestCase"}, {"methodBody": ["METHOD_START", "{", "AutoBalanceTestCase . testClassGroupIndex    =    GetterUtil . getInteger ( System . getProperty (  \" test . class . group . index \"  )  ,     (  -  1  )  )  ;", "if    (  ( AutoBalanceTestCase . testClassGroupIndex )     >  =     0  )     {", "String [  ]    testClassGroupArray    =    StringUtil . split ( System . getProperty (  \" test . class . groups \"  )  ,    SPACE )  ;", "AutoBalanceTestCase . testClassGroupsSize    =    testClassGroupArray . length ;", "}", "if    ( AutoBalanceTestCase . isCIMode (  )  )     {", "System . out . println ( StringBundler . concat (  \" Running   in   CI   mode   with    \"  ,    String . valueOf (  (  ( AutoBalanceTestCase . testClassGroupIndex )     +     1  )  )  ,     \"  /  \"  ,    String . valueOf ( AutoBalanceTestCase . testClassGroupsSize )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setUpClass"], "fileName": "com.liferay.portal.kernel.test.ci.AutoBalanceTestCase"}, {"methodBody": ["METHOD_START", "{", "int   groupSize    =     ( array . length )     /     ( AutoBalanceTestCase . testClassGroupsSize )  ;", "if    (  (  ( array . length )     %     ( AutoBalanceTestCase . testClassGroupsSize )  )     !  =     0  )     {", "groupSize +  +  ;", "}", "int   start    =    groupSize    *     ( AutoBalanceTestCase . testClassGroupIndex )  ;", "int   end    =    start    +    groupSize ;", "if    ( end    >     ( array . length )  )     {", "end    =    array . length ;", "}", "return   ArrayUtil . subset ( array ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["slice"], "fileName": "com.liferay.portal.kernel.test.ci.AutoBalanceTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BridgeJUnitTestRunner .  _ runNotifiers . get ( clazz )  ;", "}", "METHOD_END"], "methodName": ["getRunNotifier"], "fileName": "com.liferay.portal.kernel.test.junit.BridgeJUnitTestRunner"}, {"methodBody": ["METHOD_START", "{", "JUnitCore   junitCore    =    new   JUnitCore (  )  ;", "junitCore . addListener ( bridgeRunListener )  ;", "return   junitCore . run ( testClasses )  ;", "}", "METHOD_END"], "methodName": ["runBridgeTests"], "fileName": "com.liferay.portal.kernel.test.junit.BridgeJUnitTestRunner"}, {"methodBody": ["METHOD_START", "{", "UniqueStringRandomizerBumper .  _ randomValues . clear (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.liferay.portal.kernel.test.randomizerbumpers.UniqueStringRandomizerBumper"}, {"methodBody": ["METHOD_START", "{", "RunWith   runWith    =    description . getAnnotation ( RunWith . class )  ;", "if    ( runWith    =  =    null )     {", "return   false ;", "}", "Class <  ?    extends   Runner >    runnerClass    =    runWith . value (  )  ;", "String   runnerClassName    =    runnerClass . getName (  )  ;", "if    ( runnerClassName . equals (  (  \" arquillian . extension . junit . bridge . junit .  \"     +     \" Arquillian \"  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isArquillianTest"], "fileName": "com.liferay.portal.kernel.test.rule.ArquillianUtil"}, {"methodBody": ["METHOD_START", "{", "while    ( statement   instanceof   BaseTestRule . StatementWrapper )     {", "BaseTestRule . StatementWrapper   statementWrapper    =     (  ( BaseTestRule . StatementWrapper )     ( statement )  )  ;", "statement    =    statementWrapper . getStatement (  )  ;", "}", "if    (  (  ( statement   instanceof   InvokeMethod )     |  |     ( statement   instanceof   RunAfters )  )     |  |     ( statement   instanceof   RunBefores )  )     {", "return   ReflectionTestUtil . getFieldValue ( statement ,     \" target \"  )  ;", "} else", "if    ( statement   instanceof   ExpectException )     {", "return   inspectTarget ( ReflectionTestUtil .  < Statement > getFieldValue ( statement ,     \" next \"  )  )  ;", "} else", "if    ( statement   instanceof   FailOnTimeout )     {", "return   inspectTarget ( ReflectionTestUtil .  < Statement > getFieldValue ( statement ,     \" originalStatement \"  )  )  ;", "}", "throw   new   IllegalStateException (  (  \" Unknow   statement    \"     +    statement )  )  ;", "}", "METHOD_END"], "methodName": ["inspectTarget"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTestRule"}, {"methodBody": ["METHOD_START", "{", "Thread   currentThread    =    Thread . currentThread (  )  ;", "StackTraceElement [  ]    stackTraceElements    =    currentThread . getStackTrace (  )  ;", "StackTraceElement   stackTraceElement    =    stackTraceElements [  2  ]  ;", "Method   method    =     . class . getMethod ( stackTraceElement . getMethodName (  )  )  ;", "Deque < TransactionConfig >    transactionConfigs    =     . transactionConfigThreadLocal . get (  )  ;", "TransactionConfig   transactionConfig    =    transactionConfigs . peek (  )  ;", "Transactional   transactional    =    method . getAnnotation ( Transactional . class )  ;", "if    ( transactional    =  =    null )     {", "Assert . assertEquals ( Factory . create ( SUPPORTS ,    new   Class <  ?  >  [  ]  {    PortalException . class ,    SystemException . class    }  )  ,    transactionConfig )  ;", "return ;", "}", "Assert . assertEquals ( Factory . create ( transactional . isolation (  )  ,    transactional . propagation (  )  ,    transactional . readOnly (  )  ,    transactional . timeout (  )  ,    transactional . rollbackFor (  )  ,    transactional . rollbackForClassName (  )  ,    transactional . noRollbackFor (  )  ,    transactional . noRollbackForClassName (  )  )  ,    transactionConfig )  ;", "}", "METHOD_END"], "methodName": ["assertTransactionConfig"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUp1"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUp2"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUp3"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUpClass1"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUpClass2"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["setUpClass3"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown1"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown2"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown3"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDownClass1"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDownClass2"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["tearDownClass3"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["test1"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["test2"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "BaseTransactionalTestRuleTest . assertTransactionConfig (  )  ;", "}", "METHOD_END"], "methodName": ["test3"], "fileName": "com.liferay.portal.kernel.test.rule.BaseTransactionalTestRuleTest"}, {"methodBody": ["METHOD_START", "{", "List < Class <  ?  >  >    assertClasses    =    new   ArrayList <  >  (  )  ;", "if    ( mainClassName    !  =    null )     {", "Class <  ?  >    mainClass    =    classLoader . loadClass ( mainClassName )  ;", "assertClasses . add ( mainClass )  ;", "if    (  _ includeInnerClasses )     {", "Collections . addAll ( assertClasses ,    mainClass . getDeclaredClasses (  )  )  ;", "}", "}", "if    (  ( getClass (  )  )     !  =     (  . class )  )     {", "Class <  ?  >    clazz    =    getClass (  )  ;", "Class <  ?  >    reloadedClass    =    classLoader . loadClass ( clazz . getName (  )  )  ;", "Method   appendAssertClassesMethod    =    reloadedClass . getMethod (  \" appendAssertClasses \"  ,    List . class )  ;", "appendAssertClassesMethod . setAccessible ( true )  ;", "Constructor <  ?  >    constructor    =    reloadedClass . getDeclaredConstructor (  )  ;", "constructor . setAccessible ( true )  ;", "Object   reloadedObject    =    constructor . newInstance (  )  ;", "appendAssertClassesMethod . invoke ( reloadedObject ,    assertClasses )  ;", "Method   getAssertMethodsMethod    =    reloadedClass . getMethod (  \" getAssertMethods \"  )  ;", "getAssertMethodsMethod . setAccessible ( true )  ;", "List < Method >    methods    =     (  ( List < Method >  )     ( getAssertMethodsMethod . invoke ( reloadedObject )  )  )  ;", "for    ( Method   method    :    methods )     {", "Class <  ?  >    declaringClass    =    method . getDeclaringClass (  )  ;", "if    (  !  ( assertClasses . contains ( declaringClass )  )  )     {", "assertClasses . add ( declaringClass )  ;", "}", "}", "}", "String [  ]    includes    =    new   String [ assertClasses . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( assertClasses . size (  )  )  ;    i +  +  )     {", "Class <  ?  >    assertClass    =    assertClasses . get ( i )  ;", "includes [ i ]     =    StringUtil . replace ( assertClass . getName (  )  ,    new   char [  ]  {     '  .  '  ,     '  $  '     }  ,    new   String [  ]  {     \"  /  \"  ,     \"  \\  \\  $  \"     }  )  ;", "}", "return   includes ;", "}", "METHOD_END"], "methodName": ["_generateIncludes"], "fileName": "com.liferay.portal.kernel.test.rule.CodeCoverageAssertor"}, {"methodBody": ["METHOD_START", "{", "List < Class <  ?  >  >    assertClasses    =    new   ArrayList <  >  (  )  ;", "if    ( className    !  =    null )     {", "ClassLoader   classLoader    =    getClassLoader (  )  ;", "Class <  ?  >    clazz    =    classLoader . loadClass ( className )  ;", "assertClasses . add ( clazz )  ;", "}", "appendAssertClasses ( assertClasses )  ;", "try    {", ".  _ ASSERT _ COVERAGE _ METHOD . invoke ( null ,     _ includeInnerClasses ,    assertClasses ,    getAssertMethods (  )  )  ;", "}    catch    ( InvocationTargetException   ite )     {", "throw   ite . getCause (  )  ;", "}", "}", "METHOD_END"], "methodName": ["afterClass"], "fileName": "com.liferay.portal.kernel.test.rule.CodeCoverageAssertor"}, {"methodBody": ["METHOD_START", "{", "String   className    =    description . getClassName (  )  ;", "if    ( className . endsWith (  \" Test \"  )  )     {", "className    =    className . substring (  0  ,     (  ( className . length (  )  )     -     4  )  )  ;", "}", "String   jvmClassPath    =    ClassPathUtil . getJVMClassPath ( false )  ;", "URL [  ]    urls    =    ClassPathUtil . getClassPathURLs ( jvmClassPath )  ;", "ClassLoader   classLoader    =    new   URLClassLoader ( urls ,    null )  ;", "try    {", "classLoader . loadClass ( className )  ;", "}    catch    ( ClassNotFoundException   cnfe )     {", "className    =    null ;", "}", "String [  ]    includes    =     _ includes ;", "if    ( includes    =  =    null )     {", "includes    =     _ generateIncludes ( classLoader ,    className )  ;", "}", "try    {", ".  _ DYNAMICALLY _ INSTRUMENT _ METHOD . invoke ( null ,    includes ,     _ excludes )  ;", "}    catch    ( InvocationTargetException   ite )     {", "throw   ite . getCause (  )  ;", "}", "return   className ;", "}", "METHOD_END"], "methodName": ["beforeClass"], "fileName": "com.liferay.portal.kernel.test.rule.CodeCoverageAssertor"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getAssertMethods"], "fileName": "com.liferay.portal.kernel.test.rule.CodeCoverageAssertor"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getClass (  )  ;", "return   clazz . getClassLoader (  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "com.liferay.portal.kernel.test.rule.CodeCoverageAssertor"}, {"methodBody": ["METHOD_START", "{", "if    ( Boolean . getBoolean (  \" attached \"  )  )     {", "return ;", "}", "ProcessContext . attach ( message ,     1  0  0  0  ,    new   ShutdownHook (  )     {", "@ Override", "public   boolean   shutdown ( int   shutdownCode ,    Throwable   shutdownThrowable )     {", "System . exit ( shutdownCode )  ;", "return   true ;", "}", "}  )  ;", "System . setProperty (  \" attached \"  ,    TRUE )  ;", "}", "METHOD_END"], "methodName": ["attachProcess"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "List < String >    arguments    =    new   ArrayList <  >  (  )  ;", "Class <  ?  >    testClass    =    description . getTestClass (  )  ;", "NewEnv . JVMArgsLine   jvmArgsLine    =    testClass . getAnnotation ( NewEnv . JVMArgsLine . class )  ;", "if    ( jvmArgsLine    !  =    null )     {", "arguments . addAll ( processJVMArgsLine ( jvmArgsLine )  )  ;", "}", "jvmArgsLine    =    description . getAnnotation ( NewEnv . JVMArgsLine . class )  ;", "if    ( jvmArgsLine    !  =    null )     {", "arguments . addAll ( processJVMArgsLine ( jvmArgsLine )  )  ;", "}", "arguments . add (  \"  - DpreferIPv 4 Stack = true \"  )  ;", "if    ( Boolean . getBoolean (  \" jvm . debug \"  )  )     {", "arguments . add (  .  _ JPDA _ OPTIONS )  ;", "arguments . add (  \"  - Djvm . debug = true \"  )  ;", "}", "arguments . add (  \"  - Dliferay . mode = test \"  )  ;", "arguments . add (  \"  - Dsun . zip . disableMemoryMapping = true \"  )  ;", "String   whipAgentLine    =    System . getProperty (  \" whip . agent \"  )  ;", "if    ( Validator . isNotNull ( whipAgentLine )  )     {", "arguments . add ( whipAgentLine )  ;", "arguments . add (  (  \"  - Dwhip . agent =  \"     +    whipAgentLine )  )  ;", "}", "String   fileName    =    System . getProperty (  \" whip . datafile \"  )  ;", "if    ( fileName    !  =    null )     {", "arguments . add (  (  \"  - Dwhip . datafile =  \"     +    fileName )  )  ;", "}", "if    ( Boolean . getBoolean (  \" whip . instrument . dump \"  )  )     {", "arguments . add (  \"  - Dwhip . instrument . dump = true \"  )  ;", "}", "if    ( Boolean . getBoolean (  \" whip . static . instrument \"  )  )     {", "arguments . add (  \"  - Dwhip . static . instrument = true \"  )  ;", "}", "return   arguments ;", "}", "METHOD_END"], "methodName": ["createArguments"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   URLClassLoader ( ClassPathUtil . getClassPathURLs (  . CLASS _ PATH )  ,    null )  ;", "}    catch    ( MalformedURLException   murle )     {", "throw   new   RuntimeException ( murle )  ;", "}", "}", "METHOD_END"], "methodName": ["createClassLoader"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "NewEnv   newEnv    =    description . getAnnotation ( NewEnv . class )  ;", "if    ( newEnv    =  =    null )     {", "Class <  ?  >    testClass    =    description . getTestClass (  )  ;", "newEnv    =    testClass . getAnnotation ( NewEnv . class )  ;", "}", "return   newEnv ;", "}", "METHOD_END"], "methodName": ["findNewEnv"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "TestClass   testClass    =    new   TestClass ( targetClass )  ;", "List < FrameworkMethod >    frameworkMethods    =    testClass . getAnnotatedMethods ( annotationClass )  ;", "List < MethodKey >    methodKeys    =    new   ArrayList ( frameworkMethods . size (  )  )  ;", "for    ( FrameworkMethod   annotatedFrameworkMethod    :    frameworkMethods )     {", "methodKeys . add ( new   MethodKey ( annotatedFrameworkMethod . getMethod (  )  )  )  ;", "}", "return   methodKeys ;", "}", "METHOD_END"], "methodName": ["getMethodKeys"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "methodKey    =    methodKey . transform ( classLoader )  ;", "Method   method    =    methodKey . getMethod (  )  ;", "method . invoke ( object )  ;", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    environmentMap    =    new   HashMap <  >  (  )  ;", "for    ( String   variable    :    variables )     {", "String   resolvedVariable    =    resolveSystemProperty ( variable )  ;", "String [  ]    parts    =    StringUtil . split ( resolvedVariable ,    EQUAL )  ;", "if    (  ( parts . length )     !  =     2  )     {", "throw   new   IllegalArgumentException ( StringBundler . concat (  \" Wrong   environment   variable    \"  ,    variable ,     \"    resolved   as    \"  ,    resolvedVariable ,     \"  .    Need   to   be    \\  \" key = value \\  \"    format \"  )  )  ;", "}", "environmentMap . put ( parts [  0  ]  ,    parts [  1  ]  )  ;", "}", "return   environmentMap ;", "}", "METHOD_END"], "methodName": ["processEnvironmentVariables"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "String [  ]    jvmArgs    =    StringUtil . split ( jvmArgsLine . value (  )  ,    SPACE )  ;", "List < String >    jvmArgsList    =    new   ArList <  >  ( jvmArgs . length )  ;", "for    ( String   jvmArg    :    jvmArgs )     {", "jvmArgsList . add ( resolveSystemProperty ( jvmArg )  )  ;", "}", "return   jvmArgsList ;", "}", "METHOD_END"], "methodName": ["processJVMArgsLine"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "return   processCallable ;", "}", "METHOD_END"], "methodName": ["processProcessCallable"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    NewEnvTestRule .  _ systemPropertyReplacePattern . matcher ( value )  ;", "StringBuffer   sb    =    new   StringBuffer (  )  ;", "while    ( matcher . find (  )  )     {", "String   key    =    matcher . group (  1  )  ;", "matcher . appendReplacement ( sb ,    Matcher . quoteReplacement ( GetterUtil . getString ( System . getProperty ( key )  )  )  )  ;", "}", "matcher . appendTail ( sb )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["resolveSystemProperty"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    environmentMap    =    new   HashMap <  >  ( System . getenv (  )  )  ;", "Class <  ?  >    testClass    =    description . getTestClass (  )  ;", ". Environment   environment    =    testClass . getAnnotation (  . Environment . class )  ;", "if    ( environment    !  =    null )     {", "Map < String ,    String >    map    =    processEnvironmentVariables ( environment . variables (  )  )  ;", "if    ( environment . append (  )  )     {", "environmentMap . putAll ( map )  ;", "} else    {", "environmentMap    =    map ;", "}", "}", "environment    =    description . getAnnotation (  . Environment . class )  ;", "if    ( environment    !  =    null )     {", "Map < String ,    String >    map    =    processEnvironmentVariables ( environment . variables (  )  )  ;", "if    ( environment . append (  )  )     {", "environmentMap . putAll ( map )  ;", "} else    {", "environmentMap    =    map ;", "}", "}", "builder . setEnvironment ( environmentMap )  ;", "}", "METHOD_END"], "methodName": ["setEnvironment"], "fileName": "com.liferay.portal.kernel.test.rule.NewEnvTestRule"}, {"methodBody": ["METHOD_START", "{", "DeleteAfterTestRunTestCallback . FieldBag   fieldBag    =    deleteAfterTestRunFieldBags . get ( clazz )  ;", "if    ( fieldBag    =  =    null )     {", "fieldBag    =    new   DeleteAfterTestRunTestCallback . FieldBag ( clazz )  ;", "deleteAfterTestRunFieldBags . put ( clazz ,    fieldBag )  ;", "}", "field . setAccessible ( true )  ;", "fieldBag . addField ( field )  ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "com.liferay.portal.kernel.test.rule.callback.DeleteAfterTestRunTestCallback"}, {"methodBody": ["METHOD_START", "{", "Class <  ?    extends   PersistedModel >    collectionType    =    null ;", "for    ( Object   object    :    collection )     {", "Queue < Class <  ?  >  >    classes    =    new   LinkedList <  >  (  )  ;", "classes . add ( object . getClass (  )  )  ;", "Class <  ?  >    clazz    =    null ;", "while    (  ( clazz    =    classesll (  )  )     !  =    null )     {", "if    ( ArrayUtil . contains ( clazz . getInterfaces (  )  ,    PersistedModel . class )  )     {", "if    ( collectionType    =  =    null )     {", "collectionType    =     (  ( Class <  ?    extends   PersistedModel >  )     ( clazz )  )  ;", "} else", "if    ( collectionType    !  =    clazz )     {", "return   null ;", "}", "break ;", "}", "classes . add ( clazz . getSuperclass (  )  )  ;", "Collections . addAll ( classes ,    clazz . getInterfaces (  )  )  ;", "}", "}", "return   collectionType ;", "}", "METHOD_END"], "methodName": ["getCollectionType"], "fileName": "com.liferay.portal.kernel.test.rule.callback.DeleteAfterTestRunTestCallback"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    fieldClass    =    fieldBag . getFieldClass (  )  ;", "PersistedModelLocalService   persistedModelLocalService    =    PersistedModelLocalServiceRegistryUtil . getPersistedModelLocalService ( fieldClass . getName (  )  )  ;", "for    ( Field   field    :    fieldBag . getFields (  )  )     {", "Object   object    =    field . get ( instance )  ;", "if    ( object    =  =    null )     {", "continue ;", "}", "Class <  ?  >    objectClass    =    object . getClass (  )  ;", "if    ( objectClass . isArray (  )  )     {", "for    ( PersistedModel   persistedModel    :     (  ( PersistedModel [  ]  )     ( object )  )  )     {", "if    ( persistedModel    =  =    null )     {", "continue ;", "}", "persistedModelLocalService . dPersistedModel ( persistedModel )  ;", "}", "} else", "if    ( isAssignableFrom ( objectClass )  )     {", "Collection <  ?    extends   PersistedModel >    collection    =     (  ( Collection <  ?    extends   PersistedModel >  )     ( object )  )  ;", "for    ( PersistedModel   persistedModel    :    collection )     {", "persistedModelLocalService . dPersistedModel ( persistedModel )  ;", "}", "} else    {", "persistedModelLocalService . dPersistedModel (  (  ( PersistedModel )     ( object )  )  )  ;", "}", "field . set ( instance ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["removeField"], "fileName": "com.liferay.portal.kernel.test.rule.callback.DeleteAfterTestRunTestCallback"}, {"methodBody": ["METHOD_START", "{", "SynchronousDestinationTestCallback . SyncHandler   syncHandler    =    new   SynchronousDestinationTestCallback . SyncHandler (  )  ;", "syncHandler . setForceSync ( ProxyModeThreadLocal . isForceSync (  )  )  ;", "syncHandler . setSync ( sync )  ;", "syncHandler . enableSync (  )  ;", "return   syncHandler ;", "}", "METHOD_END"], "methodName": ["_createSyncHandler"], "fileName": "com.liferay.portal.kernel.test.rule.callback.SynchronousDestinationTestCallback"}, {"methodBody": ["METHOD_START", "{", "return   CompanyTestUtil . addCompany ( RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addCompany"], "fileName": "com.liferay.portal.kernel.test.util.CompanyTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   virtualHostname    =     ( name    +     \"  .  \"  )     +     ( RandomTestUtil . randomString (  3  )  )  ;", "return   CompanyLocalServiceUtil . addCompany ( name ,    virtualHostname ,    virtualHostname ,    false ,     0  ,    true )  ;", "}", "METHOD_END"], "methodName": ["addCompany"], "fileName": "com.liferay.portal.kernel.test.util.CompanyTestUtil"}, {"methodBody": ["METHOD_START", "{", "User   user    =    UserLocalServiceUtil . loadGetDefaultUser ( companyId )  ;", "user . setLanguageId ( defaultLanguageId )  ;", "user . setTimeZoneId ( TimeZoneUtil . getDefault (  )  . getID (  )  )  ;", "UserLocalServiceUtil . updateUser ( user )  ;", "PortletPreferences   preferences    =    PrefsPropsUtil . getPreferences ( companyId )  ;", "preferences . setValue ( LOCALES ,    languageIds )  ;", "preferences . store (  )  ;", "LanguageUtil . resetAvailableLocales ( companyId )  ;", "hreadLocal . setCompanyId ( companyId )  ;", "}", "METHOD_END"], "methodName": ["resetCompanyLocales"], "fileName": "com.liferay.portal.kernel.test.util.CompanyTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   defaultLanguageId    =    LocaleUtil . toLanguageId ( defaultLocale )  ;", "String   languageIds    =    StringUtil . merge ( LocaleUtil . toLanguageIds ( locales )  )  ;", ". resetCompanyLocales ( companyId ,    languageIds ,    defaultLanguageId )  ;", "}", "METHOD_END"], "methodName": ["resetCompanyLocales"], "fileName": "com.liferay.portal.kernel.test.util.CompanyTestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( columnNames . length )  ;    i +  +  )     {", "columnNames [ i ]     =    StringUtil . toLowerCase ( columnNames [ i ]  )  ;", "}", "Set < String >    columnNamesSet    =    SetUtil . fromArray ( columnNames )  ;", "try    ( Connection   connection    =    DataAccess . getUpgradeOptimizedConnection (  )  )     {", "DBInspector   dbInspector    =    new   DBInspector ( connection )  ;", "DatabaseMetaData   databaseMetaData    =    connection . getMetaData (  )  ;", "try    ( ResultSet   rs    =    databaseMetaData . getColumns ( dbInspector . getCatalog (  )  ,    dbInspector . getSchema (  )  ,    dbInspector . normalizeName ( tableName )  ,    null )  )     {", "while    ( rs . next (  )  )     {", "String   columnName    =    StringUtil . toLowerCase ( rs . getString (  \" COLUMN _ NAME \"  )  )  ;", ". assertTrue (  ( columnName    +     \"    should   not   exist \"  )  ,    columnNamesSet . remove ( columnName )  )  ;", "}", "}", "}", ". assertEquals ( columnNamesSet . toString (  )  ,     0  ,    columnNamesSet . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertColumns"], "fileName": "com.liferay.portal.kernel.test.util.DBAssertionUtil"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    clazz . getResource (  (  \" dependencies /  \"     +    name )  )  ;", "return   new   File ( url . toURI (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDependencyAsFile"], "fileName": "com.liferay.portal.kernel.test.util.DependenciesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   clazz . getResourceAsStream (  (  \" dependencies /  \"     +    name )  )  ;", "}", "METHOD_END"], "methodName": ["getDependencyAsInputStream"], "fileName": "com.liferay.portal.kernel.test.util.DependenciesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   GroupTestUtil . addGroup ( DEFAULT _ PARENT _ GROUP _ ID )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   GroupTestUtil . addGroup ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    parentGroupId )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   GroupTestUtil . addGroup ( userId ,    DEFAULT _ PARENT _ GROUP _ ID ,    layout )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   name    =    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ;", "Group   group    =    GroupLocalServiceUtil . fetchGroup ( TestPropsValues . getCompanyId (  )  ,    name )  ;", "if    ( group    !  =    null )     {", "return   group ;", "}", "Map < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( LocaleUtil . getDefault (  )  ,    name )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  )  ;", "int   type    =    GroupConstants . TYPE _ SITE _ OPEN ;", "String   friendlyURL    =     ( StringPool . SLASH )     +     ( FriendlyURLNormalizerUtil . normalize ( name )  )  ;", "boolean   site    =    true ;", "boolean   active    =    true ;", "boolean   manualMembership    =    true ;", "int   membershipRestriction    =    GroupConstants . DEFAULT _ MEMBERSHIP _ RESTRICTION ;", "if    ( serviceContext    =  =    null )     {", "serviceContext    =    ServiceContextTestUtil . getServiceContext (  )  ;", "}", "return   GroupServiceUtil . addGroup ( parentGroupId ,    DEFAULT _ LIVE _ GROUP _ ID ,    nameMap ,    descriptionMap ,    type ,    manualMembership ,    membershipRestriction ,    friendlyURL ,    site ,    active ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "Group   scopeGroup    =    layout . getScopeGroup (  )  ;", "if    ( scopeGroup    !  =    null )     {", "return   scopeGroup ;", "}", "Map < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( LocaleUtil . getDefault (  )  ,    String . valueOf ( layout . getPlid (  )  )  )  ;", "return   GroupLocalServiceUtil . addGroup ( userId ,    parentGroupId ,    Layout . class . getName (  )  ,    layout . getPlid (  )  ,    DEFAULT _ LIVE _ GROUP _ ID ,    nameMap ,    null ,     0  ,    true ,    DEFAULT _ MEMBERSHIP _ RESTRICTION ,    null ,    false ,    true ,    null )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   name    =    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ;", "Group   group    =    GroupLocalServiceUtil . fetchGroup ( companyId ,    name )  ;", "if    ( group    !  =    null )     {", "return   group ;", "}", "Map < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( LocaleUtil . getDefault (  )  ,    name )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  )  ;", "int   type    =    GroupConstants . TYPE _ SITE _ OPEN ;", "String   friendlyURL    =     ( StringPool . SLASH )     +     ( FriendlyURLNormalizerUtil . normalize ( name )  )  ;", "boolean   site    =    true ;", "boolean   active    =    true ;", "boolean   manualMembership    =    true ;", "int   membershipRestriction    =    GroupConstants . DEFAULT _ MEMBERSHIP _ RESTRICTION ;", "return   GroupLocalServiceUtil . addGroup ( userId ,    parentGroupId ,    null ,     0  ,    DEFAULT _ LIVE _ GROUP _ ID ,    nameMap ,    descriptionMap ,    type ,    manualMembership ,    membershipRestriction ,    friendlyURL ,    site ,    active ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addGroup"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "GroupTestUtil . enableLocalStaging ( group ,    TestPropsValues . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["enableLocalStaging"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  )  ;", "serviceContext . setAddGroupPermissions ( true )  ;", "serviceContext . setAddGuestPermissions ( true )  ;", "serviceContext . setScopeGroupId ( group . getGroupId (  )  )  ;", "Map < String ,    Serializable >    attributes    =    serviceContext . getAttributes (  )  ;", "attributes . putAll ( ExportImportConfigurationParameterMapFactory . buildParameterMap (  )  )  ;", "attributes . put ( PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "attributes . put ( PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . FALSE . toString (  )     }  )  ;", "StagingLocalServiceUtil . enableLocalStaging ( userId ,    group ,    false ,    false ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["enableLocalStaging"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "UnicodeProperties   typeSettingsProperties    =    new   UnicodeProperties (  )  ;", "boolean   inheritLocales    =    false ;", "if    (  ( availableLocales    =  =    null )     &  &     ( defaultLocale    =  =    null )  )     {", "inheritLocales    =    true ;", "}", "typeSettingsProperties . put ( TYPE _ SETTINGS _ KEY _ INHERIT _ LOCALES ,    String . valueOf ( inheritLocales )  )  ;", "if    ( availableLocales    !  =    null )     {", "typeSettingsProperties . put ( LOCALES ,    StringUtil . merge ( LocaleUtil . toLanguageIds ( availableLocales )  )  )  ;", "}", "if    ( defaultLocale    !  =    null )     {", "typeSettingsProperties . put (  \" languageId \"  ,    LocaleUtil . toLanguageId ( defaultLocale )  )  ;", "}", "group    =    LocalServiceUtil . update ( groupId ,    typeSettingsProperties . toString (  )  )  ;", "ThreadLocalCacheManager . clearAll ( REQUEST )  ;", "return   group ;", "}", "METHOD_END"], "methodName": ["updateDisplaySettings"], "fileName": "com.liferay.portal.kernel.test.util.GroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "List < ListType >    listTypes    =    ListTypeServiceUtil . getListTypes ( type )  ;", "ListType   listType    =    listTypes . get (  0  )  ;", "return   listType . getListTypeId (  )  ;", "}", "METHOD_END"], "methodName": ["_getListTypeId"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AddressLocalServiceUtil . addAddress ( getUserId (  )  ,    getModelClassName (  )  ,    getOrganizationId (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . nextLong (  )  ,    RandomTestUtil . randomLong (  )  ,    OrganizationTestUtil .  _ getListTypeId ( ORGANIZATION _ ADDRESS )  ,    false ,    false ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addAddress"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   EmailAddressLocalServiceUtil . addEmailAddress ( getUserId (  )  ,    getModelClassName (  )  ,    getOrganizationId (  )  ,     \" test @ liferay . com \"  ,    OrganizationTestUtil .  _ getListTypeId ( ORGANIZATION _ EMAIL _ ADDRESS )  ,    false ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addEmailAddress"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   OrgLaborLocalServiceUtil . addOrgLabor ( getOrganizationId (  )  ,    OrganizationTestUtil .  _ getListTypeId ( ORGANIZATION _ SERVICE )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  ,    RandomTestUtil . nextInt (  )  )  ;", "}", "METHOD_END"], "methodName": ["addOrgLabor"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   OrganizationTestUtil . addOrganization ( DEFAULT _ PARENT _ ORGANIZATION _ ID ,    RandomTestUtil . randomString (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addOrganization"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   OrganizationTestUtil . addOrganization ( DEFAULT _ PARENT _ ORGANIZATION _ ID ,    RandomTestUtil . randomString (  )  ,    site )  ;", "}", "METHOD_END"], "methodName": ["addOrganization"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   OrganizationLocalServiceUtil . addOrganization ( TestPropsValues . getUserId (  )  ,    parentOrganizationId ,    name ,    site )  ;", "}", "METHOD_END"], "methodName": ["addOrganization"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "PasswordPolicy   passwordPolicy    =    PasswordPolicyTestUtil . addPasswordPolicy ( serviceContext )  ;", "PasswordPolicyRelLocalServiceUtil . addPasswordPolicyRel ( passwordPolicy . getPasswordPolicyId (  )  ,    getModelClassName (  )  ,    getId (  )  )  ;", "return   passwordPolicy ;", "}", "METHOD_END"], "methodName": ["addPasswordPolicyRel"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PhoneLocalServiceUtil . addPhone ( getUserId (  )  ,    getModelClassName (  )  ,    getOrganizationId (  )  ,     \"  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  0  0  0  \"  ,    OrganizationTestUtil .  _ getListTypeId ( ORGANIZATION _ PHONE )  ,    false ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addPhone"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   OrganizationLocalServiceUtil . updateOrganization ( getCompanyId (  )  ,    getOrganizationId (  )  ,    getParentOrganizationId (  )  ,    getName (  )  ,    getType (  )  ,    getRegionId (  )  ,    getCountryId (  )  ,    getStatusId (  )  ,    getComments (  )  ,    false ,    null ,    true ,    null )  ;", "}", "METHOD_END"], "methodName": ["addSite"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   WebsiteLocalServiceUtil . addWebsite ( getUserId (  )  ,    getModelClassName (  )  ,    getOrganizationId (  )  ,     \" http :  /  / www . test . com \"  ,    OrganizationTestUtil .  _ getListTypeId ( ORGANIZATION _ WEBSITE )  ,    false ,    new   ServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWebsite"], "fileName": "com.liferay.portal.kernel.test.util.OrganizationTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  )  ;", "}", "METHOD_END"], "methodName": ["nextDate"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   CounterLocalServiceUtil . increment (  )  ;", "}", "METHOD_END"], "methodName": ["nextDouble"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( CounterLocalServiceUtil . increment (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["nextInt"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   CounterLocalServiceUtil . increment (  )  ;", "}", "METHOD_END"], "methodName": ["nextLong"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RandomTestUtil .  _ random . nextBoolean (  )  ;", "}", "METHOD_END"], "methodName": ["randomBoolean"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RandomTestUtil . randomBytes (  8  ,    randomizerBumpers )  ;", "}", "METHOD_END"], "methodName": ["randomBytes"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    new   byte [ size ]  ;", "generation    :    for    ( int   i    =     0  ;    i    <     (  .  _ RANDOMIZER _ BUMPER _ TRIES _ MAX )  ;    i +  +  )     {", ".  _ random . nextBytes ( bytes )  ;", "for    ( RandomizerBumper < byte [  ]  >    randomizerBumper    :    randomizerBumpers )     {", "if    (  !  ( randomizerBumper . accept ( bytes )  )  )     {", "continue   generation ;", "}", "}", "return   bytes ;", "}", "throw   new   IllegalStateException ( StringBundler . concat (  \" Unable   to   generate   a   random   byte   array   that   is   acceptable   by    \"  ,     \" all   randomizer   bumpers    \"  ,    Arrays . toString ( randomizerBumpers )  ,     \"    after    \"  ,    String . valueOf (  .  _ RANDOMIZER _ BUMPER _ TRIES _ MAX )  ,     \"    tries \"  )  )  ;", "}", "METHOD_END"], "methodName": ["randomBytes"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "double   value    =    RandomTestUtil .  _ random . nextDouble (  )  ;", "if    ( value    >     0  )     {", "return   value ;", "} else", "if    ( value    =  =     0  )     {", "return   RandomTestUtil . randomDouble (  )  ;", "} else    {", "return    - value ;", "}", "}", "METHOD_END"], "methodName": ["randomDouble"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsyncByteArrayInputStream ( RandomTestUtil . randomBytes ( randomizerBumpers )  )  ;", "}", "METHOD_END"], "methodName": ["randomInputStream"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RandomTestUtil . randomInt (  1  ,    Integer . MAX _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["randomInt"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( max    <    min )     {", "throw   new   IllegalArgumentException (  \" Max   value   must   be   greater   than   or   equal   to   the   min   value \"  )  ;", "}", "int   value    =     .  _ random . nextInt (  )  ;", "long   range    =     ( max    +     1  )     -    min ;", "if    ( range    =  =     0  )     {", "return   value ;", "}", "return    (  ( int )     (  (  ( Math . abs ( value )  )     %    range )     +    min )  )  ;", "}", "METHOD_END"], "methodName": ["randomInt"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RandomTestUtil . randomLocaleStringMap ( LocaleUtil . getDefault (  )  )  ;", "}", "METHOD_END"], "methodName": ["randomLocaleStringMap"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    map    =    new   HashMap <  >  (  )  ;", "map . put ( LocaleUtil . getDefault (  )  ,     . randomString (  )  )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["randomLocaleStringMap"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   value    =    RandomTestUtil .  _ random . nextLong (  )  ;", "if    ( value    >     0  )     {", "return   value ;", "} else", "if    ( value    =  =     0  )     {", "return   RandomTestUtil . randomLong (  )  ;", "} else    {", "return    - value ;", "}", "}", "METHOD_END"], "methodName": ["randomLong"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RandomTestUtil . randomString (  8  ,    randomizerBumpers )  ;", "}", "METHOD_END"], "methodName": ["randomString"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "generation    :    for    ( int   i    =     0  ;    i    <     ( RandomTestUtil .  _ RANDOMIZER _ BUMPER _ TRIES _ MAX )  ;    i +  +  )     {", "String   randomString    =    PwdGenerator . getPassword ( length )  ;", "for    ( RandomizerBumper < String >    randomizerBumper    :    randomizerBumpers )     {", "if    (  !  ( randomizerBumper . accept ( randomString )  )  )     {", "continue   generation ;", "}", "}", "return   randomString ;", "}", "throw   new   IllegalStateException ( StringBundler . concat (  \" Unable   to   generate   a   random   string   that   is   acceptable   by   all    \"  ,     \" randomizer   bumpers    \"  ,    Arrays . toString ( randomizerBumpers )  ,     \"    after    \"  ,    String . valueOf ( RandomTestUtil .  _ RANDOMIZER _ BUMPER _ TRIES _ MAX )  ,     \"    tries \"  )  )  ;", "}", "METHOD_END"], "methodName": ["randomString"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "String [  ]    strings    =    new   String [ count ]  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "strings [ i ]     =     . randomString ( randomizerBumpers )  ;", "}", "return   strings ;", "}", "METHOD_END"], "methodName": ["randomStrings"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "UnicodeProperties   unicodeProperties    =    new   UnicodeProperties (  )  ;", "for    ( int   i    =     0  ;    i    <    propertyCount ;    i +  +  )     {", "unicodeProperties . put (  . randomString ( keyLength )  ,     . randomString ( valueLength )  )  ;", "}", "return   unicodeProperties ;", "}", "METHOD_END"], "methodName": ["randomUnicodeProperties"], "fileName": "com.liferay.portal.kernel.test.util.RandomTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   resourceBlockPermissionId    =    CounterLocalServiceUtil . increment ( ResourceBlockPermission . class . getName (  )  )  ;", "ResourceBlockPermission   resourceBlockPermission    =    ResourceBlockPermissionLocalServiceUtil . createResourceBlockPermission ( resourceBlockPermissionId )  ;", "resourceBlockPermission . setResourceBlockId ( resourceBlockId )  ;", "resourceBlockPermission . setRoleId ( roleId )  ;", "resourceBlockPermission . setActionIds ( actionIds )  ;", "return   ResourceBlockPermissionLocalServiceUtil . addResourceBlockPermission ( resourceBlockPermission )  ;", "}", "METHOD_END"], "methodName": ["addResourceBlockPermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourceBlockPermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "List < String >    resourceActionsIds    =    ResourceActionsUtil . getResourceActions ( portletResource ,    resourceName )  ;", "Map < Long ,    String [  ]  >    roleIdsToActionIds    =    new   HashMap <  >  (  )  ;", "for    ( String   roleName    :    roleNames )     {", "Role   role    =    RoleLocalServiceUtil . getRole ( companyId ,    roleName )  ;", "List < String >    roleActionIds    =    ListUtil . copy ( resourceActionsIds )  ;", "if    ( roleName . equals ( GUEST )  )     {", "List < String >    unsupportedActionIds    =    ResourceActionsUtil . getResourceGuestUnsupportedActions ( portletResource ,    resourceName )  ;", "roleActionIds . removeAll ( unsupportedActionIds )  ;", "}", "roleActionIds . removeAll ( actionIds )  ;", "roleIdsToActionIds . put ( role . getRoleId (  )  ,    ArrayUtil . toStringArray ( roleActionIds )  )  ;", "}", "LocalServiceUtil . setIndividualScopePermissions ( companyId ,    groupId ,    resourceName ,    classPK ,    roleIdsToActionIds )  ;", "}", "METHOD_END"], "methodName": ["removeResourceBlockPermissions"], "fileName": "com.liferay.portal.kernel.test.util.ResourceBlockPermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ResourceBlockTestUtil . addResourceBlock ( RandomTestUtil . nextLong (  )  ,    name )  ;", "}", "METHOD_END"], "methodName": ["addResourceBlock"], "fileName": "com.liferay.portal.kernel.test.util.ResourceBlockTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   resourceBlockId    =    CounterLocalServiceUtil . increment ( ResourceBlock . class . getName (  )  )  ;", "ResourceBlock   resourceBlock    =    ResourceBlockLocalServiceUtil . createResourceBlock ( resourceBlockId )  ;", "resourceBlock . setCompanyId ( TestPropsValues . getCompanyId (  )  )  ;", "resourceBlock . setGroupId ( groupId )  ;", "resourceBlock . setName ( name )  ;", "resourceBlock . setPermissionsHash ( RandomTestUtil . randomString (  )  )  ;", "resourceBlock . setReferenceCount (  0  )  ;", "return   ResourceBlockLocalServiceUtil . addResourceBlock ( resourceBlock )  ;", "}", "METHOD_END"], "methodName": ["addResourceBlock"], "fileName": "com.liferay.portal.kernel.test.util.ResourceBlockTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ResourcePermissionTestUtil . addResourcePermission ( actionIds ,    name ,    primKey ,    RandomTestUtil . nextInt (  )  ,    scope )  ;", "}", "METHOD_END"], "methodName": ["addResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourcePermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   resourcePermissionId    =    CounterLocalServiceUtil . increment ( ResourcePermission . class . getName (  )  )  ;", "ResourcePermission   resourcePermission    =    ResourcePermissionLocalServiceUtil . createResourcePermission ( resourcePermissionId )  ;", "resourcePermission . setCompanyId ( TestPropsValues . getCompanyId (  )  )  ;", "resourcePermission . setName ( name )  ;", "resourcePermission . setScope ( scope )  ;", "resourcePermission . setPrimKey ( primKey )  ;", "resourcePermission . setPrimKeyId ( GetterUtil . getLong ( primKey )  )  ;", "resourcePermission . setRoleId ( roleId )  ;", "resourcePermission . setActionIds ( actionIds )  ;", "resourcePermission . setViewActionId (  (  ( actionIds    %     2  )     =  =     1  )  )  ;", "return   ResourcePermissionLocalServiceUtil . addResourcePermission ( resourcePermission )  ;", "}", "METHOD_END"], "methodName": ["addResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourcePermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ResourcePermissionTestUtil . addResourcePermission ( actionIds ,    name ,    RandomTestUtil . randomString (  )  ,    roleId ,    RandomTestUtil . nextInt (  )  )  ;", "}", "METHOD_END"], "methodName": ["addResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourcePermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ResourceTypePermissionTestUtil . addResourceTypePermission ( actionIds ,    groupId ,    name ,    RandomTestUtil . nextLong (  )  )  ;", "}", "METHOD_END"], "methodName": ["addResourceTypePermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourceTypePermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   resourceTypePermissionId    =    CounterLocalServiceUtil . increment ( ResourceTypePermission . class . getName (  )  )  ;", "ResourceTypePermission   resourceTypePermission    =    ResourceTypePermissionLocalServiceUtil . createResourceTypePermission ( resourceTypePermissionId )  ;", "resourceTypePermission . setCompanyId ( TestPropsValues . getCompanyId (  )  )  ;", "resourceTypePermission . setGroupId ( groupId )  ;", "resourceTypePermission . setName ( name )  ;", "resourceTypePermission . setRoleId ( roleId )  ;", "resourceTypePermission . setActionIds ( actionIds )  ;", "return   ResourceTypePermissionLocalServiceUtil . addResourceTypePermission ( resourceTypePermission )  ;", "}", "METHOD_END"], "methodName": ["addResourceTypePermission"], "fileName": "com.liferay.portal.kernel.test.util.ResourceTypePermissionTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleTestUtil . addRole ( TYPE _ SITE )  ;", "RoleLocalServiceUtil . addGroupRole ( groupId ,    role . getRoleId (  )  )  ;", "return   role . getRoleId (  )  ;", "}", "METHOD_END"], "methodName": ["addGroupRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleTestUtil . addRole ( TYPE _ ORGANIZATION )  ;", "RoleLocalServiceUtil . addGroupRole ( groupId ,    role . getRoleId (  )  )  ;", "return   role . getRoleId (  )  ;", "}", "METHOD_END"], "methodName": ["addOrganizationRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleTestUtil . addRole ( TYPE _ REGULAR )  ;", "RoleLocalServiceUtil . addGroupRole ( groupId ,    role . getRoleId (  )  )  ;", "return   role . getRoleId (  )  ;", "}", "METHOD_END"], "methodName": ["addRegularRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "ResourcePermissionLocalServiceUtil . addResourcePermission ( role . getCompanyId (  )  ,    resourceName ,    scope ,    primKey ,    role . getRoleId (  )  ,    actionId )  ;", "}", "METHOD_END"], "methodName": ["addResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    roleName )  ;", ". addResourcePermission ( role ,    resourceName ,    scope ,    primKey ,    actionId )  ;", "}", "METHOD_END"], "methodName": ["addResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   RoleTestUtil . addRole ( RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    roleType )  ;", "}", "METHOD_END"], "methodName": ["addRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    null ;", "try    {", "role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    roleName )  ;", "}    catch    ( NoSuchRoleException   nsre )     {", "role    =    RoleLocalServiceUtil . addRole ( TestPropsValues . getUserId (  )  ,    null ,     0  ,    roleName ,    null ,    null ,    roleType ,    null ,    null )  ;", "}", "return   role ;", "}", "METHOD_END"], "methodName": ["addRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleTestUtil . addRole ( roleName ,    roleType )  ;", "RoleTestUtil . addResourcePermission ( role ,    resourceName ,    scope ,    primKey ,    actionId )  ;", "return   role ;", "}", "METHOD_END"], "methodName": ["addRole"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    roleName )  ;", "ResourcePermissionLocalServiceUtil . removeResourcePermission ( role . getCompanyId (  )  ,    resourceName ,    scope ,    primKey ,    role . getRoleId (  )  ,    actionId )  ;", "}", "METHOD_END"], "methodName": ["removeResourcePermission"], "fileName": "com.liferay.portal.kernel.test.util.RoleTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   SearchContextTestUtil . getSearchContext ( TestPropsValues . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSearchContext"], "fileName": "com.liferay.portal.kernel.test.util.SearchContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "SearchContext   searchContext    =    new   SearchContext (  )  ;", "searchContext . setCompanyId ( TestPropsValues . getCompanyId (  )  )  ;", "searchContext . setGroupIds ( new   long [  ]  {    groupId    }  )  ;", "searchContext . setUserId ( TestPropsValues . getUserId (  )  )  ;", "return   searchContext ;", "}", "METHOD_END"], "methodName": ["getSearchContext"], "fileName": "com.liferay.portal.kernel.test.util.SearchContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ServiceContextTestUtil . getServiceContext ( TestPropsValues . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getServiceContext"], "fileName": "com.liferay.portal.kernel.test.util.ServiceContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   ServiceContextTestUtil . getServiceContext ( group . getCompanyId (  )  ,    group . getGroupId (  )  ,    userId )  ;", "}", "METHOD_END"], "methodName": ["getServiceContext"], "fileName": "com.liferay.portal.kernel.test.util.ServiceContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( groupId    =  =     ( TestPropsValues . getGroupId (  )  )  )     {", "return    . getServiceContext ( groupId ,    TestPropsValues . getUserId (  )  )  ;", "} else    {", "Group   group    =    GroupLocalServiceUtil . getGroup ( groupId )  ;", "User   user    =    UserTestUtil . getAdminUser ( group . getCompanyId (  )  )  ;", "return    . getServiceContext ( group ,    user . getUserId (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getServiceContext"], "fileName": "com.liferay.portal.kernel.test.util.ServiceContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( groupId    =  =     ( TestPropsValues . getGroupId (  )  )  )     {", "return    . getServiceContext ( TestPropsValues . getCompanyId (  )  ,    groupId ,    userId )  ;", "} else    {", "Group   group    =    GroupLocalServiceUtil . getGroup ( groupId )  ;", "return    . getServiceContext ( group . getCompanyId (  )  ,    group . getGroupId (  )  ,    userId )  ;", "}", "}", "METHOD_END"], "methodName": ["getServiceContext"], "fileName": "com.liferay.portal.kernel.test.util.ServiceContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    new   ServiceContext (  )  ;", "serviceContext . setAddGroupPermissions ( true )  ;", "serviceContext . setAddGuestPermissions ( true )  ;", "serviceContext . setCompanyId ( companyId )  ;", "serviceContext . setScopeGroupId ( groupId )  ;", "serviceContext . setUserId ( userId )  ;", "return   serviceContext ;", "}", "METHOD_END"], "methodName": ["getServiceContext"], "fileName": "com.liferay.portal.kernel.test.util.ServiceContextTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ props . getProperty ( key )  ;", "}", "METHOD_END"], "methodName": ["_get"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "List < String >    keys    =    Collections . list (  (  ( Enumeration < String >  )     (  _ props . propertyNames (  )  )  )  )  ;", "keys    =    ListUtil . sort ( keys )  ;", "if    ( update )     {", "System . out . println (  \"  -  -    updated   properties    -  -  \"  )  ;", "} else    {", "System . out . println (  \"  -  -    listing   properties    -  -  \"  )  ;", "}", "for    ( String   key    :    keys )     {", "System . out . println (  (  ( key    +     \"  =  \"  )     +     (  _ props . geerty ( key )  )  )  )  ;", "}", "System . out . println (  \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["_printProperties"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "_ props . setProperty ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["_set"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "return   TestPropsUtil .  _ instance .  _ get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "return   TestPropsUtil .  _ instance .  _ props ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "TestPropsUtil .  _ instance .  _ printProperties ( true )  ;", "}", "METHOD_END"], "methodName": ["printProperties"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "TestPropsUtil .  _ instance .  _ set ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestPropsValues .  _ companyId )     >     0  )     {", "return   TestPropsValues .  _ companyId ;", "}", "Company   company    =    CompanyLocalServiceUtil . getCompanyByWebId ( TestPropsValues . COMPANY _ WEB _ ID )  ;", "TestPropsValues .  _ companyId    =    company . getCompanyId (  )  ;", "return   TestPropsValues .  _ companyId ;", "}", "METHOD_END"], "methodName": ["getCompanyId"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestPropsValues .  _ groupId )     >     0  )     {", "return   TestPropsValues .  _ groupId ;", "}", "Group   group    =    GroupLocalServiceUtil . getGroup ( TestPropsValues . getCompanyId (  )  ,    GUEST )  ;", "TestPropsValues .  _ groupId    =    group . getGroupId (  )  ;", "return   TestPropsValues .  _ groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "return   TestPropsValues . getPlid ( TestPropsValues . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPlid"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestPropsValues .  _ plid )     >     0  )     {", "return   TestPropsValues .  _ plid ;", "}", "TestPropsValues .  _ plid    =    LayoutLocalServiceUtil . getDefaultPlid ( groupId )  ;", "return   TestPropsValues .  _ plid ;", "}", "METHOD_END"], "methodName": ["getPlid"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestPropsValues .  _ user )     =  =    null )     {", "TestPropsValues .  _ user    =    UserTestUtil . getAdminUser ( TestPropsValues . getCompanyId (  )  )  ;", "}", "return   TestPropsValues .  _ user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "if    (  ( TestPropsValues .  _ userId )     =  =     0  )     {", "User   user    =    TestPropsValues . getUser (  )  ;", "if    ( user    !  =    null )     {", "TestPropsValues .  _ userId    =    user . getUserId (  )  ;", "}", "}", "return   TestPropsValues .  _ userId ;", "}", "METHOD_END"], "methodName": ["getUserId"], "fileName": "com.liferay.portal.kernel.test.util.TestPropsValues"}, {"methodBody": ["METHOD_START", "{", "return   UserGroupTestUtil . addUserGroup ( TestPropsValues . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUserGroup"], "fileName": "com.liferay.portal.kernel.test.util.UserGroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "return   LocalServiceUtil . add ( serviceContext . getUserId (  )  ,    serviceContext . getCompanyId (  )  ,    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    RandomTestUtil . randomString (  5  0  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addUserGroup"], "fileName": "com.liferay.portal.kernel.test.util.UserGroupTestUtil"}, {"methodBody": ["METHOD_START", "{", "User   user    =    UserTestUtil . addUser ( company )  ;", "Role   role    =    RoleLocalServiceUtil . getRole ( company . getCompanyId (  )  ,    ADMINISTRATOR )  ;", "UserLocalServiceUtil . addRoleUser ( role . getRoleId (  )  ,    user )  ;", "return   user ;", "}", "METHOD_END"], "methodName": ["addCompanyAdminUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addGroupUser ( group ,    SITE _ ADMINISTRATOR )  ;", "}", "METHOD_END"], "methodName": ["addGroupAdminUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addGroupUser ( group ,    SITE _ OWNER )  ;", "}", "METHOD_END"], "methodName": ["addGroupOwnerUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "User   groupUser    =    UserTestUtil . addUser ( group . getGroupId (  )  )  ;", "Role   role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    roleName )  ;", "long [  ]    userIds    =    new   long [  ]  {    groupUser . getUserId (  )     }  ;", "UserGroupRoleLocalServiceUtil . addUserGroupRoles ( userIds ,    group . getGroupId (  )  ,    role . getRoleId (  )  )  ;", "return   groupUser ;", "}", "METHOD_END"], "methodName": ["addGroupUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "Company   company    =    CompanyLocalServiceUtil . getCompanyByMx ( PropsUtil . get ( COMPANY _ DEFAULT _ WEB _ ID )  )  ;", "return    . addCompanyAdminUser ( company )  ;", "}", "METHOD_END"], "methodName": ["addOmniAdminUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addOrganizationUser ( organization ,    ORGANIZATION _ ADMINISTRATOR )  ;", "}", "METHOD_END"], "methodName": ["addOrganizationAdminUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addOrganizationUser ( organization ,    ORGANIZATION _ OWNER )  ;", "}", "METHOD_END"], "methodName": ["addOrganizationOwnerUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "User   organizationUser    =    UserTestUtil . addUser ( getGroupId (  )  )  ;", "UserLocalServiceUtil . addOrganizationUser ( getOrganizationId (  )  ,    getUserId (  )  )  ;", "UserTestUtil . addUserGroupRole ( getUserId (  )  ,    getGroupId (  )  ,    roleName )  ;", "return   organizationUser ;", "}", "METHOD_END"], "methodName": ["addOrganizationUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    new   long [  ]  {    TestPropsValues . getGroupId (  )     }  ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "boolean   autoPassword    =    true ;", "String   password 1     =    StringPool . BLANK ;", "String   password 2     =    StringPool . BLANK ;", "boolean   autoScreenName    =    true ;", "String   screenName    =    StringPool . BLANK ;", "long   facebookId    =     0  ;", "String   openId    =    StringPool . BLANK ;", "Locale   locale    =    LocaleUtil . getDefault (  )  ;", "String   firstName    =     \" UserServiceTest \"  ;", "String   middleName    =    StringPool . BLANK ;", "String   lastName    =     \" UserServiceTest \"  ;", "long   prefixId    =     0  ;", "long   suffixId    =     0  ;", "boolean   male    =    true ;", "int   birthdayMonth    =    Calendar . JANUARY ;", "int   birthdayDay    =     1  ;", "int   birthdayYear    =     1  9  7  0  ;", "String   jobTitle    =    StringPool . BLANK ;", "long [  ]    groupIds    =    null ;", "long [  ]    organizationIds    =    null ;", "long [  ]    roleIds    =    null ;", "long [  ]    userGroupIds    =    null ;", "boolean   sendMail    =    false ;", "ServiceContext   serviceContext    =    new   ServiceContext (  )  ;", "if    ( secure )     {", "String   emailAddress    =     (  \" UserServiceTest .  \"     +     ( RandomTestUtil . nextLong (  )  )  )     +     \"  @ com \"  ;", "return   UserServiceUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    autoPassword ,    password 1  ,    password 2  ,    autoScreenName ,    screenName ,    emailAddress ,    facebookId ,    openId ,    locale ,    firstName ,    middleName ,    lastName ,    prefixId ,    suffixId ,    male ,    birthdayMonth ,    birthdayDay ,    birthdayYear ,    jobTitle ,    groupIds ,    organizationIds ,    roleIds ,    userGroupIds ,    sendMail ,    serviceContext )  ;", "} else    {", "String   emailAddress    =     (  \" UserServiceTest .  \"     +     ( RandomTestUtil . nextLong (  )  )  )     +     \"  @ test . com \"  ;", "return   UserLocalServiceUtil . addUser ( TestPropsValues . getUserId (  )  ,    TestPropsValues . getCompanyId (  )  ,    autoPassword ,    password 1  ,    password 2  ,    autoScreenName ,    screenName ,    emailAddress ,    facebookId ,    openId ,    locale ,    firstName ,    middleName ,    lastName ,    prefixId ,    suffixId ,    male ,    birthdayMonth ,    birthdayDay ,    birthdayYear ,    jobTitle ,    groupIds ,    organizationIds ,    roleIds ,    userGroupIds ,    sendMail ,    serviceContext )  ;", "}", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( company . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    new   long [  ]  {    TestPropsValues . getGroupId (  )     }  ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    screenName ,    locale ,    firstName ,    lastName ,    groupIds ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    screenName ,    LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    groupIds ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    locale ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    new   long [  ]  {    groupId    }  ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "User   user    =    UserLocalServiceUtil . fetchUserByScreenName ( companyId ,    screenName )  ;", "if    ( user    !  =    null )     {", "return   user ;", "}", "boolean   autoPassword    =    true ;", "String   password 1     =    StringPool . BLANK ;", "String   password 2     =    StringPool . BLANK ;", "String   emailAddress    =     (  ( RandomTestUtil . randomString (  )  )     +     ( RandomTestUtil . nextLong (  )  )  )     +     \"  @ com \"  ;", "long   facebookId    =     0  ;", "String   openId    =    StringPool . BLANK ;", "String   middleName    =    StringPool . BLANK ;", "long   prefixId    =     0  ;", "long   suffixId    =     0  ;", "boolean   male    =    true ;", "int   birthdayMonth    =    Calendar . JANUARY ;", "int   birthdayDay    =     1  ;", "int   birthdayYear    =     1  9  7  0  ;", "String   jobTitle    =    StringPool . BLANK ;", "long [  ]    organizationIds    =    null ;", "long [  ]    roleIds    =    null ;", "long [  ]    userGroupIds    =    null ;", "boolean   sendMail    =    false ;", "return   UserLocalServiceUtil . addUser ( userId ,    companyId ,    autoPassword ,    password 1  ,    password 2  ,    Validator . isNull ( screenName )  ,    screenName ,    emailAddress ,    facebookId ,    openId ,    locale ,    firstName ,    middleName ,    lastName ,    prefixId ,    suffixId ,    male ,    birthdayMonth ,    birthdayDay ,    birthdayYear ,    jobTitle ,    groupIds ,    organizationIds ,    roleIds ,    userGroupIds ,    sendMail ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   UserTestUtil . addUser ( TestPropsValues . getCompanyId (  )  ,    TestPropsValues . getUserId (  )  ,    RandomTestUtil . randomString ( NumericStringRandomizerBumper . INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    LocaleUtil . getDefault (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  ,    groupIds ,    ServiceContextTestUtil . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    roleName )  ;", "UserGroupRoleLocalServiceUtil . addUserGroupRoles ( new   long [  ]  {    userId    }  ,    groupId ,    role . getRoleId (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUserGroupRole"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "Role   role    =    RoleLocalServiceUtil . getRole ( companyId ,    ADMINISTRATOR )  ;", "List < User >    users    =    UserLocalServiceUtil . getRoleUsers ( role . getRoleId (  )  ,     0  ,     1  )  ;", "if    (  !  ( users . isEmpty (  )  )  )     {", "return   users . get (  0  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getAdminUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    new   ServiceContext (  )  ;", "return    . updateUser ( user ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["updateUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   oldPassword    =    StringPool . BLANK ;", "String   newPassword 1     =    StringPool . BLANK ;", "String   newPassword 2     =    StringPool . BLANK ;", "Boolean   passwordReset    =    false ;", "String   reminderQueryQuestion    =    StringPool . BLANK ;", "String   reminderQueryAnswer    =    StringPool . BLANK ;", "String   screenName    =     \" TestUser \"     +     ( Random . nextLong (  )  )  ;", "String   emailAddress    =     (  \" UserServiceTest .  \"     +     ( Random . nextLong (  )  )  )     +     \"  @ liferay . com \"  ;", "long   facebookId    =     0  ;", "String   openId    =    StringPool . BLANK ;", "String   languageId    =    StringPool . BLANK ;", "String   timeZoneId    =    StringPool . BLANK ;", "String   greeting    =    StringPool . BLANK ;", "String   comments    =    StringPool . BLANK ;", "String   firstName    =     \" UserServiceTest \"  ;", "String   middleName    =    StringPool . BLANK ;", "String   lastName    =     \" UserServiceTest \"  ;", "long   prefixId    =     0  ;", "long   suffixId    =     0  ;", "boolean   male    =    true ;", "int   birthdayMonth    =    Calendar . JANUARY ;", "int   birthdayDay    =     1  ;", "int   birthdayYear    =     1  9  7  0  ;", "String   smsSn    =    StringPool . BLANK ;", "String   facebookSn    =    StringPool . BLANK ;", "String   jabberSn    =    StringPool . BLANK ;", "String   skypeSn    =    StringPool . BLANK ;", "String   twitterSn    =    StringPool . BLANK ;", "String   jobTitle    =    StringPool . BLANK ;", "long [  ]    groupIds    =    null ;", "long [  ]    organizationIds    =    null ;", "long [  ]    roleIds    =    null ;", "List < UserGroupRole >    userGroupRoles    =    null ;", "long [  ]    userGroupIds    =    null ;", "return   UserServiceUtil . updateUser ( user . getUserId (  )  ,    oldPassword ,    newPassword 1  ,    newPassword 2  ,    passwordReset ,    reminderQueryQuestion ,    reminderQueryAnswer ,    screenName ,    emailAddress ,    facebookId ,    openId ,    languageId ,    timeZoneId ,    greeting ,    comments ,    firstName ,    middleName ,    lastName ,    prefixId ,    suffixId ,    male ,    birthdayMonth ,    birthdayDay ,    birthdayYear ,    smsSn ,    facebookSn ,    jabberSn ,    skypeSn ,    twitterSn ,    jobTitle ,    groupIds ,    organizationIds ,    roleIds ,    userGroupRoles ,    userGroupIds ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["updateUser"], "fileName": "com.liferay.portal.kernel.test.util.UserTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesTestUtil . addGroupPortletPreferences ( layout ,    portlet ,    null )  ;", "}", "METHOD_END"], "methodName": ["addGroupPortletPreferences"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesLocalServiceUtil . addPortletPreferences ( layout . getCompanyId (  )  ,    layout . getGroupId (  )  ,    PREFS _ OWNER _ TYPE _ GROUP ,    layout . getPlid (  )  ,    portlet . getPortletId (  )  ,    portlet ,    defaultPreferences )  ;", "}", "METHOD_END"], "methodName": ["addGroupPortletPreferences"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesTestUtil . addLayoutPortletPreferences ( layout ,    portlet ,    null )  ;", "}", "METHOD_END"], "methodName": ["addLayoutPortletPreferences"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesLocalServiceUtil . addPortletPreferences ( TestPropsValues . getCompanyId (  )  ,    PREFS _ OWNER _ ID _ DEFAULT ,    PREFS _ OWNER _ TYPE _ LAYOUT ,    layout . getPlid (  )  ,    portlet . getPortletId (  )  ,    portlet ,    defaultPreferences )  ;", "}", "METHOD_END"], "methodName": ["addLayoutPortletPreferences"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesLocalServiceUtil . fetchPreferences ( TestPropsValues . getCompanyId (  )  ,    PREFS _ OWNER _ ID _ DEFAULT ,    PREFS _ OWNER _ TYPE _ LAYOUT ,    layout . getPlid (  )  ,    portlet . getPortletId (  )  )  ;", "}", "METHOD_END"], "methodName": ["fetchLayoutJxPortletPreferences"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesTestUtil . getPortletPreferencesXML ( null ,    null )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferencesXML"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesTestUtil . getPortletPreferencesXML ( name ,    null )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferencesXML"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  )  ;", "sb . append (  \"  < portlet - p >  \"  )  ;", "if    (  ( name    !  =    null )     |  |     ( values    !  =    null )  )     {", "sb . append (  \"  < preference >  \"  )  ;", "if    ( name    !  =    null )     {", "sb . append (  \"  < name >  \"  )  ;", "sb . append ( name )  ;", "sb . append (  \"  <  / name >  \"  )  ;", "}", "if    ( values    !  =    null )     {", "for    ( String   value    :    values )     {", "sb . append (  \"  < value >  \"  )  ;", "sb . append ( value )  ;", "sb . append (  \"  <  / value >  \"  )  ;", "}", "}", "sb . append (  \"  <  / preference >  \"  )  ;", "}", "sb . append (  \"  <  / portlet - p >  \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferencesXML"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesTestUtil . getPortletPreferencesXML ( null ,    values )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferencesXML"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ReflectionUtilAdvice .  _ declaredFieldThrowable )     !  =    null )     {", "throw   ReflectionUtilAdvice .  _ declaredFieldThrowable ;", "}", "return   proceedingJoinPoint . proceed (  )  ;", "}", "METHOD_END"], "methodName": ["getDeclaredField"], "fileName": "com.liferay.portal.test.aspects.ReflectionUtilAdvice"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ReflectionUtilAdvice .  _ declaredMethodThrowable )     !  =    null )     {", "throw   ReflectionUtilAdvice .  _ declaredMethodThrowable ;", "}", "return   proceedingJoinPoint . proceed (  )  ;", "}", "METHOD_END"], "methodName": ["getDeclaredMethod"], "fileName": "com.liferay.portal.test.aspects.ReflectionUtilAdvice"}, {"methodBody": ["METHOD_START", "{", "ReflectionUtilAdvice .  _ declaredFieldThrowable    =    declaredFieldThrowable ;", "}", "METHOD_END"], "methodName": ["setDeclaredFieldThrowable"], "fileName": "com.liferay.portal.test.aspects.ReflectionUtilAdvice"}, {"methodBody": ["METHOD_START", "{", "Class . forName ( ReflectionUtil . class . getName (  )  ,    true ,    ReflectionUtil . class . getClassLoader (  )  )  ;", ".  _ declaredMethodThrowable    =    declaredMethodThrowable ;", "}", "METHOD_END"], "methodName": ["setDeclaredMethodThrowable"], "fileName": "com.liferay.portal.test.aspects.ReflectionUtilAdvice"}]