[{"methodBody": ["METHOD_START", "{", "return    _ db . buildSQL ( query )  ;", "}", "METHOD_END"], "methodName": ["buildSQL"], "fileName": "com.liferay.portal.dao.db.BaseDBTestCase"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  5  )  ;", "sb . append (  \" select    *    from   SomeTable   where   someColumn 1     =     \"  )  ;", "sb . append (  _ db . getTemplateFalse (  )  )  ;", "sb . append (  \"    and   someColumn 2     =     \"  )  ;", "sb . append (  _ db . getTemplateTrue (  )  )  ;", "sb . append ( NEW _ LINE )  ;", "Assert . assertEquals ( sb . toString (  )  ,    buildSQL (  .  _ BOOLEAN _ LITERAL _ QUERY )  )  ;", "Assert . assertEquals (  (  (  .  _ BOOLEAN _ PATTERN _ QUERY )     +     ( StringPool . NEW _ LINE )  )  ,    buildSQL (  .  _ BOOLEAN _ PATTERN _ QUERY )  )  ;", "}", "METHOD_END"], "methodName": ["testReplaceTemplate"], "fileName": "com.liferay.portal.dao.db.BaseDBTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntry   originAssetEntry    =    getAssetEntry ( sourceStagedModel )  ;", "AssetEntry   targetAssetEntry    =    getAssetEntry ( targetStagedModel )  ;", "return   AssetLinkLocalServiceUtil . addLink ( PropsValues . getUserId (  )  ,    originAssetEntry . getEntryId (  )  ,    targetAssetEntry . getEntryId (  )  ,     0  ,    weight )  ;", "}", "METHOD_END"], "methodName": ["addAssetLink"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "parameterMap . put ( name ,    new   String [  ]  {    value    }  )  ;", "}", "METHOD_END"], "methodName": ["addParameter"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerBoolean   portletDataHandlerBoolean    =    new   PortletDataHandlerBoolean ( namespace ,    name )  ;", "addParameter ( parameterMap ,    portletDataHandlerBoolean . getNamespacedControlName (  )  ,    String . valueOf ( value )  )  ;", "}", "METHOD_END"], "methodName": ["addParameter"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["addStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["addStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "exportLayouts ( layoutIds ,    getExportParameterMap (  )  )  ;", "importLayouts ( parameterMap )  ;", "}", "METHOD_END"], "methodName": ["exportImportLayouts"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "User   user    =    TestPropsValues . getUser (  )  ;", "Map < String ,    Serializable >    exportLayoutSettingsMap    =    ConfigurationSettingsMapFactory . buildExportLayoutSettingsMap ( user ,    group . getGroupId (  )  ,    false ,    layoutIds ,    parameterMap )  ;", "Configuration   exportImportConfiguration    =    ConfigurationLocalServiceUtil . addDraftConfiguration ( user . getUserId (  )  ,    TYPE _ EXPORT _ LAYOUT ,    exportLayoutSettingsMap )  ;", "larFile    =    ServiceUtil . exportLayoutsAsFile ( exportImportConfiguration )  ;", "}", "METHOD_END"], "methodName": ["exportLayouts"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryLocalServiceUtil . getEntry ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  )  ;", "}", "METHOD_END"], "methodName": ["getAssetEntry"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap <  >  (  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ SETUP _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["getExportParameterMap"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap <  >  (  )  ;", "parameterMap . put ( DATA _ STRATEGY ,    new   String [  ]  {    PletDataHandlerKeys . DATA _ STRATEGY _ MIRROR _ OVERWRITE    }  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ SETUP _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["getImportParameterMap"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   stagedModel . getUuid (  )  ;", "}", "METHOD_END"], "methodName": ["getStagedModelUuid"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "User   user    =    TestPropsValues . getUser (  )  ;", "Map < String ,    Serializable >    importLayoutSettingsMap    =    ConfigurationSettingsMapFactory . buildImportLayoutSettingsMap ( user ,    importedGroup . getGroupId (  )  ,    false ,    null ,    parameterMap )  ;", "Configuration   exportImportConfiguration    =    ConfigurationLocalServiceUtil . addConfiguration ( user . getUserId (  )  ,    importedGroup . getGroupId (  )  ,    BLANK ,    BLANK ,    TYPE _ IMPORT _ LAYOUT ,    importLayoutSettingsMap ,    STATUS _ DRAFT ,    new   ServiceContext (  )  )  ;", "ServiceUtil . importLayouts ( exportImportConfiguration ,    larFile )  ;", "}", "METHOD_END"], "methodName": ["importLayouts"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "iedGroup    =    GroupTestUtil . addGroup (  )  ;", "layout    =    LayoutTestUtil . addLayout ( group )  ;", "LayoutLocalServiceUtil . deleteLayout ( layout ,    true ,    new   ServiceContext (  )  )  ;", "layout    =    LayoutTestUtil . addLayout ( group )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( larFile )     !  =    null )     &  &     ( larFile . exists (  )  )  )     {", "FileUtil . delete ( larFile )  ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue (  (  (  ( stagedModel . getCreateDate (  )  )     +     \"     \"  )     +     ( importedStagedModel . getCreateDate (  )  )  )  ,    DateUtil . equals ( stagedModel . getCreateDate (  )  ,    importedStagedModel . getCreateDate (  )  )  )  ;", "Assert . assertTrue (  (  (  ( stagedModel . getModifiedDate (  )  )     +     \"     \"  )     +     ( importedStagedModel . getModifiedDate (  )  )  )  ,    DateUtil . equals ( stagedModel . getModifiedDate (  )  ,    importedStagedModel . getModifiedDate (  )  )  )  ;", "Assert . assertEquals ( stagedModel . getUuid (  )  ,    importedStagedModel . getUuid (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateImportedStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( PortletDataHandlerControl   expectedControl    :    expectedControls )     {", "boolean   contains    =    false ;", "for    ( PortletDataHandlerControl   actualControl    :    actualControls )     {", "if    (  (  ( Objects . equals ( expectedControl . getControlName (  )  ,    actualControl . getControlName (  )  )  )     &  &     ( Objects . equals ( expectedControl . getControlLabel (  )  ,    actualControl . getControlLabel (  )  )  )  )     &  &     (  ( expectedControl . isDisabled (  )  )     =  =     ( actualControl . isDisabled (  )  )  )  )     {", "contains    =    true ;", "break ;", "}", "}", "Assert . assertTrue ( contains )  ;", "}", "}", "METHOD_END"], "methodName": ["_assertControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerBoolean   portletDataHandlerBoolean    =    new   PortletDataHandlerBoolean ( namespace ,    name )  ;", "parameterMap . put ( portletDataHandlerBoolean . getNamespacedControlName (  )  ,    new   String [  ]  {    String . valueOf ( value )     }  )  ;", "}", "METHOD_END"], "methodName": ["addBooleanParameter"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "ManifestSummary   manifestSummary    =    portletDataContext . getManifestSummary (  )  ;", "checkManifestSummaryReferrerClassNames ( manifestSummary )  ;", "for    ( String   manifestSummaryKey    :    expectedManifestSummary . getManifestSummaryKeys (  )  )     {", "String [  ]    keyParts    =    StringUtil . split ( manifestSummaryKey ,    POUND )  ;", "long   expectedModelAdditionCount    =    expectedManifestSummary . getModelAdditionCount ( manifestSummaryKey )  ;", "StagedModelType   stagedModelType    =    new   StagedModelType ( keyParts [  0  ]  )  ;", "if    (  ( keyParts . length )     >     1  )     {", "stagedModelType    =    new   StagedModelType ( keyParts [  0  ]  ,    keyParts [  1  ]  )  ;", "}", "long   modelAdditionCount    =    manifestSummary . getModelAdditionCount ( stagedModelType )  ;", "if    ( expectedModelAdditionCount    =  =     0  )     {", "Assert . assertFalse (  ( modelAdditionCount    >     0  )  )  ;", "} else    {", "Assert . assertEquals ( expectedModelAdditionCount ,    modelAdditionCount )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkManifestSummary"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( String   manifestSummaryKey    :    manifestSummary . getManifestSummaryKeys (  )  )     {", "Assert . assertFalse ( manifestSummaryKey . endsWith ( REFERRER _ CLASS _ NAME _ ALL )  )  ;", "Assert . assertFalse ( manifestSummaryKey . endsWith ( REFERRER _ CLASS _ NAME _ ANY )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkManifestSummaryReferrerClassNames"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   DataLevel . SITE ;", "}", "METHOD_END"], "methodName": ["getDataLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . EMPTY _ ARRAY ;", "}", "METHOD_END"], "methodName": ["getDataPortletPreferences"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  )  ;", "}", "METHOD_END"], "methodName": ["getEndDate"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( plid    <     0  )     {", "return   new   Control [  ]  {    new   com . liferay . exportimport . kernel . lar . Boolean ( null ,    Keys . PORTLET _ SETUP ,     \" setup \"  ,    true ,    false ,    portletDataHandlerControls ,    null ,    null )     }  ;", "} else    {", "return   new   Control [  0  ]  ;", "}", "}", "METHOD_END"], "methodName": ["getExportConfigurationControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getExportControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getExportMetadataControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "List < StagedModel >    stagedModels    =    getStagedModels (  )  ;", "return   stagedModels . size (  )  ;", "}", "METHOD_END"], "methodName": ["getExportModelCount"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getImportControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getImportMetadataControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "Collection <  >    portletDataHandlers    =    registry . getServices (  . class ,     (  (  \"  ( name =  \"     +    portletId )     +     \"  )  \"  )  )  ;", "Iterator <  >    iterator    =    portletDataHandlers . iterator (  )  ;", "return   iterator . next (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getPortletDataHandler"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return    \"  1  .  0  .  0  \"  ;", "}", "METHOD_END"], "methodName": ["getSchemaVersion"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["getStagedModels"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PortletDataHandlerControl [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getStagingControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  (  ( System . currentTimeMillis (  )  )     -     ( Time . HOUR )  )  )  ;", "}", "METHOD_END"], "methodName": ["getStartDate"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap <  >  (  )  ;", "addParameters ( parameterMap )  ;", "zipWriter    =    ZipWriterFactoryUtil . getZipWriter (  )  ;", "portletDataContext    =    ContextFactoryUtil . createExportContext ( stagingGroup . getCompanyId (  )  ,    stagingGroup . getGroupId (  )  ,    parameterMap ,    getStartDate (  )  ,    getEndDate (  )  ,    zipWriter )  ;", "rootElement    =    SAXReaderUtil . createElement (  \" root \"  )  ;", "portletDataContext . setExportDataRootElement ( rootElement )  ;", "missingReferencesElement    =    SAXReaderUtil . createElement (  \" missing - references \"  )  ;", "portletDataContext . setMissingReferencesElement ( missingReferencesElement )  ;", "}", "METHOD_END"], "methodName": ["initContext"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "DataLevel   dataLevel    =    getDataLevel (  )  ;", "return   dataLevel . equals ( PORTAL )  ;", "}", "METHOD_END"], "methodName": ["isDataPortalLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "DataLevel   dataLevel    =    getDataLevel (  )  ;", "return   dataLevel . equals ( PORTLET _ INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["isDataPortletInstanceLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "DataLevel   dataLevel    =    getDataLevel (  )  ;", "return   dataLevel . equals ( SITE )  ;", "}", "METHOD_END"], "methodName": ["isDataSiteLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isDeleteDataTested"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( isDataPortletInstanceLevel (  )  )     &  &     (  !  ( ArrayUtil . isEmpty ( portletDataHandler . getDataPortletPreferences (  )  )  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDisplayPortlet"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isExportImportDataTested"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isGetExportConfigurationControlsTested"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isGetExportModelCountTested"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "stagingGroup    =    GroupTestUtil . addGroup (  )  ;", "portletId    =    getPortletId (  )  ;", "portletDataHandler    =    get ( portletId )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initContext (  )  ;", "PortletPreferences   portletPreferences    =    p . addDefaultData ( portletDataContext ,    portletId ,    new   PortletPreferencesImpl (  )  )  ;", "validateDefaultData ( portletPreferences )  ;", "}", "METHOD_END"], "methodName": ["testAddDefaultData"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( getDataLevel (  )  ,    portletDataHandler . getDataLevel (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDataLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isDeleteDataTested (  )  )  )     {", "return ;", "}", "initContext (  )  ;", "PortletPreferences   portletPreferences    =    new   PortletPreferencesImpl (  )  ;", "addStagedModels (  )  ;", "portletDataContext . setEndDate ( getEndDate (  )  )  ;", "p . deleteData ( portletDataContext ,    portletId ,    portletPreferences )  ;", "List < StagedModel >    stagedModels    =    getStagedModels (  )  ;", "Assert . assertEquals ( stagedModels . toString (  )  ,     0  ,    stagedModels . size (  )  )  ;", "for    ( String   preferenceKey    :    p . getDataPortletPreferences (  )  )     {", "String   portletPreference    =    portletPreferences . getValue ( preferenceKey ,    BLANK )  ;", "Assert . assertEquals ( BLANK ,    portletPreference )  ;", "}", "}", "METHOD_END"], "methodName": ["testDeleteData"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isExportImportDataTested (  )  )  )     {", "return ;", "}", "initContext (  )  ;", "addStagedModels (  )  ;", "PortletPreferences   portletPreferences    =    new   PortletPreferencesImpl (  )  ;", "portletDataContext . setEndDate ( getEndDate (  )  )  ;", "String   exportData    =    p . exportData ( portletDataContext ,    portletId ,    portletPreferences )  ;", "Document   document    =    SAXReaderUtil . read ( exportData )  ;", "Element   rootElement    =    document . getRootElement (  )  ;", "List < StagedModel >    exportedStagedModels    =    getStagedModels (  )  ;", "for    ( StagedModel   stagedModel    :    exportedStagedModels )     {", "Class <  ?  >    modelClass    =    stagedModel . getModelClass (  )  ;", "Element   element    =    rootElement . element ( modelClass . getSimpleName (  )  )  ;", "List < Node >    stagedModelNodes    =    element . content (  )  ;", "boolean   contains    =    false ;", "for    ( Node   node    :    stagedModelNodes )     {", "if    ( node   instanceof   Element )     {", "Element   nodeElement    =     (  ( Element )     ( node )  )  ;", "Attribute   uuidAttribute    =    nodeElement . attribute (  \" uuid \"  )  ;", "String   uuid    =    uuidAttribute . getValue (  )  ;", "if    ( Objects . equals ( stagedModel . getUuid (  )  ,    uuid )  )     {", "contains    =    true ;", "}", "}", "}", "Assert . assertTrue ( contains )  ;", "}", "ZipWriter   exportZipWriter    =    portletDataContext . getZipWriter (  )  ;", "initContext (  )  ;", "Group   cleanGroup    =    GroupTestUtil . addGroup (  )  ;", "UserIdStrategy   testUserIdStrategy    =    new   UserIdStrategy (  )     {", "@ Override", "public   long   getUserId ( String   userUuid )     {", "try    {", "return   TestPropsValues . getUserId (  )  ;", "}    catch    ( Exception   e )     {", "return    0  ;", "}", "}", "}  ;", "portletDataContext . setUserIdStrategy ( testUserIdStrategy )  ;", "portletDataContext . setDataStrategy ( DATA _ STRATEGY _ MIRROR )  ;", "portletDataContext . setZipReader ( ZipReaderFactoryUtil . getZipReader ( exportZipWriter . getFile (  )  )  )  ;", "portletDataContext . setScopeGroupId ( cleanGroup . getGroupId (  )  )  ;", "portletDataContext . setGroupId ( cleanGroup . getGroupId (  )  )  ;", "portletDataContext . clearScopedPrimaryKeys (  )  ;", "p . importData ( portletDataContext ,    portletId ,    portletPreferences ,    exportData )  ;", "List < StagedModel >    importedStagedModels    =    getStagedModels (  )  ;", "Set < String >    exportedUuidSet    =    new   HashSet <  >  (  )  ;", "Set < String >    importedUuidSet    =    new   HashSet <  >  (  )  ;", "for    ( StagedModel   stagedModel    :    exportedStagedModels )     {", "exportedUuidSet . add ( stagedModel . getUuid (  )  )  ;", "}", "for    ( StagedModel   stagedModel    :    importedStagedModels )     {", "importedUuidSet . add ( stagedModel . getUuid (  )  )  ;", "}", "Assert . assertEquals ( exportedUuidSet ,    importedUuidSet )  ;", "}", "METHOD_END"], "methodName": ["testExportImportData"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertArrayEquals ( getDataPortletPreferences (  )  ,    portletDataHandler . getDataPortletPreferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetDataPortletPreferences"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isGetExportConfigurationControlsTested (  )  )  )     {", "return ;", "}", "Portlet   portlet    =    PortletLocalServiceUtil . getPortletById ( portletId )  ;", "initContext (  )  ;", "Control [  ]    portletDataHandlerControls    =    null ;", "if    ( portletDataHandler . isDisplayPortlet (  )  )     {", "portletDataHandlerControls    =    portletDataHandler . getExportControls (  )  ;", "}", "Control [  ]    testControls    =    portletDataHandler . getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portlet ,    false )  ;", "_ assertControls ( getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portletDataHandlerControls ,     (  -  1  )  ,    false )  ,    testControls )  ;", "testControls    =    portletDataHandler . getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portlet ,    true )  ;", "_ assertControls ( getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portletDataHandlerControls ,     (  -  1  )  ,    true )  ,    testControls )  ;", "testControls    =    portletDataHandler . getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portlet ,    portletDataContext . getPlid (  )  ,    false )  ;", "_ assertControls ( getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portletDataHandlerControls ,    portletDataContext . getPlid (  )  ,    false )  ,    testControls )  ;", "testControls    =    portletDataHandler . getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portlet ,    portletDataContext . getPlid (  )  ,    true )  ;", "_ assertControls ( getExportConfigurationControls ( portletDataContext . getCompanyId (  )  ,    portletDataContext . getGroupId (  )  ,    portletDataHandlerControls ,    portletDataContext . getPlid (  )  ,    true )  ,    testControls )  ;", "}", "METHOD_END"], "methodName": ["testGetExportConfigurationControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "_ assertControls ( getExportControls (  )  ,    portletDataHandler . getExportControls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetExportControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "_ assertControls ( getExportMetadataControls (  )  ,    portletDataHandler . getExportMetadataControls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetExportMetadataControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isGetExportModelCountTested (  )  )  )     {", "return ;", "}", "initContext (  )  ;", "addStagedModels (  )  ;", "portletDataContext . setEndDate ( getEndDate (  )  )  ;", "p . prepareManifestSummary ( portletDataContext )  ;", "ManifestSummary   manifestSummary    =    portletDataContext . getManifestSummary (  )  ;", "Assert . assertEquals ( getExportModelCount (  )  ,    p . getExportModelCount ( manifestSummary )  )  ;", "}", "METHOD_END"], "methodName": ["testGetExportModelCount"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "PortletDataHandlerControl [  ]    testPortletDataHandlerControls    =    portletDataHandler . getImportConfigurationControls ( new   String [  ]  {     \" setup \"     }  )  ;", "_ assertControls ( new   PortletDataHandlerControl [  ]  {    new   com . liferay . exportimport . kernel . lar . PortletDataHandlerBoolean ( null ,    PortletDataHandlerKeys . PORTLET _ SETUP ,     \" setup \"  ,    true ,    false ,    null ,    null ,    null )     }  ,    testPortletDataHandlerControls )  ;", "testPortletDataHandlerControls    =    portletDataHandler . getImportConfigurationControls ( new   String [  ]  {     \" archived - setups \"     }  )  ;", "_ assertControls ( new   PortletDataHandlerControl [  ]  {    new   com . liferay . exportimport . kernel . lar . PortletDataHandlerBoolean ( null ,    PortletDataHandlerKeys . PORTLET _ ARCHIVED _ SETUPS ,     \" configuration - templates \"  ,    true ,    false ,    null ,    null ,    null )     }  ,    testPortletDataHandlerControls )  ;", "testPortletDataHandlerControls    =    portletDataHandler . getImportConfigurationControls ( new   String [  ]  {     \" user - preferences \"     }  )  ;", "_ assertControls ( new   PortletDataHandlerControl [  ]  {    new   com . liferay . exportimport . kernel . lar . PortletDataHandlerBoolean ( null ,    PortletDataHandlerKeys . PORTLET _ USER _ PREFERENCES ,     \" user - preferences \"  ,    true ,    false ,    null ,    null ,    null )     }  ,    testPortletDataHandlerControls )  ;", "}", "METHOD_END"], "methodName": ["testGetImportConfigurationControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "_ assertControls ( getImportControls (  )  ,    portletDataHandler . getImportControls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetImportControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "_ assertControls ( getImportMetadataControls (  )  ,    portletDataHandler . getImportMetadataControls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetImportMetadataControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "_ assertControls ( getStagingControls (  )  ,    portletDataHandler . getStagingControls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetStagingControls"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( isDataPortalLevel (  )  ,    portletDataHandler . isDataPortalLevel (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsDataPortalLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( isDataPortletInstanceLevel (  )  ,    portletDataHandler . isDataPortletInstanceLevel (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsDataPortletInstanceLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( isDataSiteLevel (  )  ,    portletDataHandler . isDataSiteLevel (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsDataSiteLevel"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( isDisplayPortlet (  )  ,    portletDataHandler . isDisplayPortlet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsDisplayPortlet"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initContext (  )  ;", "addStagedModels (  )  ;", "portletDataContext . setEndDate ( getEndDate (  )  )  ;", "p . prepareManifestSummary ( portletDataContext )  ;", "ManifestSummary   manifestSummary    =    portletDataContext . getManifestSummary (  )  ;", "ManifestSummary   expectedManifestSummary    =     (  ( ManifestSummary )     ( manifestSummary . clone (  )  )  )  ;", "manifestSummary . resetCounters (  )  ;", "p . exportData ( portletDataContext ,    portletId ,    new   PortletPreferencesImpl (  )  )  ;", "checkManifestSummary ( expectedManifestSummary )  ;", "}", "METHOD_END"], "methodName": ["testPrepareManifestSummary"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue ( portletDataHandler . validateSchemaVersion ( getSchemaVersion (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testValidateSchemaVersion"], "fileName": "com.liferay.portal.lar.test.BasePortletDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "addParameter ( parameterMap ,    getNamespace (  )  ,    name ,    value )  ;", "}", "METHOD_END"], "methodName": ["addParameter"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["addVersion"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "exportImportPortlet ( portletId ,    new   LinkedHashMap < String ,    String [  ]  >  (  )  ,    new   LinkedHashMap < String ,    String [  ]  >  (  )  )  ;", "}", "METHOD_END"], "methodName": ["exportImportPortlet"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "User   user    =    TestPropsValues . getUser (  )  ;", "MapUtil . merge ( getExportParameterMap (  )  ,    exportParameterMap )  ;", "Map < String ,    Serializable >    settingsMap    =    ExportImportConfigurationSettingsMapFactory . buildExportPortletSettingsMap ( user ,    layout . getPlid (  )  ,    layout . getGroupId (  )  ,    portletId ,    exportParameterMap ,    BLANK )  ;", "ExportImportConfiguration   exportImportConfiguration    =    ExportImportConfigurationLocalServiceUtil . addDraftExportImportConfiguration ( user . getUserId (  )  ,    TYPE _ PUBLISH _ PORTLET _ LOCAL ,    settingsMap )  ;", "ExportImportThreadLocal . setPortletStagingInProcess ( true )  ;", "ExportImportLifecycleManagerUtil . fireExportImportLifecycleEvent ( EVENT _ PUBLICATION _ PORTLET _ LOCAL _ STARTED ,    PROCESS _ FLAG _ PORTLET _ STAGING _ IN _ PROCESS ,    String . valueOf ( exportImportConfiguration . gConfigurationId (  )  )  ,    exportImportConfiguration )  ;", "try    {", "larFile    =    ExportImportLocalServiceUtil . exportPortletInfoAsFile ( exportImportConfiguration )  ;", "importedLayout    =    LayoutTestUtil . addLayout ( importedGroup )  ;", "MapUtil . merge ( getImportParameterMap (  )  ,    importParameterMap )  ;", "settingsMap    =    ExportImportConfigurationSettingsMapFactory . buildImportPortletSettingsMap ( user ,    importedLayout . getPlid (  )  ,    importedGroup . getGroupId (  )  ,    portletId ,    importParameterMap )  ;", "exportImportConfiguration    =    ExportImportConfigurationLocalServiceUtil . updateExportImportConfiguration ( user . getUserId (  )  ,    exportImportConfiguration . gConfigurationId (  )  ,    BLANK ,    BLANK ,    settingsMap ,    new   ServiceContext (  )  )  ;", "exportImportConfiguration . setGroupId ( importedGroup . getGroupId (  )  )  ;", "exportImportConfiguration    =    ExportImportConfigurationLocalServiceUtil . updateExportImportConfiguration ( exportImportConfiguration )  ;", "ExportImportLocalServiceUtil . importPortletDataDeletions ( exportImportConfiguration ,    larFile )  ;", "ExportImportLocalServiceUtil . importPortletInfo ( exportImportConfiguration ,    larFile )  ;", "ExportImportLifecycleManagerUtil . fireExportImportLifecycleEvent ( EVENT _ PUBLICATION _ PORTLET _ LOCAL _ SUCCEEDED ,    PROCESS _ FLAG _ PORTLET _ STAGING _ IN _ PROCESS ,    String . valueOf ( exportImportConfiguration . gConfigurationId (  )  )  ,    exportImportConfiguration )  ;", "}    finally    {", "ExportImportThreadLocal . setPortletStagingInProcess ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["exportImportPortlet"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "String   portletId    =    LayoutTestUtil . addPortletToLayout ( TestPropsValues . getUserId (  )  ,    layout ,    getPortletId (  )  ,     \" column -  1  \"  ,    preferenceMap )  ;", "ePortlet ( portletId )  ;", "return   LayoutTestUtil . getPortletPreferences ( importedLayout ,    portletId )  ;", "}", "METHOD_END"], "methodName": ["getImportedPortletPreferences"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getNamespace"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getPortletId"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isVersioningEnabled"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "StagedModel   relatedStagedModel 1     =    addStagedModel ( group . getGroupId (  )  )  ;", "StagedModel   relatedStagedModel 2     =    addStagedModel ( group . getGroupId (  )  )  ;", "addAssetLink ( stagedModel ,    relatedStagedModel 1  ,     1  )  ;", "addAssetLink ( stagedModel ,    relatedStagedModel 2  ,     2  )  ;", "ePortlet ( getPortletId (  )  )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( getStagedModelUuid ( stagedModel )  ,    importedGroup . getGroupId (  )  )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "validateImportedLinks ( stagedModel ,    importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testExportImportAssetLinks"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Portlet   portlet    =    PortletLocalServiceUtil . getPortletById ( group . getCompanyId (  )  ,    getPortletId (  )  )  ;", "if    ( portlet    =  =    null )     {", "return ;", "}", "PortletDataHandler   portletDataHandler    =    portlet . getPortletDataHandlerInstance (  )  ;", "if    (  !  ( portletDataHandler . isDataLocalized (  )  )  )     {", "Assert . assertTrue (  \" This   test   does   not   apply \"  ,    true )  ;", "return ;", "}", "GroupTestUtil . updateDisplaySettings ( group . getGroupId (  )  ,    sourceAvailableLocales ,    null )  ;", "GroupTestUtil . updateDisplaySettings ( importedGroup . getGroupId (  )  ,    targetAvailableLocales ,    null )  ;", "try    {", "ePortlet ( getPortletId (  )  )  ;", "Assert . assertFalse ( expectFailure )  ;", "}    catch    ( LocaleException   le )     {", "Assert . assertTrue ( expectFailure )  ;", "}", "}", "METHOD_END"], "methodName": ["testExportImportAvailableLocales"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "if    ( stagedModel    =  =    null )     {", "return ;", "}", "String   stagedModelUuid    =    getStagedModelUuid ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "deleteStagedModel ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModelUuid ,    importedGroup . getGroupId (  )  )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "Map < String ,    String [  ]  >    exportParameterMap    =    new   LinkedHashMap <  >  (  )  ;", "exportParameterMap . put ( DELETIONS ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "ePortlet ( getPortletId (  )  ,    exportParameterMap ,    getImportParameterMap (  )  )  ;", "importedStagedModel    =    getStagedModel ( stagedModelUuid ,    importedGroup . getGroupId (  )  )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "Map < String ,    String [  ]  >    importParameterMap    =    new   LinkedHashMap <  >  (  )  ;", "importParameterMap . put ( DELETIONS ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "ePortlet ( getPortletId (  )  ,    exportParameterMap ,    importParameterMap )  ;", "try    {", "importedStagedModel    =    getStagedModel ( stagedModelUuid ,    importedGroup . getGroupId (  )  )  ;", "Assert . assertNull ( importedStagedModel )  ;", "}    catch    ( Exception   e )     {", "}", "}", "METHOD_END"], "methodName": ["testExportImportDeletions"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Portlet   portlet    =    PortletLocalServiceUtil . getPortletById ( group . getCompanyId (  )  ,    getPortletId (  )  )  ;", "if    ( portlet    =  =    null )     {", "return ;", "}", "if    (  ( scopeType . equals (  \" layout \"  )  )     &  &     (  !  ( portlet . isScopeable (  )  )  )  )     {", "Assert . assertTrue (  \" This   test   does   not   apply \"  ,    true )  ;", "return ;", "}", "TemplateHandler   templateHandler    =    portlet . getTemplateHandlerInstance (  )  ;", "if    (  ( templateHandler    =  =    null )     |  |     (  !  ( templateHandler . isDisplayTemplateHandler (  )  )  )  )     {", "Assert . assertTrue (  \" This   test   does   not   apply \"  ,    true )  ;", "return ;", "}", "String   className    =    templateHandler . getClassName (  )  ;", "long   resourceClassNameId    =    PortalUtil . getClassNameId (  \" let . display . template . PortletDisplayTemplate \"  )  ;", "DDMTemplate   ddmTemplate    =    DDMTemplateTestUtil . addTemplate ( displayStyleGroupId ,    PortalUtil . getClassNameId ( className )  ,     0  ,    resourceClassNameId )  ;", "Map < String ,    String [  ]  >    preferenceMap    =    new   HashMap <  >  (  )  ;", "String   displayStyle    =     ( PortletDisplayTemplateManager . DISPLAY _ STYLE _ PREFIX )     +     ( ddmTemplate . getTemplateKey (  )  )  ;", "preferenceMap . put (  \" displayStyle \"  ,    new   String [  ]  {    displayStyle    }  )  ;", "preferenceMap . put (  \" displayStyleGroupId \"  ,    new   String [  ]  {    String . valueOf ( ddmTemplate . getGroupId (  )  )     }  )  ;", "if    ( scopeType . equals (  \" layout \"  )  )     {", "preferenceMap . put (  \" lfrScopeLayoutUuid \"  ,    new   String [  ]  {    this . layout . getUuid (  )     }  )  ;", "}", "preferenceMap . put (  \" lfrScopeType \"  ,    new   String [  ]  {    scopeType    }  )  ;", "PortletPreferences   portletPreferences    =    getImportedPortletPreferences ( preferenceMap )  ;", "String   importedDisplayStyle    =    portletPreferences . getValue (  \" displayStyle \"  ,    BLANK )  ;", "Assert . assertEquals ( displayStyle ,    importedDisplayStyle )  ;", "long   importedDisplayStyleGroupId    =    GetterUtil . getLong ( portletPreferences . getValue (  \" displayStyleGroupId \"  ,    null )  )  ;", "long   expectedDisplayStyleGroupId    =    importedGroup . getGroupId (  )  ;", "if    ( scopeType . equals (  \" company \"  )  )     {", "Group   companyGroup    =    GroupLocalServiceUtil . getCompanyGroup ( importedGroup . getCompanyId (  )  )  ;", "expectedDisplayStyleGroupId    =    companyGroup . getGroupId (  )  ;", "} else", "if    ( displayStyleGroupId    !  =     ( group . getGroupId (  )  )  )     {", "expectedDisplayStyleGroupId    =    displayStyleGroupId ;", "}", "Assert . assertEquals ( expectedDisplayStyleGroupId ,    importedDisplayStyleGroupId )  ;", "}", "METHOD_END"], "methodName": ["testExportImportDisplayStyle"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "testExportImportDisplayStyle ( group . getGroupId (  )  ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["testExportImportDisplayStyleFromCurrentGroup"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Group   group 2     =    GroupTestUtil . addGroup (  )  ;", "tesDisplayStyle ( group 2  . getGroupId (  )  ,    BLANK )  ;", "}", "METHOD_END"], "methodName": ["testExportImportDisplayStyleFromDifferentGroup"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Group   companyGroup    =    GroupLocalServiceUtil . getCompanyGroup ( group . getCompanyId (  )  )  ;", "tesDisplayStyle ( companyGroup . getGroupId (  )  ,     \" company \"  )  ;", "}", "METHOD_END"], "methodName": ["testExportImportDisplayStyleFromGlobalScope"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "testExportImportDisplayStyle ( group . getGroupId (  )  ,     \" layout \"  )  ;", "}", "METHOD_END"], "methodName": ["testExportImportDisplayStyleFromLayoutScope"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "testExportImportAvailableLocales ( Arrays . asList ( US ,    SPAIN )  ,    Arrays . asList ( US ,    GERMANY )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testExportImportInvalidAvailableLocales"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "testExportImportAvailableLocales ( Arrays . asList ( US ,    SPAIN )  ,    Arrays . asList ( US ,    SPAIN ,    GERMANY )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testExportImportValidAvailableLocales"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "Date   lastPublishDate    =    new   Date (  (  ( System . currentTimeMillis (  )  )     -     ( Time . HOUR )  )  )  ;", "Date   stagedModelCreationDate    =    new   Date (  (  ( lastPublishDate . getTime (  )  )     +     ( Time . MINUTE )  )  )  ;", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  ,    stagedModelCreationDate )  ;", "if    ( stagedModel    =  =    null )     {", "return ;", "}", "LayoutTestUtil . addPortletToLayout ( TestPropsValues . getUserId (  )  ,    layout ,    getPortletId (  )  ,     \" column -  1  \"  ,    new   HashMap < String ,    String [  ]  >  (  )  )  ;", "PortletPreferences   portletPreferences    =    PortletPreferencesFactoryUtil . getStrictPortletSetup ( layout ,    getPortletId (  )  )  ;", "portletPreferences . setValue (  \" last - publish - date \"  ,    String . valueOf ( lastPublishDate . getTime (  )  )  )  ;", "portletPreferences . store (  )  ;", "Map < String ,    String [  ]  >    exportParameterMap    =    new   LinkedHashMap <  >  (  )  ;", "exportParameterMap . put ( UPDATE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "exportParameterMap . put (  \" range \"  ,    new   String [  ]  {    DateUtil . RANGE _ FROM _ LAST _ PUBLISH _ DATE    }  )  ;", "Map < String ,    String [  ]  >    importParameterMap    =    new   LinkedHashMap <  >  (  )  ;", "portletPreferences    =    PortletPreferencesFactoryUtil . getStrictPortletSetup ( layout ,    getPortletId (  )  )  ;", "Date   oldLastPublishDate    =    DateUtil . getLastPublishDate ( portletPreferences )  ;", "exportImportPortlet ( getPortletId (  )  ,    exportParameterMap ,    importParameterMap )  ;", "portletPreferences    =    PortletPreferencesFactoryUtil . getStrictPortletSetup ( layout ,    getPortletId (  )  )  ;", "Date   newLastPublishDate    =    DateUtil . getLastPublishDate ( portletPreferences )  ;", "Assert . assertTrue ( newLastPublishDate . after ( oldLastPublishDate )  )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( getStagedModelUuid ( stagedModel )  ,    importedGroup . getGroupId (  )  )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testUpdateLastPublishDate"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersioningEnabled (  )  )  )     {", "return ;", "}", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "addVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testVersioning1"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersioningEnabled (  )  )  )     {", "return ;", "}", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "Thread . sleep (  4  0  0  0  )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "addVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testVersioning2"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersioningEnabled (  )  )  )     {", "return ;", "}", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "stagedModel    =    addVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "deleteFirstVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testVersioningDeleteFirst"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersioningEnabled (  )  )  )     {", "return ;", "}", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "stagedModel    =    addVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "deleteLatestVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testVersioningDeleteLatest"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersioningEnabled (  )  )  )     {", "return ;", "}", "StagedModel   stagedModel    =    addStagedModel ( group . getGroupId (  )  )  ;", "addVersion ( stagedModel )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "ePortlet ( getPortletId (  )  )  ;", "validateVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testVersioningExportImportTwice"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntry   originalAssetEntry    =    getAssetEntry ( originalStagedModel )  ;", "List < AssetLink >    originalAssetLinks    =    AssetLinkLocalServiceUtil . getLinks ( originalAssetEntry . getEntryId (  )  )  ;", "AssetEntry   iedAssetEntry    =    getAssetEntry ( iedStagedModel )  ;", "List < AssetLink >    iedAssetLinks    =    AssetLinkLocalServiceUtil . getLinks ( iedAssetEntry . getEntryId (  )  )  ;", "Assert . assertEquals ( iedAssetLinks . toString (  )  ,    originalAssetLinks . size (  )  ,    iedAssetLinks . size (  )  )  ;", "for    ( AssetLink   originalLink    :    originalAssetLinks )     {", "AssetEntry   sourceAssetEntry    =    AssetEntryLocalServiceUtil . getEntry ( originalLink . getEntryId 1  (  )  )  ;", "AssetEntry   targetAssetEntry    =    AssetEntryLocalServiceUtil . getEntry ( originalLink . getEntryId 2  (  )  )  ;", "Iterator < AssetLink >    iterator    =    iedAssetLinks . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "AssetLink   iedLink    =    iterator . next (  )  ;", "AssetEntry   iedLinkSourceAssetEntry    =    AssetEntryLocalServiceUtil . getEntry ( iedLink . getEntryId 1  (  )  )  ;", "AssetEntry   iedLinkTargetAssetEntry    =    AssetEntryLocalServiceUtil . getEntry ( iedLink . getEntryId 2  (  )  )  ;", "if    (  !  ( Objects . equals ( sourceAssetEntry . getClassUuid (  )  ,    iedLinkSourceAssetEntry . getClassUuid (  )  )  )  )     {", "continue ;", "}", "if    (  !  ( Objects . equals ( targetAssetEntry . getClassUuid (  )  ,    iedLinkTargetAssetEntry . getClassUuid (  )  )  )  )     {", "continue ;", "}", "Assert . assertEquals ( originalLink . getWeight (  )  ,    iedLink . getWeight (  )  )  ;", "Assert . assertEquals ( originalLink . getType (  )  ,    iedLink . getType (  )  )  ;", "iterator . remove (  )  ;", "break ;", "}", "}", "Assert . assertEquals ( iedAssetLinks . toString (  )  ,     0  ,    iedAssetLinks . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateImportedLinks"], "fileName": "com.liferay.portal.lar.test.BasePortletExportImportTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isCommentableStagedModel (  )  )  )     {", "return ;", "}", "User   user    =    TestPropsValues . getUser (  )  ;", "String   className    =    ExportImportClassedModelUtil . getClassName ( stagedModel )  ;", "long   classPK    =    ExportImportClassedModelUtil . getClassPK ( stagedModel )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( stagingGroup . getGroupId (  )  ,    user . getUserId (  )  )  ;", "CommentManagerUtil . addComment ( user . getUserId (  )  ,    stagingGroup . getGroupId (  )  ,    className ,    classPK ,    user . getFullName (  )  ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  5  0  )  ,    new   kernel . service . IdentityServiceContextFunction ( serviceContext )  )  ;", "}", "METHOD_END"], "methodName": ["addComments"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["addDefaultDependentStagedModelsMap"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["addDefaultStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "List < StagedModel >    dependentStagedModels    =    dependentStagedModelsMap . get ( clazz . getSimpleName (  )  )  ;", "if    ( dependentStagedModels    =  =    null )     {", "dependentStagedModels    =    new   ArrayList (  )  ;", "dependentStagedModelsMap . put ( clazz . getSimpleName (  )  ,    dependentStagedModels )  ;", "}", "dependentStagedModels . add ( dependentStagedModel )  ;", "return   dependentStagedModels ;", "}", "METHOD_END"], "methodName": ["addDependentStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["addDependentStagedModelsMap"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "RatingsTestUtil . addEntry ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  )  ;", "}", "METHOD_END"], "methodName": ["addRatings"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["addVersion"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" rawtypes \"  )", "stagedModelDataHandler    =    RegistryUtil . get ( ExportImportClassedModelUtil . getClassName ( stagedModel )  )  ;", "stagedModelDataHandler . deleteStagedModel ( stagedModel )  ;", "for    ( List < StagedModel >    dependentStagedModels    :    dependentStagedModelsMap . values (  )  )     {", "for    ( StagedModel   dependentStagedModel    :    dependentStagedModels )     {", "stagedModelDataHandler    =    RegistryUtil . get ( ExportImportClassedModelUtil . getClassName ( dependentStagedModel )  )  ;", "stagedModelDataHandler . deleteStagedModel ( dependentStagedModel )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["deleteStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initExport (  )  ;", "Util . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "initImport (  )  ;", "StagedModel   exportedStagedModel    =    readExportedStagedModel ( stagedModel )  ;", "Assert . assertNotNull ( exportedStagedModel )  ;", "Util . importStagedModel ( portletDataContext ,    exportedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["exportImportStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   AssetEntryLocalServiceUtil . fetchEntry ( group . getGroupId (  )  ,    stagedModel . getUuid (  )  )  ;", "}", "METHOD_END"], "methodName": ["fetchAssetEntry"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  )  ;", "}", "METHOD_END"], "methodName": ["getEndDate"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    parameterMap    =    new   LinkedHashMap <  >  (  )  ;", "parameterMap . put ( DATA _ STRATEGY ,    new   String [  ]  {    PortletKeys . DATA _ STRATEGY _ MIRROR _ OVERWRITE    }  )  ;", "parameterMap . put ( IGNORE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ CONFIGURATION _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ DATA _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "parameterMap . put ( PORTLET _ SETUP _ ALL ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "return   parameterMap ;", "}", "METHOD_END"], "methodName": ["getParameterMap"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  (  ( System . currentTimeMillis (  )  )     -     ( Time . HOUR )  )  )  ;", "}", "METHOD_END"], "methodName": ["getStartDate"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "zipWriter    =    ZipWriterFactoryUtil . getZipWriter (  )  ;", "portletDataContext    =    PortletDataContextFactoryUtil . createExportPortletDataContext ( stagingGroup . getCompanyId (  )  ,    stagingGroup . getGroupId (  )  ,    getParameterMap (  )  ,    getStartDate (  )  ,    getEndDate (  )  ,    zipWriter )  ;", "portletDataContext . setExportImportProcessId (  . class . getName (  )  )  ;", "rootElement    =    SAXReaderUtil . createElement (  \" root \"  )  ;", "portletDataContext . setExportDataRootElement ( rootElement )  ;", "missingReferencesElement    =    rootElement . addElement (  \" missing - references \"  )  ;", "portletDataContext . setMissingReferencesElement ( missingReferencesElement )  ;", "}", "METHOD_END"], "methodName": ["initExport"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "userIdStrategy    =    new   BaseStagedModelDataHandlerTestCase . TestUserIdStrategy (  )  ;", "zipReader    =    ZipReaderFactoryUtil . getZipReader ( zipWriter . getFile (  )  )  ;", "String   xml    =    zipReader . getEntryAsString (  \"  / manifest . xml \"  )  ;", "if    ( xml    =  =    null )     {", "Document   document    =    SAXReaderUtil . createDocument (  )  ;", "Element   rootElement    =    document . addElement (  \" root \"  )  ;", "rootElement . addElement (  \" header \"  )  ;", "zipWriter . addEntry (  \"  / manifest . xml \"  ,    document . asXML (  )  )  ;", "zipReader    =    ZipReaderFactoryUtil . getZipReader ( zipWriter . getFile (  )  )  ;", "}", "portletDataContext    =    PortletDataContextFactoryUtil . createImportPortletDataContext ( liveGroup . getCompanyId (  )  ,    liveGroup . getGroupId (  )  ,    getParameterMap (  )  ,    userIdStrategy ,    zipReader )  ;", "portletDataContext . setExportImportProcessId ( BaseStagedModelDataHandlerTestCase . class . getName (  )  )  ;", "portletDataContext . setImportDataRootElement ( rootElement )  ;", "Element   missingReferencesElement    =    rootElement . element (  \" missing - references \"  )  ;", "if    ( missingReferencesElement    =  =    null )     {", "missingReferencesElement    =    rootElement . addElement (  \" missing - references \"  )  ;", "}", "portletDataContext . setMissingReferencesElement ( missingReferencesElement )  ;", "Group   sourceCompanyGroup    =    GroupLocalServiceUtil . getCompanyGroup ( stagingGroup . getCompanyId (  )  )  ;", "portletDataContext . setSourceCompanyGroupId ( sourceCompanyGroup . getGroupId (  )  )  ;", "portletDataContext . setSourceCompanyId ( stagingGroup . getCompanyId (  )  )  ;", "portletDataContext . setSourceGroupId ( stagingGroup . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["initImport"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isAssetPrioritySupported"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isCommentableStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isVersionableStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "String   stagedModelPath    =    ExportImportPathUtil . getModelPath ( stagedModel )  ;", "exported    =     (  (  )     ( portletDataContext . getZipEntryAsObject ( stagedModelPath )  )  )  ;", "return   exported ;", "}", "METHOD_END"], "methodName": ["readExportedStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "liveGroup    =    GroupTestUtil . addGroup (  )  ;", "stagingGroup    =    GroupTestUtil . addGroup (  )  ;", "ServiceTestUtil . setUser ( TestPropsValues . getUser (  )  )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( stagingGroup . getGroupId (  )  )  ;", "ServiceContextThreadLocal . pushServiceContext ( serviceContext )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportLastPublishDateUpdate"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContextThreadLocal . popServiceContext (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", "AssetEntry   assetEntry    =    fetchAssetEntry ( stagedModel ,    stagingGroup )  ;", "if    ( assetEntry    =  =    null )     {", "return ;", "}", "AssetVocabulary   assetVocabulary    =    AssetTestUtil . addVocabulary ( stagingGroup . getGroupId (  )  )  ;", "AssetCategory   assetCategory    =    AssetTestUtil . addCategory ( stagingGroup . getGroupId (  )  ,    assetVocabulary . getVocabularyId (  )  )  ;", "AssetTag   assetTag    =    AssetTestUtil . addTag ( stagingGroup . getGroupId (  )  )  ;", "assetEntry    =    AssetEntryLocalServiceUtil . updateEntry ( TestPropsValues . getUserId (  )  ,    stagingGroup . getGroupId (  )  ,    assetEntry . getCreateDate (  )  ,    assetEntry . getModifiedDate (  )  ,    assetEntry . getClassName (  )  ,    assetEntry . getClassPK (  )  ,    assetEntry . getClassUuid (  )  ,    assetEntry . getClassTypeId (  )  ,    new   long [  ]  {    assetCategory . getCategoryId (  )     }  ,    new   String [  ]  {    assetTag . getName (  )     }  ,    assetEntry . isListable (  )  ,    assetEntry . isVisible (  )  ,    assetEntry . getStartDate (  )  ,    assetEntry . getEndDate (  )  ,    assetEntry . getPublishDate (  )  ,    assetEntry . getExpirationDate (  )  ,    assetEntry . getMimeType (  )  ,    assetEntry . getTitle (  )  ,    assetEntry . getDescription (  )  ,    assetEntry . getSummary (  )  ,    assetEntry . getUrl (  )  ,    assetEntry . getLayoutUuid (  )  ,    assetEntry . getHeight (  )  ,    assetEntry . getWidth (  )  ,    assetEntry . getPriority (  )  )  ;", "exportImportStagedModel ( stagedModel )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "AssetEntry   importedAssetEntry    =    fetchAssetEntry ( importedStagedModel ,    liveGroup )  ;", "Assert . assertNotNull ( importedAssetEntry )  ;", "List < AssetTag >    assetTags    =    importedAssetEntry . getTags (  )  ;", "Assert . assertFalse ( assetTags . toString (  )  ,    assetTags . isEmpty (  )  )  ;", "List < AssetCategory >    assetCategories    =    importedAssetEntry . getCategories (  )  ;", "Assert . assertFalse ( assetCategories . toString (  )  ,    assetCategories . isEmpty (  )  )  ;", "assetEntry    =    fetchAssetEntry ( stagedModel ,    stagingGroup )  ;", "assetEntry    =    AssetEntryLocalServiceUtil . updateEntry ( TestPropsValues . getUserId (  )  ,    stagingGroup . getGroupId (  )  ,    assetEntry . getCreateDate (  )  ,    assetEntry . getModifiedDate (  )  ,    assetEntry . getClassName (  )  ,    assetEntry . getClassPK (  )  ,    assetEntry . getClassUuid (  )  ,    assetEntry . getClassTypeId (  )  ,    new   long [  0  ]  ,    new   String [  0  ]  ,    assetEntry . isListable (  )  ,    assetEntry . isVisible (  )  ,    assetEntry . getStartDate (  )  ,    assetEntry . getEndDate (  )  ,    assetEntry . getPublishDate (  )  ,    assetEntry . getExpirationDate (  )  ,    assetEntry . getMimeType (  )  ,    assetEntry . getTitle (  )  ,    assetEntry . getDescription (  )  ,    assetEntry . getSummary (  )  ,    assetEntry . getUrl (  )  ,    assetEntry . getLayoutUuid (  )  ,    assetEntry . getHeight (  )  ,    assetEntry . getWidth (  )  ,    assetEntry . getPriority (  )  )  ;", "exportImportStagedModel ( stagedModel )  ;", "importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "importedAssetEntry    =    fetchAssetEntry ( importedStagedModel ,    liveGroup )  ;", "Assert . assertNotNull ( importedAssetEntry )  ;", "assetTags    =    importedAssetEntry . getTags (  )  ;", "Assert . assertFalse ( assetTags . toString (  )  ,    assetTags . isEmpty (  )  )  ;", "assetCategories    =    importedAssetEntry . getCategories (  )  ;", "Assert . assertFalse ( assetCategories . toString (  )  ,    assetCategories . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCleanAssetCategoriesAndTags"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initExport (  )  ;", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", "addComments ( stagedModel )  ;", "addRatings ( stagedModel )  ;", "Util . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "validateExport ( portletDataContext ,    stagedModel ,    dependentStagedModelsMap )  ;", "initImport (  )  ;", "deleteStagedModel ( stagedModel ,    dependentStagedModelsMap ,    stagingGroup )  ;", "StagedModel   exportedStagedModel    =    readExportedStagedModel ( stagedModel )  ;", "Assert . assertNotNull ( exportedStagedModel )  ;", "Util . importStagedModel ( portletDataContext ,    exportedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testCleanStagedModelDataHandler"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initExport (  )  ;", "Map < String ,    List < StagedModel >  >    defaultDependentStagedModelsMap    =    addDefaultDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addDefaultStagedModel ( stagingGroup ,    defaultDependentStagedModelsMap )  ;", "if    ( stagedModel    =  =    null )     {", "return ;", "}", "Util . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "validateExport ( portletDataContext ,    stagedModel ,    defaultDependentStagedModelsMap )  ;", "Map < String ,    List < StagedModel >  >    secondDependentStagedModelsMap    =    addDefaultDependentStagedModelsMap ( liveGroup )  ;", "addDefaultStagedModel ( liveGroup ,    secondDependentStagedModelsMap )  ;", "initImport (  )  ;", "StagedModel   exportedStagedModel    =    readExportedStagedModel ( stagedModel )  ;", "Assert . assertNotNull ( exportedStagedModel )  ;", "Util . importStagedModel ( portletDataContext ,    exportedStagedModel )  ;", "Util . importStagedModel ( portletDataContext ,    exportedStagedModel )  ;", "String   uuid    =    exportedStagedModel . getUuid (  )  ;", "StagedModel   importedModel    =    getStagedModel ( uuid ,    liveGroup )  ;", "Assert . assertNotNull ( importedModel )  ;", "}", "METHOD_END"], "methodName": ["testExportImportWithDefaultData"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( supportLastPublishDateUpdate (  )  )  )     {", "return ;", "}", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    new   HashMap <  >  (  )  ;", "StagedGroupedModel   stagedGroupedModel    =     (  ( StagedGroupedModel )     ( addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  )  )  ;", "Assert . assertNull ( stagedGroupedModel . getLastPublishDate (  )  )  ;", "initExport (  )  ;", "Map < String ,    String [  ]  >    parameterMap    =    portletDataContext . getParameterMap (  )  ;", "parameterMap . put ( UPDATE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "try    {", "ExportImportThreadLocal . setPortletStagingInProcess ( true )  ;", "Util . exportStagedModel ( portletDataContext ,    stagedGroupedModel )  ;", "}    finally    {", "ExportImportThreadLocal . setPortletStagingInProcess ( false )  ;", "}", "Assert . assertEquals ( portletDataContext . getEndDate (  )  ,    stagedGroupedModel . getLastPublishDate (  )  )  ;", "Date   originalLastPublishDate    =    stagedGroupedModel . getLastPublishDate (  )  ;", "parameterMap . put ( UPDATE _ LAST _ PUBLISH _ DATE ,    new   String [  ]  {    Boolean . TRUE . toString (  )     }  )  ;", "try    {", "ExportImportThreadLocal . setPortletStagingInProcess ( true )  ;", "Util . exportStagedModel ( portletDataContext ,    stagedGroupedModel )  ;", "}    finally    {", "ExportImportThreadLocal . setPortletStagingInProcess ( false )  ;", "}", "Assert . assertEquals ( originalLastPublishDate ,    stagedGroupedModel . getLastPublishDate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLastPublishDate"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initExport (  )  ;", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", ". StagedModelAssets   stagedModelAssets    =    updateAssetEntry ( stagedModel ,    stagingGroup )  ;", "addComments ( stagedModel )  ;", "addRatings ( stagedModel )  ;", "StagedModelDataHandlerUtil . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "validateExport ( portletDataContext ,    stagedModel ,    dependentStagedModelsMap )  ;", "initImport (  )  ;", "StagedModel   exportedStagedModel    =    readExportedStagedModel ( stagedModel )  ;", "Assert . assertNotNull ( exportedStagedModel )  ;", "StagedModelDataHandlerUtil . importStagedModel ( portletDataContext ,    exportedStagedModel )  ;", "validateImport ( stagedModel ,    stagedModelAssets ,    dependentStagedModelsMap ,    liveGroup )  ;", "}", "METHOD_END"], "methodName": ["testStagedModelDataHandler"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersionableStagedModel (  )  )  )     {", "return ;", "}", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", "stagedModel    =    addVersion ( stagedModel )  ;", "exportImportStagedModel ( stagedModel )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testVersioning"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersionableStagedModel (  )  )  )     {", "return ;", "}", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", "Thread . sleep (  4  0  0  0  )  ;", "exportImportStagedModel ( stagedModel )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "stagedModel    =    addVersion ( stagedModel )  ;", "exportImportStagedModel ( stagedModel )  ;", "importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testVersioning2"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isVersionableStagedModel (  )  )  )     {", "return ;", "}", "Map < String ,    List < StagedModel >  >    dependentStagedModelsMap    =    addDependentStagedModelsMap ( stagingGroup )  ;", "StagedModel   stagedModel    =    addStagedModel ( stagingGroup ,    dependentStagedModelsMap )  ;", "stagedModel    =    addVersion ( stagedModel )  ;", "exportImportStagedModel ( stagedModel )  ;", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "exportImportStagedModel ( stagedModel )  ;", "importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    liveGroup )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["testVersioningExportImportTwice"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntry   assetEntry    =    fetchAssetEntry ( stagedModel ,    group )  ;", "if    ( assetEntry    =  =    null )     {", "return   null ;", "}", "AssetVocabulary   assetVocabulary    =    AssetTestUtil . addVocabulary ( stagingGroup . getGroupId (  )  )  ;", "AssetCategory   assetCategory    =    AssetTestUtil . addCategory ( stagingGroup . getGroupId (  )  ,    assetVocabulary . getVocabularyId (  )  )  ;", "Company   company    =    CompanyLocalServiceUtil . getCompany ( stagedModel . getCompanyId (  )  )  ;", "Group   companyGroup    =    company . getGroup (  )  ;", "AssetVocabulary   companyAssetVocabulary    =    AssetTestUtil . addVocabulary ( companyGroup . getGroupId (  )  )  ;", "AssetCategory   companyAssetCategory    =    AssetTestUtil . addCategory ( companyGroup . getGroupId (  )  ,    companyAssetVocabulary . getVocabularyId (  )  )  ;", "AssetTag   assetTag    =    AssetTestUtil . addTag ( stagingGroup . getGroupId (  )  )  ;", "double   assetPriority    =    assetEntry . getPriority (  )  ;", "if    ( isAssetPrioritySupported (  )  )     {", "assetPriority    =    RandomTestUtil . nextDouble (  )  ;", "}", "assetEntry    =    AssetEntryLocalServiceUtil . updateEntry ( TestPropsValues . getUserId (  )  ,    stagingGroup . getGroupId (  )  ,    assetEntry . getCreateDate (  )  ,    assetEntry . getModifiedDate (  )  ,    assetEntry . getClassName (  )  ,    assetEntry . getClassPK (  )  ,    assetEntry . getClassUuid (  )  ,    assetEntry . getClassTypeId (  )  ,    new   long [  ]  {    assetCategory . getCategoryId (  )  ,    companyAssetCategory . getCategoryId (  )     }  ,    new   String [  ]  {    assetTag . getName (  )     }  ,    assetEntry . isListable (  )  ,    assetEntry . isVisible (  )  ,    assetEntry . getStartDate (  )  ,    assetEntry . getEndDate (  )  ,    assetEntry . getPublishDate (  )  ,    assetEntry . getExpirationDate (  )  ,    assetEntry . getMimeType (  )  ,    assetEntry . getTitle (  )  ,    assetEntry . getDescription (  )  ,    assetEntry . getSummary (  )  ,    assetEntry . getUrl (  )  ,    assetEntry . getLayoutUuid (  )  ,    assetEntry . getHeight (  )  ,    assetEntry . getWidth (  )  ,    assetPriority )  ;", "return   new    . StagedModelAssets ( assetCategory ,    assetEntry ,    assetTag ,    assetVocabulary )  ;", "}", "METHOD_END"], "methodName": ["updateAssetEntry"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( stagedModelAssets    =  =    null )     {", "return ;", "}", "AssetEntry   importedAssetEntry    =    fetchAssetEntry ( stagedModel ,    group )  ;", "if    ( isAssetPrioritySupported (  )  )     {", "AssetEntry   assetEntry    =    stagedModelAssets . getAssetEntry (  )  ;", "Assert . assertEquals ( assetEntry . getPriority (  )  ,    importedAssetEntry . getPriority (  )  ,     0  .  0  )  ;", "}", "List < AssetCategory >    importedAssetCategories    =    AssetCategoryLocalServiceUtil . getEntryCategories ( importedAssetEntry . getEntryId (  )  )  ;", "Assert . assertEquals ( importedAssetCategories . toString (  )  ,     2  ,    importedAssetCategories . size (  )  )  ;", "AssetCategory   stagedAssetCategory    =    stagedModelAssets . getAssetCategory (  )  ;", "AssetCategory   importedAssetCategory    =    null ;", "Company   company    =    CompanyLocalServiceUtil . getCompany ( group . getCompanyId (  )  )  ;", "long   companyGroupId    =    company . getGroupId (  )  ;", "for    ( AssetCategory   assetCategory    :    importedAssetCategories )     {", "long   groupId    =    assetCategory . getGroupId (  )  ;", "if    ( groupId    !  =    companyGroupId )     {", "importedAssetCategory    =    assetCategory ;", "break ;", "}", "}", "Assert . assertEquals ( stagedAssetCategory . getUuid (  )  ,    importedAssetCategory . getUuid (  )  )  ;", "List < AssetTag >    importedAssetTags    =    AssetTagLocalServiceUtil . getEntryTags ( importedAssetEntry . getEntryId (  )  )  ;", "Assert . assertEquals ( importedAssetTags . toString (  )  ,     1  ,    importedAssetTags . size (  )  )  ;", "AssetTag   assetTag    =    stagedModelAssets . getAssetTag (  )  ;", "AssetTag   importedAssetTag    =    importedAssetTags . get (  0  )  ;", "Assert . assertEquals ( assetTag . getName (  )  ,    importedAssetTag . getName (  )  )  ;", "AssetVocabulary   assetVocabulary    =    stagedModelAssets . getAssetVocabulary (  )  ;", "AssetVocabulary   importedAssetVocabulary    =    AssetVocabularyLocalServiceUtil . getVocabulary ( importedAssetCategory . getVocabularyId (  )  )  ;", "Assert . assertEquals ( assetVocabulary . getUuid (  )  ,    importedAssetVocabulary . getUuid (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateAssets"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isCommentableStagedModel (  )  )  )     {", "return ;", "}", "List < MBMessage >    discussionMBMessages    =    MBMessageLocalServiceUtil . getMessages ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  ,    STATUS _ ANY )  ;", "if    ( ListUtil . isEmpty ( discussionMBMessages )  )     {", "return ;", "}", "int   importedDiscussionMBMessagesCount    =    MBMessageLocalServiceUtil . getDiscussionMessagesCount ( ExportImportClassedModelUtil . getClassName ( importedStagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( importedStagedModel )  ,    STATUS _ ANY )  ;", "Assert . assertEquals ( discussionMBMessages . size (  )  ,     ( importedDiscussionMBMessagesCount    +     1  )  )  ;", "for    ( MBMessage   discussionMBMessage    :    discussionMBMessages )     {", "if    ( discussionMBMessage . isRoot (  )  )     {", "continue ;", "}", "MBMessage   importedDiscussionMBMessage    =    MBMessageLocalServiceUtil . fetchMBMessageByUuidAndGroupId ( discussionMBMessage . getUuid (  )  ,    group . getGroupId (  )  )  ;", "Assert . assertNotNull ( importedDiscussionMBMessage )  ;", "}", "}", "METHOD_END"], "methodName": ["validateComments"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Element   rootElement    =    portletDataContext . getExportDataRootElement (  )  ;", "List < Element >    stagedModelGroupElements    =    new   ArrayList <  >  (  )  ;", "Class <  ?  >    stagedModelClass    =    getClass (  )  ;", "String   stagedModelClassSimpleName    =    stagedModelClass . getSimpleName (  )  ;", "stagedModelGroupElements . addAll ( rootElement . elements ( stagedModelClassSimpleName )  )  ;", "for    ( String   dependentClassSimpleName    :    dependentsMap . keySet (  )  )     {", "stagedModelGroupElements . addAll ( rootElement . elements ( dependentClassSimpleName )  )  ;", "}", "for    ( Element   stagedModelGroupElement    :    stagedModelGroupElements )     {", "String   className    =    stagedModelGroupElement . getName (  )  ;", "if    ( className . equals (  \" missing - references \"  )  )     {", "continue ;", "}", "List <  >    dependents    =    dependentsMap . get ( className )  ;", "if    ( dependents    =  =    null )     {", "dependents    =    new   ArrayList (  )  ;", "} else    {", "dependents    =    ListUtil . copy ( dependents )  ;", "}", "if    ( className . equals ( stagedModelClassSimpleName )  )     {", "dependents . add ( stagedModel )  ;", "}", "List < Element >    elements    =    stagedModelGroupElement . elements (  )  ;", "Assert . assertEquals ( elements . toString (  )  ,    dependents . size (  )  ,    elements . size (  )  )  ;", "for    ( Element   element    :    elements )     {", "String   path    =    element . attributeValue (  \" path \"  )  ;", "Assert . assertNotNull ( path )  ;", "Iterator <  >    iterator    =    dependents . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "dependent    =    iterator . next (  )  ;", "String   dependentPath    =    ExportImportPathUtil . getModelPath ( dependent )  ;", "if    ( path . equals ( dependentPath )  )     {", "iterator . remove (  )  ;", "}", "}", "}", "Assert . assertTrue (  \" There   is   more   than   one   element   exported   with   the   same   path \"  ,    dependents . isEmpty (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateExport"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "StagedModel   importedStagedModel    =    getStagedModel ( stagedModel . getUuid (  )  ,    group )  ;", "Assert . assertNotNull ( importedStagedModel )  ;", "validateAssets ( importedStagedModel ,    stagedModelAssets ,    group )  ;", "validateComments ( stagedModel ,    importedStagedModel ,    group )  ;", "validateImport ( dependentStagedModelsMap ,    group )  ;", "validateImportedStagedModel ( stagedModel ,    importedStagedModel )  ;", "validateRatings ( stagedModel ,    importedStagedModel )  ;", "}", "METHOD_END"], "methodName": ["validateImport"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue (  (  (  ( stagedModel . getCreateDate (  )  )     +     \"     \"  )     +     ( importedStagedModel . getCreateDate (  )  )  )  ,    DateUtil . equals ( stagedModel . getCreateDate (  )  ,    importedStagedModel . getCreateDate (  )  )  )  ;", "Assert . assertTrue (  (  (  ( stagedModel . getModifiedDate (  )  )     +     \"     \"  )     +     ( importedStagedModel . getModifiedDate (  )  )  )  ,    DateUtil . equals ( stagedModel . getModifiedDate (  )  ,    importedStagedModel . getModifiedDate (  )  )  )  ;", "Assert . assertEquals ( stagedModel . getUuid (  )  ,    importedStagedModel . getUuid (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateImportedStagedModel"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "List < RatingsEntry >    ratingsEntries    =    RatingsEntryLocalServiceUtil . getEntries ( ExportImportClassedModelUtil . getClassName ( stagedModel )  ,    ExportImportClassedModelUtil . getClassPK ( stagedModel )  ,    STATUS _ ANY )  ;", "List < RatingsEntry >    importedRatingsEntries    =    RatingsEntryLocalServiceUtil . getEntries ( ExportImportClassedModelUtil . getClassName ( imported )  ,    ExportImportClassedModelUtil . getClassPK ( imported )  ,    STATUS _ ANY )  ;", "Assert . assertEquals ( importedRatingsEntries . toString (  )  ,    ratingsEntries . size (  )  ,    importedRatingsEntries . size (  )  )  ;", "for    ( RatingsEntry   ratingsEntry    :    ratingsEntries )     {", "Iterator < RatingsEntry >    iterator    =    importedRatingsEntries . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "RatingsEntry   importedRatingsEntry    =    iterator . next (  )  ;", "if    (  ( ratingsEntry . getScore (  )  )     =  =     ( importedRatingsEntry . getScore (  )  )  )     {", "iterator . remove (  )  ;", "break ;", "}", "}", "}", "Assert . assertTrue ( importedRatingsEntries . toString (  )  ,    importedRatingsEntries . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateRatings"], "fileName": "com.liferay.portal.lar.test.BaseStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "Element   rootElement    =    portletDataContext . getExportDataRootElement (  )  ;", "Class <  ?  >    modelClass    =    s . getModelClass (  )  ;", "Element   modelElement    =    rootElement . element ( modelClass . getSimpleName (  )  )  ;", "Assert . assertNotNull (  \" Unable   to   find   model   element \"  ,    modelElement )  ;", "XPath   xPath    =    SAXReaderUtil . createXPath (  (  (  \" staged - model [  @ path    =  '  \"     +     ( ExportImportPathUtil . getModelPath ( s )  )  )     +     \"  '  ]  \"  )  )  ;", "return    (  ( Element )     ( xPath . selectSingleNode ( modelElement )  )  )  ;", "}", "METHOD_END"], "methodName": ["getExportStagedModelElement"], "fileName": "com.liferay.portal.lar.test.BaseWorkflowedStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "initExport (  )  ;", "List < StagedModel >    stagedModels    =    null ;", "boolean   workflowEnabled    =    WorkflowThreadLocal . isEnabled (  )  ;", "try    {", "WorkflowThreadLocal . setEnabled ( true )  ;", "stagedModels    =    addWorkflowedStagedModels ( stagingGroup )  ;", "}    finally    {", "WorkflowThreadLocal . setEnabled ( workflowEnabled )  ;", "}", "for    ( StagedModel   stagedModel    :    stagedModels )     {", "Assert . assertTrue (  \" Staged   model   is   not   a   workflowed   model \"  ,     ( stagedModel   instanceof   WorkflowedModel )  )  ;", "try    {", "Util . exportStagedModel ( portletDataContext ,    stagedModel )  ;", "}    catch    ( PortletDataException   pde )     {", "Assert . assertEquals (  \" An   unexpected   error   occurred   during   the   export \"  ,    STATUS _ UNAVAILABLE ,    pde . getType (  )  )  ;", "}", "validateWorkflowedExport ( portletDataContext ,    stagedModel )  ;", "}", "}", "METHOD_END"], "methodName": ["testExportWorkflowedStagedModels"], "fileName": "com.liferay.portal.lar.test.BaseWorkflowedStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "StagedModelDataHandler <  ?  >    stagedModelDataHandler    =    StagedModelDataHandlerRegistryUtil . getStagedModelDataHandler ( stagedModel . getModelClassName (  )  )  ;", "WorkflowedModel   workflowedModel    =     (  ( WorkflowedModel )     ( stagedModel )  )  ;", "Element   exportStagedModelElement    =    getExportStagedModelElement ( portletDataContext ,    stagedModel )  ;", "if    ( ArrayUtil . contains ( stagedModelDataHandler . getExportableStatuses (  )  ,    workflowedModel . getStatus (  )  )  )     {", "Assert . assertNotNull (  \" Staged   model   should   be   exported \"  ,    exportStagedModelElement )  ;", "} else    {", "Assert . assertNull (  \" Staged   model   should   not   be   exported \"  ,    exportStagedModelElement )  ;", "}", "}", "METHOD_END"], "methodName": ["validateWorkflowedExport"], "fileName": "com.liferay.portal.lar.test.BaseWorkflowedStagedModelDataHandlerTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceReference < S >    serviceReference    =    bundleContext . getServiceReference ( serviceClass )  ;", "if    ( serviceReference    =  =    null )     {", "return   unsafeFunction . apply ( null )  ;", "}", "S   service    =    bundleContext . getService ( serviceReference )  ;", "try    {", "return   unsafeFunction . apply ( service )  ;", "}    finally    {", "bundleContext . ungetService ( serviceReference )  ;", "}", "}", "METHOD_END"], "methodName": ["callService"], "fileName": "com.liferay.portal.osgi.util.test.OSGiServiceUtil"}, {"methodBody": ["METHOD_START", "{", "String   script    =    getScript (  ( fileName    +     ( getScriptExtension (  )  )  )  )  ;", "return    _ s . eval ( null ,    inputObjects ,    outputNames ,    script )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getClass (  )  ;", "InputStream   inputStream    =    clazz . getResourceAsStream (  (  \" dependencies /  \"     +    name )  )  ;", "return   StrUtil . read ( inputStream )  ;", "}", "METHOD_END"], "methodName": ["getScript"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "_ scriptingExecutor    =    getScriptingExecutor (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "ToolDependencies . wireCaches (  )  ;", "}", "METHOD_END"], "methodName": ["setUpClass"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    inputObjects    =    new   HashMap <  >  (  )  ;", "inputObjects . put (  \" variable \"  ,     \" string \"  )  ;", "Set < String >    outputNames    =    Collections . emptySet (  )  ;", "ee ( inputObjects ,    outputNames ,     \" binding - input \"  )  ;", "}", "METHOD_END"], "methodName": ["testBindingInputVariables"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    inputObjects    =    Collections . emptyMap (  )  ;", "Set < String >    outputNames    =    Collections . emptySet (  )  ;", "ee ( inputObjects ,    outputNames ,     \" simple \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleScript"], "fileName": "com.liferay.portal.scripting.ScriptingExecutorTestCase"}, {"methodBody": ["METHOD_START", "{", "List < RelatedSearchResult < Comment >  >    commentRelatedSearchResults    =    searchResult . getCommentRelatedSearchResults (  )  ;", "Assert . assertTrue ( commentRelatedSearchResults . toString (  )  ,    commentRelatedSearchResults . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertEmptyCommentRelatedSearchResults"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "List < RelatedSearchResult < FileEntry >  >    fileEntryRelatedSearchResults    =    searchResult . getFileEntryRelatedSearchResults (  )  ;", "Assert . assertTrue ( fileEntryRelatedSearchResults . toString (  )  ,    fileEntryRelatedSearchResults . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertEmptyFileEntryRelatedSearchResults"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "List < String >    versions    =    searchResult . getVersions (  )  ;", "Assert . assertTrue ( versions . toString (  )  ,    versions . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertEmptyVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SearchResult >    searchResults    =    SearchTestUtil . getSearchResults ( searchResultTranslator ,    document )  ;", "Assert . assertEquals ( searchResults . toString (  )  ,     1  ,    searchResults . size (  )  )  ;", "return   searchResults . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["assertOneSearchResult"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "MockitoAnnotations . initMocks ( this )  ;", "setUpRegistryUtil (  )  ;", "setUpClassNameLocalService (  )  ;", "setUpFastDateFormatFactoryUtil (  )  ;", "setUpIndexerRegistry (  )  ;", "setUpPropsUtil (  )  ;", "setUpTranslator (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "ClassName   className    =    Mockito . mock ( ClassName . class )  ;", "when ( classNameLocalService . getClassName ( TestUtil . ATTACHMENT _ OWNER _ CLASS _ NAME _ ID )  )  . thenReturn ( className )  ;", "when ( className . getClassName (  )  )  . thenReturn ( TestUtil . ATTACHMENT _ OWNER _ CLASS _ NAME )  ;", "}", "METHOD_END"], "methodName": ["setUpClassNameLocalService"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "FastDateFormatFactoryUtil   fastDateFormatFactoryUtil    =    new   FastDateFormatFactoryUtil (  )  ;", "fastDateFormatFactoryUtil . setFastDateFormatFactory ( mock ( FastDateFormatFactory . class )  )  ;", "}", "METHOD_END"], "methodName": ["setUpFastDateFormatFactoryUtil"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "registry . registerService ( IndexerRegistry . class ,    new   TestIndexerRegistry (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUpIndexerRegistry"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "PropsUtil . setProps ( Mockito . mock ( Props . class )  )  ;", "}", "METHOD_END"], "methodName": ["setUpPropsUtil"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "RegistryUtil . setRegistry ( new   BasicRegistryImpl (  )  )  ;", "mockStatic ( AssetRendererFactoryRegistryUtil . class ,    CALLS _ REAL _ METHODS )  ;", "}", "METHOD_END"], "methodName": ["setUpRegistryUtil"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "searchResultTranslator    =    createSearchResultTranslator (  )  ;", "}", "METHOD_END"], "methodName": ["setUpSearchResultTranslator"], "fileName": "com.liferay.portal.search.test.BaseSearchResultUtilTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   workflowEnabled    =    WorkflowThreadLocal . isEnabled (  )  ;", "try    {", "WorkflowThreadLoctEnabled ( true )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModelWithWorkflow ( parentBaseModel ,    approved ,    keywords ,    serviceContext )  ;", "return   baseModel ;", "}    finally    {", "WorkflowThreadLoctEnabled ( workflowEnabled )  ;", "}", "}", "METHOD_END"], "methodName": ["addBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    true ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithDDMStructure"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModelWithWorkflow ( parentBaseModel ,    approved ,    keywordsMap . get ( LocaleUtil . getDefault (  )  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithWorkflow"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "User   user    =    TestPropsValues . getUser (  )  ;", "CommentManagerUtil . addComment ( user . getUserId (  )  ,    serviceContext . getScopeGroupId (  )  ,    getBaseModelClassName (  )  ,    getBaseModelClassPK ( classedModel )  ,    body ,    new   kernel . service . IdentityServiceContextFunction ( serviceContext )  )  ;", "}", "METHOD_END"], "methodName": ["addComment"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   hits    =    searchBaseModelsCount ( searchContext )  ;", "Assert . assertEquals ( hits . toString (  )  ,    expectedCount ,    hits . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertBaseModelsCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchContext . setKeywords ( keywords )  ;", "assertBaseModelsCount ( expectedCount ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["assertBaseModelsCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "assertGroupEntriesCount ( expectedCount ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertGroupEntriesCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "assertGroupEntriesCount ( expectedCount ,    user . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertGroupEntriesCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   hits    =    searchGroupEntries ( group . getGroupId (  )  ,    userId )  ;", "Assert . assertEquals ( hits . toString (  )  ,    expectedCount ,    hits . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertGroupEntriesCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "deleteBaseModel (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["deleteBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getBaseModelClass (  )  ;", "return   clazz . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getBaseModelClassName"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Long )     ( classedModel . getPrimaryKeyObj (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getBaseModelClassPK"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getDDMStructureFieldName"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   parentBaseModel ;", "}", "METHOD_END"], "methodName": ["getParentBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getParentBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getParentBaseModelClassName"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   CHECK _ BASE _ MODEL _ PERMISSION ;", "}", "METHOD_END"], "methodName": ["isCheckBaseModelPermission"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isExpirableAllVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setIncludeAttachments ( true )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "addAttachment ( baseModel )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     2  )  ,    Context )  ;", "moveBaseModelToTrash (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchAttachments"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModel (  0  )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModelWithDelete (  0  )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelWithDelete"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "deleteBaseModel ( baseModel )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelWithDelete"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModelWithTrash (  0  )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelWithTrash"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "moveBaseModelToTrash (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelWithTrash"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "String   updatedKeywords    =    RandomTestUtil . randomString ( BBCodeRandomizerBumper . INSTANCE )  ;", "baseModel    =    updateBaseModel ( baseModel ,    updatedKeywords ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "Context . setKeywords ( updatedKeywords )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelWithUpdate"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   searchBaseModelsCount ( getBaseModelClass (  )  ,    group . getGroupId (  )  ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelsCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Indexer <  ?  >    indexer    =    IndexerRegistryUtil . getIndexer ( clazz )  ;", "Context . setGroupIds ( new   long [  ]  {    groupId    }  )  ;", "return   indexerContext )  ;", "}", "METHOD_END"], "methodName": ["searchBaseModelsCount"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModelWithDDMStructure ( parentBaseModel ,    getSearchKeywords (  )  ,    serviceContext )  ;", "Context . setAttribute (  \" ddmStructureFieldName \"  ,    getDDMStructureFieldName (  )  )  ;", "Context . setAttribute (  \" ddmStructureFieldValue \"  ,    getSearchKeywords (  )  )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "updateDDMStructure ( serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchByDDMStructureField"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchByKeywords"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "baseModel    =    addBaseModel ( null ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "BaseModel <  ?  >    parentBaseModel 1     =    getParentBaseModel ( group ,    serviceContext )  ;", "Context . setFolderIds ( new   long [  ]  {     (  ( Long )     ( parentBaseModel 1  . getPrimaryKeyObj (  )  )  )     }  )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel 2     =    getParentBaseModel ( parentBaseModel 1  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 2  ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     2  )  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchByKeywordsInsideParentBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "String   keyword 1     =     ( getSearchKeywords (  )  )     +     1  ;", "String   keyword 2     =     ( getSearchKeywords (  )  )     +     2  ;", "String   keyword 3     =     ( getSearchKeywords (  )  )     +     3  ;", "String   keyword 4     =     ( getSearchKeywords (  )  )     +     4  ;", "String   keyword 5     =     ( getSearchKeywords (  )  )     +     5  ;", "String   keyword 6     =     ( getSearchKeywords (  )  )     +     6  ;", "String   keyword 7     =     ( getSearchKeywords (  )  )     +     7  ;", "String   combinedKeywords    =    StringBundler . concat ( keyword 1  ,     \"     \"  ,    keyword 2  ,     \"     \"  ,    keyword 3  ,     \"     \"  ,    keyword 4  ,     \"     \"  ,    keyword 5  ,     \"     \"  ,    keyword 6  ,     \"     \"  ,    keyword 7  )  ;", "Context . setKeywords ( combinedKeywords )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    combinedKeywords ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( StringBundler . concat (  \"  \\  \"  \"  ,    keyword 1  ,     \"     \"  ,    keyword 2  ,     \"  \\  \"  \"  )  )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( StringBundler . concat (  \"  \\  \"  \"  ,    keyword 2  ,     \"     \"  ,    keyword 1  ,     \"  \\  \"  \"  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( StringBundler . concat (  \"  \\  \"  \"  ,    keyword 2  ,     \"     \"  ,    keyword 4  ,     \"  \\  \"  \"  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( StringBundler . concat ( keyword 1  ,     \"     \\  \"  \"  ,    keyword 2  ,     \"     \"  ,    keyword 3  ,     \"  \\  \"  \"  )  )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( StringBundler . concat ( RandomTestUtil . randomString (  )  ,     \"     \\  \"  \"  ,    keyword 2  ,     \"     \"  ,    keyword 3  ,     \"  \\  \"     \"  ,    keyword 5  )  )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "Context . setKeywords ( StringBundler . concat ( RandomTestUtil . randomString (  )  ,     \"     \\  \"  \"  ,    keyword 2  ,     \"     \"  ,    keyword 5  ,     \"  \\  \"     \"  ,    RandomTestUtil . randomString (  )  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchByMixedPhraseKeywords"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setIncludeDiscussions ( true )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "addComment ( baseModel ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     2  )  ,    Context )  ;", "moveBaseModelToTrash (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchComments"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "searchContext . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsCount ,    searchContext )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,    searchContext )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \"  \"  ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,    searchContext )  ;", "expireBaseModelVersions ( baseModel ,    expireAllVersions ,    serviceContext )  ;", "if    ( expireAllVersions    &  &     ( isExpirableAllVersions (  )  )  )     {", "assertBaseModelsCount ( initialBaseModelsCount ,    searchContext )  ;", "} else    {", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,    searchContext )  ;", "}", "}", "METHOD_END"], "methodName": ["searchExpireVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["searchGroupEntries"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "User   user 1     =    UserTestUtil . addUser ( null ,     0  )  ;", "long   initialUser 1 GroupEntriesCount    =     0  ;", "assertGroupEntriesCount ( initialUser 1 GroupEntriesCount ,    user 1  )  ;", "User   user 2     =    UserTestUtil . addUser ( null ,     0  )  ;", "long   initialUser 2 GroupEntriesCount    =     0  ;", "assertGroupEntriesCount ( initialUser 2 GroupEntriesCount ,    user 2  )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 1     =    getParentBaseModel ( group ,    serviceContext )  ;", "BaseModel <  ?  >    parentBaseModel 2     =    getParentBaseModel ( group ,    serviceContext )  ;", "String   name    =    PrincipalThreadLocal . getName (  )  ;", "long   userId    =    serviceContext . getUserId (  )  ;", "try    {", "PrincipalThreadLocal . setName ( user 1  . getUserId (  )  )  ;", "serviceContext . setUserId ( user 1  . getUserId (  )  )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 2  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "PrincipalThreadLocal . setName ( user 2  . getUserId (  )  )  ;", "serviceContext . setUserId ( user 2  . getUserId (  )  )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 2  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}    finally    {", "PrincipalThreadLocal . setName ( name )  ;", "serviceContext . setUserId ( userId )  ;", "}", "assertGroupEntriesCount (  ( initialUser 1 GroupEntriesCount    +     3  )  ,    user 1  )  ;", "assertGroupEntriesCount (  ( initialUser 2 GroupEntriesCount    +     2  )  ,    user 2  )  ;", "moveParentBaseModelToTrash (  (  ( Long )     ( parentBaseModel 2  . getPrimaryKeyObj (  )  )  )  )  ;", "assertGroupEntriesCount (  ( initialUser 1 GroupEntriesCount    +     2  )  ,    user 1  )  ;", "assertGroupEntriesCount (  ( initialUser 2 GroupEntriesCount    +     1  )  ,    user 2  )  ;", "TrashHandler   parentTrashHandler    =    TrashHandlerRegistryUtil . getTrashHandler ( getParentBaseModelClassName (  )  )  ;", "parentTrashHandler . restoreTrashEntry ( user 1  . getUserId (  )  ,     (  ( Long )     ( parentBaseModel 2  . getPrimaryKeyObj (  )  )  )  )  ;", "assertGroupEntriesCount (  ( initialUser 1 GroupEntriesCount    +     3  )  ,    user 1  )  ;", "assertGroupEntriesCount (  ( initialUser 2 GroupEntriesCount    +     2  )  ,    user 2  )  ;", "UserLocalServiceUtil . deleteUser ( user 1  )  ;", "UserLocalServiceUtil . deleteUser ( user 2  )  ;", "}", "METHOD_END"], "methodName": ["searchMyEntries"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long   initialSearchGroupEntriesCount    =     0  ;", "assertGroupEntriesCount ( initialSearchGroupEntriesCount )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 1     =    getParentBaseModel ( group ,    serviceContext )  ;", "BaseModel <  ?  >    parentBaseModel 2     =    getParentBaseModel ( group ,    serviceContext )  ;", "String   name    =    PrincipalThreadLocal . getName (  )  ;", "try    {", "User   user 1     =    UserTestUtil . addUser ( null ,     0  )  ;", "PrincipalThreadLocal . setName ( user 1  . getUserId (  )  )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 2  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "User   user 2     =    UserTestUtil . addUser ( null ,     0  )  ;", "PrincipalThreadLocal . setName ( user 2  . getUserId (  )  )  ;", "baseModel    =    addBaseModel ( parentBaseModel 1  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel 2  ,    true ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "UserLocalServiceUtil . deleteUser ( user 1  )  ;", "UserLocalServiceUtil . deleteUser ( user 2  )  ;", "}    finally    {", "PrincipalThreadLocal . setName ( name )  ;", "}", "assertGroupEntriesCount (  ( initialSearchGroupEntriesCount    +     5  )  )  ;", "moveParentBaseModelToTrash (  (  ( Long )     ( parentBaseModel 2  . getPrimaryKeyObj (  )  )  )  )  ;", "assertGroupEntriesCount (  ( initialSearchGroupEntriesCount    +     3  )  )  ;", "TrashHandler   parentTrashHandler    =    TrashHandlerRegistryUtil . getTrashHandler ( getParentBaseModelClassName (  )  )  ;", "parentTrashHandler . restoreTrashEntry ( TestPropsValues . getUserId (  )  ,     (  ( Long )     ( parentBaseModel 2  . getPrimaryKeyObj (  )  )  )  )  ;", "assertGroupEntriesCount (  ( initialSearchGroupEntriesCount    +     5  )  )  ;", "}", "METHOD_END"], "methodName": ["searchRecentEntries"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "int   initialBaseModelsCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsCount ,     \"  1  .  0  \"  ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    false ,     \" Version    1  .  0  \"  ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,    Context )  ;", "serviceContext . setWorkflowAction ( ACTION _ PUBLISH )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \" Version    1  .  1  \"  ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,     \"  1  .  0  \"  ,    Context )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,     \"  1  .  1  \"  ,    Context )  ;", "serviceContext . setWorkflowAction ( ACTION _ SAVE _ DRAFT )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \" Version    1  .  2  \"  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,     \"  1  .  1  \"  ,    Context )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,     \"  1  .  2  \"  ,    Context )  ;", "serviceContext . setWorkflowAction ( ACTION _ PUBLISH )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \" Version    1  .  3  \"  ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,     \"  1  .  2  \"  ,    Context )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,     \"  1  .  3  \"  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchStatus"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "searchContext . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsCount ,    searchContext )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,    searchContext )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \"  \"  ,    serviceContext )  ;", "assertBaseModelsCount ( initialBaseModelsCount ,    searchContext )  ;", "baseModel    =    updateBaseModel ( baseModel ,     \" portal \"  ,    serviceContext )  ;", "searchContext . setKeywords (  \" portal \"  )  ;", "assertBaseModelsCount (  ( initialBaseModelsCount    +     1  )  ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["searchVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModel    =    addBaseModelWithDDMStructure ( parentBaseModel ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    Context )  ;", "}", "METHOD_END"], "methodName": ["searchWithinDDMStructure"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "testUserPermissions ( false ,    true )  ;", "}", "METHOD_END"], "methodName": ["testBaseModelUserPermissions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "SearchContext   searchContext    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    searchContext )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "Map < Locale ,    String >    keywordsMap    =    new   HashMap <  >  (  )  ;", "keywordsMap . put ( LocaleUtil . getDefault (  )  ,     \" entity   title \"  )  ;", "keywordsMap . put ( HUNGARY ,     \" entitas   neve \"  )  ;", "baseModel    =    addBaseModelWithWorkflow ( parentBaseModel ,    true ,    keywordsMap ,    serviceContext )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    searchContext )  ;", "searchContext . setAttribute ( TITLE ,     \" nev \"  )  ;", "searchContext . setKeywords (  \" nev \"  )  ;", "searchContext . setLocale ( HUNGARY )  ;", "assertBaseModelsCount (  ( initialBaseModelsSearchCount    +     1  )  ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testLocalizedSearch"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "testUserPermissions ( true ,    false )  ;", "}", "METHOD_END"], "methodName": ["testParentBaseModelUserPermissions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchAttachments (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchAttachments"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModel (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModelWithDelete (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchBaseModelWithDelete"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModelWithTrash (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchBaseModelWithTrash"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchBaseModelWithUpdate (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchBaseModelWithUpdate"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchByDDMStructureField (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchByDDMStructureField"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchByKeywords (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchByKeywords"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchByKeywordsInsideParentBaseModel (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchByKeywordsInsideParentBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchComments (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchComments"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchExpireVersions ( false )  ;", "}", "METHOD_END"], "methodName": ["testSearchExpireAllVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchExpireVersions ( true )  ;", "}", "METHOD_END"], "methodName": ["testSearchExpireLatestVersion"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchByMixedPhraseKeywords (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchMixedPhraseKeywords"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchMyEntries (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchMyEntries"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchRecentEntries (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchRecentEntries"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchStatus (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchStatus"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchVersions (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchVersions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "searchWithinDDMStructure (  )  ;", "}", "METHOD_END"], "methodName": ["testSearchWithinDDMStructure"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "SearchContext   Context    =    SearchContextTestUtil . getSearchContext ( group . getGroupId (  )  )  ;", "Context . setKeywords ( getSearchKeywords (  )  )  ;", "int   initialBaseModelsSearchCount    =     0  ;", "assertBaseModelsCount ( initialBaseModelsSearchCount ,    Context )  ;", "serviceContext . setAddGroupPermissions ( addParentBaseModelPermission )  ;", "serviceContext . setAddGuestPermissions ( addParentBaseModelPermission )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "serviceContext . setAddGroupPermissions ( addBaseModelPermission )  ;", "serviceContext . setAddGuestPermissions ( addBaseModelPermission )  ;", "baseModel    =    addBaseModel ( parentBaseModel ,    true ,    getSearchKeywords (  )  ,    serviceContext )  ;", "User   user    =    UserTestUtil . addUser ( null ,     0  )  ;", "PermissionChecker   originalPermissionChecker    =    PermissionThreadLocal . getPermissionChecker (  )  ;", "try    {", "PermissionChecker   permissionChecker    =    PermissionCheckerFactoryUtil . create ( user )  ;", "PermissionThreadLocal . setPermissionChecker ( permissionChecker )  ;", "Context . setUserId ( user . getUserId (  )  )  ;", "int   baseModelsCount    =    initialBaseModelsSearchCount ;", "if    ( addBaseModelPermission    &  &     (  !  ( isCheckBaseModelPermission (  )  )  )  )     {", "baseModelsCount +  +  ;", "}", "assertBaseModelsCount ( baseModelsCount ,    Context )  ;", "}    finally    {", "PermissionThreadLocal . setPermissionChecker ( originalPermissionChecker )  ;", "}", "UserLocalServiceUtil . deleteUser ( user )  ;", "}", "METHOD_END"], "methodName": ["testUserPermissions"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   baseModel ;", "}", "METHOD_END"], "methodName": ["updateBaseModel"], "fileName": "com.liferay.portal.search.test.BaseSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   SearchTestUtil . createAttachmentDocument ( entryClassName ,    SearchTestUtil . ENTRY _ CLASS _ PK )  ;", "}", "METHOD_END"], "methodName": ["createAttachmentDocument"], "fileName": "com.liferay.portal.search.test.SearchTestUtil"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    SearchTestUtil . createDocument ( entryClassName ,    entryClassPK )  ;", "DocumentHelper   documentHelper    =    new   DocumentHelper ( document )  ;", "documentHelper . setAttachmentOwnerKey ( SearchTestUtil . ATTACHMENT _ OWNER _ CLASS _ NAME _ ID ,    SearchTestUtil . ATTACHMENT _ OWNER _ CLASS _ PK )  ;", "return   document ;", "}", "METHOD_END"], "methodName": ["createAttachmentDocument"], "fileName": "com.liferay.portal.search.test.SearchTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   SearchTestUtil . createDocument ( entryClassName ,    SearchTestUtil . ENTRY _ CLASS _ PK )  ;", "}", "METHOD_END"], "methodName": ["createDocument"], "fileName": "com.liferay.portal.search.test.SearchTestUtil"}, {"methodBody": ["METHOD_START", "{", "Document   document    =    new   DocumentImpl (  )  ;", "DocumentHelper   documentHelper    =    new   DocumentHelper ( document )  ;", "documentHelpertEntryKey ( entryClassName ,    entryClassPK )  ;", "return   document ;", "}", "METHOD_END"], "methodName": ["createDocument"], "fileName": "com.liferay.portal.search.test.SearchTestUtil"}, {"methodBody": ["METHOD_START", "{", "Hits   hits    =    new   HitsImpl (  )  ;", "hits . setDocs ( documents )  ;", "return   ResultTranslator . translate ( hits ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["getSearchResults"], "fileName": "com.liferay.portal.search.test.SearchTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ serviceTracker )     !  =    null )     {", "_ serviceTracker . close (  )  ;", "}", "_ serviceTracker    =    null ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.liferay.portal.search.test.TestIndexerRegistry"}, {"methodBody": ["METHOD_START", "{", "RoleTestUtil . addResourcePermission ( getRoleName (  )  ,    getResourceName (  )  ,    SCOPE _ GROUP ,    getPrimKey (  )  ,    VIEW )  ;", "Role   role    =    RoleLocalServiceUtil . getRole ( TestPropsValues . getCompanyId (  )  ,    getRoleName (  )  )  ;", "ResourcePermissionLocalServiceUtil . setResourcePermissions ( group . getCompanyId (  )  ,    getResourceName (  )  ,    SCOPE _ INDIVIDUAL ,    getPrimKey (  )  ,    role . getRoleId (  )  ,    new   String [  ]  {    ActionKeys . VIEW    }  )  ;", "}", "METHOD_END"], "methodName": ["addPortletModelViewPermission"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "return   String . valueOf ( group . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPrimKey"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "return   RoleConstants . GUEST ;", "}", "METHOD_END"], "methodName": ["getRoleName"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "RoleTestUtil . removeResourcePermission ( getRoleName (  )  ,    getResourceName (  )  ,    SCOPE _ GROUP ,    getPrimKey (  )  ,    VIEW )  ;", "RoleTestUtil . removeResourcePermission ( getRoleName (  )  ,    getResourceName (  )  ,    SCOPE _ INDIVIDUAL ,    getPrimKey (  )  ,    VIEW )  ;", "Map < Object ,    Object >    permissionChecksMap    =    permissionChecker . getPermissionChecksMap (  )  ;", "permissionChecksMap . clear (  )  ;", "}", "METHOD_END"], "methodName": ["removePortletModelViewPermission"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "user    =    UserTestUtil . addUser (  )  ;", "serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  )  ;", "doSetUp (  )  ;", "ServiceTestUtil . setUser ( user )  ;", "permissionChecker    =    hreadLocal . getPermissionChecker (  )  ;", "addPortletModelViewPermission (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceTestUtil . setUser ( TestPropsValues . getUser (  )  )  ;", "removePortletModelView (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portal.service.permission.test.BasePermissionTestCase"}, {"methodBody": ["METHOD_START", "{", "TreeModel   treeModelA    =    addTreeModel ( null )  ;", "_ treeModels . add ( treeModelA )  ;", "TreeModel   treeModelAA    =    addTreeModel ( treeModelA )  ;", "_ treeModels . add ( treeModelAA )  ;", "TreeModel   treeModelAAA    =    addTreeModel ( treeModelAA )  ;", "_ treeModels . add ( treeModelAAA )  ;", "TreeModel   treeModelAAB    =    addTreeModel ( treeModelAA )  ;", "_ treeModels . add ( treeModelAAB )  ;", "TreeModel   treeModelAAC    =    addTreeModel ( treeModelAA )  ;", "_ treeModels . add ( treeModelAAC )  ;", "TreeModel   treeModelAAD    =    addTreeModel ( treeModelAA )  ;", "_ treeModels . add ( treeModelAAD )  ;", "TreeModel   treeModelAB    =    addTreeModel ( treeModelA )  ;", "_ treeModels . add ( treeModelAB )  ;", "TreeModel   treeModelABA    =    addTreeModel ( treeModelAB )  ;", "_ treeModels . add ( treeModelABA )  ;", "TreeModel   treeModelABB    =    addTreeModel ( treeModelAB )  ;", "_ treeModels . add ( treeModelABB )  ;", "TreeModel   treeModelABC    =    addTreeModel ( treeModelAB )  ;", "_ treeModels . add ( treeModelABC )  ;", "TreeModel   treeModelAC    =    addTreeModel ( treeModelA )  ;", "_ treeModels . add ( treeModelAC )  ;", "TreeModel   treeModelACA    =    addTreeModel ( treeModelAC )  ;", "_ treeModels . add ( treeModelACA )  ;", "TreeModel   treeModelACB    =    addTreeModel ( treeModelAC )  ;", "_ treeModels . add ( treeModelACB )  ;", "TreeModel   treeModelB    =    addTreeModel ( null )  ;", "_ treeModels . add ( treeModelB )  ;", "TreeModel   treeModelBA    =    addTreeModel ( treeModelB )  ;", "_ treeModels . add ( treeModelBA )  ;", "TreeModel   treeModelBAA    =    addTreeModel ( treeModelBA )  ;", "_ treeModels . add ( treeModelBAA )  ;", "TreeModel   treeModelBAB    =    addTreeModel ( treeModelBA )  ;", "_ treeModels . add ( treeModelBAB )  ;", "TreeModel   treeModelBB    =    addTreeModel ( treeModelB )  ;", "_ treeModels . add ( treeModelBB )  ;", "TreeModel   treeModelBBA    =    addTreeModel ( treeModelBB )  ;", "_ treeModels . add ( treeModelBBA )  ;", "TreeModel   treeModelBBB    =    addTreeModel ( treeModelBB )  ;", "_ treeModels . add ( treeModelBBB )  ;", "TreeModel   treeModelBBC    =    addTreeModel ( treeModelBB )  ;", "_ treeModels . add ( treeModelBBC )  ;", "TreeModel   treeModelBC    =    addTreeModel ( treeModelB )  ;", "_ treeModels . add ( treeModelBC )  ;", "TreeModel   treeModelBCA    =    addTreeModel ( treeModelBC )  ;", "_ treeModels . add ( treeModelBCA )  ;", "TreeModel   treeModelBCB    =    addTreeModel ( treeModelBC )  ;", "_ treeModels . add ( treeModelBCB )  ;", "TreeModel   treeModelBCC    =    addTreeModel ( treeModelBC )  ;", "_ treeModels . add ( treeModelBCC )  ;", "TreeModel   treeModelBCD    =    addTreeModel ( treeModelBC )  ;", "_ treeModels . add ( treeModelBCD )  ;", "}", "METHOD_END"], "methodName": ["createTree"], "fileName": "com.liferay.portal.service.test.BaseLocalServiceTreeTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "creat (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.service.test.BaseLocalServiceTreeTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     (  _ treeModels . size (  )  )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "deletModel (  _ treeModels . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portal.service.test.BaseLocalServiceTreeTestCase"}, {"methodBody": ["METHOD_START", "{", "rebuildTree (  )  ;", "for    ( TreeModel   treeModel    :     _ treeModels )     {", "long   primaryKey    =    GetterUtil . getLong ( treeModel . getPrimaryKeyObj (  )  )  ;", "treeModel    =    getTreeModel ( primaryKey )  ;", "Assert . assertEquals ( treeModel . buildTreePath (  )  ,    treeModel . getTreePath (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRebuildTree"], "fileName": "com.liferay.portal.service.test.BaseLocalServiceTreeTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( PortalRegisterTestUtil .  _ indexersRegistered )     {", "return ;", "}", "IndexerRegistryUtil . register ( new   AssetEntryIndexer (  )  )  ;", "IndexerRegistryUtil . register ( new   ContactIndexer (  )  )  ;", "IndexerRegistryUtil . register ( new   DLFileEntryIndexer (  )  )  ;", "IndexerRegistryUtil . register ( new   DLFolderIndexer (  )  )  ;", "IndexerRegistryUtil . register ( new   OrganizationIndexer (  )  )  ;", "PortalRegisterTestUtil .  _ indexersRegistered    =    true ;", "}", "METHOD_END"], "methodName": ["registerIndexers"], "fileName": "com.liferay.portal.service.test.PortalRegisterTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( PortalRegisterTestUtil .  _ workflowHandlersRegistered )     {", "return ;", "}", "WorkflowHandlerRegistryUtil . register ( new   UserWorkflowHandler (  )  )  ;", "PortalRegisterTestUtil .  _ workflowHandlersRegistered    =    true ;", "}", "METHOD_END"], "methodName": ["registerWorkflowHandlers"], "fileName": "com.liferay.portal.service.test.PortalRegisterTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortalUtil . getClassNameId ( LiferayRepository . class . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["_checkClassNames"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     2  0  0  ;    i +  +  )     {", "String   letId    =    String . valueOf ( i )  ;", "Portlet   let    =    new   PortletImpl (  )  ;", "let . setPortletId ( letId )  ;", "let . setPortletModes ( new   HashMap < String ,    Set < String >  >  (  )  )  ;", "ResourceActionsUtil . check ( letId )  ;", "}", "}", "METHOD_END"], "methodName": ["_checkResourceActions"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "return   registry . getFilter ( StringBundler . concat (  \"  (  &  ( destination . name =  \"  ,    destinationName ,     \"  )  ( objectClass =  \"  ,    Destination . class . getName (  )  ,     \"  )  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["_registerDestinationFilter"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "BaseDestination   baseDestination    =    new   SynchronousDestination (  )  ;", "baseDestination . setName ( name )  ;", "MessageBus   messageBus    =    MessageBusUtil . getMessageBus (  )  ;", "Destination   oldDestination    =    messageBus . getDestination ( name )  ;", "messageBus . replace ( baseDestination ,    false )  ;", "Executor   executor    =    PortalExecutorManagerUtil . getPortalExecutor ( oldDestination . getName (  )  )  ;", "if    ( executor    =  =    null )     {", "return ;", "}", "executor . shutdown (  )  ;", "try    {", "if    (  !  ( executor . awaitTermination ( CI _ TEST _ TIMEOUT _ TIME ,    TimeUnit . MILLISECONDS )  )  )     {", "throw   new   IllegalStateException (  (  (  \" Destination    \"     +     ( oldDestination . getName (  )  )  )     +     \"    shutdown   timeout \"  )  )  ;", "}", "}    catch    ( InterruptedException   ie )     {", "ReflectionUtil . throwException ( ie )  ;", "}", "}", "METHOD_END"], "methodName": ["_replaceWithSynchronousDestination"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "LocaleThreadLocal . setThemeDisplayLocale ( new   Locale (  \" en \"  ,     \" US \"  )  )  ;", "ServiceContext   Context    =    new   ServiceContext (  )  ;", "Context . setPathMain (  \" path \"  )  ;", "Context . setPortalURL (  \" http :  /  / tests :  8  0  8  0  \"  )  ;", "ServiceContextThreadLocal . pushServiceContext ( Context )  ;", "}", "METHOD_END"], "methodName": ["_setThreadLocals"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "DBUpgrader . upgrade (  )  ;", "}    catch    ( Throwable   t )     {", "ServiceTestUtil .  _ log . error ( t ,    t )  ;", "}", "MessageBusUtil   messageBusUtil    =    new   MessageBusUtil (  )  ;", "messageBusUtil . setSynchronousMessageSenderMode ( DEFAULT )  ;", "ServiceDependencyManager   schedulerServiceDependencyManager    =    new   ServiceDependencyManager (  )  ;", "schedulerServiceDependencyManager . addServiceDependencyListener ( new   ServiceDependencyListener (  )     {", "@ Override", "public   void   dependenciesFulfilled (  )     {", "try    {", "SchedulerEngineHelperUtil . start (  )  ;", "}    catch    ( Exception   e )     {", "ServiceTestUtil .  _ log . error ( e ,    e )  ;", "}", "}", "@ Override", "public   void   destroy (  )     {", "}", "}  )  ;", "final   Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "Filter   filter    =    registry . getFilter (  (  \"  ( objectClass = cheduler . quartz . internal .  \"     +     \" QuartzSchemaManager )  \"  )  )  ;", "schedulerServiceDependencyManager . registerDependencies ( new   Class <  ?  >  [  ]  {    SchedulerEngineHelper . class    }  ,    new   Filter [  ]  {    filter    }  )  ;", "try    {", "DBUpgrader . verify (  )  ;", "}    catch    ( Exception   e )     {", "ServiceTestUtil .  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["initMainServletServices"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "PortalInstances . addCompanyId ( TestPropsValues . getCompanyId (  )  )  ;", ". setUser ( TestPropsValues . getUser (  )  )  ;", "}    catch    ( Exception   e )     {", ".  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["initPermissions"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceTestUtil .  _ setThreadLocals (  )  ;", "try    {", "SearchEngineHelperUtil . initialize ( TestPropsValues . getCompanyId (  )  )  ;", "}    catch    ( Exception   e )     {", "ServiceTestUtil .  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["initServices"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortalRegisterTestUtil . registerIndexers (  )  ;", "if    ( TestPropsValues . DL _ FILE _ ENTRY _ PROCESSORS _ TRIGGER _ SYNCHRONOUSLY )     {", "ServiceDependencyManager   serviceDependencyManager    =    new   ServiceDependencyManager (  )  ;", "Filter   audioProcessorFilter    =     .  _ registerDestinationFilter ( DOCUMENT _ LIBRARY _ AUDIO _ PROCESSOR )  ;", "Filter   imageProcessFilter    =     .  _ registerDestinationFilter ( DOCUMENT _ LIBRARY _ IMAGE _ PROCESSOR )  ;", "Filter   pdfProcessorFilter    =     .  _ registerDestinationFilter ( DOCUMENT _ LIBRARY _ PDF _ PROCESSOR )  ;", "Filter   rawMetaDataProcessorFilter    =     .  _ registerDestinationFilter ( DOCUMENT _ LIBRARY _ RAW _ METADATA _ PROCESSOR )  ;", "Filter   videoProcessorFilter    =     .  _ registerDestinationFilter ( DOCUMENT _ LIBRARY _ VIDEO _ PROCESSOR )  ;", "serviceDependencyManager . registerDependencies ( audioProcessorFilter ,    imageProcessFilter ,    pdfProcessorFilter ,    rawMetaDataProcessorFilter ,    videoProcessorFilter )  ;", "serviceDependencyManager . waitForDependencies (  )  ;", ".  _ replaceWithSynchronousDestination ( DOCUMENT _ LIBRARY _ AUDIO _ PROCESSOR )  ;", ".  _ replaceWithSynchronousDestination ( DOCUMENT _ LIBRARY _ IMAGE _ PROCESSOR )  ;", ".  _ replaceWithSynchronousDestination ( DOCUMENT _ LIBRARY _ PDF _ PROCESSOR )  ;", ".  _ replaceWithSynchronousDestination ( DOCUMENT _ LIBRARY _ RAW _ METADATA _ PROCESSOR )  ;", ".  _ replaceWithSynchronousDestination ( DOCUMENT _ LIBRARY _ VIDEO _ PROCESSOR )  ;", "}", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "HashMap < String ,    Object >    messageBusProperties    =    new   HashMap <  >  (  )  ;", "messageBusProperties . put ( SERVICE _ RANKING ,    Integer . MAX _ VALUE )  ;", "registry . registerService ( MessageBus . class ,     .  _ messageBusWrapper ,    messageBusProperties )  ;", "if    (  ( MessageBusUtil . getMessageBus (  )  )     !  =     (  .  _ messageBusWrapper )  )     {", "throw   new   IllegalStateException (  \" MessageBus   should   be   set \"  )  ;", "}", "HashMap < String ,    Object >    portalExecutorManagerProperties    =    new   HashMap <  >  (  )  ;", "portalExecutorManagerProperties . put ( SERVICE _ RANKING ,    Integer . MAX _ VALUE )  ;", "registry . registerService ( PortalExecutorManager . class ,     .  _ portalExecutorManagerWrapper ,    portalExecutorManagerProperties )  ;", ".  _ checkClassNames (  )  ;", "try    {", ".  _ checkResourceActions (  )  ;", "}    catch    ( Exception   e )     {", ".  _ log . error ( e ,    e )  ;", "}", "PortalRegisterTestUtil . registerWorkflowHandlers (  )  ;", "if    (  !  ( ArrayUtil . contains ( PortalInstances . getWebIds (  )  ,    COMPANY _ WEB _ ID )  )  )     {", "try    {", "CompanyLocalServiceUtil . checkCompany ( COMPANY _ WEB _ ID )  ;", "}    catch    ( Exception   e )     {", ".  _ log . error ( e ,    e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["initStaticServices"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   Date (  )  ;", "}", "METHOD_END"], "methodName": ["newDate"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "Calendar   calendar    =    new   GregorianCalendar (  )  ;", "calendart ( Calendar . MONTH ,    month )  ;", "calendart ( Calendar . DATE ,    day )  ;", "calendart ( Calendar . YEAR ,    year )  ;", "return   calendar . getTime (  )  ;", "}", "METHOD_END"], "methodName": ["newDate"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( user    =  =    null )     {", "return ;", "}", "PrincipalThreadLoctName ( user . getUserId (  )  )  ;", "PermissionChecker   permissionChecker    =    PermissionCheckerFactoryUtil . create ( user )  ;", "PermissionThreadLoctPermissionChecker ( permissionChecker )  ;", "}", "METHOD_END"], "methodName": ["setUser"], "fileName": "com.liferay.portal.service.test.ServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PortletPreferencesImpl )     ( PortletPreferencesFactoryUtil . fromXML ( TestPropsValues . getCompanyId (  )  ,    portletPreferences . getOwnerId (  )  ,    portletPreferences . getOwnerType (  )  ,    portletPreferences . getPlid (  )  ,    portletPreferences . getPortletId (  )  ,    portletPreferences . getPreferences (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toPortletPreferencesImpl"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesImplTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortletPreferencesImpl   portletPreferencesImpl    =     (  ( PortletPreferencesImpl )     ( PortletPreferencesFactoryUtil . fromDefaultXML ( xml )  )  )  ;", "return   portletPreferencesImpl ;", "}", "METHOD_END"], "methodName": ["toPortletPreferencesImpl"], "fileName": "com.liferay.portal.service.util.test.PortletPreferencesImplTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ loggingEvents ;", "}", "METHOD_END"], "methodName": ["getLoggingEvents"], "fileName": "com.liferay.portal.test.log.CaptureAppender"}, {"methodBody": ["METHOD_START", "{", "LogWrapper   logWrapper    =     (  ( LogWrapper )     ( LogFactoryUtil . getLog ( name )  )  )  ;", "Log   log    =    logWrapper . getWrappedLog (  )  ;", "if    (  !  ( log   instanceof   Log 4 jLogImpl )  )     {", "throw   new   IllegalStateException (  (  (  \" Log    \"     +    name )     +     \"    is   not   a   Log 4 j   logger \"  )  )  ;", "}", "Log 4 jLogImpl   log 4 jLogImpl    =     (  ( Log 4 jLogImpl )     ( log )  )  ;", "logger    =    log 4 jLogImpl . getWrapped (  )  ;", "CaptureAppender   captureAppender    =    new   CaptureAppender ( logger )  ;", "logger . addAppender ( captureAppender )  ;", "logger . setLevel ( level )  ;", "return   captureAppender ;", "}", "METHOD_END"], "methodName": ["configureLog4JLogger"], "fileName": "com.liferay.portal.test.log.Log4JLoggerTestUtil"}, {"methodBody": ["METHOD_START", "{", "LogWrapper   logWrapper    =     (  ( LogWrapper )     ( LogFactoryUtil . getLog ( name )  )  )  ;", "Log   log    =    logWrapper . getWrappedLog (  )  ;", "if    (  !  ( log   instanceof   Log 4 jLogImpl )  )     {", "throw   new   IllegalStateException (  (  (  \" Log    \"     +    name )     +     \"    is   not   a   Log 4 j   logger \"  )  )  ;", "}", "Log 4 jLogImpl   log 4 jLogImpl    =     (  ( Log 4 jLogImpl )     ( log )  )  ;", "logger    =    log 4 jLogImpl . getWrapped (  )  ;", "Level   oldLevel    =    logger . getLevel (  )  ;", "logger . setLevel ( level )  ;", "return   oldLevel ;", "}", "METHOD_END"], "methodName": ["setLoggerLevel"], "fileName": "com.liferay.portal.test.log.Log4JLoggerTestUtil"}, {"methodBody": ["METHOD_START", "{", "try    ( ServerSocketChannel   serverSocketChannel    =    SocketUtil . createServerSocketChannel ( InetAddress . getLocalHost (  )  ,    MailServiceTestUtil .  _ START _ PORT ,    new   ServerSocketConfigurator (  )     {", "@ Override", "public   void   configure ( ServerSocket   serverSocket )    throws   SocketException    {", "serverSocket . setReuseAddress ( true )  ;", "}", "}  )  )     {", "ServerSocket   serverSocket    =    serverSocketChannel . socket (  )  ;", "return   serverSocket . getLocalPort (  )  ;", "}", "}", "METHOD_END"], "methodName": ["_getFreePort"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "ListMessage >    wrappeMessages    =    new   ArrayList <  >  (  )  ;", "for    ( com . dumbster . smtpMessage   mailMessage    :    mailMessages )     {", "wrappeMessages . add ( newMessageImpl ( mailMessage )  )  ;", "}", "return   wrappeMessages ;", "}", "METHOD_END"], "methodName": ["_wrapMailMessages"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "MailServiceTestUtil .  _ smtpServer . clearMessages (  )  ;", "}", "METHOD_END"], "methodName": ["clearMessages"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   MailServiceTestUtil .  _ smtpServer . getEmailCount (  )  ;", "}", "METHOD_END"], "methodName": ["getInboxSize"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "com . dumbster [  ]    mailMessages    =    MailServiceTestUtil .  _ smtpServer . getMessages (  )  ;", "if    (  ( mailMessages . length )     >     0  )     {", "return   new   MailMessageImpl ( mailMessages [  (  ( mailMessages . length )     -     1  )  ]  )  ;", "}", "throw   new   IndexOutOfBoundsException (  \" There   are   no   messages   in   the   inbox \"  )  ;", "}", "METHOD_END"], "methodName": ["getLastMailMessage"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "List < MailMessage >    mailMessages    =    new   ArrayList <  >  (  )  ;", "for    ( MailMessage   mailMessage    :     .  _ smtpServer . getMessages (  )  )     {", "if    ( headerName . equals (  \" Body \"  )  )     {", "String   body    =    mailMessage . getBody (  )  ;", "if    ( body . equals ( headerValue )  )     {", "mailMessages . add ( mailMessage )  ;", "}", "} else    {", "String   messageHeaderValue    =    mailMessage . getFirstHeaderValue ( headerName )  ;", "if    ( messageHeaderValue . equals ( headerValue )  )     {", "mailMessages . add ( mailMessage )  ;", "}", "}", "}", "return    .  _ wrapMailMessages ( mailMessages )  ;", "}", "METHOD_END"], "methodName": ["getMailMessages"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "MailMessage   mailMessage    =    MailServiceTestUtil . getLastMailMessage (  )  ;", "String   bodyMailMessage    =    mailMessage . getBody (  )  ;", "return   bodyMailMessage . contains ( text )  ;", "}", "METHOD_END"], "methodName": ["lastMailMessageContains"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( MailServiceTestUtil .  _ smtpServer )     !  =    null )     {", "throw   new   IllegalStateException (  \" Server   is   already   running \"  )  ;", "}", "int   smtpPort    =    MailServiceTestUtil .  _ getFreePort (  )  ;", "MailServiceTestUtil .  _ prefsPropsTemporarySwapper    =    new   PrefsPropsTemporarySwapper ( PropsKeys . MAIL _ SESSION _ MAIL _ SMTP _ PORT ,    smtpPort ,    PropsKeys . MAIL _ SESSION _ MAIL ,    true )  ;", "MailServiceTestUtil .  _ smtpServer    =    new   SmtpServer (  )  ;", "MailServiceTestUtil .  _ smtpServer . setMailStore ( new   RollingMailStore (  )     {", "@ Override", "public   void   addMessage ( MailMessage   message )     {", "try    {", "List < MailMessage >    receivedMail    =    ReflectionTestUtil . getFieldValue ( this ,     \" receivedMail \"  )  ;", "receivedMail . add ( message )  ;", "if    (  ( getEmailCount (  )  )     >     1  0  0  )     {", "receivedMail . remove (  0  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "}  )  ;", "MailServiceTestUtil .  _ smtpServer . setPort ( smtpPort )  ;", "MailServiceTestUtil .  _ smtpServer . setThreaded ( false )  ;", "ReflectionTestUtil . invoke ( SmtpServerFactory . class ,     \" startServerThread \"  ,    new   Class <  ?  >  [  ]  {    SmtpServer . class    }  ,    MailServiceTestUtil .  _ smtpServer )  ;", "MailServiceUtil . clearSession (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( MailServiceTestUtil .  _ smtpServer )     !  =    null )     &  &     ( MailServiceTestUtil .  _ smtpServer . isStopped (  )  )  )     {", "throw   new   IllegalStateException (  \" Server   is   already   stopped \"  )  ;", "}", "MailServiceTestUtil .  _ smtpServer . stop (  )  ;", "MailServiceTestUtil .  _ smtpServer    =    null ;", "MailServiceTestUtil .  _ prefsPropsTemporarySwapper . close (  )  ;", "MailServiceUtil . clearSession (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "com.liferay.portal.test.mail.MailServiceTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    _ mailMessage ;", "}", "METHOD_END"], "methodName": ["getMailMessage"], "fileName": "com.liferay.portal.test.mail.impl.MailMessageImpl"}, {"methodBody": ["METHOD_START", "{", "File   file    =    new   File (  \" portal - web / docroot \"  )  ;", "return    \" file :  \"     +     ( file . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceBasePath"], "fileName": "com.liferay.portal.test.mock.AutoDeployMockServletContext"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  (  (  ( byteArray . length )     *     3  )     +     1  )  )  ;", "sb . append ( OPEN _ CURLY _ BRACE )  ;", "for    ( byte   b    :    byteArray )     {", "sb . append (  \"  ( byte )  \"  )  ;", "sb . append ( b )  ;", "sb . append ( COMMA _ AND _ SPACE )  ;", "}", "sb . setIndex (  (  ( sb . index (  )  )     -     1  )  )  ;", "sb . append ( CLOSE _ CURLY _ BRACE )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["byteArrayToString"], "fileName": "com.liferay.portal.test.randomizerbumpers.TikaSafeRandomizerBumper"}, {"methodBody": ["METHOD_START", "{", "return    _ dbType ;", "}", "METHOD_END"], "methodName": ["getDBType"], "fileName": "com.liferay.portal.test.rule.ExpectedDBType"}, {"methodBody": ["METHOD_START", "{", "if    ( HypersonicServerTestRule .  _ HYPERSONIC )     {", "return   new   HypersonicServerTestCallback ( HypersonicServerTestRule .  _ DATABASE _ NAME )  ;", "}", "return   new   com . liferay . portal . kernel . test . rule . callback . BaseTestCallback (  )  ;", "}", "METHOD_END"], "methodName": ["_getTestCallback"], "fileName": "com.liferay.portal.test.rule.HypersonicServerTestRule"}, {"methodBody": ["METHOD_START", "{", "if    ( HypersonicServerTestRule .  _ HYPERSONIC )     {", "return   Arrays . asList ( new   String [  ]  {     \" portal : jdbc . default . url =  \"     +     ( HypersonicServerTestRule .  _ DATABASE _ URL )  ,     \" portal : jdbc . default . username = sa \"  ,     \" portal : jdbc . default . password =  \"     }  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getJdbcProperties"], "fileName": "com.liferay.portal.test.rule.HypersonicServerTestRule"}, {"methodBody": ["METHOD_START", "{", "List < TestRule >    testRules    =    new   ArrayList <  >  (  )  ;", "if    (  ( System . getenv (  \" JENKINS _ HOME \"  )  )     !  =    null )     {", "testRules . add ( INSTANCE )  ;", "}", "testRules . add ( LogAssertionTestRule . INSTANCE )  ;", "testRules . add (  .  _ springInitializationTestRule )  ;", "testRules . add (  .  _ sybaseDumpTransactionLogTestRule )  ;", "testRules . add (  .  _ clearThreadLocalTestRule )  ;", "testRules . add (  .  _ uniqueStringRandomizerBumperTestRule )  ;", "testRules . add (  .  _ mainServletTestRule )  ;", "testRules . add (  .  _ destinationAwaitTestRule )  ;", "testRules . add (  .  _ companyProviderTestRule )  ;", "testRules . add (  .  _ deleteAfterTestRunTestRule )  ;", "testRules . add ( SynchronousDestinationTestRule . INSTANCE )  ;", "testRules . add (  .  _ injectTestRule )  ;", "return   testRules . toArray ( new   TestRule [ testRules . size (  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["_getTestRules"], "fileName": "com.liferay.portal.test.rule.LiferayIntegrationTestRule"}, {"methodBody": ["METHOD_START", "{", "Object   statment    =    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Statement . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "String   methodName    =    method . getName (  )  ;", "if    ( methodName . equals (  \" execute \"  )  )     {", "return   Boolean . TRUE ;", "}", "if    ( methodName . equals (  \" executeUpdate \"  )  )     {", "return   Integer . MAX _ VALUE ;", "}", "return   null ;", "}", "}  )  ;", "Object   preparedStatement    =    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    PreparedStatement . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "String   methodName    =    method . getName (  )  ;", "if    ( methodName . equals (  \" execute \"  )  )     {", "return   Boolean . TRUE ;", "}", "return   null ;", "}", "}  )  ;", "Object   connection    =    ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    Connection . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "String   methodName    =    method . getName (  )  ;", "if    ( methodName . equals (  \" createStatement \"  )  )     {", "return   statment ;", "}", "if    ( methodName . equals (  \" prepareStatement \"  )  )     {", "return   preparedStatement ;", "}", "if    ( methodName . equals (  \" getAutoCommit \"  )  )     {", "return   Boolean . TRUE ;", "}", "return   null ;", "}", "}  )  ;", "return    (  ( DataSource )     ( ProxyUtil . newProxyInstance ( ClassLoader . getSystemClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    DataSource . class    }  ,    new   InvocationHandler (  )     {", "@ Override", "public   Object   invoke ( Object   proxy ,    Method   method ,    Object [  ]    args )     {", "String   methodName    =    method . getName (  )  ;", "if    ( methodName . equals (  \" getConnection \"  )  )     {", "return   connection ;", "}", "return   null ;", "}", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["_createDummyDataSource"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "ProtectionDomain   protectionDomain    =    clazz . getProtectionDomain (  )  ;", "CodeSource   codeSource    =    protectionDomain . getCodeSource (  )  ;", "ClassLoader   classLoader    =    new    . PACLClassLoader ( new   URL [  ]  {    codeSource . getLocation (  )     }  ,    clazz . getClassLoader (  )  )  ;", "return   Class . forName ( clazz . getName (  )  ,    true ,    classLoader )  ;", "}", "METHOD_END"], "methodName": ["_loadTestClass"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "if    ( PACLTestRule . PACLTestRuleThreadLocal . isDummyDataSourceEnabled (  )  )     {", "LazyConnectionDataSourceProxy   lazyConnectionDataSourceProxy    =     (  ( LazyConnectionDataSourceProxy )     ( InfrastructureUtil . getDataSource (  )  )  )  ;", "ReflectionTestUtil . setFieldValue ( lazyConnectionDataSourceProxy . getTargetDataSource (  )  ,     \"  _ dataSource \"  ,     _ originalDataSource )  ;", "}", "HotDeployUtil . fireUndeployEvent ( hotDeployEvent )  ;", "ClassLoaderPool . register ( hotDeployEvent . getServletContextName (  )  ,    hotDeployEvent . getContextClassLoader (  )  )  ;", "PortletClassLoaderUtil . setServletContextName ( hotDeployEvent . getServletContextName (  )  )  ;", "try    {", "portletContextLoaderListener . contextDestroyed ( new   ServletContextEvent ( hotDeployEvent . getServletContext (  )  )  )  ;", "}    finally    {", "ClassLoaderPool . unregister ( hotDeployEvent . getServletContextName (  )  )  ;", "PortletClassLoaderUtil . setServletContextName ( null )  ;", "}", "}", "METHOD_END"], "methodName": ["afterClass"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "_ testClass    =    PACLTestRule .  _ loadTestClass ( description . getTestClass (  )  )  ;", "_ instance    =     _ testClass . newInstance (  )  ;", "ServletContext   servletContext    =    ServletContextPool . get ( PortalUtil . getServletContextName (  )  )  ;", "if    ( servletContext    =  =    null )     {", "servletContext    =    new   AutoDeployMockServletContext ( new   FileSystemResourceLoader (  )  )  ;", "servletContext . setAttribute ( InvokerFilterHelper . class . getName (  )  ,    new   InvokerFilterHelper (  )  )  ;", "ServletContextPool . put ( PortalUtil . getPathContext (  )  ,    servletContext )  ;", "}", "HotDeployUtil . reset (  )  ;", "HotDeployUtil . registerListener ( new   HookHotDeployListener (  )  )  ;", "HotDeployUtil . setCapturePrematureEvents ( false )  ;", "PortalLifecycleUtil . flushInits (  )  ;", "ClassLoader   classLoader    =     _ testClass . getClassLoader (  )  ;", "MockServletContext   mockServletContext    =    new   MockServletContext ( new   PACLTestRule . PACLResourceLoader ( classLoader )  )  ;", "mockServletContext . setServletContextName (  \" a - test - hook \"  )  ;", "HotDeployEvent   hotDeployEvent    =    getHotDeployEvent ( mockServletContext ,    classLoader )  ;", "HotDeployUtil . fireDeployEvent ( hotDeployEvent )  ;", "ClassLoaderPool . register ( hotDeployEvent . getServletContextName (  )  ,    hotDeployEvent . getContextClassLoader (  )  )  ;", "PortletClassLoaderUtil . setServletContextName ( hotDeployEvent . getServletContextName (  )  )  ;", "try    {", "portletContextLoaderListener . contextInitialized ( new   ServletContextEvent ( mockServletContext )  )  ;", "}    finally    {", "ClassLoaderPool . unregister ( hotDeployEvent . getServletContextName (  )  )  ;", "PortletClassLoaderUtil . setServletContextName ( null )  ;", "}", "if    ( PACLTestRThreadLocal . isDummyDataSourceEnabled (  )  )     {", "LazyConnectionDataSourceProxy   lazyConnectionDataSourceProxy    =     (  ( LazyConnectionDataSourceProxy )     ( InfrastructureUtil . getDataSource (  )  )  )  ;", "_ originalDataSource    =    ReflectionTestUtil . getAndSetFieldValue ( lazyConnectionDataSourceProxy . getTargetDataSource (  )  ,     \"  _ dataSource \"  ,     _ createDummyDataSource (  )  )  ;", "}", "return   hotDeployEvent ;", "}", "METHOD_END"], "methodName": ["beforeClass"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "boolean   dependencyManagementEnabled    =    DependencyManagementThreadLocal . isEnabled (  )  ;", "try    {", "DependencyManagementThreadLocal . setEnabled ( false )  ;", "return   new   kernel . deploy . hot . HotDeployEvent ( servletContext ,    classLoader )  ;", "}    finally    {", "DependencyManagementThreadLocal . setEnabled ( dependencyManagementEnabled )  ;", "}", "}", "METHOD_END"], "methodName": ["getHotDeployEvent"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "String   methodName    =    description . getMethodName (  )  ;", "if    ( methodName    =  =    null )     {", "statement . evaluate (  )  ;", "return ;", "}", "Method   method    =     _ Class . getMethod ( description . getMethodName (  )  )  ;", "method . invoke (  _ instance )  ;", "}", "METHOD_END"], "methodName": ["invokeStatement"], "fileName": "com.liferay.portal.test.rule.PACLTestRule"}, {"methodBody": ["METHOD_START", "{", "if    ( originBundleSymbolicName    =  =    null )     {", "return    (  )     -  >     {", "}  ;", "}", "ThreadLocal < Deque < PlatformTransactionManager >  >    platformTransactionManagersThreadLocal    =    ReflectionTestUtil . getFieldValue ( CurrentPlatformTransactionManagerUtil . class ,     \"  _ platformTransactionManagersThreadLocal \"  )  ;", "Deque < PlatformTransactionManager >    platformTransactionManagers    =    platformTransactionManagersThreadLocal . get (  )  ;", "Bundle   bundle    =    FrameworkUtil . getBundle (  . class )  ;", "BundleContext   bundleContext    =    bundle . getBundleContext (  )  ;", "ServiceReference <  ?  >  [  ]    serviceReferences    =    bundleContext . getAllServiceReferences ( PortletTransactionManager . class . getName (  )  ,     (  (  \"  ( origin . bundle . symbolic . name =  \"     +    originBundleSymbolicName )     +     \"  )  \"  )  )  ;", "Assert . assertEquals ( StringBundler . concat (  \" Expected    1    PortletTransactionManager   for    \"  ,    originBundleSymbolicName ,     \"  ,    actually   have    \"  ,    Arrays . toString ( serviceReferences )  )  ,     1  ,    serviceReferences . length )  ;", "ServiceReference <  ?  >    serviceReference    =    serviceReferences [  0  ]  ;", "PortletTransactionManager   portletTransactionManager    =     (  ( PortletTransactionManager )     ( bundleContext . getService ( serviceReference )  )  )  ;", "if    ( portletTransactionManager    =  =     ( platformTransactionManagers . peek (  )  )  )     {", "return    (  )     -  >     {", "}  ;", "}", "platformTransactionManagers . push ( portletTransactionManager )  ;", "return    (  )     -  >     {", "platformTransactionManagers . pop (  )  ;", "bundleContext . ungetService ( serviceReference )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["_installTransactionManager"], "fileName": "com.liferay.portal.test.rule.TransactionalTestRule"}, {"methodBody": ["METHOD_START", "{", "if    ( transactional    !  =    null )     {", "return   Factory . create ( transactional . isolation (  )  ,    transactional . propagation (  )  ,    transactional . readOnly (  )  ,    transactional . timeout (  )  ,    transactional . rollbackFor (  )  ,    transactional . rollbackForClassName (  )  ,    transactional . noRollbackFor (  )  ,    transactional . noRollbackForClassName (  )  )  ;", "}", "return    _ transactionConfig ;", "}", "METHOD_END"], "methodName": ["getTransactionConfig"], "fileName": "com.liferay.portal.test.rule.TransactionalTestRule"}, {"methodBody": ["METHOD_START", "{", "List < FrameworkMethod >    newFrameworkMethods    =    new   ArrayList <  >  (  )  ;", "List < FrameworkMethod >    frameworkMethods    =    ReflectionTestUtil .  < List < FrameworkMethod >  > getFieldValue ( statement ,    name )  ;", "for    ( FrameworkMethod   frameworkMethod    :    frameworkMethods )     {", "if    ( frameworkMethod   instanceof    . TransactionalFrameworkMethod )     {", "newFrameworkMethods . add ( frameworkMethod )  ;", "continue ;", "}", "newFrameworkMethods . add ( new    . TransactionalFrameworkMethod ( frameworkMethod . getMethod (  )  ,    getTransactionConfig ( frameworkMethod . getAnnotation ( Transactional . class )  )  ,     _ originBundleSymbolicName )  )  ;", "}", "ReflectionTestUtil . setFieldValue ( statement ,    name ,    newFrameworkMethods )  ;", "}", "METHOD_END"], "methodName": ["replaceFrameworkMethods"], "fileName": "com.liferay.portal.test.rule.TransactionalTestRule"}, {"methodBody": ["METHOD_START", "{", "Path   filePath    =    fromFolderPath . resolve ( fileName )  ;", "if    ( Files . exists ( filePath )  )     {", "Files . createDirectories ( toFolderPath )  ;", "Files . copy ( filePath ,    toFolderPath . resolve ( fileName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.liferay.portal.test.rule.callback.HypersonicServerTestCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Files . exists ( folderPath )  )  )     {", "return ;", "}", "Files . walkFileTree ( folderPath ,    new   SimpleFileVisitor < Path >  (  )     {", "@ Oride", "public   FileVisitResult   postVisitDirectory ( Path   dirPath ,    IOException   ioe )    throws   IOException    {", "if    ( ioe    !  =    null )     {", "throw   ioe ;", "}", "Files . delete ( dirPath )  ;", "return   FileVisitResult . CONTINUE ;", "}", "@ Oride", "public   FileVisitResult   visitFile ( Path   filePath ,    BasicFileAttributes   basicFileAttributes )    throws   IOException    {", "Files . delete ( filePath )  ;", "return   FileVisitResult . CONTINUE ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["deleteFolder"], "fileName": "com.liferay.portal.test.rule.callback.HypersonicServerTestCallback"}, {"methodBody": ["METHOD_START", "{", "if    ( filterString . isEmpty (  )  )     {", "return    (  \"  ( obClass =  \"     +     ( clazz . getName (  )  )  )     +     \"  )  \"  ;", "}", "if    (  ( clazz    !  =     ( Ob . class )  )     &  &     (  !  ( filterString . contains (  \" obClass \"  )  )  )  )     {", "int   index    =    filterString . indexOf (  '  &  '  )  ;", "StringBundler   sb    =    new   StringBundler (  5  )  ;", "if    ( index    <     0  )     {", "sb . append (  \"  (  &  ( obClass =  \"  )  ;", "sb . append ( clazz . getName (  )  )  ;", "sb . append (  \"  )  (  \"  )  ;", "sb . append ( filterString )  ;", "sb . append (  \"  )  )  \"  )  ;", "} else    {", "sb . append ( filterString . substring (  0  ,    index )  )  ;", "sb . append (  \"  &  ( obClass =  \"  )  ;", "sb . append ( clazz . getName (  )  )  ;", "sb . append (  \"  )  \"  )  ;", "sb . append ( filterString . substring (  ( index    +     1  )  )  )  ;", "}", "filterString    =    sb . toString (  )  ;", "}", "return   filterString ;", "}", "METHOD_END"], "methodName": ["_getFilterString"], "fileName": "com.liferay.portal.test.rule.callback.InjectTestBag"}, {"methodBody": ["METHOD_START", "{", "Collection < ServiceReference < T >  >    serviceReferences    =    registry . getServiceReferences ( clazz ,    filterString )  ;", "Stream < ServiceReference < T >  >    stream    =    serviceReferences . stream (  )  ;", "Optional < ServiceReference < T >  >    optional    =    stream . findFirst (  )  ;", "return   optional . orElse ( null )  ;", "}", "METHOD_END"], "methodName": ["_getServiceReference"], "fileName": "com.liferay.portal.test.rule.callback.InjectTestBag"}, {"methodBody": ["METHOD_START", "{", "String   filterStringString    =     _ getFilterString ( clazz ,    filterString )  ;", "ServiceReference < T >    serviceReference    =     _ getServiceReference ( registry ,    clazz ,    filterStringString )  ;", "if    (  ( serviceReference    !  =    null )     |  |     (  ! blocking )  )     {", "return   serviceReference ;", "}", "CountDownLatch   countDownLatch    =    new   CountDownLatch (  1  )  ;", "AtomicReference < ServiceTracker < T ,    T >  >    atomicReference    =    new   AtomicReference <  >  (  )  ;", "ServiceTracker < T ,    T >    serviceTracker    =    registry . trackServices ( registry . getFilter ( filterStringString )  ,    new   com . liferay . registry . ServiceTrackerCustomizer < T ,    T >  (  )     {", "@ Override", "public   T   addingService ( ServiceReference < T >    serviceReference )     {", "countDownLatch . countDown (  )  ;", "ServiceTracker < T ,    T >    serviceTracker    =    atomicReference . get (  )  ;", "serviceTracker . close (  )  ;", "return   null ;", "}", "@ Override", "public   void   modifiedService ( ServiceReference < T >    serviceReference ,    T   service )     {", "}", "@ Override", "public   void   removedService ( ServiceReference < T >    serviceReference ,    T   service )     {", "}", "}  )  ;", "atomicReference . set ( serviceTracker )  ;", "serviceTracker . open (  )  ;", "int   waitTime    =     0  ;", "String   className    =    clazz . getName (  )  ;", "while    ( serviceReference    =  =    null )     {", "waitTime    +  =     .  _ SLEEP _ TIME ;", "if    ( waitTime    >  =     ( TestPropsValues . CI _ TEST _ TIMEOUT _ TIME )  )     {", "throw   new   IllegalStateException ( StringBundler . concat (  \" Timed   out   while   waiting   for   service    \"  ,    className ,     \"     \"  ,    filterString )  )  ;", "}", "Class <  ?  >    testClass    =    field . getDeclaringClass (  )  ;", "System . out . println ( StringBundler . concat (  \" Waiting   for   service    \"  ,    className ,     \"     \"  ,    filterString ,     \"    for   field    \"  ,    testClass . getName (  )  ,     \"  .  \"  ,    field . getName (  )  )  )  ;", "try    {", "countDownLatch . await (  .  _ SLEEP _ TIME ,    TimeUnit . MILLISECONDS )  ;", "}    catch    ( InterruptedException   ie )     {", "}", "serviceReference    =     _ getServiceReference ( registry ,    clazz ,    filterStringString )  ;", "}", "return   serviceReference ;", "}", "METHOD_END"], "methodName": ["_getServiceReference"], "fileName": "com.liferay.portal.test.rule.callback.InjectTestBag"}, {"methodBody": ["METHOD_START", "{", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "for    ( Field   field    :     _ fields )     {", "inject    =    field . getAnnotation (  . class )  ;", "Class <  ?  >    clazz    =    inject . type (  )  ;", "if    ( clazz    =  =     ( Object . class )  )     {", "clazz    =    field . getType (  )  ;", "}", "ServiceReference <  ?  >    serviceReference    =     _ getServiceReference ( registry ,    clazz ,    field ,    inject . filter (  )  ,    inject . blocking (  )  )  ;", "if    ( serviceReference    !  =    null )     {", "_ serviceReferences . add ( serviceReference )  ;", "Object   service    =    registry . getService ( serviceReference )  ;", "field . set (  _ target ,    service )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["injectFields"], "fileName": "com.liferay.portal.test.rule.callback.InjectTestBag"}, {"methodBody": ["METHOD_START", "{", "for    ( Field   field    :     _ fields )     {", "field . set (  _ target ,    null )  ;", "}", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "for    ( ServiceReence <  ?  >    serviceReence    :     _ serviceReences )     {", "registry . ungetService ( serviceReence )  ;", "}", "}", "METHOD_END"], "methodName": ["resetFields"], "fileName": "com.liferay.portal.test.rule.callback.InjectTestBag"}, {"methodBody": ["METHOD_START", "{", "Thread   currentThread    =    Thread . currentThread (  )  ;", "if    ( currentThread    =  =     (  .  _ thread )  )     {", "throw   error ;", "}", "Error   previousError    =     .  _ concurrentFailures . put ( currentThread ,    error )  ;", "if    ( previousError    !  =    null )     {", "error . addSuppressed ( previousError )  ;", "}", "}", "METHOD_END"], "methodName": ["caughtFailure"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  )  ;", "for    ( CaptureAppender   captureAppender    :    captureAppenders )     {", "try    {", "for    ( LoggingEvent   loggingEvent    :    captureAppender . getLoggingEvents (  )  )     {", "String   renderedMessage    =    loggingEvent . getRenderedMessage (  )  ;", "if    (  !  (  . isExpected ( expectedLogsList ,    renderedMessage )  )  )     {", "sb . append ( renderedMessage )  ;", "sb . append (  \"  \\ n \\ n \"  )  ;", "}", "}", "}    finally    {", "captureAppender . close (  )  ;", "}", "}", "if    (  ( sb . index (  )  )     !  =     0  )     {", "sb . setIndex (  (  ( sb . index (  )  )     -     1  )  )  ;", "Assert . fail ( sb . toString (  )  )  ;", "}", "Thread . setDefaultUncaughtExceptionHandler (  .  _ uncaughtExceptionHandler )  ;", ".  _ thread    =    null ;", "try    {", "for    ( Map . Entry < Thread ,    Error >    entry    :     .  _ concurrentFailures . entrySet (  )  )     {", "Thread   thread    =    entry . getKey (  )  ;", "Error   error    =    entry . getValue (  )  ;", "UnsyncStringWriter   unsyncStringWriter    =    new   UnsyncStringWriter (  )  ;", "error . printStackTrace ( new   com . liferay . portal . kernel . io . unsync . UnsyncPrintWriter ( unsyncStringWriter )  )  ;", "sb . append (  \" Thread    \"  )  ;", "sb . append ( thread )  ;", "sb . append (  \"    caught   concurrent   failure :     \"  )  ;", "sb . append ( error )  ;", "sb . append (  \"  \\ n \"  )  ;", "sb . append ( unsyncStringWriter . toString (  )  )  ;", "sb . append (  \"  \\ n \\ n \"  )  ;", "}", "if    (  ( sb . index (  )  )     !  =     0  )     {", "sb . setIndex (  (  ( sb . index (  )  )     -     1  )  )  ;", "Assert . fail ( sb . toString (  )  )  ;", "}", "}    finally    {", ".  _ concurrentFailures . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["endAssert"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "Logger   logger    =    Logger . getLogger ( BLANK )  ;", "logger . removeHandler ( Handler . INSTANCE )  ;", "logger . addHandler ( Handler . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["installJdk14Handler"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "Logger   logger    =    Logger . getRootLogger (  )  ;", "logger . removeAppender ( Appender . INSTANCE )  ;", "logger . addAppender ( Appender . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["installLog4jAppender"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "for    ( ExpectedLogs   expectedLogs    :    expectedLogsList )     {", "for    ( ExpectedLog   expectedLog    :    expectedLogs . expectedLogs (  )  )     {", "ExpectedDBType   expectedDBType    =    expectedLog . expectedDBType (  )  ;", "if    ( expectedDBType    !  =     ( ExpectedDBType . NONE )  )     {", "DB   db    =    DBManagerUtil . getDB (  )  ;", "if    (  ( expectedDBType . getDBType (  )  )     !  =     ( db . getDBType (  )  )  )     {", "continue ;", "}", "}", "ExpectedType   expectedType    =    expectedLog . expectedType (  )  ;", "if    ( expectedType    =  =     ( ExpectedType . CONTAINS )  )     {", "if    ( renderedMessage . contains ( expectedLog . expectedLog (  )  )  )     {", "return   true ;", "}", "} else", "if    ( expectedType    =  =     ( ExpectedType . EXACT )  )     {", "if    ( renderedMessage . equals ( expectedLog . expectedLog (  )  )  )     {", "return   true ;", "}", "} else", "if    ( expectedType    =  =     ( ExpectedType . POSTFIX )  )     {", "if    ( renderedMessage . endsWith ( expectedLog . expectedLog (  )  )  )     {", "return   true ;", "}", "} else", "if    ( expectedType    =  =     ( ExpectedType . PREFIX )  )     {", "if    ( renderedMessage . startsWith ( expectedLog . expectedLog (  )  )  )     {", "return   true ;", "}", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isExpected"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "LogAssertionTestCallback .  _ thread    =    Thread . currentThread (  )  ;", "LogAssertionTestCallback .  _ uncaughtExceptionHandler    =    Thread . getDefaultUncaughtExceptionHandler (  )  ;", "Thread . setDefaultUncaughtExceptionHandler ( new   LogAssertionUncaughtExceptionHandler ( LogAssertionTestCallback .  _ uncaughtExceptionHandler )  )  ;", "List < CaptureAppender >    captureAppenders    =    new   ArrayList <  >  ( expectedLogsList . size (  )  )  ;", "for    ( ExpectedLogs   expectedLogs    :    expectedLogsList )     {", "Class <  ?  >    clazz    =    expectedLogs . loggerClass (  )  ;", "captureAppenders . add ( Log 4 JLoggerTestUtil . configureLog 4 JLogger ( clazz . getName (  )  ,    Level . toLevel ( expectedLogs . level (  )  )  )  )  ;", "}", "LogAssertionTestCallback . installJdk 1  4 Handler (  )  ;", "LogAssertionTestCallback . installLog 4 jAppender (  )  ;", "return   captureAppenders ;", "}", "METHOD_END"], "methodName": ["startAssert"], "fileName": "com.liferay.portal.test.rule.callback.LogAssertionTestCallback"}, {"methodBody": ["METHOD_START", "{", "return   MainServletTestCallback .  _ mainServlet ;", "}", "METHOD_END"], "methodName": ["getMainServlet"], "fileName": "com.liferay.portal.test.rule.callback.MainServletTestCallback"}, {"methodBody": ["METHOD_START", "{", "_ originalPermissionChecker    =    PermissionThreadLocal . getPermissionChecker (  )  ;", "PermissionThreadLocal . setPermissionChecker ( new   SimplePermissionChecker (  )     {", "{", "init ( TestPropsValues . getUser (  )  )  ;", "}", "@ Override", "public   boolean   hasOwnerPermission ( long   companyId ,    String   name ,    String   primKey ,    long   ownerId ,    String   actionId )     {", "return   true ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["setUpPermissionThreadLocal"], "fileName": "com.liferay.portal.test.rule.callback.PermissionCheckerTestCallback"}, {"methodBody": ["METHOD_START", "{", "_ originalName    =    PrincipalThreadLocal . getName (  )  ;", "PrincipalThreadLocal . setName ( PropsValues . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUpPrincipalThreadLocal"], "fileName": "com.liferay.portal.test.rule.callback.PermissionCheckerTestCallback"}, {"methodBody": ["METHOD_START", "{", "DB   db    =    DBManagerUtil . getDB (  )  ;", "if    (  ( db . getDBType (  )  )     !  =     ( DBType . SYBASE )  )     {", "return ;", "}", "try    ( Connection   connection    =    DataAccess . getConnection (  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  (  (  \" dump   t    \"     +     ( connection . getCatalog (  )  )  )     +     \"    with   no _ log \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["_dumpTransactionLog"], "fileName": "com.liferay.portal.test.rule.callback.SybaseDumpTransactionLogTestCallback"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    clazz . getResource (  \"  \"  )  ;", "String   protocol    =    url . getProtocol (  )  ;", "if    (  !  ( protocol . equals (  \" file \"  )  )  )     {", "throw   new   IllegalStateException (  \" Test   classes   are   not   on   the   file   system \"  )  ;", "}", "String   basePath    =    url . getPath (  )  ;", "Package   pkg    =    clazz . getPackage (  )  ;", "String   packageName    =    pkg . getName (  )  ;", "int   index    =    basePath . indexOf (  (  ( packageName . replace (  '  .  '  ,     '  /  '  )  )     +     '  /  '  )  )  ;", "basePath    =    basePath . substring (  0  ,    index )  ;", "File   baseDir    =    new   File ( basePath )  ;", "try    ( Builder   builder    =    new   Builder (  )  ; InputStream   inputStream    =    clazz . getResourceAsStream (  (  (  _ bundlePackageName . replace (  '  .  '  ,     '  /  '  )  )     +     \"  / bnd . bnd \"  )  )  )     {", "builder . setBundleSymbolicName ( clazz . getName (  )  )  ;", "builder . setBase ( baseDir )  ;", "builder . setClasspath ( new   File [  ]  {    baseDir    }  )  ;", "builder . setProperty (  \" bundle . package \"  ,     (  ( packageName    +     \"  .  \"  )     +     (  _ bundlePackageName )  )  )  ;", "Properties   properties    =    builder . getProperties (  )  ;", "properties . load ( inputStream )  ;", "try    ( Jar   jar    =    builder . build (  )  )     {", "UnsyncByteArrayOutputStream   outputStream    =    new   UnsyncByteArrayOutputStream (  )  ;", "jar . write ( outputStream )  ;", "return   new   kernel . io . unsync . UnsyncByteArrayInputStream ( outputStream . unsafeGetByteArray (  )  ,     0  ,    outputStream . size (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createBundle"], "fileName": "com.liferay.portal.test.rule.callback.SyntheticBundleTestCallback"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( group . getGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( group . getGroupId (  )  ,    privateLayout )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( group . getGroupId (  )  ,    privateLayout ,    layoutPrototype ,    linkEnabled )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( group . getGroupId (  )  ,    parentLayoutPlid )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( groupId ,    false )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( groupId ,    privateLayout ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( groupId ,    RandomTestUtil . randomString ( FriendlyURLRandomizerBumper . INSTANCE ,    INSTANCE ,    UniqueStringRandomizerBumper . INSTANCE )  ,    privateLayout ,    layoutPrototype ,    linkEnabled )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "return   LayoutLocalServiceUtil . addLayout ( serviceContext . getUserId (  )  ,    groupId ,    privateLayout ,    DEFAULT _ PARENT _ LAYOUT _ ID ,    nameMap ,    nameMap ,    new   HashMap < Locale ,    String >  (  )  ,    new   HashMap < Locale ,    String >  (  )  ,    new   HashMap < Locale ,    String >  (  )  ,    TYPE _ PORTLET ,    BLANK ,    false ,    friendlyURLMap ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   LayoutTestUtil . addLayout ( groupId ,    name ,    privateLayout ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   friendlyURL    =     ( StringPool . SLASH )     +     ( FriendlyURLNormalizerUtil . normalize ( name )  )  ;", "Layout   layout    =    null ;", "try    {", "layout    =    LayoutLocalServiceUtil . getFriendlyURLLayout ( groupId ,    false ,    friendlyURL )  ;", "return   layout ;", "}    catch    ( NoSuchLayoutException   nsle )     {", "}", "String   description    =     \" This   is   a   test   page .  \"  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext (  )  ;", "if    ( layoutPrototype    !  =    null )     {", "serviceContext . setAttribute (  \" layoutPrototypeLinkEnabled \"  ,    linkEnabled )  ;", "serviceContext . setAttribute (  \" layoutPrototypeUuid \"  ,    layoutPrototype . getUuid (  )  )  ;", "}", "return   LayoutLocalServiceUtil . addLayout ( TestPropsValues . getUserId (  )  ,    groupId ,    privateLayout ,    DEFAULT _ PARENT _ LAYOUT _ ID ,    name ,    null ,    description ,    TYPE _ PORTLET ,    false ,    friendlyURL ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "Layout   layout    =    LayoutTestUtil . addLayout ( groupId ,    name ,    false )  ;", "LayoutLocalServiceUtil . updateParentLayoutId ( layout . getPlid (  )  ,    parentLayoutPlid )  ;", "return   LayoutLocalServiceUtil . fetchLayout ( layout . getPlid (  )  )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "Layout   layout    =    LayoutTestUtil . addLayout ( groupId ,    false )  ;", "LayoutLocalServiceUtil . updateParentLayoutId ( layout . getPlid (  )  ,    parentLayoutPlid )  ;", "return   LayoutLocalServiceUtil . fetchLayout ( layout . getPlid (  )  )  ;", "}", "METHOD_END"], "methodName": ["addLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "HashMap < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( LocaleUtil . getDefault (  )  ,    name )  ;", "return   LayoutPrototypeLocalServiceUtil . addLayoutPrototype ( TestPropsValues . getUserId (  )  ,    TestPropsValues . getCompanyId (  )  ,    nameMap ,     (  ( Map < Locale ,    String >  )     ( null )  )  ,    true ,    ServiceContex . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addLayoutPrototype"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "HashMap < Locale ,    String >    nameMap    =    new   HashMap <  >  (  )  ;", "nameMap . put ( LocaleUtil . getDefault (  )  ,    name )  ;", "return   LayoutSetPrototypeLocalServiceUtil . addLayoutSetPrototype ( TestPropsValues . getUserId (  )  ,    TestPropsValues . getCompanyId (  )  ,    nameMap ,     (  ( Map < Locale ,    String >  )     ( null )  )  ,    true ,    true ,    ServiceContex . getServiceContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["addLayoutSetPrototype"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String [  ]  >    preferenceMap    =    null ;", "return    . addPortletToLayout ( layout ,    portletId ,    preferenceMap )  ;", "}", "METHOD_END"], "methodName": ["addPortletToLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   userId    =    TestPropsValues . getUserId (  )  ;", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "LayoutTemplate   layoutTemplate    =    layoutTypePortlet . getLayoutTemplate (  )  ;", "List < String >    columns    =    layoutTemplate . getColumns (  )  ;", "String   columnId    =    columns . get (  0  )  ;", "return    . addPortletToLayout ( userId ,    layout ,    portletId ,    columnId ,    preferenceMap )  ;", "}", "METHOD_END"], "methodName": ["addPortletToLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "String   newPortletId    =    layoutTypePortlet . addPortletId ( userId ,    portletId ,    columnId ,     (  -  1  )  )  ;", "LayoutLocalServiceUtil . updateLayout ( layout . getGroupId (  )  ,    layout . isPrivateLayout (  )  ,    layout . getLayoutId (  )  ,    layout . getTypeSettings (  )  )  ;", "if    ( preferenceMap    =  =    null )     {", "return   newPortletId ;", "}", "PortletPreferences   portletPreferences    =     . getPortletPreferences ( layout ,    newPortletId )  ;", "for    ( Map . Entry < String ,    String [  ]  >    entry    :    preferenceMap . entrySet (  )  )     {", "portletPreferences . setValues ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "portletPreferences . store (  )  ;", "return   newPortletId ;", "}", "METHOD_END"], "methodName": ["addPortletToLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "Layout   layout    =    LayoutTestUtil . addLayout ( groupId ,    false )  ;", "UnicodeProperties   typeSettingsProperties    =    layout . getTypeSettingsProperties (  )  ;", "typeSettingsProperties . setProperty (  \" linkToLayoutId \"  ,    String . valueOf ( linkedToLayoutId )  )  ;", "layout . setType ( TYPE _ LINK _ TO _ LAYOUT )  ;", "LayoutLocalServiceUtil . updateLayout ( layout )  ;", "return   layout ;", "}", "METHOD_END"], "methodName": ["addTypeLinkToLayoutLayout"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "return   layoutTypePortlet . getmplateId (  )  ;", "}", "METHOD_END"], "methodName": ["getLayoutTemplateId"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletPreferencesFactoryUtil . getPortletSetup ( layout ,    portletId ,    null )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferences"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "Layout   layout    =    LayoutLocalServiceUtil . getLayout ( plid )  ;", "return    . getPortletPreferences ( layout ,    portletId )  ;", "}", "METHOD_END"], "methodName": ["getPortletPreferences"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "return   layoutTypePortlet . getPortlets (  )  ;", "}", "METHOD_END"], "methodName": ["getPortlets"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "return   layoutTypePortlet . isColumnCustomizable ( columnId )  ;", "}", "METHOD_END"], "methodName": ["isLayoutColumnCustomizable"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "layoutTypePortlet . setTypeSettingsProperty ( CustomizedPages . namespaceColumnId ( columnId )  ,    String . valueOf ( customizable )  )  ;", "layoutTypePortlet . setUpdatePermission ( customizable )  ;", "return   LayoutServiceUtil . updateLayout ( layout . getGroupId (  )  ,    layout . isPrivateLayout (  )  ,    layout . getLayoutId (  )  ,    layout . getTypeSettings (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateLayoutColumnCustomizable"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortletPreferences   layoutPortletPreferences    =    LayoutTestUtil . getPortletPreferences ( layout ,    portletId )  ;", "layoutPortletPreferences . setValue ( portletPreferenceName ,    portletPreferenceValue )  ;", "layoutPortletPreferences . store (  )  ;", "return   LayoutLocalServiceUtil . getLayout ( layout . getPlid (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateLayoutPortletPreference"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortletPreferences   layoutPortletPreferences    =    LayoutTestUtil . getPortletPreferences ( layout ,    portletId )  ;", "for    ( Map . Entry < String ,    String >    entry    :    portletPreferences . entrySet (  )  )     {", "layoutPortletPreferences . setValue ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "layoutPortletPreferences . store (  )  ;", "return   LayoutLocalServiceUtil . getLayout ( layout . getPlid (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateLayoutPortletPreferences"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "LayoutTypePortlet   layoutTypePortlet    =     (  ( LayoutTypePortlet )     ( layout . getLayoutType (  )  )  )  ;", "layoutTypePortlet . setmplateId ( TestPropsValues . getUserId (  )  ,    layoutTemplateId )  ;", "return   LayoutServiceUtil . updateLayout ( layout . getGroupId (  )  ,    layout . isPrivateLayout (  )  ,    layout . getLayoutId (  )  ,    layout . getTypeSettings (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateLayoutTemplateId"], "fileName": "com.liferay.portal.util.test.LayoutTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletContainerTestUtil . getFileParameters ( size ,    null ,    bytes )  ;", "}", "METHOD_END"], "methodName": ["getFileParameters"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    FileItem [  ]  >    fileParameters    =    new   HashMap <  >  (  )  ;", "LiferayFileItemFactory   fileItemFactory    =    new   LiferayFileItemFactory ( UploadServletRequestImpl . getTempDir (  )  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "String   fileParameter    =     \" fileParameter \"     +    i ;", "if    ( namespace    !  =    null )     {", "fileParameter    =    namespace . concat ( fileParameter )  ;", "}", "LiferayFileItem [  ]    liferayFileItems    =    new   LiferayFileItem [  2  ]  ;", "for    ( int   j    =     0  ;    j    <     ( liferayFileItems . length )  ;    j +  +  )     {", "liferayFileItems [ j ]     =    fileItemFactory . createItem ( Random . randomString (  )  ,    Random . randomString (  )  ,    true ,    Random . randomString (  )  )  ;", "try    ( OutputStream   outputStream    =    liferayFileItems [ j ]  . getOutputStream (  )  )     {", "outputStream . write ( bytes )  ;", "}", "}", "fileParameters . put ( fileParameter ,    liferayFileItems )  ;", "}", "return   fileParameters ;", "}", "METHOD_END"], "methodName": ["getFileParameters"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "HttpServletRequest   httpServletRequest    =    new   MockHttpServletRequest (  )  ;", "httpServletRequest . setAttribute ( LAYOUT ,    layout )  ;", "ThemeDisplay   themeDisplay    =    ThemeDisplayFactory . create (  )  ;", "Company   company    =    CompanyLocalServiceUtil . getCompany ( layout . getCompanyId (  )  )  ;", "themeDisplay . setCompany ( company )  ;", "themeDisplay . setLayout ( layout )  ;", "themeDisplay . setLayoutSet ( layout . getLayoutSet (  )  )  ;", "themeDisplay . setPlid ( layout . getPlid (  )  )  ;", "themeDisplay . setPURL ( PORTAL _ URL )  ;", "themeDisplay . setRequest ( httpServletRequest )  ;", "themeDisplay . setScopeGroupId ( group . getGroupId (  )  )  ;", "themeDisplay . setSiteGroupId ( group . getGroupId (  )  )  ;", "themeDisplay . setUser ( TestPropsValues . getUser (  )  )  ;", "httpServletRequest . setAttribute ( THEME _ DISPLAY ,    themeDisplay )  ;", "return   httpServletRequest ;", "}", "METHOD_END"], "methodName": ["getHttpServletRequest"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "MockMultipartHttpServletRequest   mockMultipartHttpServletRequest    =    new   MockMultipartHttpServletRequest (  )  ;", "mockMultipartHttpServletRequest . addFile ( new   MockMultipartFile ( fileNameParameter ,    bytes )  )  ;", "mockMultipartHttpServletRequest . setContent ( bytes )  ;", "mockMultipartHttpServletRequest . setContentType (  (  \" multipart / form - data ; boundary =  \"     +     ( System . currentTimeMillis (  )  )  )  )  ;", "mockMultipartHttpServletRequest . setCharacterEncoding (  \" UTF -  8  \"  )  ;", "MockHttpSession   mockHttpSession    =    new   MockHttpSession (  )  ;", "mockHttpSession . setAttribute ( PERCENT ,    new   Object (  )  )  ;", "mockMultipartHttpServletRequest . setSession ( mockHttpSession )  ;", "return   new   pload . LiferayServletRequest ( mockMultipartHttpServletRequest )  ;", "}", "METHOD_END"], "methodName": ["getMultipartRequest"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "PortletURL   portletURL    =    PortletURLFactoryUtil . create ( httpServletRequest ,    portletId ,    layout . getPlid (  )  ,    RESOURCE _ PHASE )  ;", "return    . request ( portletURL . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPortalAuthentication"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    List < String >  >    regularParameters    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "List < String >    items    =    new   ArrayList <  >  (  )  ;", "for    ( int   j    =     0  ;    j    <     1  0  ;    j +  +  )     {", "items . add ( Random . randomString (  )  )  ;", "}", "regularParameters . put (  (  \" regularParameter \"     +    i )  ,    items )  ;", "}", "return   regularParameters ;", "}", "METHOD_END"], "methodName": ["getRegularParameters"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mockMultipartHttpServletRequest . getInputStream (  )  )     =  =    null )     {", "throw   new   IllegalStateException (  \" Input   stream   is   null \"  )  ;", "}", "String [  ]    cookies    =    mockMultipartHttpServletRequest . getParameterValues (  \" Cookie \"  )  ;", "if    (  ( cookies    =  =    null )     |  |     (  ( cookies . length )     =  =     0  )  )     {", "throw   new   IllegalStateException (  \" Cookie   is   null \"  )  ;", "}", "CloseableHttpResponse   closeableHttpResponse    =    null ;", "HttpClientBuilder   httpClientBuilder    =    HttpClientBuilder . create (  )  ;", "try    ( CloseableHttpClient   closeableHttpClient    =    httpClientBuilder . build (  )  ; StringWriter   stringWriter    =    new   StringWriter (  )  ; WriterOutputStream   writerOutputStream    =    new   WriterOutputStream ( stringWriter )  )     {", "RequestBuilder   requestBuilder    =    RequestBuilder . post ( url )  ;", "for    ( String   cookie    :    cookies )     {", "requestBuilder . addHeader ( new   BasicHeader (  \" Cookie \"  ,    cookie )  )  ;", "}", "byte [  ]    bytes    =    FileUtil . getBytes ( mockMultipartHttpServletRequest . getInputStream (  )  )  ;", "MultipartEntityBuilder   multipartEntityBuilder    =    MultipartEntityBuilder . create (  )  ;", "ByteArrayBody   byteArrayBody    =    new   ByteArrayBody ( bytes ,    ContentType . DEFAULT _ BINARY ,    fileNameParameter )  ;", "multipartEntityBuilder . addPart ( fileNameParameter ,    byteArrayBody )  ;", "requestBuilder . setEntity ( multipartEntityBuilder . build (  )  )  ;", "URI   uri    =    requestBuilder . getUri (  )  ;", "closeableHttpResponse    =    closeableHttpClient . execute ( new   HttpHost ( uri . getHost (  )  ,    uri . getPort (  )  )  ,    requestBuilder . build (  )  )  ;", "StatusLine   statusLine    =    closeableHttpResponse . getStatusLine (  )  ;", "HttpEntity   httpEntity    =    closeableHttpResponse . getEntity (  )  ;", "httpEntity . writeTo ( writerOutputStream )  ;", "writerOutputStream . flush (  )  ;", "return   new    . Response ( statusLine . getStatusCode (  )  ,    stringWriter . toString (  )  ,    null )  ;", "}    finally    {", "try    {", "if    ( closeableHttpResponse    !  =    null )     {", "closeableHttpResponse . close (  )  ;", "}", "}    catch    ( IOException   ioe )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", ".  _ log . warn ( ioe ,    ioe )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["postMultipart"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   PortletContainerTestUtil . request ( url ,    Collections .  < String ,    List < String >  > emptyMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["request"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "URL   urlObject    =    new   URL ( url )  ;", "HttpURLConnection   httpURLConnection    =     (  ( HttpURLConnection )     ( urlObject . openConnection (  )  )  )  ;", "httpURLConnection . setConnectTimeout (  (  1  5  0  0     *     1  0  0  0  )  )  ;", "httpURLConnection . setInstanceFollowRedirects ( true )  ;", "httpURLConnection . setReadTimeout (  (  1  5  0  0     *     1  0  0  0  )  )  ;", "for    ( Map . Entry < String ,    List < String >  >    entry    :    headers . entrySet (  )  )     {", "String   key    =    entry . getKey (  )  ;", "for    ( String   value    :    entry . getValue (  )  )     {", "if    ( key . equals (  \" Cookie \"  )  )     {", "httpURLConnection . addRequestProperty ( key ,    value . split (  \"  ;  \"  ,     2  )  [  0  ]  )  ;", "} else    {", "httpURLConnection . setRequestProperty ( key ,    value )  ;", "}", "}", "}", "try    ( InputStream   inputStream    =    httpURLConnection . getInputStream (  )  )     {", "Map < String ,    List < String >  >    headerFields    =    httpURLConnection . getHeaderFields (  )  ;", "return   new    . Response ( httpURLConnection . getResponseCode (  )  ,    StringUtil . read ( inputStream )  ,    headerFields . get (  \" Set - Cookie \"  )  )  ;", "}    catch    ( IOException   ioe )     {", "try    ( InputStream   inputStream    =    httpURLConnection . getErrorStream (  )  )     {", "if    ( inputStream    !  =    null )     {", "while    (  ( inputStream . read (  )  )     !  =     (  -  1  )  )  ;", "}", "}", "return   new    . Response ( httpURLConnection . getResponseCode (  )  ,    null ,    null )  ;", "}    finally    {", "httpURLConnection . disconnect (  )  ;", "}", "}", "METHOD_END"], "methodName": ["request"], "fileName": "com.liferay.portal.util.test.PortletContainerTestUtil"}, {"methodBody": ["METHOD_START", "{", "_ oldValues . put ( key ,    PrefsPropsUtil . getString ( key )  )  ;", "portletPreferences . setValue ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["_setTemporaryValue"], "fileName": "com.liferay.portal.util.test.PrefsPropsTemporarySwapper"}, {"methodBody": ["METHOD_START", "{", "try    {", "Settings   settings    =    settingsFactory . getSettings ( new   rviceSettingsLocator ( companyId ,    getSettingsId (  )  )  )  ;", "return   settings ;", "}    catch    ( SettingsException   se )     {", "throw   new   IllegalStateException ( se )  ;", "}", "}", "METHOD_END"], "methodName": ["getSettings"], "fileName": "com.liferay.portal.verify.test.BaseCompanySettingsVerifyProcessTestCase"}, {"methodBody": ["METHOD_START", "{", "VerifyProcess   verifyProcess    =    getVerifyProcess (  )  ;", "verifyProcess . verify (  )  ;", "}", "METHOD_END"], "methodName": ["doVerify"], "fileName": "com.liferay.portal.verify.test.BaseVerifyProcessTestCase"}, {"methodBody": ["METHOD_START", "{", "_ pacl    =    ReflectionTestUtil . getFieldValue ( DataAccess . class ,     \"  _ pacl \"  )  ;", "ReflectionTestUtil . setFieldValue ( DataAccess . class ,     \"  _ pacl \"  ,    new    . PACLWrapper (  _ pacl )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portal.verify.test.BaseVerifyProcessTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ pacl )     =  =    null )     {", "throw   new   NullPointerException (  )  ;", "}", "ReflectionTestUtil . setFieldValue ( DataAc . class ,     \"  _ pacl \"  ,     _ pacl )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portal.verify.test.BaseVerifyProcessTestCase"}, {"methodBody": ["METHOD_START", "{", "Exception   exception    =    null ;", "try    {", "do (  )  ;", "}    catch    ( Exception   ve )     {", "exception    =    ve ;", "}    finally    {", "for    ( ObjectValuePair < Connection ,    Exception >    objectValuePair    :     _ objectValuePairs )     {", "Connection   connection    =    objectValuePair . getKey (  )  ;", "if    (  !  ( connection . isClosed (  )  )  )     {", "if    ( exception    =  =    null )     {", "exception    =    objectValuePair . getValue (  )  ;", "} else    {", "exception . addSuppressed ( objectValuePair . getValue (  )  )  ;", "}", "}", "}", "if    ( exception    !  =    null )     {", "throw   exception ;", "}", "}", "}", "METHOD_END"], "methodName": ["testVerify"], "fileName": "com.liferay.portal.verify.test.BaseVerifyProcessTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   WebServerServlet (  )  ;", "}", "METHOD_END"], "methodName": ["getServlet"], "fileName": "com.liferay.portal.webserver.test.BaseWebServerTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( headers    =  =    null )     {", "headers    =    new   HashMap <  >  (  )  ;", "}", "if    ( params    =  =    null )     {", "params    =    new   HashMap <  >  (  )  ;", "}", "if    ( user    =  =    null )     {", "user    =    TestPropsValues . getUser (  )  ;", "}", "String   requestURI    =    StringBundler . concat (  .  _ CONTEXT _ PATH ,     .  _ SERVLET _ PATH ,     .  _ PATH _ INFO _ PREFACE ,    path )  ;", "MockHttpServletRequest   mockHttpServletRequest    =    new   MockHttpServletRequest ( method ,    requestURI )  ;", "mockHttpServletRequest . setAttribute ( USER ,    user )  ;", "mockHttpServletRequest . setContextPath (  .  _ CONTEXT _ PATH )  ;", "mockHttpServletRequest . setParameters ( params )  ;", "mockHttpServletRequest . setPathInfo (  (  (  .  _ PATH _ INFO _ PREFACE )     +    path )  )  ;", "mockHttpServletRequest . setServletPath (  .  _ SERVLET _ PATH )  ;", "if    ( data    !  =    null )     {", "mockHttpServletRequest . setContent ( data )  ;", "String   contentType    =    headers . remove ( CONTENT _ TYPE )  ;", "if    ( contentType    !  =    null )     {", "mockHttpServletRequest . setContentType ( contentType )  ;", "} else    {", "mockHttpServletRequest . setContentType ( TEXT _ PLAIN )  ;", "}", "}", "for    ( Map . Entry < String ,    String >    entry    :    headers . entrySet (  )  )     {", "String   key    =    entry . getKey (  )  ;", "String   value    =    entry . getValue (  )  ;", "mockHttpServletRequest . addHeader ( key ,    value )  ;", "}", "MockHttpServletResponse   mockHttpServletResponse    =    new   MockHttpServletResponse (  )  ;", "mockHttpServletResponse . setCharacterEncoding ( UTF 8  )  ;", "Servlet   httpServlet    =    getServlet (  )  ;", "httpServlet . service ( mockHttpServletRequest ,    mockHttpServletResponse )  ;", "return   mockHttpServletResponse ;", "}", "METHOD_END"], "methodName": ["service"], "fileName": "com.liferay.portal.webserver.test.BaseWebServerTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModel"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithClassType"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addBaseModelWithWorkflow"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "List < BaseModel <  ?  >  >    baseModels    =    new   ArrayList <  >  (  )  ;", "for    ( Group   group    :    groups )     {", "User   user    =    UserTestUtil . getAdminUser ( group . getCompanyId (  )  )  ;", "serviceContext . setCompanyId ( group . getCompanyId (  )  )  ;", "serviceContext . setScopeGroupId ( group . getGroupId (  )  )  ;", "serviceContext . setUserId ( user . getUserId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel ( group ,    serviceContext )  ;", "baseModels . add ( addBaseModel ( parentBaseModel ,    keywords ,    serviceContext )  )  ;", "}", "return   baseModels ;", "}", "METHOD_END"], "methodName": ["addBaseModels"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "assertCount ( expectedCount ,    assetEntryQuery ,    searchContext ,    ALL _ POS ,    ALL _ POS )  ;", "}", "METHOD_END"], "methodName": ["assertCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "int   actualCount    =    searchCount ( assetEntryQuery ,    searchContext ,    start ,    end )  ;", "Assert . assertEquals ( expectedCount ,    actualCount )  ;", "}", "METHOD_END"], "methodName": ["assertCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    strings    =    new   String [ dates . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( strings . length )  ;    i +  +  )     {", "strings [ i ]     =    dateFormat . format ( dates [ i ]  )  ;", "}", "return   strings ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Date [  ]    dates    =    new   Date [ size ]  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "Date   date    =    new   Date (  (  ( startDate . getTime (  )  )     +     (  (  ( RandomUtil . nextInt (  3  6  5  )  )     +     1  )     *     ( Time . DAY )  )  )  )  ;", "Calendar   calendar    =    new   GregorianCalendar (  )  ;", "calendar . setTime ( date )  ;", "calendar . set ( Calendar . SECOND ,     0  )  ;", "calendar . set ( Calendar . MILLISECOND ,     0  )  ;", "dates [ i ]     =    calendar . getTime (  )  ;", "}", "return   dates ;", "}", "METHOD_END"], "methodName": ["generateRandomDates"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz    =    getBaseModelClass (  )  ;", "return   clazz . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getBaseModelClassName"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getClassTypeIds"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Date [  ]    dates    =    new   Date [ assetEntries . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( dates . length )  ;    i +  +  )     {", "int   index    =    i ;", "if    ( orderByType . equals (  \" desc \"  )  )     {", "index    =     (  ( dates . length )     -     1  )     -    i ;", "}", "AssetEntry   assetEntry    =    assetEntries . get ( index )  ;", "dates [ i ]     =    assetEntry . getExpirationDate (  )  ;", "}", "return   dates ;", "}", "METHOD_END"], "methodName": ["getExpirationDates"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    titles    =    new   String [ orderedTitleMaps . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    orderedTitleMap    =    orderedTitleMaps . get ( i )  ;", "titles [ i ]     =    orderedTitleMap . get ( locale )  ;", "}", "return   titles ;", "}", "METHOD_END"], "methodName": ["getOrderedTitles"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getParentBaseModel"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    titles    =    new   String [ assetEntries . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "AssetEntry   assetEntry    =    assetEntries . get ( i )  ;", "titles [ i ]     =    assetEntry . getTitle ( locale )  ;", "}", "return   titles ;", "}", "METHOD_END"], "methodName": ["getTitles"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isLocalizableTitle"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   results    =    AssetUtil . search ( searchContext ,    assetEntryQuery ,    ALL _ POS ,    ALL _ POS )  ;", "return   AssetUtil . getAssetEntries ( results )  ;", "}", "METHOD_END"], "methodName": ["search"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "Hits   results    =    AssetUtil . search ( searchContext ,    assetEntryQuery ,    start ,    end )  ;", "return   results . getLength (  )  ;", "}", "METHOD_END"], "methodName": ["searchCount"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "_ group 1     =    GroupTestUtil . addGroup (  )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "AssetVocabulary   vocabulary    =    AssetVocabularyLocalServiceUtil . addVocabulary ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "_ vocabularyId    =    vocabulary . getVocabularyId (  )  ;", "AssetCategory   fashionCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Fashion \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ fashionCategoryId    =    fashionCategory . getCategoryId (  )  ;", "AssetCategory   foodCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Food \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ foodCategoryId    =    foodCategory . getCategoryId (  )  ;", "AssetCategory   healthCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Health \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ healthCategoryId    =    healthCategory . getCategoryId (  )  ;", "AssetCategory   sportCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Sport \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ sportCategoryId    =    sportCategory . getCategoryId (  )  ;", "AssetCategory   travelCategory    =    AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,     _ group 1  . getGroupId (  )  ,     \" Travel \"  ,     _ vocabularyId ,    serviceContext )  ;", "_ travelCategoryId    =    travelCategory . getCategoryId (  )  ;", "_ assetCategoryIds 1     =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "_ assetCategoryIds 2     =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ healthCategoryId ,     _ sportCategoryId    }  ;", "_ group 2     =    GroupTestUtil . addGroup (  )  ;", "long [  ]    groupIds    =    new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ;", "for    ( long   groupId    :    groupIds )     {", "serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \"  \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" architecture \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" modularity \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" osgi \"  ,    serviceContext )  ;", "AssetTagLocalServiceUtil . addTag ( TestPropsValues . getUserId (  )  ,    groupId ,     \" services \"  ,    serviceContext )  ;", "}", "_ assetTagsNames 1     =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" modularity \"  ,     \" osgi \"     }  ;", "_ assetTagsNames 2     =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAllAssetTagsMultipleGroups4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    anyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAnyAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "testAssetCategorization ( new   Group [  ]  {     _ group 1     }  ,    assetEntryQuery ,    expectedResults )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategorization"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "SearchContext   searchContext    =    SearchContextTestUtil . getSearchContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groups [  0  ]  . getGroupId (  )  )  ;", "serviceContext . setAssetTagNames (  _ assetTagsNames 1  )  ;", "serviceContext . setAssetCategoryIds (  _ assetCategoryIds 1  )  ;", "addBaseModels ( groups ,    getSearchKeywords (  )  ,    serviceContext )  ;", "serviceContext . setAssetTagNames (  _ assetTagsNames 2  )  ;", "serviceContext . setAssetCategoryIds (  _ assetCategoryIds 2  )  ;", "addBaseModels ( groups ,    getSearchKeywords (  )  ,    serviceContext )  ;", "assertCount (  ( initialEntries    +    expectedResults )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategorization"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allCategoryIds ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAllAndNotAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId    }  ;", "long [  ]    allCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    allCategoryIds ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAnyAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "long [  ]    anyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    anyCategoryIds )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetCategoryNotAnyAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    allTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    null ,    allTagNames ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" osgi \"  ,     \" modularity \"     }  ;", "String [  ]    allTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" services \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" osgi \"  ,     \" modularity \"     }  ;", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAllAndNotAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"     }  ;", "String [  ]    allTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    allTagNames ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAnyAndAll"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "String [  ]    anyTagNames    =    new   String [  ]  {     \"  \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    anyTagNames )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testAssetTagsNotAnyAndAny"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassNames ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testClassName1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    classNameIds    =    AssetRendererFactoryRegistryUtil . getClassNameIds ( TestPropsValues . getCompanyId (  )  )  ;", "classNameIds    =    ArrayUtil . remove ( classNameIds ,    PortalUtil . getClassNameId ( getBaseModelClass (  )  )  )  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    classNameIds )  ;", "testClassNames ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testClassName2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "addBaseModel ( parentBaseModel ,    gKeywords (  )  ,    serviceContext )  ;", "assertCount (  ( initialEntries    +    expectedResult )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testClassNames"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "addBaseModelWithClassType ( parentBaseModel ,    gKeywords (  )  ,    serviceContext )  ;", "if    ( classType )     {", "assetEntryQuery . setClassTypeIds ( getClassTypeIds (  )  )  ;", "assertCount (  ( initialEntries    +     1  )  ,    assetEntryQuery ,    searchContext )  ;", "} else    {", "assetEntryQuery . setClassTypeIds ( new   long [  ]  {     0     }  )  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "}", "}", "METHOD_END"], "methodName": ["testClassTypeIds"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassTypeIds ( assetEntryQuery ,    true )  ;", "}", "METHOD_END"], "methodName": ["testClassTypeIds1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "testClassTypeIds ( assetEntryQuery ,    false )  ;", "}", "METHOD_END"], "methodName": ["testClassTypeIds2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    new   AssetEntryQuery (  )  ;", "assetEntryQuery . setClassName ( getBaseModelClassName (  )  )  ;", "Group   group 1     =    GroupTestUtil . addGroup (  )  ;", "Group   group 2     =    GroupTestUtil . addGroup (  )  ;", "assetEntryQuery . setGroupIds ( new   long [  ]  {    group 1  . getGroupId (  )  ,    group 2  . getGroupId (  )     }  )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "int   initialEntries    =     0  ;", "assertCount ( initialEntries ,    assetEntryQuery ,    searchContext )  ;", "ServiceContext   serviceContext 1     =    ServiceContextTestUtil . getServiceContext ( group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 1     =    getParentBaseModel ( group 1  ,    serviceContext 1  )  ;", "addBaseModel ( parentBaseModel 1  ,    gKeywords (  )  ,    serviceContext 1  )  ;", "ServiceContext   serviceContext 2     =    ServiceContextTestUtil . getServiceContext ( group 2  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel 2     =    getParentBaseModel ( group 1  ,    serviceContext 2  )  ;", "addBaseModel ( parentBaseModel 2  ,    gKeywords (  )  ,    serviceContext 2  )  ;", "assertCount (  ( initialEntries    +     2  )  ,    assetEntryQuery ,    searchContext )  ;", "}", "METHOD_END"], "methodName": ["testGroups"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAllCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllCategoryIds ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAllTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery ( new   long [  ]  {     _ group 1  . getGroupId (  )  ,     _ group 2  . getGroupId (  )     }  ,    getBaseModelClassName (  )  ,    notAllTagNames ,    null ,    null ,    null )  ;", "testAssetCategorization ( new   Group [  ]  {     _ group 1  ,     _ group 2     }  ,    assetEntryQuery ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testNotAllAssetTagsMultipleGroups4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ healthCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ healthCategoryId ,     _ sportCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId ,     _ travelCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "long [  ]    notAnyCategoryIds    =    new   long [  ]  {     _ fashionCategoryId ,     _ foodCategoryId    }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyCategoryIds ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetCategories4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags1"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags2"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" liferay \"  ,     \" architecture \"  ,     \" services \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags3"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    notAnyTagNames    =    new   String [  ]  {     \" modularity \"  ,     \" osgi \"     }  ;", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . creatEntryQuery (  _ group 1  . getGroupId (  )  ,    getBaseModelClassName (  )  ,    null ,    notAnyTagNames ,    null ,    null )  ;", "testAssetCategorization ( assetEntryQuery ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNotAnyAssetTags4"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "long   createDate    =     0  ;", "BaseModel <  ?  >  [  ]    baseModels    =    new   BaseModel [ titles . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( titles . length )  ;    i +  +  )     {", "long   delta    =     1  0  0  0     -     (  ( System . currentTimeMillis (  )  )     -    createDate )  ;", "if    ( delta    >     0  )     {", "Thread . sleep ( delta )  ;", "}", "createDate    =    System . currentTimeMillis (  )  ;", "baseModels [ i ]     =    addBaseModel ( parentBaseModel ,    titles [ i ]  ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" createDate \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( orderedTitles )  ,    ArrayUtils . toString ( getTitles ( assetEntries ,    LocaleUtil . getDefault (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDate"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    titles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" social \"  ,     \" osgi \"  ,     \" content \"  ,     \" life \"     }  ;", "testOrderByCreateDate ( assetEntryQuery ,     \" asc \"  ,    titles ,    titles )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDateAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    titles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" social \"  ,     \" osgi \"  ,     \" content \"  ,     \" life \"     }  ;", "String [  ]    orderedTitles    =    new   String [  ]  {     \" life \"  ,     \" content \"  ,     \" osgi \"  ,     \" social \"  ,     \"  \"  ,     \" open \"     }  ;", "testOrderByCreateDate ( assetEntryQuery ,     \" desc \"  ,    titles ,    orderedTitles )  ;", "}", "METHOD_END"], "methodName": ["testOrderByCreateDateDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( Date   expirationDate    :    expirationDates )     {", "addBaseModel ( parentBaseModel ,    RandomTestUtil . randomString (  )  ,    expirationDate ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" expirationDate \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "Arrays . sort ( expirationDates )  ;", "final   DateFormat   dateFormat    =    DateFormatFactoryUtil . getSimpleDateFormat ( INDEX _ DATE _ FORMAT _ PATTERN )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( format ( expirationDates ,    dateFormat )  )  ,    ArrayUtils . toString ( format ( getExpirationDates ( assetEntries ,    orderByType )  ,    dateFormat )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDate"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "Date [  ]    expirationDates    =    generateRandomDates ( new   Date (  )  ,     6  )  ;", "testOrderByExpirationDate ( assetEntryQuery ,     \" asc \"  ,    expirationDates )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDateAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "Date [  ]    expirationDates    =    generateRandomDates ( new   Date (  )  ,     6  )  ;", "testOrderByExpirationDate ( assetEntryQuery ,     \" desc \"  ,    expirationDates )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpirationDateDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "for    ( Map < Locale ,    String >    titleMap    :    titleMaps )     {", "addBaseModel ( parentBaseModel ,    titleMap ,    serviceContext )  ;", "}", "assetEntryQuery . setOrderByCol 1  (  \" title \"  )  ;", "assetEntryQuery . setOrderByType 1  ( orderByType )  ;", "final   SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( final   Locale   locale    :    locales )     {", "searchContext . setLocale ( locale )  ;", "List < AssetEntry >    assetEntries    =    search ( assetEntryQuery ,    searchContext )  ;", "Assert . assertEquals ( ArrayUtils . toString ( getOrderedTitles ( orderedTitleMaps ,    locale )  )  ,    ArrayUtils . toString ( getTitles ( assetEntries ,    locale )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testOrderByTitle"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    defaultTitles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" life \"     }  ;", "String [  ]    frenchTitles    =    new   String [  ]  {     \" ouvert \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    titleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultTitles [ i ]  )  ;", "titleMap . put ( FRANCE ,    frenchTitles [ i ]  )  ;", "titleMaps . add ( titleMap )  ;", "}", "String [  ]    defaultOrderedTitles    =    new   String [  ]  {     \" content \"  ,     \" life \"  ,     \"  \"  ,     \" open \"  ,     \" osgi \"  ,     \" social \"     }  ;", "String [  ]    frenchOrderedTitles    =    new   String [  ]  {     \" content \"  ,     \"  \"  ,     \" osgi \"  ,     \" ouvert \"  ,     \" social \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    orderedTitleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultOrderedTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultOrderedTitles [ i ]  )  ;", "String   orderedTitle    =    frenchOrderedTitles [ i ]  ;", "if    (  !  ( isLocalizableTitle (  )  )  )     {", "orderedTitle    =    defaultOrderedTitles [ i ]  ;", "}", "titleMap . put ( FRANCE ,    orderedTitle )  ;", "orderedTitleMaps . add ( titleMap )  ;", "}", "testOrderByTitle ( assetEntryQuery ,     \" asc \"  ,    titleMaps ,    orderedTitleMaps ,    new   Locale [  ]  {    LocaleUtil . getDefault (  )  ,    LocaleUtil . FRANCE    }  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByTitleAsc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "String [  ]    defaultTitles    =    new   String [  ]  {     \" open \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" life \"     }  ;", "String [  ]    frenchTitles    =    new   String [  ]  {     \" ouvert \"  ,     \"  \"  ,     \" content \"  ,     \" social \"  ,     \" osgi \"  ,     \" vie \"     }  ;", "List < Map < Locale ,    String >  >    titleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultTitles [ i ]  )  ;", "titleMap . put ( FRANCE ,    frenchTitles [ i ]  )  ;", "titleMaps . add ( titleMap )  ;", "}", "String [  ]    defaultOrderedTitles    =    new   String [  ]  {     \" social \"  ,     \" osgi \"  ,     \" open \"  ,     \"  \"  ,     \" life \"  ,     \" content \"     }  ;", "String [  ]    frenchOrderedTitles    =    new   String [  ]  {     \" vie \"  ,     \" social \"  ,     \" ouvert \"  ,     \" osgi \"  ,     \"  \"  ,     \" content \"     }  ;", "List < Map < Locale ,    String >  >    orderedTitleMaps    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( defaultOrderedTitles . length )  ;    i +  +  )     {", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "titleMap . put ( LocaleUtil . getDefault (  )  ,    defaultOrderedTitles [ i ]  )  ;", "String   orderedTitle    =    frenchOrderedTitles [ i ]  ;", "if    (  !  ( isLocalizableTitle (  )  )  )     {", "orderedTitle    =    defaultOrderedTitles [ i ]  ;", "}", "titleMap . put ( FRANCE ,    orderedTitle )  ;", "orderedTitleMaps . add ( titleMap )  ;", "}", "testOrderByTitle ( assetEntryQuery ,     \" desc \"  ,    titleMaps ,    orderedTitleMaps ,    new   Locale [  ]  {    LocaleUtil . getDefault (  )  ,    LocaleUtil . FRANCE    }  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByTitleDesc"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext (  _ group 1  . getGroupId (  )  )  ;", "BaseModel <  ?  >    parentBaseModel    =    getParentBaseModel (  _ group 1  ,    serviceContext )  ;", "SearchContext   searchContext    =    SearchContextTestUtil . gContext (  )  ;", "searchContext . setGroupIds ( assetEntryQuery . getGroupIds (  )  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "addBaseModel ( parentBaseModel ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "assertCount ( size ,    assetEntryQuery ,    searchContext ,     0  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationType"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" none \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeNone"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" regular \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeRegular"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "AssetEntryQuery   assetEntryQuery    =    AssetEntryQueryTestUtil . createAssetEntryQuery (  _ group 1  . getGroupId (  )  ,    new   String [  ]  {    getBaseModelClassName (  )     }  )  ;", "assetEntryQuery . setPaginationType (  \" simple \"  )  ;", "testPaginationType ( assetEntryQuery ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testPaginationTypeSimple"], "fileName": "com.liferay.portlet.asset.search.test.BaseAssetSearchTestCase"}, {"methodBody": ["METHOD_START", "{", "return   AssetTestUtil . addAssetEntry ( groupId ,    null )  ;", "}", "METHOD_END"], "methodName": ["addAssetEntry"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   assetEntryId    =    CounterLocalServiceUtil . increment (  )  ;", "AssetEntry   assetEntry    =    AssetEntryLocalServiceUtil . createAssetEntry ( assetEntryId )  ;", "assetEntry . setClassName ( Random . randomString (  )  )  ;", "assetEntry . setClassPK ( Random . randomLong (  )  )  ;", "assetEntry . setGroupId ( groupId )  ;", "assetEntry . setPublishDate ( publishDate )  ;", "assetEntry . setVisible ( true )  ;", "return   AssetEntryLocalServiceUtil . updateAssetEntry ( assetEntry )  ;", "}", "METHOD_END"], "methodName": ["addAssetEntry"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   AssetTestUtil . addCategory ( groupId ,    vocabularyId ,    DEFAULT _ PARENT _ CATEGORY _ ID )  ;", "}", "METHOD_END"], "methodName": ["addCategory"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "Locale   locale    =    LocaleUtil . getSiteDefault (  )  ;", "titleMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "String [  ]    categoryProperties    =    null ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    TestPropsValues . getUserId (  )  )  ;", "return   AssetCategoryLocalServiceUtil . addCategory ( TestPropsValues . getUserId (  )  ,    groupId ,    parentCategoryId ,    titleMap ,    descriptionMap ,    vocabularyId ,    categoryProperties ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addCategory"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   userId    =    TestPropsValues . getUserId (  )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    userId )  ;", "return   AssetTagLocalServiceUtil . addTag ( userId ,    groupId ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addTag"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "long   userId    =    TestPropsValues . getUserId (  )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    userId )  ;", "return   AssetVocabularyLocalServiceUtil . addVocabulary ( userId ,    groupId ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addVocabulary"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    titleMap    =    new   HashMap <  >  (  )  ;", "Locale   locale    =    LocaleUtil . getSiteDefault (  )  ;", "titleMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "Map < Locale ,    String >    descriptionMap    =    new   HashMap <  >  (  )  ;", "descriptionMap . put ( locale ,    RandomTestUtil . randomString (  )  )  ;", "AssetVocabularySettingsHelper   vocabularySettingsHelper    =    new   AssetVocabularySettingsHelper (  )  ;", "vocabularySettingsHelper . setClassNameIdsAndClassTypePKs ( new   long [  ]  {    classNameId    }  ,    new   long [  ]  {    classTypePK    }  ,    new   boolean [  ]  {    required    }  )  ;", "vocabularySettingsHelper . setMultiValued ( true )  ;", "ServiceContext   serviceContext    =    ServiceContex . getServiceContext ( groupId ,    TestPropsValues . getUserId (  )  )  ;", "AssetVocabulary   vocabulary    =    AssetVocabularyServiceUtil . addVocabulary ( groupId ,    RandomTestUtil . randomString (  )  ,    titleMap ,    descriptionMap ,    vocabularySettingsHelper . toString (  )  ,    serviceContext )  ;", "return   vocabulary ;", "}", "METHOD_END"], "methodName": ["addVocabulary"], "fileName": "com.liferay.portlet.asset.util.test.AssetTestUtil"}, {"methodBody": ["METHOD_START", "{", "_ name    =    PrincipalThreadLocal . getName (  )  ;", "group    =    GroupTestUtil . addGroup (  )  ;", "targetGroup    =    GroupTestUtil . addGroup (  )  ;", "try    {", "DLAppServiceUtil . deleteFolder ( group . getGroupId (  )  ,    DEFAULT _ PARENT _ FOLDER _ ID ,     \" Test   Folder \"  )  ;", "}    catch    ( NoSuchFolderException   nsfe )     {", "if    (  .  _ log . isDebugEnabled (  )  )     {", ".  _ log . debug ( nsfe ,    nsfe )  ;", "}", "}", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( group . getGroupId (  )  ,    TestPropsValues . getUserId (  )  )  ;", "parentFolder    =    DLAppServiceUtil . addFolder ( group . getGroupId (  )  ,    DEFAULT _ PARENT _ FOLDER _ ID ,     \" Test   Folder \"  ,    RandomTestUtil . randomString (  )  ,    serviceContext )  ;", "RoleTestUtil . addResourcePermission ( GUEST ,    RESOURCE _ NAME ,    SCOPE _ GROUP ,    String . valueOf ( group . getGroupId (  )  )  ,    VIEW )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.documentlibrary.service.test.BaseDLAppTestCase"}, {"methodBody": ["METHOD_START", "{", "PrincipalThreadLocal . setName (  _ name )  ;", "RoleUtil . removeResourcePermission ( GUEST ,    RESOURCE _ NAME ,    SCOPE _ GROUP ,    String . valueOf ( group . getGroupId (  )  )  ,    VIEW )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.documentlibrary.service.test.BaseDLAppTestCase"}, {"methodBody": ["METHOD_START", "{", "String   versionLabel    =     \"  1  .  \"  ;", "for    ( int   i    =     1  ;    i    <  =    newVersionCount ;    i +  +  )     {", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     ( versionLabel    +    i )  ,     .  _ DATA _ VERSION _  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["addVersions"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "File   file    =    File . createTempFile (  \" DBStoreTest - testFile \"  ,    null )  ;", "try    ( OutputStream   outputStream    =    new   FileOutputStream ( file )  )     {", "outputStream . write ( fileData )  ;", "}", "return   file ;", "}", "METHOD_END"], "methodName": ["createFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "StoreFactory   storeFactory    =    StoreFactory . getInstance (  )  ;", "ServiceTrackerMap < String ,    List < StoreWrapper >  >    serviceTrackerMap    =    ReflectionTestUtil . getAndSetFieldValue ( storeFactory ,     \"  _ storeWrapperServiceTrackerMap \"  ,    new   ServiceTrackerMap < String ,    List < StoreWrapper >  >  (  )     {", "@ Override", "public   void   close (  )     {", "}", "@ Override", "public   boolean   containsKey ( String   key )     {", "return   false ;", "}", "@ Override", "public   List < StoreWrapper >    getService ( String   key )     {", "return   Collections . emptyList (  )  ;", "}", "@ Override", "public   Set < String >    keySet (  )     {", "return   Collections . emptySet (  )  ;", "}", "}  )  ;", "try    {", "store    =    storeFactory . getStore ( getype (  )  )  ;", "}    finally    {", "ReflectionTestUtil . setFieldValue ( storeFactory ,     \"  _ storeWrapperServiceTrackerMap \"  ,    serviceTrackerMap )  ;", "}", "companyId    =    RandomTestUtil . nextLong (  )  ;", "repositoryId    =    RandomTestUtil . nextLong (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteDirectory ( companyId ,    repositoryId ,    SLASH )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   BufferedInputStream ( new   ByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithBufferedInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithByteArray"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   ByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithByteArrayInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  1  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    file )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  1  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   FileInputStream ( file )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithFileInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,    new   UnsyncByteArrayInputStream (  .  _ DATA _ VERSION _  1  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testAddFileWithUnsyncByteArrayInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . copyFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  2  \"  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  2  \"  )  )  ;", "Assert . assertArrayEquals (  .  _ DATA _ VERSION _  1  ,    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . copyFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersionDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . copyFileVersion ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCopyFileVersionNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "store . deleteDirectory ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 1  ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 2  ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteDirectory"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "store . deleteDirectory ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 1  ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName 2  ,    VERSION _ DEFAULT )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteDirectoryWithTwoLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . deleteFile ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "store . deleteFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName ,    VERSION _ DEFAULT )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFileWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . getFileAsBytes ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileAsBytesNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     1  )  ;", "try    ( InputStream   inputStream    =    store . getFileAsStream ( companyId ,    repositoryId ,    fileName )  )     {", "for    ( int   i    =     0  ;    i    <     (  .  _ DATA _ SIZE )  ;    i +  +  )     {", "Assert . assertEquals (  .  _ DATA _ VERSION _  1  [ i ]  ,     (  ( byte )     ( inputStream . read (  )  )  )  )  ;", "}", "Assert . assertEquals (  (  -  1  )  ,    inputStream . read (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetFileAsStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     5  )  ;", "try    ( InputStream   inputStream    =    store . getFileAsStream ( companyId ,    repositoryId ,    fileName ,     \"  1  .  5  \"  )  )     {", "for    ( int   i    =     0  ;    i    <     (  .  _ DATA _ SIZE )  ;    i +  +  )     {", "Assert . assertEquals (  .  _ DATA _ VERSION _  1  [ i ]  ,     (  ( byte )     ( inputStream . read (  )  )  )  )  ;", "}", "Assert . assertEquals (  (  -  1  )  ,    inputStream . read (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetFileAsStreamWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName 1     =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNames"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithDirectoryOneLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 3     =     (  ( RandomTestUtil . randomString (  )  )     +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 3  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "fileNames    =    store . getFileNames ( companyId ,    repositoryId ,    subdirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     1  ,    fileNames . length )  ;", "Assert . assertEquals ( fileName 2  ,    fileNames [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithDirectoryTwoLevelDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String [  ]    fileNames    =    getFileNames ( companyId ,    repositoryId ,    dirName )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     0  ,    fileNames . length )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithInvalidDirectory"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     0  ,    fileNames . length )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithInvalidRepository"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   dirName    =    RandomTestUtil . randomString (  )  ;", "String   subdirName    =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "String   fileName 1     =     ( dirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 1  ,     .  _ DATA _ VERSION _  1  )  ;", "String   fileName 2     =     ( subdirName    +     \"  /  \"  )     +     ( RandomTestUtil . randomString (  )  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName 2  ,     .  _ DATA _ VERSION _  1  )  ;", "String [  ]    fileNames    =    store . getFileNames ( companyId ,    repositoryId )  ;", "Assert . assertEquals ( Arrays . toString ( fileNames )  ,     2  ,    fileNames . length )  ;", "Set < String >    fileNamesSet    =    SetUtil . fromArray ( fileNames )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 1  )  )  ;", "Assert . assertTrue ( fileNamesSet . toString (  )  ,    fileNamesSet . contains ( fileName 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileNamesWithTwoLevelsDeep"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "long   size    =    store . getFileSize ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertEquals (  .  _ DATA _ SIZE ,    size )  ;", "}", "METHOD_END"], "methodName": ["testGetFileSize"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . getFileSize ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileSizeNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetFileVersionAsBytesNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "}", "METHOD_END"], "methodName": ["testHasFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     5  )  ;", "String   versionLabel    =     \"  1  .  \"  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    fileName ,     ( versionLabel    +    i )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHasFileWithVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLogFailedDeletion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . deleteFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    VERSION _ DEFAULT )  ;", "}", "METHOD_END"], "methodName": ["testLogFailedDeletionWithVersionLabel"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  1  \"  )  ;", "Assert . assertArrayEquals (  .  _ DATA _ VERSION _  1  ,    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersion"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFileVersion ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  ,     \"  1  .  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFileVersion ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    VERSION _ DEFAULT ,    VERSION _ DEFAULT )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "addVersions ( fileName ,     2  )  ;", "String   newFileName    =    RandomTestUtil . randomString (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    newFileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  0  \"  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  1  \"  )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName ,     \"  1  .  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileVersionWithNewFileName"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,     .  _ DATA _ VERSION _  2  )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithByteArray"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "File   file    =    createFile (  .  _ DATA _ VERSION _  2  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,    file )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithFile"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  ,    new   ByteArrayInputStream (  .  _ DATA _ VERSION _  2  )  )  ;", "byte [  ]    firstVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  0  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  1  ,    firstVersionBytes )  )  ;", "byte [  ]    secondVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName ,     \"  1  .  1  \"  )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    secondVersionBytes )  )  ;", "byte [  ]    currentVersionBytes    =    store . getFileAsBytes ( companyId ,    repositoryId ,    fileName )  ;", "Assert . assertTrue ( Arrays . equals (  .  _ DATA _ VERSION _  2  ,    currentVersionBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithInputStream"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "String   newFileName    =    RandomTestUtil . randomString (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    newFileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    repositoryId ,    newFileName )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileName"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    fileName ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileNameDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFile ( companyId ,    repositoryId ,    RandomTestUtil . randomString (  )  ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewFileNameNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "long   newRepositoryId    =    RandomTestUtil . nextLong (  )  ;", "store . updateFile ( companyId ,    repositoryId ,    newRepositoryId ,    fileName )  ;", "Assert . assertFalse ( store . hasFile ( companyId ,    repositoryId ,    fileName )  )  ;", "Assert . assertTrue ( store . hasFile ( companyId ,    newRepositoryId ,    fileName )  )  ;", "store . deleteDirectory ( companyId ,    newRepositoryId ,    SLASH )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryId"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    RandomTestUtil . randomString (  )  ;", "store . addFile ( companyId ,    repositoryId ,    fileName ,     .  _ DATA _ VERSION _  1  )  ;", "store . updateFile ( companyId ,    repositoryId ,    repositoryId ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryIdDuplicateFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "store . updateFile ( companyId ,    repositoryId ,    RandomTestUtil . nextLong (  )  ,    RandomTestUtil . randomString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateFileWithNewRepositoryIdNoSuchFileException"], "fileName": "com.liferay.portlet.documentlibrary.store.test.BaseStoreTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   workflowEnabled    =    WorkflowThreadLocal . isEnabled (  )  ;", "try    {", "WorkflowThreadLocal . setEnabled ( true )  ;", "serviceContext    =     (  ( ServiceContext )     ( serviceContext . clone (  )  )  )  ;", "serviceContext . setWorkflowAction ( ACTION _ SAVE _ DRAFT )  ;", "FileEntry   fileEntry    =    DLAppLocalServiceUtil . addFileEntry ( userId ,    groupId ,    folderId ,    sourceFileName ,    TEXT _ PLAIN ,    title ,    BLANK ,    BLANK ,    RandomTestUtil . randomBytes ( TikaSafeRandomizerBumper . INSTANCE )  ,    serviceContext )  ;", "if    ( approved )     {", "return    . updateStatus ( fileEntry ,    serviceContext )  ;", "}", "return   fileEntry ;", "}    finally    {", "WorkflowThreadLocal . setEnabled ( workflowEnabled )  ;", "}", "}", "METHOD_END"], "methodName": ["addFileEntryWithWorkflow"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "serviceContext . setAttribute (  \" entryURL \"  ,     \" http :  /  / localhost \"  )  ;", "if    ( Validator . isNotNull ( command )  )     {", "serviceContext . setCommand ( command )  ;", "}", "serviceContext . setLayoutFullURL (  \" http :  /  / localhost \"  )  ;", "}", "METHOD_END"], "methodName": ["populateNotificationsServiceContext"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( fileEntryTypeId    !  =     ( DLFileEntryTypeConstants . FILE _ ENTRY _ TYPE _ ID _ ALL )  )     {", "serviceContext . setAttribute (  \" fileEntryTypeId \"  ,    fileEntryTypeId )  ;", "}", "serviceContext . setLayoutFullURL (  \" http :  /  / localhost \"  )  ;", "}", "METHOD_END"], "methodName": ["populateServiceContext"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Serializable >    workflowContext    =    new   HashMap <  >  (  )  ;", "workflowContext . put ( CONTEXT _ URL ,     \" http :  /  / localhost \"  )  ;", "workflowContext . put (  \" event \"  ,    EVENT _ ADD )  ;", "DLFileEntryLocalServiceUtil . updateStatus ( TestPropsValues . getUserId (  )  ,    fileEntry . getFileVersion (  )  . getFileVersionId (  )  ,    STATUS _ APPROVED ,    serviceContext ,    workflowContext )  ;", "return   LocalServiceUtil . getFileEntry ( fileEntry . getFileEntryId (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateStatus"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLAppTestUtil"}, {"methodBody": ["METHOD_START", "{", "DLFolder   dlFolder    =    DLFolderLocalServiceUtil . fetchDLFolder ( dlFolderId )  ;", "byte [  ]    bytes    =    Random . randomBytes ( TikaSafeRandomizerBumper . INSTANCE )  ;", "InputStream   is    =    new   ByteArrayInputStream ( bytes )  ;", "ServiceContext   serviceContext    =    ServiceContext . getServiceContext ( dlFolder . getGroupId (  )  )  ;", "return   DLFileEntryLocalServiceUtil . addFileEntry ( TestPropsValues . getUserId (  )  ,    dlFolder . getGroupId (  )  ,    dlFolder . getRepositoryId (  )  ,    dlFolder . getFolderId (  )  ,    Random . randomString (  )  ,    TEXT _ PLAIN ,    Random . randomString (  )  ,    BLANK ,    BLANK ,    FILE _ ENTRY _ TYPE _ ID _ BASIC _ DOCUMENT ,    null ,    null ,    is ,    bytes . length ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFileEntry"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "ServiceContext   serviceContext    =    ServiceContextTestUtil . getServiceContext ( groupId )  ;", "return    . addDLFolder ( groupId ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DLTestUtil . addDLFolder ( groupId ,    DEFAULT _ PARENT _ FOLDER _ ID ,    deleteExisting ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "return   DLTestUtil . addDLFolder ( groupId ,    true ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "String   name    =    RandomTestUtil . randomString (  )  ;", "if    ( deleteExisting )     {", "try    {", "DLFolder   folder    =    DLFolderLocalServiceUtil . getFolder ( groupId ,    parentFolderId ,    name )  ;", "DLFolderLocalServiceUtil . deleteFolder ( folder . getFolderId (  )  )  ;", "}    catch    ( NoSuchFolderException   nsfe )     {", "}", "}", "return   DLFolderLocalServiceUtil . addFolder ( TestPropsValues . getUserId (  )  ,    groupId ,    groupId ,    false ,    parentFolderId ,    name ,    BLANK ,    false ,    serviceContext )  ;", "}", "METHOD_END"], "methodName": ["addDLFolder"], "fileName": "com.liferay.portlet.documentlibrary.util.test.DLTestUtil"}, {"methodBody": ["METHOD_START", "{", "UserNotificationDeliveryLocalServiceUtil . deleteUserNotificationDeliveries ( user . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["deleteUserNotificationDeliveries"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationEvent >    userNotificationEvents    =    UserNotificationEventLocalServiceUtil . getUserNotificationEvents ( userId )  ;", "for    ( UserNotificationEvent   userNotificationEvent    :    userNotificationEvents )     {", "UserNotificationEventLocalServiceUtil . deletEvent ( userNotificationEvent )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteUserNotificationEvents"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationDelivery >    userNotificationDeliveries    =    new   ArrayList <  >  (  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ EMAIL ,    true )  )  ;", "userNotificationDeliveries . add ( UserNotificationDeliveryLocalServiceUtil . getUserNotificationDelivery ( userId ,    getPortletId (  )  ,     0  ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ WEBSITE ,    true )  )  ;", "return   userNotificationDeliveries ;", "}", "METHOD_END"], "methodName": ["getUserNotificationDeliveries"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < UserNotificationEvent >    userNotificationEvents    =    UserNotificationEventLocalServiceUtil . getUserNotificationEvents ( userId )  ;", "List < JSONObject >    userNotificationEventJSONObjects    =    new   ArrayList ( userNotificationEvents . size (  )  )  ;", "for    ( UserNotificationEvent   userNotificationEvent    :    userNotificationEvents )     {", "JSONObject   userNotificationEventJSONObject    =    JSONFactoryUtil . createJSONObject ( userNotificationEvent . getPayload (  )  )  ;", "userNotificationEventJSONObjects . add ( userNotificationEventJSONObject )  ;", "}", "return   userNotificationEventJSONObjects ;", "}", "METHOD_END"], "methodName": ["getUserNotificationEventsJSONObjects"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classPK    =    userNotificationEventJSONObject . getLong (  \" classPK \"  )  ;", "if    ( classPK    !  =    primaryKey )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidUserNotificationEventObject"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "user    =    UserTestUtil . addOmniAdminUser (  )  ;", "group    =    GroupTestUtil . addGroup (  )  ;", "addContainerModel (  )  ;", "userNotificationDeliveries    =    getDeliveries ( user . getUserId (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "deleteUserNotificationEvents ( user . getUserId (  )  )  ;", "deleteUserNotificationDeliveries (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidEventObject (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "Assert . assertEquals ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAddUserNotification"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidUserNotificationEventObject (  (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "Assert . assertEquals ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenEmailNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatsDelivery ( false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "subscribeToContainer (  )  ;", "updatDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( baseModel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddUserNotificationWhenWebsiteNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "int   notificationType    =     -  1  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidEventObject (  (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "notificationType    =    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  ;", "Assert . assertEquals ( notificationType ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY )  ;", "}", "}", "METHOD_END"], "methodName": ["testUpdateUserNotification"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ EMAIL ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     1  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "int   notificationType    =     -  1  ;", "for    ( JSONObject   userNotificationEventsJSONObject    :    userNotificationEventsJSONObjects )     {", "Assert . assertTrue ( isValidUserNotificationEventObject (  (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  ,    userNotificationEventsJSONObject )  )  ;", "notificationType    =    userNotificationEventsJSONObject . getInt (  \" notificationType \"  )  ;", "Assert . assertEquals ( notificationType ,    NOTIFICATION _ TYPE _ UPDATE _ ENTRY )  ;", "}", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenEmailNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationsDelivery ( false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ ADD _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "updateUserNotificationDelivery ( NOTIFICATION _ TYPE _ UPDATE _ ENTRY ,    TYPE _ WEBSITE ,    false )  ;", "BaseModel <  ?  >    baseModel    =    addBaseModel (  )  ;", "subscribeToContainer (  )  ;", "BaseModel <  ?  >    updatedBasemodel    =    updateBaseModel ( baseModel )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "List < JSONObject >    userNotificationEventsJSONObjects    =    getUserNotificationEventsJSONObjects ( user . getUserId (  )  ,     (  ( Long )     ( updatedBasemodel . getPrimaryKeyObj (  )  )  )  )  ;", "Assert . assertEquals ( userNotificationEventsJSONObjects . toString (  )  ,     0  ,    userNotificationEventsJSONObjects . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateUserNotificationWhenWebsiteNotificationsDisabled"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "boolean   exists    =    false ;", "for    ( UserNotificationDelivery   userNotificationDelivery    :    userNotificationDeliveries )     {", "if    (  (  ( userNotificationDelivery . getNotificationType (  )  )     !  =    notificationType )     |  |     (  ( userNotificationDelivery . getDeliveryType (  )  )     !  =    deliveryType )  )     {", "continue ;", "}", "UserNotificationDeliveryLocalServiceUtil . updatDelivery ( userNotificationDelivery . getUserNotificationDeliveryId (  )  ,    deliver )  ;", "exists    =    true ;", "break ;", "}", "Assert . assertTrue (  \" User   notification   does   not   exist \"  ,    exists )  ;", "}", "METHOD_END"], "methodName": ["updateUserNotificationDelivery"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( UserNotificationDelivery   userNotificationDelivery    :    userNotificationDeliveries )     {", "UserNotificationDeliveryLocalServiceUtil . updatDelivery ( userNotificationDelivery . getUserNotificationDeliveryId (  )  ,    deliver )  ;", "}", "}", "METHOD_END"], "methodName": ["updateUserNotificationsDelivery"], "fileName": "com.liferay.portlet.notifications.test.BaseUserNotificationTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    getActivities (  )  ;", "Assert . assertFalse ( activities . toString (  )  ,    activities . isEmpty (  )  )  ;", "Map < String ,    String >    entryTitles    =    new   HashMap <  >  (  )  ;", "activityInterpreter    =    getActivityInterpreter (  )  ;", "for    ( SocialActivity   activity    :    activities )     {", "String   title    =    activity . getExtraDataValue (  \" title \"  ,    serviceContext . getLocale (  )  )  ;", "if    (  ( isSupportsRename ( activity . getClassName (  )  )  )     &  &     ( Validator . isNotNull ( title )  )  )     {", "if    (  ( activity . getCreateDate (  )  )     <    time )     {", "entryTitles . put ( activity . getClassName (  )  ,    title )  ;", "} else    {", "Assert . assertNotNull ( entryTitles . get ( activity . getClassName (  )  )  )  ;", "Assert . assertNotEquals ( entryTitles . get ( activity . getClassName (  )  )  ,    title )  ;", "}", "}", "if    (  ( hasClassName ( activityInterpreter ,    activity . getClassName (  )  )  )     &  &     ( hasActivityType ( activity . getType (  )  )  )  )     {", "SocialActivityFeedEntry   activityFeedEntry    =    activityInterpreter . interpret ( activity ,    serviceContext )  ;", "Assert . assertNotNull ( activityFeedEntry )  ;", "title    =    activityFeedEntry . getTitle (  )  ;", "Assert . assertFalse (  (  \" Title   contains   parameters :     \"     +    title )  ,    title . matches (  \"  \\  \\  {  \\  \\ d \\  \\  }  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkInterpret"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    getActivities (  )  ;", "Assert . assertFalse ( activities . toString (  )  ,    activities . isEmpty (  )  )  ;", "activityInterpreter    =    getActivityInterpreter (  )  ;", "for    ( SocialActivity   activity    :    activities )     {", "if    (  ( hasClassName ( activityInterpreter ,    activity . getClassName (  )  )  )     &  &     ( hasActivityType ( activity . getType (  )  )  )  )     {", "SocialActivityFeedEntry   activityFeedEntry    =    activityInterpreter . interpret ( activity ,    serviceContext )  ;", "PortletURL   portletURL    =    TrashUtil . getViewContentURL ( serviceContext . getRequest (  )  ,    activity . getClassName (  )  ,    activity . getClassPK (  )  )  ;", "if    (  ( Validator . isNull ( activityFeedEntry . getLink (  )  )  )     &  &     ( portletURL    =  =    null )  )     {", "continue ;", "}", "Assert . assertEquals ( portletURL . toString (  )  ,    activityFeedEntry . getLink (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkLinks"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "List < SocialActivity >    activities    =    new   ArrayList ( SocialActivityLocalServiceUtil . getGroupActivities ( group . getGroupId (  )  ,    ALL _ POS ,    ALL _ POS )  )  ;", "Collections . reverse ( activities )  ;", "return   activities ;", "}", "METHOD_END"], "methodName": ["getActivities"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "Registry   registry    =    RegistryUtil . getRegistry (  )  ;", "Collection <  >    socialActivityInterpreters    =    registry . getServices (  . class ,     (  (  \"  ( name =  \"     +    portletId )     +     \"  )  \"  )  )  ;", "for    (    socialActivityInterpreter    :    socialActivityInterpreters )     {", "if    ( ArrayUtil . contains ( socialActivityInterpreter . getClassNames (  )  ,    className )  )     {", "return   socialActivityInterpreter ;", "}", "}", "throw   new   IllegalStateException (  (  \" No   activity   interpreter   found   for   class    \"     +    className )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getActivityInterpreter"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( int   curActivityType    :    getActivityTypes (  )  )     {", "if    ( curActivityType    =  =    activityType )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasActivityType"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( String   curClassName    :    activityInterpreter . getClassNames (  )  )     {", "if    ( curClassName . equals ( className )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasClassName"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isSupportsRename"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isSupportsTrash"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "HttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setAttribute ( COMPANY _ ID ,    TestPropsValues . getCompanyId (  )  )  ;", "request . setAttribute ( CURRENT _ URL ,     \" http :  /  / localhost :  8  0  / web / guest / home \"  )  ;", "request . setAttribute ( USER ,    TestPropsValues . getUser (  )  )  ;", "ServicePreAction   servicePreAction    =    new   ServicePreAction (  )  ;", "ThemeDisplay   themeDisplay    =    servicePreAction . initThemeDisplay ( request ,    new   MockHttpServletResponse (  )  )  ;", "request . setAttribute ( THEME _ DISPLAY ,    themeDisplay )  ;", "serviceContext    =    ServiceContextFactory . getInstance ( request )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "addActivities (  )  ;", "long   time    =    System . currentTimeMillis (  )  ;", "renameModels (  )  ;", "if    ( isSupportsTrash (  )  )     {", "moveModelsToTrash (  )  ;", "checkLinks (  )  ;", "restoreModelsFromTrash (  )  ;", "}", "check ( time )  ;", "}", "METHOD_END"], "methodName": ["testActivityInterpreter"], "fileName": "com.liferay.portlet.social.test.BaseSocialActivityInterpreterTestCase"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isSubscriptionForAuthorEnabled"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addSubscription ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "if    ( isSubscriptionForAuthorEnabled (  )  )     {", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "} else    {", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSubscriptionForAuthorWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addSubscription ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "if    ( isSubscriptionForAuthorEnabled (  )  )     {", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "} else    {", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSubscriptionForAuthorWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionAuthorTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( baseModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( baseModelId )  ;", "removeContainerModelResourceViewPermission (  )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInNoViewableContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( baseModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionBaseModelWhenInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionBaseModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classTypeId    =    addClassType (  )  ;", "add ( classTypeId )  ;", "addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionClassTypeWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "long   classTypeId    =    addClassType (  )  ;", "long   baseModelId    =    addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "add ( classTypeId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionClassTypeWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "Long   classTypeId    =    getDefaultClassTypeId (  )  ;", "addSubscriptionClassType ( classTypeId )  ;", "addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "delet ( classTypeId )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionDefaultClassTypeWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "Long   classTypeId    =    getDefaultClassTypeId (  )  ;", "long   baseModelId    =    addBaseModelWithClassType ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ,    classTypeId )  ;", "addSubscriptionClassType ( classTypeId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "delet ( classTypeId )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionDefaultClassTypeWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionClassTypeTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenAddingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  0  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "add ( containerModelId )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionContainerModelWhenUpdatingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT ;", "}", "METHOD_END"], "methodName": ["getDefaultContainerModelId"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getServiceName"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Settings   settings    =    SettingsFactoryUtil . getSettings ( new   com . liferay . portal . kernel . settings . GroupServiceSettingsLocator ( group . getGroupId (  )  ,    getServiceName (  )  )  )  ;", "ModifiableSettings   modifiableSettings    =    settings . getModifiableSettings (  )  ;", "for    ( Map . Entry < Locale ,    String >    localizedContent    :    localizedContents . entrySet (  )  )     {", "Locale   locale    =    localizedContent . getKey (  )  ;", "String   subscriptionBodyPreferencesKey    =    LocalizationUtil . getLocalizedName ( bodyPreferenceName ,    LocaleUtil . toLanguageId ( locale )  )  ;", "String   content    =    localizedContent . getValue (  )  ;", "modifiableSettings . setValue ( subscriptionBodyPreferencesKey ,    content )  ;", "}", "modifiableSettings . store (  )  ;", "}", "METHOD_END"], "methodName": ["setBaseModelSubscriptionBodyPreferences"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "LocaleThreadLocal . setDefaultLocale ( defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    previousLocalizedContents    =    new   HashMap <  >  (  )  ;", "previousLocalizedContents . putAll ( localizedContents )  ;", "localizedContents . put ( GERMANY ,     . GERMAN _ BODY )  ;", "setBaseModelSubscriptionBodyPreferences ( getSubscriptionAddedBodyPreferenceName (  )  )  ;", "addSubscriptionContainerModel ( getDefaultContainerModelId (  )  )  ;", "LocaleThreadLocal . setDefaultLocale ( GERMANY )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    getDefaultContainerModelId (  )  )  ;", "List < MailMessage >    messages    =    MailServiceTestUtil . getMailMessages (  \" Body \"  ,     . GERMAN _ BODY )  ;", "Assert . assertEquals ( messages . toString (  )  ,     1  ,    messages . size (  )  )  ;", "localizedContents    =    previousLocalizedContents ;", "}", "METHOD_END"], "methodName": ["testSubscriptionLocalizedContentWhenAddingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < Locale ,    String >    previousLocalizedContents    =    new   HashMap <  >  (  )  ;", "previousLocalizedContents . putAll ( localizedContents )  ;", "localizedContents . put ( SPAIN ,     . SPANISH _ BODY )  ;", "setBaseModelSubscriptionBodyPreferences ( getSubscriptionUpdatedBodyPreferenceName (  )  )  ;", "LocaleThreadLocal . setDefaultLocale ( SPAIN )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    getDefaultContainerModelId (  )  )  ;", "addSubscriptionContainerModel ( getDefaultContainerModelId (  )  )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "List < MailMessage >    messages    =    MailServiceTestUtil . getMailMessages (  \" Body \"  ,     . SPANISH _ BODY )  ;", "Assert . assertEquals ( messages . toString (  )  ,     1  ,    messages . size (  )  )  ;", "localizedContents    =    previousLocalizedContents ;", "}", "METHOD_END"], "methodName": ["testSubscriptionLocalizedContentWhenUpdatingBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionLocalizedContentTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenAddingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInRootContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "long   containerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "long   subcontainerModelId    =    addContainerModel ( creatorUser . getUserId (  )  ,    containerModelId )  ;", "long   baseModelId    =    addBaseModel ( creatorUser . getUserId (  )  ,    subcontainerModelId )  ;", "addSubscriptionContainerModel ( BaseSubscriptionTestCase . PARENT _ CONTAINER _ MODEL _ ID _ DEFAULT )  ;", "updateBaseModel ( creatorUser . getUserId (  )  ,    baseModelId )  ;", "Assert . assertEquals (  1  ,    MailServiceTestUtil . getInboxSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubscriptionRootContainerModelWhenUpdatingBaseModelInSubcontainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionRootContainerModelTestCase"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["addBaseModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["addContainerModel"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}, {"methodBody": ["METHOD_START", "{", "group    =    GroupTestUtil . addGroup (  )  ;", "user    =    UserTestUtil . addGroupUser ( group ,    SITE _ MEMBER )  ;", "creatorUser    =    UserTestUtil . addGroupUser ( group ,    SITE _ MEMBER )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.liferay.portlet.subscriptions.test.BaseSubscriptionTestCase"}]