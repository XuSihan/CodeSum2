[{"methodBody": ["METHOD_START", "{", "declareBeans ( new   String ( FileUtil . getBytes ( is )  )  ,    portletRequest ,    portletResponse )  ;", "}", "METHOD_END"], "methodName": ["declareBeans"], "fileName": "com.liferay.util.bridges.bsf.BaseBSFPortlet"}, {"methodBody": ["METHOD_START", "{", "String   script    =    getGlobalScript (  )  . concat ( code )  ;", "Config   portletConfig    =    getConfig (  )  ;", "Context   portletContext    =    getContext (  )  ;", "Preferences   preferences    =    portletRequest . getPreferences (  )  ;", "Map < String ,    String >    userInfo    =     (  ( Map < String ,    String >  )     ( portletRequest . getAttribute ( USER _ INFO )  )  )  ;", "bsfManager . declareBean (  \" portletConfig \"  ,    portletConfig ,    Config . class )  ;", "bsfManager . declareBean (  \" portletContext \"  ,    portletContext ,    Context . class )  ;", "bsfManager . declareBean (  \" preferences \"  ,    preferences ,    Preferences . class )  ;", "bsfManager . declareBean (  \" userInfo \"  ,    userInfo ,    Map . class )  ;", "if    ( portletRequest   instanceof   ActionRequest )     {", "bsfManager . declareBean (  \" actionRequest \"  ,    portletRequest ,    ActionRequest . class )  ;", "} else", "if    ( portletRequest   instanceof   RenderRequest )     {", "bsfManager . declareBean (  \" renderRequest \"  ,    portletRequest ,    class )  ;", "} else", "if    ( portletRequest   instanceof   ResourceRequest )     {", "bsfManager . declareBean (  \" resourceRequest \"  ,    portletRequest ,    class )  ;", "}", "if    ( portletResponse   instanceof   ActionResponse )     {", "bsfManager . declareBean (  \" actionResponse \"  ,    portletResponse ,    ActionResponse . class )  ;", "} else", "if    ( portletResponse   instanceof   RenderResponse )     {", "bsfManager . declareBean (  \" renderResponse \"  ,    portletResponse ,    class )  ;", "} else", "if    ( portletResponse   instanceof   ResourceResponse )     {", "bsfManager . declareBean (  \" resourceResponse \"  ,    portletResponse ,    class )  ;", "}", "bsfManager . exec ( getScriptingEngineLanguage (  )  ,     \"  ( java )  \"  ,     1  ,     1  ,    script )  ;", "}", "METHOD_END"], "methodName": ["declareBeans"], "fileName": "com.liferay.util.bridges.bsf.BaseBSFPortlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( globalFiles . length )     =  =     0  )     {", "return   StringPool . BLANK ;", "}", "StringBundler   sb    =    new   StringBundler (  )  ;", "for    ( int   i    =     0  ;    i    <     ( globalFiles . length )  ;    i +  +  )     {", "PortletContext   portletContext    =    getPortletContext (  )  ;", "InputStream   inputStream    =    portletContext . getResourceAsStream ( globalFiles [ i ]  )  ;", "if    ( inputStream    =  =    null )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", ".  _ log . warn (  (  (  \" Global   file    \"     +     ( globalFiles [ i ]  )  )     +     \"    does   not   exist \"  )  )  ;", "}", "}", "if    ( inputStream    !  =    null )     {", "sb . append ( new   String ( FileUtil . getBytes ( inputStream )  )  )  ;", "sb . append ( NEW _ LINE )  ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getGlobalScript"], "fileName": "com.liferay.util.bridges.bsf.BaseBSFPortlet"}, {"methodBody": ["METHOD_START", "{", "PortletContext   portletContext    =    getPortletContext (  )  ;", "InputStream   inputStream    =    portletContext . getResourceAsStream ( path )  ;", "if    ( inputStream    =  =    null )     {", ".  _ log . error ( StringBundler . concat ( path ,     \"    is   not   a   valid    \"  ,    getScriptingEngineLanguage (  )  ,     \"    file \"  )  )  ;", "return ;", "}", "try    {", "declareBeans ( inputStream ,    portletRequest ,    portletResponse )  ;", "}    catch    ( BSFException   bsfe )     {", "logBSFException ( bsfe ,    path )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["include"], "fileName": "com.liferay.util.bridges.bsf.BaseBSFPortlet"}, {"methodBody": ["METHOD_START", "{", "String   message    =     (  \" The   script   at    \"     +    path )     +     \"    or   one   of   the   global   files   has   errors .  \"  ;", "Throwable   t    =    bsfe . getTargetException (  )  ;", ".  _ log . error ( message ,    t )  ;", "}", "METHOD_END"], "methodName": ["logBSFException"], "fileName": "com.liferay.util.bridges.bsf.BaseBSFPortlet"}, {"methodBody": ["METHOD_START", "{", "StringBundler   sb    =    new   StringBundler (  )  ;", "String   content    =     _ sb . toString (  )  ;", "int   startTag    =    content . indexOf ( startTag )  ;", "int   endTag    =     0  ;", "int   startRef    =     0  ;", "int   endRef    =     0  ;", "while    ( startTag    !  =     (  -  1  )  )     {", "sb . append ( content . substring (  0  ,    startTag )  )  ;", "content    =    content . substring ( startTag )  ;", "endTag    =    content . indexOf ( endTag )  ;", "startRef    =    content . indexOf ( ref )  ;", "if    (  ( startRef    =  =     (  -  1  )  )     |  |     ( startRef    >    endTag )  )     {", "sb . append ( content . substring (  0  ,    endTag )  )  ;", "content    =    content . substring ( endTag )  ;", "} else    {", "startRef    =    startRef    +     ( ref . length (  )  )  ;", "sb . append ( content . substring (  0  ,    startRef )  )  ;", "content    =    content . substring ( startRef )  ;", "String   quote    =    StringPool . BLANK ;", "if    ( content . startsWith ( APOSTROPHE )  )     {", "quote    =    StringPool . APOSTROPHE ;", "} else", "if    ( content . startsWith ( StringPool . QUOTE )  )     {", "quote    =    StringPool . QUOTE ;", "}", "String   url    =    StringPool . BLANK ;", "if    (  ( quote . length (  )  )     >     0  )     {", "sb . append ( quote )  ;", "content    =    content . substring (  1  )  ;", "endRef    =    content . indexOf ( quote )  ;", "url    =    content . substring (  0  ,    endRef )  ;", "} else    {", "endTag    =    content . indexOf ( endTag )  ;", "endRef    =     0  ;", "StringBundler   unquotedURLSB    =    new   StringBundler (  )  ;", "while    ( true )     {", "char   c    =    content . charAt ( endRef )  ;", "if    (  (  !  ( Character . isSpaceChar ( c )  )  )     &  &     ( endRef    <    endTag )  )     {", "endRef +  +  ;", "unquotedURLSB . append ( c )  ;", "} else    {", "endRef -  -  ;", "break ;", "}", "}", "url    =    unquotedURLSB . toString (  )  ;", "}", "if    (  (  ( url . charAt (  0  )  )     =  =     ( CharPool . POUND )  )     |  |     ( url . startsWith (  \" http \"  )  )  )     {", "sb . append ( url )  ;", "sb . append ( quote )  ;", "} else    {", "actionURL . setParameter ( actionParameterName ,    url )  ;", "sb . append ( actionURL . toString (  )  )  ;", "sb . append ( quote )  ;", "}", "content    =    content . substring (  ( endRef    +     1  )  )  ;", "}", "startTag    =    content . indexOf ( startTag )  ;", "}", "sb . append ( content )  ;", "_ sb    =    sb ;", "}", "METHOD_END"], "methodName": ["doProcessPage"], "fileName": "com.liferay.util.bridges.common.ScriptPostProcess"}, {"methodBody": ["METHOD_START", "{", "if    (  (  _ sb )     !  =    null )     {", "return    _ sb . toString (  )  ;", "}", "return   StringPool . BLANK ;", "}", "METHOD_END"], "methodName": ["getFinalizedPage"], "fileName": "com.liferay.util.bridges.common.ScriptPostProcess"}, {"methodBody": ["METHOD_START", "{", "processPage (  \"  < a \"  ,    GREATER _ THAN ,     \" href =  \"  ,    actionURL ,    actionParameterName )  ;", "processPage (  \"  < A \"  ,    GREATER _ THAN ,     \" HREF =  \"  ,    actionURL ,    actionParameterName )  ;", "processPage (  \"  < area \"  ,    GREATER _ THAN ,     \" href =  \"  ,    actionURL ,    actionParameterName )  ;", "processPage (  \"  < AREA \"  ,    GREATER _ THAN ,     \" HREF =  \"  ,    actionURL ,    actionParameterName )  ;", "processPage (  \"  < FORM \"  ,    GREATER _ THAN ,     \" ACTION =  \"  ,    actionURL ,    actionParameterName )  ;", "processPage (  \"  < form \"  ,    GREATER _ THAN ,     \" action =  \"  ,    actionURL ,    actionParameterName )  ;", "}", "METHOD_END"], "methodName": ["postProcessPage"], "fileName": "com.liferay.util.bridges.common.ScriptPostProcess"}, {"methodBody": ["METHOD_START", "{", "try    {", "doProcessPage ( startTag ,    endTag ,    ref ,    actionURL ,    actionParameterName )  ;", "}    catch    ( Exception   e )     {", ".  _ log . error ( e ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["processPage"], "fileName": "com.liferay.util.bridges.common.ScriptPostProcess"}, {"methodBody": ["METHOD_START", "{", "_ sb    =    sb ;", "}", "METHOD_END"], "methodName": ["setInitalPage"], "fileName": "com.liferay.util.bridges.common.ScriptPostProcess"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Validator . isNotNull ( path )  )     &  &     (  (  !  ( path . startsWith ( filePath )  )  )     |  |     (  !  ( Validator . isFilePath ( path ,    false )  )  )  )  )     {", "throw   new   Exception (  (  (  \" Path    \"     +    path )     +     \"    is   not   accessible   by   this   portlet \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkPath"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "String   script    =    new   String ( FileUtil . getBytes ( is )  )  ;", "declareBeans ( script ,    portletRequest ,    portletResponse )  ;", "}", "METHOD_END"], "methodName": ["declareBeans"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "script    =     ( getGlobalScript (  )  )     +    script ;", "PortletConfig   portletConfig    =    getPortletConfig (  )  ;", "PortletContext   portletContext    =    getPortletContext (  )  ;", "Map < String ,    Object >    portletObjects    =    HelperUtil . getPortletObjects ( portletConfig ,    portletContext ,    portletRequest ,    portletResponse )  ;", "Util . exec ( null ,    portletObjects ,    language ,    script )  ;", "}", "METHOD_END"], "methodName": ["declareBeans"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "Object   error    =    SessionErrors . get ( renderRequest ,    ScriptingPortlet .  _ ERROR )  ;", "if    ( error    !  =    null )     {", "Exception   e    =     (  ( Exception )     ( error )  )  ;", "writeErrorMessage ( renderRequest ,    renderResponse ,    e . getMessage (  )  )  ;", "return ;", "}", "super . render ( renderRequest ,    renderResponse )  ;", "error    =    SessionErrors . get ( renderRequest ,    ScriptingPortlet .  _ ERROR )  ;", "if    ( error    !  =    null )     {", "Exception   e    =     (  ( Exception )     ( error )  )  ;", "writeErrorMessage ( renderRequest ,    renderResponse ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["doRender"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "return   renderRequest . getParameter (  \" file \"  )  ;", "}", "METHOD_END"], "methodName": ["getFileName"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( globalScript )     !  =    null )     {", "return   globalScript ;", "}", "if    (  ( globalFiles . length )     =  =     0  )     {", "globalScript    =    StringPool . BLANK ;", "return   globalScript ;", "}", "StringBundler   sb    =    new   StringBundler (  )  ;", "for    ( String   globalFile    :    globalFiles )     {", "PortletContext   portletContext    =    getPortletContext (  )  ;", "InputStream   inputStream    =    portletContext . getResourceAsStream ( globalFile )  ;", "if    ( inputStream    =  =    null )     {", "if    (  .  _ log . isWarnEnabled (  )  )     {", ".  _ log . warn (  (  (  \" Global   file    \"     +    globalFile )     +     \"    does   not   exist \"  )  )  ;", "}", "}", "if    ( inputStream    !  =    null )     {", "String   script    =    new   String ( FileUtil . getBytes ( inputStream )  )  ;", "sb . append ( script )  ;", "sb . append ( NEW _ LINE )  ;", "}", "}", "globalScript    =    sb . toString (  )  ;", "return   globalScript ;", "}", "METHOD_END"], "methodName": ["getGlobalScript"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "checkPath ( path )  ;", "PortletContext   portletContext    =    getPortletContext (  )  ;", "InputStream   inputStream    =    portletContext . getResourceAsStream ( path )  ;", "if    ( inputStream    =  =    null )     {", ".  _ log . error ( StringBundler . concat ( path ,     \"    is   not   a   valid    \"  ,    language ,     \"    file \"  )  )  ;", "return ;", "}", "try    {", "declareBeans ( inputStream ,    portletRequest ,    portletResponse )  ;", "}    catch    ( ScriptingException   se )     {", "SessionErrors . add ( portletRequest ,     .  _ ERROR ,    se )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["include"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "ThemeDisplay   themeDisplay    =     (  ( ThemeDisplay )     ( renderRequest . getAttribute ( THEME _ DISPLAY )  )  )  ;", "PermissionChecker   permissionChecker    =    themeDisplay . getPermissionChecker (  )  ;", "StringBundler   sb    =    new   StringBundler (  6  )  ;", "sb . append (  \"  < div   class =  \\  \" alert   alert - error \\  \"  >  \"  )  ;", "sb . append ( themeDisplay . translate (  \" an - unexpected - error - occurred \"  )  )  ;", "sb . append (  \"  <  / div >  \"  )  ;", "if    ( PortalPermissionUtil . contains ( permissionChecker ,    CONFIGURATION )  )     {", "sb . append (  \"  < pre >  \"  )  ;", "sb . append ( HtmlUtil . escape ( errorMessage )  )  ;", "sb . append (  \"  <  / pre >  \"  )  ;", "}", "renderResponse . setContentType ( TEXT _ HTML )  ;", "ResponseUtil . write ( renderResponse ,    sb . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeErrorMessage"], "fileName": "com.liferay.util.bridges.scripting.ScriptingPortlet"}, {"methodBody": ["METHOD_START", "{", "PortletContext   portletContext    =    portlet . getPortletContext (  )  ;", "if    (  (  _ provider )     =  =    null )     {", "_ provider    =     (  (  )     ( portletContext . getAttribute ( STRUTS _ BRIDGES _ CONTEXT _ PROVIDER )  )  )  ;", "}", "return    _ provider ;", "}", "METHOD_END"], "methodName": ["_getProvider"], "fileName": "com.liferay.util.bridges.struts.LiferayServletContextProviderWrapper"}, {"methodBody": ["METHOD_START", "{", "for    ( String   binaryExtension    :    WAIFriendlyURLMapper .  _ BINARY _ EXTENSIONS )     {", "if    ( friendlyURLPath . endsWith ( binaryExtension )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasBinaryExtension"], "fileName": "com.liferay.util.bridges.wai.WAIFriendlyURLMapper"}]