[{"methodBody": ["METHOD_START", "{", "try    {", "if    (  (  ( Command )     =  =    null )     |  |     ( Command . trim (  )  . isEmpty (  )  )  )     {", "Command    =     \"  \"  ;", "}", "List < String >    command    =    new   ArrayList < String >  (  )  ;", "command . add ( Command )  ;", "command . add (  \"  -  - version \"  )  ;", "Exec   exec    =    new   Exec ( this )  ;", "List < String >    out    =    new   ArrayList < String >  (  )  ;", "if    (  ( exec . run ( command ,    out )  )     =  =     1  2  7  )     {", "getLog (  )  . error (  (  \"  ,    not   found   at :     \"     +     ( Command )  )  )  ;", "throw   new   MojoExecutionException (  \"    failure \"  )  ;", "} else    {", "if    ( out . isEmpty (  )  )     {", "getLog (  )  . error (  (  \" stdout :     \"     +    out )  )  ;", "throw   new   MojoExecutionException (  \"  '     -  - version '    did   not   return   a   version \"  )  ;", "} else    {", "if    (  !  ( out . get (  0  )  . endsWith ( Version )  )  )     {", "throw   new   MojoExecutionException (  (  (  (  (  \"    version   is    '  \"     +     ( out . get (  0  )  )  )     +     \"  '  ,    expected   version   is    '  \"  )     +     ( Version )  )     +     \"  '  \"  )  )  ;", "}", "}", "}", "if    (  !  ( output . mkdirs (  )  )  )     {", "if    (  !  ( output . exists (  )  )  )     {", "throw   new   MojoExecutionException (  (  \" Could   not   create   directory :     \"     +     ( output )  )  )  ;", "}", "}", "command    =    new   ArrayList < String >  (  )  ;", "command . add ( Command )  ;", "command . add (  (  \"  -  - java _ out =  \"     +     ( output . getCanonicalPath (  )  )  )  )  ;", "if    (  ( imports )     !  =    null )     {", "for    ( File   i    :    imports )     {", "command . add (  (  \"  - I \"     +     ( i . getCanonicalPath (  )  )  )  )  ;", "}", "}", "for    ( File   f    :    FileSetUtils . convertFileSetToFiles ( source )  )     {", "command . add ( f . getCanonicalPath (  )  )  ;", "}", "exec    =    new   Exec ( this )  ;", "out    =    new   ArrayList < String >  (  )  ;", "if    (  ( exec . run ( command ,    out )  )     !  =     0  )     {", "getLog (  )  . error (  \"    compiler   error \"  )  ;", "for    ( String   s    :    out )     {", "getLog (  )  . error ( s )  ;", "}", "throw   new   MojoExecutionException (  \"    failure \"  )  ;", "}", "}    catch    ( Throwable   ex )     {", "throw   new   MojoExecutionException ( ex . toString (  )  ,    ex )  ;", "}", "project . addCompileSourceRoot ( output . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.apache.hadoop.maven.plugin.protoc.ProtocMojo"}, {"methodBody": ["METHOD_START", "{", "int   retCode    =     1  ;", "ProcessBuilder   pb    =    new   ProcessBuilder ( command )  ;", "try    {", "Process   p    =    pb . start (  )  ;", ". OutputBufferThread   stdOut    =    new    . OutputBufferThread ( p . getInputStream (  )  )  ;", ". OutputBufferThread   stdErr    =    new    . OutputBufferThread ( p . getErrorStream (  )  )  ;", "stdOut . start (  )  ;", "stdErr . start (  )  ;", "retCode    =    p . waitFor (  )  ;", "if    ( retCode    !  =     0  )     {", "mojo . getLog (  )  . warn (  (  ( command    +     \"    failed   with   error   code    \"  )     +    retCode )  )  ;", "for    ( String   s    :    stdErr . getOutput (  )  )     {", "mojo . getLog (  )  . debug ( s )  ;", "}", "}", "stdOut . join (  )  ;", "stdErr . join (  )  ;", "output . addAll ( stdOut . getOutput (  )  )  ;", "}    catch    ( Exception   ex )     {", "mojo . getLog (  )  . warn (  (  ( command    +     \"    failed :     \"  )     +     ( ex . toString (  )  )  )  )  ;", "}", "return   retCode ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.apache.hadoop.maven.plugin.util.Exec"}, {"methodBody": ["METHOD_START", "{", "String   includes    =    FileSetUtils . getCommaSeparatedList ( source . getIncludes (  )  )  ;", "String   excludes    =    FileSetUtils . getCommaSeparatedList ( source . getExcludes (  )  )  ;", "return   FileUtils . getFiles ( new   File ( source . getDirectory (  )  )  ,    includes ,    excludes )  ;", "}", "METHOD_END"], "methodName": ["convertFileSetToFiles"], "fileName": "org.apache.hadoop.maven.plugin.util.FileSetUtils"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   buffer    =    new   StringBuilder (  )  ;", "String   separator    =     \"  \"  ;", "for    ( Object   e    :    list )     {", "bufferpend ( separator ) pend ( e )  ;", "separator    =     \"  ,  \"  ;", "}", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getCommaSeparatedList"], "fileName": "org.apache.hadoop.maven.plugin.util.FileSetUtils"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "for    ( byte   b    :    array )     {", "sbpend ( Integer . toHexString (  (  2  5  5     &    b )  )  )  ;", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["byteArrayToString"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "List < File >    files    =    FileSetUtils . convertFileSetToFiles ( source )  ;", "Collections . sort ( files ,    new   Comparator < File >  (  )     {", "@ Override", "public   int   compare ( File   lhs ,    File   rhs )     {", "return   normalizePath ( lhs )  . compareTo ( normalizePath ( rhs )  )  ;", "}", "private   String   normalizePath ( File   file )     {", "return   file . getPath (  )  . toUpperCase (  )  . replaceAll (  \"  \\  \\  \\  \\  \"  ,     \"  /  \"  )  ;", "}", "}  )  ;", "byte [  ]    md 5     =    computeMD 5  ( files )  ;", "String   md 5 str    =    byteArrayToString ( md 5  )  ;", "getLog (  )  .  (  (  \" Computed   MD 5  :     \"     +    md 5 str )  )  ;", "return   md 5 str ;", "}", "METHOD_END"], "methodName": ["computeMD5"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "MessageDigest   md 5     =    MessageDigest . getInstance (  \" MD 5  \"  )  ;", "for    ( File   file    :    files )     {", "getLog (  )  . debug (  (  \" Computing   MD 5    for :     \"     +    file )  )  ;", "md 5  . update ( readFile ( file )  )  ;", "}", "return   md 5  . digest (  )  ;", "}", "METHOD_END"], "methodName": ["computeMD5"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "Exec   exec    =    new   Exec ( this )  ;", ". SCM   scm    =     . SCM . NONE ;", "scmOut    =    new   ArrayList < String >  (  )  ;", "int   ret    =    exec . run ( Arrays . asList ( svnCommand ,     \" info \"  )  ,    scmOut )  ;", "if    ( ret    =  =     0  )     {", "scm    =     . SCM . SVN ;", "} else    {", "ret    =    exec . run ( Arrays . asList ( gitCommand ,     \" branch \"  )  ,    scmOut )  ;", "if    ( ret    =  =     0  )     {", "ret    =    exec . run ( Arrays . asList ( gitCommand ,     \" remote \"  ,     \"  - v \"  )  ,    scmOut )  ;", "if    ( ret    !  =     0  )     {", "scm    =     . SCM . NONE ;", "scmOut    =    null ;", "} else    {", "ret    =    exec . run ( Arrays . asList ( gitCommand ,     \" log \"  ,     \"  - n \"  ,     \"  1  \"  )  ,    scmOut )  ;", "if    ( ret    !  =     0  )     {", "scm    =     . SCM . NONE ;", "scmOut    =    null ;", "} else    {", "scm    =     . SCM . GIT ;", "}", "}", "}", "}", "if    (  ( scmOut )     !  =    null )     {", "getLog (  )  . debug ( scmOut . toString (  )  )  ;", "}", "getLog (  )  . info (  (  \" SCM :     \"     +    scm )  )  ;", "return   scm ;", "}", "METHOD_END"], "methodName": ["determineSCM"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "DateFormat   dateFormat    =    new   SimpleDateFormat (  \" yyyy - MM - dd ' T ' HH : mm ' Z '  \"  )  ;", "dateFormat . setTimeZone ( TimeZone . getTimeZone (  \" UTC \"  )  )  ;", "return   dateFormat . format ( new   Date (  )  )  ;", "}", "METHOD_END"], "methodName": ["getBuildTime"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "String   branch    =     \" Unknown \"  ;", "switch    ( scm )     {", "case   SVN    :", "for    ( String   s    :    scmOut )     {", "if    ( s . startsWith (  \" URL :  \"  )  )     {", "branch    =    s . substring (  4  )  . trim (  )  ;", "branch    =    getSvnUri ( branch )  [  1  ]  ;", "break ;", "}", "}", "break ;", "case   GIT    :", "for    ( String   s    :    scmOut )     {", "if    ( s . startsWith (  \"  *  \"  )  )     {", "branch    =    s . substring (  \"  *  \"  . length (  )  )  ;", "break ;", "}", "}", "break ;", "}", "return   branch . trim (  )  ;", "}", "METHOD_END"], "methodName": ["getSCMBranch"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "String   commit    =     \" Unknown \"  ;", "switch    ( scm )     {", "case   SVN    :", "for    ( String   s    :    scmOut )     {", "if    ( s . startsWith (  \" Revi :  \"  )  )     {", "commit    =    s . substring (  \" Revi :  \"  . length (  )  )  ;", "break ;", "}", "}", "break ;", "case   GIT    :", "for    ( String   s    :    scmOut )     {", "if    ( s . startsWith (  \" commit \"  )  )     {", "commit    =    s . substring (  \" commit \"  . length (  )  )  ;", "break ;", "}", "}", "break ;", "}", "return   commit . trim (  )  ;", "}", "METHOD_END"], "methodName": ["getSCMCommit"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "String   uri    =     \" Unknown \"  ;", "switch    ( scm )     {", "case   SVN    :", "for    ( String   s    :    scmOut )     {", "if    ( s . startsWith (  \" URL :  \"  )  )     {", "uri    =    s . substring (  4  )  . trim (  )  ;", "uri    =    getSvnUri ( uri )  [  0  ]  ;", "break ;", "}", "}", "break ;", "case   GIT    :", "for    ( String   s    :    scmOut )     {", "if    (  ( s . startsWith (  \" origin \"  )  )     &  &     ( s . endsWith (  \"  ( fetch )  \"  )  )  )     {", "uri    =    s . substring (  \" origin \"  . length (  )  )  ;", "uri    =    uri . substring (  0  ,     (  ( uri . length (  )  )     -     (  \"  ( fetch )  \"  . length (  )  )  )  )  ;", "break ;", "}", "}", "break ;", "}", "return   uri . trim (  )  ;", "}", "METHOD_END"], "methodName": ["getSCMUri"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "String [  ]    res    =    new   String [  ]  {     \" Unknown \"  ,     \" Unknown \"     }  ;", "try    {", "String   path    =    str ;", "int   index    =    path . indexOf (  \" trunk \"  )  ;", "if    ( index    >     (  -  1  )  )     {", "res [  0  ]     =    path . substring (  0  ,     ( index    -     1  )  )  ;", "res [  1  ]     =     \" trunk \"  ;", "} else    {", "index    =    path . indexOf (  \" brans \"  )  ;", "if    ( index    >     (  -  1  )  )     {", "res [  0  ]     =    path . substring (  0  ,     ( index    -     1  )  )  ;", "int   branchIndex    =     ( index    +     (  \" brans \"  . length (  )  )  )     +     1  ;", "index    =    path . indexOf (  \"  /  \"  ,    branchIndex )  ;", "if    ( index    >     (  -  1  )  )     {", "res [  1  ]     =    path . substring ( branchIndex ,    index )  ;", "} else    {", "res [  1  ]     =    path . substring ( branchIndex )  ;", "}", "}", "}", "}    catch    ( Exception   ex )     {", "getLog (  )  . warn (  (  \" Could   not   determine   URI    &    branch   from   SVN   URI :     \"     +    str )  )  ;", "}", "return   res ;", "}", "METHOD_END"], "methodName": ["getSvnUriInfo"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}, {"methodBody": ["METHOD_START", "{", "RandomAccessFile   raf    =    new   RandomAccessFile ( file ,     \" r \"  )  ;", "byte [  ]    buffer    =    new   byte [  (  ( int )     ( raf . length (  )  )  )  ]  ;", "raf . readFully ( buffer )  ;", "raf . close (  )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["readFile"], "fileName": "org.apache.hadoop.maven.plugin.versioninfo.VersionInfoMojo"}]