[{"methodBody": ["METHOD_START", "{", "return   AllocateRequest . newInstance ( responseID ,    appProgress ,    resourceAsk ,    containersToBeReleased ,    resourceBlacklistRequest ,    null )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest"}, {"methodBody": ["METHOD_START", "{", "AllocateRequest   allocateRequest    =    Records . newRecord ( AllocateRequest . class )  ;", "allocateRequest . setResponseId ( responseID )  ;", "allocateRequest . setProgress ( appProgress )  ;", "allocateRequest . setAskList ( resourceAsk )  ;", "allocateRequest . setReleaseList ( containersToBeReleased )  ;", "allocateRequest . setResourceBlacklistRequest ( resourceBlacklistRequest )  ;", "allocateRequest . setIncreaseRequests ( increaseRequests )  ;", "return   allocateRequest ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest"}, {"methodBody": ["METHOD_START", "{", "AllocateResponse   response    =    Records . newRecord ( AllocateResponse . class )  ;", "response . setNumClusterNodes ( numClusterNodes )  ;", "response . setResponseId ( responseId )  ;", "response . setCompletedContainersStatuses ( completedContainers )  ;", "response . setAllocatedContainers ( allocatedContainers )  ;", "response . setUpdatedNodes ( updatedNodes )  ;", "response . setAvailableResources ( availResources )  ;", "response . setAMCommand ( command )  ;", "response . setPreemptionMessage ( preempt )  ;", "response . setNMTokens ( nmTokens )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse"}, {"methodBody": ["METHOD_START", "{", "AllocateResponse   response    =    AllocateResponse . newInstance ( responseId ,    completedContainers ,    allocatedContainers ,    updatedNodes ,    availResources ,    command ,    numClusterNodes ,    preempt ,    nmTokens )  ;", "response . setIncreasedContainers ( increasedContainers )  ;", "response . setDecreasedContainers ( decreasedContainers )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse"}, {"methodBody": ["METHOD_START", "{", "AllocateResponse   response    =    AllocateResponse . newInstance ( responseId ,    completedContainers ,    allocatedContainers ,    updatedNodes ,    availResources ,    command ,    numClusterNodes ,    preempt ,    nmTokens ,    increasedContainers ,    decreasedContainers )  ;", "response . setAMRMToken ( amRMToken )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse"}, {"methodBody": ["METHOD_START", "{", "CancelDelegationTokenRequest   request    =    Records . newRecord ( CancelDelegationTokenRequest . class )  ;", "request . setDelegationToken ( dToken )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.CancelDelegationTokenRequest"}, {"methodBody": ["METHOD_START", "{", "CancelDelegationTokenResponse   response    =    Records . newRecord ( CancelDelegationTokenResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.CancelDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "FinishApplicationMasterRequest   request    =    Records . newRecord ( FinishApplicationMasterRequest . class )  ;", "request . setFinalApplicationStatus ( finalAppStatus )  ;", "request . setDiagnostics ( diagnostics )  ;", "request . setTrackingUrl ( url )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.FinishApplicationMasterRequest"}, {"methodBody": ["METHOD_START", "{", "FinishApplicationMasterResponse   response    =    Records . newRecord ( FinishApplicationMasterResponse . class )  ;", "response . setIsUnregistered ( isRemovedFromRMStateStore )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.FinishApplicationMasterResponse"}, {"methodBody": ["METHOD_START", "{", "GetApplicationAttemptReportRequest   request    =    Records . newRecord ( GetApplicationAttemptReportRequest . class )  ;", "request . setApplicationAttemptId ( applicationAttemptId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationAttemptReportResponse   response    =    Records . newRecord ( GetApplicationAttemptReportResponse . class )  ;", "response . setApplicationAttemptReport ( ApplicationAttemptReport )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptReportResponse"}, {"methodBody": ["METHOD_START", "{", "GetApplicationAttemptsRequest   request    =    Records . newRecord ( GetApplicationAttemptsRequest . class )  ;", "request . setApplicationId ( applicationId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationAttemptsResponse   response    =    Records . newRecord ( GetApplicationAttemptsResponse . class )  ;", "response . setApplicationAttemptList ( applicationAttempts )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationAttemptsResponse"}, {"methodBody": ["METHOD_START", "{", "GetApplicationReportRequest   request    =    Records . newRecord ( GetApplicationReportRequest . class )  ;", "request . setApplicationId ( applicationId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationReportRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationReportResponse   response    =    Records . newRecord ( GetApplicationReportResponse . class )  ;", "response . setApplicationReport ( ApplicationReport )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationReportResponse"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "request . setApplicationStates ( applicationStates )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "request . setApplicationTypes ( applicationTypes )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "request . setApplicationTypes ( applicationTypes )  ;", "request . setApplicationStates ( applicationStates )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "request . setScope ( scope )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsRequest   request    =    Records . newRecord ( GetApplicationsRequest . class )  ;", "if    ( scope    !  =    null )     {", "request . setScope ( scope )  ;", "}", "request . setUsers ( users )  ;", "request . setQueues ( queues )  ;", "request . setApplicationTypes ( applicationTypes )  ;", "request . setApplicationTags ( applicationTags )  ;", "request . setApplicationStates ( applicationStates )  ;", "if    ( startRange    !  =    null )     {", "request . setStartRange ( startRange . getMinimumLong (  )  ,    startRange . getMaximumLong (  )  )  ;", "}", "if    ( finishRange    !  =    null )     {", "request . setFinishRange ( finishRange . getMinimumLong (  )  ,    finishRange . getMaximumLong (  )  )  ;", "}", "if    ( limit    !  =    null )     {", "request . setLimit ( limit )  ;", "}", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsRequest"}, {"methodBody": ["METHOD_START", "{", "GetApplicationsResponse   response    =    Records . newRecord ( GetApplicationsResponse . class )  ;", "response . setApplicationList ( applications )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetApplicationsResponse"}, {"methodBody": ["METHOD_START", "{", "GetClusterMetricsRequest   request    =    Records . newRecord ( GetClusterMetricsRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetClusterMetricsRequest"}, {"methodBody": ["METHOD_START", "{", "GetClusterMetricsResponse   response    =    Records . newRecord ( GetClusterMetricsResponse . class )  ;", "response . setClusterMetrics ( metrics )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetClusterMetricsResponse"}, {"methodBody": ["METHOD_START", "{", "GetClusterNodesRequest   request    =    Records . newRecord ( GetClusterNodesRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetClusterNodesRequest"}, {"methodBody": ["METHOD_START", "{", "GetClusterNodesRequest   request    =    Records . newRecord ( GetClusterNodesRequest . class )  ;", "request . setNodeStates ( states )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetClusterNodesRequest"}, {"methodBody": ["METHOD_START", "{", "GetClusterNodesResponse   response    =    Records . newRecord ( GetClusterNodesResponse . class )  ;", "response . setNodeReports ( nodeReports )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetClusterNodesResponse"}, {"methodBody": ["METHOD_START", "{", "GetContainerReportRequest   request    =    Records . newRecord ( GetContainerReportRequest . class )  ;", "request . setContainerId ( containerId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportRequest"}, {"methodBody": ["METHOD_START", "{", "GetContainerReportResponse   response    =    Records . newRecord ( GetContainerReportResponse . class )  ;", "response . setContainerReport ( containerReport )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainerReportResponse"}, {"methodBody": ["METHOD_START", "{", "GetContainerStatusesRequest   request    =    Records . newRecord ( GetContainerStatusesRequest . class )  ;", "request . setContainerIds ( containerIds )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusesRequest"}, {"methodBody": ["METHOD_START", "{", "GetContainerStatusesResponse   response    =    Records . newRecord ( GetContainerStatusesResponse . class )  ;", "response . setContainerStatuses ( statuses )  ;", "response . setFailedRequests ( failedRequests )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainerStatusesResponse"}, {"methodBody": ["METHOD_START", "{", "GetContainersRequest   request    =    Records . newRecord ( GetContainersRequest . class )  ;", "request . setApplicationAttemptId ( applicationAttemptId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainersRequest"}, {"methodBody": ["METHOD_START", "{", "GetContainersResponse   response    =    Records . newRecord ( GetContainersResponse . class )  ;", "response . setContainerList ( containers )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetContainersResponse"}, {"methodBody": ["METHOD_START", "{", "GetDelegationTokenRequest   request    =    Records . newRecord ( GetDelegationTokenRequest . class )  ;", "request . setRenewer ( renewer )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetDelegationTokenRequest"}, {"methodBody": ["METHOD_START", "{", "GetDelegationTokenResponse   response    =    Records . newRecord ( GetDelegationTokenResponse . class )  ;", "response . setRMDelegationToken ( rmDTToken )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "GetNewApplicationRequest   request    =    Records . newRecord ( GetNewApplicationRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetNewApplicationRequest"}, {"methodBody": ["METHOD_START", "{", "GetNewApplicationResponse   response    =    Records . newRecord ( GetNewApplicationResponse . class )  ;", "response . setApplicationId ( applicationId )  ;", "response . setMaximumResourceCapability ( maxCapability )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetNewApplicationResponse"}, {"methodBody": ["METHOD_START", "{", "GetQueueInfoRequest   request    =    Records . newRecord ( GetQueueInfoRequest . class )  ;", "request . setQueueName ( queueName )  ;", "request . setIncludeApplications ( includeApplications )  ;", "request . setIncludeChildQueues ( includeChildQueues )  ;", "request . setRecursive ( recursive )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetQueueInfoRequest"}, {"methodBody": ["METHOD_START", "{", "GetQueueInfoResponse   response    =    Records . newRecord ( GetQueueInfoResponse . class )  ;", "response . setQueueInfo ( queueInfo )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetQueueInfoResponse"}, {"methodBody": ["METHOD_START", "{", "GetQueueUserAclsInfoRequest   request    =    Records . newRecord ( GetQueueUserAclsInfoRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetQueueUserAclsInfoRequest"}, {"methodBody": ["METHOD_START", "{", "GetQueueUserAclsInfoResponse   response    =    Records . newRecord ( GetQueueUserAclsInfoResponse . class )  ;", "response . setUserAclsInfoList ( queueUserAclsList )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.GetQueueUserAclsInfoResponse"}, {"methodBody": ["METHOD_START", "{", "KillApplicationRequest   request    =    Records . newRecord ( KillApplicationRequest . class )  ;", "request . setApplicationId ( applicationId )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.KillApplicationRequest"}, {"methodBody": ["METHOD_START", "{", "KillApplicationResponse   response    =    Records . newRecord ( KillApplicationResponse . class )  ;", "response . setIsKillCompleted ( isKillCompleted )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.KillApplicationResponse"}, {"methodBody": ["METHOD_START", "{", "MoveApplicationAcrossQueuesRequest   request    =    Records . newRecord ( MoveApplicationAcrossQueuesRequest . class )  ;", "request . setApplicationId ( appId )  ;", "request . setTargetQueue ( queue )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.MoveApplicationAcrossQueuesRequest"}, {"methodBody": ["METHOD_START", "{", "MoveApplicationAcrossQueuesResponse   response    =    Records . newRecord ( MoveApplicationAcrossQueuesResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.MoveApplicationAcrossQueuesResponse"}, {"methodBody": ["METHOD_START", "{", "RegisterApplicationMasterRequest   request    =    Records . newRecord ( RegisterApplicationMasterRequest . class )  ;", "request . setHost ( host )  ;", "request . setRpcPort ( port )  ;", "request . setTrackingUrl ( trackingUrl )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest"}, {"methodBody": ["METHOD_START", "{", "RegisterApplicationMasterResponse   response    =    Records . newRecord ( RegisterApplicationMasterResponse . class )  ;", "response . setMaximumResourceCapability ( maxCapability )  ;", "response . setApplicationACLs ( acls )  ;", "response . setClientToAMTokenMasterKey ( key )  ;", "response . setContainersFromPreviousAttempts ( containersFromPreviousAttempt )  ;", "response . setNMTokensFromPreviousAttempts ( nmTokensFromPreviousAttempts )  ;", "response . setQueue ( queue )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse"}, {"methodBody": ["METHOD_START", "{", "RenewDelegationTokenRequest   request    =    Records . newRecord ( RenewDelegationTokenRequest . class )  ;", "request . setDelegationToken ( dToken )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.RenewDelegationTokenRequest"}, {"methodBody": ["METHOD_START", "{", "RenewDelegationTokenResponse   response    =    Records . newRecord ( RenewDelegationTokenResponse . class )  ;", "response . setNextExpirationTime ( expTime )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.RenewDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "StartContainerRequest   request    =    Records . newRecord ( StartContainerRequest . class )  ;", "request . setContainerLaunchContext ( context )  ;", "request . setContainerToken ( container )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.StartContainerRequest"}, {"methodBody": ["METHOD_START", "{", "StartContainersRequest   request    =    Records . newRecord ( StartContainersRequest . class )  ;", "request . setStartContainerRequests ( requests )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.StartContainersRequest"}, {"methodBody": ["METHOD_START", "{", "StartContainersResponse   response    =    Records . newRecord ( StartContainersResponse . class )  ;", "response . setAllServicesMetaData ( servicesMetaData )  ;", "response . setSuccessfullyStartedContainers ( succeededContainers )  ;", "response . setFailedRequests ( failedContainers )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.StartContainersResponse"}, {"methodBody": ["METHOD_START", "{", "StopContainersRequest   request    =    Records . newRecord ( StopContainersRequest . class )  ;", "request . setContainerIds ( containerIds )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.StopContainersRequest"}, {"methodBody": ["METHOD_START", "{", "StopContainersResponse   response    =    Records . newRecord ( StopContainersResponse . class )  ;", "response . setFailedRequests ( failedRequests )  ;", "response . setSuccessfullyStoppedContainers ( succeededRequests )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.StopContainersResponse"}, {"methodBody": ["METHOD_START", "{", "SubmitApplicationRequest   request    =    Records . newRecord ( SubmitApplicationRequest . class )  ;", "request . setApplicationSubmissionContext ( context )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationRequest"}, {"methodBody": ["METHOD_START", "{", "SubmitApplicationResponse   response    =    Records . newRecord ( SubmitApplicationResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationResponse"}, {"methodBody": ["METHOD_START", "{", "ApplicationAttemptId   appAttemptId    =    Records . newRecord ( ApplicationAttemptId . class )  ;", "appAttemptId . setApplicationId ( appId )  ;", "appAttemptId . setAttemptId ( attemptId )  ;", "appAttemptId . build (  )  ;", "return   appAttemptId ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationAttemptId"}, {"methodBody": ["METHOD_START", "{", "ApplicationAttemptReport   report    =    Records . newRecord ( ApplicationAttemptReport . class )  ;", "report . setApplicationAttemptId ( applicationAttemptId )  ;", "report . setHost ( host )  ;", "report . setRpcPort ( rpcPort )  ;", "report . setTrackingUrl ( url )  ;", "report . setDiagnostics ( diagnostics )  ;", "report . setYarnApplicationAttemptState ( state )  ;", "report . setAMContainerId ( amContainerId )  ;", "return   report ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationAttemptReport"}, {"methodBody": ["METHOD_START", "{", "ApplicationId   appId    =    Records . newRecord ( ApplicationId . class )  ;", "appId . setClusterTimestamp ( clusterTimestamp )  ;", "appId . setId ( id )  ;", "appId . build (  )  ;", "return   appId ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationId"}, {"methodBody": ["METHOD_START", "{", "ApplicationReport   report    =    Records . newRecord ( ApplicationReport . class )  ;", "report . setApplicationId ( applicationId )  ;", "report . setCurrentApplicationAttemptId ( applicationAttemptId )  ;", "report . setUser ( user )  ;", "report . setQueue ( queue )  ;", "report . setName ( name )  ;", "report . setHost ( host )  ;", "report . setRpcPort ( rpcPort )  ;", "report . setClientToAMToken ( clientToAMToken )  ;", "report . setYarnApplicationState ( state )  ;", "report . setDiagnostics ( diagnostics )  ;", "report . setTrackingUrl ( url )  ;", "report . setStartTime ( startTime )  ;", "report . setFinishTime ( finishTime )  ;", "report . setFinalApplicationStatus ( finalStatus )  ;", "report . setApplicationResourceUsageReport ( appResources )  ;", "report . setOriginalTrackingUrl ( origTrackingUrl )  ;", "report . setProgress ( progress )  ;", "report . setApplicationType ( applicationType )  ;", "report . setAMRMToken ( amRmToken )  ;", "return   report ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationReport"}, {"methodBody": ["METHOD_START", "{", "ApplicationResourceUsageReport   report    =    Records . newRecord ( ApplicationResourceUsageReport . class )  ;", "report . setNumUsedContainers ( numUsedContainers )  ;", "report . setNumReservedContainers ( numReservedContainers )  ;", "report . setUsedResources ( usedResources )  ;", "report . setReservedResources ( reservedResources )  ;", "report . setNeededResources ( neededResources )  ;", "return   report ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationResourceUsageReport"}, {"methodBody": ["METHOD_START", "{", "return   ApplicationSubmissionContext . newInstance ( applicationId ,    applicationName ,    queue ,    priority ,    amContainer ,    isUnmanagedAM ,    cancelTokensWhenComplete ,    maxAppAttempts ,    resource ,    null )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext"}, {"methodBody": ["METHOD_START", "{", "return   ApplicationSubmissionContext . newInstance ( applicationId ,    applicationName ,    queue ,    priority ,    amContainer ,    isUnmanagedAM ,    cancelTokensWhenComplete ,    maxAppAttempts ,    resource ,    applicationType ,    false )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext"}, {"methodBody": ["METHOD_START", "{", "ApplicationSubmissionContext   context    =    Records . newRecord ( ApplicationSubmissionContext . class )  ;", "context . setApplicationId ( applicationId )  ;", "context . setApplicationName ( applicationName )  ;", "context . setQueue ( queue )  ;", "context . setPriority ( priority )  ;", "context . setAMContainerSpec ( amContainer )  ;", "context . setUnmanagedAM ( isUnmanagedAM )  ;", "context . setCancelTokensWhenComplete ( cancelTokensWhenComplete )  ;", "context . setMaxAppAttempts ( maxAppAttempts )  ;", "context . setResource ( resource )  ;", "context . setApplicationType ( applicationType )  ;", "context . setKeepContainersAcrossApplicationAttempts ( keepContainers )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext"}, {"methodBody": ["METHOD_START", "{", "Container   container    =    Records . newRecord ( Container . class )  ;", "container . setId ( containerId )  ;", "container . setNodeId ( nodeId )  ;", "container . setNodeHttpAddress ( nodeHttpAddress )  ;", "container . setResource ( resource )  ;", "container . setPriority ( priority )  ;", "container . setContainerToken ( containerToken )  ;", "return   container ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.Container"}, {"methodBody": ["METHOD_START", "{", "ContainerId   id    =    Records . newRecord ( ContainerId . class )  ;", "id . setId ( containerId )  ;", "id . setApplicationAttemptId ( appAttemptId )  ;", "id . build (  )  ;", "return   id ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerId"}, {"methodBody": ["METHOD_START", "{", "ContainerLaunchContext   container    =    Records . newRecord ( ContainerLaunchContext . class )  ;", "container . setLocalResources ( localResources )  ;", "container . setEnvironment ( environment )  ;", "container . setCommands ( commands )  ;", "container . setServiceData ( serviceData )  ;", "container . setTokens ( tokens )  ;", "container . setApplicationACLs ( acls )  ;", "return   container ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerLaunchContext"}, {"methodBody": ["METHOD_START", "{", "ContainerReport   report    =    Records . newRecord ( ContainerReport . class )  ;", "report . setContainerId ( containerId )  ;", "report . setAllocatedResource ( allocatedResource )  ;", "report . setAssignedNode ( assignedNode )  ;", "report . setPriority ( priority )  ;", "report . setCreationTime ( creationTime )  ;", "report . setFinishTime ( finishTime )  ;", "report . setDiagnosticsInfo ( diagnosticInfo )  ;", "report . setLogUrl ( logUrl )  ;", "report . setContainerExitStatus ( containerExitStatus )  ;", "report . setContainerState ( containerState )  ;", "return   report ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerReport"}, {"methodBody": ["METHOD_START", "{", "ContainerResourceDecrease   context    =    Records . newRecord ( ContainerResourceDecrease . class )  ;", "context . setContainerId ( existingContainerId )  ;", "context . setCapability ( targetCapability )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerResourceDecrease"}, {"methodBody": ["METHOD_START", "{", "ContainerResourceIncrease   context    =    Records . newRecord ( ContainerResourceIncrease . class )  ;", "context . setContainerId ( existingContainerId )  ;", "context . setCapability ( targetCapability )  ;", "context . setContainerToken ( token )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerResourceIncrease"}, {"methodBody": ["METHOD_START", "{", "ContainerResourceIncreaseRequest   context    =    Records . newRecord ( ContainerResourceIncreaseRequest . class )  ;", "context . setContainerId ( existingContainerId )  ;", "context . setCapability ( targetCapability )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerResourceIncreaseRequest"}, {"methodBody": ["METHOD_START", "{", "ContainerStatus   containerStatus    =    Records . newRecord ( ContainerStatus . class )  ;", "containerStatus . setState ( containerState )  ;", "containerStatus . setContainerId ( containerId )  ;", "containerStatus . setDiagnostics ( diagnostics )  ;", "containerStatus . setExitStatus ( exitStatus )  ;", "return   containerStatus ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ContainerStatus"}, {"methodBody": ["METHOD_START", "{", "return   LocalResource . newInstance ( url ,    type ,    visibility ,    size ,    timestamp ,    null )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.LocalResource"}, {"methodBody": ["METHOD_START", "{", "LocalResource   resource    =    Records . newRecord ( LocalResource . class )  ;", "resource . setResource ( url )  ;", "resource . setType ( type )  ;", "resource . setVisibility ( visibility )  ;", "resource . setSize ( size )  ;", "resource . setTimestamp ( timestamp )  ;", "resource . setPattern ( pattern )  ;", "return   resource ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.LocalResource"}, {"methodBody": ["METHOD_START", "{", "NMToken   nmToken    =    Records . newRecord ( NMToken . class )  ;", "nmToken . setNodeId ( nodeId )  ;", "nmToken . setToken ( token )  ;", "return   nmToken ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.NMToken"}, {"methodBody": ["METHOD_START", "{", "NodeId   nodeId    =    Records . newRecord ( NodeId . class )  ;", "nodeId . setHost ( host )  ;", "nodeId . setPort ( port )  ;", "nodeId . build (  )  ;", "return   nodeId ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.NodeId"}, {"methodBody": ["METHOD_START", "{", "NodeReport   nodeReport    =    Records . newRecord ( NodeReport . class )  ;", "nodeReport . setNodeId ( nodeId )  ;", "nodeReport . setNodeState ( nodeState )  ;", "nodeReport . setHttpAddress ( httpAddress )  ;", "nodeReport . setRackName ( rackName )  ;", "nodeReport . setUsed ( used )  ;", "nodeReport . setCapability ( capability )  ;", "nodeReport . setNumContainers ( numContainers )  ;", "nodeReport . setHealthReport ( healthReport )  ;", "nodeReport . setLastHealthReportTime ( lastHealthReportTime )  ;", "return   nodeReport ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.NodeReport"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( this )     =  =     ( NodeState . UNHEALTHY )  )     |  |     (  ( this )     =  =     ( NodeState . DECOMMISSIONED )  )  )     |  |     (  ( this )     =  =     ( NodeState . LOST )  )  ;", "}", "METHOD_END"], "methodName": ["isUnusable"], "fileName": "org.apache.hadoop.yarn.api.records.NodeState"}, {"methodBody": ["METHOD_START", "{", "PreemptionContainer   container    =    Records . newRecord ( PreemptionContainer . class )  ;", "container . setId ( id )  ;", "return   container ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.PreemptionContainer"}, {"methodBody": ["METHOD_START", "{", "PreemptionContract   contract    =    Records . newRecord ( PreemptionContract . class )  ;", "contract . setResourceRequest ( req )  ;", "contract . setContainers ( containers )  ;", "return   contract ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.PreemptionContract"}, {"methodBody": ["METHOD_START", "{", "PreemptionMessage   message    =    Records . newRecord ( PreemptionMessage . class )  ;", "message . setStrictContract ( set )  ;", "message . setContract ( contract )  ;", "return   message ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.PreemptionMessage"}, {"methodBody": ["METHOD_START", "{", "PreemptionResourceRequest   request    =    Records . newRecord ( PreemptionResourceRequest . class )  ;", "request . setResourceRequest ( req )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.PreemptionResourceRequest"}, {"methodBody": ["METHOD_START", "{", "Priority   priority    =    Records . newRecord ( Priority . class )  ;", "priority . setPriority ( p )  ;", "return   priority ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.Priority"}, {"methodBody": ["METHOD_START", "{", "QueueInfo   queueInfo    =    Records . newRecord ( QueueInfo . class )  ;", "queueInfo . setQueueName ( queueName )  ;", "queueInfo . setCapacity ( capacity )  ;", "queueInfo . setMaximumCapacity ( maximumCapacity )  ;", "queueInfo . setCurrentCapacity ( currentCapacity )  ;", "queueInfo . setChildQueues ( childQueues )  ;", "queueInfo . setApplications ( applications )  ;", "queueInfo . setQueueState ( queueState )  ;", "return   queueInfo ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.QueueInfo"}, {"methodBody": ["METHOD_START", "{", "QueueUserACLInfo   info    =    Records . newRecord ( QueueUserACLInfo . class )  ;", "info . setQueueName ( queueName )  ;", "info . setUserAcls ( acls )  ;", "return   info ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.QueueUserACLInfo"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    Records . newRecord ( Resource . class )  ;", "resource . setMemory ( memory )  ;", "resource . setVirtualCores ( vCores )  ;", "return   resource ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.Resource"}, {"methodBody": ["METHOD_START", "{", "ResourceBlacklistRequest   blacklistRequest    =    Records . newRecord ( ResourceBlacklistRequest . class )  ;", "blacklistRequest . setBlacklistAdditions ( additions )  ;", "blacklistRequest . setBlacklistRemovals ( removals )  ;", "return   blacklistRequest ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ResourceBlacklistRequest"}, {"methodBody": ["METHOD_START", "{", "ResourceOption   resourceOption    =    Records . newRecord ( ResourceOption . class )  ;", "resourceOption . setResource ( resource )  ;", "resourceOption . setOverCommitTimeout ( overCommitTimeout )  ;", "resourceOption . build (  )  ;", "return   resourceOption ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ResourceOption"}, {"methodBody": ["METHOD_START", "{", "return   ResourceRequest . ANY . equals ( hostName )  ;", "}", "METHOD_END"], "methodName": ["isAnyLocation"], "fileName": "org.apache.hadoop.yarn.api.records.ResourceRequest"}, {"methodBody": ["METHOD_START", "{", "return   ResourceRequest . newInstance ( priority ,    hostName ,    capability ,    numContainers ,    true )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ResourceRequest"}, {"methodBody": ["METHOD_START", "{", "ResourceRequest   request    =    Records . newRecord ( ResourceRequest . class )  ;", "request . setPriority ( priority )  ;", "request . setResourceName ( hostName )  ;", "request . setCapability ( capability )  ;", "request . setNumContainers ( numContainers )  ;", "request . setRelaxLocality ( relaxLocality )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.ResourceRequest"}, {"methodBody": ["METHOD_START", "{", "SerializedException   exception    =    Records . newRecord ( SerializedException . class )  ;", "exception . init ( e )  ;", "return   exception ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.SerializedException"}, {"methodBody": ["METHOD_START", "{", "StrictPreemptionContract   contract    =    Records . newRecord ( StrictPreemptionContract . class )  ;", "contract . setContainers ( containers )  ;", "return   contract ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.StrictPreemptionContract"}, {"methodBody": ["METHOD_START", "{", "Token   token    =    Records . newRecord ( Token . class )  ;", "token . setIdentifier ( ByteBuffer . wrap ( identifier )  )  ;", "token . setKind ( kind )  ;", "token . setPassword ( ByteBuffer . wrap ( password )  )  ;", "token . setService ( service )  ;", "return   token ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.Token"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Records . newRecord ( URL . class )  ;", "url . setScheme ( scheme )  ;", "url . setHost ( host )  ;", "url . setPort ( port )  ;", "url . setFile ( file )  ;", "return   url ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.URL"}, {"methodBody": ["METHOD_START", "{", "YarnClusterMetrics   metrics    =    Records . newRecord ( YarnClusterMetrics . class )  ;", "metrics . setNumNodeManagers ( numNodeManagers )  ;", "return   metrics ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.api.records.YarnClusterMetrics"}, {"methodBody": ["METHOD_START", "{", "return   content ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "this . content    =    content ;", "}", "METHOD_END"], "methodName": ["setContent"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineDelegationTokenResponse"}, {"methodBody": ["METHOD_START", "{", "this . entities . addAll ( entities )  ;", "}", "METHOD_END"], "methodName": ["addEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntities"}, {"methodBody": ["METHOD_START", "{", "entities . add ( entity )  ;", "}", "METHOD_END"], "methodName": ["addEntity"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntities"}, {"methodBody": ["METHOD_START", "{", "return   entities ;", "}", "METHOD_END"], "methodName": ["getEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntities"}, {"methodBody": ["METHOD_START", "{", "this . entities    =    entities ;", "}", "METHOD_END"], "methodName": ["setEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntities"}, {"methodBody": ["METHOD_START", "{", "events . add ( event )  ;", "}", "METHOD_END"], "methodName": ["addEvent"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . events . addAll ( events )  ;", "}", "METHOD_END"], "methodName": ["addEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . otherInfo . put ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["addOtherInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . otherInfo . putAll ( otherInfo )  ;", "}", "METHOD_END"], "methodName": ["addOtherInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "Set < Object >    thisPrimaryFilter    =    primaryFilters . get ( key )  ;", "if    ( thisPrimaryFilter    =  =    null )     {", "thisPrimaryFilter    =    new   HashSet < Object >  (  )  ;", "primaryFilters . put ( key ,    thisPrimaryFilter )  ;", "}", "thisPrimaryFilter . add ( value )  ;", "}", "METHOD_END"], "methodName": ["addPrimaryFilter"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    Set < Object >  >    primaryFilter    :    primaryFilters . entrySet (  )  )     {", "Set < Object >    thisPrimaryFilter    =    this . primaryFilters . get ( primaryFilter . getKey (  )  )  ;", "if    ( thisPrimaryFilter    =  =    null )     {", "this . primaryFilters . put ( primaryFilter . getKey (  )  ,    primaryFilter . getValue (  )  )  ;", "} else    {", "thisPrimaryFilter . addAll ( primaryFilter . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addPrimaryFilters"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    Set < String >  >    relatedEntity    :    relatedEntities . entrySet (  )  )     {", "Set < String >    thisRelatedEntity    =    this . relatedEntities . get ( relatedEntity . getKey (  )  )  ;", "if    ( thisRelatedEntity    =  =    null )     {", "this . relatedEntities . put ( relatedEntity . getKey (  )  ,    relatedEntity . getValue (  )  )  ;", "} else    {", "thisRelatedEntity . addAll ( relatedEntity . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addRelatedEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "Set < String >    thisRelatedEntity    =    relatedEntities . get ( entityType )  ;", "if    ( thisRelatedEntity    =  =    null )     {", "thisRelatedEntity    =    new   HashSet < String >  (  )  ;", "relatedEntities . put ( entityType ,    thisRelatedEntity )  ;", "}", "thisRelatedEntity . add ( entityId )  ;", "}", "METHOD_END"], "methodName": ["addRelatedEntity"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   entityId ;", "}", "METHOD_END"], "methodName": ["getEntityId"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   entityType ;", "}", "METHOD_END"], "methodName": ["getEntityType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   events ;", "}", "METHOD_END"], "methodName": ["getEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   otherInfo ;", "}", "METHOD_END"], "methodName": ["getOtherInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   primaryFilters ;", "}", "METHOD_END"], "methodName": ["getPrimaryFilters"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   relatedEntities ;", "}", "METHOD_END"], "methodName": ["getRelatedEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . entityId    =    entityId ;", "}", "METHOD_END"], "methodName": ["setEntityId"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . entityType    =    entityType ;", "}", "METHOD_END"], "methodName": ["setEntityType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . events    =    events ;", "}", "METHOD_END"], "methodName": ["setEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . otherInfo    =    otherInfo ;", "}", "METHOD_END"], "methodName": ["setOtherInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . primaryFilters    =    primaryFilters ;", "}", "METHOD_END"], "methodName": ["setPrimaryFilters"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . relatedEntities    =    relatedEntities ;", "}", "METHOD_END"], "methodName": ["setRelatedEntities"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . startTime    =    startTime ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEntity"}, {"methodBody": ["METHOD_START", "{", "this . eventInfo . put ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["addEventInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "this . eventInfo . putAll ( eventInfo )  ;", "}", "METHOD_END"], "methodName": ["addEventInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "return   eventInfo ;", "}", "METHOD_END"], "methodName": ["getEventInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "return   eventType ;", "}", "METHOD_END"], "methodName": ["getEventType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "this . eventInfo    =    eventInfo ;", "}", "METHOD_END"], "methodName": ["setEventInfo"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "this . eventType    =    eventType ;", "}", "METHOD_END"], "methodName": ["setEventType"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "this . timestamp    =    timestamp ;", "}", "METHOD_END"], "methodName": ["setTimestamp"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvent"}, {"methodBody": ["METHOD_START", "{", "allEvents . add ( eventsOfOneEntity )  ;", "}", "METHOD_END"], "methodName": ["addEvent"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvents"}, {"methodBody": ["METHOD_START", "{", "this . allEvents . addAll ( allEvents )  ;", "}", "METHOD_END"], "methodName": ["addEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvents"}, {"methodBody": ["METHOD_START", "{", "return   allEvents ;", "}", "METHOD_END"], "methodName": ["getAllEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvents"}, {"methodBody": ["METHOD_START", "{", "this . allEvents . clear (  )  ;", "this . allEvents . addAll ( allEvents )  ;", "}", "METHOD_END"], "methodName": ["setEvents"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelineEvents"}, {"methodBody": ["METHOD_START", "{", "errors . add ( error )  ;", "}", "METHOD_END"], "methodName": ["addError"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse"}, {"methodBody": ["METHOD_START", "{", "this . errors . addAll ( errors )  ;", "}", "METHOD_END"], "methodName": ["addErrors"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse"}, {"methodBody": ["METHOD_START", "{", "return   errors ;", "}", "METHOD_END"], "methodName": ["getErrors"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse"}, {"methodBody": ["METHOD_START", "{", "this . errors . clear (  )  ;", "this . errors . addAll ( errors )  ;", "}", "METHOD_END"], "methodName": ["setErrors"], "fileName": "org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse"}, {"methodBody": ["METHOD_START", "{", "closeInternal (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.apache.hadoop.yarn.conf.ConfigurationProvider"}, {"methodBody": ["METHOD_START", "{", "initInternal ( bootstrapConf )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.apache.hadoop.yarn.conf.ConfigurationProvider"}, {"methodBody": ["METHOD_START", "{", "Class <  ?    extends   ConfigurationProvider >    defaultProviderClass ;", "try    {", "defaultProviderClass    =     (  ( Class <  ?    extends   ConfigurationProvider >  )     ( Class . forName ( YarnConfiguration . DEFAULT _ RM _ CONFIGURATION _ PROVIDER _ CLASS )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   YarnRuntimeException (  (  \" Invalid   default   configuration   provider   class \"     +     ( YarnConfiguration . DEFAULT _ RM _ CONFIGURATION _ PROVIDER _ CLASS )  )  ,    e )  ;", "}", "ConfigurationProvider   configurationProvider    =    ReflectionUtils . newInstance ( bootstrapConf . getClass ( YarnConfiguration . RM _ CONFIGURATION _ PROVIDER _ CLASS ,    defaultProviderClass ,    ConfigurationProvider . class )  ,    bootstrapConf )  ;", "return   configurationProvider ;", "}", "METHOD_END"], "methodName": ["getConfigurationProvider"], "fileName": "org.apache.hadoop.yarn.conf.ConfigurationProviderFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( suffix    =  =    null )     |  |     ( suffix . isEmpty (  )  )  )     {", "retu   key ;", "}", "if    ( suffix . startsWith (  \"  .  \"  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  \" suffix    '  \"     +    suffix )     +     \"  '    should   not    \"  )     +     \" already   have    '  .  '    prepended .  \"  )  )  ;", "}", "retu    ( key    +     \"  .  \"  )     +    suffix ;", "}", "METHOD_END"], "methodName": ["addSuffix"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   rpcAddressConfKey    =    null ;", "try    {", "rpcAddressConfKey    =     . addSuffix ( prefix ,    RMId )  ;", "if    (  ( conf . getTrimmed ( rpcAddressConfKey )  )     =  =    null )     {", "String   hostNameConfKey    =     . addSuffix ( YarnConfiguration . RM _ HOSTNAME ,    RMId )  ;", "String   confVal    =    conf . getTrimmed ( hostNameConfKey )  ;", "if    ( confVal    =  =    null )     {", ". throwBadConfigurationException (  . getNeedToSetValueMessage (  (  ( hostNameConfKey    +     \"    or    \"  )     +     (  . addSuffix ( prefix ,    RMId )  )  )  )  )  ;", "} else    {", "conf . set (  . addSuffix ( prefix ,    RMId )  ,     (  ( confVal    +     \"  :  \"  )     +     ( YarnConfiguration . getRMDefaultPortNumber ( prefix ,    conf )  )  )  )  ;", "}", "}", "}    catch    ( IllegalArgumentException   iae )     {", "String   errmsg    =    iae . getMessage (  )  ;", "if    ( rpcAddressConfKey    =  =    null )     {", "errmsg    =     . getInvalidValueMessage ( YarnConfiguration . RM _ HA _ ID ,    RMId )  ;", "}", ". throwBadConfigurationException ( errmsg )  ;", "}", "}", "METHOD_END"], "methodName": ["checkAndSetRMRPCAddress"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( YarnConfiguration . getServiceAddressConfKeys ( conf )  . contains ( prefix )  )  )     {", "return   prefix ;", "} else    {", "String   RMId    =     . getRMHAId ( conf )  ;", ". checkAndSetRMRPCAddress ( prefix ,    RMId ,    conf )  ;", "return    . addSuffix ( prefix ,    RMId )  ;", "}", "}", "METHOD_END"], "methodName": ["getConfKeyForRMInstance"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   value    =    HAUtil . getConfValueForRMInstance ( prefix ,    conf )  ;", "return   value    =  =    null    ?    defaultValue    :    value ;", "}", "METHOD_END"], "methodName": ["getConfValueForRMInstance"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   confKey    =    HAUtil . getConfKeyForRMInstance ( prefix ,    conf )  ;", "String   retVal    =    conf . getTrimmed ( confKey )  ;", "if    ( HAUtil . LOG . isTraceEnabled (  )  )     {", "HAUtil . LOG . trace (  (  (  (  (  (  \" getConfValueForRMInstance :    prefix    =     \"     +    prefix )     +     \"  ;    confKey   being   looked   up    =     \"  )     +    confKey )     +     \"  ;    value   being   set   to    =     \"  )     +    retVal )  )  ;", "}", "return   retVal ;", "}", "METHOD_END"], "methodName": ["getConfValueForRMInstance"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Invalid   value   of    \"     +    confKey )     +     \"  .     \"  )     +     \" Current   value   is    \"  )     +    invalidValue ;", "}", "METHOD_END"], "methodName": ["getInvalidValueMessage"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return   confKey    +     \"    needs   to   be   set   in   a   HA   configuration .  \"  ;", "}", "METHOD_END"], "methodName": ["getNeedToSetValueMessage"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "int   found    =     0  ;", "String   currentRMId    =    conf . getTrimmed ( YarnConfiguration . RM _ HA _ ID )  ;", "if    ( currentRMId    =  =    null )     {", "for    ( String   rmId    :     . getRMHAIds ( conf )  )     {", "String   key    =     . addSuffix ( YarnConfiguration . RM _ ADDRESS ,    rmId )  ;", "String   addr    =    conf . get ( key )  ;", "if    ( addr    =  =    null )     {", "continue ;", "}", "InetSocketAddress   s ;", "try    {", "s    =    NetUtils . createSocketAddr ( addr )  ;", "}    catch    ( Exception   e )     {", ". LOG . warn (  (  \" Exception   in   creating   socket   address    \"     +    addr )  ,    e )  ;", "continue ;", "}", "if    (  (  !  ( s . isUnresolved (  )  )  )     &  &     ( NetUtils . isLocalAddress ( s . getAddress (  )  )  )  )     {", "currentRMId    =    rmId . trim (  )  ;", "found +  +  ;", "}", "}", "}", "if    ( found    >     1  )     {", "String   msg    =     \" The   HA   Configuration   has   multiple   addresses   that   match    \"     +     \" local   node ' s   address .  \"  ;", "throw   new   HadoopIllegalArgumentException ( msg )  ;", "}", "return   currentRMId ;", "}", "METHOD_END"], "methodName": ["getRMHAId"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  (  ( YarnConfiguration . RM _ HA _ IDS )     +     \"  (  \"  )     +    ids )     +     \"  )    need   to   contain    \"  )     +     ( YarnConfiguration . RM _ HA _ ID )  )     +     \"  (  \"  )     +    rmId )     +     \"  )    in   a   HA   configuration .  \"  ;", "}", "METHOD_END"], "methodName": ["getRMHAIdNeedToBeIncludedMessage"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return   conf . getStringCollection ( YarnConfiguration . RM _ HA _ IDS )  ;", "}", "METHOD_END"], "methodName": ["getRMHAIds"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Resource   Manager   HA   is   enabled ,    but    \"     +     ( YarnConfiguration . RM _ HA _ IDS )  )     +     \"    has   only   one   id (  \"  )     +     ( ids . toString (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["getRMHAIdsWarningMessage"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return   conf . getBoolean ( YarnConfiguration . AUTO _ FAILOVER _ EMBEDDED ,    YarnConfiguration . DEFAULT _ AUTO _ FAILOVER _ EMBEDDED )  ;", "}", "METHOD_END"], "methodName": ["isAutomaticFailoverEmbedded"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return   conf . getBoolean ( YarnConfiguration . AUTO _ FAILOVER _ ENABLED ,    YarnConfiguration . DEFAULT _ AUTO _ FAILOVER _ ENABLED )  ;", "}", "METHOD_END"], "methodName": ["isAutomaticFailoverEnabled"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return    ( HAUtil . isAutomaticFailoverEnabled ( conf )  )     &  &     ( HAUtil . isAutomaticFailoverEmbedded ( conf )  )  ;", "}", "METHOD_END"], "methodName": ["isAutomaticFailoverEnabledAndEmbedded"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "return   conf . getBoolean ( YarnConfiguration . RM _ HA _ ENABLED ,    YarnConfiguration . DEFAULT _ RM _ HA _ ENABLED )  ;", "}", "METHOD_END"], "methodName": ["isHAEnabled"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "throw   new   YarnRuntimeException (  (  ( HAUtil . BAD _ CONFIG _ MESSAGE _ PREFIX )     +    msg )  )  ;", "}", "METHOD_END"], "methodName": ["throwBadConfigurationException"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( String   confKey    :    YarnConfiguration . getServiceAddressConfKeys ( conf )  )     {", ". verifyAndSetConfValue ( confKey ,    conf )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyAndSetAllServiceAddresses"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   confKey    =    null ;", "String   confValue    =    null ;", "try    {", "confKey    =     . getConfKeyForRMInstance ( prefix ,    conf )  ;", "confValue    =     . getConfValueForRMInstance ( prefix ,    conf )  ;", "conf . set ( prefix ,    confValue )  ;", "}    catch    ( YarnRuntimeException   yre )     {", "throw   yre ;", "}    catch    ( IllegalArgumentException   iae )     {", "String   errmsg ;", "if    ( confKey    =  =    null )     {", "errmsg    =     . getInvalidValueMessage ( YarnConfiguration . RM _ HA _ ID ,     . getRMHAId ( conf )  )  ;", "} else    {", "errmsg    =     . getNeedToSetValueMessage ( confKey )  ;", "}", ". throwBadConfigurationException ( errmsg )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyAndSetConfValue"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "HAUtil . verifyAndSetRMHAIdsList ( conf )  ;", "HAUtil . verifyAndSetCurrentRMHAId ( conf )  ;", "HAUtil . verifyAndSetAllServiceAddresses ( conf )  ;", "}", "METHOD_END"], "methodName": ["verifyAndSetConfiguration"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   rmId    =    HAUtil . getRMHAId ( conf )  ;", "if    ( rmId    =  =    null )     {", "StringBuilder   msg    =    new   StringBuilder (  )  ;", "msg . append (  \" Can   not   find   valid   RM _ HA _ ID .    None   of    \"  )  ;", "for    ( String   id    :    conf . getTrimmedStringCollection ( YarnConfiguration . RM _ HA _ IDS )  )     {", "msg . append (  (  ( HAUtil . addSuffix ( YarnConfiguration . RM _ ADDRESS ,    id )  )     +     \"     \"  )  )  ;", "}", "msg . append (  (  (  (  (  \"    are   matching \"     +     \"    the   local   address   OR    \"  )     +     ( YarnConfiguration . RM _ HA _ ID )  )     +     \"    is   not \"  )     +     \"    specified   in   HA   Configuration \"  )  )  ;", "HAUtil . throwBadConfigurationException ( msg . toString (  )  )  ;", "} else    {", "Collection < String >    ids    =    HAUtil . getRMHAIds ( conf )  ;", "if    (  !  ( ids . contains ( rmId )  )  )     {", "HAUtil . throwBadConfigurationException ( HAUtil . getRMHAIdNeedToBeIncludedMessage ( ids . toString (  )  ,    rmId )  )  ;", "}", "}", "conf . set ( YarnConfiguration . RM _ HA _ ID ,    rmId )  ;", "}", "METHOD_END"], "methodName": ["verifyAndSetCurrentRMHAId"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "Collection < String >    ids    =    conf . getTrimmedStringCollection ( YarnConfiguration . RM _ HA _ IDS )  ;", "if    (  ( ids . size (  )  )     <     2  )     {", ". throwBadConfigurationException (  . getInvalidValueMessage ( YarnConfiguration . RM _ HA _ IDS ,     (  ( conf . get ( YarnConfiguration . RM _ HA _ IDS )  )     +     \"  \\ nHA   mode   requires   atleast   two   RMs \"  )  )  )  ;", "}", "StringBuilder   setValue    =    new   StringBuilder (  )  ;", "for    ( String   id    :    ids )     {", "for    ( String   prefix    :    YarnConfiguration . getServiceAddressConfKeys ( conf )  )     {", ". checkAndSetRMRPCAddress ( prefix ,    id ,    conf )  ;", "}", "setValue . append ( id )  ;", "setValue . append (  \"  ,  \"  )  ;", "}", "conf . set ( YarnConfiguration . RM _ HA _ IDS ,    setValue . substring (  0  ,     (  ( setValue . length (  )  )     -     1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["verifyAndSetRMHAIdsList"], "fileName": "org.apache.hadoop.yarn.conf.HAUtil"}, {"methodBody": ["METHOD_START", "{", "String   clusterId    =    conf . get ( YarnConfiguration . RM _ CLUSTER _ ID )  ;", "if    ( clusterId    =  =    null )     {", "throw   new   HadoopIllegalArgumentException (  (  \" Configuration   doesn ' t   specify    \"     +     ( YarnConfiguration . RM _ CLUSTER _ ID )  )  )  ;", "}", "return   clusterId ;", "}", "METHOD_END"], "methodName": ["getClusterId"], "fileName": "org.apache.hadoop.yarn.conf.YarnConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ PORT ;", "} else", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ SCHEDULER _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ SCHEDULER _ PORT ;", "} else", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ WEBAPP _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ WEBAPP _ PORT ;", "} else", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ WEBAPP _ HTTPS _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ WEBAPP _ HTTPS _ PORT ;", "} else", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ RESOURCE _ TRACKER _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ RESOURCE _ TRACKER _ PORT ;", "} else", "if    ( addressPrefix . equals ( YarnConfiguration . RM _ ADMIN _ ADDRESS )  )     {", "return   YarnConfiguration . DEFAULT _ RM _ ADMIN _ PORT ;", "} else    {", "throw   new   HadoopIllegalArgumentException (  (  (  (  \" Invalid   RM   RPC   address   Prefix :     \"     +    addressPrefix )     +     \"  .    The   valid   value   should   be   one   of    \"  )     +     ( YarnConfiguration . getServiceAddressConfKeys ( conf )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getRMDefaultPortNumber"], "fileName": "org.apache.hadoop.yarn.conf.YarnConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   YarnConfiguration . useHttps ( conf )     ?    YarnConfiguration . RM _ SERVICES _ ADDRESS _ CONF _ KEYS _ HTTPS    :    YarnConfiguration . RM _ SERVICES _ ADDRESS _ CONF _ KEYS _ HTTP ;", "}", "METHOD_END"], "methodName": ["getServiceAddressConfKeys"], "fileName": "org.apache.hadoop.yarn.conf.YarnConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    ( Policy . HTTPS _ ONLY )     =  =     ( Policy . fromString ( conf . get ( YarnConfiguration . YARN _ HTTP _ POLICY _ KEY ,    YarnConfiguration . YARN _ HTTP _ POLICY _ DEFAULT )  )  )  ;", "}", "METHOD_END"], "methodName": ["useHttps"], "fileName": "org.apache.hadoop.yarn.conf.YarnConfiguration"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class <  ?  >    clazz    =    Class . forName ( ClassName )  ;", "Method   method    =    clazz . getMethod (  \" get \"  ,    null )  ;", "method . setAccessible ( true )  ;", "return   method . invoke ( null ,    null )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   YarnRuntimeException ( e )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   YarnRuntimeException ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   YarnRuntimeException ( e )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   new   YarnRuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getFactoryClassInstance"], "fileName": "org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( conf    =  =    null )     {", "conf    =     . defaultConf ;", "}", "String   recordFactoryClassName    =    conf . get ( YarnConfiguration . IPC _ RECORD _ FACTORY _ CLASS ,    YarnConfiguration . DEFAULT _ IPC _ RECORD _ FACTORY _ CLASS )  ;", "return    (  ( RecordFactory )     (  . getFactoryClassInstance ( recordFactoryClassName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRecordFactory"], "fileName": "org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . appDataForService ;", "}", "METHOD_END"], "methodName": ["getApplicationDataForService"], "fileName": "org.apache.hadoop.yarn.server.api.ApplicationInitializationContext"}, {"methodBody": ["METHOD_START", "{", "return   this . applicationId ;", "}", "METHOD_END"], "methodName": ["getApplicationId"], "fileName": "org.apache.hadoop.yarn.server.api.ApplicationInitializationContext"}, {"methodBody": ["METHOD_START", "{", "return   this . user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "org.apache.hadoop.yarn.server.api.ApplicationInitializationContext"}, {"methodBody": ["METHOD_START", "{", "return   this . applicationId ;", "}", "METHOD_END"], "methodName": ["getApplicationId"], "fileName": "org.apache.hadoop.yarn.server.api.ApplicationTerminationContext"}, {"methodBody": ["METHOD_START", "{", "return   recoveryPath ;", "}", "METHOD_END"], "methodName": ["getRecoveryPath"], "fileName": "org.apache.hadoop.yarn.server.api.AuxiliaryService"}, {"methodBody": ["METHOD_START", "{", "this . recoveryPath    =    recoveryPath ;", "}", "METHOD_END"], "methodName": ["setRecoveryPath"], "fileName": "org.apache.hadoop.yarn.server.api.AuxiliaryService"}, {"methodBody": ["METHOD_START", "{", "return   containerId ;", "}", "METHOD_END"], "methodName": ["getContainerId"], "fileName": "org.apache.hadoop.yarn.server.api.ContainerContext"}, {"methodBody": ["METHOD_START", "{", "return   resource ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.apache.hadoop.yarn.server.api.ContainerContext"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "org.apache.hadoop.yarn.server.api.ContainerContext"}, {"methodBody": ["METHOD_START", "{", "RefreshAdminAclsRequest   request    =    Records . newRecord ( RefreshAdminAclsRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshAdminAclsRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshAdminAclsResponse   response    =    Records . newRecord ( RefreshAdminAclsResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshAdminAclsResponse"}, {"methodBody": ["METHOD_START", "{", "RefreshNodesRequest   request    =    Records . newRecord ( RefreshNodesRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshNodesRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshNodesResponse   response    =    Records . newRecord ( RefreshNodesResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshNodesResponse"}, {"methodBody": ["METHOD_START", "{", "RefreshQueuesRequest   request    =    Records . newRecord ( RefreshQueuesRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshQueuesRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshQueuesResponse   response    =    Records . newRecord ( RefreshQueuesResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshQueuesResponse"}, {"methodBody": ["METHOD_START", "{", "RefreshServiceAclsRequest   request    =    Records . newRecord ( RefreshServiceAclsRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshServiceAclsRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshServiceAclsResponse   response    =    Records . newRecord ( RefreshServiceAclsResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshServiceAclsResponse"}, {"methodBody": ["METHOD_START", "{", "RefreshSuperUserGroupsConfigurationRequest   request    =    Records . newRecord ( RefreshSuperUserGroupsConfigurationRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshSuperUserGroupsConfigurationRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshSuperUserGroupsConfigurationResponse   response    =    Records . newRecord ( RefreshSuperUserGroupsConfigurationResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshSuperUserGroupsConfigurationResponse"}, {"methodBody": ["METHOD_START", "{", "RefreshUserToGroupsMappingsRequest   request    =    Records . newRecord ( RefreshUserToGroupsMappingsRequest . class )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshUserToGroupsMappingsRequest"}, {"methodBody": ["METHOD_START", "{", "RefreshUserToGroupsMappingsResponse   response    =    Records . newRecord ( RefreshUserToGroupsMappingsResponse . class )  ;", "return   response ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.RefreshUserToGroupsMappingsResponse"}, {"methodBody": ["METHOD_START", "{", "UpdateNodeResourceRequest   request    =    Records . newRecord ( UpdateNodeResourceRequest . class )  ;", "request . setNodeResourceMap ( nodeResourceMap )  ;", "return   request ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.apache.hadoop.yarn.server.api.protocolrecords.UpdateNodeResourceRequest"}, {"methodBody": ["METHOD_START", "{", "return   Records . factory . newRecordInstance ( cls )  ;", "}", "METHOD_END"], "methodName": ["newRecord"], "fileName": "org.apache.hadoop.yarn.util.Records"}]