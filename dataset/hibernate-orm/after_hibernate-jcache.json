[{"methodBody": ["METHOD_START", "{", "return   Caching . getCachingProvider (  )  . getCacheManager (  )  ;", "}", "METHOD_END"], "methodName": ["locateStandardCacheManager"], "fileName": "org.hibernate.cache.jcache.JCacheHelper"}, {"methodBody": ["METHOD_START", "{", "return   underlyingCache ;", "}", "METHOD_END"], "methodName": ["getUnderlyingCache"], "fileName": "org.hibernate.cache.jcache.internal.JCacheAccessImpl"}, {"methodBody": ["METHOD_START", "{", "throw   new   CacheException (  (  (  \" On - the - fly   creation   of   JCache   Cache   objects   is   not   supported    [  \"     +    regionName )     +     \"  ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createCache"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "return   cacheManager ;", "}", "METHOD_END"], "methodName": ["getCacheManager"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "final   CachingProvider   cachingProvider ;", "final   String   provider    =    getProp ( properties ,    ConfigSettings . PROVIDER )  ;", "if    ( provider    !  =    null )     {", "cachingProvider    =    Caching . getCachingProvider ( provider )  ;", "} else    {", "cachingProvider    =    Caching . getCachingProvider (  )  ;", "}", "return   cachingProvider ;", "}", "METHOD_END"], "methodName": ["getCachingProvider"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "verifyStarted (  )  ;", "assert    !  ( INSTANCE . isQualified ( unqualifiedRegionName ,    sess . getSessOptions (  )  )  )  ;", "final   String   qualifiedRegionName    =    INSTANCE . qualify ( unqualifiedRegionName ,    sess . getSessOptions (  )  )  ;", "final   Cache < Object ,    Object >    cache    =    cacheManager . getCache ( qualifiedRegionName )  ;", "if    ( cache    =  =    null )     {", "return   createCache ( qualifiedRegionName )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getOrCreateCache"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "return   properties    !  =    null    ?     (  ( String )     ( properties . get ( prop )  )  )     :    null ;", "}", "METHOD_END"], "methodName": ["getProp"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "final   Object   explicitCacheManager    =    properties . get ( ConfigSettings . CACHE _ MANAGER )  ;", "if    ( explicitCacheManager    !  =    null )     {", "return   useExplicitCacheManager ( settings ,    explicitCacheManager )  ;", "}", "final   CachingProvider   cachingProvider    =    getCachingProvider ( properties )  ;", "final   CacheManager   cacheManager ;", "final   String   cacheManagerUri    =    getProp ( properties ,    ConfigSettings . CONFIG _ URI )  ;", "if    ( cacheManagerUri    !  =    null )     {", "URI   uri ;", "try    {", "uri    =    new   URI ( cacheManagerUri )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   new   CacheException (  (  \" Couldn ' t   create   URI   from    \"     +    cacheManagerUri )  ,    e )  ;", "}", "cacheManager    =    cachingProvider . getCacheManager ( uri ,    cachingProvider . getDefaultClassLoader (  )  )  ;", "} else    {", "cacheManager    =    cachingProvider . getCacheManager (  )  ;", "}", "return   cacheManager ;", "}", "METHOD_END"], "methodName": ["resolveCacheManager"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( setting   instanceof   CacheManager )     {", "return    (  ( CacheManager )     ( setting )  )  ;", "}", "final   Class <  ?    extends   CacheManager >    cacheManagerClass ;", "if    ( setting   instanceof   Class )     {", "cacheManagerClass    =     (  ( Class <  ?    extends   CacheManager >  )     ( setting )  )  ;", "} else    {", "cacheManagerClass    =    settings . getServiceRegistry (  )  . getService ( ClassLoaderService . class )  . classForName ( setting . toString (  )  )  ;", "}", "try    {", "return   cacheManagerClass . newInstance (  )  ;", "}    catch    ( InstantiationException    |    IllegalAccessException   e )     {", "throw   new   CacheException (  (  \" Could   not   use   explicit   CacheManager    :     \"     +    setting )  )  ;", "}", "}", "METHOD_END"], "methodName": ["useExplicitCacheManager"], "fileName": "org.hibernate.cache.jcache.internal.JCacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "assert    (  ( sessionFactory )     =  =    null )     |  |     ( sessionFactory . isClosed (  )  )  ;", "sessionFactory    =    Helper . buildStandardSessionFactory ( true )  ;", "}", "METHOD_END"], "methodName": ["createSessionFactory"], "fileName": "org.hibernate.jcache.test.BaseFunctionalTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sessionFactory )     !  =    null )     {", "sessionFactory . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseSessionFactory"], "fileName": "org.hibernate.jcache.test.BaseFunctionalTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sessionFactory )     =  =    null )     {", "throw   new   IllegalStateExcep (  \" SessionFactory   is   null \"  )  ;", "}", "return   sessionFactory ;", "}", "METHOD_END"], "methodName": ["sessionFactory"], "fileName": "org.hibernate.jcache.test.BaseFunctionalTest"}, {"methodBody": ["METHOD_START", "{", "final   Region   region    =    sessionFactory (  )  . getCache (  )  . getRegion ( TestHelper . entityRegionNames [  0  ]  )  ;", "final   mplate   domainDataRegion    =    assertTyping ( mplate . class ,    region )  ;", "final   EntityDataAccess   itemAccess    =    domainDataRegion . getEntityDataAccess ( sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Item . class )  . getNavigableRole (  )  )  ;", "assertThat ( itemAccess . getAccessType (  )  ,    equalTo ( READ _ WRITE )  )  ;", "assertThat ( sessionFactory (  )  . getMetamodel (  )  . entityPersister ( VersionedItem . class )  . getCacheAccessStrategy (  )  . getAccessType (  )  ,    equalTo ( READ _ WRITE )  )  ;", "assertThat ( sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Event . class )  . getCacheAccessStrategy (  )  . getAccessType (  )  ,    equalTo ( READ _ WRITE )  )  ;", "assertThat ( sessionFactory (  )  . getMetamodel (  )  . collectionPersister (  (  ( Event . class . getName (  )  )     +     \"  . participants \"  )  )  . getCacheAccessStrategy (  )  . getAccessType (  )  ,    equalTo ( READ _ WRITE )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicUsage"], "fileName": "org.hibernate.jcache.test.DomainDataRegionTest"}, {"methodBody": ["METHOD_START", "{", "serviceRegistry    =    TestHelper . getStandardServiceRegistryBuilder (  )  . applySetting ( CACHE _ REGION _ PREFIX ,     \"  \"  )  . applySetting ( GENERATE _ STATISTICS ,     \" true \"  )  . build (  )  ;", "final   Metadata   metadata    =    new   MetadataSources ( serviceRegistry )  . addAnnotatedClass (  . CacheableItem . class )  . buildMetadata (  )  ;", "TestHelper . createRegions ( metadata ,    true ,    false )  ;", "sessionFactory    =     (  ( SessionFactoryImplementor )     ( metadata . buildSessionFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["acquireResources"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sessionFactory )     !  =    null )     {", "sessionFactory . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseResources"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "return   sessionFactory ;", "}", "METHOD_END"], "methodName": ["sessionFactory"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "}  )  ;", "assertTrue ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "s . createQuery (  \" delete   CacheableItem \"  )  . executeUpdate (  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "item . setName (  \" new   data \"  )  ;", "}  )  ;", "assertTrue ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >    s . createQuery (  \" delete   CacheableItem \"  )  . executeUpdate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertThenUpdate"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "item . setName (  \" new   data \"  )  ;", "s . getTransaction (  )  . markRollbackOnly (  )  ;", "}  )  ;", "assertFalse ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertThenUpdateThenRollback"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "s . clear (  )  ;", "}  )  ;", "assertTrue ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >    s . createQuery (  \" delete   CacheableItem \"  )  . executeUpdate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithClear"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "s . clear (  )  ;", "item    =    s . get (  . class ,    item . getId (  )  )  ;", "s . getTransaction (  )  . markRollbackOnly (  )  ;", "}  )  ;", "assertFalse ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "final   CacheableItem   item    =    s . get (  . class ,     1 L )  ;", "assertNull (  \" it   should   be   null \"  ,    item )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithClearThenRollback"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "s . refresh ( item )  ;", "}  )  ;", "assertTrue ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >    s . createQuery (  \" delete   CacheableItem \"  )  . executeUpdate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithRefresh"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "s . refresh ( item )  ;", "s . getTransaction (  )  . markRollbackOnly (  )  ;", "}  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "final   DomainDataRegionTemplate   region    =     (  ( DomainDataRegionTemplate )     ( sessionFactory (  )  . getCache (  )  . getRegion (  \" item \"  )  )  )  ;", "final   Object   fromCache    =    region . getCacheStorageAccess (  )  . getFromCache ( region . getEffectiveKeysFactory (  )  . createEntityKey (  1 L ,    sessionFactory (  )  . getMetamodel (  )  . entityPersister (  . class )  ,    sessionFactory (  )  ,    null )  ,    s )  ;", "assertNotNull ( fromCache )  ;", "ExtraAssertions . assertTyping (  . class ,    fromCache )  ;", "}  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    s . get (  . class ,     1 L )  ;", "assertNull (  \" it   should   be   null \"  ,    item )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithRefreshThenRollback"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "sessionFactory (  )  . getCache (  )  . evictEntityRegions (  )  ;", "sessionFactory (  )  . getStatistics (  )  . clear (  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "CacheableItem   item    =    new   CacheableItem (  \" data \"  )  ;", "s . save ( item )  ;", "s . flush (  )  ;", "s . getTransaction (  )  . markRollbackOnly (  )  ;", "}  )  ;", "assertFalse ( sessionFactory (  )  . getCache (  )  . containsEntity (  . CacheableItem . class ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithRollback"], "fileName": "org.hibernate.jcache.test.InsertedDataTest"}, {"methodBody": ["METHOD_START", "{", "final   StandardServiceRegistryBuilder   ssrb    =    new   StandardServiceRegistryBuilder (  )  . configure (  \" hibernate - config / hibernate . cfg . xml \"  )  ;", "if    ( H 2 Dialect . class . equals ( Dialect . getDialect (  )  . getClass (  )  )  )     {", "ssrb . applySetting ( URL ,     \" jdbc : h 2  : mem : db - mvcc ; MVCC = true \"  )  ;", "}", "ssrb . applySetting ( GENERATE _ STATISTICS ,     \" true \"  )  ;", "serviceRegistry    =    ssrb . configure (  \" hibernate - config / hibernate . cfg . xml \"  )  . applySetting ( HBM 2 DDL _ DATABASE _ ACTION ,    CREATE )  . build (  )  ;", "final   MetadataSources   metadataSources    =    new   MetadataSources ( serviceRegistry )  ;", "metadataSources . addAnnotatedClass (  . ReadWriteCacheableItem . class )  ;", "metadataSources . addAnnotatedClass (  . ReadWriteVersionedCacheableItem . class )  ;", "metadataSources . addAnnotatedClass (  . NonStrictReadWriteCacheableItem . class )  ;", "metadataSources . addAnnotatedClass (  . NonStrictReadWriteVersionedCacheableItem . class )  ;", "final   Metadata   metadata    =    metadataSources . buildMetadata (  )  ;", "TestHelper . createRegions ( metadata ,    true )  ;", "sessionFactory    =     (  ( SessionFactoryImplementor )     ( metadata . buildSessionFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["acquireResources"], "fileName": "org.hibernate.jcache.test.RefreshUpdatedDataTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sessionFactory )     !  =    null )     {", "sessionFactory . close (  )  ;", "}", "if    (  ( serviceRegistry )     !  =    null )     {", "StandardServiceRegistryBuilder . droy ( serviceRegistry )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseResources"], "fileName": "org.hibernate.jcache.test.RefreshUpdatedDataTest"}, {"methodBody": ["METHOD_START", "{", "final   String   BEFORE    =     \" before \"  ;", "inTransaction ( sessionFactory ,     (    session )     -  >     {", "ReadWriteCacheableItem   readWriteCacheableItem    =    new   ReadWriteCacheableItem ( BEFORE )  ;", "readWriteCacheableItem . getTags (  )  . add (  \" H \"  )  ;", "readWriteCacheableItem . getTags (  )  . add (  \" ORM \"  )  ;", "session . persist ( readWriteCacheableItem )  ;", "ReadWriteVersionedCacheableItem   readWriteVersionedCacheableItem    =    new   ReadWriteVersionedCacheableItem ( BEFORE )  ;", "readWriteVersionedCacheableItem . getTags (  )  . add (  \" H \"  )  ;", "readWriteVersionedCacheableItem . getTags (  )  . add (  \" ORM \"  )  ;", "session . persist ( readWriteVersionedCacheableItem )  ;", "NonStrictReadWriteCacheableItem   nonStrictReadWriteCacheableItem    =    new   NonStrictReadWriteCacheableItem ( BEFORE )  ;", "nonStrictReadWriteCacheableItem . getTags (  )  . add (  \" H \"  )  ;", "nonStrictReadWriteCacheableItem . getTags (  )  . add (  \" ORM \"  )  ;", "session . persist ( nonStrictReadWriteCacheableItem )  ;", "NonStrictReadWriteVersionedCacheableItem   nonStrictReadWriteVersionedCacheableItem    =    new   NonStrictReadWriteVersionedCacheableItem ( BEFORE )  ;", "nonStrictReadWriteVersionedCacheableItem . getTags (  )  . add (  \" H \"  )  ;", "nonStrictReadWriteVersionedCacheableItem . getTags (  )  . add (  \" ORM \"  )  ;", "session . persist ( nonStrictReadWriteVersionedCacheableItem )  ;", "}  )  ;", "inTransaction ( sessionFactory ,     (    s 1  )     -  >     {", "final   String   AFTER    =     \" after \"  ;", "ReadWriteCacheableItem   readWriteCacheableItem 1     =    s 1  . get (  . class ,     1 L )  ;", "readWriteCacheableItem 1  . setName ( AFTER )  ;", "readWriteCacheableItem 1  . getTags (  )  . remove (  \" ORM \"  )  ;", "ReadWriteVersionedCacheableItem   readWriteVersionedCacheableItem 1     =    s 1  . get (  . class ,     1 L )  ;", "readWriteVersionedCacheableItem 1  . setName ( AFTER )  ;", "readWriteVersionedCacheableItem 1  . getTags (  )  . remove (  \" ORM \"  )  ;", "NonStrictReadWriteCacheableItem   nonStrictReadWriteCacheableItem 1     =    s 1  . get (  . class ,     1 L )  ;", "nonStrictReadWriteCacheableItem 1  . setName ( AFTER )  ;", "nonStrictReadWriteCacheableItem 1  . getTags (  )  . remove (  \" ORM \"  )  ;", "NonStrictReadWriteVersionedCacheableItem   nonStrictReadWriteVersionedCacheableItem 1     =    s 1  . get (  . class ,     1 L )  ;", "nonStrictReadWriteVersionedCacheableItem 1  . setName ( AFTER )  ;", "nonStrictReadWriteVersionedCacheableItem 1  . getTags (  )  . remove (  \" ORM \"  )  ;", "s 1  . flush (  )  ;", "s 1  . refresh ( readWriteCacheableItem 1  )  ;", "s 1  . refresh ( readWriteVersionedCacheableItem 1  )  ;", "s 1  . refresh ( nonStrictReadWriteCacheableItem 1  )  ;", "s 1  . refresh ( nonStrictReadWriteVersionedCacheableItem 1  )  ;", "assertEquals ( AFTER ,    readWriteCacheableItem 1  . getName (  )  )  ;", "assertEquals (  1  ,    readWriteCacheableItem 1  . getTags (  )  . size (  )  )  ;", "assertEquals ( AFTER ,    readWriteVersionedCacheableItem 1  . getName (  )  )  ;", "assertEquals (  1  ,    readWriteVersionedCacheableItem 1  . getTags (  )  . size (  )  )  ;", "assertEquals ( AFTER ,    nonStrictReadWriteCacheableItem 1  . getName (  )  )  ;", "assertEquals (  1  ,    nonStrictReadWriteCacheableItem 1  . getTags (  )  . size (  )  )  ;", "assertEquals ( AFTER ,    nonStrictReadWriteVersionedCacheableItem 1  . getName (  )  )  ;", "assertEquals (  1  ,    nonStrictReadWriteVersionedCacheableItem 1  . getTags (  )  . size (  )  )  ;", "inTransaction ( sessionFactory ,     (    s 2  )     -  >     {", "ReadWriteCacheableItem   readWriteCacheableItem 2     =    s 2  . get (  . class ,     1 L )  ;", "ReadWriteVersionedCacheableItem   readWriteVersionedCacheableItem 2     =    s 2  . get (  . class ,     1 L )  ;", "NonStrictReadWriteCacheableItem   nonStrictReadWriteCacheableItem 2     =    s 2  . get (  . class ,     1 L )  ;", "NonStrictReadWriteVersionedCacheableItem   nonStrictReadWriteVersionedCacheableItem 2     =    s 2  . get (  . class ,     1 L )  ;", "assertEquals ( BEFORE ,    readWriteCacheableItem 2  . getName (  )  )  ;", "assertEquals (  2  ,    readWriteCacheableItem 2  . getTags (  )  . size (  )  )  ;", "assertEquals ( BEFORE ,    readWriteVersionedCacheableItem 2  . getName (  )  )  ;", "assertEquals (  2  ,    readWriteVersionedCacheableItem 2  . getTags (  )  . size (  )  )  ;", "assertEquals ( AFTER ,    nonStrictReadWriteCacheableItem 2  . getName (  )  )  ;", "assertEquals (  1  ,    nonStrictReadWriteCacheableItem 2  . getTags (  )  . size (  )  )  ;", "assertEquals ( AFTER ,    nonStrictReadWriteVersionedCacheableItem 2  . getName (  )  )  ;", "assertEquals (  1  ,    nonStrictReadWriteVersionedCacheableItem 2  . getTags (  )  . size (  )  )  ;", "}  )  ;", "}  )  ;", "inTransaction ( sessionFactory ,     (    s )     -  >     {", "s . delete ( s . getReference (  . class ,     1 L )  )  ;", "s . delete ( s . getReference (  . class ,     1 L )  )  ;", "s . delete ( s . getReference (  . class ,     1 L )  )  ;", "s . delete ( s . getReference (  . class ,     1 L )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateAndFlushThenRefresh"], "fileName": "org.hibernate.jcache.test.RefreshUpdatedDataTest"}, {"methodBody": ["METHOD_START", "{", "try    ( final   SessionFactoryImplementor   sessionFactory    =    TestHelper . buildStandardSessionFactory ( true )  )     {", "final   Region   region    =    sessionFactory . getCache (  )  . getRegion ( TestHelper . entityRegionNames [  0  ]  )  ;", "final   JCacheAccessImpl   access    =     (  ( JCacheAccessImpl )     (  (  ( DomainDataRegionTemplate )     ( region )  )  . getCache (  )  )  )  ;", "final   Cache   jcache    =    access . getUnderlyingCache (  )  ;", "inSession ( sessionFactory ,     (    s )     -  >     {", "access . putIntoCache (  \" key \"  ,     \" value \"  ,    s )  ;", "assertThat ( jcache . get (  \" key \"  )  ,    equalTo (  \" value \"  )  )  ;", "assertThat ( access . getFromCache (  \" key \"  ,    s )  ,    equalTo (  \" value \"  )  )  ;", "access . removeFromCache (  \" key \"  ,    s )  ;", "assertThat ( jcache . get (  \" key \"  )  ,    nullValue (  )  )  ;", "assertThat ( access . getFromCache (  \" key \"  ,    s )  ,    nullValue (  )  )  ;", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBasicStorageAccessUse"], "fileName": "org.hibernate.jcache.test.StorageAccessTests"}, {"methodBody": ["METHOD_START", "{", "try    ( SessionFactoryImplementor   sessionFactory    =    TestHelper . buildStandardSessionFactory ( true )  )     {", "}", "TestHelper . visitAllRegions (  (        -  >     {", "if    (  =  =    null )     {", "return ;", "}", "if    ( isClosed (  )  )     {", "return ;", "}", "fail (  \" Cache   was   not   closed    \"  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testCachesReleasedOnSessionFactoryClose"], "fileName": "org.hibernate.jcache.test.StorageAccessTests"}, {"methodBody": ["METHOD_START", "{", "final   CacheManager   cacheManager    =    JCacheHelper . locateStandardCacheManager (  )  ;", "assertThat ( cacheManager . getCache (  . NON _ CACHE _ NAME )  ,    nullValue (  )  )  ;", "try    ( SessionFactoryImplementor   sessionFactory    =    TestHelper . buildStandardSessionFactory ( false )  )     {", "fail (  )  ;", "}    catch    ( ServiceException   expected )     {", "assertTyping ( CacheException . class ,    expected . getCause (  )  )  ;", "assertThat ( expected . getMessage (  )  ,    CoreMatchers . equalTo (  (  (  \" Unable   to   create   requested   service    [  \"     +     ( CacheImplementor . class . getName (  )  )  )     +     \"  ]  \"  )  )  )  ;", "assertThat ( expected . getCause (  )  . getMessage (  )  ,    CoreMatchers . startsWith (  \" On - the - fly   creation   of   JCache   Cache   objects   is   not   supported \"  )  )  ;", "}    catch    ( CacheException   expected )     {", "assertThat ( expected . getMessage (  )  ,    CoreMatchers . equalTo (  \" On - the - fly   creation   of   JCache   Cache   objects   is   not   supported \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testOnTheFlyCreationDisallowed"], "fileName": "org.hibernate.jcache.test.StorageAccessTests"}, {"methodBody": ["METHOD_START", "{", "SessionFactoryImplementor   sessionFactory    =    TestHelper . buildStandardSessionFactory ( true )  ;", "sessionFactory . close (  )  ;", "}", "METHOD_END"], "methodName": ["testPreDefinedCachesAllowed"], "fileName": "org.hibernate.jcache.test.StorageAccessTests"}, {"methodBody": ["METHOD_START", "{", "return   TestHelper . buildStandardSessionFactory ( preBuildCaches ,    true )  ;", "}", "METHOD_END"], "methodName": ["buildStandardSessionFactory"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( preBuildCaches )     {", "final   CacheManager   cacheManager    =    JCacheHelper . locateStandardCacheManager (  )  ;", "for    ( String   regionName    :    TestHelper . entityRegionNames )     {", "TestHelper . createCache ( cacheManager ,    regionName ,    prefixCaches )  ;", "}", "for    ( String   regionName    :    TestHelper . collectionRegionNames )     {", "TestHelper . createCache ( cacheManager ,    regionName ,    prefixCaches )  ;", "}", "TestHelper . createCache ( cacheManager ,    TimestampsRegion . class . getName (  )  ,    prefixCaches )  ;", "TestHelper . createCache ( cacheManager ,    QueryResultsRegion . class . getName (  )  ,    prefixCaches )  ;", "}", "final   StandardServiceRegistryBuilder   ssrb    =    TestHelper . getStandardServiceRegistryBuilder (  )  ;", "final   StandardServiceRegistry   ssr    =    ssrb . build (  )  ;", "return    (  ( SessionFactoryImplementor )     ( new   boot . MetadataSources ( ssr )  . buildMetadata (  )  . buildSessionFactory (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["buildStandardSessionFactory"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "TestHelper . createCache ( JCacheHelper . locateStandardCacheManager (  )  ,    name )  ;", "}", "METHOD_END"], "methodName": ["createCache"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "TestHelper . createCache ( cacheManager ,    name ,    true )  ;", "}", "METHOD_END"], "methodName": ["createCache"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( usePrefix )     {", "name    =    INSTANCE . qualify (  \" test \"  ,    name )  ;", "}", "if    (  ( cacheManager . getCache ( name )  )     !  =    null )     {", "cacheManager . destroyCache ( name )  ;", "}", "cacheManager . createCache ( name ,    new   MutableConfiguration (  )  )  ;", "}", "METHOD_END"], "methodName": ["createCache"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "TestHelper . createRegions ( metadata ,    queryRegions ,    true )  ;", "}", "METHOD_END"], "methodName": ["createRegions"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "Set < String >    names    =    new   HashSet <  >  (  )  ;", "final   CacheManager   cacheManager    =    JCacheHelper . locateStandardCacheManager (  )  ;", "for    ( PersistentClass   persistentClass    :    metadata . getEntityBindings (  )  )     {", "if    ( persistentClass . getRootClass (  )  . isCached (  )  )     {", "if    (  !  ( names . add ( persistentClass . getRootClass (  )  . getCacheRegionName (  )  )  )  )     {", "continue ;", "}", ". createCache ( cacheManager ,    persistentClass . getRootClass (  )  . getCacheRegionName (  )  ,    prefixRegions )  ;", "}", "if    ( persistentClass . hasNaturalId (  )  )     {", "if    (  ( persistentClass . getNaturalIdCacheRegionName (  )  )     !  =    null )     {", "if    (  !  ( names . add ( persistentClass . getNaturalIdCacheRegionName (  )  )  )  )     {", "continue ;", "}", ". createCache ( cacheManager ,    persistentClass . getNaturalIdCacheRegionName (  )  ,    prefixRegions )  ;", "}", "}", "}", "for    ( Collection   collection    :    metadata . getCollectionBindings (  )  )     {", "if    (  (  ( collection . getCacheRegionName (  )  )     =  =    null )     |  |     (  ( collection . getCacheConcurrencyStrategy (  )  )     =  =    null )  )     {", "continue ;", "}", "if    (  !  ( names . add ( collection . getCacheRegionName (  )  )  )  )     {", "continue ;", "}", ". createCache ( cacheManager ,    collection . getCacheRegionName (  )  ,    prefixRegions )  ;", "}", "if    ( queryRegions )     {", ". createCache ( cacheManager ,    TimestampsRegion . class . getName (  )  ,    prefixRegions )  ;", ". createCache ( cacheManager ,    QueryResultsRegion . class . getName (  )  ,    prefixRegions )  ;", "}", "}", "METHOD_END"], "methodName": ["createRegions"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "final   StandardServiceRegistryBuilder   ssrb    =    new   StandardServiceRegistryBuilder (  )  . configure (  \" hibernate - config / hibernate . cfg . xml \"  )  . applySetting ( GENERATE _ STATISTICS ,     \" true \"  )  . applySetting ( HBM 2 DDL _ DATABASE _ ACTION ,    CREATE )  . applySetting ( HBM 2 DDL _ AUTO ,     \" create - drop \"  )  ;", "if    ( H 2 Dialect . class . equals ( Dialect . getDialect (  )  . getClass (  )  )  )     {", "ssrb . applySetting ( URL ,     \" jdbc : h 2  : mem : db - mvcc ; MVCC = true \"  )  ;", "}", "return   ssrb ;", "}", "METHOD_END"], "methodName": ["getStandardServiceRegistryBuilder"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "final   CacheManager   cacheManager    =    JCacheHelper . locateStandardCacheManager (  )  ;", "for    ( String   regionName    :     . entityRegionNames )     {", "action . accept ( cacheManager . getCache ( regionName )  )  ;", "}", "for    ( String   regionName    :     . collectionRegionNames )     {", "action . accept ( cacheManager . getCache ( regionName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["visitAllRegions"], "fileName": "org.hibernate.jcache.test.TestHelper"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.Account"}, {"methodBody": ["METHOD_START", "{", "return   person ;", "}", "METHOD_END"], "methodName": ["getPerson"], "fileName": "org.hibernate.jcache.test.domain.Account"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.Account"}, {"methodBody": ["METHOD_START", "{", "this . person    =    person ;", "}", "METHOD_END"], "methodName": ["setPerson"], "fileName": "org.hibernate.jcache.test.domain.Account"}, {"methodBody": ["METHOD_START", "{", "return   super . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jcache.test.domain.Account"}, {"methodBody": ["METHOD_START", "{", "participants . add ( person )  ;", "person . gets (  )  . add ( this )  ;", "}", "METHOD_END"], "methodName": ["addParticipant"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return   date ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return   organizer ;", "}", "METHOD_END"], "methodName": ["getOrganizer"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return   participants ;", "}", "METHOD_END"], "methodName": ["getParticipants"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return   title ;", "}", "METHOD_END"], "methodName": ["getTitle"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "participants . remove ( person )  ;", "person . gets (  )  . remove ( this )  ;", "}", "METHOD_END"], "methodName": ["removeParticipant"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "this . date    =    date ;", "}", "METHOD_END"], "methodName": ["setDate"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "this . organizer    =    organizer ;", "}", "METHOD_END"], "methodName": ["setOrganizer"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "this . participants    =    participants ;", "}", "METHOD_END"], "methodName": ["setParticipants"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "this . title    =    title ;", "}", "METHOD_END"], "methodName": ["setTitle"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "return    (  ( getTitle (  )  )     +     \"  :     \"  )     +     ( getDate (  )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jcache.test.domain.Event"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   aPerson    =     (  ( Person )     ( session . load ( Person . class ,    personId )  )  )  ;", "aPerson . getEmailAddresses (  )  . add ( emailAddress )  ;", "session . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["addEmailToPerson"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   aPerson    =     (  ( Person )     ( session . load ( Person . class ,    personId )  )  )  ;", "account . setPerson ( aPerson )  ;", "Long   accountId    =     (  ( Long )     ( session . save ( account )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   accountId ;", "}", "METHOD_END"], "methodName": ["addPersonToAccount"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   aPerson    =     (  ( Person )     ( session . load ( Person . class ,    personId )  )  )  ;", "an    =     (  (  )     ( session . load (  . class ,    eventId )  )  )  ;", "aPerson . gets (  )  . add ( an )  ;", "session . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["addPersonToEvent"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   aPerson    =     (  ( Person )     ( session . load ( Person . class ,    personId )  )  )  ;", "pN . setPersonId ( personId . longValue (  )  )  ;", "aPerson . getPhoneNumbers (  )  . add ( pN )  ;", "session . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["addPhoneNumberToPerson"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   aPerson    =     (  ( Person )     ( session . load ( Person . class ,    personId )  )  )  ;", "aPerson . addTalisman ( talisman )  ;", "session . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["addTalismanToPerson"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "the    =    new    (  )  ;", "the . setTitle ( title )  ;", "the . setDate ( theDate )  ;", "the . setOrganizer ( organizer )  ;", "Long   eventId    =     (  ( Long )     ( session . save ( the )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   eventId ;", "}", "METHOD_END"], "methodName": ["createAndStoreEvent"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Person   person    =    new   Person (  )  ;", "person . setFirstname ( firstName )  ;", "person . setLastname ( lastName )  ;", "Long   personId    =     (  ( Long )     ( session . save ( person )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   personId ;", "}", "METHOD_END"], "methodName": ["createAndStorePerson"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Long   personId    =     (  ( Long )     ( session . save ( person )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   personId ;", "}", "METHOD_END"], "methodName": ["createAndStorePerson"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "List   calendars    =    session . createQuery (  \" from   HolidayCalendar \"  )  . setCable ( true )  . list (  )  ;", "for    ( ListIterator   li    =    calendars . listIterator (  )  ;    li . hasNext (  )  ;  )     {", "session . delete ( li . next (  )  )  ;", "}", "HolidayCalendar   calendar    =    new   HolidayCalendar (  )  ;", "calendar . init (  )  ;", "Long   calendarId    =     (  ( Long )     ( session . save ( calendar )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   calendarId ;", "}", "METHOD_END"], "methodName": ["createHolidayCalendar"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Account   account    =     (  ( Account )     ( session . load ( Account . class ,    accountId )  )  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   account ;", "}", "METHOD_END"], "methodName": ["getAccount"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "List   calendars    =    session . createQuery (  \" from   HolidayCalendar \"  )  . setCable ( true )  . list (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   calendars . isEmpty (  )     ?    null    :     (  ( HolidayCalendar )     ( calendars . get (  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHolidayCalendar"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "List   emailList    =    new   ArrayList (  )  ;", "event    =     (  (  )     ( session . load (  . class ,    eventId )  )  )  ;", "for    ( Iterator   it    =    event . getParticipants (  )  . iterator (  )  ;    it . hasNext (  )  ;  )     {", "Person   person    =     (  ( Person )     ( it . next (  )  )  )  ;", "emailList . addAll ( person . getEmailAddresses (  )  )  ;", "}", "session . getTransaction (  )  . commit (  )  ;", "return   emailList ;", "}", "METHOD_END"], "methodName": ["listEmailsOfEvent"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "List   result    =    session . createQuery (  \" from    \"  )  . setCacheable ( true )  . list (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["listEvents"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "Query   query    =    session . createQuery (  \" from      ev   where   ev . organizer    =     : organizer \"  )  ;", "query . setCacheable ( true )  ;", "query . setEntity (  \" organizer \"  ,    organizer )  ;", "List   result    =    query . list (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["listEventsOfOrganizer"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    sessionFactory . getCurrentSession (  )  ;", "session . beginTransaction (  )  ;", "List   result    =    session . createCriteria (  . class )  . setCacheable ( true )  . list (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["listEventsWithCriteria"], "fileName": "org.hibernate.jcache.test.domain.EventManager"}, {"methodBody": ["METHOD_START", "{", "holidays . put ( d ,    name )  ;", "}", "METHOD_END"], "methodName": ["addHoliday"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( holidays . get ( d )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHoliday"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "return   holidays ;", "}", "METHOD_END"], "methodName": ["getHolidays"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "DateFormat   df    =    new   SimpleDateFormat (  \" yyyy . MM . dd \"  )  ;", "try    {", "hs . clear (  )  ;", "hs . put ( df . parse (  \"  2  0  0  9  .  0  1  .  0  1  \"  )  ,     \" New   Year ' s   Day \"  )  ;", "hs . put ( df . parse (  \"  2  0  0  9  .  0  2  .  1  4  \"  )  ,     \" Valentine ' s   Day \"  )  ;", "hs . put ( df . parse (  \"  2  0  0  9  .  1  1  .  1  1  \"  )  ,     \" Armistice   Day \"  )  ;", "}    catch    ( ParseException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "return   holidays . containsKey ( d )  ;", "}", "METHOD_END"], "methodName": ["isHoliday"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "this . holidays    =    holidays ;", "}", "METHOD_END"], "methodName": ["setHolidays"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.HolidayCalendar"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jcache.test.domain.Item"}, {"methodBody": ["METHOD_START", "{", "talismans . add ( name )  ;", "}", "METHOD_END"], "methodName": ["addTalisman"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . getEvents (  )  . add ( event )  ;", "event . getParticipants (  )  . add ( this )  ;", "}", "METHOD_END"], "methodName": ["addToEvent"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   emailAddresses ;", "}", "METHOD_END"], "methodName": ["getEmailAddresses"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   events ;", "}", "METHOD_END"], "methodName": ["getEvents"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   firstname ;", "}", "METHOD_END"], "methodName": ["getFirstname"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   lastname ;", "}", "METHOD_END"], "methodName": ["getLastname"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   phoneNumbers ;", "}", "METHOD_END"], "methodName": ["getPhoneNumbers"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return   talismans ;", "}", "METHOD_END"], "methodName": ["getTalismans"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . getEvents (  )  . remove ( event )  ;", "event . getParticipants (  )  . remove ( this )  ;", "}", "METHOD_END"], "methodName": ["removeFromEvent"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . emailAddresses    =    emailAddresses ;", "}", "METHOD_END"], "methodName": ["setEmailAddresses"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . events    =    events ;", "}", "METHOD_END"], "methodName": ["setEvents"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . firstname    =    firstname ;", "}", "METHOD_END"], "methodName": ["setFirstname"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . lastname    =    lastname ;", "}", "METHOD_END"], "methodName": ["setLastname"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . phoneNumbers    =    phoneNumbers ;", "}", "METHOD_END"], "methodName": ["setPhoneNumbers"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "this . talismans    =    talismans ;", "}", "METHOD_END"], "methodName": ["setTalismans"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "return    (  ( getFirstname (  )  )     +     \"     \"  )     +     ( getLastname (  )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jcache.test.domain.Person"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    obj )", "return   true ;", "if    ( obj    =  =    null )", "return   false ;", "if    (  ( getClass (  )  )     !  =     ( obj . getClass (  )  )  )", "return   false ;", "final      other    =     (  (  )     ( obj )  )  ;", "if    (  ( numberType )     =  =    null )     {", "if    (  ( other . numberType )     !  =    null )", "return   false ;", "} else", "if    (  !  ( numberType . equals ( other . numberType )  )  )", "return   false ;", "if    (  ( personId )     !  =     ( other . personId )  )", "return   false ;", "if    (  ( phone )     !  =     ( other . phone )  )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "return   numberType ;", "}", "METHOD_END"], "methodName": ["getNumberType"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "return   personId ;", "}", "METHOD_END"], "methodName": ["getPersonId"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "return   phone ;", "}", "METHOD_END"], "methodName": ["getPhone"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "final   int   prime    =     3  1  ;", "int   result    =     1  ;", "result    =     ( prime    *    result )     +     (  ( nType )     =  =    null    ?     0     :    nType . hashCode (  )  )  ;", "result    =     ( prime    *    result )     +     (  ( int )     (  ( personId )     ^     (  ( personId )     >  >  >     3  2  )  )  )  ;", "result    =     ( prime    *    result )     +     (  ( int )     (  ( phone )     ^     (  ( phone )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "this . numberType    =    numberType ;", "}", "METHOD_END"], "methodName": ["setNumberType"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "this . personId    =    personId ;", "}", "METHOD_END"], "methodName": ["setPersonId"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "this . phone    =    phone ;", "}", "METHOD_END"], "methodName": ["setPhone"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "return    (  ( numberType )     +     \"  :  \"  )     +     ( phone )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.jcache.test.domain.PhoneNumber"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.jcache.test.domain.UuidItem"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.jcache.test.domain.VersionedItem"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.hibernate.jcache.test.domain.VersionedItem"}, {"methodBody": ["METHOD_START", "{", "EventManager   mgr    =    new   EventManager ( sessionFactory (  )  )  ;", "Statistics   stats    =    sessionFactory (  )  . getStatistics (  )  ;", "Person   stevePerson    =    new   Person (  )  ;", "stevePerson . setFirstname (  \" Steve \"  )  ;", "stevePerson . setLastname (  \" Harris \"  )  ;", "Long   steveId    =    mgr . createAndStorePerson ( stevePerson )  ;", "mgr . addEmailToPerson ( steveId ,     \" steve @ tc . com \"  )  ;", "mgr . addEmailToPerson ( steveId ,     \" sharrif @ tc . com \"  )  ;", "mgr . addTalismanToPerson ( steveId ,     \" rabbit   foot \"  )  ;", "mgr . addTalismanToPerson ( steveId ,     \" john   de   conqueroo \"  )  ;", "PhoneNumber   p 1     =    new   PhoneNumber (  )  ;", "p 1  . setNumberType (  \" Office \"  )  ;", "p 1  . setPhone (  1  1  1  1  1  1  )  ;", "mgr . addPhoneNumberToPerson ( steveId ,    p 1  )  ;", "PhoneNumber   p 2     =    new   PhoneNumber (  )  ;", "p 2  . setNumberType (  \" Home \"  )  ;", "p 2  . setPhone (  2  2  2  2  2  2  )  ;", "mgr . addPhoneNumberToPerson ( steveId ,    p 2  )  ;", "Person   orionPerson    =    new   Person (  )  ;", "orionPerson . setFirstname (  \" Orion \"  )  ;", "orionPerson . setLastname (  \" Letizi \"  )  ;", "Long   orionId    =    mgr . createAndStorePerson ( orionPerson )  ;", "mgr . addEmailToPerson ( orionId ,     \" orion @ tc . com \"  )  ;", "mgr . addTalismanToPerson ( orionId ,     \" voodoo   doll \"  )  ;", "Long   timId    =    mgr . createAndStorePerson (  \" Tim \"  ,     \" Teck \"  )  ;", "mgr . addEmailToPerson ( timId ,     \" teck @ tc . com \"  )  ;", "mgr . addTalismanToPerson ( timId ,     \" magic   decoder   ring \"  )  ;", "Long   engMeetingId    =    mgr . createAndStoreEvent (  \" Eng   Meeting \"  ,    stevePerson ,    new   Date (  )  )  ;", "mgr . addPersonToEvent ( steveId ,    engMeetingId )  ;", "mgr . addPersonToEvent ( orionId ,    engMeetingId )  ;", "mgr . addPersonToEvent ( timId ,    engMeetingId )  ;", "Long   docMeetingId    =    mgr . createAndStoreEvent (  \" Doc   Meeting \"  ,    orionPerson ,    new   Date (  )  )  ;", "mgr . addPersonToEvent ( steveId ,    docMeetingId )  ;", "mgr . addPersonToEvent ( orionId ,    docMeetingId )  ;", "for    ( Event   event    :     (  ( List < Event >  )     ( mgr . listEvents (  )  )  )  )     {", "mgr . listEmailsOfEvent ( event . getId (  )  )  ;", "}", "QueryStatistics   queryStats    =    stats . getQueryStatistics (  \" from   Event \"  )  ;", "assertThat (  \"    Miss   Count \"  ,    queryStats . getMissCount (  )  ,    equalTo (  1 L )  )  ;", "assertThat (  \"    Hit   Count \"  ,    queryStats . getHitCount (  )  ,    equalTo (  0 L )  )  ;", "assertThat (  \"    Put   Count \"  ,    queryStats . getPutCount (  )  ,    equalTo (  1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testGeneralUsage"], "fileName": "org.hibernate.test.cache.jcache.HibernateCacheTest"}, {"methodBody": ["METHOD_START", "{", "Session   s    =    sessionFactory (  )  . openSession (  )  ;", "Transaction   t    =    s . beginTransaction (  )  ;", "Item   i    =    new   Item (  )  ;", "i . setName (  \" widget \"  )  ;", "i . setDescription (  \" A   really   top - quality ,    full - featured   widget .  \"  )  ;", "s . persist ( i )  ;", "t . commit (  )  ;", "s . close (  )  ;", "RegionStatistics   slcs    =    sessionFactory (  )  . getStatistics (  )  . getDomainDataRegionStatistics ( Item . class . getName (  )  )  ;", "assertThat ( slcs . getPutCount (  )  ,    equalTo (  1 L )  )  ;", "assertTrue ( sessionFactory (  )  . get (  )  . containsEntity ( Item . class ,    i . getId (  )  )  )  ;", "s    =    sessionFactory (  )  . openSession (  )  ;", "t    =    s . beginTransaction (  )  ;", "i    =     (  ( Item )     ( s . get ( Item . class ,    i . getId (  )  )  )  )  ;", "assertThat ( slcs . getHitCount (  )  ,    equalTo (  1 L )  )  ;", "assertThat ( slcs . getMissCount (  )  ,    equalTo (  0 L )  )  ;", "i . setDescription (  \" A   bog   standard   item \"  )  ;", "t . commit (  )  ;", "s . close (  )  ;", "assertThat ( slcs . getPutCount (  )  ,    equalTo (  2 L )  )  ;", "assertTrue ( sessionFactory (  )  . get (  )  . containsEntity ( Item . class ,    i . getId (  )  )  )  ;", "final   DomainDataRegionTemplate   region    =     (  ( DomainDataRegionTemplate )     ( sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Item . class )  . getAccessStrategy (  )  . getRegion (  )  )  )  ;", "final   Object   from    =    region . getStorageAccess (  )  . getFrom ( region . getEffectiveKeysFactory (  )  . createEntityKey ( i . getId (  )  ,    sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Item . class )  ,    sessionFactory (  )  ,    null )  ,     (  ( SharedSessionContractImplementor )     ( s )  )  )  ;", "assertNotNull ( from )  ;", "ExtraAssertions . assertTyping ( Item . class ,    from )  ;", "s    =    sessionFactory (  )  . openSession (  )  ;", "t    =    s . beginTransaction (  )  ;", "s . delete ( i )  ;", "t . commit (  )  ;", "s . close (  )  ;", "}", "METHOD_END"], "methodName": ["testQueryCacheInvalidation"], "fileName": "org.hibernate.test.cache.jcache.HibernateCacheTest"}, {"methodBody": ["METHOD_START", "{", "Session   s    =    sessionFactory (  )  . openSession (  )  ;", "Transaction   txn    =    s . beginTransaction (  )  ;", "VersionedItem   item    =    new   VersionedItem (  )  ;", "item . setName (  \" steve \"  )  ;", "item . setDescription (  \" steve ' s   item \"  )  ;", "s . save ( item )  ;", "txn . commit (  )  ;", "s . close (  )  ;", "Long   initialVersion    =    item . getVersion (  )  ;", "item . setVersion (  (  ( item . getVersion (  )  )     -     1  )  )  ;", "try    {", "s    =    sessionFactory (  )  . openSession (  )  ;", "txn    =    s . beginTransaction (  )  ;", "s . update ( item )  ;", "txn . commit (  )  ;", "s . close (  )  ;", "fail (  \" expected   stale   write   to   fail \"  )  ;", "}    catch    ( Throwable   expected )     {", "if    ( txn    !  =    null )     {", "try    {", "txn . rollback (  )  ;", "}    catch    ( Throwable   ignore )     {", "}", "}", "}    finally    {", "if    (  ( s    !  =    null )     &  &     ( s . isOpen (  )  )  )     {", "try    {", "s . close (  )  ;", "}    catch    ( Throwable   ignore )     {", "}", "}", "}", "final   DomainDataRegionTemplate   region    =     (  ( DomainDataRegionTemplate )     ( sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Item . class )  . getAccessStrategy (  )  . getRegion (  )  )  )  ;", "final   Object   from    =    region . getStorageAccess (  )  . getFrom ( region . getEffectiveKeysFactory (  )  . createEntityKey ( item . getId (  )  ,    sessionFactory (  )  . getMetamodel (  )  . entityPersister ( Item . class )  ,    sessionFactory (  )  ,    null )  ,     (  ( SharedSessionContractImplementor )     ( s )  )  )  ;", "assertTrue (  (  ( from    =  =    null )     |  |     ( from   instanceof   SoftLock )  )  )  ;", "s    =    sessionFactory (  )  . openSession (  )  ;", "txn    =    s . beginTransaction (  )  ;", "item    =    s . load ( VersionedItem . class ,    item . getId (  )  )  ;", "s . delete ( item )  ;", "txn . commit (  )  ;", "s . close (  )  ;", "}", "METHOD_END"], "methodName": ["testStaleWritesLeaveCacheConsistent"], "fileName": "org.hibernate.test.cache.jcache.HibernateCacheTest"}]