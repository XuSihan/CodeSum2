[{"methodBody": ["METHOD_START", "{", "ViburDBCPConnectionProviderTest . Actor   actor    =    new   ViburDBCPConnectionProviderTest . Actor (  )  ;", "actor . setFirstName ( firstName )  ;", "actor . setLastName ( lastName )  ;", "session . persist ( actor )  ;", "}", "METHOD_END"], "methodName": ["addDbRecord"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "List < ViburDBCPConnectionProviderTest . Actor >    list    =    session . createQuery (  \" from   Actor   where   firstName    =     ?  0  \"  )  . setParameter (  0  ,     \" CHRISTIAN \"  )  . list (  )  ;", "Set < String >    expectedLastNames    =    new   HashSet <  >  ( Arrays . asList (  \" GABLE \"  ,     \" AKROYD \"  ,     \" NEESON \"  )  )  ;", "assertEquals ( expectedLastNames . size (  )  ,    list . size (  )  )  ;", "for    ( ViburDBCPConnectionProviderTest . Actor   actor    :    list )     {", "assertTrue ( expectedLastNames . remove ( actor . getLastName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeAndVerifySelect"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "this . poolMaxSize    =    poolMaxSize ;", "this . statementCacheMaxSize    =    statementCacheMaxSize ;", "buildSessionFactory (  )  ;", "doInH ( this :  : sessionFactory ,     (    session )     -  >     {", "addDbRecord ( session ,     \" CHRISTIAN \"  ,     \" GABLE \"  )  ;", "addDbRecord ( session ,     \" CHRISTIAN \"  ,     \" AKROYD \"  )  ;", "addDbRecord ( session ,     \" CHRISTIAN \"  ,     \" NEESON \"  )  ;", "addDbRecord ( session ,     \" CAMERON \"  ,     \" NEESON \"  )  ;", "addDbRecord ( session ,     \" RAY \"  ,     \" JOHANSSON \"  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["setUpPoolAndDatabase"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "releaseSessionFactory (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "setUpPoolAndDatabase (  2  ,     0  )  ;", "doInHibernate ( this :  : sessionFactory ,     :  : executeAndVerifySelect )  ;", "}", "METHOD_END"], "methodName": ["testSelectStatementNoStatementsCache"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "setUpPoolAndDatabase (  1  ,     1  0  )  ;", "ConnectionProvider   cp    =    sessionFactory (  )  . getServiceRegistry (  )  . getService ( ConnectionProvider . class )  ;", "ViburDBCPDataSource   ds    =     (  ( ViburDBCPConnectionProvider )     ( cp )  )  . getDataSource (  )  ;", "ConcurrentMap < StatementMethod ,    StatementHolder >    mockedStatementCache    =    AbstractDataSourceTest . mockStatementCache ( ds )  ;", "doInHibernate ( this :  : sessionFactory ,     :  : executeAndVerifySelect )  ;", "doInHibernate ( this :  : sessionFactory ,     :  : executeAndVerifySelect )  ;", "InOrder   inOrder    =    inOrder ( mockedStatementCache )  ;", "inOrder . verify ( mockedStatementCache )  . get ( key 1  . capture (  )  )  ;", "inOrder . verify ( mockedStatementCache )  . putIfAbsent ( same ( key 1  . getValue (  )  )  ,    val 1  . capture (  )  )  ;", "inOrder . verify ( mockedStatementCache )  . get ( key 2  . capture (  )  )  ;", "assertEquals (  1  ,    mockedStatementCache . size (  )  )  ;", "assertTrue ( mockedStatementCache . containsKey ( key 1  . getValue (  )  )  )  ;", "assertEquals ( key 1  . getValue (  )  ,    key 2  . getValue (  )  )  ;", "assertEquals ( State . AVAILABLE ,    val 1  . getValue (  )  . state (  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectStatementWithStatementsCache"], "fileName": "org.hibernate.test.vibur.ViburDBCPConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "return   dataSource ;", "}", "METHOD_END"], "methodName": ["getDataSource"], "fileName": "org.hibernate.vibur.internal.ViburDBCPConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "Properties   result    =    new   Properties (  )  ;", "String   driverClassName    =    configurationValues . get ( DRIVER )  ;", "if    ( driverClassName    !  =    null )     {", "result . setProperty (  \" driverClassName \"  ,    driverClassName )  ;", "}", "String   jdbcUrl    =    configurationValues . get ( URL )  ;", "if    ( jdbcUrl    !  =    null )     {", "result . setProperty (  \" jdbcUrl \"  ,    jdbcUrl )  ;", "}", "String   username    =    configurationValues . get ( USER )  ;", "if    ( username    !  =    null )     {", "result . setProperty (  \" username \"  ,    username )  ;", "}", "String   password    =    configurationValues . get ( PASS )  ;", "if    ( password    !  =    null )     {", "result . setProperty (  \" password \"  ,    password )  ;", "}", "String   defaultTransactionIsolationValue    =    configurationValues . get ( ISOLATION )  ;", "if    ( defaultTransactionIsolationValue    !  =    null )     {", "result . setProperty (  \" defaultTransactionIsolationValue \"  ,    defaultTransactionIsolationValue )  ;", "}", "String   defaultAutoCommit    =    configurationValues . get ( AUTOCOMMIT )  ;", "if    ( defaultAutoCommit    !  =    null )     {", "result . setProperty (  \" defaultAutoCommit \"  ,    defaultAutoCommit )  ;", "}", "for    ( Map . Entry < String ,    String >    entry    :    configurationValues . entrySet (  )  )     {", "String   key    =    entry . getKey (  )  ;", "if    ( key . startsWith (  . VIBUR _ PREFIX )  )     {", "key    =    key . substring (  . VIBUR _ PREFIX . length (  )  )  ;", "result . setProperty ( key ,    entry . getValue (  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.hibernate.vibur.internal.ViburDBCPConnectionProvider"}]