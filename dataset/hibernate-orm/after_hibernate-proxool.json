[{"methodBody": ["METHOD_START", "{", "stop (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.hibernate.proxool.internal.ProxoolConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "try    {", "Properties   properties    =    new   Properties (  )  ;", "properties . load ( classLoaderService . locateResourceStream ( resource )  )  ;", "return   properties ;", "}    catch    ( IOException   e )     {", "throw   new   HException (  (  \" Unable   to   load   properties   from   specified   config   file :     \"     +    resource )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getConfigProperties"], "fileName": "org.hibernate.proxool.internal.ProxoolConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "return   new   InputStreamReader ( classLoaderService . locateResourceStream ( resource )  )  ;", "}", "METHOD_END"], "methodName": ["getConfigStreamReader"], "fileName": "org.hibernate.proxool.internal.ProxoolConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "List < String >    aliases    =    Arrays . asList ( ProxoolFacade . getAliases (  )  )  ;", "assertEquals ( expectedPoolNames . length ,    aliases . size (  )  )  ;", "for    ( String   poolName    :    expectedPoolNames )     {", "assertTrue (  (  (  \" pool   named    \"     +    poolName )     +     \"    missing \"  )  ,    aliases . contains ( poolName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertDefinedPools"], "fileName": "org.hibernate.test.proxool.ProxoolConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "return   new   StandardServiceRegistryBuilder (  )  . applySetting ( PROXOOL _ POOL _ ALIAS ,    poolName )  . applySetting ( PROXOOL _ PROPERTIES ,     ( poolName    +     \"  . properties \"  )  )  . applySetting ( CONNECTION _ PROVIDER ,    ProxoolConnectionProvider . class . getName (  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildServiceRegistry"], "fileName": "org.hibernate.test.proxool.ProxoolConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "assertDefinedPools (  )  ;", "StandardServiceRegistry   serviceRegistry    =    buildServiceRegistry (  \" pool - one \"  )  ;", "providerOne    =    serviceRegistry . getService (  . class )  ;", "assertDefinedPools (  \" pool - one \"  )  ;", "StandardServiceRegistry   serviceRegistryTwo    =    buildServiceRegistry (  \" pool - two \"  )  ;", "providerTwo    =    serviceRegistryTwo . getService (  . class )  ;", "assertDefinedPools (  \" pool - one \"  ,     \" pool - two \"  )  ;", "StandardServiceRegistryBuilder . destroy ( serviceRegistry )  ;", "assertDefinedPools (  \" pool - two \"  )  ;", "StandardServiceRegistryBuilder . destroy ( serviceRegistryTwo )  ;", "assertDefinedPools (  )  ;", "}", "METHOD_END"], "methodName": ["testPoolsClosed"], "fileName": "org.hibernate.test.proxool.ProxoolConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "String   poolName    =     \" pool - one \"  ;", "perties    =    new   Properties (  )  ;", "perties . put ( PROXOOL _ POOL _ ALIAS ,    poolName )  ;", "perties . put ( PROXOOL _ PROPERTIES ,     ( poolName    +     \" perties \"  )  )  ;", "ssr    =    new   StandardServiceRegistryBuilder (  )  . applySettingsperties )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.hibernate.test.proxool.ProxoolTransactionIsolationConfigTest"}]