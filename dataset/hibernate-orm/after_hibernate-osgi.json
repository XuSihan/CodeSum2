[{"methodBody": ["METHOD_START", "{", "bundles . add ( bundle )  ;", "}", "METHOD_END"], "methodName": ["addBundle"], "fileName": "org.hibernate.osgi.OsgiClassLoader"}, {"methodBody": ["METHOD_START", "{", "classLoaders . add ( classLoader )  ;", "}", "METHOD_END"], "methodName": ["addClassLoader"], "fileName": "org.hibernate.osgi.OsgiClassLoader"}, {"methodBody": ["METHOD_START", "{", "final   Map   settings    =    new   HashMap (  )  ;", "if    ( properties    !  =    null )     {", "settings . putAll ( properties )  ;", "}", "settings . put ( JTA _ PLATFORM ,    osgiJtaPlatform )  ;", "final   Integrator [  ]    integrators    =    osgiServiceUtil . getServiceImpls ( Integrator . class )  ;", "final   Integrator   integrator    =    new   Integrator (  )     {", "@ Override", "public   List < Integrator >    getIntegrators (  )     {", "return   Arrays . asList ( integrators )  ;", "}", "}  ;", "settings . put ( INTEGRATOR _ PROVIDER ,    integrator )  ;", "final   StrategyRegistration [  ]    strategyRegistrations    =    osgiServiceUtil . getServiceImpls ( StrategyRegistration . class )  ;", "final   StrategyRegistrationList   strategyRegistrationList    =    new   StrategyRegistrationList (  )     {", "@ Override", "public   List < StrategyRegistration >    getStrategyRegistrations (  )     {", "return   Arrays . asList ( strategyRegistrations )  ;", "}", "}  ;", "settings . put ( STRATEGY _ REGISTRATION _ PROVIDERS ,    strategyRegistrationList )  ;", "final   TypeContributor [  ]    typeContributors    =    osgiServiceUtil . getServiceImpls ( TypeContributor . class )  ;", "final   TypeContributorList   typeContributorList    =    new   TypeContributorList (  )     {", "@ Override", "public   List < TypeContributor >    getTypeContributors (  )     {", "return   Arrays . asList ( typeContributors )  ;", "}", "}  ;", "settings . put ( TYPE _ CONTRIBUTORS ,    typeContributorList )  ;", "return   settings ;", "}", "METHOD_END"], "methodName": ["generateSettings"], "fileName": "org.hibernate.osgi.OsgiPersistenceProvider"}, {"methodBody": ["METHOD_START", "{", "final   ServiceTracker   serviceTracker    =    getServiceTracker ( contract . getName (  )  )  ;", "try    {", "return    (  ( T )     ( serviceTracker . waitForService (  1  0  0  0  )  )  )  ;", "}    catch    ( Exception   e )     {", ". LOG . unableToDiscoverOsgiService ( contract . getName (  )  ,    e )  ;", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getServiceImpl"], "fileName": "org.hibernate.osgi.OsgiServiceUtil"}, {"methodBody": ["METHOD_START", "{", "T [  ]    services    =     (  ( T [  ]  )     ( Array . newInstance ( contract ,     0  )  )  )  ;", "final   ServiceTracker   serviceTracker    =    getServiceTracker ( contract . getName (  )  )  ;", "try    {", "services    =     (  ( T [  ]  )     ( serviceTracker . getServices ( services )  )  )  ;", "if    ( services    !  =    null )     {", "return   services ;", "}", "}    catch    ( Exception   e )     {", ". LOG . unableToDiscoverOsgiService ( contract . getName (  )  ,    e )  ;", "}", "return   services ;", "}", "METHOD_END"], "methodName": ["getServiceImpls"], "fileName": "org.hibernate.osgi.OsgiServiceUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( serviceTrackers . containsKey ( contractClassName )  )  )     {", "final   Tracker < T ,    T >    serviceTracker    =    new   Tracker < T ,    T >  ( context ,    contractClassName ,    null )  ;", "serviceTracker . open (  )  ;", "serviceTrackers . put ( contractClassName ,    serviceTracker )  ;", "}", "return   serviceTrackers . get ( contractClassName )  ;", "}", "METHOD_END"], "methodName": ["getServiceTracker"], "fileName": "org.hibernate.osgi.OsgiServiceUtil"}, {"methodBody": ["METHOD_START", "{", "final   BootstrapServiceRegistryBuilder   bsrBuilder    =    new   BootstrapServiceRegistryBuilder (  )  ;", "bsrBuilder . applyClassLoaderService ( new   OSGiClassLoaderServiceImpl ( osgiClassLoader ,    osgiServiceUtil )  )  ;", "final   Integrator [  ]    integrators    =    osgiServiceUtil . getServiceImpls ( Integrator . class )  ;", "for    ( Integrator   integrator    :    integrators )     {", "bsrBuilder . applyIntegrator ( integrator )  ;", "}", "final   StrategyRegistrationProvider [  ]    strategyRegistrationProviders    =    osgiServiceUtil . getServiceImpls ( StrategyRegistrationProvider . class )  ;", "for    ( StrategyRegistrationProvider   strategyRegistrationProvider    :    strategyRegistrationProviders )     {", "bsrBuilder . applyStrategySelectors ( strategyRegistrationProvider )  ;", "}", "final   BootstrapServiceRegistry   bsr    =    bsrBuilder . build (  )  ;", "final   StandardServiceRegistryBuilder   ssrBuilder    =    new   StandardServiceRegistryBuilder ( bsr )  ;", "final   BundleWiring   bundleWiring    =     (  ( BundleWiring )     ( requestingBundle . adapt ( BundleWiring . class )  )  )  ;", "final   Collection < String >    cfgResources    =    bundleWiring . listResources (  \"  /  \"  ,     \" hibernate . cfg . xml \"  ,    LISTRESOURCES _ RECURSE )  ;", "if    (  ( cfgResources . size (  )  )     =  =     0  )     {", "ssrBuilder . configure (  )  ;", "} else    {", "if    (  ( cfgResources . size (  )  )     >     1  )     {", ". LOG . warn (  \" Multiple   hibernate . cfg . xml   files   found   in   the   persistence   bundle .       Using   the   first   one   discovered .  \"  )  ;", "}", "String   cfgResource    =     \"  /  \"     +     ( cfgResources . iterator (  )  . next (  )  )  ;", "ssrBuilder . configure ( cfgResource )  ;", "}", "ssrBuilder . applySetting ( JTA _ PLATFORM ,    osgiJtaPlatform )  ;", "final   StandardServiceRegistry   ssr    =    ssrBuilder . build (  )  ;", "final   MetadataBuilder   metadataBuilder    =    new   MetadataSources ( ssr )  . getMetadataBuilder (  )  ;", "final   TypeContributor [  ]    typeContributors    =    osgiServiceUtil . getServiceImpls ( TypeContributor . class )  ;", "for    ( TypeContributor   typeContributor    :    typeContributors )     {", "metadataBuilder . applyTypes ( typeContributor )  ;", "}", "return   metadataBuilder . build (  )  . buildSessionFactory (  )  ;", "}", "METHOD_END"], "methodName": ["buildSessionFactory"], "fileName": "org.hibernate.osgi.OsgiSessionFactoryService"}, {"methodBody": ["METHOD_START", "{", "for    ( Bundle   bundle    :    bundleContext . getBundles (  )  )     {", "if    ( bundle . getSymbolicName (  )  . equals ( symbolicName )  )     {", "Assert . assertEquals (  ( symbolicName    +     \"    was   found ,    but   not   in   an   ACTIVE   st \"  )  ,    ACTIVE ,    bundle . getSt )  )  ;", "return ;", "}", "}", "Assert . fail (  (  \" Could   not   find   bundle :     \"     +    symbolicName )  )  ;", "}", "METHOD_END"], "methodName": ["assertActiveBundle"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   Properties   paxExamEnvironment    =    OsgiIntegrationTest . loadPaxExamEnvironmentProperties (  )  ;", "final   boolean   debug    =    ConfigurationHelper . getBoolean (  \" debug \"  ,    Environment . getProperties (  )  ,    OsgiIntegrationTest . DEBUG )  ;", "return   options ( when ( debug )  . useOptions ( debugConfiguration (  \"  5  0  0  5  \"  ,    true )  )  ,    karafDistributionConfiguration (  )  . frameworkUrl ( paxExamEnvironment . getProperty (  \" distroUrl \"  )  )  . karafVersion ( paxExamEnvironment . getProperty (  \" version \"  )  )  . name (  \" Apache   Karaf \"  )  . unpackDirectory ( new   File ( paxExamEnvironment . getProperty (  \" unpackDir \"  )  )  )  . useDeployFolder ( false )  ,    editConfigurationFileExtend (  \" etc / cfg \"  ,     \" repositories \"  ,     \" https :  /  / repository . jboss . org / nexus / content / groups / public /  \"  )  ,    configureConsole (  )  . ignoreLocalConsole (  )  . ignoreRemoteShell (  )  ,    when ( debug )  . useOptions ( keepRuntimeFolder (  )  )  ,    logLevel ( INFO )  ,    features ( OsgiIntegrationTest . featureXmlUrl ( paxExamEnvironment )  ,     \" hibernate - orm \"  )  ,    features ( OsgiIntegrationTest . featureXmlUrl ( paxExamEnvironment )  ,     \" hibernate - envers \"  )  ,    features ( testingFeatureXmlUrl (  )  ,     \" hibernate - osgi - testing \"  )  )  ;", "}", "METHOD_END"], "methodName": ["config"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( paxExamEnvironment . getProperty (  \" karafFeatureFile \"  )  )  . toURI (  )  . toURL (  )  . toExternalForm (  )  ;", "}", "METHOD_END"], "methodName": ["featureXmlUrl"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "props . load (  . class . getResourceAsStream (  \"  / pax - exam - environment . properties \"  )  )  ;", "return   props ;", "}", "METHOD_END"], "methodName": ["loadPaxExamEnvironmentProperties"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" Configuring   probe .  .  .  \"  )  ;", "probe . setHeader ( BUNDLE _ ACTIVATOR ,     \" client . OsgiTestActivator \"  )  ;", "return   probe ;", "}", "METHOD_END"], "methodName": ["probeConfiguration"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "Locale . setDefault ( Locale . ENGLISH )  ;", "}", "METHOD_END"], "methodName": ["setLocaleToEnglish"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( featuresService . isInstalled ( featuresService . getFeature (  \" hibernate - orm \"  )  )  )  ;", "assertTrue ( featuresService . isInstalled ( featuresService . getFeature (  \" hibernate - envers \"  )  )  )  ;", "assertActiveBundle (  \" rm . core \"  )  ;", "assertActiveBundle (  \" rm . envers \"  )  ;", "}", "METHOD_END"], "methodName": ["testActivation"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   sr    =    bundleContext . getServiceReference ( SessionFactory . class . getName (  )  )  ;", "final   SessionFactoryImplementor   sfi    =     (  ( SessionFactoryImplementor )     ( bundleContext . getService ( sr )  )  )  ;", "assertTrue ( Testor . passed (  )  )  ;", "Class   impl    =    sfi . getServiceRegistry (  )  . getService ( StrategySelector . class )  . selectStrategyImplementor ( Calendar . class ,    TestStrategyRegistrationProvider . GREGORIAN )  ;", "assertNotNull ( impl )  ;", "BasicType   basicType    =    sfi . getTypeResolver (  )  . basic ( TestTypeContributor . NAME )  ;", "assertNotNull ( basicType )  ;", "}", "METHOD_END"], "methodName": ["testExtensionPoints"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   serviceReference    =    bundleContext . getServiceReference ( PersistenceProvider . class . getName (  )  )  ;", "final   PersistenceProvider   persistenceProvider    =     (  ( PersistenceProvider )     ( bundleContext . getService ( serviceReference )  )  )  ;", "final   EntityManagerFactory   emf    =    persistenceProvider . createEntityManagerFactory (  \"  - osgi - test \"  ,    null )  ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( new   DataPoint (  \" Brett \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "DataPoint   dp    =    em . find ( DataPoint . class ,     1  )  ;", "assertNotNull ( dp )  ;", "assertEquals (  \" Brett \"  ,    dp . getName (  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "dp    =    em . find ( DataPoint . class ,     1  )  ;", "dp . setName (  \" Brett 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . createQuery (  \" delete   from   DataPoint \"  )  . executeUpdate (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "dp    =    em . find ( DataPoint . class ,     1  )  ;", "assertNull ( dp )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["testJpa"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   serviceReference    =    bundleContext . getServiceReference ( PersistenceProvider . class . getName (  )  )  ;", "final   PersistenceProvider   persistenceProvider    =     (  ( PersistenceProvider )     ( bundleContext . getService ( serviceReference )  )  )  ;", "final   EntityManagerFactory   emf    =    persistenceProvider . createEntityManagerFactory (  \"  - osgi - test \"  ,    null )  ;", "final   Integer   adpId ;", "EntityManager   em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "AuditedDataPoint   adp    =    new   AuditedDataPoint (  \" Chris \"  )  ;", "em . persist ( adp )  ;", "em . getTransaction (  )  . commit (  )  ;", "adpId    =    adp . getId (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "adp    =    em . find ( AuditedDataPoint . class ,    adpId )  ;", "adp . setName (  \" Chris 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    emf . createEntityManager (  )  ;", "AuditReader   ar    =    AuditReaderFactory . get ( em )  ;", "assertEquals (  2  ,    ar . getRevisions ( AuditedDataPoint . class ,    adpId )  . size (  )  )  ;", "AuditedDataPoint   rev 1     =    ar . find ( AuditedDataPoint . class ,    adpId ,     1  )  ;", "AuditedDataPoint   rev 2     =    ar . find ( AuditedDataPoint . class ,    adpId ,     2  )  ;", "assertEquals ( new   AuditedDataPoint ( adpId ,     \" Chris \"  )  ,    rev 1  )  ;", "assertEquals ( new   AuditedDataPoint ( adpId ,     \" Chris 2  \"  )  ,    rev 2  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["testJpaEnvers"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   sr    =    bundleContext . getServiceReference ( SessionFactory . class . getName (  )  )  ;", "final   SessionFactory   sf    =     (  ( SessionFactory )     ( bundleContext . getService ( sr )  )  )  ;", "Session   s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "s . persist ( new   DataPoint (  \" Brett \"  )  )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "DataPoint   dp    =     (  ( DataPoint )     ( s . get ( DataPoint . class ,     1  )  )  )  ;", "assertNotNull ( dp )  ;", "assertEquals (  \" Brett \"  ,    dp . getName (  )  )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "dp . setName (  \" Brett 2  \"  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "s . update ( dp )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "dp    =     (  ( DataPoint )     ( s . get ( DataPoint . class ,     1  )  )  )  ;", "assertNotNull ( dp )  ;", "assertEquals (  \" Brett 2  \"  ,    dp . getName (  )  )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "s . createQuery (  \" delete   from   DataPoint \"  )  . executeUpdate (  )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransac (  )  . begin (  )  ;", "dp    =     (  ( DataPoint )     ( s . get ( DataPoint . class ,     1  )  )  )  ;", "assertNull ( dp )  ;", "s . getTransac (  )  . commit (  )  ;", "s . close (  )  ;", "}", "METHOD_END"], "methodName": ["testNative"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   sr    =    bundleContext . getServiceReference ( SessionFactory . class . getName (  )  )  ;", "final   SessionFactory   sf    =     (  ( SessionFactory )     ( bundleContext . getService ( sr )  )  )  ;", "final   er   adpId ;", "Session   s    =    sf . openSession (  )  ;", "s . getTransaction (  )  . begin (  )  ;", "AuditedDataPoint   adp    =    new   AuditedDataPoint (  \" Chris \"  )  ;", "s . persist ( adp )  ;", "s . getTransaction (  )  . commit (  )  ;", "adpId    =    adp . getId (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "s . getTransaction (  )  . begin (  )  ;", "adp    =    s . get ( AuditedDataPoint . class ,    adpId )  ;", "adp . setName (  \" Chris 2  \"  )  ;", "s . getTransaction (  )  . commit (  )  ;", "s . close (  )  ;", "s    =    sf . openSession (  )  ;", "AuditReader   ar    =    AuditReaderFactory . get ( s )  ;", "assertEquals (  2  ,    ar . getRevisions ( AuditedDataPoint . class ,    adpId )  . size (  )  )  ;", "AuditedDataPoint   rev 1     =    ar . find ( AuditedDataPoint . class ,    adpId ,     1  )  ;", "AuditedDataPoint   rev 2     =    ar . find ( AuditedDataPoint . class ,    adpId ,     2  )  ;", "assertEquals ( new   AuditedDataPoint ( adpId ,     \" Chris \"  )  ,    rev 1  )  ;", "assertEquals ( new   AuditedDataPoint ( adpId ,     \" Chris 2  \"  )  ,    rev 2  )  ;", "s . close (  )  ;", "}", "METHOD_END"], "methodName": ["testNativeEnvers"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "final   ServiceReference   sr    =    bundleContext . getServiceReference ( SessionFactory . class . getName (  )  )  ;", "final   SessionFactoryImplementor   sfi    =     (  ( SessionFactoryImplementor )     ( bundleContext . getService ( sr )  )  )  ;", "assertNotNull ( sfi . getServiceRegistry (  )  . getService ( SomeService . class )  )  ;", "}", "METHOD_END"], "methodName": ["testServiceContributorDiscovery"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "return   OsgiIntegrationTest . class . getClassLoader (  )  . getResource (  \" org / hibernate / osgi / test / testing - bundles . xml \"  )  . toExternalForm (  )  ;", "}", "METHOD_END"], "methodName": ["testingFeatureXmlUrl"], "fileName": "org.hibernate.osgi.test.OsgiIntegrationTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.osgi.test.client.AuditedDataPoint"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.osgi.test.client.AuditedDataPoint"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.osgi.test.client.AuditedDataPoint"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.osgi.test.client.AuditedDataPoint"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.osgi.test.client.DataPoint"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.osgi.test.client.DataPoint"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.osgi.test.client.DataPoint"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.osgi.test.client.DataPoint"}, {"methodBody": ["METHOD_START", "{", "return   TestIntegrator . passed ;", "}", "METHOD_END"], "methodName": ["passed"], "fileName": "org.hibernate.osgi.test.client.TestIntegrator"}, {"methodBody": ["METHOD_START", "{", "return   Collections . singletonList (  (  ( StrategyRegistration )     ( new   SimpleStrategyRegistrationImpl ( Calendar . class ,    GregorianCalendar . class ,    TestStrategyRegistrationProvider . GREGORIAN )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getStrategyRegistrations"], "fileName": "org.hibernate.osgi.test.client.TestStrategyRegistrationProvider"}, {"methodBody": ["METHOD_START", "{", "typeContributions . contributeType ( new   TestTypeContributor . TestType (  )  ,    TestTypeContributor . NAME )  ;", "}", "METHOD_END"], "methodName": ["contribute"], "fileName": "org.hibernate.osgi.test.client.TestTypeContributor"}]