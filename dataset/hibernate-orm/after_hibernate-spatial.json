[{"methodBody": ["METHOD_START", "{", "final   String [  ]    columns    =    criteriaQuery . findColumns ( propertyName ,    criteria )  ;", "if    (  ( columns . length )     !  =     1  )     {", "throw   new   HibernateException (  \" Spatial      may   only   be   used   with   single - column   properties \"  )  ;", "}", "return   columns [  0  ]  ;", "}", "METHOD_END"], "methodName": ["findColumn"], "fileName": "org.hibernate.spatial.criterion.ExpressionUtil"}, {"methodBody": ["METHOD_START", "{", "final   Dialect   dialect    =    criteriaQuery . getFactory (  )  . getDialect (  )  ;", "if    (  !  ( dialect   instanceof   SpatialDialect )  )     {", "throw   new   HibernateException (  \" A   spatial   e   requires   a   spatial   dialect .  \"  )  ;", "}", "final   SpatialDialect   spatialDialect    =     (  ( SpatialDialect )     ( dialect )  )  ;", "if    (  !  ( spatialDialect . supports ( function )  )  )     {", "throw   new   HibernateException (  ( function    +     \"    function   not   supported   by   this   dialect \"  )  )  ;", "}", "return   spatialDialect ;", "}", "METHOD_END"], "methodName": ["getSpatialDialect"], "fileName": "org.hibernate.spatial.criterion.ExpressionUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleProjection (  )     {", "public   Type [  ]    getTypes ( Criteria   criteria ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "return   new   Type [  ]  {    criteriaQuery . getType ( criteria ,    propertyName )     }  ;", "}", "public   String   toSqlString ( Criteria   criteria ,    int   position ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "final   StringBuilder   stbuf    =    new   StringBuilder (  )  ;", "final   SessionFactoryImplementor   factory    =    criteriaQuery . getFactory (  )  ;", "final   String [  ]    columns    =    criteriaQuery . getColumnsUsingProjection ( criteria ,    propertyName )  ;", "final   Dialect   dialect    =    factory . getDialect (  )  ;", "if    ( dialect   instanceof   SpatialDialect )     {", "final   SpatialDialect   seDialect    =     (  ( SpatialDialect )     ( dialect )  )  ;", "stbuf . append ( seDialect . getSpatialAggregateSQL ( columns [  0  ]  ,    SpatialAggregate . EXTENT )  )  ;", "stbuf . append (  \"    as   y \"  )  . append ( position )  . append (  '  _  '  )  ;", "return   stbuf . toString (  )  ;", "}", "return   null ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["extent"], "fileName": "org.hibernate.spatial.criterion.SpatialProjections"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . CONTAINS )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . CROSSES )  ;", "}", "METHOD_END"], "methodName": ["crosses"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . DISJOINT )  ;", "}", "METHOD_END"], "methodName": ["disjoint"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   DWithinExpression ( propertyName ,    geometry ,    distance )  ;", "}", "METHOD_END"], "methodName": ["distanceWithin"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . EQUALS )  ;", "}", "METHOD_END"], "methodName": ["eq"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialFilter ( propertyName ,    envelope ,    srid )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialFilter ( propertyName ,    value )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   HavingSridExpression ( propertyName ,    srid )  ;", "}", "METHOD_END"], "methodName": ["havingSRID"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . INTERSECTS )  ;", "}", "METHOD_END"], "methodName": ["intersects"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   IsEmptyExpression ( propertyName ,    true )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   IsEmptyExpression ( propertyName ,    false )  ;", "}", "METHOD_END"], "methodName": ["isNotEmpty"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . OVERLAPS )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "switch    ( relation )     {", "case   SpatialRelation . CONTAINS    :", "return    . contains ( propertyName ,    value )  ;", "case   SpatialRelation . CROSSES    :", "return    . crosses ( propertyName ,    value )  ;", "case   SpatialRelation . DISJOINT    :", "return    . disjoint ( propertyName ,    value )  ;", "case   SpatialRelation . INTERSECTS    :", "return    . intersects ( propertyName ,    value )  ;", "case   SpatialRelation . EQUALS    :", "return    . eq ( propertyName ,    value )  ;", "case   SpatialRelation . FILTER    :", "return    . filter ( propertyName ,    value )  ;", "case   SpatialRelation . OVERLAPS    :", "return    . overlaps ( propertyName ,    value )  ;", "case   SpatialRelation . TOUCHES    :", "return    . touches ( propertyName ,    value )  ;", "case   SpatialRelation . WITHIN    :", "return    . within ( propertyName ,    value )  ;", "default    :", "throw   new   IllegalArgumentException (  \" Non - existant   spatial   relation   passed .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["spatialRestriction"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . TOUCHES )  ;", "}", "METHOD_END"], "methodName": ["touches"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   SpatialRelateExpression ( propertyName ,    value ,    SpatialRelation . WITHIN )  ;", "}", "METHOD_END"], "methodName": ["within"], "fileName": "org.hibernate.spatial.criterion.SpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   functionMap . get ( functionName )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.spatial.dialect.SpatialFunctionsRegistry"}, {"methodBody": ["METHOD_START", "{", "this . functionMap . put ( name ,    function )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.hibernate.spatial.dialect.SpatialFunctionsRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( object    =  =    null )     {", "return   null ;", "}", "if    ( object   instanceof   Clob )     {", "Db 2 ClobDecoder   decoder    =    new   Db 2 ClobDecoder ( srid )  ;", "return   decoder . decode (  (  ( Clob )     ( object )  )  )  ;", "}", "throw   new   IllegalStateException (  (  (  \" Object   of   type    \"     +     ( object . getClass (  )  . getCanonicalName (  )  )  )     +     \"    not   handled   by   DB 2    as      value \"  )  )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.db2.DB2GeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "final   DB 2 GeometryTypeDescriptor   typeDescriptor    =    mkDescriptor ( serviceRegistry )  ;", "typeContributions . contributeType ( new   GeolatteGeometryType ( typeDescriptor )  )  ;", "typeContributions . contributeType ( new   JTSGeometryType ( typeDescriptor )  )  ;", "typeContributions . contributeJavaTypeDescriptor ( GeolatteGeometryJavaTypeDescriptor . INSTANCE )  ;", "typeContributions . contributeJavaTypeDescriptor ( JTSGeometryJavaTypeDescriptor . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["contributeTypes"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "spatialRelationNames . put ( SpatialRelation . EQUALS ,     \" ST _ EQUALS \"  )  ;", "spatialRelationNames . put ( SpatialRelation . DISJOINT ,     \" ST _ DISJOINT \"  )  ;", "spatialRelationNames . put ( SpatialRelation . TOUCHES ,     \" ST _ TOUCHES \"  )  ;", "spatialRelationNames . put ( SpatialRelation . CROSSES ,     \" ST _ CROSSES \"  )  ;", "spatialRelationNames . put ( SpatialRelation . WITHIN ,     \" ST _ WITHIN \"  )  ;", "spatialRelationNames . put ( SpatialRelation . OVERLAPS ,     \" ST _ OVERLAPS \"  )  ;", "spatialRelationNames . put ( SpatialRelation . CONTAINS ,     \" ST _ CONTAINS \"  )  ;", "spatialRelationNames . put ( SpatialRelation . INTERSECTS ,     \" ST _ INTERSECTS \"  )  ;", "}", "METHOD_END"], "methodName": ["initializeRelationNames"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "ConfigurationService   configurationService    =    serviceRegistry . getService ( ConfigurationService . class )  ;", "Integer   srid    =    retrieveSridFromConfiguration ( configurationService )  ;", "return   new   DB 2 GeometryTypeDescriptor ( srid )  ;", "}", "METHOD_END"], "methodName": ["mkDescriptor"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "registerFunction (  \" equals \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Equals \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" disjoint \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Disjoint \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" touches \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Touches \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" crosses \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Crosses \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" within \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Within \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" overlaps \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Overlaps \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" contains \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Contains \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" intersects \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Intersects \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" relate \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Relate \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" dimension \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Dimension \"  ,    StandardBasicTypes . INTEGER )  )  ;", "registerFunction (  \" geometrytype \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ GeometryType \"  ,    StandardBasicTypes . STRING )  )  ;", "registerFunction (  \" srid \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Srsid \"  ,    StandardBasicTypes . INTEGER )  )  ;", "registerFunction (  \" envelope \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Envelope \"  )  )  ;", "registerFunction (  \" astext \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ AsText \"  ,    StandardBasicTypes . STRING )  )  ;", "registerFunction (  \" asbinary \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ AsBinary \"  ,    StandardBasicTypes . BINARY )  )  ;", "registerFunction (  \" isempty \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ IsEmpty \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" issimple \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ IsSimple \"  ,    StandardBasicTypes . NUMERIC _ BOOLEAN )  )  ;", "registerFunction (  \" boundary \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Boundary \"  )  )  ;", "registerFunction (  \" distance \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Distance \"  ,    StandardBasicTypes . DOUBLE )  )  ;", "registerFunction (  \" buffer \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Buffer \"  )  )  ;", "registerFunction (  \" convexhull \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ ConvexHull \"  )  )  ;", "registerFunction (  \" intersection \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Intersection \"  )  )  ;", "registerFunction (  \" geomunion \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Union \"  )  )  ;", "registerFunction (  \" difference \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ Difference \"  )  )  ;", "registerFunction (  \" symdifference \"  ,    new   StandardSQLFunction (  \" db 2 gse . ST _ SymDifference \"  )  )  ;", "registerFunction (  \" geomFromText \"  ,    new   StandardSQLFunction (  \" DB 2 GSE . ST _ GeomFromText \"  )  )  ;", "}", "METHOD_END"], "methodName": ["registerSpatialFunctions"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "registerColumnType ( Types . CLOB ,     \"    db 2 gse . ST _ Geometry \"  )  ;", "}", "METHOD_END"], "methodName": ["registerSpatialType"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "Integer   srid    =     0  ;", "try    {", "srid    =    Integer . parseInt ( configurationService . getSetting ( HSpatialConfigurationSettings . DB 2  _ DEFAULT _ SRID ,    String . class ,     \"  0  \"  )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   HException (  (  \" Invalid   format   for   configuration   parameter    ( Integer   expected )  :     \"     +     ( HSpatialConfigurationSettings . DB 2  _ DEFAULT _ SRID )  )  ,    e )  ;", "}", "return   srid ;", "}", "METHOD_END"], "methodName": ["retrieveSridFromConfiguration"], "fileName": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "if    ( object    =  =    null )     {", "return   null ;", "}", "try    {", "if    ( object   instanceof   Geometry )     {", "return   JTS . from (  (  ( Geometry )     ( object )  )  )  ;", "}", "final   WkbDecoder   decoder    =    Wkb . newDecoder ( POSTGIS _ EWKB _  1  )  ;", "if    ( object   instanceof   Blob )     {", "return   decoder . decode (  . toByteBuffer (  (  ( Blob )     ( object )  )  )  )  ;", "} else", "if    ( object   instanceof   byte [  ]  )     {", "return   decoder . decode ( from (  (  ( byte [  ]  )     ( object )  )  )  )  ;", "} else", "if    ( object   instanceof   com . vividsolutions . jts . geom . Envelope )     {", "return    . toPolygon ( JTS . from (  (  ( com . vividsolutions . jts . geom . Envelope )     ( object )  )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Can ' t   convert   database   object   of   type    \"     +     ( object . getClass (  )  . getCanonicalName (  )  )  )  )  ;", "}", "}    catch    ( Exception   e )     {", ". LOGGER . warn (  \" Could   not   convert   database   object   to   a   Geometry .  \"  )  ;", "throw   new   HibernateException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.hibernate.spatial.dialect.h2geodb.GeoDbWkb"}, {"methodBody": ["METHOD_START", "{", "final   WkbEncoder   encoder    =    Wkb . newEncoder ( POSTGIS _ EWKB _  1  )  ;", "final   ByteBuffer   buffer    =    encoder . encode ( geometry ,    NDR )  ;", "return   buffer    =  =    null    ?    null    :    buffer . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["to"], "fileName": "org.hibernate.spatial.dialect.h2geodb.GeoDbWkb"}, {"methodBody": ["METHOD_START", "{", "final   ByteArrayOutputStream   baos    =    new   ByteArrayOutputStream (  )  ;", "final   byte [  ]    buf    =    new   byte [  1  0  2  4  ]  ;", "InputStream   in    =    null ;", "try    {", "in    =    blob . getBinaryStream (  )  ;", "int   n    =     0  ;", "while    (  ( n    =    in . read ( buf )  )     >  =     0  )     {", "baos . write ( buf ,     0  ,    n )  ;", "}", "}    catch    ( Exception   e )     {", ". LOGGER . warn (  \" Could   not   convert   database   BLOB   object   to   binary   stream .  \"  ,    e )  ;", "}    finally    {", "try    {", "if    ( in    !  =    null )     {", "in . close (  )  ;", "}", "}    catch    ( IOException   e )     {", ". LOGGER . warn (  \" Could   not   close   binary   stream .  \"  )  ;", "}", "}", "return   ByteBuffer . from ( baos . toByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["toByteBuffer"], "fileName": "org.hibernate.spatial.dialect.h2geodb.GeoDbWkb"}, {"methodBody": ["METHOD_START", "{", "final   PositionSequence < C 2 D >    ps    =    PositionSequenceBuilders . fixedSized (  4  ,    C 2 D . class )  . add ( env . lowerLeft (  )  . getCoordinate (  0  )  ,    env . lowerLeft (  )  . getCoordinate (  1  )  )  . add ( env . lowerLeft (  )  . getCoordinate (  0  )  ,    env . upperRight (  )  . getCoordinate (  1  )  )  . add ( env . upperRight (  )  . getCoordinate (  0  )  ,    env . upperRight (  )  . getCoordinate (  1  )  )  . add ( env . lowerLeft (  )  . getCoordinate (  0  )  ,    env . lowerLeft (  )  . getCoordinate (  1  )  )  . toPositionSequence (  )  ;", "return   new   Polygon < C 2 D >  ( ps ,    CoordinateReferenceSystems . PROJECTED _  2 D _ METER )  ;", "}", "METHOD_END"], "methodName": ["toPolygon"], "fileName": "org.hibernate.spatial.dialect.h2geodb.GeoDbWkb"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . argumentIsGeometryTypeMask . size (  )  )     >    idx )     &  &     ( this . argumentIsGeometryTypeMask . get ( idx )  )  ;", "}", "METHOD_END"], "methodName": ["isGeometryArgument"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialFunction"}, {"methodBody": ["METHOD_START", "{", "if    (  ( argument   instanceof   String )     &  &     (  (  ( String )     ( argument )  )  . endsWith ( HANASpatialFunction . AS _ EWKB _ SUFFIX )  )  )     {", "String   argumentString    =     (  ( String )     ( argument )  )  ;", "return   argumentString . substring (  0  ,     (  ( argumentString . length (  )  )     -     ( HANASpatialFunction . AS _ EWKB _ SUFFIX . length (  )  )  )  )  ;", "}", "return   argument ;", "}", "METHOD_END"], "methodName": ["stripEWKBSuffix"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialFunction"}, {"methodBody": ["METHOD_START", "{", "return   functionName ;", "}", "METHOD_END"], "methodName": ["getFunctionName"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buffer    =    ByteBuffer . allocate (  (  ( wkb . length )     +     4  )  )  ;", "buffer . setByteOrder ( ByteOrder . valueOf ( orderByte )  )  ;", "buffer . put ( orderByte )  ;", "buffer . putUInt (  ( typeCode    |     (  . POSTGIS _ SRID _ FLAG )  )  )  ;", "buffer . putInt ( crsId )  ;", "for    ( int   i    =     5  ;    i    <     ( wkb . length )  ;    i +  +  )     {", "buffer . put ( wkb [ i ]  )  ;", "}", "buffer . rewind (  )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["addCrsId"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "retu   blob . getBytes (  1  ,     (  ( int )     ( blob . length (  )  )  )  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException (  \" Error   on   transforming   blob   into   array .  \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["toByteArray"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    raw    =    null ;", "if    ( obj    =  =    null )     {", "return   null ;", "}", "if    ( obj   instanceof   byte [  ]  )     {", "raw    =     (  ( byte [  ]  )     ( obj )  )  ;", "} else", "if    ( obj   instanceof   Blob )     {", "raw    =     . toByteArray (  (  ( Blob )     ( obj )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" Expected   byte   array   or   BLOB \"  )  ;", "}", "ByteBuffer   buffer    =    ByteBuffer . from ( raw )  ;", "buffer . setByteOrder ( ByteOrder . valueOf ( raw [  0  ]  )  )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["toByteBuffer"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "WkbEncoder   encoder    =    Wkb . newEncoder ( HANA _ EWKB )  ;", "ByteBuffer   bytes    =    encoder . encode ( geometry ,    NDR )  ;", "return   bytes . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["toEWKB"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "return   HANASpatialUtils . toGeometry ( HANASpatialUtils . toByteBuffer ( obj )  )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buffer    =    HANASpatialUtils . toByteBuffer ( rs . getObject ( name )  )  ;", "if    ( buffer    =  =    null )     {", "return   null ;", "}", "String   tableName    =    null ;", "String   columnName    =    null ;", "for    ( int   i    =     1  ;    i    <  =     ( rs . getMetaData (  )  . getColumnCount (  )  )  ;    i +  +  )     {", "if    (  ( name . equals ( rs . getMetaData (  )  . getColumnLabel ( i )  )  )     |  |     ( name . toUpperCase (  )  . equals ( rs . getMetaData (  )  . getColumnLabel ( i )  )  )  )     {", "tableName    =    rs . getMetaData (  )  . getTableName ( i )  ;", "columnName    =    rs . getMetaData (  )  . getColumnName ( i )  ;", "}", "}", "assert   tableName    !  =    null ;", "assert   columnName    !  =    null ;", "if    (  ( tableName . isEmpty (  )  )     |  |     ( columnName . isEmpty (  )  )  )     {", "return   HANASpatialUtils . toGeometry ( buffer )  ;", "}", "byte   orderByte    =    buffer . get (  )  ;", "int   typeCode    =     (  ( int )     ( buffer . getUInt (  )  )  )  ;", "Connection   connection    =    rs . getStatement (  )  . getConnection (  )  ;", "if    (  ( typeCode    &     ( HANASpatialUtils . POSTGIS _ SRID _ FLAG )  )     !  =     ( HANASpatialUtils . POSTGIS _ SRID _ FLAG )  )     {", "try    ( PreparedStatement   psSrid    =    connection . prepareStatement (  \" SELECT   SRS _ ID   FROM   SYS . ST _ GEOMETRY _ COLUMNS   WHERE   SCHEMA _ NAME = CURRENT _ SCHEMA   AND   TABLE _ NAME =  ?    AND   COLUMN _ NAME =  ?  \"  )  )     {", "psSrid . setString (  1  ,    tableName )  ;", "psSrid . setString (  2  ,    columnName )  ;", "try    ( ResultSet   rsSrid    =    psSrid . executeQuery (  )  )     {", "if    ( rsSrid . next (  )  )     {", "int   crsId    =    rsSrid . getInt (  1  )  ;", "buffer    =    HANASpatialUtils . addCrsId ( buffer . toByteArray (  )  ,    orderByte ,    typeCode ,    crsId )  ;", "} else    {", "}", "}", "}", "}", "return   HANASpatialUtils . toGeometry ( buffer )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( buffer    =  =    null )     {", "return   null ;", "}", "WkbDecoder   decoder    =    Wkb . newDecoder (  _ EWKB )  ;", "return   decoder . decode ( buffer )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.hana.HANASpatialUtils"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getAlphaShape (  1  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    alphashape ( geom ,     1  )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Point '  ,     ' ST _ MultiPoint '  )  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["alphashape"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getArea (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    area ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["area"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    byte [  ]  >    dbexpected    =    hanaExpectationsFactory . getAsEWKB (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    asewkb ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["asewkb"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    String >    dbexpected    =    hanaExpectationsFactory . getAsEWKT (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    asewkt ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["asewkt"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    String >    dbexpected    =    hanaExpectationsFactory . getAsGeoJSON (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    asgeojson ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["asgeojson"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    String >    dbexpected    =    hanaExpectationsFactory . getAsSVG (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    assvg ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["assvg"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    String >    dbexpected    =    hanaExpectationsFactory . getAsSVGAggr (  )  ;", "String   hql    =    String . format (  \" SELECT   cast ( count ( g )    as   int )  ,    assvgaggr ( geom )    FROM   integration .  % s . GeomEntity   g \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["assvgaggr"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    byte [  ]  >    dbexpected    =    hanaExpectationsFactory . getAsWKB (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    aswkb ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["aswkb"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    String >    dbexpected    =    hanaExpectationsFactory . getAsWKT (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    aswkt ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["aswkt"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getCentroid (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    centroid ( geom )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ Polygon '  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["centroid"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getConvexHullAggr (  )  ;", "String   hql    =    String . format (  \" SELECT   cast ( count ( g )    as   int )  ,    convexhullaggr ( geom )    FROM   integration .  % s . GeomEntity   g \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["convexhullaggr"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Integer >    dbexpected    =    hanaExpectationsFactory . getCoordDim (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    coorddim ( geom )    FROM   integration .  % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["coorddim"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getCoveredBy ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    coveredby ( geom ,     : filter )    FROM   integration .  % s . GeomEntity   where   coveredby ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["coveredby"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getCovers ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    covers ( geom ,     : filter )    FROM   integration .  % s . GeomEntity   where   covers ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["covers"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    params    =    new   HashMap < String ,    Object >  (  )  ;", "params . put ( filterParamName ,    value )  ;", "return   params ;", "}", "METHOD_END"], "methodName": ["createQueryParams"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getEndPoint (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    endpoint ( geom )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ LineString '  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["endpoint"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getEnvelopeAggr (  )  ;", "String   hql    =    String . format (  \" SELECT   cast ( count ( g )    as   int )  ,    envelopeaggr ( geom )    FROM   integration .  % s . GeomEntity   g \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["envelopeaggr"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getExteriorRing (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    exteriorring ( geom )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ Polygon '  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["exteriorring"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeometryN (  1  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    cast ( geometryn ( geom ,     : n )    as    % s )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ GeometryCollection '  \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" n \"  ,     1  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geometryn"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "WKBWriter   writer    =    new   WKBWriter (  2  ,    true )  ;", "byte [  ]    ewkb    =    writer . write ( expectationsFactory . getTestPolygon (  )  )  ;", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeomFromEWKB ( ewkb )  ;", "String   hql    =    String . format (  \" SELECT    1  ,    cast ( geomfromewkb (  : param )    as    % s )    FROM   integration .  % s . GeomEntity   g \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" param \"  ,    ewkb )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomfromewkb"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "WKTWriter   writer    =    new   WKTWriter (  )  ;", "String   ewkt    =     (  (  \" SRID =  \"     +     ( expectationsFactory . getTestSrid (  )  )  )     +     \"  ;  \"  )     +     ( writer . write ( expectationsFactory . getTestPolygon (  )  )  )  ;", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeomFromEWKT ( ewkt )  ;", "String   hql    =    String . format (  \" SELECT    1  ,    cast ( geomfromewkt (  : param )    as    % s )    FROM   integration .  % s . GeomEntity   g \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" param \"  ,    ewkt )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomfromewkt"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "String   text    =    expectationsFactory . getTestPolygon (  )  . toText (  )  ;", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeomFromText ( text )  ;", "String   hql    =    String . format (  \" SELECT    1  ,    cast ( geomfromtext (  : param )    as    % s )    FROM   integration .  % s . GeomEntity   g \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" param \"  ,    text )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomfromtext"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "WKBWriter   writer    =    new   WKBWriter (  2  ,    false )  ;", "byte [  ]    wkb    =    writer . write ( expectationsFactory . getTestPolygon (  )  )  ;", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeomFromWKB ( wkb )  ;", "String   hql    =    String . format (  \" SELECT    1  ,    cast ( geomfromwkb (  : param )    as    % s )    FROM   integration .  % s . GeomEntity   g \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" param \"  ,    wkb )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomfromwkb"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "WKTWriter   writer    =    new   WKTWriter (  )  ;", "String   wkt    =    writer . write ( expectationsFactory . getTestPolygon (  )  )  ;", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getGeomFromWKT ( wkt )  ;", "String   hql    =    String . format (  \" SELECT    1  ,    cast ( geomfromwkt (  : param )    as    % s )    FROM   integration .  % s . GeomEntity   g \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" param \"  ,    wkt )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomfromwkt"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "switch    ( pckg )     {", "case   alTestCase . GEOLATTE    :", "return   Geometry . class . getName (  )  ;", "case   alTestCase . JTS    :", "return   Geometry . class . getName (  )  ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Invalid   package :     \"     +    pckg )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getGeometryTypeFromPackage"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getInteriorRingN (  1  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    cast ( interiorringn ( geom ,     : n )    as    % s )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ Polygon '  \"  ,    getGeometryTypeFromPackage ( pckg )  ,    pckg )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" n \"  ,     1  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["interiorringn"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getIntersectionAggr (  )  ;", "String   hql    =    String . format (  \" SELECT   cast ( count ( g )    as   int )  ,    intersectionaggr ( geom )    FROM   integration .  % s . GeomEntity   g \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["intersectionaggr"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIntersectsRect (  (  ( Point )     ( expectationsFactory . getTestPoint (  )  . reverse (  )  )  )  ,    expectationsFactory . getTestPoint (  )  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    intersectsrect ( geom ,     : pmin ,     : pmax )    FROM   integration .  % s . GeomEntity   where   intersectsrect ( geom ,     : pmin ,     : pmax )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" pmin \"  ,    expectationsFactory . getTestPoint (  )  . reverse (  )  )  ;", "params . put (  \" pmax \"  ,    expectationsFactory . getTestPoint (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["intersectsrect"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIs 3 D (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    is 3 d ( geom )    FROM   integration .  % s . GeomEntity   where   is 3 d ( geom )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["is3d"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIsClosed (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    isclosed ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ LineString '  ,     ' ST _ MultiLineString '  )    and   isclosed ( geom )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["isclosed"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIsMeasured (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    ismeasured ( geom )    FROM   integration .  % s . GeomEntity   where   ismeasured ( geom )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["ismeasured"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIsRing (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    isring ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ LineString '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["isring"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getIsValid (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    isvalid ( geom )    FROM   integration .  % s . GeomEntity   where   isvalid ( geom )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["isvalid"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getLength (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    length ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ LineString '  ,     ' ST _ MultiLineString '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getM (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    m ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Point '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["m"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getMMax (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    mmax ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["mmax"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getMMin (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    mmin ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["mmin"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Integer >    dbexpected    =    hanaExpectationsFactory . getNumGeometries (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    numgeometries ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ GeometryCollection '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["numgeometries"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Integer >    dbexpected    =    hanaExpectationsFactory . getNumInteriorRing (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    numinteriorring ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Polygon '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["numinteriorring"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Integer >    dbexpected    =    hanaExpectationsFactory . getNumInteriorRings (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    numinteriorrings ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Polygon '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["numinteriorrings"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Integer >    dbexpected    =    hanaExpectationsFactory . getNumPoints (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    numpoints ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ LineString '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["numpoints"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Boolean >    dbexpected    =    hanaExpectationsFactory . getOrderingEquals ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    orderingequals ( geom ,     : filter )    FROM   integration .  % s . GeomEntity   where   orderingequals ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["orderingequals"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getPerimeter (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    perimeter ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["perimeter"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getPointN (  1  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    pointn ( geom ,     : n )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ LineString '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" n \"  ,     1  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["pointn"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getPointOnSurface (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    pointonsurface ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["pointonsurface"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getSnapToGrid (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    snaptogrid ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["snaptogrid"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getStartPoint (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    startpoint ( geom )    FROM   integration .  % s . GeomEntity   g   where   geometrytype ( geom )     =     ' ST _ LineString '  \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["startpoint"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "alphashape ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_alphashape_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "alphashape ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_alphashape_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "area ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_area_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "area ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_area_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asewkb ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_asewkb_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asewkb ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_asewkb_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asewkt ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_asewkt_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asewkt ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_asewkt_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asgeojson ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_asgeojson_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asgeojson ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_asgeojson_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "assvg ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_assvg_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "assvg ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_assvg_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "assvgaggr ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_assvgaggr_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "assvgaggr ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_assvgaggr_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "aswkb ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_aswkb_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "aswkb ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_aswkb_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "aswkt ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_aswkt_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "aswkt ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_aswkt_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "centroid ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_centroid_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "centroid ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_centroid_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "convexhullaggr ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_convexhullaggr_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "convexhullaggr ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_convexhullaggr_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "coorddim ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_coorddim_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "coorddim ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_coorddim_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "coveredby ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_coveredby_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "coveredby ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_coveredby_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "covers ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_covers_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "covers ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_covers_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "endpoint ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_endpoint_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "endpoint ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_endpoint_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "envelopeaggr ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_envelopeaggr_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "envelopeaggr ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_envelopeaggr_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "exteriorring ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_exteriorring_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "exteriorring ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_exteriorring_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geometryn ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geometryn_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geometryn ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geometryn_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromewkb ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromewkb_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromewkb ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromewkb_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromewkt ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromewkt_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromewkt ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromewkt_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromtext ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromtext_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromtext ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromtext_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromwkb ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromwkb_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromwkb ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromwkb_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromwkt ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromwkt_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomfromwkt ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomfromwkt_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "interiorringn ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_interiorringn_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "interiorringn ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_interiorringn_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersectionaggr ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_intersectionaggr_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersectionaggr ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_intersectionaggr_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersectsrect ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_intersectsrect_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersectsrect ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_intersectsrect_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "is 3 d ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_is3d_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "is 3 d ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_is3d_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isclosed ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_isclosed_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isclosed ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_isclosed_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ismeasured ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_ismeasured_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ismeasured ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_ismeasured_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isring ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_isring_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isring ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_isring_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isvalid ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_isvalid_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isvalid ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_isvalid_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "length ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_length_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "length ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_length_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "m ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_m_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "m ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_m_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "mmax ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_mmax_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "mmax ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_mmax_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "mmin ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_mmin_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "mmin ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_mmin_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numgeometries ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_numgeometries_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numgeometries ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_numgeometries_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numinteriorring ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_numinteriorring_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numinteriorrings ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_numinteriorrings_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numinteriorring ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_numnuminteriorring_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numinteriorrings ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_numnuminteriorrings_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numpoints ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_numpoints_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "numpoints ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_numpoints_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "orderingequals ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_orderingequals_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "orderingequals ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_orderingequals_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "perimeter ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_perimeter_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "perimeter ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_perimeter_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "pointn ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_pointn_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "pointn ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_pointn_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "pointonsurface ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_pointonsurface_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "pointonsurface ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_pointonsurface_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "snaptogrid ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_snaptogrid_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "snaptogrid ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_snaptogrid_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "startpoint ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_startpoint_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "startpoint ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_startpoint_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "unionaggr ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_unionaggr_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "unionaggr ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_unionaggr_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "x ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_x_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "x ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_x_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "xmax ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_xmax_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "xmax ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_xmax_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "xmin ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_xmin_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "xmin ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_xmin_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "y ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_y_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "y ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_y_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ymax ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_ymax_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ymax ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_ymax_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ymin ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_ymin_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "ymin ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_ymin_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "z ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_z_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "z ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_z_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "zmax ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_zmax_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "zmax ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_zmax_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "zmin ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_zmin_on_geolatte"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "zmin ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_zmin_on_jts"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    dbexpected    =    hanaExpectationsFactory . getUnionAggr (  )  ;", "String   hql    =    String . format (  \" SELECT   cast ( count ( g )    as   int )  ,    unionaggr ( geom )    FROM   integration .  % s . GeomEntity   g \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["unionaggr"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getX (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    x ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Point '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["x"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getXMax (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    xmax ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["xmax"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getXMin (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    xmin ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["xmin"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getY (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    y ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Point '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["y"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getYMax (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    ymax ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["ymax"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getYMin (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    ymin ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["ymin"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getZ (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    z ( geom )    FROM   integration .  % s . GeomEntity   where   geometrytype ( geom )    in    (  ' ST _ Point '  )    and   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["z"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getZMax (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    zmax ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["zmax"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    dbexpected    =    hanaExpectationsFactory . getZMin (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    zmin ( geom )    FROM   integration .  % s . GeomEntity   where   srid ( geom )     =     % d \"  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["zmin"], "fileName": "org.hibernate.spatial.dialect.hana.TestHANASpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "mysqlFunctions . put (  \" contains \"  ,    new   StandardSQLFunction (  \" ST _ Contains \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" crosses \"  ,    new   StandardSQLFunction (  \" ST _ Crosses \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" disjoint \"  ,    new   StandardSQLFunction (  \" ST _ Disjoint \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" equals \"  ,    new   StandardSQLFunction (  \" ST _ Equals \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" intersects \"  ,    new   StandardSQLFunction (  \" ST _ Intersects \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" overlaps \"  ,    new   StandardSQLFunction (  \" ST _ Overlaps \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" touches \"  ,    new   StandardSQLFunction (  \" ST _ Touches \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "mysqlFunctions . put (  \" within \"  ,    new   StandardSQLFunction (  \" ST _ Within \"  ,    StandardBasicTypes . BOOLEAN )  )  ;", "return   mysqlFunctions ;", "}", "METHOD_END"], "methodName": ["overrideObjectShapeFunctions"], "fileName": "org.hibernate.spatial.dialect.mysql.MySQL56SpatialDialect"}, {"methodBody": ["METHOD_START", "{", "if    ( bytes    =  =    null )     {", "return   null ;", "}", "final   ByteBuffer   buffer    =    ByteBuffer . from ( bytes )  ;", "final   WkbDecoder   decoder    =    Wkb . newDecoder ( MY _ WKB )  ;", "return   decoder . decode ( buffer )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.mysql.MySQLGeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   buf    =    new   StringBuffer (  )  ;", "if    ( args . isEmpty (  )  )     {", "throw   new   IllegalArgumentExcep (  (  \" First   Argument   in   arglist   must   be   object   to    \"     +     \" which   method   is   applied \"  )  )  ;", "}", "buf . append ( args . get (  0  )  )  . append (  \"  .  \"  )  . append ( getName (  )  )  . append (  \"  (  )  \"  )  ;", "return   buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.hibernate.spatial.dialect.oracle.GetDimensionFunction"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   buf    =    new   StringBuffer (  )  ;", "if    ( args . isEmpty (  )  )     {", "throw   new   IllegalArgumentExcep (  (  \" First   Argument   in   arglist   must   be   object   to   which \"     +     \"    method   is   applied \"  )  )  ;", "}", "buf . append (  \" CASE    \"  )  . append ( args . get (  0  )  )  . append (  \"  .  \"  )  . append ( getName (  )  )  . append (  \"  (  )  \"  )  ;", "buf . append (  \"    WHEN    1    THEN    ' POINT '  \"  )  . append (  \"    WHEN    2    THEN    ' LINESTRING '  \"  )  . append (  \"    WHEN    3    THEN    ' POLYGON '  \"  )  . append (  \"    WHEN    5    THEN    ' MULTIPOINT '  \"  )  . append (  \"    WHEN    6    THEN    ' MULTILINE '  \"  )  . append (  \"    WHEN    7    THEN    ' MULTIPOLYGON '  \"  )  . append (  \"    END \"  )  ;", "return   buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.hibernate.spatial.dialect.oracle.GetGeometryTypeFunction"}, {"methodBody": ["METHOD_START", "{", "final   SDOGeometryTypeDescriptor   sdoGeometryTypeDescriptor    =    mkSdoGeometryTypeDescriptor ( serviceRegistry )  ;", "typeContributions . contributeType ( new   GeolatteGeometryType ( sdoGeometryTypeDescriptor )  )  ;", "typeContributions . contributeType ( new   JTSGeometryType ( sdoGeometryTypeDescriptor )  )  ;", "typeContributions . contributeJavaTypeDescriptor ( GeolatteGeometryJavaTypeDescriptor . INSTANCE )  ;", "typeContributions . contributeJavaTypeDescriptor ( JTSGeometryJavaTypeDescriptor . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["contributeTypes"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . sdoFunctions ;", "}", "METHOD_END"], "methodName": ["functionsToRegister"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "String   mask ;", "boolean   negate    =    false ;", "switch    ( Relation )     {", "case   SpatialRelation . INTERSECTS    :", "mask    =     \" ANYINTERACT \"  ;", "break ;", "case   SpatialRelation . CONTAINS    :", "mask    =     \" CONTAINS + COVERS \"  ;", "break ;", "case   SpatialRelation . CROSSES    :", "throw   new   UnsupportedOperationException (  \" Oracle   Spatial   does ' t   have   equivalent   CROSSES   relationship \"  )  ;", "case   SpatialRelation . DISJOINT    :", "mask    =     \" ANYINTERACT \"  ;", "negate    =    true ;", "break ;", "case   SpatialRelation . EQUALS    :", "mask    =     \" EQUAL \"  ;", "break ;", "case   SpatialRelation . OVERLAPS    :", "mask    =     \" OVERLAPBDYDISJOINT + OVERLAPBDYINTERSECT \"  ;", "break ;", "case   SpatialRelation . TOUCHES    :", "mask    =     \" TOUCH \"  ;", "break ;", "case   SpatialRelation . WITHIN    :", "mask    =     \" INSIDE + COVEREDBY \"  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  (  (  \" undefined   SpatialRelation   passed    (  \"     +    Relation )     +     \"  )  \"  )  )  ;", "}", "final   StringBuilder   buffer    =    new   StringBuilder (  \" CASE   SDO _ RELATE (  \"  )  . append ( arg 1  )  . append (  \"  ,  \"  )  . append ( arg 2  )  . append (  \"  ,  ' mask =  \"  )  . append ( mask )  . append (  \"  '  )     \"  )  ;", "if    (  ! negate )     {", "buffer . append (  \"    WHEN    ' TRUE '    THEN    1    ELSE    0    END \"  )  ;", "} else    {", "buffer . append (  \"    WHEN    ' TRUE '    THEN    0    ELSE    1    END \"  )  ;", "}", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getNativeSpatialRelateSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   ogcFunction    =    new   StringBuffer (  \" MDSYS .  \"  )  ;", "switch    ( Relation )     {", "case   SpatialRelation . INTERSECTS    :", "ogcFunction . append (  \" OGC _ INTERSECTS \"  )  ;", "break ;", "case   SpatialRelation . CONTAINS    :", "ogcFunction . append (  \" OGC _ CONTAINS \"  )  ;", "break ;", "case   SpatialRelation . CROSSES    :", "ogcFunction . append (  \" OGC _ CROSS \"  )  ;", "break ;", "case   SpatialRelation . DISJOINT    :", "ogcFunction . append (  \" OGC _ DISJOINT \"  )  ;", "break ;", "case   SpatialRelation . EQUALS    :", "ogcFunction . append (  \" OGC _ EQUALS \"  )  ;", "break ;", "case   SpatialRelation . OVERLAPS    :", "ogcFunction . append (  \" OGC _ OVERLAP \"  )  ;", "break ;", "case   SpatialRelation . TOUCHES    :", "ogcFunction . append (  \" OGC _ TOUCH \"  )  ;", "break ;", "case   SpatialRelation . WITHIN    :", "ogcFunction . append (  \" OGC _ WITHIN \"  )  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  (  (  \" Unknown   SpatialRelation    (  \"     +    Relation )     +     \"  )  .  \"  )  )  ;", "}", "ogcFunction . append (  \"  (  \"  )  . append (  \" MDSYS . ST _ GEOMETRY . FROM _ SDO _ GEOM (  \"  )  . append ( arg 1  )  . append (  \"  )  ,  \"  )  . append (  \" MDSYS . ST _ GEOMETRY . FROM _ SDO _ GEOM (  \"  )  . append ( arg 2  )  . append (  \"  )  \"  )  . append (  \"  )  \"  )  ;", "return   ogcFunction . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getOGCSpatialRelateSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     ( getNativeSpatialRelateSQL ( columnName ,     \"  ?  \"  ,    spatialRelation )  )     +     \"     =     1  \"  ;", "sql    +  =     (  \"    and    \"     +    columnName )     +     \"    is   not   null \"  ;", "return   sql ;", "}", "METHOD_END"], "methodName": ["getSDOSpatialRelateSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "final   ConfigurationService   cfgService    =    serviceRegistry . getService ( ConfigurationService . class )  ;", "final   StrategySelector   strategySelector    =    serviceRegistry . getService ( StrategySelector . class )  ;", "final   ConnectionFinder   connectionFinder    =    strategySelector . resolveStrategy ( ConnectionFinder . class ,    cfgService . getSetting ( HibernateSpatialConfigurationSettings . CONNECTION _ FINDER ,    String . class ,     \" DefaultConnectionFinder \"  )  )  ;", ". log . connectionFinder ( connectionFinder . getClass (  )  . getCanonicalName (  )  )  ;", "return   new   SDOGeometryTypeDescriptor ( new   OracleJDBCTypeFactory ( connectionFinder )  )  ;", "}", "METHOD_END"], "methodName": ["mkSdoGeometryTypeDescriptor"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport"}, {"methodBody": ["METHOD_START", "{", "return   OracleSpatialFunctions . getOGCSpatialAnalysisSQL ( args ,    spatialAnalysis )  ;", "}", "METHOD_END"], "methodName": ["getNativeSpatialAnalysisSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "boolean [  ]    geomArgs ;", "final   StringBuffer   ogcFunction    =    new   StringBuffer (  \" MDSYS .  \"  )  ;", "boolean   isGeomReturn    =    true ;", "switch    ( spatialAnalysisFunction )     {", "case   SpatialAnalysis . BUFFER    :", "ogcFunction . append (  \" OGC _ BUFFER \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    false    }  ;", "break ;", "case   SpatialAnalysis . CONVEXHULL    :", "ogcFunction . append (  \" OGC _ CONVEXHULL \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true    }  ;", "break ;", "case   SpatialAnalysis . DIFFERENCE    :", "ogcFunction . append (  \" OGC _ DIFFERENCE \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    true    }  ;", "break ;", "case   SpatialAnalysis . DISTANCE    :", "ogcFunction . append (  \" OGC _ DISTANCE \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    true    }  ;", "isGeomReturn    =    false ;", "break ;", "case   SpatialAnalysis . INTERSECTION    :", "ogcFunction . append (  \" OGC _ INTERSECTION \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    true    }  ;", "break ;", "case   SpatialAnalysis . SYMDIFFERENCE    :", "ogcFunction . append (  \" OGC _ SYMMETRICDIFFERENCE \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    true    }  ;", "break ;", "case   SpatialAnalysis . UNION    :", "ogcFunction . append (  \" OGC _ UNION \"  )  ;", "geomArgs    =    new   boolean [  ]  {    true ,    true    }  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  (  (  \" Unknown   SpatialAnalysisFunction    (  \"     +    spatialAnalysisFunction )     +     \"  )  .  \"  )  )  ;", "}", "if    (  ( args . size (  )  )     <     ( geomArgs . length )  )     {", "throw   new   QueryException (  (  (  \" Insufficient   arguments   for   spatial   analysis   function    ( function   type :        \"     +    spatialAnalysisFunction )     +     \"  )  .  \"  )  )  ;", "}", "ogcFunction . append (  \"  (  \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( geomArgs . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "ogcFunction . append (  \"  ,  \"  )  ;", "}", "if    ( geomArgs [ i ]  )     {", ". wrapInSTGeometry (  (  ( String )     ( args . get ( i )  )  )  ,    ogcFunction )  ;", "} else    {", "ogcFunction . append ( args . get ( i )  )  ;", "}", "}", "ogcFunction . append (  \"  )  \"  )  ;", "if    ( isGeomReturn )     {", "ogcFunction . append (  \"  . geom \"  )  ;", "}", "return   ogcFunction . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getOGCSpatialAnalysisSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "return   OracleSpatialFunctions . getOGCSpatialAnalysisSQL ( args ,    spatialAnalysisFunction )  ;", "}", "METHOD_END"], "methodName": ["getSpatialAnalysisSQL"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "return   toAdd . append (  \" MDSYS . ST _ GEOMETRY (  \"  )  . append ( geomColumn )  . append (  \"  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["wrapInSTGeometry"], "fileName": "org.hibernate.spatial.dialect.oracle.OracleSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "final   String   value    =    rs . getString ( name )  ;", "if    ( rs . wasNull (  )  )     {", "return   getDefaultValue (  )  ;", "} else", "if    (  \" TRUE \"  . equalsIgnoreCase ( value )  )     {", "return    . TRUE ;", "} else    {", "return    . FALSE ;", "}", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOBooleanType"}, {"methodBody": ["METHOD_START", "{", "return    \" sdo _ boolean \"  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOBooleanType"}, {"methodBody": ["METHOD_START", "{", "return   value    ?     \"  ' TRUE '  \"     :     \"  ' FALSE '  \"  ;", "}", "METHOD_END"], "methodName": ["objectToSQLString"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOBooleanType"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "st . setNull ( index ,    s . VARCHAR )  ;", "} else    {", "st . setString ( index ,     ( value    ?     \" TRUE \"     :     \" FALSE \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOBooleanType"}, {"methodBody": ["METHOD_START", "{", "return    \" MDSYS . SDO _ GEOMETRY \"  ;", "}", "METHOD_END"], "methodName": ["getTypeName"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOGeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   typeFactory . createStruct ( geom ,    conn )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOGeometryValueBinder"}, {"methodBody": ["METHOD_START", "{", "try    {", "final      sdoGeom    =    Encoders . encode ( geom )  ;", "return   store ( sdoGeom ,    connection )  ;", "}    catch    ( SQLException   e )     {", "throw   new   HibernateException (  \" Problem   during   conversion   from   JTS   to    \"  ,    e )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   HibernateException ( e . getMessage (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   HibernateException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["toNative"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOGeometryValueBinder"}, {"methodBody": ["METHOD_START", "{", "if    ( struct    =  =    null )     {", "return   null ;", "}", "final      sdogeom    =     . load (  (  ( Struct )     ( struct )  )  )  ;", "return   toGeomerty ( sdogeom )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOGeometryValueExtractor"}, {"methodBody": ["METHOD_START", "{", "return   Decoders . decode ( sdoGeom )  ;", "}", "METHOD_END"], "methodName": ["toGeomerty"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOGeometryValueExtractor"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectMethod"}, {"methodBody": ["METHOD_START", "{", "return    ( type )     =  =    null    ?    columnType    :    type ;", "}", "METHOD_END"], "methodName": ["getReturnType"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectMethod"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["hasArguments"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectMethod"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["hasParenthesesIfNoArguments"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectMethod"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   buf    =    new   StringBuffer (  )  ;", "if    ( args . isEmpty (  )  )     {", "throw   new   QueryException (  \" First   Argument   in   arglist   must   be   o   to   which   method   is   applied \"  )  ;", "}", "buf . append ( args . get (  0  )  )  . append (  \"  .  \"  )  . append ( name )  . append (  '  (  '  )  ;", "for    ( int   i    =     1  ;    i    <     ( args . size (  )  )  ;    i +  +  )     {", "buf . append ( args . get ( i )  )  ;", "if    ( i    <     (  ( args . size (  )  )     -     1  )  )     {", "buf . append (  \"  ,     \"  )  ;", "}", "}", "return   buf . append (  '  )  '  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectMethod"}, {"methodBody": ["METHOD_START", "{", "return   this . name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectProperty"}, {"methodBody": ["METHOD_START", "{", "return    ( type )     =  =    null    ?    columnType    :    type ;", "}", "METHOD_END"], "methodName": ["getReturnType"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectProperty"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["hasArguments"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectProperty"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["hasParenthesesIfNoArguments"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectProperty"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   buf    =    new   StringBuffer (  )  ;", "if    ( args . isEmpty (  )  )     {", "throw   new   QueryException (  \" First   Argument   in   arglist   must   be   object   of   which   p   is   queried \"  )  ;", "}", "buf . append ( args . get (  0  )  )  . append (  \"  .  \"  )  . append ( name )  ;", "return   buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.hibernate.spatial.dialect.oracle.SDOObjectProperty"}, {"methodBody": ["METHOD_START", "{", "return   aggregateSyntax ;", "}", "METHOD_END"], "methodName": ["getAggregateSyntax"], "fileName": "org.hibernate.spatial.dialect.oracle.SpatialAggregate"}, {"methodBody": ["METHOD_START", "{", "return   aggregateType ;", "}", "METHOD_END"], "methodName": ["isAggregateType"], "fileName": "org.hibernate.spatial.dialect.oracle.SpatialAggregate"}, {"methodBody": ["METHOD_START", "{", "return   Spatial . class . isAssignableFrom ( type . getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["isSpatial"], "fileName": "org.hibernate.spatial.dialect.oracle.WrappedOGCFunction"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   buf    =    new   StringBuilder (  )  ;", "buf . nd (  \" MDSYS .  \"  )  . nd ( getName (  )  )  . nd (  \"  (  \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( args . size (  )  )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "buf . nd (  \"  ,  \"  )  ;", "}", "if    ( geomArrays [ i ]  )     {", "buf . nd (  \" MDSYS . ST _ GEOMETRY . FROM _ SDO _ GEOM (  \"  )  . nd ( args . get ( i )  )  . nd (  \"  )  \"  )  ;", "} else    {", "buf . nd ( args . get ( i )  )  ;", "}", "}", "buf . nd (  \"  )  \"  )  ;", "return   isGeometryTyped    ?    buf . nd (  \"  . geom \"  )  . toString (  )     :    buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.hibernate.spatial.dialect.oracle.WrappedOGCFunction"}, {"methodBody": ["METHOD_START", "{", "return   new   TypedValue [  ]  {    criteriaQuery . getTypedValue ( criteria ,    propertyName ,    value )     }  ;", "}", "METHOD_END"], "methodName": ["getTypedValues"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialCriterion"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialProjection ( OracleSpatialAggregate . CENTROID ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["centroid"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialProjections"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialProjection ( OracleSpatialAggregate . CONCAT _ LINES ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["concatLines"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialProjections"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialProjection ( OracleSpatialAggregate . LRS _ CONCAT ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["concatLrs"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialProjections"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialProjection ( projection ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["projection"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialProjections"}, {"methodBody": ["METHOD_START", "{", "if    (  ( minResolution    =  =    null )     &  &     ( maxResolution    =  =    null )  )     {", "return    . SDOFilter ( propertyName ,    geom ,    null )  ;", "} else    {", "final   SDOParameterMap   param    =    new   SDOParameterMap (  )  ;", "param . setMinResolution ( minResolution )  ;", "param . setMaxResolution ( maxResolution )  ;", "return    . SDOFilter ( propertyName ,    geom ,    param )  ;", "}", "}", "METHOD_END"], "methodName": ["SDOFilter"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialCriterion ( propertyName ,    geom ,    param )     {", "@ Override", "public   String   toSqlString ( Criteria   criteria ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "final   String [  ]    columns    =    criteriaQuery . getColumnsUsingProjection ( criteria ,    this . propertyName )  ;", "final   StringBuilder   sql    =    new   StringBuilder (  \" SDO _ FILTER (  \"  )  ;", "sql . append ( columns [  0  ]  )  . append (  \"  ,  \"  )  . append (  \"  ?  \"  )  ;", "if    (  (  ( param )     !  =    null )     &  &     (  !  ( param . isEmpty (  )  )  )  )     {", "sql . append (  \"  ,  \"  )  . append ( param . toQuotedString (  )  )  ;", "}", "sql . append (  \"  )     =     ' TRUE '  \"  )  ;", "return   sql . toString (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["SDOFilter"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( distance    =  =    null )     &  &     ( numResults    =  =    null )  )     &  &     ( unit    =  =    null )  )     {", "return    . SDONN ( propertyName ,    geom ,    null )  ;", "} else    {", "final   SDOParameterMap   param    =    new   SDOParameterMap (  )  ;", "param . setDistance ( distance )  ;", "param . setSdoNumRes ( numResults )  ;", "param . setUnit ( unit )  ;", "return    . SDONN ( propertyName ,    geom ,    param )  ;", "}", "}", "METHOD_END"], "methodName": ["SDONN"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialCriterion ( propertyName ,    geom ,    param )     {", "@ Override", "public   String   toSqlString ( Criteria   criteria ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "final   String [  ]    columns    =    criteriaQuery . getColumnsUsingProjection ( criteria ,    this . propertyName )  ;", "final   StringBuilder   sql    =    new   StringBuilder (  \" SDO _ NN (  \"  )  ;", "sql . append ( columns [  0  ]  )  . append (  \"  ,  \"  )  . append (  \"  ?  \"  )  ;", "if    (  (  ( param )     !  =    null )     &  &     (  !  ( param . isEmpty (  )  )  )  )     {", "sql . append (  \"  ,  \"  )  . append ( param . toQuotedString (  )  )  ;", "}", "sql . append (  \"  )     =     ' TRUE '  \"  )  ;", "return   sql . toString (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["SDONN"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "final   SDOParameterMap   param    =    new   SDOParameterMap (  )  ;", "param . setMask ( RelationshipMask . booleanCombination ( mask )  )  ;", "param . setMinResolution ( minResolution )  ;", "param . setMaxResolution ( maxResolution )  ;", "return    . SDORelate ( propertyName ,    geom ,    param )  ;", "}", "METHOD_END"], "methodName": ["SDORelate"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialCriterion ( propertyName ,    geom ,    param )     {", "@ Override", "public   String   toSqlString ( Criteria   criteria ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "final   String [  ]    columns    =    criteriaQuery . getColumnsUsingProjection ( criteria ,    this . propertyName )  ;", "final   StringBuilder   sql    =    new   StringBuilder (  \" SDO _ RELATE (  \"  )  ;", "sql . append ( columns [  0  ]  )  . append (  \"  ,  \"  )  . append (  \"  ?  \"  )  ;", "if    (  (  ( param )     !  =    null )     &  &     (  !  ( param . isEmpty (  )  )  )  )     {", "sql . append (  \"  ,  \"  )  . append ( param . toQuotedString (  )  )  ;", "}", "sql . append (  \"  )     =     ' TRUE '  \"  )  ;", "return   sql . toString (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["SDORelate"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    ( param    =  =    null )     {", "param    =    new   SDOParameterMap (  )  ;", "}", "param . setDistance ( distance )  ;", "return    . SDOWithinDistance ( propertyName ,    geom ,    param )  ;", "}", "METHOD_END"], "methodName": ["SDOWithinDistance"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   new   OracleSpatialCriterion ( propertyName ,    geom ,    param )     {", "@ Override", "public   String   toSqlString ( Criteria   criteria ,    CriteriaQuery   criteriaQuery )    throws   HibernateException    {", "final   String [  ]    columns    =    criteriaQuery . getColumnsUsingProjection ( criteria ,    this . propertyName )  ;", "final   StringBuilder   sql    =    new   StringBuilder (  \" SDO _ WITHIN _ DISTANCE (  \"  )  ;", "sql . append ( columns [  0  ]  )  . append (  \"  ,  \"  )  . append (  \"  ?  \"  )  ;", "if    (  (  ( param )     !  =    null )     &  &     (  !  ( param . isEmpty (  )  )  )  )     {", "sql . append (  \"  ,  \"  )  . append ( param . toQuotedString (  )  )  ;", "}", "sql . append (  \"  )     =     ' TRUE '  \"  )  ;", "return   sql . toString (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["SDOWithinDistance"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.OracleSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "String   strMask    =    null ;", "for    (    relationshipMask    :    masks )     {", "if    ( strMask    =  =    null )     {", "strMask    =    relationshipMask . toString (  )  ;", "} else    {", "strMask    +  =     \"  +  \"     +     ( relationshipMask . toString (  )  )  ;", "}", "}", "return   strMask ;", "}", "METHOD_END"], "methodName": ["booleanCombination"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.RelationshipMask"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Double )     ( params . get ( SDOParameterMap . DISTANCE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( this . params . get ( SDOParameterMap . MASK )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMask"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Double )     ( params . get ( SDOParameterMap . MAX _ RESOLUTION )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMaxResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Double )     ( params . get ( SDOParameterMap . MIN _ RESOLUTION )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMinResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( this . params . get ( SDOParameterMap . QUERYTYPE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getQueryType"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Integer )     ( params . get ( SDOParameterMap . SDO _ BATCH _ SIZE )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSdoBatchSize"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Integer )     ( params . get ( SDOParameterMap . SDO _ NUM _ RES )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSdoNumRes"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( this . params . get ( SDOParameterMap . UNIT )  )  )  ;", "}", "METHOD_END"], "methodName": ["getUnit"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "return   this . params . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "params . remove ( SDOParameterMap . DISTANCE )  ;", "}", "METHOD_END"], "methodName": ["removeDistance"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "this . params . remove ( SDOParameterMap . MASK )  ;", "}", "METHOD_END"], "methodName": ["removeMask"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "params . remove ( SDOParameterMap . MAX _ RESOLUTION )  ;", "}", "METHOD_END"], "methodName": ["removeMaxResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "params . remove ( SDOParameterMap . MIN _ RESOLUTION )  ;", "}", "METHOD_END"], "methodName": ["removeMinResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "this . params . remove ( SDOParameterMap . QUERYTYPE )  ;", "}", "METHOD_END"], "methodName": ["removeQueryType"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "params . remove ( SDOParameterMap . SDO _ BATCH _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["removeSdoBatchSize"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "params . remove ( SDOParameterMap . SDO _ NUM _ RES )  ;", "}", "METHOD_END"], "methodName": ["removeSdoNumRes"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "this . params . remove ( SDOParameterMap . UNIT )  ;", "}", "METHOD_END"], "methodName": ["removeUnit"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( distance    !  =    null )     {", "params . put (  . DISTANCE ,    distance )  ;", "}", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( mask    !  =    null )     {", "this . params . put (  . MASK ,    mask )  ;", "}", "}", "METHOD_END"], "methodName": ["setMask"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( res    !  =    null )     {", "params . put (  . MAX _ RESOLUTION ,    res )  ;", "}", "}", "METHOD_END"], "methodName": ["setMaxResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( res    !  =    null )     {", "params . put (  . MIN _ RESOLUTION ,    res )  ;", "}", "}", "METHOD_END"], "methodName": ["setMinResolution"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( queryType    !  =    null )     {", "this . params . put (  . QUERYTYPE ,    queryType )  ;", "}", "}", "METHOD_END"], "methodName": ["setQueryType"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "this . params . put ( SDOParameterMap . QUERYTYPE ,     \" FILTER \"  )  ;", "}", "METHOD_END"], "methodName": ["setQueryTypeToFilter"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( size    !  =    null )     {", "params . put (  . SDO _ BATCH _ SIZE ,    size )  ;", "}", "}", "METHOD_END"], "methodName": ["setSdoBatchSize"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( res    !  =    null )     {", "params . put (  . SDO _ NUM _ RES ,    res )  ;", "}", "}", "METHOD_END"], "methodName": ["setSdoNumRes"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "if    ( unit    !  =    null )     {", "this . params . put (  . UNIT ,    unit )  ;", "}", "}", "METHOD_END"], "methodName": ["setUnit"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   stb    =    new   StringBuilder (  )  ;", "if    ( ps . isEmpty (  )  )     {", "return    \"  \"  ;", "}", "stb . append (  '  \\  '  '  )  ;", "for    ( Map . Entry < String ,    Object >    kv    :    ps . entrySet (  )  )     {", "if    (  ( kv . getValue (  )  )     =  =    null )     {", "continue ;", "}", "stb . append ( kv . getKey (  )  )  . append (  \"  =  \"  )  . append ( kv . getValue (  )  )  . append (  \"     \"  )  ;", "}", "stb . deleteCharAt (  (  ( stb . length (  )  )     -     1  )  )  ;", "stb . append (  '  \\  '  '  )  ;", "return   stb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toQuotedString"], "fileName": "org.hibernate.spatial.dialect.oracle.criterion.SDOParameterMap"}, {"methodBody": ["METHOD_START", "{", "final   WktDecoder   decoder    =    Wkt . newDecoder ( POSTGIS _ EWKT _  1  )  ;", "return   decoder . decode ( pgValue )  ;", "}", "METHOD_END"], "methodName": ["parseWkt"], "fileName": "org.hibernate.spatial.dialect.postgis.PGGeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( object    =  =    null )     {", "return   null ;", "}", "ByteBuffer   buffer    =    null ;", "if    ( object   instanceof   PGobject )     {", "String   pgValue    =     (  ( PGobject )     ( object )  )  . getValue (  )  ;", "if    (  ( pgValue . startsWith (  \"  0  0  \"  )  )     |  |     ( pgValue . startsWith (  \"  0  1  \"  )  )  )     {", "buffer    =    ByteBuffer . from ( pgValue )  ;", "final   WkbDecoder   decoder    =    Wkb . newDecoder ( POSTGIS _ EWKB _  1  )  ;", "return   decoder . decode ( buffer )  ;", "} else    {", "return    . parseWkt ( pgValue )  ;", "}", "}", "throw   new   IllegalStateException (  (  \" Received   object   of   type    \"     +     ( object . getClass (  )  . getCanonicalName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.postgis.PGGeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "for    ( SpatialFunction   sf    :    SpatialFunction . values (  )  )     {", "assertTrue (  (  \" Dialect   doesn ' t   support    \"     +    sf )  ,    supports ( sf )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSupports"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisDialectTest"}, {"methodBody": ["METHOD_START", "{", "typeContributions . contributeType ( new   GeolatteGeometryType ( PGGeometryTypeDescriptor . INSTANCE )  )  ;", "typeContributions . contributeType ( new   JTSGeometryType ( PGGeometryTypeDescriptor . INSTANCE )  )  ;", "typeContributions . contributeJavaTypeDescriptor ( GeolatteGeometryJavaTypeDescriptor . INSTANCE )  ;", "typeContributions . contributeJavaTypeDescriptor ( JTSGeometryJavaTypeDescriptor . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["contributeTypes"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisSupport"}, {"methodBody": ["METHOD_START", "{", "return   postgisFunctions ;", "}", "METHOD_END"], "methodName": ["functionsToRegister"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisSupport"}, {"methodBody": ["METHOD_START", "{", "PGobject   pgo    =    new   PGobject (  )  ;", "pgo . setValue ( pgValue )  ;", "Geometry <  ?  >    received    =    PGGeometryTypeDescriptor . toGeometry ( pgo )  ;", "assertEquals ( String . format (  \" Failure   on    % s \"  ,    pgValue )  ,    expected ,    received )  ;", "}", "METHOD_END"], "methodName": ["testCase"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisUnmarshalTest"}, {"methodBody": ["METHOD_START", "{", "String   wkb    =    Wkb . toWkb ( geom ,    NDR )  . toString (  )  ;", "tCase ( wkb ,    geom )  ;", "}", "METHOD_END"], "methodName": ["testWkbNDR"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisUnmarshalTest"}, {"methodBody": ["METHOD_START", "{", "String   wkb    =    Wkb . toWkb ( geom ,    XDR )  . toString (  )  ;", "tCase ( wkb ,    geom )  ;", "}", "METHOD_END"], "methodName": ["testWkbXDR"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisUnmarshalTest"}, {"methodBody": ["METHOD_START", "{", "String   ewkt    =    Wkt . toWkt ( geom )  ;", "tCase ( ewkt ,    geom )  ;", "}", "METHOD_END"], "methodName": ["testWktWithSrid"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisUnmarshalTest"}, {"methodBody": ["METHOD_START", "{", "String   wkt    =    Wkt . toWkt ( geom )  . split (  \"  ;  \"  )  [  1  ]  ;", "testCase ( wkt ,    geomNoSrid )  ;", "}", "METHOD_END"], "methodName": ["testWktWithoutSrid"], "fileName": "org.hibernate.spatial.dialect.postgis.PostgisUnmarshalTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   blob . getBytes (  1  ,     (  ( int )     ( blob . length (  )  )  )  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException (  \" Error   on   transforming   blob   into   array .  \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["toByteArray"], "fileName": "org.hibernate.spatial.dialect.sqlserver.SqlServer2008GeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    raw    =    null ;", "if    ( obj    =  =    null )     {", "return   null ;", "}", "if    ( obj   instanceof   byte [  ]  )     {", "raw    =     (  ( byte [  ]  )     ( obj )  )  ;", "} else", "if    ( obj   instanceof   Blob )     {", "raw    =    toByteArray (  (  ( Blob )     ( obj )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" Expected   byte   array   or   BLOB \"  )  ;", "}", "return   Decoders . decode ( raw )  ;", "}", "METHOD_END"], "methodName": ["toGeometry"], "fileName": "org.hibernate.spatial.dialect.sqlserver.SqlServer2008GeometryTypeDescriptor"}, {"methodBody": ["METHOD_START", "{", "String   expectedText    =     ( storedGeometry    !  =    null )     ?    storedGeometry . toString (  )     :     \" NULL \"  ;", "String   rdText    =     ( rdGeometry    !  =    null )     ?    rdGeometry . toString (  )     :     \" NULL \"  ;", "return   String . format (  \" Equality   testsuite - suite   failed   for    % d .  % nExpected :     % s % nReceived :  % s \"  ,    id ,    expectedText ,    rdText )  ;", "}", "METHOD_END"], "methodName": ["createFailureMessage"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "int   id    =     -  1  ;", "Transaction   tx    =    null ;", "Session   session    =    null ;", "GeometryEquality < G >    geomEq    =    getGeometryEquality (  )  ;", "try    {", "session    =     . openSession (  )  ;", "tx    =    session . beginTransaction (  )  ;", "for    ( E   storedEntity    :    stored . values (  )  )     {", "id    =    storedEntity . getId (  )  ;", "E   retrievedEntity    =     (  ( E )     ( session . get ( getGeomEntityClass (  )  ,    id )  )  )  ;", "G   retrievedGeometry    =    retrievedEntity . getGeom (  )  ;", "G   storedGeometry    =    storedEntity . getGeom (  )  ;", "String   msg    =    createFailureMessage ( storedEntity . getId (  )  ,    storedGeometry ,    retrievedGeometry )  ;", ". assertTrue ( msg ,    geomEq . test ( storedGeometry ,    retrievedGeometry )  )  ;", "}", "tx . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "throw   new   RuntimeException ( String . format (  \" Failure   on   case :     % d \"  ,    id )  ,    e )  ;", "}    finally    {", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["retrieveAndCompare"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "Transaction   tx    =    null ;", "Session   session    =    null ;", "try    {", "session    =     . openSession (  )  ;", "tx    =    session . beginTransaction (  )  ;", "Criteria   criteria    =    session . createCriteria ( GeomEntity . class )  ;", "List < GeomEntity >    retrieved    =    criteria . list (  )  ;", ". assertEquals (  \" Expected   exactly   one   result \"  ,     1  ,    retrieved . size (  )  )  ;", "GeomEntity   entity    =    retrieved . get (  0  )  ;", "assertNull ( entity . getGeom (  )  )  ;", "tx . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "throw   new   RuntimeException ( e )  ;", "}    finally    {", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["retrieveNullGeometry"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "GeomEntity   entity    =    null ;", "Session   session    =    null ;", "Transaction   tx    =    null ;", "try    {", "session    =     . openSession (  )  ;", "tx    =    session . beginTransaction (  )  ;", "entity    =    new   GeomEntity (  )  ;", "entity . setId (  1  )  ;", "entity . setType (  \" NULL   OBJECT \"  )  ;", "session . save ( entity )  ;", "tx . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "Integer   id    =     ( entity    !  =    null )     ?    entity . getId (  )     :     -  1  ;", "throw   new   RuntimeException (  (  \" Failed   storing   testsuite - suite   object   with   id :  \"     +    id )  ,    e )  ;", "}    finally    {", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["storeNullGeometry"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    null ;", "Transaction   tx    =    null ;", "int   id    =     -  1  ;", "try    {", "session    =     . openSession (  )  ;", "Dialect   dialect    =     . sessionFactory (  )  . getJdbcServices (  )  . getDialect (  )  ;", "for    ( TestDataElement   element    :    testData )     {", "id    =    element . id ;", "tx    =    session . beginTransaction (  )  ;", "E   entity    =    createFrom ( element ,    dialect )  ;", "stored . put ( entity . getId (  )  ,    entity )  ;", "session . save ( entity )  ;", "tx . commit (  )  ;", "}", "}    catch    ( Exception   e )     {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "throw   new   RuntimeException (  (  \" Failed   storing   testsuite - suite   object   with   id :  \"     +    id )  ,    e )  ;", "}    finally    {", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["storeTestObjects"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    E >    stored    =    new   HashMap <  >  (  )  ;", "storeTestObjects ( stored )  ;", "rAndCompare ( stored )  ;", "}", "METHOD_END"], "methodName": ["testAfterStoreRetrievingEqualObject"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "storeNullGeometry (  )  ;", "rNullGeometry (  )  ;", "}", "METHOD_END"], "methodName": ["testStoringNullGeometries"], "fileName": "org.hibernate.spatial.integration.AbstractTestStoreRetrieve"}, {"methodBody": ["METHOD_START", "{", "WktDecoder   decoder    =    null ;", "if    ( dialect   instanceof   AbstractHANADialect )     {", "decoder    =    Wkt . newDecoder ( HANA _ EWKT )  ;", "} else", "if    ( dialect   instanceof   dialect . db 2  . DB 2 SpatialDialect )     {", "decoder    =    Wkt . newDecoder ( Wkt . Dialect . DB 2  _ WKT )  ;", "} else    {", "decoder    =    Wkt . newDecoder ( Wkt . Dialect . POSTGIS _ EWKT _  1  )  ;", "}", "return   decoder ;", "}", "METHOD_END"], "methodName": ["getWktDecoder"], "fileName": "org.hibernate.spatial.integration.DecodeUtil"}, {"methodBody": ["METHOD_START", "{", "return   integrationEnabled ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "org.hibernate.spatial.integration.SpatialService"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . asbinary )  )  )     {", "return ;", "}", "Map < Integer ,    byte [  ]  >    dbexpected    =    expectationsFactory . getAsBinary (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    asbinary ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["asbinary"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . astext )  )  )     {", "return ;", "}", "Map < Integer ,    String >    dbexpected    =    expectationsFactory . getAsText (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    astext ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["astext"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . boundary )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getBoundary (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    boundary ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["boundary"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . buffer )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getBuffer ( Double . valueOf (  1  .  0  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    buffer ( geom ,     : distance )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" distance \"  ,    Double . valueOf (  1  .  0  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["buffer"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . contains )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getContains ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    contains ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   contains ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . convexhull )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getConvexHull ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    convexhull ( geomunion ( geom ,     : polygon )  )    from    \"     +     \"  .  % s . GeomEntity   where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" polygon \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["convexhull"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    params    =    new   HashMap < String ,    Object >  (  )  ;", "params . put ( filterParamName ,    value )  ;", "return   params ;", "}", "METHOD_END"], "methodName": ["createQueryParams"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . crosses )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getCrosses ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    crosses ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   crosses ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["crosses"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . difference )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getDifference ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    difference ( geom ,     : polygon )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" polygon \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["difference"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . dimension )  )  )     {", "return ;", "}", "Map < Integer ,    Integer >    dbexpected    =    expectationsFactory . getDimension (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    dimension ( geom )    FROM    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["dimension"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . disjoint )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getDisjoint ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    disjoint ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   disjoint ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["disjoint"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . distance )  )  )     {", "return ;", "}", "Map < Integer ,    Double >    dbexpected    =    expectationsFactory . getDistance ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    distance ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["distance"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    null ;", "Transa   tx    =    null ;", "try    {", "session    =    openSession (  )  ;", "tx    =    session . beginTransa (  )  ;", "Query   query    =    session . createQuery ( hql )  ;", "setParameters ( params ,    query )  ;", "addQueryResults ( result ,    query )  ;", "}    finally    {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["doInSession"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . dwithin )  )  )     {", "return ;", "}", "double   distance    =     3  0  .  0  ;", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getDwithin ( expectationsFactory . getTestPoint (  )  ,    distance )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    dwithin ( geom ,     : filter ,     : distance )    from    \"     +     (  \"  % s . GeomEntity   where   dwithin ( geom ,     : filter ,     : distance )     =    true    \"     +     \" and   srid ( geom )     =     % d \"  )  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPoint (  )  )  ;", "if    (  ( getDialect (  )  )    instanceof   OracleSpatial 1  0 gDialect )     {", "hql    =     \" SELECT   id ,    issimple ( geom )    from   GeomEntity   where   dwithin ( geom ,     : filter ,     : distance )     =    true   and   srid ( geom )     =     \"     +     ( expectationsFactory . getTestSrid (  )  )  ;", "params . put (  \" distance \"  ,     \" distance    =     3  0  \"  )  ;", "} else    {", "params . put (  \" distance \"  ,     3  0  .  0  )  ;", "}", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["dwithin"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . envelope )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getEnvelope (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    envelope ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["envelope"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . equals )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getEquals ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    equals ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   equals ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . extent )  )  )     {", "return ;", "}", "String   hql    =    String . format (  \" SELECT   id ,    extent ( geom )    from    % s . GeomEntity   group   by   id \"  ,    pckg )  ;", "Map < Integer ,    Object >    hsreceived    =    new   HashMap < Integer ,    Object >  (  )  ;", "doInSession ( hql ,    hsreceived ,    new   HashMap < String ,    Object >  (  )  )  ;", "}", "METHOD_END"], "methodName": ["extent"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . geometrytype )  )  )     {", "return ;", "}", "Map < Integer ,    String >    dbexpected    =    expectationsFactory . getGeometryType (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    geometrytype ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geometrytype"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . geomunion )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getGeomUnion ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    geomunion ( geom ,     : polygon )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" polygon \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["geomunion"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "return   TestSpatialFunctions . LOG ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . intersection )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getIntersection ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    intersection ( geom ,     : polygon )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" polygon \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["intersection"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . intersects )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIntersects ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    intersects ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   intersects ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["intersects"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . isempty )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIsEmpty (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    isEmpty ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["isempty"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . issimple )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIsSimple (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    issimple ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["issimple"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . overlaps )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getOverlaps ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    overlaps ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   overlaps ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . relate )  )  )     {", "return ;", "}", "String   matrix    =     \" T * T *  *  * T *  *  \"  ;", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getRelate ( expectationsFactory . getTestPolygon (  )  ,    matrix )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    relate ( geom ,     : filter ,     : matrix )    from    % s . GeomEntity    \"     +     \" where   relate ( geom ,     : filter ,     : matrix )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "params . put (  \" matrix \"  ,    matrix )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "matrix    =     \" FF * FF *  *  *  *  \"  ;", "dbexpected    =    expectationsFactory . getRelate ( expectationsFactory . getTestPolygon (  )  ,    matrix )  ;", "params . put (  \" matrix \"  ,    matrix )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["relate"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    null ,    geometryType )  ;", "}", "METHOD_END"], "methodName": ["retrieveHQLResultsAndCompare"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    T >    hsreceived    =    new   HashMap < Integer ,    T >  (  )  ;", "doInSession ( hql ,    hsreceived ,    params )  ;", "compare ( dbexpected ,    hsreceived ,    geometryType )  ;", "}", "METHOD_END"], "methodName": ["retrieveHQLResultsAndCompare"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( params    =  =    null )     {", "return ;", "}", "for    ( Map . Entry < String ,    Object >    entry    :    params . entrySet (  )  )     {", "query . setParameter ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setParameters"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . srid )  )  )     {", "return ;", "}", "Map < Integer ,    Integer >    dbexpected    =    expectationsFactory . getSrid (  )  ;", "String   hql    =    String . format (  \" SELECT   id ,    srid ( geom )    from    % s . GeomEntity \"  ,    pckg )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["srid"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . symdifference )  )  )     {", "return ;", "}", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getSymDifference ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    symdifference ( geom ,     : polygon )    from    \"     +     \"  % s . GeomEntity   where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" polygon \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["symdifference"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asbinary ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_asbinary_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "asbinary ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_asbinary_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "astext ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_astext_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "astext ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_astext_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "boundary ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_boundary_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "boundary ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_boundary_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "buffer ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_buffer_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "buffer ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_buffer_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "contains ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_contains_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "contains ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_contains_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "convexhull ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_convexhull_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "convexhull ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_convexhull_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "crosses ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_crosses_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "crosses ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_crosses_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "difference ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_difference_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "difference ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_difference_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "dimension ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_dimension_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "dimension ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_dimension_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "disjoint ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_disjoint_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "disjoint ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_disjoint_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "distance ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_distance_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "distance ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_distance_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "dwithin ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_dwithin_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "dwithin ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_dwithin_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "envelope ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_envelope_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "envelope ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_envelope_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "equals ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_equals_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "equals ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_equals_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "extent ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_extent_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "extent ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_extent_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geometrytype ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geometrytype_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geometrytype ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geometrytype_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomunion ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_geomunion_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "geomunion ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_geomunion_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersection ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_intersection_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersection ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_intersection_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersects ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_intersects_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "intersects ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_intersects_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isempty ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_isempty_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "isempty ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_isempty_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "issimple ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_issimple_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "issimple ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_issimple_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "overlaps ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_overlaps_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "overlaps ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_overlaps_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "relate ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_relate_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "relate ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_relate_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "srid ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_srid_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "srid ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_srid_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "symdifference ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_symdifference_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "symdifference ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_symdifference_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "touches ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_touches_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "touches ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_touches_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "transform ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_transform_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "transform ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_transform_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "within ( SpatialFunctionalTestCase . GEOLATTE )  ;", "}", "METHOD_END"], "methodName": ["test_within_on_geolatte"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "within ( SpatialFunctionalTestCase . JTS )  ;", "}", "METHOD_END"], "methodName": ["test_within_on_jts"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . touches )  )  )     {", "return ;", "}", "String   hql    =    String . format (  (  \" SELECT   id ,    touches ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   touches ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getTouches ( expectationsFactory . getTestPolygon (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["touches"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . transform )  )  )     {", "return ;", "}", "int   epsg    =     4  3  2  4  ;", "Map < Integer ,    Geometry >    dbexpected    =    expectationsFactory . getTransform ( epsg )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    transform ( geom ,     : epsg )    from    % s . GeomEntity    \"     +     \" where   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" epsg \"  ,    Integer . valueOf ( epsg )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . within )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getWithin ( expectationsFactory . getTestPolygon (  )  )  ;", "String   hql    =    String . format (  (  \" SELECT   id ,    within ( geom ,     : filter )    from    % s . GeomEntity    \"     +     \" where   within ( geom ,     : filter )     =    true   and   srid ( geom )     =     % d \"  )  ,    pckg ,    expectationsFactory . getTestSrid (  )  )  ;", "Map < String ,    Object >    params    =    createQueryParams (  \" filter \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveHQLResultsAndCompare ( dbexpected ,    hql ,    params ,    pckg )  ;", "}", "METHOD_END"], "methodName": ["within"], "fileName": "org.hibernate.spatial.integration.TestSpatialFunctions"}, {"methodBody": ["METHOD_START", "{", "int   cnt    =     0  ;", "for    ( Map . Entry < Integer ,    Boolean >    entry    :    dbexpected . entrySet (  )  )     {", "if    ( entry . getValue (  )  )     {", "cnt +  +  ;", "if    (  !  ( findInList ( entry . getKey (  )  ,     (  ( List < GeomEntity >  )     ( list )  )  )  )  )     {", "fail ( String . format (  \" Expected   object   with   id =     % d ,    but   not   found   in   result \"  ,    entry . getKey (  )  )  )  ;", "}", "}", "}", "Assert . assertEquals ( cnt ,    list . size (  )  )  ;", ". LOG . info ( String . format (  \" Found    % d   objects   within   testsuite - suite   polygon .  \"  ,    cnt )  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . contains )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getContains ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . contains (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . crosses )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getCrosses ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . crosses (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["crosses"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . disjoint )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getDisjoint ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . disjoint (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["disjoint"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . dwithin )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getDwithin ( expectationsFactory . getTestPoint (  )  ,     3  0  .  0  )  ;", "Criterion   spatialCriterion    =     . distanceWithin (  \" geom \"  ,    expectationsFactory . getTestPoint (  )  ,     3  0  .  0  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["dwithin"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . equals )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getEquals ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . eq (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["eq"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( dialectSupportsFiltering (  )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getFilter ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . filter (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "for    ( GeomEntity   entity    :    list )     {", "if    ( entity . getId (  )  . equals ( id )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["findInList"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "return   TestSpatialRestrictions . LOG ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . srid )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . havingSRID (  4  3  2  6  )  ;", "Criterion   spatialCriterion    =     . havingSRID (  \" geom \"  ,     4  3  2  6  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "dbexpected    =    expectationsFactory . havingSRID (  3  1  3  7  0  )  ;", "spatialCriterion    =     . havingSRID (  \" geom \"  ,     3  1  3  7  0  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["havingSRID"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . intersects )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIntersects ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . intersects (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["intersects"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . isempty )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIsEmpty (  )  ;", "Criterion   spatialCriterion    =     . isEmpty (  \" geom \"  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . isempty )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getIsNotEmpty (  )  ;", "Criterion   spatialCriterion    =     . isNotEmpty (  \" geom \"  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["isNotEmpty"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . overlaps )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getOverlaps ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . overlaps (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    null ;", "Transaction   tx    =    null ;", "try    {", "session    =    openSession (  )  ;", "tx    =    session . beginTransaction (  )  ;", "Criteria   criteria    =    session . createCriteria ( GeomEntity . class )  ;", "criteria . add ( Criterion )  ;", "compare ( dbexpected ,    criteria . list (  )  )  ;", "}    finally    {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["retrieveAndCompare"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . touches )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getTouches ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . touches (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["touches"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSupportedByDialect ( SpatialFunction . within )  )  )     {", "return ;", "}", "Map < Integer ,    Boolean >    dbexpected    =    expectationsFactory . getWithin ( expectationsFactory . getTestPolygon (  )  )  ;", "Criterion   spatialCriterion    =     . within (  \" geom \"  ,    expectationsFactory . getTestPolygon (  )  )  ;", "retrieveAndCompare ( dbexpected ,    spatialCriterion )  ;", "}", "METHOD_END"], "methodName": ["within"], "fileName": "org.hibernate.spatial.integration.TestSpatialRestrictions"}, {"methodBody": ["METHOD_START", "{", "WktDecoder   decoder    =    DecodeUtil . getWktDecoder ( dialect )  ;", "Geometry   geom    =    decoder . decode ( element . wkt )  ;", "result    =    new    (  )  ;", "result . setId ( element . id )  ;", "result . setGeom ( geom )  ;", "result . setType ( element . type )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["createFrom"], "fileName": "org.hibernate.spatial.integration.geolatte.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "Long   addressId    =    doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "Event   event    =    new   Event (  )  ;", "event . setId (  1 L )  ;", "event . setName (  \" Hibernate   ORM   presentation \"  )  ;", "Point < C 2 D >    pnt    =    point (  . crs ,    c (  1  0  ,     5  )  )  ;", "event . setLocation ( pnt )  ;", "session . persist ( event )  ;", "return   event . getId (  )  ;", "}  )  ;", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "List < Event >    events    =    session . createQuery (  (  \" select   e    \"     +     (  \" from   Event   e    \"     +     \" where   buffer (  : window ,     1  0  0  )    is   not   null \"  )  )  ,     . class )  . setParameter (  \" window \"  ,    window )  . getResultList (  )  ;", "assertEquals (  1  ,    events . size (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "org.hibernate.spatial.integration.geolatte.PostgisBufferTest"}, {"methodBody": ["METHOD_START", "{", "return   TestStoreRetrieveUsingGeolatte . LOG ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.hibernate.spatial.integration.geolatte.TestStoreRetrieveUsingGeolatte"}, {"methodBody": ["METHOD_START", "{", "WktDecoder   decoder    =    DecodeUtil . getWktDecoder ( dialect )  ;", "Geometry   geom    =    JTS . to ( decoder . decode ( element . wkt )  )  ;", "result    =    new    (  )  ;", "result . setId ( element . id )  ;", "result . setGeom ( geom )  ;", "result . setType ( element . type )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["createFrom"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "return   geom ;", "}", "METHOD_END"], "methodName": ["getGeom"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "this . geom    =    geom ;", "}", "METHOD_END"], "methodName": ["setGeom"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.spatial.integration.jts.GeomEntity"}, {"methodBody": ["METHOD_START", "{", "return   TestStoreRetrieveUsingJTS . LOG ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.hibernate.spatial.integration.jts.TestStoreRetrieveUsingJTS"}, {"methodBody": ["METHOD_START", "{", "EnvelopeAdapter . geomFactory    =    gf ;", "}", "METHOD_END"], "methodName": ["setGeometryFactory"], "fileName": "org.hibernate.spatial.jts.EnvelopeAdapter"}, {"methodBody": ["METHOD_START", "{", "final   Coordinate [  ]    coords    =    new   Coordinate [  5  ]  ;", "coords [  0  ]     =    new   Coordinate ( env . getMinX (  )  ,    env . getMinY (  )  )  ;", "coords [  1  ]     =    new   Coordinate ( env . getMinX (  )  ,    env . getMaxY (  )  )  ;", "coords [  2  ]     =    new   Coordinate ( env . getMaxX (  )  ,    env . getMaxY (  )  )  ;", "coords [  3  ]     =    new   Coordinate ( env . getMaxX (  )  ,    env . getMinY (  )  )  ;", "coords [  4  ]     =    new   Coordinate ( env . getMinX (  )  ,    env . getMinY (  )  )  ;", "final   LinearRing   shell    =     . geomFactory . createLinearRing ( coords )  ;", "final   Polygon   pg    =     . geomFactory . createPolygon ( shell ,    null )  ;", "pg . setSRID ( srid )  ;", "return   pg ;", "}", "METHOD_END"], "methodName": ["toPolygon"], "fileName": "org.hibernate.spatial.jts.EnvelopeAdapter"}, {"methodBody": ["METHOD_START", "{", "return   this . dataSourceUtils . getConnection (  )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   NativeSQLStatement (  )     {", "public   PreparedStatement   prepare ( Connec   connec )    throws   SQLExcep    {", "return   connec . prepareStatement ( sql )  ;", "}", "public   String   toString (  )     {", "return   sql ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createNativeSQLStatement"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   NativeSQLStatement (  )     {", "public   PreparedStatement   prepare ( Connec   connec )    throws   SQLExcep    {", "PreparedStatement   pstmt    =    connec . prepareStatement ( sql )  ;", "int   i    =     1  ;", "for    ( Object   param    :    params )     {", "pstmt . setObject (  ( i +  +  )  ,    param )  ;", "}", "return   pstmt ;", "}", "public   String   toString (  )     {", "return   sql ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createNativeSQLStatement"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   NativeSQLStatement (  )     {", "public   PreparedStatement   prepare ( Connec   connec )    throws   SQLExcep    {", "PreparedStatement   pstmt    =    connec . prepareStatement ( sql )  ;", "for    ( int   i    =     1  ;    i    <  =     ( numPlaceHoldersInSQL ( sql )  )  ;    i +  +  )     {", "pstmt . setString ( i ,    wkt )  ;", "}", "return   pstmt ;", "}", "public   String   toString (  )     {", "return   String . format (  \" sql ;     % s ,    wkt :     % s \"  ,    sql ,    wkt )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createNativeSQLStatementAllWKTParams"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsBinaryStatement (  )  ,    AbstractExpectationsFactory . OBJECT )  ;", "}", "METHOD_END"], "methodName": ["getAsBinary"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsTextStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsText"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeBoundaryStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getBoundary"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeBufferStatement ( distance )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getBuffer"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeContainsStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getContains"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeConvexHullStatement ( geom )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getConvexHull"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeCrossesStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getCrosses"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   this . dataSourceUtils ;", "}", "METHOD_END"], "methodName": ["getDataSourceUtils"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeDifferenceStatement ( geom )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getDifference"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeDimensionSQL (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getDimension"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeDisjointStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getDisjoint"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeDistanceStatement ( geom )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeDwithinStatement ( geom ,    distance )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getDwithin"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeEnvelopeStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getEnvelope"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeEqualsStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getEquals"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeFilterStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomUnionStatement ( geom )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomUnion"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeometryTypeStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getGeometryType"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIntersectionStatement ( geom )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getIntersection"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIntersectsStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIntersects"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsEmptyStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsEmpty"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsNotEmptyStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsNotEmpty"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsSimpleStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsSimple"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeOverlapsStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getOverlaps"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeRelateStatement ( geom ,    matrix )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getRelate"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeSridStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getSrid"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeSymDifferenceStatement ( geom )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getSymDifference"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "WKTReader   reader    =    new   WKTReader (  )  ;", "try    {", "Point   point    =     (  ( Point )     ( reader . read (  . TEST _ POINT _ WKT )  )  )  ;", "point . setSRID ( getTestSrid (  )  )  ;", "return   point ;", "}    catch    ( ParseException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTestPoint"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "WKTReader   reader    =    new   WKTReader (  )  ;", "try    {", "Polygon   polygon    =     (  ( Polygon )     ( reader . read (  . TEST _ POLYGON _ WKT )  )  )  ;", "polygon . setSRID ( getTestSrid (  )  )  ;", "return   polygon ;", "}    catch    ( ParseException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTestPolygon"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   AbstractExpectationsFactory . TEST _ SRID ;", "}", "METHOD_END"], "methodName": ["getTestSrid"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeTouchesStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getTouches"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeTransformStatement ( epsg )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getTransform"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeWithinStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getWithin"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeHavingSRIDStatement ( srid )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["havingSRID"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   sql . replaceAll (  \"  [  ^  ?  ]  \"  ,     \"  \"  )  . length (  )  ;", "}", "METHOD_END"], "methodName": ["numPlaceHoldersInSQL"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "PreparedStatement   preparedStatement    =    null ;", "ResultSet   results    =    null ;", "Connection   cn    =    null ;", "Map < Integer ,    T >    expected    =    new   HashMap < Integer ,    T >  (  )  ;", "try    {", "cn    =    createConnection (  )  ;", "preparedStatement    =    nativeSQLStatement . prepare ( cn )  ;", ". LOG . info (  (  \" Native   SQL   is :     \"     +     ( nativeSQLStatement . toString (  )  )  )  )  ;", "results    =    preparedStatement . executeQuery (  )  ;", "while    ( results . next (  )  )     {", "int   id    =    results . getInt (  1  )  ;", "switch    ( type )     {", "case    . GEOMETRY    :", "expected . put ( id ,     (  ( T )     ( decode ( results . getObject (  2  )  )  )  )  )  ;", "break ;", "case    . STRING    :", "expected . put ( id ,     (  ( T )     ( results . getString (  2  )  )  )  )  ;", "break ;", "case    . INTEGER    :", "{", "Long   value    =    Long . valueOf ( results . getLong (  2  )  )  ;", "if    ( results . wasNull (  )  )     {", "value    =    null ;", "}", "expected . put ( id ,     (  ( T )     ( value )  )  )  ;", "}", "break ;", "case    . DOUBLE    :", "{", "Double   value    =    Double . valueOf ( results . getDouble (  2  )  )  ;", "if    ( results . wasNull (  )  )     {", "value    =    null ;", "}", "expected . put ( id ,     (  ( T )     ( value )  )  )  ;", "}", "break ;", "case    . BOOLEAN    :", "expected . put ( id ,     (  ( T )     ( Boolean . valueOf ( results . getBoolean (  2  )  )  )  )  )  ;", "break ;", "default    :", "T   val    =     (  ( T )     ( results . getObject (  2  )  )  )  ;", "if    ( val   instanceof   Blob )     {", "val    =     (  ( T )     (  (  ( Blob )     ( val )  )  . getBytes (  1  ,     . MAX _ BYTE _ LEN )  )  )  ;", "}", "expected . put ( id ,    val )  ;", "}", "}", "return   expected ;", "}    finally    {", "if    ( results    !  =    null )     {", "try    {", "results . close (  )  ;", "}    catch    ( SQLException   e )     {", "}", "}", "if    ( preparedStatement    !  =    null )     {", "try    {", "preparedStatement . close (  )  ;", "}    catch    ( SQLException   e )     {", "}", "}", "if    ( cn    !  =    null )     {", "try    {", "cn . close (  )  ;", "}    catch    ( SQLException   e )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["retrieveExpected"], "fileName": "org.hibernate.spatial.testing.AbstractExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "(  ( BasicDataSource )     ( dataSource )  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "BasicDataSource   bds    =    new   BasicDataSource (  )  ;", "bds . setDriverClassName ( jdbcDriver )  ;", "bds . setUrl ( jdbcUrl )  ;", "bds . setUsername ( jdbcUser )  ;", "bds . setPassword ( jdbcPass )  ;", "dataSource    =    bds ;", "}", "METHOD_END"], "methodName": ["createBasicDataSource"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Connection   cn    =    null ;", "try    {", "cn    =    getDataSource (  )  . getConnection (  )  ;", "cn . setAutoCommit ( false )  ;", "PreparedStatement   pmt    =    cn . prepareStatement (  \" delete   from   GEOMTEST \"  )  ;", "if    (  !  ( pmt . execute (  )  )  )     {", "int   updateCount    =    pmt . getUpdateCount (  )  ;", ". LOG . info (  (  (  \" Removing    \"     +    updateCount )     +     \"    rows .  \"  )  )  ;", "}", "cn . commit (  )  ;", "pmt . close (  )  ;", "}    finally    {", "try    {", "if    ( cn    !  =    null )     {", "cn . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["deleteTestData"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Connection   cn    =    null ;", "try    {", "cn    =    getDataSource (  )  . getConnection (  )  ;", "cn . setAutoCommit ( false )  ;", "PreparedStatement   statement    =    cn . prepareStatement ( sql )  ;", ". LOG . info (  (  \" Executing   statement :     \"     +    sql )  )  ;", "statement . execute (  )  ;", "cn . commit (  )  ;", "statement . close (  )  ;", "}    finally    {", "try    {", "if    ( cn    !  =    null )     {", "cn . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["executeStatement"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Geometry >    result    =    new   HashMap < Integer ,    Geometry >  (  )  ;", "WktDecoder   decoder    =    Wkt . newDecoder (  )  ;", "for    ( TestDataElement   DataElement    :    Data )     {", "if    ( DataElement . type . equalsIgnoreCase ( type )  )     {", "try    {", "result . put ( DataElement . id ,    decoder . decode ( DataElement . wkt )  )  ;", "}    catch    ( WktDecodeException   e )     {", "System . out . println ( String . format (  \" Parsing   WKT   fails   for   case    % d    :     % s \"  ,    DataElement . id ,    DataElement . wkt )  )  ;", "throw   new   RuntimeException ( e )  ;", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["expectedGeoms"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Connection   cn    =    getDataSource (  )  . getConnection (  )  ;", "cn . setAutoCommit ( false )  ;", "return   cn ;", "}", "METHOD_END"], "methodName": ["getConnection"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "return   dataSource ;", "}", "METHOD_END"], "methodName": ["getDataSource"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Connection   cn    =    null ;", "try    {", "cn    =    getDataSource (  )  . getConnection (  )  ;", "cn . setAutoCommit ( false )  ;", "Statement   stmt    =    cn . createStatement (  )  ;", "for    ( TestDataElement   testDataElement    :    testData )     {", "String   sql    =    sqlExpressionTemplate . toInsertSql ( testDataElement )  ;", ". LOG . debug (  (  \" adding   stmt :     \"     +    sql )  )  ;", "stmt . addBatch ( sql )  ;", "}", "int [  ]    insCounts    =    stmt . executeBatch (  )  ;", "cn . commit (  )  ;", "stmt . close (  )  ;", ". LOG . info (  (  (  \" Loaded    \"     +     (  . sum ( insCounts )  )  )     +     \"    rows .  \"  )  )  ;", "}    catch    ( SQLException   e )     {", "e . printStackTrace (  )  ;", "throw   e ;", "}    finally    {", "try    {", "if    ( cn    !  =    null )     {", "cn . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "e . printStackTrace (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["insertTestData"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "InputStream   is    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResourceAsStream ( fileName )  ;", "if    ( is    =  =    null )     {", "throw   new   RuntimeException (  (  (  \" File    \"     +    fileName )     +     \"    not   found   on   Classpath .  \"  )  )  ;", "}", "BufferedReader   reader    =    null ;", "try    {", "reader    =    new   BufferedReader ( new   InputStreamReader ( is ,    Charset . forName (  \" UTF -  8  \"  )  )  )  ;", "StringWriter   sw    =    new   StringWriter (  )  ;", "BufferedWriter   writer    =    new   BufferedWriter ( sw )  ;", "for    ( int   c    =    reader . read (  )  ;    c    !  =     (  -  1  )  ;    c    =    reader . read (  )  )     {", "writer . write ( c )  ;", "}", "writer . flush (  )  ;", "return   sw . toString (  )  ;", "}    finally    {", "if    ( reader    !  =    null )     {", "reader . close (  )  ;", "}", "is . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseSqlIn"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Object >    map    =    new   HashMap < Integer ,    Object >  (  )  ;", "Connection   cn    =    null ;", "PreparedStatement   pstmt    =    null ;", "ResultSet   results    =    null ;", "try    {", "cn    =    get (  )  . getConnection (  )  ;", "pstmt    =    cn . prepareStatement (  \" select   id ,    geom   from   geomtest   where   type    =     ?    order   by   id \"  )  ;", "pstmt . setString (  1  ,    type )  ;", "results    =    pstmt . executeQuery (  )  ;", "while    ( results . next (  )  )     {", "Integer   id    =    results . getInt (  1  )  ;", "Object   obj    =    results . getObject (  2  )  ;", "map . put ( id ,    obj )  ;", "}", "}    catch    ( SQLException   e )     {", "e . printStackTrace (  )  ;", "}    finally    {", "try    {", "if    ( results    !  =    null )     {", "results . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "}", "try    {", "if    ( pstmt    !  =    null )     {", "pstmt . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "}", "try    {", "if    ( cn    !  =    null )     {", "cn . close (  )  ;", "}", "}    catch    ( SQLException   e )     {", "}", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["rawDbObjects"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "InputStream   is    =    null ;", "try    {", "is    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResAsStream ( propertyFile )  ;", "if    ( is    =  =    null )     {", "throw   new   RuntimeException ( String . format (  \" File    % s   not   found   on   classpath .  \"  ,    propertyFile )  )  ;", "}", "Properties   properties    =    new   Properties (  )  ;", "properties . load ( is )  ;", "return   properties ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}    finally    {", "if    ( is    !  =    null )     {", "try    {", "is . close (  )  ;", "}    catch    ( IOException   e )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readProperties"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "int   result    =     0  ;", "for    ( int   idx    =     0  ;    idx    <     ( insCounts . length )  ;    idx +  +  )     {", "result    +  =    insCounts [ idx ]  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["sum"], "fileName": "org.hibernate.spatial.testing.DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( geom 1  . getSRID (  )  )     =  =     ( geom 2  . getSRID (  )  )  )     |  |     (  (  ( geom 1  . getSRID (  )  )     <     1  )     &  &     (  ( geom 2  . getSRID (  )  )     <     1  )  )  ;", "}", "METHOD_END"], "methodName": ["equalSRID"], "fileName": "org.hibernate.spatial.testing.JTSGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( Double . isNaN ( c 1  . z )  )     |  |     (  !  (  ( c 1  . z )     !  =     ( c 2  . z )  )  )  )     &  &     (  ( c 1  . x )     =  =     ( c 2  . x )  )  )     &  &     (  ( c 1  . y )     =  =     ( c 2  . y )  )  ;", "}", "METHOD_END"], "methodName": ["testCoordinateEquality"], "fileName": "org.hibernate.spatial.testing.JTSGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "return   testTypeAndVertexEquality ( geom 1  ,    geom 2  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleGeometryEquality"], "fileName": "org.hibernate.spatial.testing.JTSGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( geom 1  . getGeometryType (  )  . equals ( geom 2  . getGeometryType (  )  )  )  )     {", "return   false ;", "}", "if    (  ( geom 1  . getNumGeometries (  )  )     !  =     ( geom 2  . getNumGeometries (  )  )  )     {", "return   false ;", "}", "if    (  ( geom 1  . getNumPoints (  )  )     !  =     ( geom 2  . getNumPoints (  )  )  )     {", "return   false ;", "}", "Coordinate [  ]    coordinates 1     =    geom 1  . getCoordinates (  )  ;", "Coordinate [  ]    coordinates 2     =    geom 2  . getCoordinates (  )  ;", "for    ( int   i    =     0  ;    i    <     ( coordinates 1  . length )  ;    i +  +  )     {", "Coordinate   c 1     =    coordinates 1  [ i ]  ;", "Coordinate   c 2     =    coordinates 2  [ i ]  ;", "if    (  !  ( testCoordinateEquality ( c 1  ,    c 2  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["testTypeAndVertexEquality"], "fileName": "org.hibernate.spatial.testing.JTSGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "List < Object [  ]  >    rows    =     (  ( List < Object [  ]  >  )     ( query . list (  )  )  )  ;", "if    (  ( rows . size (  )  )     =  =     0  )     {", "getLogger (  )  . warn (  \" No   results   returned   for   query !  !  \"  )  ;", "}", "for    ( Object [  ]    row    :    rows )     {", "Integer   id    =     (  ( Integer )     ( row [  0  ]  )  )  ;", "T   val    =     (  ( T )     ( row [  1  ]  )  )  ;", "result . put ( id ,    val )  ;", "}", "}", "METHOD_END"], "methodName": ["addQueryResults"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "super . afterConfigurationBuilt ( cfg )  ;", "initializeTestSupport ( serviceRegistry (  )  )  ;", "}", "METHOD_END"], "methodName": ["afterConfigurationBuilt"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "dataSourceUtils . afterCreateSchema (  )  ;", "}", "METHOD_END"], "methodName": ["afterSessionFactoryBuilt"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    null ;", "Transaction   tx    =    null ;", "try    {", "session    =    openSession (  )  ;", "tx    =    session . beginTransaction (  )  ;", "String   hql    =    String . format (  \" delete   from   integration .  % s . GeomEntity \"  ,    pckg )  ;", "Query   q    =    session . createQuery ( hql )  ;", "q . executeUpdate (  )  ;", "tx . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( tx    !  =    null )     {", "tx . rollback (  )  ;", "}", "}    finally    {", "if    ( session    !  =    null )     {", "session . close (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanUpTest"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "cleanUpTest (  \" jts \"  )  ;", "cleanUpTest (  \" geolatte \"  )  ;", "}", "METHOD_END"], "methodName": ["cleanupTest"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "dataSourceUtils . close (  )  ;", "}", "METHOD_END"], "methodName": ["closeDataSourceUtils"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( expected    !  =    null )     |  |     ( received    =  =    null )  )  )  ;", "if    ( expected   instanceof   byte [  ]  )     {", "assertArrayEquals (  (  \" Failure   on   testsuite - suite   for   case    \"     +    id )  ,     (  ( byte [  ]  )     ( expected )  )  ,     (  ( byte [  ]  )     ( received )  )  )  ;", "} else", "if    ( expected   instanceof   com . vividsolutions . jts . geom . Geometry )     {", "if    (  . JTS . equals ( geometryType )  )     {", "if    (  !  ( received   instanceof   com . vividsolutions . jts . geom . Geometry )  )     {", "fail (  (  \" Expected   a   JTS   Geometry ,    but   received   an   object   of   type    \"     +     ( received . getClass (  )  . getCanonicalName (  )  )  )  )  ;", "}", "assertTrue (  (  \" Failure   on   testsuite - suite   for   case    \"     +    id )  ,    geometryEquality . test (  (  ( com . vividsolutions . jts . geom . Geometry )     ( expected )  )  ,     (  ( com . vividsolutions . jts . geom . Geometry )     ( received )  )  )  )  ;", "} else    {", "if    (  !  ( received   instanceof   Geometry )  )     {", "fail (  (  \" Expected   a   Geolatte   Geometry ,    but   received   an   object   of   type    \"     +     ( received . getClass (  )  . getCanonicalName (  )  )  )  )  ;", "}", "assertTrue (  (  \" Failure   on   testsuite - suite   for   case    \"     +    id )  ,    geometryEquality . test (  (  ( com . vividsolutions . jts . geom . Geometry )     ( expected )  )  ,     (  ( com . vividsolutions . jts . geom . Geometry )     ( to (  (  ( Geometry )     ( received )  )  )  )  )  )  )  ;", "}", "} else    {", "if    ( expected   instanceof   Long )     {", "assertEquals (  (  \" Failure   on   testsuite - suite   for   case    \"     +    id )  ,     (  ( Long )     ( expected )  )  . intValue (  )  ,    received )  ;", "} else    {", "assertEquals (  (  \" Failure   on   testsuite - suite   for   case    \"     +    id )  ,    expected ,    received )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < Integer ,    T >    entry    :    expected . entrySet (  )  )     {", "Integer   id    =    entry . getKey (  )  ;", "getLogger (  )  . debug (  (  \"     :  \"     +    id )  )  ;", "getLogger (  )  . debug (  (  \" expected :     \"     +     ( expected . get ( id )  )  )  )  ;", "getLogger (  )  . debug (  (  \" received :     \"     +     ( received . get ( id )  )  )  )  ;", "compare ( id ,    entry . getValue (  )  ,    received . get ( id )  ,    geometryType )  ;", "}", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "SpatialDialect   dialect    =     (  ( SpatialDialect )     ( getDialect (  )  )  )  ;", "return   dialect . supportsFiltering (  )  ;", "}", "METHOD_END"], "methodName": ["dialectSupportsFiltering"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["getBaseForMappings"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  ]  {        }  ;", "}", "METHOD_END"], "methodName": ["getMappings"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "Support   support    =    SupportFactories . instance (  )  . getSupportFactory ( getDialect (  )  )  ;", "dataSourceUtils    =    support . createDataSourceUtil ( serviceRegistry )  ;", "expectationsFactory    =    support . createExpectationsFactory ( dataSourceUtils )  ;", "testData    =    support . createData ( this )  ;", "geometryEquality    =    support . createGeometryEquality (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["initializeSpatialTestSupport"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "SpatialDialect   dialect    =     (  ( SpatialDialect )     ( getDialect (  )  )  )  ;", "return   dialect . supports ( s )  ;", "}", "METHOD_END"], "methodName": ["isSupportedByDialect"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "try    {", "dataSourceUtils . insertData ( testData )  ;", "}    catch    ( BatchUpdateException   e )     {", "throw   new   RuntimeException ( e . getNextException (  )  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareTest"], "fileName": "org.hibernate.spatial.testing.SpatialFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "testDataElements . add ( index ,    element )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . add ( testDataElement )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . addAll ( index ,    c )  ;", "}", "METHOD_END"], "methodName": ["addAll"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . addAll ( c )  ;", "}", "METHOD_END"], "methodName": ["addAll"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "testDataElements . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . contains ( o )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . containsAll ( c )  ;", "}", "METHOD_END"], "methodName": ["containsAll"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . equals ( o )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "TestDataReader   reader    =    new   TestDataReader (  )  ;", "return   TestData . fromFile ( fileName ,    reader )  ;", "}", "METHOD_END"], "methodName": ["fromFile"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "List < TestDataElement >    elements    =    reader . read ( fileName )  ;", "TestData   testData    =    new   TestData (  )  ;", "testData . testDataElements    =    elements ;", "return   testData ;", "}", "METHOD_END"], "methodName": ["fromFile"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . get ( index )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . indexOf ( o )  ;", "}", "METHOD_END"], "methodName": ["indexOf"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . iterator (  )  ;", "}", "METHOD_END"], "methodName": ["iterator"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . lastIndexOf ( o )  ;", "}", "METHOD_END"], "methodName": ["lastIndexOf"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . listIterator (  )  ;", "}", "METHOD_END"], "methodName": ["listIterator"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . listIterator ( index )  ;", "}", "METHOD_END"], "methodName": ["listIterator"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . remove ( index )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . remove ( o )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . removeAll ( c )  ;", "}", "METHOD_END"], "methodName": ["removeAll"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . retainAll ( c )  ;", "}", "METHOD_END"], "methodName": ["retainAll"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . set ( index ,    element )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . size (  )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . subList ( fromIndex ,    toIndex )  ;", "}", "METHOD_END"], "methodName": ["subList"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . toArray (  )  ;", "}", "METHOD_END"], "methodName": ["toArray"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "return   testDataElements . toArray ( a )  ;", "}", "METHOD_END"], "methodName": ["toArray"], "fileName": "org.hibernate.spatial.testing.TestData"}, {"methodBody": ["METHOD_START", "{", "int   id    =    Integer . parseInt ( element . selectSingleNode (  \" id \"  )  . getText (  )  )  ;", "String   type    =    element . selectSingleNode (  \" type \"  )  . getText (  )  ;", "String   wkt    =    element . selectSingleNode (  \" wkt \"  )  . getText (  )  ;", "Element   testDataElement    =    new   Element ( id ,    type ,    wkt )  ;", "testDataElements . add ( testDataElement )  ;", "}", "METHOD_END"], "methodName": ["addDataElement"], "fileName": "org.hibernate.spatial.testing.TestDataReader"}, {"methodBody": ["METHOD_START", "{", "Element   root    =    document . getRootElement (  )  ;", "for    ( Iterator   it    =    root . elementIterator (  )  ;    it . hasNext (  )  ;  )     {", "Element   element    =     (  ( Element )     ( it . next (  )  )  )  ;", "addDataElement ( element ,    tElements )  ;", "}", "}", "METHOD_END"], "methodName": ["addDataElements"], "fileName": "org.hibernate.spatial.testing.TestDataReader"}, {"methodBody": ["METHOD_START", "{", "InputStream   is    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResourceAsStream ( fileName )  ;", "if    ( is    =  =    null )     {", "throw   new   RuntimeException ( String . format (  \" File    % s   not   found   on   classpath .  \"  ,    fileName )  )  ;", "}", "return   is ;", "}", "METHOD_END"], "methodName": ["getInputStream"], "fileName": "org.hibernate.spatial.testing.TestDataReader"}, {"methodBody": ["METHOD_START", "{", "if    ( fileName    =  =    null )     {", "throw   new   RuntimeException (  \" Null   testsuite - suite   data   file   specified .  \"  )  ;", "}", "List < Element >    testDataElements    =    new   ArrayList < Element >  (  )  ;", "SAXReader   reader    =    new   SAXReader (  )  ;", "try    {", "Document   document    =    reader . read ( getInputStream ( fileName )  )  ;", "addDataElements ( document ,    testDataElements )  ;", "}    catch    ( DocumentException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "return   testDataElements ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.hibernate.spatial.testing.TestDataReader"}, {"methodBody": ["METHOD_START", "{", "this . configurationService    =    serviceRegistry . getService ( ConfigurationService . class )  ;", "return   new   DataSourceUtils ( driver (  )  ,    url (  )  ,    user (  )  ,    passwd (  )  ,    getSQLExpressionTemplate (  )  )  ;", "}", "METHOD_END"], "methodName": ["createDataSourceUtil"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   JTSGeometryEquality (  )  ;", "}", "METHOD_END"], "methodName": ["createGeometryEquality"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   configurationService . getSetting ( DRIVER ,    String . class ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["driver"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   configurationService . getSetting ( PASS ,    String . class ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["passwd"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   configurationService . getSetting ( URL ,    String . class ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["url"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   configurationService . getSetting ( USER ,    String . class ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["user"], "fileName": "org.hibernate.spatial.testing.TestSupport"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "org.hibernate.spatial.testing.TestSupportFactories"}, {"methodBody": ["METHOD_START", "{", "String   canonicalName    =    dialect . getClass (  )  . getCanonicalName (  )  ;", "if    (  ( dialect   instanceof   SpatialDialect )     &  &     ( PostgreSQL 8  2 Dialect . class . isAssignableFrom ( dialect . getClass (  )  )  )  )     {", "return   PostgisTestSupport . class ;", "}", "if    (  \" dialect . h 2 geodb . GeoDBDialect \"  . equals ( canonicalName )  )     {", "return   GeoDBTestSupport . class ;", "}", "if    (  \" dialect . sqlserver . SqlServer 2  0  0  8 SpatialDialect \"  . equals ( canonicalName )  )     {", "return   SQLServerTestSupport . class ;", "}", "if    (  (  \" dialect . mysql . MySQLSpatialDialect \"  . equals ( canonicalName )  )     |  |     (  \" dialect . mysql . MySQL 5 InnoDBSpatialDialect \"  . equals ( canonicalName )  )  )     {", "return   MySQLTestSupport . class ;", "}", "if    (  (  \" dialect . mysql . MySQL 5  6 SpatialDialect \"  . equals ( canonicalName )  )     |  |     (  \" dialect . mysql . MySQL 5  6 InnoDBSpatialDialect \"  . equals ( canonicalName )  )  )     {", "return   MySQL 5  6 TestSupport . class ;", "}", "if    (  (  \" dialect . oracle . OracleSpatial 1  0 gDialect \"  . equals ( canonicalName )  )     |  |     (  \" dialect . oracle . OracleSpatialSDO 1  0 gDialect \"  . equals ( canonicalName )  )  )     {", "return   OracleSDOTestSupport . class ;", "}", "if    (  \" dialect . hana . HANASpatialDialect \"  . equals ( canonicalName )  )     {", "return   HANATestSupport . class ;", "}", "if    (  \" dialect . db 2  . DB 2 SpatialDialect \"  . equals ( canonicalName )  )     {", "return   DB 2 TestSupport . class ;", "}", "throw   new   IllegalArgumentException (  \" Dialect   not   known   in   test   suite \"  )  ;", "}", "METHOD_END"], "methodName": ["getSupportFactoryClass"], "fileName": "org.hibernate.spatial.testing.TestSupportFactories"}, {"methodBody": ["METHOD_START", "{", "if    ( dialect    =  =    null )     {", "throw   new   IllegalArgumentException (  \" Dialect   argument   is   required .  \"  )  ;", "}", "Class   testSupportFactoryClass    =     . getSupportFactoryClass ( dialect )  ;", "return   instantiate ( testSupportFactoryClass )  ;", "}", "METHOD_END"], "methodName": ["getTestSupportFactory"], "fileName": "org.hibernate.spatial.testing.TestSupportFactories"}, {"methodBody": ["METHOD_START", "{", "return   TestSupportFactories . instance ;", "}", "METHOD_END"], "methodName": ["instance"], "fileName": "org.hibernate.spatial.testing.TestSupportFactories"}, {"methodBody": ["METHOD_START", "{", "return   testSupportFactoryClass . newInstance (  )  ;", "}", "METHOD_END"], "methodName": ["instantiate"], "fileName": "org.hibernate.spatial.testing.TestSupportFactories"}, {"methodBody": ["METHOD_START", "{", "String [  ]    tokens    =    wkt . split (  \"  ;  \"  )  ;", "if    (  ( tokens . length )     =  =     1  )     {", "return    0  ;", "}", "String [  ]    sridTokens    =    tokens [  0  ]  . split (  \"  =  \"  )  ;", "if    (  ( sridTokens . length )     <     2  )     {", "throw   new   IllegalArgumentException (  (  \" Can ' t   parse    \"     +    wkt )  )  ;", "}", "return   Integer . parseInt ( sridTokens [  1  ]  )  ;", "}", "METHOD_END"], "methodName": ["getSRID"], "fileName": "org.hibernate.spatial.testing.WktUtility"}, {"methodBody": ["METHOD_START", "{", "String [  ]    tokens    =    wkt . split (  \"  ;  \"  )  ;", "if    (  ( tokens . length )     >     1  )     {", "return   tokens [  1  ]  ;", "} else    {", "return   wkt ;", "}", "}", "METHOD_END"], "methodName": ["getWkt"], "fileName": "org.hibernate.spatial.testing.WktUtility"}, {"methodBody": ["METHOD_START", "{", "try    ( final   StandardServiceRegistry   ssr    =    new   StandardServiceRegistryBuilder (  )  . applySetting ( DIALECT ,    GeoDBDialect . class )  . applySetting ( HBM 2 DDL _ AUTO ,    CREATE _ DROP )  . build (  )  )     {", "final   MetadataSources   metadataSources    =    new   MetadataSources ( ssr )  . addAnnotatedClass (  . class )  . addAnnotatedClass ( MyEntity . class )  ;", "final   MetadataBuilderImplementor   metadataBuilder    =     (  ( MetadataBuilderImplementor )     ( metadataSources . getMetadataBuilder (  )  )  )  ;", "try    ( final   SessionFactoryImplementor   sessionFactory    =     (  ( SessionFactoryImplementor )     ( metadataBuilder . build (  )  . buildSessionFactory (  )  )  )  )     {", "final   TypeConfiguration   typeConfiguration    =    sessionFactory . getMetamodel (  )  . getTypeConfiguration (  )  ;", "assertThat ( typeConfiguration . getJavaTypeDescriptorRegistry (  )  . getDescriptor ( Geometry . class )  ,    sameInstance ( GeolatteGeometryJavaTypeDescriptor . INSTANCE )  )  ;", "final   EntityPersister   entityPersister    =    sessionFactory . getMetamodel (  )  . entityPersister ( MyEntity . class )  ;", "final   AttributeConverterTypeAdapter   geometryAttributeType    =    assertTyping ( AttributeConverterTypeAdapter . class ,    entityPersister . getPropertyType (  \" geometry \"  )  )  ;", "final   JpaAttributeConverter   converter    =    assertTyping ( JpaAttributeConverter . class ,    geometryAttributeType . getAttributeConverter (  )  )  ;", "assert    . class . equals ( converter . getConverterBean (  )  . getBeanClass (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testConverterUsage"], "fileName": "org.hibernate.spatial.testing.converter.GeometryConverterTest"}, {"methodBody": ["METHOD_START", "{", "return   geometry ;", "}", "METHOD_END"], "methodName": ["getGeometry"], "fileName": "org.hibernate.spatial.testing.converter.MyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.spatial.testing.converter.MyEntity"}, {"methodBody": ["METHOD_START", "{", "this . geometry    =    geometry ;", "}", "METHOD_END"], "methodName": ["setGeometry"], "fileName": "org.hibernate.spatial.testing.converter.MyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.spatial.testing.converter.MyEntity"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" create   index   idx _ spatial _ geomtest   on   geomtest    ( geom )    extend   using   db 2 gse . spatial _ index (  0  .  1  ,  0  ,  0  )  \"  ;", "executeStatement ( sql )  ;", "}", "METHOD_END"], "methodName": ["createIndex"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2DataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   max ( t . id )  ,    db 2 gse . ST _ GetAggrResult ( MAX ( db 2 gse . st _ BuildMBRAggr ( t . geom )  )  )    from   GeomTest   t   where   db 2 gse . st _ srid ( t . geom )     =     4  3  2  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeExtentStatement"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2ExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeExtentStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getExtent"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2ExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "String   wkt    =    WktUtility . getWkt ( testDataElement . wkt )  ;", "int   srid    =    WktUtility . getSRID ( testDataElement . wkt )  ;", "return   String . format ( SQL _ TEMPLATE ,    testDataElement . id ,    testDataElement . type ,    wkt ,    srid )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2ExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   DB 2 ExpectationsFactory ( dataSourceUtils )  ;", "}", "METHOD_END"], "methodName": ["createExpectationsFactory"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2TestSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  \" TestSpatialFunctions \"  . equals ( testcase . getClass (  )  . getCanonicalName (  )  )  )     {", "return   TestData . fromFile (  \" db 2  / test - db 2 nozm - only - polygon . xml \"  )  ;", "}", "return   TestData . fromFile (  \" db 2  / test - db 2 nozm - data - set . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createTestData"], "fileName": "org.hibernate.spatial.testing.dialects.db2.DB2TestSupport"}, {"methodBody": ["METHOD_START", "{", "String   errorMsg    =     \" Problem   initializing   GeoDB .  \"  ;", "try    {", "Class <  ?  >    geoDB    =    Thread . currentThread (  )  . getContextClassLoader (  )  . loadClass (  \"  \"  )  ;", "Method   m    =    geoDB . getDeclaredMethod (  \" InitGeoDB \"  ,    new   Class [  ]  {    Connection . class    }  )  ;", "m . invoke ( null ,    conn )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   RuntimeException ( errorMsg ,    e )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   RuntimeException ( errorMsg ,    e )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   RuntimeException ( errorMsg ,    e )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   new   RuntimeException ( errorMsg ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["initGeoDB"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBDataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "String   wkt    =    WktUtility . getWkt ( testDataElement . wkt )  ;", "int   srid    =    WktUtility . getSRID ( testDataElement . wkt )  ;", "return   String . format (  . SQL _ TEMPLATE ,    testDataElement . id ,    testDataElement . type ,    wkt ,    srid )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "if    (  ( geom 1  . getNumPoints (  )  )     !  =     ( geom 2  . getNumPoints (  )  )  )     {", "return   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( geom 1  . getNumPoints (  )  )  ;    i +  +  )     {", "Coordi   cn 1     =    geom 1  . getCoordis (  )  [ i ]  ;", "Coordi   cn 2     =    geom 2  . getCoordis (  )  [ i ]  ;", "if    (  !  ( cn 1  . equals 2 D ( cn 2  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["testVerticesEquality"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "super . createDataSourceUtil ( serviceRegistry )  ;", "try    {", "return   new   DataSourceUtils ( driver (  )  ,    url (  )  ,    user (  )  ,    passwd (  )  ,    getSQLExpressionTemplate (  )  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createDataSourceUtil"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBTestSupport"}, {"methodBody": ["METHOD_START", "{", "if    ( dataSourceUtils   instanceof   GeoDBDataSourceUtils )     {", "return   new   GeoDBExpectationsFactory (  (  ( GeoDBDataSourceUtils )     ( dataSourceUtils )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" Requires   a   GeoDBDataSourceUtils   instance \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["createExpectationsFactory"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBTestSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   GeoDBGeometryEquality (  )  ;", "}", "METHOD_END"], "methodName": ["createGeometryEquality"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBTestSupport"}, {"methodBody": ["METHOD_START", "{", "return   TestData . fromFile (  \" h 2 geodb / test - geodb - data - set . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createTestData"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBTestSupport"}, {"methodBody": ["METHOD_START", "{", "return   new   GeoDBExpressionTemplate (  )  ;", "}", "METHOD_END"], "methodName": ["getSQLExpressionTemplate"], "fileName": "org.hibernate.spatial.testing.dialects.h2geodb.GeoDBTestSupport"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AlphaShape (  ?  )  . ST _ AsEWKB (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Point '  ,     ' ST _ MultiPoint '  )  \"  ,    new   Object [  ]  {    radius    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAlphaShapeStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ Area (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAreaStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsEWKB (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsEWKBStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsEWKT (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsEWKTStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsGeoJSON (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsGeoJSONStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   cast ( count (  *  )    as   int )  ,    ST _ AsSVGAggr ( t . geom )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsSVGAggrStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsSVG (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsSVGStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsWKB (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsWKBStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ AsWKT (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeAsWKTStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ Centroid (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ Polygon '  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeCentroidStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   cast ( count (  *  )    as   int )  ,    ST _ ConvexHullAggr ( t . geom )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeConvexHullAggrStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   t . id ,    t . geom . ST _ CoordDim (  )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeCoordDimStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatementAllWKTParams (  (  (  (  (  (  \" select   t . id ,    t . geom . ST _ CoveredBy ( ST _ GeomFromText (  ?  ,     \"     +     ( getTestSrid (  )  )  )     +     \"  )  )    from   GeomTest   t   where   t . geom . ST _ CoveredBy ( ST _ GeomFromText (  ?  ,     \"  )     +     ( getTestSrid (  )  )  )     +     \"  )  )     =     1    and   t . geom . ST _ SRID (  )     =     \"  )     +     ( getTestSrid (  )  )  )  ,    geom . toText (  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeCoveredByStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatementAllWKTParams (  (  (  (  (  (  \" select   t . id ,    t . geom . ST _ Covers ( ST _ GeomFromText (  ?  ,     \"     +     ( getTestSrid (  )  )  )     +     \"  )  )    from   GeomTest   t   where   t . geom . ST _ Covers ( ST _ GeomFromText (  ?  ,     \"  )     +     ( getTestSrid (  )  )  )     +     \"  )  )     =     1    and   t . geom . ST _ SRID (  )     =     \"  )     +     ( getTestSrid (  )  )  )  ,    geom . toText (  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeCoversStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ EndPoint (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ LineString '  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeEndPointStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   cast ( count (  *  )    as   int )  ,    ST _ EnvelopeAggr ( t . geom )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeEnvelopeAggrStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ ExteriorRing (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ Polygon '  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeExteriorRingStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select    1  ,    ST _ GeomFromEWKB (  ?  )    from   GeomTest   t \"  ,    new   Object [  ]  {    ewkb    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeomFromEWKBStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select    1  ,    ST _ GeomFromEWKT (  ?  )    from   GeomTest   t \"  ,    new   Object [  ]  {    ewkt    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeomFromEWKTStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select    1  ,    ST _ GeomFromText (  ?  )    from   GeomTest   t \"  ,    new   Object [  ]  {    text    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeomFromTextStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select    1  ,    ST _ GeomFromWKB (  ?  )    from   GeomTest   t \"  ,    new   Object [  ]  {    wkb    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeomFromWKBStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select    1  ,    ST _ GeomFromWKT (  ?  )    from   GeomTest   t \"  ,    new   Object [  ]  {    wkt    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeomFromWKTStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ GeometryN (  ?  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ GeometryCollection '  \"  ,    new   Object [  ]  {    n    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeGeometryNStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ InteriorRingN (  ?  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ Polygon '  \"  ,    new   Object [  ]  {    n    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeInteriorRingNStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   cast ( count (  *  )    as   int )  ,    ST _ IntersectionAggr ( t . geom )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIntersectionAggrStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  (  (  (  (  (  (  (  (  \" select   t . id ,    t . geom . ST _ IntersectsRect ( ST _ GeomFromText (  ?  ,     \"     +     ( getTestSrid (  )  )  )     +     \"  )  ,    ST _ GeomFromText (  ?  ,     \"  )     +     ( getTestSrid (  )  )  )     +     \"  )  )    from   GeomTest   t   where   t . geom . ST _ IntersectsRect ( ST _ GeomFromText (  ?  ,     \"  )     +     ( getTestSrid (  )  )  )     +     \"  )  ,    ST _ GeomFromText (  ?  ,     \"  )     +     ( getTestSrid (  )  )  )     +     \"  )  )     =     1    and   t . geom . ST _ SRID (  )     =     \"  )     +     ( getTestSrid (  )  )  )  ,    new   Object [  ]  {    pmin . toText (  )  ,    pmax . toText (  )  ,    pmin . toText (  )  ,    pmax . toText (  )     }  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIntersectsRectStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ Is 3 D (  )    from   GeomTest   t   where   t . geom . ST _ Is 3 D (  )     =     1    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIs3DStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ IsClosed (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ LineString '  ,     ' ST _ MultiLineString '  )    and   t . geom . ST _ IsClosed (  )     =     1    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIsClosedStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ IsMeasured (  )    from   GeomTest   t   where   t . geom . ST _ IsMeasured (  )     =     1    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIsMeasuredStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ IsRing (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ LineString '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIsRingStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ IsValid (  )    from   GeomTest   t   where   t . geom . ST _ IsValid (  )     =     1    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeIsValidStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ Length (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ LineString '  ,     ' ST _ MultiLineString '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeLengthStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ MMax (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeMMaxStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ MMin (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeMMinStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ M (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Point '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeMStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ NumGeometries (  )    from   GeomTest   t   where    ( t . geom . ST _ GeometryType (  )    in    (  ' ST _ GeometryCollection '  )  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeNumGeometriesStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ NumInteriorRing (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Polygon '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeNumInteriorRingStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ NumInteriorRings (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Polygon '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeNumInteriorRingsStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ NumPoints (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ LineString '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeNumPointsStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatementAllWKTParams (  (  \" select   t . id ,    t . geom . ST _ OrderingEquals ( ST _ GeomFromText (  ?  )  )    from   GeomTest   t   where   t . geom . ST _ OrderingEquals ( ST _ GeomFromText (  ?  )  )     =     1    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  ,    geom . toText (  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeOrderingEqualsStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ Perimeter (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativePerimeterStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ PointN (  ?  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ LineString '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  ,    new   Object [  ]  {    n    }  )  ;", "}", "METHOD_END"], "methodName": ["createNativePointNStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ PointOnSurface (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Polygon '  ,     ' ST _ MultiPolygon '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativePointOnSurfaceStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ SnapToGrid (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeSnapToGridStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   id ,    t . geom . ST _ StartPoint (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )     =     ' ST _ LineString '  \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeStartPointStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  \" select   cast ( count (  *  )    as   int )  ,    ST _ UnionAggr ( t . geom )    from   GeomTest   t \"  )  ;", "}", "METHOD_END"], "methodName": ["createNativeUnionAggrStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ XMax (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeXMaxStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ XMin (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeXMinStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ X (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Point '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeXStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ YMax (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeYMaxStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ YMin (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeYMinStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ Y (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Point '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeYStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ ZMax (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeZMaxStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ ZMin (  )    from   GeomTest   t   where   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeZMinStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   createNativeSQLStatement (  (  \" select   t . id ,    t . geom . ST _ Z (  )    from   GeomTest   t   where   t . geom . ST _ GeometryType (  )    in    (  ' ST _ Point '  )    and   t . geom . ST _ SRID (  )     =     \"     +     ( getTestSrid (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNativeZStatement"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAlphaShapeStatement ( radius )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getAlphaShape"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAreaStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getArea"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsEWKBStatement (  )  ,    AbstractExpectationsFactory . OBJECT )  ;", "}", "METHOD_END"], "methodName": ["getAsEWKB"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsEWKTStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsEWKT"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsGeoJSONStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsGeoJSON"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsSVGStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsSVG"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsSVGAggrStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsSVGAggr"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsWKBStatement (  )  ,    AbstractExpectationsFactory . OBJECT )  ;", "}", "METHOD_END"], "methodName": ["getAsWKB"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeAsWKTStatement (  )  ,    AbstractExpectationsFactory . STRING )  ;", "}", "METHOD_END"], "methodName": ["getAsWKT"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeCentroidStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getCentroid"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeConvexHullAggrStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getConvexHullAggr"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeCoordDimStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getCoordDim"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeCoveredByStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getCoveredBy"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeCoversStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getCovers"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeEndPointStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getEndPoint"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeEnvelopeAggrStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getEnvelopeAggr"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeExteriorRingStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getExteriorRing"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomFromEWKBStatement ( ewkb )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomFromEWKB"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomFromEWKTStatement ( ewkt )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomFromEWKT"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomFromTextStatement ( text )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomFromText"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomFromWKBStatement ( wkb )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomFromWKB"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeomFromWKTStatement ( wkt )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeomFromWKT"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeGeometryNStatement ( n )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getGeometryN"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeInteriorRingNStatement ( n )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getInteriorRingN"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIntersectionAggrStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getIntersectionAggr"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIntersectsRectStatement ( pmin ,    pmax )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIntersectsRect"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIs 3 DStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIs3D"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsClosedStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsClosed"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsMeasuredStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsMeasured"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsRingStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsRing"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeIsValidStatement (  )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getIsValid"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeLengthStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeMStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getM"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeMMaxStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getMMax"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeMMinStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getMMin"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeNumGeometriesStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getNumGeometries"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeNumInteriorRingStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getNumInteriorRing"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeNumInteriorRingsStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getNumInteriorRings"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeNumPointsStatement (  )  ,    AbstractExpectationsFactory . INTEGER )  ;", "}", "METHOD_END"], "methodName": ["getNumPoints"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeOrderingEqualsStatement ( geom )  ,    AbstractExpectationsFactory . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["getOrderingEquals"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativePerimeterStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getPerimeter"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativePointNStatement ( n )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getPointN"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativePointOnSurfaceStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getPointOnSurface"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeSnapToGridStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getSnapToGrid"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeStartPointStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getStartPoint"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeUnionAggrStatement (  )  ,    AbstractExpectationsFactory . GEOMETRY )  ;", "}", "METHOD_END"], "methodName": ["getUnionAggr"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeXStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeXMaxStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getXMax"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeXMinStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getXMin"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeYStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeYMaxStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getYMax"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeYMinStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getYMin"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeZStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getZ"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeZMaxStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getZMax"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "return   retrieveExpected ( createNativeZMinStatement (  )  ,    AbstractExpectationsFactory . DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["getZMin"], "fileName": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory"}, {"methodBody": ["METHOD_START", "{", "String   wkt    =    WktUtility . getWkt ( testDataElement . wkt )  ;", "int   srid    =    WktUtility . getSRID ( testDataElement . wkt )  ;", "return   String . format (  . SQL _ TEMPLATE ,    testDataElement . id ,    testDataElement . type ,    wkt ,    srid )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.mysql.MySQLExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "if    (  ( geom 1  . getNumPoints (  )  )     !  =     ( geom 2  . getNumPoints (  )  )  )     {", "return   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( geom 1  . getNumPoints (  )  )  ;    i +  +  )     {", "Coordi   cn 1     =    geom 1  . getCoordis (  )  [ i ]  ;", "Coordi   cn 2     =    geom 2  . getCoordis (  )  [ i ]  ;", "if    (  !  ( cn 1  . equals 2 D ( cn 2  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["testVerticesEquality"], "fileName": "org.hibernate.spatial.testing.dialects.mysql.MySQLGeometryEquality"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" create   index   idx _ spatial _ geomtest   on   geomtest    ( geom )    indextype   is   mdsys . spatial _ index \"  ;", "executeStatement ( sql )  ;", "}", "METHOD_END"], "methodName": ["createIndex"], "fileName": "org.hibernate.spatial.testing.dialects.oracle.SDODataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "String   sql 1     =     \" delete   from   user _ sdo _ geom _ metadata   where   TABLE _ NAME    =     ' GEOMTEST '  \"  ;", "String   sql 2     =     \" insert   into   user _ sdo _ geom _ metadata   values    (  \"     +     (  (  (  (  (  (  \"        ' GEOMTEST '  ,  \"     +     \"        ' geom '  ,  \"  )     +     \"       SDO _ DIM _ ARRAY (  \"  )     +     \"             SDO _ DIM _ ELEMENT (  ' X '  ,     -  1  8  0  ,     1  8  0  ,     0  .  0  0  0  0  1  )  ,  \"  )     +     \"             SDO _ DIM _ ELEMENT (  ' Y '  ,     -  9  0  ,     9  0  ,     0  .  0  0  0  0  1  )  \"  )     +     \"              )  ,  \"  )     +     \"        4  3  2  6  )  \"  )  ;", "executeStatement ( sql 1  )  ;", "executeStatement ( sql 2  )  ;", "}", "METHOD_END"], "methodName": ["setGeomMetaDataTo2D"], "fileName": "org.hibernate.spatial.testing.dialects.oracle.SDODataSourceUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( testDataElement   instanceof   SDOTestDataElement )  )     {", "throw   new   IllegalArgumentException (  \" Require   SDOTestDataElements \"  )  ;", "}", "SDOTestDataElement   sdoTestDataElement    =     (  ( SDOTestDataElement )     ( testDataElement )  )  ;", "return   String . format (  . SQL _ TEMPLATE ,    sdoTestDataElement . id ,    sdoTestDataElement . type ,    sdoTestDataElement . sdo )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.oracle.SDOGeometryExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "return   String . format ( PostgisExpressionTemplate . SQL _ TEMPLATE ,    testDataElement . id ,    testDataElement . type ,    testDataElement . wkt )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.postgis.PostgisExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   PostgisExpectationsFactory ( dataSourceUtils )  ;", "}", "METHOD_END"], "methodName": ["createExpectationsFactory"], "fileName": "org.hibernate.spatial.testing.dialects.postgis.PostgisTestSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testcase . getClass (  )  . getCanonicalName (  )  . contains (  \" TestSpatialFunctions \"  )  )     |  |     ( testcase . getClass (  )  . getCanonicalName (  )  . contains (  \" TestSpatialRestrictions \"  )  )  )     {", "return   TestData . fromFile (  \"  - functions - test . xml \"  )  ;", "}", "return   TestData . fromFile (  \" test - data - set . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createTestData"], "fileName": "org.hibernate.spatial.testing.dialects.postgis.PostgisTestSupport"}, {"methodBody": ["METHOD_START", "{", "int   srid    =    WktUtility . getSRID ( testDataElement . wkt )  ;", "String   wkt    =    WktUtility . getWkt ( testDataElement . wkt )  ;", "return   String . format (  . SQL _ TEMPLATE ,    testDataElement . id ,    testDataElement . type ,    wkt ,    srid )  ;", "}", "METHOD_END"], "methodName": ["toInsertSql"], "fileName": "org.hibernate.spatial.testing.dialects.sqlserver.SQLServerExpressionTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   SqlServerExpectationsFactory ( dataSourceUtils )  ;", "}", "METHOD_END"], "methodName": ["createExpectationsFactory"], "fileName": "org.hibernate.spatial.testing.dialects.sqlserver.SQLServerTestSupport"}, {"methodBody": ["METHOD_START", "{", "return   TestData . fromFile (  \" test - data - set . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createTestData"], "fileName": "org.hibernate.spatial.testing.dialects.sqlserver.SQLServerTestSupport"}]