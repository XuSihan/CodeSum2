[{"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "ee.estonia.entities.Child"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "ee.estonia.entities.Child"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "ee.estonia.entities.Child"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "ee.estonia.entities.Child"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "ee.estonia.entities.Parent"}, {"methodBody": ["METHOD_START", "{", "if    (  ( entityManager . getDelegate (  )  )    instanceof   Session )     {", "return    . get (  (  ( Session )     ( entityManager . getDelegate (  )  )  )  )  ;", "}", "if    (  ( entityManager . getDelegate (  )  )    instanceof   EntityManager )     {", "return    . get (  (  ( EntityManager )     ( entityManager . getDelegate (  )  )  )  )  ;", "}", "throw   new   AuditException (  \" Hibernate   EntityManager   not   present !  \"  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.AuditReaderFactory"}, {"methodBody": ["METHOD_START", "{", "SessionImplementor   sessionImpl ;", "if    (  !  ( session   instanceof   SessionImplementor )  )     {", "sessionImpl    =     (  ( SessionImplementor )     ( session . getSessionFactory (  )  . getCurrentSession (  )  )  )  ;", "} else    {", "sessionImpl    =     (  ( SessionImplementor )     ( session )  )  ;", "}", "final   ServiceRegistry   serviceRegistry    =    sessionImpl . getFactory (  )  . getServiceRegistry (  )  ;", "final   EnversService   enversService    =    serviceRegistry . getService ( EnversService . class )  ;", "return   new   Impl ( enversService ,    session ,    sessionImpl )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.AuditReaderFactory"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.DefaultRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   Date ( timestamp )  ;", "}", "METHOD_END"], "methodName": ["getRevisionDate"], "fileName": "org.hibernate.envers.DefaultRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.hibernate.envers.DefaultRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.DefaultRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . timestamp    =    timestamp ;", "}", "METHOD_END"], "methodName": ["setTimestamp"], "fileName": "org.hibernate.envers.DefaultRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   modifiedEntityNames ;", "}", "METHOD_END"], "methodName": ["getModifiedEntityNames"], "fileName": "org.hibernate.envers.DefaultTrackingModifiedEntitiesRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . modifiedEntityNames    =    modifiedEntityNames ;", "}", "METHOD_END"], "methodName": ["setModifiedEntityNames"], "fileName": "org.hibernate.envers.DefaultTrackingModifiedEntitiesRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( representation    =  =    null )     |  |     (  !  ( representation   instanceof   Byte )  )  )     {", "return   null ;", "}", "switch    (  (  ( Byte )     ( representation )  )  )     {", "case    0     :", "{", "return    . ADD ;", "}", "case    1     :", "{", "return    . MOD ;", "}", "case    2     :", "{", "return    . DEL ;", "}", "default    :", "{", "throw   new   IllegalArgumentException (  (  \" Unknown   representation :     \"     +    representation )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["fromRepresentation"], "fileName": "org.hibernate.envers.RevisionType"}, {"methodBody": ["METHOD_START", "{", "return   representation ;", "}", "METHOD_END"], "methodName": ["getRepresentation"], "fileName": "org.hibernate.envers.RevisionType"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( AdditionalJaxbMappingProducerImpl . log . isTraceEnabled (  )  )  )     {", "return ;", "}", "final   ByteArrayOutputStream   baos    =    new   ByteArrayOutputStream (  )  ;", "final   Writer   w    =    new   PrintWriter ( baos )  ;", "try    {", "final   XMLWriter   xw    =    new   XMLWriter ( w ,    new   OutputFormat (  \"     \"  ,    true )  )  ;", "xw . write ( document )  ;", "w . flush (  )  ;", "}    catch    ( IOException   e 1  )     {", "e 1  . printStackTrace (  )  ;", "}", "AdditionalJaxbMappingProducerImpl . log . tracef (  \" Envers - generate   entity   mapping    -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \\ n % s \"  ,    baos . toString (  )  )  ;", "AdditionalJaxbMappingProducerImpl . log . trace (  \"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", "}", "METHOD_END"], "methodName": ["dump"], "fileName": "org.hibernate.envers.boot.internal.AdditionalJaxbMappingProducerImpl"}, {"methodBody": ["METHOD_START", "{", "final   EnversService   enversService    =    serviceRegistry . getService ( EnversService . class )  ;", "if    (  !  ( enversService . isEnabled (  )  )  )     {", ". log . debug (  \" Skipping   Envers   listener   registrations    :    EnversService   disabled \"  )  ;", "return ;", "}", "final   boolean   autoRegister    =    serviceRegistry . getService ( ConfigurationService . class )  . getSetting (  . AUTO _ REGISTER ,    BOOLEAN ,    true )  ;", "if    (  ! autoRegister )     {", ". log . debug (  \" Skipping   Envers   listener   registrations    :    Listener   auto - registration   disabled \"  )  ;", "return ;", "}", "if    (  !  ( enversService . isInitialized (  )  )  )     {", "throw   new   HibernateException (  \" Expecting   EnversService   to   have   been   initialized   prior   to   call   to    # integrate \"  )  ;", "}", "if    (  !  ( enversService . getEntitiesConfigurations (  )  . hasAuditedEntities (  )  )  )     {", ". log . debug (  \" Skipping   Envers   listener   registrations    :    No   audited   entities   found \"  )  ;", "return ;", "}", "final   EventListenerRegistry   listenerRegistry    =    serviceRegistry . getService ( EventListenerRegistry . class )  ;", "listenerRegistry . addDuplicationStrategy ( EnversListenerDuplicationStrategy . INSTANCE )  ;", "if    ( enversService . getEntitiesConfigurations (  )  . hasAuditedEntities (  )  )     {", "listenerRegistry . appendListeners ( POST _ DELETE ,    new   EnversPostDeleteEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( POST _ INSERT ,    new   EnversPostInsertEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( PRE _ UPDATE ,    new   EnversPreUpdateEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( POST _ UPDATE ,    new   EnversPostUpdateEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( POST _ COLLECTION _ RECREATE ,    new   EnversPostCollectionRecreateEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( PRE _ COLLECTION _ REMOVE ,    new   EnversPreCollectionRemoveEventListenerImpl ( enversService )  )  ;", "listenerRegistry . appendListeners ( PRE _ COLLECTION _ UPDATE ,    new   EnversPreCollectionUpdateEventListenerImpl ( enversService )  )  ;", "}", "}", "METHOD_END"], "methodName": ["integrate"], "fileName": "org.hibernate.envers.boot.internal.EnversIntegrator"}, {"methodBody": ["METHOD_START", "{", "final   ConfigurationService   cfgService    =    serviceRegistry . getService ( ConfigurationService . class )  ;", "final   Properties   properties    =    new   Properties (  )  ;", "properties . putAll ( cfgService . getSettings (  )  )  ;", "this . globalConfiguration    =    new   GlobalConfiguration ( this ,    properties )  ;", "final   ReflectionManager   reflectionManager    =    metadata . getMetadataBuildingOptions (  )  . getReflectionManager (  )  ;", "final   RevisionInfoConfiguration   revInfoCfg    =    new   RevisionInfoConfiguration ( globalConfiguration )  ;", "final   RevisionInfoConfigurationResult   revInfoCfgResult    =    revInfoCfg . configure ( metadata ,    reflectionManager )  ;", "this . auditEntitiesConfiguration    =    new   AuditEntitiesConfiguration ( properties ,    revInfoCfgResult . getRevisionInfoEntityName (  )  ,    this )  ;", "this . auditProcessManager    =    new   AuditProcessManager ( revInfoCfgResult . getRevisionInfoGenerator (  )  )  ;", "this . revisionInfoQueryCreator    =    revInfoCfgResult . getRevisionInfoQueryCreator (  )  ;", "this . revisionInfoNumberReader    =    revInfoCfgResult . getRevisionInfoNumberReader (  )  ;", "this . modifiedEntityNamesReader    =    revInfoCfgResult . getModifiedEntityNamesReader (  )  ;", "this . auditStrategy    =     . initializeAuditStrategy ( auditEntitiesConfiguration . getAuditStrategyName (  )  ,    revInfoCfgResult . getRevisionInfoClass (  )  ,    revInfoCfgResult . getRevisionInfoTimestampData (  )  ,    serviceRegistry )  ;", "this . entitiesConfigurations    =    new   EntitiesConfigurator (  )  . configure ( metadata ,    serviceRegistry ,    reflectionManager ,    mappingCollector ,    globalConfiguration ,    auditEntitiesConfiguration ,    auditStrategy ,    revInfoCfgResult . getRevisionInfoXmlMapping (  )  ,    revInfoCfgResult . getRevisionInfoRelationMapping (  )  )  ;", "}", "METHOD_END"], "methodName": ["doInitialize"], "fileName": "org.hibernate.envers.boot.internal.EnversServiceImpl"}, {"methodBody": ["METHOD_START", "{", "AuditStrategy   strategy ;", "try    {", "final   Class <  ?  >    auditStrategyClass    =     . loadClass ( auditStrategyName ,    serviceRegistry )  ;", "strategy    =     (  ( AuditStrategy )     ( ReflectHelper . getDefaultConstructor ( auditStrategyClass )  . newInstance (  )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   MappingException ( String . format (  \" Unable   to   create   AuditStrategy    [  % s ]    instance .  \"  ,    auditStrategyName )  ,    e )  ;", "}", "if    ( strategy   instanceof   ValidityAuditStrategy )     {", "final   Getter   revisionTimestampGetter    =    ReflectionTools . getGetter ( revisionInfoClass ,    revisionInfoTimestampData ,    serviceRegistry )  ;", "(  ( ValidityAuditStrategy )     ( strategy )  )  . setRevisionTimestampGetter ( revisionTimestampGetter )  ;", "}", "return   strategy ;", "}", "METHOD_END"], "methodName": ["initializeAuditStrategy"], "fileName": "org.hibernate.envers.boot.internal.EnversServiceImpl"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . class . getClassLoader (  )  . loadClass ( auditStrategyName )  ;", "}    catch    ( Exception   e )     {", "return   ReflectionTools . loadClass ( auditStrategyName ,    serviceRegistry . getService ( ClassLoaderService . class )  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadClass"], "fileName": "org.hibernate.envers.boot.internal.EnversServiceImpl"}, {"methodBody": ["METHOD_START", "{", "customAuditTablesNames . put ( entityName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["addCustomAuditTableName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    (  ( auditTablePrefix )     +    entityName )     +     ( auditTableSuffix )  ;", "}", "METHOD_END"], "methodName": ["getAuditEntityName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   auditStrategyName ;", "}", "METHOD_END"], "methodName": ["getAuditStrategyName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   String   customHistoryTableName    =    customAuditTablesNames . get ( entityName )  ;", "if    ( customHistoryTableName    =  =    null )     {", "return    (  ( auditTablePrefix )     +    tableName )     +     ( auditTableSuffix )  ;", "}", "return   customHistoryTableName ;", "}", "METHOD_END"], "methodName": ["getAuditTableName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   embeddableSetOrdinalPropertyName ;", "}", "METHOD_END"], "methodName": ["getEmbeddableSetOrdinalPropertyName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   enversService ;", "}", "METHOD_END"], "methodName": ["getEnversService"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   originalIdPropName ;", "}", "METHOD_END"], "methodName": ["getOriginalIdPropName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionEndFieldName ;", "}", "METHOD_END"], "methodName": ["getRevisionEndFieldName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionEndTimestampFieldName ;", "}", "METHOD_END"], "methodName": ["getRevisionEndTimestampFieldName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionFieldName ;", "}", "METHOD_END"], "methodName": ["getRevisionFieldName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoEntityName ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoEntityName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionNumberPath ;", "}", "METHOD_END"], "methodName": ["getRevisionNumberPath"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    ( revisionPropBasePath )     +    propertyName ;", "}", "METHOD_END"], "methodName": ["getRevisionPropPath"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionTypePropName ;", "}", "METHOD_END"], "methodName": ["getRevisionTypePropName"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionTypePropType ;", "}", "METHOD_END"], "methodName": ["getRevisionTypePropType"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionEndTimestampEnabled ;", "}", "METHOD_END"], "methodName": ["isRevisionEndTimestampEnabled"], "fileName": "org.hibernate.envers.configuration.internal.AuditEntitiesConfiguration"}, {"methodBody": ["METHOD_START", "{", "entityNameToAuditingData . put ( pc . getEntityName (  )  ,    cad )  ;", "persistentClassToAuditingData . put ( pc ,    cad )  ;", "}", "METHOD_END"], "methodName": ["addClassAuditingData"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "final   Value   indexValue    =    value . getIndex (  )  ;", "if    (  ( indexValue    !  =    null )     &  &     ( indexValue . getColumnIterator (  )  . hasNext (  )  )  )     {", "final   String   indexColumnName    =    indexValue . getColumnIterator (  )  . next (  )  . getText (  )  ;", "if    ( indexColumnName    !  =    null )     {", "final   PropertyAuditingData   auditingData    =    new   PropertyAuditingData ( indexColumnName ,    propertyAccessorName ,    ModificationStore . FULL ,    RelationTargetAuditMode . AUDITED ,    null ,    null ,    false ,    true ,    indexValue )  ;", "clas . addPropertyAuditingData ( indexColumnName ,    auditingData )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addSyntheticIndexProperty"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "if    ( propertyName    !  =    null )     {", "if    (  ( classAuditingData . getPropertyAuditingData ( propertyName )  )     =  =    null )     {", "throw   new   MappingException (  (  (  (  \"  @ AuditMappedBy   points   to   a   property   that   doesn ' t   exist :     \"     +    referencedEntityName )     +     \"  .  \"  )     +    propertyName )  )  ;", "}", ". LOG . debugf (  \" Non - insertable   property    % s .  % s   will   be   made   insertable   because   a   matching    @ AuditMappedBy   was   found   in   the    % s   entity \"  ,    referencedEntityName ,    propertyName ,    entityName )  ;", "classAuditingData . getPropertyAuditingData ( propertyName )  . setForceInsertable ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["forcePropertyInsertable"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   persistentClassToAuditingData . entrySet (  )  ;", "}", "METHOD_END"], "methodName": ["getAllClassAuditedData"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   entityNameToAuditingData . get ( entityName )  ;", "}", "METHOD_END"], "methodName": ["getClassAuditingData"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "forcePropertyInsertable ( referencedAuditData ,    propertyAuditingData . getAuditMappedBy (  )  ,    entityName ,    referencedEntityName )  ;", "forcePropertyInsertable ( referencedAuditData ,    propertyAuditingData . getPositionMappedBy (  )  ,    entityName ,    referencedEntityName )  ;", "}", "METHOD_END"], "methodName": ["setAuditMappedByInsertable"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < PersistentClass ,    ClassAuditingData >    classAuditingDataEntry    :    persistentClassToAuditingData . entrySet (  )  )     {", "final   PersistentClass   pc    =    classAuditingDataEntry . getKey (  )  ;", "final   ClassAuditingData   classAuditingData    =    classAuditingDataEntry . getValue (  )  ;", "for    ( String   propertyName    :    classAuditingData . getNonSyntheticPropertyNames (  )  )     {", "final   Property   property    =    pc . getProperty ( propertyName )  ;", "updateCalculatedProperty ( pc . getEntityName (  )  ,    property ,    propertyName ,    classAuditingData )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["updateCalculatedFields"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "final   PropertyAuditingData   propertyAuditingData    =    propertyHolder . getPropertyAuditingData ( propertyName )  ;", "final   boolean   isAuditMappedBy    =     ( propertyAuditingData . getAuditMappedBy (  )  )     !  =    null ;", "final   boolean   isRelationMappedBy    =     ( propertyAuditingData . getRelationMappedBy (  )  )     !  =    null ;", "if    ( isAuditMappedBy    |  |    isRelationMappedBy )     {", "final   String   referencedEntityName    =    MappingTools . getReferencedEntityName ( property . getValue (  )  )  ;", "final   ClassAuditingData   referencedAuditData    =    entityNameToAuditingData . get ( referencedEntityName )  ;", "if    ( isAuditMappedBy )     {", "setAuditMappedByInsertable ( referencedEntityName ,    entityName ,    referencedAuditData ,    propertyAuditingData )  ;", "} else", "if    ( isRelationMappedBy    &  &     (  ( property . getValue (  )  )    instanceof   mapping . List )  )     {", "addSyntheticIndexProperty (  (  ( mapping . List )     ( property . getValue (  )  )  )  ,    property . getPropertyAccessorName (  )  ,    referencedAuditData )  ;", "}", "}", "if    ( propertyAuditingData   instanceof   ComponentAuditingData )     {", "final   ComponentAuditingData   componentAuditingData    =     (  ( ComponentAuditingData )     ( propertyAuditingData )  )  ;", "final   Component   component    =     (  ( Component )     ( property . getValue (  )  )  )  ;", "for    ( String   componentPropertyName    :    componentAuditingData . getNonSyntheticPropertyNames (  )  )     {", "final   Property   componentProperty    =    component . getProperty ( componentPropertyName )  ;", "updateCalculatedProperty ( entityName ,    componentProperty ,    componentPropertyName ,    componentAuditingData )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["updateCalculatedProperty"], "fileName": "org.hibernate.envers.configuration.internal.ClassesAuditingData"}, {"methodBody": ["METHOD_START", "{", "final   AuditEntityNameRegister   auditEntityNameRegister    =    new   AuditEntityNameRegister (  )  ;", "final   Iterator < PersistentClass >    classes    =    GraphTopologicalSort . sort ( new   PersistentClassGraphDefiner ( metadata )  )  . iterator (  )  ;", "final   ClassesAuditingData   classesAuditingData    =    new   ClassesAuditingData (  )  ;", "final   Map < PersistentClass ,    EntityXmlMappingData >    xmlMappings    =    new   HashMap <  >  (  )  ;", "while    ( classes . hasNext (  )  )     {", "final   PersistentClass   pc    =    classes . next (  )  ;", "if    (  ( pc . getClassName (  )  )     !  =    null )     {", "final   AnnotationsMetadataReader   annotationsMetadataReader    =    new   AnnotationsMetadataReader ( globalConfiguration ,    reflectionManager ,    pc )  ;", "final   ClassAuditingData   auditData    =    annotationsMetadataReader . getAuditData (  )  ;", "classesAuditingData . addClassAuditingData ( pc ,    auditData )  ;", "}", "}", "classesAuditingData . updateCalculatedFields (  )  ;", "final   AuditMetadataGenerator   auditMetaGen    =    new   AuditMetadataGenerator ( metadata ,    serviceRegistry ,    globalConfiguration ,    audition ,    auditStrategy ,    revisionInfoRelationMapping ,    auditEntityNameRegister )  ;", "for    ( Map . Entry < PersistentClass ,    ClassAuditingData >    pcDatasEntry    :    classesAuditingData . getAllClassAuditedData (  )  )     {", "final   PersistentClass   pc    =    pcDatasEntry . getKey (  )  ;", "final   ClassAuditingData   auditData    =    pcDatasEntry . getValue (  )  ;", "final   EntityXmlMappingData   xmlMappingData    =    new   EntityXmlMappingData (  )  ;", "if    ( auditData . isAudited (  )  )     {", "if    (  !  ( StringTools . isEmpty ( auditData . getAuditTable (  )  . value (  )  )  )  )     {", "audition . addCustomAuditTableName ( pc . getEntityName (  )  ,    auditData . getAuditTable (  )  . value (  )  )  ;", "}", "auditMetaGen . generateFirstPass ( pc ,    auditData ,    xmlMappingData ,    true )  ;", "} else    {", "auditMetaGen . generateFirstPass ( pc ,    auditData ,    xmlMappingData ,    false )  ;", "}", "xmlMappings . put ( pc ,    xmlMappingData )  ;", "}", "for    ( Map . Entry < PersistentClass ,    ClassAuditingData >    pcDatasEntry    :    classesAuditingData . getAllClassAuditedData (  )  )     {", "final   EntityXmlMappingData   xmlMappingData    =    xmlMappings . get ( pcDatasEntry . getKey (  )  )  ;", "if    ( pcDatasEntry . getValue (  )  . isAudited (  )  )     {", "auditMetaGen . generateSecondPass ( pcDatasEntry . getKey (  )  ,    pcDatasEntry . getValue (  )  ,    xmlMappingData )  ;", "try    {", "mappingCollector . addDocument ( xmlMappingData . getMainXmlMapping (  )  )  ;", "for    ( Document   additionalMapping    :    xmlMappingData . getAdditionalXmlMappings (  )  )     {", "mappingCollector . addDocument ( additionalMapping )  ;", "}", "}    catch    ( DocumentException   e )     {", "throw   new   MappingException ( e )  ;", "}", "}", "}", "if    (  ( auditMetaGen . getions (  )  . size (  )  )     >     0  )     {", "try    {", "if    ( revisionInfoXmlMapping    !  =    null )     {", "mappingCollector . addDocument ( revisionInfoXmlMapping )  ;", "}", "}    catch    ( DocumentException   e )     {", "throw   new   MappingException ( e )  ;", "}", "}", "return   new   ions ( auditMetaGen . getions (  )  ,    auditMetaGen . getNotAuditedions (  )  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.hibernate.envers.configuration.internal.EntitiesConfigurator"}, {"methodBody": ["METHOD_START", "{", "return   correlatedSubqueryOperator ;", "}", "METHOD_END"], "methodName": ["getCorrelatedSubqueryOperator"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   defaultCatalogName ;", "}", "METHOD_END"], "methodName": ["getDefaultCatalogName"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   defaultSchemaName ;", "}", "METHOD_END"], "methodName": ["getDefaultSchemaName"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   enversService ;", "}", "METHOD_END"], "methodName": ["getEnversService"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   modifiedFlagSuffix ;", "}", "METHOD_END"], "methodName": ["getModifiedFlagSuffix"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   revisionListenerClass ;", "}", "METHOD_END"], "methodName": ["getRevisionListenerClass"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   hasGlobalSettingForWithModifiedFlag ;", "}", "METHOD_END"], "methodName": ["hasSettingForUsingModifiedFlag"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   allowIdentifierReuse ;", "}", "METHOD_END"], "methodName": ["isAllowIdentifierReuse"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   cascadeDeleteRevision ;", "}", "METHOD_END"], "methodName": ["isCascadeDeleteRevision"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   doNotAuditOptimisticLockingField ;", "}", "METHOD_END"], "methodName": ["isDoNotAuditOptimisticLockingField"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   generateRevisionsForCollections ;", "}", "METHOD_END"], "methodName": ["isGenerateRevisionsForCollections"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   globalWithModifiedFlag ;", "}", "METHOD_END"], "methodName": ["isGlobalWithModifiedFlag"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   storeDataAtDelete ;", "}", "METHOD_END"], "methodName": ["isStoreDataAtDelete"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   trackEntitiesChangedInRevision ;", "}", "METHOD_END"], "methodName": ["isTrackEntitiesChangedInRevision"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   useRevisionEntityWithNativeId ;", "}", "METHOD_END"], "methodName": ["isUseRevisionEntityWithNativeId"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "this . trackEntitiesChangedInRevision    =    trackEntitiesChangedInRevision ;", "}", "METHOD_END"], "methodName": ["setTrackEntitiesChangedInRevision"], "fileName": "org.hibernate.envers.configuration.internal.GlobalConfiguration"}, {"methodBody": ["METHOD_START", "{", "while    ( subclassIterator . hasNext (  )  )     {", "final      subclass    =    subclassIterator . next (  )  ;", "neighbours . add ( subclass )  ;", "addNeighbours ( neighbours ,     (  ( Iterator <  >  )     ( subclass . getSubclassIterator (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addNeighbours"], "fileName": "org.hibernate.envers.configuration.internal.PersistentClassGraphDefiner"}, {"methodBody": ["METHOD_START", "{", "boolean   revisionEntityFound    =    false ;", "RevisionInfoGenerator   revisionInfoGenerator    =    null ;", "Class <  ?  >    revisionInfoClass    =    null ;", "for    ( PersistentClass   persistentClass    :    metadata . getEntityBindings (  )  )     {", "if    (  ( persistentClass . getClassName (  )  )     !  =    null )     {", "XClass   clazz ;", "try    {", "clazz    =    reflectionManager . classForName ( persistentClass . getClassName (  )  )  ;", "}    catch    ( ClassLoadingException   e )     {", "throw   new   MappingException ( e )  ;", "}", "final   RevisionEntity   revisionEntity    =    clazz . getAnnotation ( RevisionEntity . class )  ;", "if    ( revisionEntity    !  =    null )     {", "if    ( revisionEntityFound )     {", "throw   new   MappingException (  \" Only   one   entity   may   be   annotated   with    @ RevisionEntity !  \"  )  ;", "}", "if    (  ( clazz . getAnnotation ( Audited . class )  )     !  =    null )     {", "throw   new   MappingException (  \" An   entity   annotated   with    @ RevisionEntity   cannot   be   audited !  \"  )  ;", "}", "revisionEntityFound    =    true ;", "final   MutableBoolean   revisionNumberFound    =    new   MutableBoolean (  )  ;", "final   MutableBoolean   revisionTimestampFound    =    new   MutableBoolean (  )  ;", "final   MutableBoolean   modifiedEntityNamesFound    =    new   MutableBoolean (  )  ;", "searchForRevisionInfoCfg ( clazz ,    reflectionManager ,    revisionNumberFound ,    revisionTimestampFound ,    modifiedEntityNamesFound )  ;", "if    (  !  ( revisionNumberFound . isSet (  )  )  )     {", "throw   new   MappingException (  (  \" An   entity   annotated   with    @ RevisionEntity   must   have   a   field   annotated    \"     +     \" with    @ RevisionNumber !  \"  )  )  ;", "}", "if    (  !  ( revisionTimestampFound . isSet (  )  )  )     {", "throw   new   MappingException (  (  \" An   entity   annotated   with    @ RevisionEntity   must   have   a   field   annotated    \"     +     \" with    @ RevisionTimestamp !  \"  )  )  ;", "}", "revisionInfoEntityName    =    persistentClass . getEntityName (  )  ;", "revisionInfoClass    =    persistentClass . getMappedClass (  )  ;", "final   Class <  ?    extends   RevisionListener >    revisionListenerClass    =    getRevisionListenerClass ( revisionEntity . value (  )  )  ;", "revisionInfoTimestampType    =    persistentClass . getProperty ( revisionInfoTimestampData . getName (  )  )  . getType (  )  ;", "if    (  (  (  ( globalCfg . isTrackEntitiesChangedInRevision (  )  )     |  |     (  ( globalCfg . isUseRevisionEntityWithNativeId (  )  )     &  &     ( DefaultTrackingModifiedEntitiesRevisionEntity . class . isAssignableFrom ( revisionInfoClass )  )  )  )     |  |     (  (  !  ( globalCfg . isUseRevisionEntityWithNativeId (  )  )  )     &  &     ( SequenceIdTrackingModifiedEntitiesRevisionEntity . class . isAssignableFrom ( revisionInfoClass )  )  )  )     |  |     ( modifiedEntityNamesFound . isSet (  )  )  )     {", "revisionInfoGenerator    =    new   DefaultTrackingModifiedEntitiesRevisionInfoGenerator ( revisionInfoEntityName ,    revisionInfoClass ,    revisionListenerClass ,    revisionInfoTimestampData ,    isTimestampAsDate (  )  ,    modifiedEntityNamesData ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )  ;", "globalCfg . setTrackEntitiesChangedInRevision ( true )  ;", "} else    {", "revisionInfoGenerator    =    new   DefaultRevisionInfoGenerator ( revisionInfoEntityName ,    revisionInfoClass ,    revisionListenerClass ,    revisionInfoTimestampData ,    isTimestampAsDate (  )  ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )  ;", "}", "}", "}", "}", "Document   revisionInfoXmlMapping    =    null ;", "final   Class <  ?    extends   RevisionListener >    revisionListenerClass    =    getRevisionListenerClass ( RevisionListener . class )  ;", "if    ( revisionInfoGenerator    =  =    null )     {", "if    ( globalCfg . isTrackEntitiesChangedInRevision (  )  )     {", "revisionInfoClass    =     ( globalCfg . isUseRevisionEntityWithNativeId (  )  )     ?    DefaultTrackingModifiedEntitiesRevisionEntity . class    :    SequenceIdTrackingModifiedEntitiesRevisionEntity . class ;", "revisionInfoEntityName    =    revisionInfoClass . getName (  )  ;", "revisionInfoGenerator    =    new   DefaultTrackingModifiedEntitiesRevisionInfoGenerator ( revisionInfoEntityName ,    revisionInfoClass ,    revisionListenerClass ,    revisionInfoTimestampData ,    isTimestampAsDate (  )  ,    modifiedEntityNamesData ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )  ;", "} else    {", "revisionInfoClass    =     ( globalCfg . isUseRevisionEntityWithNativeId (  )  )     ?    DefaultRevisionEntity . class    :    SequenceIdRevisionEntity . class ;", "revisionInfoGenerator    =    new   DefaultRevisionInfoGenerator ( revisionInfoEntityName ,    revisionInfoClass ,    revisionListenerClass ,    revisionInfoTimestampData ,    isTimestampAsDate (  )  ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )  ;", "}", "revisionInfoXmlMapping    =    generateDefaultRevisionInfoXmlMapping (  )  ;", "}", "return   new   Result ( revisionInfoGenerator ,    revisionInfoXmlMapping ,    new   RevisionInfoQueryCreator ( revisionInfoEntityName ,    revisionInfoIdData . getName (  )  ,    revisionInfoTimestampData . getName (  )  ,    isTimestampAsDate (  )  )  ,    generateRevisionInfoRelationMapping (  )  ,    new   RevisionInfoNumberReader ( revisionInfoClass ,    revisionInfoIdData ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )  ,     ( globalCfg . isTrackEntitiesChangedInRevision (  )     ?    new   ModifiedEntityNamesReader ( revisionInfoClass ,    modifiedEntityNamesData ,    metadata . getMetadataBuildingOptions (  )  . getServiceRegistry (  )  )     :    null )  ,    revisionInfoEntityName ,    revisionInfoClass ,    revisionInfoTimestampData )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   Document   document    =    globalCfg . getEnversService (  )  . getXmlHelper (  )  . getDocumentFactory (  )  . createDocument (  )  ;", "final   Element   classMapping    =    MetadataTools . createEntity ( document ,    new   AuditTableData ( null ,    null ,    globalCfg . getDefaultSchemaName (  )  ,    globalCfg . getDefaultCatalogName (  )  )  ,    null ,    null )  ;", "classMapping . addAttribute (  \" name \"  ,    rEntityName )  ;", "classMapping . addAttribute (  \" table \"  ,     \" REVINFO \"  )  ;", "final   Element   idProperty    =    MetadataTools . addNativelyGeneratedId ( classMapping ,    rIdData . getName (  )  ,    revisionPropType ,    globalCfg . isUseRevisionEntityWithNativeId (  )  )  ;", "MetadataTools . addColumn ( idProperty ,     \" REV \"  ,    null ,    null ,    null ,    null ,    null ,    null ,    false )  ;", "final   Element   timestampProperty    =    MetadataTools . addProperty ( classMapping ,    rTimestampData . getName (  )  ,    rTimestampType . getName (  )  ,    true ,    false )  ;", "MetadataTools . addColumn ( timestampProperty ,     \" REVTSTMP \"  ,    null ,    null ,    null ,    null ,    null ,    null ,    false )  ;", "if    ( globalCfg . isTrackEntitiesChangedInRevision (  )  )     {", "generateEntityNamesTrackingTableMapping ( classMapping ,     \" modifiedEntityNames \"  ,    globalCfg . getDefaultSchemaName (  )  ,    globalCfg . getDefaultCatalogName (  )  ,     \" REVCHANGES \"  ,     \" REV \"  ,     \" ENTITYNAME \"  ,     \" string \"  )  ;", "}", "return   document ;", "}", "METHOD_END"], "methodName": ["generateDefaultRevisionInfoXmlMapping"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   Element   set    =    classMapping . addElement (  \" set \"  )  ;", "set . addAttribute (  \" name \"  ,    propertyName )  ;", "set . addAttribute (  \" table \"  ,    joinTableName )  ;", "set . addAttribute (  \" schema \"  ,    joinTableSchema )  ;", "set . addAttribute (  \" catalog \"  ,    joinTableCatalog )  ;", "set . addAttribute (  \" cascade \"  ,     \" persist ,    delete \"  )  ;", "set . addAttribute (  \" fetch \"  ,     \" join \"  )  ;", "set . addAttribute (  \" lazy \"  ,     \" false \"  )  ;", "final   Element   key    =    set . addElement (  \" key \"  )  ;", "key . addAttribute (  \" column \"  ,    joinTablePrimaryKeyColumnName )  ;", "final   Element   element    =    set . addElement (  \" element \"  )  ;", "element . addAttribute (  \" type \"  ,    joinTableValueColumnType )  ;", "final   Element   column    =    element . addElement (  \" column \"  )  ;", "column . addAttribute (  \" name \"  ,    joinTableValueColumnName )  ;", "}", "METHOD_END"], "methodName": ["generateEntityNamesTrackingTableMapping"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   Document   document    =    globalCfg . getEnversService (  )  . getXmlHelper (  )  . getDocumentFactory (  )  . createDocument (  )  ;", "final   Element   revRelMapping    =    document . addElement (  \" key - many - to - one \"  )  ;", "revRelMapping . addAttribute (  \" type \"  ,    revisionPropType )  ;", "revRelMapping . addAttribute (  \" class \"  ,    rEntityName )  ;", "if    (  ( revisionPropSqlType )     !  =    null )     {", "MetadataTools . addColumn ( revRelMapping ,     \"  *  \"  ,    null ,    null ,    null ,    revisionPropSqlType ,    null ,    null ,    false )  ;", "}", "return   revRelMapping ;", "}", "METHOD_END"], "methodName": ["generateRevisionInfoRelationMapping"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( globalCfg . getRevisionListenerClass (  )  )     !  =    null )     {", "return   globalCfg . getRevisionListenerClass (  )  ;", "}", "return   defaultListener ;", "}", "METHOD_END"], "methodName": ["getRevisionListenerClass"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   String   typename    =    revisionInfoTimestampType . getName (  )  ;", "return    (  (  \" date \"  . equals ( typename )  )     |  |     (  \" time \"  . equals ( typename )  )  )     |  |     (  \" timestamp \"  . equals ( typename )  )  ;", "}", "METHOD_END"], "methodName": ["isTimestampAsDate"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "final   XClass   superclazz    =    clazz . getSuperclass (  )  ;", "if    (  !  (  \" Object \"  . equals ( superclazz . getName (  )  )  )  )     {", "searchForfg ( superclazz ,    reflectionManager ,    revisionNumberFound ,    revisionTimestampFound ,    modifiedEntityNamesFound )  ;", "}", "searchForfgInProperties ( clazz ,    reflectionManager ,    revisionNumberFound ,    revisionTimestampFound ,    modifiedEntityNamesFound ,     \" field \"  )  ;", "searchForfgInProperties ( clazz ,    reflectionManager ,    revisionNumberFound ,    revisionTimestampFound ,    modifiedEntityNamesFound ,     \" property \"  )  ;", "}", "METHOD_END"], "methodName": ["searchForRevisionInfoCfg"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( XProperty   property    :    clazz . getDeclaredProperties ( accessType )  )     {", "final   RevisionNumber   revisionNumber    =    property . getAnnotation ( RevisionNumber . class )  ;", "final   RevisionTimestamp   revisionTimestamp    =    property . getAnnotation ( RevisionTimestamp . class )  ;", "final   ModifiedEntityNames   modifiedEntityNames    =    property . getAnnotation ( ModifiedEntityNames . class )  ;", "if    ( revisionNumber    !  =    null )     {", "if    ( revisionNumberFound . isSet (  )  )     {", "throw   new   MappingException (  \" Only   one   property   may   be   annotated   with    @ RevisionNumber !  \"  )  ;", "}", "final   XClass   revisionNumberClass    =    property . getType (  )  ;", "if    (  ( reflectionManager . equals ( revisionNumberClass ,    Integer . class )  )     |  |     ( reflectionManager . equals ( revisionNumberClass ,    Integer . TYPE )  )  )     {", "rIdData    =    new   PropertyData ( property . getName (  )  ,    property . getName (  )  ,    accessType ,    null )  ;", "revisionNumberFound . set (  )  ;", "} else", "if    (  ( reflectionManager . equals ( revisionNumberClass ,    Long . class )  )     |  |     ( reflectionManager . equals ( revisionNumberClass ,    Long . TYPE )  )  )     {", "rIdData    =    new   PropertyData ( property . getName (  )  ,    property . getName (  )  ,    accessType ,    null )  ;", "revisionNumberFound . set (  )  ;", "revisionPropType    =     \" long \"  ;", "} else    {", "throw   new   MappingException (  (  \" The   field   annotated   with    @ RevisionNumber   must   be   of   type    \"     +     \" int ,    Integer ,    long   or   Long \"  )  )  ;", "}", "final   Column   revisionPropColumn    =    property . getAnnotation ( Column . class )  ;", "if    ( revisionPropColumn    !  =    null )     {", "revisionPropSqlType    =    revisionPropColumn . columnDefinition (  )  ;", "}", "}", "if    ( revisionTimestamp    !  =    null )     {", "if    ( revisionTimestampFound . isSet (  )  )     {", "throw   new   MappingException (  \" Only   one   property   may   be   annotated   with    @ RevisionTimestamp !  \"  )  ;", "}", "final   XClass   revisionTimestampClass    =    property . getType (  )  ;", "if    (  (  (  ( reflectionManager . equals ( revisionTimestampClass ,    Long . class )  )     |  |     ( reflectionManager . equals ( revisionTimestampClass ,    Long . TYPE )  )  )     |  |     ( reflectionManager . equals ( revisionTimestampClass ,    Date . class )  )  )     |  |     ( reflectionManager . equals ( revisionTimestampClass ,    class )  )  )     {", "rTimestampData    =    new   PropertyData ( property . getName (  )  ,    property . getName (  )  ,    accessType ,    null )  ;", "revisionTimestampFound . set (  )  ;", "} else    {", "throw   new   MappingException (  (  \" The   field   annotated   with    @ RevisionTimestamp   must   be   of   type    \"     +     \" long ,    Long ,    Date \"  )  )  ;", "}", "}", "if    ( modifiedEntityNames    !  =    null )     {", "if    ( modifiedEntityNamesFound . isSet (  )  )     {", "throw   new   MappingException (  \" Only   one   property   may   be   annotated   with    @ ModifiedEntityNames !  \"  )  ;", "}", "final   XClass   modifiedEntityNamesClass    =    property . getType (  )  ;", "if    (  ( reflectionManager . equals ( modifiedEntityNamesClass ,    Set . class )  )     &  &     ( reflectionManager . equals ( property . getElementClass (  )  ,    String . class )  )  )     {", "modifiedEntityNamesData    =    new   PropertyData ( property . getName (  )  ,    property . getName (  )  ,    accessType ,    null )  ;", "modifiedEntityNamesFound . set (  )  ;", "} else    {", "throw   new   MappingException (  \" The   field   annotated   with    @ ModifiedEntityNames   must   be   of   Set < String >    type .  \"  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["searchForRevisionInfoCfgInProperties"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   modifiedEntityNamesReader ;", "}", "METHOD_END"], "methodName": ["getModifiedEntityNamesReader"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoClass ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoClass"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoEntityName ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoEntityName"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoGenerator ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoGenerator"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoNumberReader ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoNumberReader"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoQueryCreator ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoQueryCreator"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoRelationMapping ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoRelationMapping"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoTimestampData ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoTimestampData"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   revisionInfoXmlMapping ;", "}", "METHOD_END"], "methodName": ["getRevisionInfoXmlMapping"], "fileName": "org.hibernate.envers.configuration.internal.RevisionInfoConfigurationResult"}, {"methodBody": ["METHOD_START", "{", "return   auditEntityNames . contains ( auditEntityName )  ;", "}", "METHOD_END"], "methodName": ["check"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditEntityNameRegister"}, {"methodBody": ["METHOD_START", "{", "String   auditEntityName    =    baseAuditEntityName ;", "int   count    =     1  ;", "while    ( check ( auditEntityName )  )     {", "auditEntityName    =    baseAuditEntityName    +     ( count +  +  )  ;", "}", "return   auditEntityName ;", "}", "METHOD_END"], "methodName": ["createUnique"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditEntityNameRegister"}, {"methodBody": ["METHOD_START", "{", "if    ( auditEntityNames . contains ( auditEntityName )  )     {", "throw   new   MappingException (  (  (  \" The   audit   entity   name    '  \"     +    auditEntityName )     +     \"  '    is   already   registered .  \"  )  )  ;", "}", "auditEntityNames . add ( auditEntityName )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditEntityNameRegister"}, {"methodBody": ["METHOD_START", "{", "if    (  ( auditStrategy )    instanceof   ValidityAuditStrategy )     {", "final   Element   endRevMapping    =     (  ( Element )     ( revisionInfoRelationMapping . clone (  )  )  )  ;", "endRevMapping . setName (  \" many - to - one \"  )  ;", "endRevMapping . addAttribute (  \" name \"  ,    verEntCfg . getRevisionEndFieldName (  )  )  ;", "Tools . addOrModifyColumn ( endRevMapping ,    verEntCfg . getRevisionEndFieldName (  )  )  ;", "anyMapping . add ( endRevMapping )  ;", "if    ( verEntCfg . isRevisionEndTimestampEnabled (  )  )     {", "final   String   revisionInfoTimestampSqlType    =    INSTANCE . getName (  )  ;", "final   Element   timestampProperty    =    Tools . addProperty ( anyMapping ,    verEntCfg . getRevisionEndTimestampFieldName (  )  ,    revisionInfoTimestampSqlType ,    true ,    true ,    false )  ;", "Tools . addColumn ( timestampProperty ,    verEntCfg . getRevisionEndTimestampFieldName (  )  ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addEndRevision"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Join >    joins    =    pc . getJoinIterator (  )  ;", "while    ( joins . hasNext (  )  )     {", "final   Join   join    =    joins . next (  )  ;", "final   Element   joinElement    =    entitiesJoins . get ( entityName )  . get ( join )  ;", "if    ( joinElement    !  =    null )     {", "addProperties ( joinElement ,    join . getPropertyIterator (  )  ,    currentMapper ,    auditingData ,    entityName ,    xmlMappingData ,    firstPass )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addJoins"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( processModifiedFlag    &  &     ( propertyAuditingData . isUsingModifiedFlag (  )  )  )     {", "Tools . addModifiedFlagProperty ( parent ,    propertyAuditingData . getName (  )  ,    globalCfg . getModifiedFlagSuffix (  )  ,    propertyAuditingData . getModifiedFlagName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addModifiedFlagIfNeeded"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =    properties . next (  )  ;", "final   String   propertyName    =    property . getName (  )  ;", "final   PropertyAuditingData   propertyAuditingData    =    auditingData . getPropertyAuditingData ( propertyName )  ;", "if    ( propertyAuditingData    !  =    null )     {", "if    ( property   instanceof   SyntheticProperty )     {", "if    ( property . getValue (  )  . isAltUniqueKey (  )  )     {", "continue ;", "}", "}", "addValue ( parent ,    property . getValue (  )  ,    currentMapper ,    entityName ,    xmlMappingData ,    propertyAuditingData ,    isPropertyInsertable ( property )  ,    firstPass ,    true )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addProperties"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "anyMapping . add ( cloneAndSetupRevisionInfoRelationMapping (  )  )  ;", "}", "METHOD_END"], "methodName": ["addRevisionInfoRelation"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "addRevisionType ( anyMapping ,    anyMappingEnd ,    false )  ;", "}", "METHOD_END"], "methodName": ["addRevisionType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Element   revTypeProperty    =    MetadataTools . addProperty ( anyMapping ,    verEntCfg . getRevisionTypePropName (  )  ,    verEntCfg . getRevisionTypePropType (  )  ,    true ,    isKey )  ;", "revTypeProperty . addAttribute (  \" type \"  ,     \" internal . entities . RevisionTypeType \"  )  ;", "addEndRevision ( anyMappingEnd )  ;", "}", "METHOD_END"], "methodName": ["addRevisionType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "for    ( PropertyAuditingData   propertyAuditingData    :    auditingData . getSyntheticProperties (  )  )     {", "addValue ( classMapping ,    propertyAuditingData . getValue (  )  ,    currentMapper ,    entityName ,    xmlMappingData ,    propertyAuditingData ,    true ,    firstPass ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["addSynthetics"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( firstPass )     {", "addValueInFirstPass ( parent ,    value ,    currentMapper ,    entityName ,    xmlMappingData ,    propertyingData ,    insertable ,    processModifiedFlag )  ;", "} else    {", "addValueInSecondPass ( parent ,    value ,    currentMapper ,    entityName ,    xmlMappingData ,    propertyingData ,    insertable ,    processModifiedFlag )  ;", "}", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    value . getType (  )  ;", "final   boolean   isBasic    =    basicMetadataGenerator . addBasic ( parent ,    propertyAuditingData ,    value ,    currentMapper ,    insertable ,    false )  ;", "if    ( isBasic )     {", "} else", "if    ( type   instanceof   ComponentType )     {", "componen . addComponent ( parent ,    propertyAuditingData ,    value ,    currentMapper ,    entityName ,    xmlMappingData ,    true )  ;", "} else    {", "if    (  !  ( processedInSecondPass ( type )  )  )     {", "throwUnsupportedTypeException ( type ,    entityName ,    propertyAuditingData . getName (  )  )  ;", "}", "return ;", "}", "addModifiedFlagIfNeeded ( parent ,    propertyAuditingData ,    processModifiedFlag )  ;", "}", "METHOD_END"], "methodName": ["addValueInFirstPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    value . getType (  )  ;", "if    ( type   instanceof   ComponentType )     {", "componen . addComponent ( parent ,    propertyAuditingData ,    value ,    currentMapper ,    entityName ,    xmlMappingData ,    false )  ;", "return ;", "} else", "if    ( type   instanceof   ManyToOneType )     {", "toOneRelationMetadataGenerator . addToOne ( parent ,    propertyAuditingData ,    value ,    currentMapper ,    entityName ,    insertable )  ;", "} else", "if    ( type   instanceof   OneToOneType )     {", "final   OneToOne   oneToOne    =     (  ( OneToOne )     ( value )  )  ;", "if    (  ( oneToOne . getReferencedPropertyName (  )  )     !  =    null )     {", "toOneRelationMetadataGenerator . addOneToOneNotOwning ( propertyAuditingData ,    value ,    currentMapper ,    entityName )  ;", "} else    {", "toOneRelationMetadataGenerator . addOneToOnePrimaryKeyJoinColumn ( propertyAuditingData ,    value ,    currentMapper ,    entityName ,    insertable )  ;", "}", "} else", "if    ( type   instanceof   CollectionType )     {", "final   CollectionMetadataGenerator   collectionMetadataGenerator    =    new   CollectionMetadataGenerator ( this ,     (  ( Collection )     ( value )  )  ,    currentMapper ,    entityName ,    xmlMappingData ,    propertyAuditingData )  ;", "collectionMetadataGenerator . addCollection (  )  ;", "} else    {", "return ;", "}", "addModifiedFlagIfNeeded ( parent ,    propertyAuditingData ,    processModifiedFlag )  ;", "}", "METHOD_END"], "methodName": ["addValueInSecondPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =    properties . next (  )  ;", "final   String   propertyName    =    property . getName (  )  ;", "final   PropertyingData   propertyingData    =    auditingData . getPropertyingData ( propertyName )  ;", "if    ( propertyingData    =  =    null )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["checkPropertiesAudited"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Element   revMapping    =     (  ( Element )     ( revisionInfoRelationMapping . clone (  )  )  )  ;", "revMapping . addAttribute (  \" name \"  ,    verEntCfg . getRevisionFieldName (  )  )  ;", "if    ( globalCfg . isCascadeDeleteRevision (  )  )     {", "revMapping . addAttribute (  \" on - delete \"  ,     \" cascade \"  )  ;", "}", "Tools . addOrModifyColumn ( revMapping ,    verEntCfg . getRevisionFieldName (  )  )  ;", "return   revMapping ;", "}", "METHOD_END"], "methodName": ["cloneAndSetupRevisionInfoRelationMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Join >    joins    =    pc . getJoinIterator (  )  ;", "final   Map < Join ,    Element >    joinElements    =    new   HashMap <  >  (  )  ;", "entitiesJoins . put ( pc . getEntityName (  )  ,    joinElements )  ;", "while    ( joins . hasNext (  )  )     {", "Join   join    =    joins . next (  )  ;", "if    (  !  ( checkPropertiesAudited ( join . getPropertyIterator (  )  ,    auditingData )  )  )     {", "continue ;", "}", "final   String   originalTableName    =    join . getTable (  )  . getName (  )  ;", "String   auditTableName    =    auditingData . getSecondaryTableDictionary (  )  . get ( originalTableName )  ;", "if    ( auditTableName    =  =    null )     {", "auditTableName    =    verEntCfg . getAuditEntityName ( originalTableName )  ;", "}", "final   String   schema    =    getSchema ( auditingData . getAuditTable (  )  . schema (  )  ,    join . getTable (  )  )  ;", "final   String   catalog    =    getCatalog ( auditingData . getAuditTable (  )  . catalog (  )  ,    join . getTable (  )  )  ;", "final   Element   joinElement    =    Tools . createJoin ( parent ,    auditTableName ,    schema ,    catalog )  ;", "joinElements . put ( join ,    joinElement )  ;", "if    ( join . isOptional (  )  )     {", "joinElement . addAttribute (  \" optional \"  ,     \" true \"  )  ;", "}", "if    ( join . isInverse (  )  )     {", "joinElement . addAttribute (  \" inverse \"  ,     \" true \"  )  ;", "}", "final   Element   joinKey    =    joinElement . addElement (  \" key \"  )  ;", "Tools . addColumns ( joinKey ,    join . getKey (  )  . getColumnIterator (  )  )  ;", "Tools . addColumn ( joinKey ,    verEntCfg . getRevisionFieldName (  )  ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["createJoins"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   schema    =    getSchema ( auditingData . getAuditTable (  )  . schema (  )  ,    pc . getTable (  )  )  ;", "final   String   catalog    =    getCatalog ( auditingData . getAuditTable (  )  . catalog (  )  ,    pc . getTable (  )  )  ;", "if    (  ! isAudited )     {", "final   String   entityName    =    pc . getEntityName (  )  ;", "final   IdMappingData   idMapper    =    idMetadataGenerator . addId ( pc ,    false )  ;", "if    ( idMapper    =  =    null )     {", ". LOG . debugf (  \" Unable   to   create   auditing   id   mapping   for   entity    % s ,    because   of   an   unsupported   Hibernate   id   mapping    ( e . g .    key - many - to - one )  \"  ,    entityName )  ;", "return ;", "}", "final   ExtendedPropertyMapper   propertyMapper    =    null ;", "final   String   parentEntityName    =    null ;", "final   EntityConfiguration   entityCfg    =    new   EntityConfiguration ( entityName ,    pc . getClassName (  )  ,    idMapper ,    propertyMapper ,    parentEntityName )  ;", "notAuditedEntitiesConfigurations . put ( entityName ,    entityCfg )  ;", "return ;", "}", "final   String   entityName    =    pc . getEntityName (  )  ;", ". LOG . debugf (  \" Generating   first - pass   auditing   mapping   for   entity    % s \"  ,    entityName )  ;", "final   String   auditEntityName    =    verEntCfg . getAuditEntityName ( entityName )  ;", "final   String   auditTableName    =    verEntCfg . getAuditTableName ( entityName ,    pc . getTable (  )  . getName (  )  )  ;", "auditEntityNameRegister . register ( auditEntityName )  ;", "final   AuditTableData   auditTableData    =    new   AuditTableData ( auditEntityName ,    auditTableName ,    schema ,    catalog )  ;", "final   IdMappingData   idMapper    =    idMetadataGenerator . addId ( pc ,    true )  ;", "final   InheritanceType   inheritanceType    =    InheritanceType . get ( pc )  ;", "final   Element   classMapping ;", "final   ExtendedPropertyMapper   propertyMapper ;", "final   String   parentEntityName ;", "final   Triple < Element ,    ExtendedPropertyMapper ,    String >    mappingData ;", "switch    ( inheritanceType )     {", "case   NONE    :", "mappingData    =    generateMappingData ( pc ,    xmlMappingData ,    auditTableData ,    idMapper )  ;", "break ;", "case   SINGLE    :", "mappingData    =    generateInheritanceMappingData ( pc ,    xmlMappingData ,    auditTableData ,     \" subclass \"  )  ;", "break ;", "case   JOINED    :", "mappingData    =    generateInheritanceMappingData ( pc ,    xmlMappingData ,    auditTableData ,     \" joined - subclass \"  )  ;", "final   Element   keyMapping    =    mappingData . getFirst (  )  . addElement (  \" key \"  )  ;", "MetadataTools . addColumns ( keyMapping ,    pc . getTable (  )  . getPrimaryKey (  )  . columnIterator (  )  )  ;", "keyMapping . add (  (  ( Element )     ( cloneAndSetupRevisionInfoRelationMapping (  )  . element (  \" column \"  )  . clone (  )  )  )  )  ;", "break ;", "case   TABLE _ PER _ CLASS    :", "mappingData    =    generateInheritanceMappingData ( pc ,    xmlMappingData ,    auditTableData ,     \" union - subclass \"  )  ;", "break ;", "default    :", "throw   new   AssertionError (  \" Impossible   enum   value .  \"  )  ;", "}", "classMapping    =    mappingData . getFirst (  )  ;", "propertyMapper    =    mappingData . getSecond (  )  ;", "parentEntityName    =    mappingData . getThird (  )  ;", "xmlMappingData . setClassMapping ( classMapping )  ;", "addProperties ( classMapping ,    pc . getUnjoinedPropertyIterator (  )  ,    propertyMapper ,    auditingData ,    pc . getEntityName (  )  ,    xmlMappingData ,    true )  ;", "createJoins ( pc ,    classMapping ,    auditingData )  ;", "addJoins ( pc ,    propertyMapper ,    auditingData ,    pc . getEntityName (  )  ,    xmlMappingData ,    true )  ;", "addSynthetics ( classMapping ,    auditingData ,    propertyMapper ,    xmlMappingData ,    pc . getEntityName (  )  ,    true )  ;", "final   EntityConfiguration   entityCfg    =    new   EntityConfiguration ( auditEntityName ,    pc . getClassName (  )  ,    idMapper ,    propertyMapper ,    parentEntityName )  ;", "entitiesConfigurations . put ( pc . getEntityName (  )  ,    entityCfg )  ;", "}", "METHOD_END"], "methodName": ["generateFirstPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   extendsEntityName    =    verEntCfg . getAuditEntityName ( pc . getSuperclass (  )  . getEntityName (  )  )  ;", "final   Element   classMapping    =    MetadataTools . createSubclassEntity ( xmlMappingData . getMainXmlMapping (  )  ,    inheritanceMappingType ,    auditTableData ,    extendsEntityName ,    pc . getDiscriminatorValue (  )  ,    pc . isAbstract (  )  )  ;", "final   String   parentEntityName    =    pc . getSuperclass (  )  . getEntityName (  )  ;", "final   EntityConfiguration   parentConfiguration    =    entitiesConfigurations . get ( parentEntityName )  ;", "if    ( parentConfiguration    =  =    null )     {", "throw   new   MappingException (  (  (  (  (  \" Entity    '  \"     +     ( pc . getEntityName (  )  )  )     +     \"  '    is   audited ,    but   its   superclass :     '  \"  )     +    parentEntityName )     +     \"  '    is   not .  \"  )  )  ;", "}", "final   ExtendedPropertyMapper   parentPropertyMapper    =    parentConfiguration . getPropertyMapper (  )  ;", "final   ExtendedPropertyMapper   propertyMapper    =    new   SubclassPropertyMapper ( new   MultiPropertyMapper (  )  ,    parentPropertyMapper )  ;", "return   Triple . make ( classMapping ,    propertyMapper ,    parentEntityName )  ;", "}", "METHOD_END"], "methodName": ["generateInheritanceMappingData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Element   classMapping    =    MetadataTools . createEntity ( xmlMappingData . getMainXmlMapping (  )  ,    auditTableData ,    pc . getDiscriminatorValue (  )  ,    pc . isAbstract (  )  )  ;", "final   ExtendedPropertyMapper   propertyMapper    =    new   MultiPropertyMapper (  )  ;", "if    (  ( pc . getDiscriminator (  )  )     !  =    null )     {", "final   Element   discriminatorElement    =    classMapping . addElement (  \" discriminator \"  )  ;", "MetadataTools . addColumnsOrFormulas ( discriminatorElement ,    pc . getDiscriminator (  )  . getColumnIterator (  )  )  ;", "discriminatorElement . addAttribute (  \" type \"  ,    pc . getDiscriminator (  )  . getType (  )  . getName (  )  )  ;", "}", "classMapping . add (  (  ( Element )     ( idMapper . getXmlMapping (  )  . clone (  )  )  )  )  ;", "addRevisionType ( classMapping ,    classMapping )  ;", "return   Triple . make ( classMapping ,    propertyMapper ,    null )  ;", "}", "METHOD_END"], "methodName": ["generateMappingData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   entityName    =    pc . getEntityName (  )  ;", ". LOG . debugf (  \" Generating   second - pass   auditing   mapping   for   entity    % s \"  ,    entityName )  ;", "final   CompositeMapperBuilder   propertyMapper    =    entitiesConfigurations . get ( entityName )  . getPropertyMapper (  )  ;", "final   Element   parent    =    xmlMappingData . getClassMapping (  )  ;", "idMetadataGenerator . generateSecondPass ( entityName ,    pc )  ;", "addProperties ( parent ,    pc . getUnjoinedPropertyIterator (  )  ,    propertyMapper ,    auditingData ,    entityName ,    xmlMappingData ,    false )  ;", "addJoins ( pc ,    propertyMapper ,    auditingData ,    entityName ,    xmlMappingData ,    false )  ;", "}", "METHOD_END"], "methodName": ["generateSecondPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   auditEntityNameRegister ;", "}", "METHOD_END"], "methodName": ["getAuditEntityNameRegister"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   auditStrategy ;", "}", "METHOD_END"], "methodName": ["getAuditStrategy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   basicMetadataGenerator ;", "}", "METHOD_END"], "methodName": ["getBasicMetadataGenerator"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "String   catalog    =    catalogFromAnnotation ;", "if    ( StringTools . isEmpty ( catalog )  )     {", "catalog    =    globalCfg . getDefaultCatalogName (  )  ;", "if    ( StringTools . isEmpty ( catalog )  )     {", "catalog    =    table . getCatalog (  )  ;", "}", "}", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   classLoaderService ;", "}", "METHOD_END"], "methodName": ["getClassLoaderService"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   entitiesConfigurations ;", "}", "METHOD_END"], "methodName": ["getEntitiesConfigurations"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   globalCfg ;", "}", "METHOD_END"], "methodName": ["getGlobalCfg"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   notAuditedEntitiesConfigurations ;", "}", "METHOD_END"], "methodName": ["getNotAuditedEntitiesConfigurations"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "EntityConfiguration    =    getEntitiesConfigurations (  )  . get ( referencedEntityName )  ;", "if    (  =  =    null )     {", "final   RelationTargetAuditMode   relationTargetAuditMode    =    propertyAuditingData . getRelationTargetAuditMode (  )  ;", "=    getNotAuditedEntitiesConfigurations (  )  . get ( referencedEntityName )  ;", "if    (  (  (  =  =    null )     |  |     (  ! allowNotAuditedTarget )  )     |  |     (  !  ( RelationTargetAuditMode . NOT _ AUDITED . equals ( relationTargetAuditMode )  )  )  )     {", "throw   new   MappingException (  (  (  (  (  (  (  (  \" An   audited   relation   from    \"     +    entityName )     +     \"  .  \"  )     +     ( propertyAuditingData . getName (  )  )  )     +     \"    to   a   not   audited   entity    \"  )     +    referencedEntityName )     +     \"  !  \"  )     +     ( allowNotAuditedTarget    ?     \"    Such   mapping   is   possible ,    but   has   to   be   explicitly   defined   using    @ Audited ( targetAuditMode    =    NOT _ AUDITED )  .  \"     :     \"  \"  )  )  )  ;", "}", "}", "return   getIdMappingData (  )  ;", "}", "METHOD_END"], "methodName": ["getReferencedIdMappingData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "String   schema    =    schemaFromAnnotation ;", "if    ( StringTools . isEmpty ( schema )  )     {", "schema    =    globalCfg . getDefaultSchemaName (  )  ;", "if    ( StringTools . isEmpty ( schema )  )     {", "schema    =    table . getSchema (  )  ;", "}", "}", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   serviceRegistry ;", "}", "METHOD_END"], "methodName": ["getServiceRegistry"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   verEntCfg ;", "}", "METHOD_END"], "methodName": ["getVerEntCfg"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( property . isInsertable (  )  )  )     {", "final   Valueion   generation    =    property . getValueionStrategy (  )  ;", "if    ( generation   instanceof   edValueion )     {", "final   edValueion   valueion    =     (  ( edValueion )     ( generation )  )  ;", "if    (  (  ( ionTiming . INSERT )     =  =     ( valueion . getionTiming (  )  )  )     |  |     (  ( ionTiming . ALWAYS )     =  =     ( valueion . getionTiming (  )  )  )  )     {", "return   true ;", "}", "}", "}", "return   property . isInsertable (  )  ;", "}", "METHOD_END"], "methodName": ["isPropertyInsertable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( type   instanceof   ComponentType )     |  |     ( type   instanceof   ManyToOneType )  )     |  |     ( type   instanceof   OneToOneType )  )     |  |     ( type   instanceof   CollectionType )  ;", "}", "METHOD_END"], "methodName": ["processedInSecondPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   message    =     (  (  (  (  (  \" Type   not   supported   for   auditing :     \"     +     ( type . getClass (  )  . getName (  )  )  )     +     \"  ,    on   entity    \"  )     +    entityName )     +     \"  ,    property    '  \"  )     +    propertyName )     +     \"  '  .  \"  ;", "throw   new   MappingException ( message )  ;", "}", "METHOD_END"], "methodName": ["throwUnsupportedTypeException"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   auditEntityName ;", "}", "METHOD_END"], "methodName": ["getAuditEntityName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditTableData"}, {"methodBody": ["METHOD_START", "{", "return   auditTableName ;", "}", "METHOD_END"], "methodName": ["getAuditTableName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditTableData"}, {"methodBody": ["METHOD_START", "{", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditTableData"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "org.hibernate.envers.configuration.internal.metadata.AuditTableData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value . getType (  )  )    instanceof   BasicType )     {", "if    ( parent    !  =    null )     {", "final   Element   propMapping    =    buildProperty ( parent ,    propertyAuditingData ,    value ,    insertable ,    key )  ;", "if    ( isAddNestedType ( value )  )     {", "applyNestedType (  (  ( SimpleValue )     ( value )  )  ,    propMapping )  ;", "}", "}", "if    ( mapper    !  =    null )     {", "final   PropertyData   propertyData    =    propertyAuditingData . resolvePropertyData ( value . getType (  )  )  ;", "mapper . add ( propertyData )  ;", "}", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["addBasic"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    value . getType (  )  ;", "final   Element   manyToOneElement    =    parent . addElement (  ( mapper    !  =    null    ?     \" many - to - one \"     :     \" key - many - to - one \"  )  )  ;", "manyToOneElement . addAttribute (  \" name \"  ,    propertyAuditingData . getName (  )  )  ;", "manyToOneElement . addAttribute (  \" class \"  ,    type . getName (  )  )  ;", "if    ( mapper    =  =    null )     {", "manyToOneElement . addAttribute (  \" foreign - key \"  ,     \" none \"  )  ;", "}", "Tools . addColumns ( manyToOneElement ,    value . getColumnIterator (  )  )  ;", "if    ( mapper    !  =    null )     {", "final   PropertyData   propertyData    =    propertyAuditingData . resolvePropertyData ( value . getType (  )  )  ;", "mapper . add ( propertyData )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["addManyToOne"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Properties   typeParameters    =    value . getTypeParameters (  )  ;", "final   Element   typeMapping    =    propertyMapping . addElement (  \" type \"  )  ;", "final   String   typeName    =    getBasicTypeName ( value . getType (  )  )  ;", "typeMapping . addAttribute (  \" name \"  ,    typeName )  ;", "if    ( isEnumType ( value . getType (  )  ,    typeName )  )     {", "mapEnumeType ( typeMapping ,    value . getType (  )  ,    typeParameters )  ;", "} else    {", "for    ( Object   object    :    typeParameters . keySet (  )  )     {", "final   String   keyType    =     (  ( String )     ( object )  )  ;", "final   String   property    =    typeParameters . getProperty ( keyType )  ;", "if    ( property    !  =    null )     {", "typeMapping . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,    keyType )  . setText ( property )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["applyNestedType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Element   propMapping    =    MetadataTools . addProperty ( parent ,    propertyAuditingData . getName (  )  ,     ( isAddNestedType ( value )     ?    null    :    getBasicTypeName ( value . getType (  )  )  )  ,     (  ( propertyAuditingData . isForceInsertable (  )  )     |  |    insertable )  ,    key )  ;", "MetadataTools . addColumns ( propMapping ,    value . getColumnIterator (  )  )  ;", "return   propMapping ;", "}", "METHOD_END"], "methodName": ["buildProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "String   typeName    =    type . getName (  )  ;", "if    ( typeName    =  =    null )     {", "typeName    =    type . getClass (  )  . getName (  )  ;", "}", "return   typeName ;", "}", "METHOD_END"], "methodName": ["getBasicTypeName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   SimpleValue )     {", "if    (  (  (  ( SimpleValue )     ( value )  )  . getTypeParaers (  )  )     !  =    null )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isAddNestedType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( CustomType . class . isInstance ( type )  )     {", "fi   CustomType   customType    =     (  ( CustomType )     ( type )  )  ;", "if    ( EnumType . class . isInstance ( customType . getUserType (  )  )  )     {", "return   true ;", "}", "}", "if    ( EnumType . class . getName (  )  . equals ( typeName )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isEnumType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parameters . getProperty ( ENUM )  )     !  =    null )     {", "parent . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,    ENUM )  . setText ( parameters . getProperty ( ENUM )  )  ;", "} else    {", "parent . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,    ENUM )  . setText ( type . getReturnedClass (  )  . getName (  )  )  ;", "}", "if    (  ( parameters . getProperty ( NAMED )  )     !  =    null )     {", "parent . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,    NAMED )  . setText ( parameters . getProperty ( NAMED )  )  ;", "} else    {", "parent . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,    NAMED )  . setText (  (  \"  \"     +     (  !  (  (  ( EnumType )     (  (  ( CustomType )     ( type )  )  . getUserType (  )  )  )  . isOrdinal (  )  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mapEnumerationType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.BasicMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    propertyValue . getType (  )  ;", "final   Value   value    =    propertyValue . getElement (  )  ;", "final   boolean   oneToManyAttachedType    =     (  (  ( type   instanceof   BagType )     |  |     ( type   instanceof   SetType )  )     |  |     ( type   instanceof   MapType )  )     |  |     ( type   instanceof   ListType )  ;", "final   boolean   inverseOneToMany    =     ( value   instanceof   OneToMany )     &  &     ( propertyValue . isInverse (  )  )  ;", "final   boolean   owningManyToOneWithJoinTableBidiral    =     ( value   instanceof   ManyToOne )     &  &     (  ( propertyAuditingData . getRelationMappedBy (  )  )     !  =    null )  ;", "final   boolean   fakeOneToManyBidiral    =     ( value   instanceof   OneToMany )     &  &     (  ( propertyAuditingData . getAuditMappedBy (  )  )     !  =    null )  ;", "if    ( oneToManyAttachedType    &  &     (  ( inverseOneToMany    |  |    fakeOneToManyBidiral )     |  |    owningManyToOneWithJoinTableBidiral )  )     {", "addOneToManyAttached ( fakeOneToManyBidiral )  ;", "} else    {", "addWithMiddleTable (  )  ;", "}", "}", "METHOD_END"], "methodName": ["addCollection"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyValue )    instanceof   IndexedCollection )     {", "final   IndexedCollection   indexedValue    =     (  ( IndexedCollection )     ( propertyValue )  )  ;", "final   String   mapKey    =    propertyAuditingData . getMapKey (  )  ;", "if    ( mapKey    =  =    null )     {", "return   addValueToMiddleTable ( indexedValue . getIndex (  )  ,    middleEntityXml ,    queryGeneratorBuilder ,     \" mapkey \"  ,    null ,    true )  ;", "} else    {", "final   IdMappingData   referencedIdMapping    =    mainGenerator . getEntitiesCs (  )  . get ( referencedEntityName )  . getIdMappingData (  )  ;", "final   int   currentIndex    =     ( queryGeneratorBuilder    =  =    null )     ?     0     :    queryGeneratorBuilder . getCurrentIndex (  )  ;", "if    (  \"  \"  . equals ( mapKey )  )     {", "return   new   MiddleComponentData ( new   MiddleMapKeyIdComponentMapper ( mainGenerator . getVerEntCfg (  )  ,    referencedIdMapping . getIdMapper (  )  )  ,    currentIndex )  ;", "} else    {", "return   new   MiddleComponentData ( new   MiddleMapKeyPropertyComponentMapper ( mapKey ,    propertyAuditingData . getAccessType (  )  )  ,    currentIndex )  ;", "}", "}", "} else    {", "return   new   MiddleComponentData ( new   MiddleDummyComponentMapper (  )  ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["addIndex"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    propertyValue . getType (  )  ;", "final   boolean   embeddableElementType    =    isEmbeddableElementType (  )  ;", "final   boolean   lobMapElementType    =    isLobMapElementType (  )  ;", "if    ( type   instanceof   SortedSetType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   SortedSetCollectionMapper ( commonCollectionMapperData ,    TreeSet . class ,    SortedSetProxy . class ,    elementComponentData ,    propertyValue . getComparator (  )  ,    embeddableElementType ,    embeddableElementType )  )  ;", "} else", "if    ( type   instanceof   SetType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   internal . entities . mapper . relation . BasicCollectionMapper < Set >  ( commonCollectionMapperData ,    class ,    internal . entities . mapper . relation . lazy . proxy . SetProxy . class ,    elementComponentData ,    embeddableElementType ,    embeddableElementType )  )  ;", "} else", "if    ( type   instanceof   SortedMapType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   internal . entities . mapper . relation . SortedMapCollectionMapper ( commonCollectionMapperData ,    class ,    internal . entities . mapper . relation . lazy . proxy . SortedMapProxy . class ,    elementComponentData ,    indexComponentData ,    propertyValue . getComparator (  )  ,     ( embeddableElementType    |  |    lobMapElementType )  )  )  ;", "} else", "if    ( type   instanceof   MapType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   internal . entities . mapper . relation . MapCollectionMapper < Map >  ( commonCollectionMapperData ,    class ,    internal . entities . mapper . relation . lazy . proxy . MapProxy . class ,    elementComponentData ,    indexComponentData ,     ( embeddableElementType    |  |    lobMapElementType )  )  )  ;", "} else", "if    ( type   instanceof   BagType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   internal . entities . mapper . relation . BasicCollectionMapper < List >  ( commonCollectionMapperData ,    class ,    internal . entities . mapper . relation . lazy . proxy . ListProxy . class ,    elementComponentData ,    embeddableElementType ,    embeddableElementType )  )  ;", "} else", "if    ( type   instanceof   ListType )     {", "currentMapper . addComposite ( propertyAuditingData . getPropertyData (  )  ,    new   internal . entities . mapper . relation . ListCollectionMapper ( commonCollectionMapperData ,    elementComponentData ,    indexComponentData ,    embeddableElementType )  )  ;", "} else    {", "mainGenerator . throwUnsupportedTypeException ( type ,    referencingEntityName ,    propertyName )  ;", "}", "}", "METHOD_END"], "methodName": ["addMapper"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "CollectionMetadataGenerator . LOG . debugf (  \" Adding   audit   mapping   for   property    % s .  % s :    one - to - many   collection ,    using   a   join   column   on   the   referenced   entity \"  ,    referencingEntityName ,    propertyName )  ;", "final   boolean   indexed    =     (  ( propertyValue )    instanceof   IndexedCollection )     &  &     (  (  (  ( IndexedCollection )     ( propertyValue )  )  . getIndex (  )  )     !  =    null )  ;", "final   String   mappedBy    =    getMappedBy ( propertyValue )  ;", "final   IdMappingData   referencedIdMapping    =    mainGenerator . getReferencedIdMappingData ( referencingEntityName ,    referencedEntityName ,    propertyAuditingData ,    false )  ;", "final   IdMappingData   referencingIdMapping    =    referencingEntityConfiguration . getIdMappingData (  )  ;", "final   MiddleIdData   referencingIdData    =    createMiddleIdData ( referencingIdMapping ,     ( mappedBy    +     \"  _  \"  )  ,    referencingEntityName )  ;", "final   MiddleIdData   referencedIdData    =    createMiddleIdData ( referencedIdMapping ,    null ,    referencedEntityName )  ;", "final   MiddleComponentData   elementComponentData    =    new   MiddleComponentData ( new   MiddleRelatedComponentMapper ( referencedIdData )  ,     0  )  ;", "MiddleComponentData   indexComponentData    =    addIndex ( null ,    null )  ;", "final   RelationQueryGenerator   queryGenerator    =    new   OneAuditEntityQueryGenerator ( mainGenerator . getGlobalCfg (  )  ,    mainGenerator . getVerEntCfg (  )  ,    mainGenerator . getAuditStrategy (  )  ,    referencingIdData ,    referencedEntityName ,    referencedIdData ,    isEmbeddableElementType (  )  ,    mappedBy ,    isMappedByKey ( propertyValue ,    mappedBy )  )  ;", "final   CommonCollectionMapperData   commonCollectionMapperData    =    new   CommonCollectionMapperData ( mainGenerator . getVerEntCfg (  )  ,    referencedEntityName ,    propertyAuditingData . getPropertyData (  )  ,    referencingIdData ,    queryGenerator )  ;", "PropertyMapper   fakeBidirectionalRelationMapper ;", "PropertyMapper   fakeBidirectionalRelationIndexMapper ;", "if    ( fakeOneToManyBidirectional    |  |    indexed )     {", "final   String   auditMappedBy ;", "if    ( fakeOneToManyBidirectional )     {", "auditMappedBy    =    propertyAuditingData . getAuditMappedBy (  )  ;", "} else    {", "auditMappedBy    =    propertyValue . getMappedByProperty (  )  ;", "}", "final   IdMapper   relMapper    =    referencingIdMapping . getIdMapper (  )  . prefixMappedProperties ( MappingTools . createToOneRelationPrefix ( auditMappedBy )  )  ;", "fakeBidirectionalRelationMapper    =    new   ToOneIdMapper ( relMapper ,    new   PropertyData ( auditMappedBy ,    null ,    null ,    null )  ,    referencingEntityName ,    false )  ;", "final   String   positionMappedBy ;", "if    ( fakeOneToManyBidirectional )     {", "positionMappedBy    =    propertyAuditingData . getPositionMappedBy (  )  ;", "} else", "if    ( indexed )     {", "final   Value   indexValue    =     (  ( IndexedCollection )     ( propertyValue )  )  . getIndex (  )  ;", "positionMappedBy    =    indexValue . getColumnIterator (  )  . next (  )  . getText (  )  ;", "} else    {", "positionMappedBy    =    null ;", "}", "if    ( positionMappedBy    !  =    null )     {", "final   Type   indexType    =     (  ( IndexedCollection )     ( propertyValue )  )  . getIndex (  )  . getType (  )  ;", "fakeBidirectionalRelationIndexMapper    =    new   SinglePropertyMapper ( PropertyData . forProperty ( positionMappedBy ,    indexType )  )  ;", "indexComponentData    =    new   MiddleComponentData ( new   MiddleStraightComponentMapper ( positionMappedBy )  ,     0  )  ;", "} else    {", "fakeBidirectionalRelationIndexMapper    =    null ;", "}", "} else    {", "fakeBidirectionalRelationMapper    =    null ;", "fakeBidirectionalRelationIndexMapper    =    null ;", "}", "addMapper ( commonCollectionMapperData ,    elementComponentData ,    indexComponentData )  ;", "referencingEntityConfiguration . addToManyNotOwningRelation ( propertyName ,    mappedBy ,    referencedEntityName ,    referencingIdData . getPrefixedMapper (  )  ,    fakeBidirectionalRelationMapper ,    fakeBidirectionalRelationIndexMapper ,    indexed )  ;", "}", "METHOD_END"], "methodName": ["addOneToManyAttached"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Element   properties    =     (  ( Element )     ( relatedIdMapping . getXmlRelationMapping (  )  . clone (  )  )  )  ;", "Tools . prefixNamesInPropertyElement ( properties ,    prefix ,    columnNameIterator ,    true ,    true )  ;", "for    ( Element   idProperty    :     (  ( List < Element >  )     ( properties . elements (  )  )  )  )     {", "xmlMapping . add (  (  ( Element )     ( idProperty . clone (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addRelatedToXmlMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Type   type    =    value . getType (  )  ;", "if    ( type   instanceof   ManyToOneType )     {", "final   String   prefixRelated    =    prefix    +     \"  _  \"  ;", "final   String   referencedEntityName    =    MappingTools . getReferencedEntityName ( value )  ;", "final   IdMappingData   referencedIdMapping    =    mainGenerator . getReferencedIdMappingData ( referencingEntityName ,    referencedEntityName ,    propertyAuditingData ,    true )  ;", "if    ( xmlMapping    !  =    null )     {", "addRelatedToXmlMapping ( xmlMapping ,    prefixRelated ,     (  ( joinColumns    !  =    null )     &  &     (  ( joinColumns . length )     >     0  )     ?    MetadataTools . getColumnNameIterator ( joinColumns )     :    MetadataTools . getColumnNameIterator ( value . getColumnIterator (  )  )  )  ,    referencedIdMapping )  ;", "}", "final   MiddleIdData   referencedIdData    =    createMiddleIdData ( referencedIdMapping ,    prefixRelated ,    referencedEntityName )  ;", "queryGeneratorBuilder . addRelation ( referencedIdData )  ;", "return   new   MiddleComponentData ( new   MiddleRelatedComponentMapper ( referencedIdData )  ,    queryGeneratorBuilder . getCurrentIndex (  )  )  ;", "} else", "if    ( type   instanceof   ComponentType )     {", "final   Component   component    =     (  ( Component )     ( value )  )  ;", "final   Class   componentClass    =    loadClass ( component . getComponentClassName (  )  ,    mainGenerator . getClassLoaderService (  )  )  ;", "final   MiddleEmbeddableComponentMapper   componentMapper    =    new   MiddleEmbeddableComponentMapper ( new   MultiPropertyMapper (  )  ,    componentClass )  ;", "final   Element   parentXmlMapping    =    xmlMapping . getParent (  )  ;", "final   reader . ComponentAuditingData   auditData    =    new   reader . ComponentAuditingData (  )  ;", "final   ReflectionManager   reflectionManager    =    mainGenerator . getMetadata (  )  . getMetadataBuildingOptions (  )  . getReflectionManager (  )  ;", "new   reader . ComponentAuditedPropertiesReader ( FULL ,    new   reader . AuditedPropertiesReader . ComponentPropertiesSource ( reflectionManager ,    component )  ,    auditData ,    mainGenerator . getGlobalCfg (  )  ,    reflectionManager ,     \"  \"  )  . read (  )  ;", "for    ( String   auditedPropertyName    :    auditData . getPropertyNames (  )  )     {", "final   reader . PropertyAuditingData   nestedAuditingData    =    auditData . getPropertyAuditingData ( auditedPropertyName )  ;", "mainGenerator . addValue ( parentXmlMapping ,    component . getProperty ( auditedPropertyName )  . getValue (  )  ,    componentMapper ,    prefix ,    xmlMappingData ,    nestedAuditingData ,    true ,    true ,    true )  ;", "}", "for    ( String   auditedPropertyName    :    auditData . getPropertyNames (  )  )     {", "final   reader . PropertyAuditingData   nestedAuditingData    =    auditData . getPropertyAuditingData ( auditedPropertyName )  ;", "mainGenerator . addValue ( parentXmlMapping ,    component . getProperty ( auditedPropertyName )  . getValue (  )  ,    componentMapper ,    referencingEntityName ,    xmlMappingData ,    nestedAuditingData ,    true ,    false ,    true )  ;", "}", "if    ( propertyValue . isSet (  )  )     {", "final   String   setOrdinalPropertyName    =    mainGenerator . getVerEntCfg (  )  . getEmbeddableSetOrdinalPropertyName (  )  ;", "final   Element   ordinalProperty    =    MetadataTools . addProperty ( xmlMapping ,    setOrdinalPropertyName ,     \" integer \"  ,    true ,    true )  ;", "MetadataTools . addColumn ( ordinalProperty ,    setOrdinalPropertyName ,    null ,    null ,    null ,    null ,    null ,    null ,    false )  ;", "}", "return   new   MiddleComponentData ( componentMapper ,     0  )  ;", "} else    {", "final   boolean   mapped    =    mainGenerator . getBasicMetadataGenerator (  )  . addBasic (  ( key    ?    xmlMapping    :    xmlMapping . getParent (  )  )  ,    new   reader . PropertyAuditingData ( prefix ,     \" field \"  ,    FULL ,    AUDITED ,    null ,    null ,    false )  ,    value ,    null ,    true ,    key )  ;", "if    ( mapped    &  &    key )     {", "return   new   MiddleComponentData ( new   MiddleSimpleComponentMapper ( mainGenerator . getVerEntCfg (  )  ,    prefix )  ,     0  )  ;", "} else", "if    ( mapped    &  &     (  ! key )  )     {", "return   new   MiddleComponentData ( new   MiddleMapElementNotKeyComponentMapper ( mainGenerator . getVerEntCfg (  )  ,    prefix )  ,     0  )  ;", "} else    {", "mainGenerator . throwUnsupportedTypeException ( type ,    referencingEntityName ,    propertyName )  ;", "throw   new   AssertionError (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addValueToMiddleTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "CollectionMetadataGenerator . LOG . debugf (  \" Adding   audit   mapping   for   property    % s .  % s :    collection   with   a   join   table \"  ,    referencingEntityName ,    propertyName )  ;", "String   auditMiddleTableName ;", "String   auditMiddleEntityName ;", "if    (  !  ( StringTools . isEmpty ( propertyAuditingData . getJoinTable (  )  . name (  )  )  )  )     {", "auditMiddleTableName    =    propertyAuditingData . getJoinTable (  )  . name (  )  ;", "auditMiddleEntityName    =    propertyAuditingData . getJoinTable (  )  . name (  )  ;", "} else    {", "final   String   middleTableName    =    getMiddleTableName ( propertyValue ,    referencingEntityName )  ;", "auditMiddleTableName    =    mainGenerator . getVerEntCfg (  )  . getAuditTableName ( null ,    middleTableName )  ;", "auditMiddleEntityName    =    mainGenerator . getVerEntCfg (  )  . getAuditEntityName ( middleTableName )  ;", "}", "CollectionMetadataGenerator . LOG . debugf (  \" Using   join   table   name :     % s \"  ,    auditMiddleTableName )  ;", "Element   middleEntityXml ;", "if    (  !  ( propertyValue . isInverse (  )  )  )     {", "auditMiddleEntityName    =    mainGenerator . getAuditEntityNameRegister (  )  . createUnique ( auditMiddleEntityName )  ;", "mainGenerator . getAuditEntityNameRegister (  )  . register ( auditMiddleEntityName )  ;", "middleEntityXml    =    createMiddleEntityXml ( auditMiddleTableName ,    auditMiddleEntityName ,    propertyValue . getWhere (  )  )  ;", "} else    {", "middleEntityXml    =    null ;", "}", "final   IdMappingData   referencingIdMapping    =    referencingEntityConfiguration . getIdMappingData (  )  ;", "String   mappedBy ;", "String   referencingPrefixRelated ;", "String   referencedPrefix ;", "if    ( propertyValue . isInverse (  )  )     {", "mappedBy    =    getMappedBy ( propertyValue . getCollectionTable (  )  ,    mainGenerator . getMetadata (  )  . getEntityBinding ( referencedEntityName )  )  ;", "referencingPrefixRelated    =    mappedBy    +     \"  _  \"  ;", "referencedPrefix    =    StringTools . getLastComponent ( referencedEntityName )  ;", "} else    {", "mappedBy    =    null ;", "referencingPrefixRelated    =     ( StringTools . getLastComponent ( referencingEntityName )  )     +     \"  _  \"  ;", "referencedPrefix    =     (  ( referencedEntityName )     =  =    null )     ?     \" element \"     :    propertyName ;", "}", "final   MiddleIdData   referencingIdData    =    createMiddleIdData ( referencingIdMapping ,    referencingPrefixRelated ,    referencingEntityName )  ;", "final   QueryGeneratorBuilder   queryGeneratorBuilder    =    new   QueryGeneratorBuilder ( mainGenerator . getGlobalCfg (  )  ,    mainGenerator . getVerEntCfg (  )  ,    mainGenerator . getAuditStrategy (  )  ,    referencingIdData ,    auditMiddleEntityName ,    isRevisionTypeInId (  )  )  ;", "if    ( middleEntityXml    !  =    null )     {", "addRelatedToXmlMapping ( middleEntityXml ,    referencingPrefixRelated ,    MetadataTools . getColumnNameIterator ( propertyValue . getKey (  )  . getColumnIterator (  )  )  ,    referencingIdMapping )  ;", "}", "final   MiddleComponentData   elementComponentData    =    addValueToMiddleTable ( propertyValue . getElement (  )  ,    middleEntityXml ,    queryGeneratorBuilder ,    referencedPrefix ,    propertyAuditingData . getJoinTable (  )  . inverseJoinColumns (  )  ,     (  !  ( isLobMapElementType (  )  )  )  )  ;", "final   MiddleComponentData   indexComponentData    =    addIndex ( middleEntityXml ,    queryGeneratorBuilder )  ;", "final   RelationQueryGenerator   queryGenerator    =    queryGeneratorBuilder . build ( elementComponentData ,    indexComponentData )  ;", "final   CommonCollectionMapperData   commonCollectionMapperData    =    new   CommonCollectionMapperData ( mainGenerator . getVerEntCfg (  )  ,    auditMiddleEntityName ,    propertyAuditingData . getPropertyData (  )  ,    referencingIdData ,    queryGenerator )  ;", "addMapper ( commonCollectionMapperData ,    elementComponentData ,    indexComponentData )  ;", "storeMiddleEntityRelationInformation ( mappedBy )  ;", "}", "METHOD_END"], "methodName": ["addWithMiddleTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   schema    =    mainGenerator . getSchema ( propertyAuditingData . getJoinTable (  )  . schema (  )  ,    propertyValue . getCollectionTable (  )  )  ;", "final   String   catalog    =    mainGenerator . getCatalog ( propertyAuditingData . getJoinTable (  )  . catalog (  )  ,    propertyValue . getCollectionTable (  )  )  ;", "final   Element   middleEntityXml    =    MetadataTools . createEntity ( xmlMappingData . newAdditionalMapping (  )  ,    new   AuditTableData ( auditMiddleEntityName ,    auditMiddleTableName ,    schema ,    catalog )  ,    null ,    null )  ;", "final   Element   middleEntityXmlId    =    middleEntityXml . addElement (  \" composite - id \"  )  ;", "if    ( where    !  =    null )     {", "middleEntityXml . addAttribute (  \" where \"  ,    where )  ;", "}", "middleEntityXmlId . addAttribute (  \" name \"  ,    mainGenerator . getVerEntCfg (  )  . getOriginalIdPropName (  )  )  ;", "mainGenerator . addRevisionInfoRelation ( middleEntityXmlId )  ;", "mainGenerator . addRevisionType (  ( isRevisionTypeInId (  )     ?    middleEntityXmlId    :    middleEntityXml )  ,    middleEntityXml ,    isRevisionTypeInId (  )  )  ;", "return   middleEntityXmlId ;", "}", "METHOD_END"], "methodName": ["createMiddleEntityXml"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   new   MiddleIdData ( mainGenerator . getVerEntCfg (  )  ,    idMappingData ,    prefix ,    entityName ,    mainGenerator . getEntitiesConfigurations (  )  . containsKey ( entityName )  )  ;", "}", "METHOD_END"], "methodName": ["createMiddleIdData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   PersistentClass   referencedClass    =    getReferenceCollectionClass ( collectionValue )  ;", "final    . ValueHolder   valueHolder    =    new    . ValueHolder ( collectionValue )  ;", "return   getMappedBy ( referencedClass ,    valueHolder )  ;", "}", "METHOD_END"], "methodName": ["getMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   auditMappedBy    =    propertyAuditingData . getAuditMappedBy (  )  ;", "if    ( auditMappedBy    !  =    null )     {", "return   auditMappedBy ;", "}", "String   mappedBy    =    this . searchMappedBy ( referencedClass ,    valueHolder )  ;", "if    ( mappedBy    =  =    null )     {", ". LOG . debugf (  \" Going   to   search   the   mapped   by   attribute   for    % s   in   superclasses   of   entity :     % s \"  ,    propertyName ,    referencedClass . getClassName (  )  )  ;", "PersistentClass   tempClass    =    referencedClass ;", "while    (  ( mappedBy    =  =    null )     &  &     (  ( tempClass . getSuperclass (  )  )     !  =    null )  )     {", ". LOG . debugf (  \" Searching   in   superclass :     % s \"  ,    tempClass . getSuperclass (  )  . getClassName (  )  )  ;", "mappedBy    =    this . searchMappedBy ( tempClass . getSuperclass (  )  ,    valueHolder )  ;", "tempClass    =    tempClass . getSuperclass (  )  ;", "}", "}", "if    ( mappedBy    =  =    null )     {", "throw   new   MappingException (  (  (  (  (  \" Unable   to   read   the   mapped   by   attribute   for    \"     +     ( propertyName )  )     +     \"    in    \"  )     +     ( referencedClass . getClassName (  )  )  )     +     \"  !  \"  )  )  ;", "}", "return   mappedBy ;", "}", "METHOD_END"], "methodName": ["getMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   getMappedBy ( referencedClass ,    new   CollectionMetadataGenerator . ValueHolder ( collectionTable )  )  ;", "}", "METHOD_END"], "methodName": ["getMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( value . getElement (  )  )    instanceof   OneToMany )     &  &     (  !  ( value . isInverse (  )  )  )  )     {", "return    (  ( StringTools . getLastComponent ( entityName )  )     +     \"  _  \"  )     +     ( StringTools . getLastComponent ( MappingTools . getReferencedEntityName ( value . getElement (  )  )  )  )  ;", "}", "return   value . getTable (  )  . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getMiddleTableName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   referencedClass    =    null ;", "if    (  ( collectionValue . getElement (  )  )    instanceof   OneToMany )     {", "final   OneToMany   oneToManyValue    =     (  ( OneToMany )     ( collectionValue . getElement (  )  )  )  ;", "referencedClass    =    oneToManyValue . getAssociatedClass (  )  ;", "} else", "if    (  ( collectionValue . getElement (  )  )    instanceof   mapping . ManyToOne )     {", "final   mapping . ManyToOne   manyToOneValue    =     (  ( mapping . ManyToOne )     ( collectionValue . getElement (  )  )  )  ;", "referencedClass    =    manyToOneValue . getMetadata (  )  . getEntityBinding ( manyToOneValue . getReferencedEntityName (  )  )  ;", "}", "return   referencedClass ;", "}", "METHOD_END"], "methodName": ["getReferenceCollectionClass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return    ( propertyValue . getElement (  )  . getType (  )  )    instanceof   ComponentType ;", "}", "METHOD_END"], "methodName": ["isEmbeddableElementType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyValue )    instanceof   Map )     {", "final   Type   type    =    propertyValue . getKey (  )  . getType (  )  ;", "if    (  (  !  ( type . isComponentType (  )  )  )     &  &     (  !  ( type . isAssociType (  )  )  )  )     {", "return    ( type   instanceof   MaterializedClobType )     |  |     ( type   instanceof   MaterializedNClobType )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isKeyRevisionTypeInId"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyValue )    instanceof   Map )     {", "final   Type   type    =    propertyValue . getElement (  )  . getType (  )  ;", "if    (  (  !  ( type . isComponentType (  )  )  )     &  &     (  !  ( type . isAssociType (  )  )  )  )     {", "return    ( type   instanceof   MaterializedClobType )     |  |     ( type   instanceof   MaterializedNClobType )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isLobMapElementType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyValue )    instanceof   IndexedCollection )     {", "final   Value   index    =     (  ( IndexedCollection )     ( propertyValue )  )  . getIndex (  )  ;", "return    !  ( index . getType (  )  . isEntityType (  )  )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isMapElementInPrimaryKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   PersistentClass   referencedClass    =    getReferenceCollectionClass ( collectionValue )  ;", "if    ( referencedClass    !  =    null )     {", "final   String   keyMappedBy    =    searchMappedByKey ( referencedClass ,    collectionValue )  ;", "return   mappedBy . equals ( keyMappedBy )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isMappedByKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return    ( isEmbeddableElementType (  )  )     |  |     ( isLobMapElementType (  )  )  ;", "}", "METHOD_END"], "methodName": ["isRevisionTypeInId"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =    properties . next (  )  ;", "if    (  ( property . getValue (  )  )    instanceof   Collection )     {", "if    (  (  (  ( Collection )     ( property . getValue (  )  )  )  . getCollectionTable (  )  )     =  =    collectionTable )     {", "return   property . getName (  )  ;", "}", "} else", "if    (  ( property . getValue (  )  )    instanceof   mapping . Component )     {", "final   mapping . Component   component    =     (  ( mapping . Component )     ( property . getValue (  )  )  )  ;", "final   String   mappedBy    =    searchMappedBy ( component . getPropertyIterator (  )  ,    collectionTable )  ;", "if    ( mappedBy    !  =    null )     {", "return    (  ( property . getName (  )  )     +     \"  _  \"  )     +    mappedBy ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["searchMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valueHolder . getCollection (  )  )     !  =    null )     {", "return   searchMappedBy ( persistentClass ,    valueHolder . getCollection (  )  )  ;", "}", "return   searchMappedBy ( persistentClass ,    valueHolder . getTable (  )  )  ;", "}", "METHOD_END"], "methodName": ["searchMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Property >    assocClassProps    =    referencedClass . getPropertyIterator (  )  ;", "while    ( assocClassProps . hasNext (  )  )     {", "final   Property   property    =    assocClassProps . next (  )  ;", "if    ( Tools . iteratorsContentEqual ( property . getValue (  )  . getColumnIterator (  )  ,    cValue . getKey (  )  . getColumnIterator (  )  )  )     {", "return   property . getName (  )  ;", "}", "}", "return   searchMappedByKey ( referencedClass ,    cValue )  ;", "}", "METHOD_END"], "methodName": ["searchMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   searchMappedBy ( referencedClass . getPropertyIterator (  )  ,    collectionTable )  ;", "}", "METHOD_END"], "methodName": ["searchMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Value >    assocIdClassProps    =    referencedClass . getKeyClosureIterator (  )  ;", "while    ( assocIdClassProps . hasNext (  )  )     {", "final   Value   value    =    assocIdClassProps . next (  )  ;", "if    ( value   instanceof   Component )     {", "final   Component   component    =     (  ( Component )     ( value )  )  ;", "final   Iterator < Property >    componentPropertyIterator    =    component . getPropertyIterator (  )  ;", "while    ( componentPropertyIterator . hasNext (  )  )     {", "final   Property   property    =    componentPropertyIterator . next (  )  ;", "final   Iterator < Selectable >    propertySelectables    =    property . getValue (  )  . getColumnIterator (  )  ;", "final   Iterator < Selectable >    cSelectables    =    cValue . getKey (  )  . getColumnIterator (  )  ;", "if    ( Tools . iteratorsContentEqual ( propertySelectables ,    cSelectables )  )     {", "return   property . getName (  )  ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["searchMappedByKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( referencedEntityName )     !  =    null )     {", "if    ( propertyValue . isInverse (  )  )     {", "referencingEntityCaddToManyMiddleNotOwningRelation ( propertyName ,    mappedBy ,    referencedEntityName )  ;", "} else    {", "referencingEntityCaddToManyMiddleRelation ( propertyName ,    referencedEntityName )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["storeMiddleEntityRelationInformation"], "fileName": "org.hibernate.envers.configuration.internal.metadata.CollectionMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Component   propComponent    =     (  ( Component )     ( value )  )  ;", "final   Class   componentClass ;", "if    ( propComponent . isDynamic (  )  )     {", "componentClass    =    ReflectionTools . loadClass ( Map . class . getCanonicalName (  )  ,    mainGenerator . getClassLoaderService (  )  )  ;", "} else    {", "componentClass    =    ReflectionTools . loadClass ( propComponent . getComponentClassName (  )  ,    mainGenerator . getClassLoaderService (  )  )  ;", "}", "final   CompositeMapperBuilder   componentMapper    =    mapper . addComponent ( propertyAuditingData . getPropertyData (  )  ,    componentClass )  ;", "final   ComponentAuditingData   componentAuditingData    =     (  ( ComponentAuditingData )     ( propertyAuditingData )  )  ;", "final   Iterator < Property >    properties    =     (  ( Iterator < Property >  )     ( propComponent . getPropertyIterator (  )  )  )  ;", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =    properties . next (  )  ;", "final   PropertyAuditingData   componentPropertyAuditingData    =    componentAuditingData . getPropertyAuditingData ( property . getName (  )  )  ;", "if    ( componentPropertyAuditingData    !  =    null )     {", "mainGenerator . addValue ( parent ,    property . getValue (  )  ,    componentMapper ,    entityName ,    xmlMappingData ,    componentPropertyAuditingData ,    property . isInsertable (  )  ,    firstPass ,    false )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addComponent"], "fileName": "org.hibernate.envers.configuration.internal.metadata.ComponentMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   additionalXmlMappings ;", "}", "METHOD_END"], "methodName": ["getAdditionalXmlMappings"], "fileName": "org.hibernate.envers.configuration.internal.metadata.EntityXmlMappingData"}, {"methodBody": ["METHOD_START", "{", "return   classMapping ;", "}", "METHOD_END"], "methodName": ["getClassMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.EntityXmlMappingData"}, {"methodBody": ["METHOD_START", "{", "return   mainXmlMapping ;", "}", "METHOD_END"], "methodName": ["getMainXmlMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.EntityXmlMappingData"}, {"methodBody": ["METHOD_START", "{", "Document   additionalMapping    =    DocumentHelper . createDocument (  )  ;", "additionals . add ( additionalMapping )  ;", "return   additionalMapping ;", "}", "METHOD_END"], "methodName": ["newAdditionalMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.EntityXmlMappingData"}, {"methodBody": ["METHOD_START", "{", "this . classMapping    =    classMapping ;", "}", "METHOD_END"], "methodName": ["setClassMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.EntityXmlMappingData"}, {"methodBody": ["METHOD_START", "{", "final   Element   relIdMapping    =    new   DefaultElement (  \" properties \"  )  ;", "final   Element   origIdMapping    =    new   DefaultElement (  \" composite - id \"  )  ;", "final   Property   idProp    =    pc . getIdentifierProperty (  )  ;", "final   Component   idMapper    =    pc . getIdentifierMapper (  )  ;", "if    (  ( idMapper    =  =    null )     &  &     ( idProp    =  =    null )  )     {", "return   null ;", "}", "SimpleIdMapperBuilder   mapper ;", "if    ( idMapper    !  =    null )     {", "final   Class   componentClass    =    ReflectionTools . loadClass (  (  ( Component )     ( pc . getIdentifier (  )  )  )  . getComponentClassName (  )  ,    mainGenerator . getClassLoaderService (  )  )  ;", "mapper    =    new   MultipleIdMapper ( componentClass ,    pc . getServiceRegistry (  )  )  ;", "if    (  !  ( addIdProperties ( relIdMapping ,     (  ( Iterator < Property >  )     ( idMapper . getPropertyIterator (  )  )  )  ,    mapper ,    false ,    audited )  )  )     {", "return   null ;", "}", "if    (  !  ( addIdProperties ( origIdMapping ,     (  ( Iterator < Property >  )     ( idMapper . getPropertyIterator (  )  )  )  ,    null ,    true ,    audited )  )  )     {", "return   null ;", "}", "} else", "if    ( idProp . isComposite (  )  )     {", "final   Component   idComponent    =     (  ( Component )     ( idProp . getValue (  )  )  )  ;", "final   Class   embeddableClass    =    ReflectionTools . loadClass ( idComponent . getComponentClassName (  )  ,    mainGenerator . getClassLoaderService (  )  )  ;", "mapper    =    new   internal . entities . mapper . id . EmbeddedIdMapper ( getIdPropertyData ( idProp )  ,    embeddableClass ,    pc . getServiceRegistry (  )  )  ;", "if    (  !  ( addIdProperties ( relIdMapping ,     (  ( Iterator < Property >  )     ( idComponent . getPropertyIterator (  )  )  )  ,    mapper ,    false ,    audited )  )  )     {", "return   null ;", "}", "if    (  !  ( addIdProperties ( origIdMapping ,     (  ( Iterator < Property >  )     ( idComponent . getPropertyIterator (  )  )  )  ,    null ,    true ,    audited )  )  )     {", "return   null ;", "}", "} else    {", "mapper    =    new   internal . entities . mapper . id . SingleIdMapper ( pc . getServiceRegistry (  )  )  ;", "mainGenerator . getBasicMetadataGenerator (  )  . addBasic ( relIdMapping ,    getIdPersistentPropertyAuditingData ( idProp )  ,    idProp . getValue (  )  ,    mapper ,    true ,    false )  ;", "mainGenerator . getBasicMetadataGenerator (  )  . addBasic ( origIdMapping ,    getIdPersistentPropertyAuditingData ( idProp )  ,    idProp . getValue (  )  ,    null ,    true ,    true )  ;", "}", "origIdMapping . addAttribute (  \" name \"  ,    mainGenerator . getVerEntCfg (  )  . getOriginalIdPropName (  )  )  ;", "mainGenerator . addRevisionInfoRelation ( origIdMapping )  ;", "return   new   IdMappingData ( mapper ,    origIdMapping ,    relIdMapping )  ;", "}", "METHOD_END"], "methodName": ["addId"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =    properties . next (  )  ;", "final   Type   propertyType    =    property . getType (  )  ;", "if    (  !  (  \"  _ identifierMapper \"  . equals ( property . getName (  )  )  )  )     {", "boolean   added    =    false ;", "if    ( propertyType   instanceof   ManyToOneType )     {", "added    =    mainGenerator . getBasic (  )  . addManyToOne ( parent ,    getIdPersistentPropertyAuditingData ( property )  ,    property . getValue (  )  ,    mapper )  ;", "} else    {", "added    =    mainGenerator . getBasic (  )  . addBasic ( parent ,    getIdPersistentPropertyAuditingData ( property )  ,    property . getValue (  )  ,    mapper ,    true ,    key )  ;", "}", "if    (  ! added )     {", "if    ( audited )     {", "throw   new   MappingException (  (  \" Type   not   supported :     \"     +     ( propertyType . getClass (  )  . getName (  )  )  )  )  ;", "} else    {", "return   false ;", "}", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["addIdProperties"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "Iterator   properties    =    component . getPropertyIterator (  )  ;", "while    ( properties . hasNext (  )  )     {", "final   Property   property    =     (  ( Property )     ( properties . next (  )  )  )  ;", "if    (  ( property . getValue (  )  )    instanceof   ToOne )     {", "final   PropertyAuditingData   propertyData    =    getIdPersistentPropertyAuditingData ( property )  ;", "final   String   referencedEntityName    =     (  ( ToOne )     ( property . getValue (  )  )  )  . getReferencedEntityName (  )  ;", "final   String   prefix    =     (  ( mainGenerator . getVerEntCfg (  )  . getOriginalIdPropName (  )  )     +     \"  .  \"  )     +     ( propertyData . getName (  )  )  ;", "final   IdMapper   relMapper ;", "if    ( mainGenerator . getEntitiesConfigurations (  )  . containsKey ( referencedEntityName )  )     {", "relMapper    =    mainGenerator . getEntitiesConfigurations (  )  . get ( referencedEntityName )  . getIdMapper (  )  ;", "} else", "if    ( mainGenerator . getNotAuditedEntitiesConfigurations (  )  . containsKey ( referencedEntityName )  )     {", "relMapper    =    mainGenerator . getNotAuditedEntitiesConfigurations (  )  . get ( referencedEntityName )  . getIdMapper (  )  ;", "} else    {", "throw   new   MappingException (  (  (  \" Unable   to   locate   entity   configuration   for    [  \"     +    referencedEntityName )     +     \"  ]  \"  )  )  ;", "}", "final   IdMapper   prefixedMapper    =    relMapper . prefixMappedProperties (  ( prefix    +     \"  .  \"  )  )  ;", "mainGenerator . getEntitiesConfigurations (  )  . get ( entityName )  . addToOneRelation ( prefix ,    referencedEntityName ,    prefixedMapper ,    true ,    false )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["generateSecondPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Component   identifierMapper    =    persistentClass . getIdentifierMapper (  )  ;", "final   Property   identifierProperty    =    persistentClass . getIdentifierProperty (  )  ;", "if    ( identifierMapper    !  =    null )     {", "geSecondPass ( entityName ,    identifierMapper )  ;", "} else", "if    (  ( identifierProperty    !  =    null )     &  &     ( identifierProperty . isComposite (  )  )  )     {", "final   Component   component    =     (  ( Component )     ( identifierProperty . getValue (  )  )  )  ;", "geSecondPass ( entityName ,    component )  ;", "}", "}", "METHOD_END"], "methodName": ["generateSecondPass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditingData ( property . getName (  )  ,    property . getPropertyAccessorName (  )  ,    ModificationStore . FULL ,    RelationTargetAuditMode . AUDITED ,    null ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIdPersistentPropertyAuditingData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyData ( property . getName (  )  ,    property . getName (  )  ,    property . getPropertyAccessorName (  )  ,    ModificationStore . FULL )  ;", "}", "METHOD_END"], "methodName": ["getIdPropertyData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.IdMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   PersistentClass   superclass    =    pc . getSuperclass (  )  ;", "if    ( superclass    =  =    null )     {", "return    . NONE ;", "}", "final   Subclass   subclass    =     (  ( Subclass )     ( superclass . getSubclassIterator (  )  . next (  )  )  )  ;", "if    ( subclass   instanceof   SingleTableSubclass )     {", "return    . SINGLE ;", "} else", "if    ( subclass   instanceof   JoinedSubclass )     {", "return    . JOINED ;", "} else", "if    ( subclass   instanceof   UnionSubclass )     {", "return    . TABLE _ PER _ CLASS ;", "}", "throw   new   MappingException (  (  \" Unknown   subclass   class :     \"     +     ( subclass . getClass (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.configuration.internal.metadata.InheritanceType"}, {"methodBody": ["METHOD_START", "{", "return   MetadataTools . addColumn ( parent ,    name ,    length ,    scale ,    precision ,    sqlType ,    customRead ,    customWrite ,    false )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   columnMapping    =    parent . addElement (  \" column \"  )  ;", "columnMapping . addAttribute (  \" name \"  ,     ( quoted    ?     (  \"  `  \"     +    name )     +     \"  `  \"     :    name )  )  ;", "if    ( length    !  =    null )     {", "columnMapping . addAttribute (  \" length \"  ,    length . toString (  )  )  ;", "}", "if    ( scale    !  =    null )     {", "columnMapping . addAttribute (  \" scale \"  ,    Integer . toString ( scale )  )  ;", "}", "if    ( precision    !  =    null )     {", "columnMapping . addAttribute (  \" precision \"  ,    Integer . toString ( precision )  )  ;", "}", "if    (  !  ( String . isEmpty ( sqlType )  )  )     {", "columnMapping . addAttribute (  \" sql - type \"  ,    sqlType )  ;", "}", "if    (  !  ( String . isEmpty ( customRead )  )  )     {", "columnMapping . addAttribute (  \" read \"  ,    customRead )  ;", "}", "if    (  !  ( String . isEmpty ( customWrite )  )  )     {", "columnMapping . addAttribute (  \" write \"  ,    customWrite )  ;", "}", "return   columnMapping ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "MetadataTools . addColumn ( anyMapping ,    column . getName (  )  ,    column . getLength (  )  ,    column . getScale (  )  ,    column . getPrecision (  )  ,    column . getSqlType (  )  ,    column . getCustomRead (  )  ,    column . getCustomWrite (  )  ,    column . isQuoted (  )  )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "while    ( selectables . hasNext (  )  )     {", "final   Selectable   selectable    =     (  ( Selectable )     ( selectables . next (  )  )  )  ;", "if    ( selectable . isFormula (  )  )     {", "throw   new   FormulaNotSupportedException (  )  ;", "}", ". addColumn ( anyMapping ,     (  ( Column )     ( selectable )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addColumns"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "while    ( columnIterator . hasNext (  )  )     {", "final   Object   o    =    columnIterator . next (  )  ;", "if    ( o   instanceof   Column )     {", "MetadataTools . addColumn ( element ,     (  ( Column )     ( o )  )  )  ;", "} else", "if    ( o   instanceof   mapping . Formula )     {", "MetadataTools . addFormula ( element ,     (  ( mapping . Formula )     ( o )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addColumnsOrFormulas"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "element . addElement (  \" formula \"  )  . setText ( formula . getText (  )  )  ;", "}", "METHOD_END"], "methodName": ["addFormula"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   MetadataTools . addProperty ( parent ,     ( modifiedFlagName    !  =    null    ?    modifiedFlagName    :    MetadataTools . getModifiedFlagPropertyName ( propertyName ,    suffix )  )  ,     \" boolean \"  ,    true ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["addModifiedFlagProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   idMapping    =    parent . addElement (  \" id \"  )  ;", "idMapping . addAttribute (  \" name \"  ,    name )  . addAttribute (  \" type \"  ,    type )  ;", "final   Element   generatorMapping    =    idMapping . addElement (  \" generator \"  )  ;", "if    ( useRevisionEntityWithNativeId )     {", "generatorMapping . addAttribute (  \" class \"  ,     \" native \"  )  ;", "} else    {", "generatorMapping . addAttribute (  \" class \"  ,     \" enhanced . OrderedSequenceGenerator \"  )  ;", "generatorMapping . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,     \" sequence _ name \"  )  . setText (  \" REVISION _ GENERATOR \"  )  ;", "generatorMapping . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,     \" table _ name \"  )  . setText (  \" REVISION _ GENERATOR \"  )  ;", "generatorMapping . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,     \" initial _ value \"  )  . setText (  \"  1  \"  )  ;", "generatorMapping . addElement (  \" param \"  )  . addAttribute (  \" name \"  ,     \" increment _ size \"  )  . setText (  \"  1  \"  )  ;", "}", "return   idMapping ;", "}", "METHOD_END"], "methodName": ["addNativelyGeneratedId"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Attribute   attribute    =    parent . attribute ( name )  ;", "if    ( attribute    =  =    null )     {", "parent . addAttribute ( name ,    value )  ;", "} else    {", "attribute . setValue ( value )  ;", "}", "}", "METHOD_END"], "methodName": ["addOrModifyAttribute"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   columnMapping    =    parent . element (  \" column \"  )  ;", "if    ( columnMapping    =  =    null )     {", "return    . addColumn ( parent ,    name ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "if    (  !  ( StringTools . isEmpty ( name )  )  )     {", ". addOrModifyAttribute ( columnMapping ,     \" name \"  ,    name )  ;", "}", "return   columnMapping ;", "}", "METHOD_END"], "methodName": ["addOrModifyColumn"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   MetadataTools . addProperty ( parent ,    name ,    type ,    insertable ,    false ,    key )  ;", "}", "METHOD_END"], "methodName": ["addProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   propMapping ;", "if    ( key )     {", "propMapping    =    parent . addElement (  \" key - property \"  )  ;", "} else    {", "propMapping    =    parent . addElement (  \" property \"  )  ;", "propMapping . addAttribute (  \" insert \"  ,    Boolean . toString ( insertable )  )  ;", "propMapping . addAttribute (  \" update \"  ,    Boolean . toString ( updateable )  )  ;", "}", "propMapping . addAttribute (  \" name \"  ,    name )  ;", "if    ( type    !  =    null )     {", "propMapping . addAttribute (  \" type \"  ,    type )  ;", "}", "return   propMapping ;", "}", "METHOD_END"], "methodName": ["addProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Element >    properties    =    element . elementIterator (  )  ;", "while    ( properties . hasNext (  )  )     {", "final   Element   property    =    properties . next (  )  ;", "if    (  \" column \"  . equals ( property . getName (  )  )  )     {", "final   Attribute   nameAttr    =    property . attribute (  \" name \"  )  ;", "if    ( nameAttr    !  =    null )     {", "nameAttr . setText ( columnNameIterator . next (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["changeNamesInColumnElement"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   MetadataTools . createEntityCommon ( document ,     \" class \"  ,    auditTableData ,    discriminatorValue ,    isAbstract )  ;", "}", "METHOD_END"], "methodName": ["createEntity"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   hibernateMapping    =    document . addElement (  \" hibernate - mapping \"  )  ;", "hibernateMapping . addAttribute (  \" auto - import \"  ,     \" false \"  )  ;", "final   Element   classMapping    =    hibernateMapping . addElement ( type )  ;", "if    (  ( auditTableData . getAuditEntityName (  )  )     !  =    null )     {", "classMapping . addAttribute (  \" entity - name \"  ,    auditTableData . getAuditEntityName (  )  )  ;", "}", "if    ( discriminatorValue    !  =    null )     {", "classMapping . addAttribute (  \" discriminator - value \"  ,    discriminatorValue )  ;", "}", "if    (  !  ( StringTools . isEmpty ( auditTableData . getAuditTableName (  )  )  )  )     {", "classMapping . addAttribute (  \" table \"  ,    auditTableData . getAuditTableName (  )  )  ;", "}", "if    (  !  ( StringTools . isEmpty ( auditTableData . getSchema (  )  )  )  )     {", "classMapping . addAttribute (  \" schema \"  ,    auditTableData . getSchema (  )  )  ;", "}", "if    (  !  ( StringTools . isEmpty ( auditTableData . getCatalog (  )  )  )  )     {", "classMapping . addAttribute (  \" catalog \"  ,    auditTableData . getCatalog (  )  )  ;", "}", "if    ( isAbstract    !  =    null )     {", "classMapping . addAttribute (  \" abstract \"  ,    isAbstract . toString (  )  )  ;", "}", "return   classMapping ;", "}", "METHOD_END"], "methodName": ["createEntityCommon"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   joinMapping    =    parent . addElement (  \" join \"  )  ;", "joinMapping . addAttribute (  \" table \"  ,    tableName )  ;", "if    (  !  ( String . isEmpty ( schema )  )  )     {", "joinMapping . addAttribute (  \" schema \"  ,    schema )  ;", "}", "if    (  !  ( String . isEmpty ( catalog )  )  )     {", "joinMapping . addAttribute (  \" catalog \"  ,    catalog )  ;", "}", "return   joinMapping ;", "}", "METHOD_END"], "methodName": ["createJoin"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Element   classMapping    =    MetadataTools . createEntityCommon ( document ,    subclassType ,    auditTableData ,    discriminatorValue ,    isAbstract )  ;", "classMapping . addAttribute (  \" extends \"  ,    extendsEntityName )  ;", "return   classMapping ;", "}", "METHOD_END"], "methodName": ["createSubclassEntity"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   new   MetadataTools . ColumnNameIterator (  )     {", "public   boolean   hasNext (  )     {", "return   selectableIterator . hasNext (  )  ;", "}", "public   String   next (  )     {", "final   Selectable   next    =    selectableIterator . next (  )  ;", "if    ( next . isFormula (  )  )     {", "throw   new   FormulaNotSupportedException (  )  ;", "}", "return    (  ( Column )     ( next )  )  . getName (  )  ;", "}", "public   void   remove (  )     {", "selectableIterator . remove (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getColumnNameIterator"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   new   MetadataTools . ColumnNameIterator (  )     {", "int   counter ;", "public   boolean   hasNext (  )     {", "return    ( counter )     <     ( joinColumns . length )  ;", "}", "public   String   next (  )     {", "return   joinColumns [  (  ( counter )  +  +  )  ]  . name (  )  ;", "}", "public   void   remove (  )     {", "throw   new   UnsupportedOperationException (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getColumnNameIterator"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "return   propertyName    +    suffix ;", "}", "METHOD_END"], "methodName": ["getModifiedFlagPropertyName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Element >    properties    =    element . elementIterator (  )  ;", "while    ( properties . hasNext (  )  )     {", "final   Element   property    =    properties . next (  )  ;", "if    (  (  \" property \"  . equals ( property . getName (  )  )  )     |  |     (  \" many - to - one \"  . equals ( property . getName (  )  )  )  )     {", "final   Attribute   nameAttr    =    property . attribute (  \" name \"  )  ;", "if    ( nameAttr    !  =    null )     {", "nameAttr . setText (  ( prefix    +     ( nameAttr . getText (  )  )  )  )  ;", "}", ". changeNamesInColumnElement ( property ,    columnNameIterator )  ;", "if    ( changeToKey )     {", "property . setName (  (  \" key -  \"     +     ( property . getName (  )  )  )  )  ;", "if    ( property . getName (  )  . equals (  \" key - many - to - one \"  )  )     {", "final   Attribute   foreignKey    =    property . attribute (  \" foreign - key \"  )  ;", "if    ( foreignKey    =  =    null )     {", "property . addAttribute (  \" foreign - key \"  ,     \" none \"  )  ;", "} else    {", "foreignKey . setValue (  \" none \"  )  ;", "}", "}", "}", "if    (  \" property \"  . equals ( property . getName (  )  )  )     {", "final   Attribute   insert    =    property . attribute (  \" insert \"  )  ;", "insert . setText ( Boolean . toString ( insertable )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["prefixNamesInPropertyElement"], "fileName": "org.hibernate.envers.configuration.internal.metadata.MetadataTools"}, {"methodBody": ["METHOD_START", "{", "idDatas . add ( idData )  ;", "}", "METHOD_END"], "methodName": ["addRelation"], "fileName": "org.hibernate.envers.configuration.internal.metadata.QueryGeneratorBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( idDatas . size (  )  )     =  =     0  )     {", "return   new   OneEntityQueryGenerator ( verEntCfg ,    auditStrategy ,    auditMiddleEntityName ,    referencingIdData ,    revisionTypeInId ,    componentDatas )  ;", "} else", "if    (  ( idDatas . size (  )  )     =  =     1  )     {", "if    ( idDatas . get (  0  )  . isAudited (  )  )     {", "return   new   internal . entities . mapper . relation . query . TwoEntityQueryGenerator ( globalCfg ,    verEntCfg ,    auditStrategy ,    auditMiddleEntityName ,    referencingIdData ,    idDatas . get (  0  )  ,    revisionTypeInId ,    componentDatas )  ;", "} else    {", "return   new   internal . entities . mapper . relation . query . TwoEntityOneAuditedQueryGenerator ( verEntCfg ,    auditStrategy ,    auditMiddleEntityName ,    referencingIdData ,    idDatas . get (  0  )  ,    revisionTypeInId ,    componentDatas )  ;", "}", "} else", "if    (  ( idDatas . size (  )  )     =  =     2  )     {", "if    (  (  !  ( idDatas . get (  0  )  . isAudited (  )  )  )     |  |     (  !  ( idDatas . get (  1  )  . isAudited (  )  )  )  )     {", "throw   new   MappingException (  \" Ternary   relations   using    @ Audited ( targetAuditMode    =    NOT _ AUDITED )    are   not   supported .  \"  )  ;", "}", "return   new   internal . entities . mapper . relation . query . ThreeEntityQueryGenerator ( globalCfg ,    verEntCfg ,    auditStrategy ,    auditMiddleEntityName ,    referencingIdData ,    idDatas . get (  0  )  ,    idDatas . get (  1  )  ,    revisionTypeInId ,    componentDatas )  ;", "} else    {", "throw   new   IllegalStateException (  \" Illegal   number   of   related   entities .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.hibernate.envers.configuration.internal.metadata.QueryGeneratorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   idDatas . size (  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentIndex"], "fileName": "org.hibernate.envers.configuration.internal.metadata.QueryGeneratorBuilder"}, {"methodBody": ["METHOD_START", "{", "final   OneToOne   propertyValue    =     (  ( OneToOne )     ( value )  )  ;", "final   String   owningReferencePropertyName    =    propertyValue . getReferencedPropertyName (  )  ;", "final   EntityConfiguration    =    mainGenerator . getEntitiesConfigurations (  )  . get ( entityName )  ;", "if    (  =  =    null )     {", "throw   new   MappingException (  (  (  \" An   audited   relation   to   a   non - audited   entity    \"     +    entityName )     +     \"  !  \"  )  )  ;", "}", "final   IdMappingData   ownedIdMapping    =    getIdMappingData (  )  ;", "if    ( ownedIdMapping    =  =    null )     {", "throw   new   MappingException (  (  (  \" An   audited   relation   to   a   non - audited   entity    \"     +    entityName )     +     \"  !  \"  )  )  ;", "}", "final   String   lastPropertyPrefix    =    MappingTools . createToOneRelationPrefix ( owningReferencePropertyName )  ;", "final   String   referencedEntityName    =    propertyValue . getReferencedEntityName (  )  ;", "final   IdMapper   ownedIdMapper    =    ownedIdMapping . getIdMapper (  )  . prefixMappedProperties ( lastPropertyPrefix )  ;", "mainGenerator . getEntitiesConfigurations (  )  . get ( entityName )  . addToOneNotOwningRelation ( propertyAuditingData . getName (  )  ,    owningReferencePropertyName ,    referencedEntityName ,    ownedIdMapper ,    MappingTools . ignoreNotFound ( value )  )  ;", "final   PropertyData   propertyData    =    propertyAuditingData . getPropertyData (  )  ;", "mapper . addComposite ( propertyData ,    new   OneToOneNotOwningMapper ( entityName ,    referencedEntityName ,    owningReferencePropertyName ,    propertyData ,    mainGenerator . getServiceRegistry (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addOneToOneNotOwning"], "fileName": "org.hibernate.envers.configuration.internal.metadata.ToOneRelationMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   referencedEntityName    =     (  ( ToOne )     ( value )  )  . getReferencedEntityName (  )  ;", "final   IdMappingData   idMapping    =    mainGenerator . getReferencedIdMappingData ( entityName ,    referencedEntityName ,    propertyAuditingData ,    true )  ;", "final   String   lastPropertyPrefix    =    MappingTools . createPrefix ( propertyAuditingData . getName (  )  )  ;", "final   IdMapper   relMapper    =    idMapping . getIdMapper (  )  . prefixMappedProperties ( lastPropertyPrefix )  ;", "mainGenerator . getEntitiesConfigurations (  )  . get ( entityName )  . add ( propertyAuditingData . getName (  )  ,    referencedEntityName ,    relMapper ,    insertable ,    MappingTools . ignoreNotFound ( value )  )  ;", "final   PropertyData   propertyData    =    propertyAuditingData . getPropertyData (  )  ;", "mapper . addComposite ( propertyData ,    new   OneToOnePrimaryKeyJoinColumnMapper ( entityName ,    referencedEntityName ,    propertyData ,    mainGenerator . getServiceRegistry (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addOneToOnePrimaryKeyJoinColumn"], "fileName": "org.hibernate.envers.configuration.internal.metadata.ToOneRelationMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   referencedEntityName    =     (  ( ToOne )     ( value )  )  . getReferencedEntityName (  )  ;", "final   IdMappingData   idMapping    =    mainGenerator . getReferencedIdMappingData ( entityName ,    referencedEntityName ,    propertyAuditingData ,    true )  ;", "final   String   lastPropertyPrefix    =    MappingTools . createPrefix ( propertyAuditingData . getName (  )  )  ;", "final   IdMapper   relMapper    =    idMapping . getIdMapper (  )  . prefixMappedProperties ( lastPropertyPrefix )  ;", "mainGenerator . getEntitiesConfigurations (  )  . get ( entityName )  . add ( propertyAuditingData . getName (  )  ,    referencedEntityName ,    relMapper ,    insertable ,    MappingTools . ignoreNotFound ( value )  )  ;", "boolean   nonInsertableFake ;", "if    (  (  ! insertable )     &  &     ( propertyAuditingData . isForceInsertable (  )  )  )     {", "nonInsertableFake    =    true ;", "insertable    =    true ;", "} else    {", "nonInsertableFake    =    false ;", "}", "final   Element   properties    =     (  ( Element )     ( idMapping . getXmlRelationMapping (  )  . clone (  )  )  )  ;", "properties . addAttribute (  \" name \"  ,    propertyAuditingData . getName (  )  )  ;", "MetadataTools . prefixNamesInPropertyElement ( properties ,    lastPropertyPrefix ,    MetadataTools . getColumnNameIterator ( value . getColumnIterator (  )  )  ,    false ,    insertable )  ;", "for    ( Object   o    :    properties . content (  )  )     {", "final   Element   element    =     (  ( Element )     ( o )  )  ;", "element . setParent ( null )  ;", "parent . add ( element )  ;", "}", "final   PropertyData   propertyData    =    propertyAuditingData . getPropertyData (  )  ;", "mapper . addComposite ( propertyData ,    new   ToOneIdMapper ( relMapper ,    propertyData ,    referencedEntityName ,    nonInsertableFake )  )  ;", "}", "METHOD_END"], "methodName": ["addToOne"], "fileName": "org.hibernate.envers.configuration.internal.metadata.ToOneRelationMetadataGenerator"}, {"methodBody": ["METHOD_START", "{", "final   SecondaryAuditTable   secondaryVersionsTable 1     =    clazz . getAnnotation ( SecondaryAuditTable . class )  ;", "if    ( secondaryVersionsTable 1     !  =    null )     {", "auditData . getSecondaryTableDictionary (  )  . put ( secondaryVersionsTable 1  . secondaryTableName (  )  ,    secondaryVersionsTable 1  . secondaryAuditTableName (  )  )  ;", "}", "final   SecondaryAuditTables   secondaryAuditTables    =    clazz . getAnnotation ( SecondaryAuditTables . class )  ;", "if    ( secondaryAuditTables    !  =    null )     {", "for    ( SecondaryAuditTable   secondaryAuditTable 2     :    secondaryAuditTables . value (  )  )     {", "auditData . getSecondaryTableDictionary (  )  . put ( secondaryAuditTable 2  . secondaryTableName (  )  ,    secondaryAuditTable 2  . secondaryAuditTableName (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addAuditSecondaryTables"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AnnotationsMetadataReader"}, {"methodBody": ["METHOD_START", "{", "final   AuditTable   auditTable    =    clazz . getAnnotation ( AuditTable . class )  ;", "if    ( auditTable    !  =    null )     {", "auditData . setAuditTable ( auditTable )  ;", "} else    {", "auditData . setAuditTable ( getDefaultAuditTable (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addAuditTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AnnotationsMetadataReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( pc . getClassName (  )  )     =  =    null )     {", "return   auditData ;", "}", "try    {", "final   XClass   xclass    =    reflectionManager . classForName ( pc . getClassName (  )  )  ;", "final   ModificationStore   defaultStore    =    getDefaultAudited ( xclass )  ;", "if    ( defaultStore    !  =    null )     {", "auditData . setDefaultAudited ( true )  ;", "}", "new   AuditedPropertiesReader ( defaultStore ,    new    . PersistentClassPropertiesSource ( xclass )  ,    auditData ,    globalCfg ,    reflectionManager ,     \"  \"  )  . read (  )  ;", "addAuditTable ( xclass )  ;", "addAuditSecondaryTables ( xclass )  ;", "}    catch    ( ClassLoadingException   e )     {", "throw   new   MappingException ( e )  ;", "}", "return   auditData ;", "}", "METHOD_END"], "methodName": ["getAuditData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AnnotationsMetadataReader"}, {"methodBody": ["METHOD_START", "{", "return   defaultAuditTable ;", "}", "METHOD_END"], "methodName": ["getDefaultAuditTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AnnotationsMetadataReader"}, {"methodBody": ["METHOD_START", "{", "final   Audited   defaultAudited    =    clazz . getAnnotation ( Audited . class )  ;", "if    ( defaultAudited    !  =    null )     {", "return   defaultAudited . modStore (  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultAudited"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AnnotationsMetadataReader"}, {"methodBody": ["METHOD_START", "{", "final   ComponentAuditingData   componentData    =    new   ComponentAuditingData (  )  ;", "final   boolean   isAudited    =    fillPropertyData ( property ,    componentData ,    accessType ,    allClassAudited )  ;", "final   PersistentPropertiesSource   componentPropertiesSource ;", "if    ( propertyValue . isDynamic (  )  )     {", "componentPropertiesSource    =    new    . DynamicComponentSource ( reflectionManager ,    propertyValue ,    property )  ;", "} else    {", "componentPropertiesSource    =    new    . ComponentPropertiesSource ( reflectionManager ,    propertyValue )  ;", "}", "final   Component   audPropReader    =    new   Component ( ModificationStore . FULL ,    componentPropertiesSource ,    componentData ,    globalCfg ,    reflectionManager ,     (  ( propertyNamePrefix )     +     ( MappingTools . createComponentPrefix ( property . getName (  )  )  )  )  )  ;", "audPropReader . read (  )  ;", "if    ( isAudited )     {", "auditedPropertiesHolder . addPropertyAuditingData ( property . getName (  )  ,    componentData )  ;", "}", "}", "METHOD_END"], "methodName": ["addFromComponentProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   PropertyAuditingData   propertyData    =    new   PropertyAuditingData (  )  ;", "final   boolean   isAudited    =    fillPropertyData ( property ,    propertyData ,    accessType ,    allClassAudited )  ;", "if    ( isAudited )     {", "aHolder . addPropertyAuditingData ( property . getName (  )  ,    propertyData )  ;", "}", "}", "METHOD_END"], "methodName": ["addFromNotComponentProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "for    ( XProperty   property    :    properties )     {", "final   String   accessType    =    accessTypeProvider . apply ( property . getName (  )  )  ;", "if    (  ( persistentProperties . contains ( property . getName (  )  )  )     &  &     (  !  ( aHolder . contains ( property . getName (  )  )  )  )  )     {", "final   Value   propertyValue    =    persistentPropertiesSource . getProperty ( property . getName (  )  )  . getValue (  )  ;", "if    ( propertyValue   instanceof   Component )     {", "this . addFromComponentProperty ( property ,    accessType ,     (  ( Component )     ( propertyValue )  )  ,    allClassAudited )  ;", "} else    {", "this . addFromNotComponentProperty ( property ,    accessType ,    allClassAudited )  ;", "}", "} else", "if    ( propertiesGroupMapping . containsKey ( property . getName (  )  )  )     {", "final   String   embeddedName    =    propertiesGroupMapping . get ( property . getName (  )  )  ;", "if    (  !  ( aHolder . contains ( embeddedName )  )  )     {", "final   Value   propertyValue    =    persistentPropertiesSource . getProperty ( embeddedName )  . getValue (  )  ;", "this . addFromPropertiesGroup ( embeddedName ,    property ,    accessType ,     (  ( Component )     ( propertyValue )  )  ,    allClassAudited )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addFromProperties"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   ComponentAuditingData   componentData    =    new   ComponentAuditingData (  )  ;", "final   boolean   isAudited    =    fillPropertyData ( property ,    componentData ,    accessType ,    allClassAudited )  ;", "if    ( isAudited )     {", "componentData . setName ( embeddedName )  ;", "componentData . setBeanName ( null )  ;", "final   PersistentPropertiesSource   componentPropertiesSource    =    new    . ComponentPropertiesSource ( reflectionManager ,    propertyValue )  ;", "final      audPropReader    =    new    ( ModificationStore . FULL ,    componentPropertiesSource ,    componentData ,    globalCfg ,    reflectionManager ,     (  ( propertyNamePrefix )     +     ( MappingTools . createComponentPrefix ( embeddedName )  )  )  )  ;", "audPropReader . read (  )  ;", "auditedPropertiesHolder . addPropertyAuditingData ( embeddedName ,    componentData )  ;", "}", "}", "METHOD_END"], "methodName": ["addFromPropertiesGroup"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "if    (  \" field \"  . equals ( property . getPropertyAccessorName (  )  )  )     {", "fieldAccessedPersistent . add ( property . getName (  )  )  ;", "} else    {", "propertyAccessedPersistent . put ( property . getName (  )  ,    property . getPropertyAccessorName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addPersistentProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   Audited   allClassAudited    =    computeAuditConfiguration ( clazz )  ;", "addFromProperties ( clazz . getDeclaredProperties (  \" field \"  )  ,     (    it )     -  >     \" field \"  ,    fieldAccessedPersistentProperties ,    allClassAudited )  ;", "addFromProperties ( clazz . getDeclaredProperties (  \" property \"  )  ,    propertyAccessedPersistentProperties :  : get ,    propertyAccessedPersistentProperties . keySet (  )  ,    allClassAudited )  ;", "if    (  ( allClassAudited    !  =    null )     |  |     (  !  ( aHolder . isEmpty (  )  )  )  )     {", "final   XClass   superclazz    =    clazz . getSuperclass (  )  ;", "if    (  (  !  ( clazz . isInterface (  )  )  )     &  &     (  !  (  \" Object \"  . equals ( superclazz . getName (  )  )  )  )  )     {", "addPropertiesFromClass ( superclazz )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addPropertiesFromClass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "Audited   audited    =    computeAuditConfiguration ( dynamicComponentSource . getXClass (  )  )  ;", "if    (  !  ( fieldAccessedPersistentProperties . isEmpty (  )  )  )     {", "throw   new   MappingException (  (  (  \" Audited   dynamic   component   cannot   have   properties   with   access =  \\  \" field \\  \"    for   properties :     \"     +     ( fieldAccessedPersistentProperties )  )     +     \"  .     \\ n   Change   properties   access =  \\  \" property \\  \"  ,    to   make   it   work )  \"  )  )  ;", "}", "for    ( Map . Entry < String ,    String >    entry    :    propertyAccessedPersistentProperties . entrySet (  )  )     {", "String   property    =    entry . getKey (  )  ;", "String   accessType    =    entry . getValue (  )  ;", "if    (  !  ( aHolder . contains ( property )  )  )     {", "final   Value   propertyValue    =    persistentPropertiesSource . getProperty ( property )  . getValue (  )  ;", "if    ( propertyValue   instanceof   Component )     {", "this . addFromComponentProperty ( new   DynamicProperty ( dynamicComponentSource ,    property )  ,    accessType ,     (  ( Component )     ( propertyValue )  )  ,    audited )  ;", "} else    {", "this . addFromNotComponentProperty ( new   DynamicProperty ( dynamicComponentSource ,    property )  ,    accessType ,    audited )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addPropertiesFromDynamicComponent"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   AuditOverride   annotationOverride    =    property . getAnnotation ( AuditOverride . class )  ;", "if    ( annotationOverride    !  =    null )     {", "propertyData . addAuditingOverride ( annotationOverride )  ;", "}", "final   AuditOverrides   annotationOverrides    =    property . getAnnotation ( AuditOverrides . class )  ;", "if    ( annotationOverrides    !  =    null )     {", "propertyData . addAuditingOverrides ( annotationOverrides )  ;", "}", "}", "METHOD_END"], "methodName": ["addPropertyAuditingOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   AuditJoinTable   joinTable    =    property . getAnnotation ( AuditJoinTable . class )  ;", "if    ( joinTable    !  =    null )     {", "propertyData . setJoinTable ( joinTable )  ;", "} else    {", "propertyData . setJoinTable (  . DEFAULT _ AUDIT _ JOIN _ TABLE )  ;", "}", "}", "METHOD_END"], "methodName": ["addPropertyJoinTables"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   MapKey   mapKey    =    property . getAnnotation ( MapKey . class )  ;", "if    ( mapKey    !  =    null )     {", "propertyData . setMapKey ( mapKey . name (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addPropertyMapKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "Audited   aud    =     ( property . isAnnotationPresent ( Audited . class )  )     ?    property . getAnnotation ( Audited . class )     :    allClassAudited ;", "if    (  (  ( aud    =  =    null )     &  &     ( overriddenAuditedProperties . contains ( property )  )  )     &  &     (  !  ( overriddenNotAuditedProperties . contains ( property )  )  )  )     {", "aud    =     . DEFAULT _ AUDITED ;", "}", "if    ( aud    !  =    null )     {", "propertyData . setStore ( aud . modStore (  )  )  ;", "propertyData . setRelationTargetAuditMode ( aud . targetAuditMode (  )  )  ;", "propertyData . setUsingModifiedFlag ( checkUsingModifiedFlag ( aud )  )  ;", "if    (  (  ( aud . modifiedColumnName (  )  )     !  =    null )     &  &     (  !  (  \"  \"  . equals ( aud . modifiedColumnName (  )  )  )  )  )     {", "propertyData . setModifiedFlagName ( aud . modifiedColumnName (  )  )  ;", "} else    {", "propertyData . setModifiedFlagName ( MetadataTools . getModifiedFlagPropertyName ( propertyName ,    modifiedFlagSuffix )  )  ;", "}", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["checkAudited"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( parent . isAssignableFrom ( child )  )  )     {", "throw   new   MappingException (  (  (  (  (  (  (  (  \" Class    \"     +     ( parent . getName (  )  )  )     +     \"    is   not   assignable   from    \"  )     +     ( child . getName (  )  )  )     +     \"  .     \"  )     +     \" Please   revise   Envers   annotations   applied   to    \"  )     +     ( child . getName (  )  )  )     +     \"    type .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkSuperclass"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "if    ( globalCfg . hasSettingForUsingModifiedFlag (  )  )     {", "return    ( globalCfg . isGlobalWithModifiedFlag (  )  )     |  |     ( aud . withModifiedFlag (  )  )  ;", "}", "return   aud . withModifiedFlag (  )  ;", "}", "METHOD_END"], "methodName": ["checkUsingModifiedFlag"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "Audited   allClassAudited    =    clazz . getAnnotation ( Audited . class )  ;", "if    (  ( allClassAudited    =  =    null )     &  &     ( overriddenAuditedClasses . contains ( clazz )  )  )     {", "allClassAudited    =    persistentPropertiesSource . getXClass (  )  . getAnnotation ( Audited . class )  ;", "if    ( allClassAudited    =  =    null )     {", "allClassAudited    =     . DEFAULT _ AUDITED ;", "}", "} else", "if    (  ( allClassAudited    !  =    null )     &  &     ( overriddenNotAuditedClasses . contains ( clazz )  )  )     {", "return   null ;", "}", "return   allClassAudited ;", "}", "METHOD_END"], "methodName": ["computeAuditConfiguration"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   AuditOverrides   auditOverrides    =    clazz . getAnnotation ( AuditOverrides . class )  ;", "final   AuditOverride   auditOverride    =    clazz . getAnnotation ( AuditOverride . class )  ;", "if    (  ( auditOverrides    =  =    null )     &  &     ( auditOverride    !  =    null )  )     {", "return   Arrays . asList ( auditOverride )  ;", "} else", "if    (  ( auditOverrides    !  =    null )     &  &     ( auditOverride    =  =    null )  )     {", "return   Arrays . asList ( auditOverrides . value (  )  )  ;", "} else", "if    (  ( auditOverrides    !  =    null )     &  &     ( auditOverride    !  =    null )  )     {", "throw   new   MappingException (  (  (  (  \"  @ AuditOverrides   annotation   should   encapsulate   all    @ AuditOverride   declarations .     \"     +     \" Please   revise   Envers   annotations   applied   to   class    \"  )     +     ( clazz . getName (  )  )  )     +     \"  .  \"  )  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["computeAuditOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   Component   component    =     (  ( Component )     ( property . getValue (  )  )  )  ;", "final   Iterator < Property >    component    =    component . getPropertyIterator (  )  ;", "while    ( component . hasNext (  )  )     {", "final   Property   componentProperty    =    component . next (  )  ;", "propertiesGroupMapping . put ( componentProperty . getName (  )  ,    property . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createPropertiesGroupMapping"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   NotAudited   unVer    =    property . getAnnotation ( NotAudited . class )  ;", "if    (  (  ( unVer    !  =    null )     &  &     (  !  ( overridden . contains ( property )  )  )  )     |  |     ( overriddenNot . contains ( property )  )  )     {", "return   false ;", "} else    {", "if    ( globalCfg . isDoNotAuditOptimisticLockingField (  )  )     {", "final   Version   jpaVer    =    property . getAnnotation ( Version . class )  ;", "if    ( jpaVer    !  =    null )     {", "return   false ;", "}", "}", "}", "final   String   propertyName    =     ( propertyNamePrefix )     +     ( property . getName (  )  )  ;", "if    (  !  ( this . checkAudited ( property ,    propertyData ,    propertyName ,    allClassAudited ,    globalCfg . getModifiedFlagSuffix (  )  )  )  )     {", "return   false ;", "}", "validateLobMappingSupport ( property )  ;", "propertyData . setName ( propertyName )  ;", "propertyData . setBeanName ( property . getName (  )  )  ;", "propertyData . setAccessType ( accessType )  ;", "addPropertyJoinTables ( property ,    propertyData )  ;", "addPropertyAuditingOverrides ( property ,    propertyData )  ;", "if    (  !  ( processPropertyAuditingOverrides ( property ,    propertyData )  )  )     {", "return   false ;", "}", "addPropertyMapKey ( property ,    propertyData )  ;", "setPropertyAuditMappedBy ( property ,    propertyData )  ;", "setPropertyRelationMappedBy ( property ,    propertyData )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["fillPropertyData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   XProperty   property    =    ReflectionTools . getProperty ( clazz ,    propertyName )  ;", "if    ( property    =  =    null )     {", "throw   new   MappingException (  (  (  (  (  (  (  (  \" Property    '  \"     +    propertyName )     +     \"  '    not   found   in   class    \"  )     +     ( clazz . getName (  )  )  )     +     \"  .     \"  )     +     \" Please   revise   Envers   annotations   applied   to   class    \"  )     +     ( persistentPropertiesSource . getXClass (  )  )  )     +     \"  .  \"  )  )  ;", "}", "return   property ;", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . auditedPropertiesHolder )    instanceof   ComponentAuditingData )     {", "final   List < AuditOverride >    overrides    =     (  ( ComponentAuditingData )     ( this . auditedPropertiesHolder )  )  . getAuditingOverrides (  )  ;", "for    ( AuditOverride   override    :    overrides )     {", "if    ( property . getName (  )  . equals ( override . name (  )  )  )     {", "if    (  !  ( override . isAudited (  )  )  )     {", "return   false ;", "} else    {", "if    (  ( override . auditJoinTable (  )  )     !  =    null )     {", "propertyData . setJoinTable ( override . auditJoinTable (  )  )  ;", "}", "}", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["processPropertyAuditingOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "readPersistentPropertiesAccess (  )  ;", "if    (  ( persistentPropertiesSource )    instanceof    . DynamicComponentSource )     {", "addPropertiesFromDynamicComponent (  (  (  . DynamicComponentSource )     ( persistentPropertiesSource )  )  )  ;", "} else    {", "final   XClass   clazz    =    persistentPropertiesSource . getXClass (  )  ;", "readAuditOverrides ( clazz )  ;", "addPropertiesFromClass ( clazz )  ;", "}", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   Audited   allClassAudited    =    clazz . getAnnotation ( Audited . class )  ;", "if    (  ( allClassAudited    !  =    null )     &  &     (  ( allClassAudited . auditParents (  )  . length )     >     0  )  )     {", "for    ( Class   c    :    allClassAudited . auditParents (  )  )     {", "final   XClass   parentClass    =    reflectionManager . toXClass ( c )  ;", "checkSuperclass ( clazz ,    parentClass )  ;", "if    (  !  ( overriddenNotAuditedClasses . contains ( parentClass )  )  )     {", "overriddenAuditedClasses . add ( parentClass )  ;", "}", "}", "}", "final   List < AuditOverride >    auditOverrides    =    computeAuditOverrides ( clazz )  ;", "for    ( AuditOverride   auditOverride    :    auditOverrides )     {", "if    (  ( auditOverride . forClass (  )  )     !  =     ( void . class )  )     {", "final   XClass   overrideClass    =    reflectionManager . toXClass ( auditOverride . forClass (  )  )  ;", "checkSuperclass ( clazz ,    overrideClass )  ;", "final   String   propertyName    =    auditOverride . name (  )  ;", "if    (  !  ( StringTools . isEmpty ( propertyName )  )  )     {", "final   XProperty   property    =    getProperty ( overrideClass ,    propertyName )  ;", "if    ( auditOverride . isAudited (  )  )     {", "if    (  !  ( overriddenNot . contains ( property )  )  )     {", "overridden . add ( property )  ;", "}", "} else    {", "if    (  !  ( overridden . contains ( property )  )  )     {", "overriddenNot . add ( property )  ;", "}", "}", "} else    {", "if    ( auditOverride . isAudited (  )  )     {", "if    (  !  ( overriddenNotAuditedClasses . contains ( overrideClass )  )  )     {", "overriddenAuditedClasses . add ( overrideClass )  ;", "}", "} else    {", "if    (  !  ( overriddenAuditedClasses . contains ( overrideClass )  )  )     {", "overriddenNotAuditedClasses . add ( overrideClass )  ;", "}", "}", "}", "}", "}", "final   XClass   superclass    =    clazz . getSuperclass (  )  ;", "if    (  (  !  ( clazz . isInterface (  )  )  )     &  &     (  !  ( Object . class . getName (  )  . equals ( superclass . getName (  )  )  )  )  )     {", "readAuditOverrides ( superclass )  ;", "}", "}", "METHOD_END"], "methodName": ["readAuditOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   Iterator < Property >    propertyIter    =    persistentPropertiesSource . getPropertyIterator (  )  ;", "while    ( propertyIter . hasNext (  )  )     {", "final   Property   property    =    propertyIter . next (  )  ;", "addPersistentProperty ( property )  ;", "if    (  (  \" embedded \"  . equals ( property . getPropertyAccessorName (  )  )  )     &  &     (  !  ( IDENTIFIER _ MAPPER _ PROPERTY . equals ( property . getName (  )  )  )  )  )     {", "createPropertiesGroupMapping ( property )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["readPersistentPropertiesAccess"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   AuditMappedBy   auditMappedBy    =    property . getAnnotation ( AuditMappedBy . class )  ;", "if    ( auditMappedBy    !  =    null )     {", "propertyData . setAuditMappedBy ( auditMappedBy . mappedBy (  )  )  ;", "if    (  !  (  \"  \"  . equals ( auditMappedBy . positionMappedBy (  )  )  )  )     {", "propertyData . setPositionMappedBy ( auditMappedBy . positionMappedBy (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setPropertyAuditMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "final   OneToMany   oneToMany    =    property . getAnnotation ( OneToMany . class )  ;", "if    (  ( oneToMany    !  =    null )     &  &     (  !  (  \"  \"  . equals ( oneToMany . mappedBy (  )  )  )  )  )     {", "propertyData . setRelationMappedBy ( oneToMany . mappedBy (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setPropertyRelationMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( property . isAnnotationPresent ( ElementCollection . class )  )     {", "if    ( property . isAnnotationPresent ( Lob . class )  )     {", "if    (  !  ( property . getCollectionClass (  )  . isAssignableFrom ( Map . class )  )  )     {", "throw   new   MappingException (  \"  @ ElementCollection   combined   with    @ Lob   is   only   supported   for   Map   collection   types .  \"  )  ;", "}", "}", "}", "}    catch    ( MappingException   e )     {", "throw   new   HibernateException ( String . format (  \" Invalid   mapping   in    [  % s ]    for   property    [  % s ]  \"  ,    property . getDeclaringClass (  )  . getName (  )  ,    property . getName (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["validateLobMappingSupport"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.AuditedPropertiesReader"}, {"methodBody": ["METHOD_START", "{", "return   auditTable ;", "}", "METHOD_END"], "methodName": ["getAuditTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   properties . entrySet (  )  . stream (  )  . filter (  (    e )     -  >     !  ( e . getValue (  )  . isSyntheic (  )  )  )  . map ( Map . Entry :  : getKey )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getNonSyntheticPropertyNames"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   properties . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getPropertyNames"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   secondaryTableDictionary ;", "}", "METHOD_END"], "methodName": ["getSecondaryTableDictionary"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   properties . values (  )  . stream (  )  . filter (  (    p )     -  >    p . isSyntheic (  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSyntheticProperties"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return    ( defaultAudited )     |  |     (  ( properties . size (  )  )     >     0  )  ;", "}", "METHOD_END"], "methodName": ["isAudited"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . auditTable    =    auditTable ;", "}", "METHOD_END"], "methodName": ["setAuditTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . defaultAudited    =    defaultAudited ;", "}", "METHOD_END"], "methodName": ["setDefaultAudited"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ClassAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   properties . entrySet (  )  . stream (  )  . filter (  (    e )     -  >     !  ( e . getValue (  )  . isSyntheic (  )  )  )  . map ( Map . Entry :  : getKey )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getNonSyntheticPropertyNames"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ComponentAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   properties . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getPropertyNames"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.ComponentAuditingData"}, {"methodBody": ["METHOD_START", "{", "if    ( annot !  =    null )     {", "final   String   overrideName    =    annotname (  )  ;", "boolean   present    =    false ;", "for    ( AuditOverride   current    :    auditJoinTableOverrides )     {", "if    ( current . name (  )  . equals ( overrideName )  )     {", "present    =    true ;", "break ;", "}", "}", "if    (  ! present )     {", "auditJoinTableOverrides . add ( annot ;", "}", "}", "}", "METHOD_END"], "methodName": ["addAuditingOverride"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "if    ( annotationOverrides    !  =    null )     {", "for    ( AuditOverride   annotation    :    annotationOverrides . value (  )  )     {", "addOverride ( annotation )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addAuditingOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   accessType ;", "}", "METHOD_END"], "methodName": ["getAccessType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   auditMappedBy ;", "}", "METHOD_END"], "methodName": ["getAuditMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   auditJoinTableOverrides ;", "}", "METHOD_END"], "methodName": ["getAuditingOverrides"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   beanName ;", "}", "METHOD_END"], "methodName": ["getBeanName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   joinTable ;", "}", "METHOD_END"], "methodName": ["getJoinTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   mapKey ;", "}", "METHOD_END"], "methodName": ["getMapKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   modifiedFlagName ;", "}", "METHOD_END"], "methodName": ["getModifiedFlagName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   positionMappedBy ;", "}", "METHOD_END"], "methodName": ["getPositionMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   resolvePropertyData ( null )  ;", "}", "METHOD_END"], "methodName": ["getPropertyData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   relationMappedBy ;", "}", "METHOD_END"], "methodName": ["getRelationMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   relationTargetAuditMode ;", "}", "METHOD_END"], "methodName": ["getRelationTargetAuditMode"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   store ;", "}", "METHOD_END"], "methodName": ["getStore"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   forceInsertable ;", "}", "METHOD_END"], "methodName": ["isForceInsertable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   syntheic ;", "}", "METHOD_END"], "methodName": ["isSyntheic"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   usingModifiedFlag ;", "}", "METHOD_END"], "methodName": ["isUsingModifiedFlag"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyData ( name ,    beanName ,    accessType ,    store ,    usingModifiedFlag ,    modifiedFlagName ,    syntheic ,    propertyType )  ;", "}", "METHOD_END"], "methodName": ["resolvePropertyData"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . accessType    =    accessType ;", "}", "METHOD_END"], "methodName": ["setAccessType"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . auditMappedBy    =    auditMappedBy ;", "}", "METHOD_END"], "methodName": ["setAuditMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . beanName    =    beanName ;", "}", "METHOD_END"], "methodName": ["setBeanName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . forceInsertable    =    forceInsertable ;", "}", "METHOD_END"], "methodName": ["setForceInsertable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . joinTable    =    joinTable ;", "}", "METHOD_END"], "methodName": ["setJoinTable"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . mapKey    =    mapKey ;", "}", "METHOD_END"], "methodName": ["setMapKey"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . modifiedFlagName    =    modifiedFlagName ;", "}", "METHOD_END"], "methodName": ["setModifiedFlagName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . positionMappedBy    =    positionMappedBy ;", "}", "METHOD_END"], "methodName": ["setPositionMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . relationMappedBy    =    relationMappedBy ;", "}", "METHOD_END"], "methodName": ["setRelationMappedBy"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . relationTargetAuditMode    =    relationTargetAuditMode ;", "}", "METHOD_END"], "methodName": ["setRelationTargetAuditMode"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . store    =    store ;", "}", "METHOD_END"], "methodName": ["setStore"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "this . usingModifiedFlag    =    usingModifiedFlag ;", "}", "METHOD_END"], "methodName": ["setUsingModifiedFlag"], "fileName": "org.hibernate.envers.configuration.internal.metadata.reader.PropertyAuditingData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )", "return   true ;", "if    (  !  ( o   instanceof    )  )", "return   false ;", "address    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( address . id )  )", "return   false ;", "if    (  ( flatNumber )     !  =    null    ?     !  ( flatNumber . equals ( address . flatNumber )  )     :     ( address . flatNumber )     !  =    null )", "return   false ;", "if    (  ( houseNumber )     !  =    null    ?     !  ( houseNumber . equals ( address . houseNumber )  )     :     ( address . houseNumber )     !  =    null )", "return   false ;", "if    (  ( streetName )     !  =    null    ?     !  ( streetName . equals ( address . streetName )  )     :     ( address . streetName )     !  =    null )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "return   flatNumber ;", "}", "METHOD_END"], "methodName": ["getFlatNumber"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "return   houseNumber ;", "}", "METHOD_END"], "methodName": ["getHouseNumber"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "return   persons ;", "}", "METHOD_END"], "methodName": ["getPersons"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "return   streetName ;", "}", "METHOD_END"], "methodName": ["getStreetName"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( streetName )     !  =    null    ?    streetName . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( houseNumber )     !  =    null    ?    houseNumber . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( flatNumber )     !  =    null    ?    flatNumber . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "this . flatNumber    =    flatNumber ;", "}", "METHOD_END"], "methodName": ["setFlatNumber"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "this . houseNumber    =    houseNumber ;", "}", "METHOD_END"], "methodName": ["setHouseNumber"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "this . persons    =    persons ;", "}", "METHOD_END"], "methodName": ["setPersons"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "this . streetName    =    streetName ;", "}", "METHOD_END"], "methodName": ["setStreetName"], "fileName": "org.hibernate.envers.demo.Address"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )", "return   true ;", "if    (  !  ( o   instanceof    )  )", "return   false ;", "person    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( person . id )  )", "return   false ;", "if    (  ( name )     !  =    null    ?     !  ( name . equals ( person . name )  )     :     ( person . name )     !  =    null )", "return   false ;", "if    (  ( surname )     !  =    null    ?     !  ( surname . equals ( person . surname )  )     :     ( person . surname )     !  =    null )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "return   surname ;", "}", "METHOD_END"], "methodName": ["getSurname"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( name )     !  =    null    ?    name . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( sume )     !  =    null    ?    sume . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "this . address    =    address ;", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "this . surname    =    surname ;", "}", "METHOD_END"], "methodName": ["setSurname"], "fileName": "org.hibernate.envers.demo.Person"}, {"methodBody": ["METHOD_START", "{", "if    (  \" NULL \"  . equals ( s )  )     {", "return   null ;", "}", "if    (  \"  \"  . equals ( s )  )     {", "return   def ;", "}", "return   s ;", "}", "METHOD_END"], "methodName": ["convertString"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  \"  . equals ( s )  )     {", "return   def ;", "}", "try    {", "return   Integer . parseInt ( s )  ;", "}    catch    ( NumFormatException   e )     {", "System . err . println (  \" Invalid   num ,    returning    0  .  \"  )  ;", "return    0  ;", "}", "}", "METHOD_END"], "methodName": ["convertStringToInteger"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( Long )     ( entityManager . createQuery (  \" select   count ( a )    from   Address   a \"  )  . getSingleResult (  )  )  )     +     (  ( Long )     ( entityManager . createQuery (  \" select   count ( p )    from   Person   p \"  )  . getSingleResult (  )  )  )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["hasData"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    configurationOverrides    =    new   HashMap < String ,    String >  (  )  ;", "EntityManagerFactory   emf    =    Persistence . createEntityManagerFactory (  \" ConsolePU \"  ,    configurationOverrides )  ;", "EntityManager   entityManager    =    emf . createEntityManager (  )  ;", "console    =    new    ( entityManager )  ;", "System . out . println (  \"  \"  )  ;", "System . out . println (  \" Welcome   to   EntityVersions   demo !  \"  )  ;", "console . populateTestData (  )  ;", "console . start (  )  ;", "entityManager . close (  )  ;", "emf . close (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "entityManager . getTransaction (  )  . begin (  )  ;", "if    (  !  ( hasData (  )  )  )     {", "Pon   p 1     =    new   Pon (  )  ;", "Pon   p 2     =    new   Pon (  )  ;", "Pon   p 3     =    new   Pon (  )  ;", "Address   a 1     =    new   Address (  )  ;", "Address   a 2     =    new   Address (  )  ;", "p 1  . setName (  \" James \"  )  ;", "p 1  . setSurname (  \" Bond \"  )  ;", "p 1  . setAddress ( a 1  )  ;", "p 2  . setName (  \" John \"  )  ;", "p 2  . setSurname (  \" McClane \"  )  ;", "p 2  . setAddress ( a 2  )  ;", "p 3  . setName (  \" Holly \"  )  ;", "p 3  . setSurname (  \" Gennaro \"  )  ;", "p 3  . setAddress ( a 2  )  ;", "a 1  . setStreetName (  \" MI 6  \"  )  ;", "a 1  . setHouseNumber (  1  8  )  ;", "a 1  . setFlatNumber (  2  5  )  ;", "a 1  . setPons ( new   HashSet < Pon >  (  )  )  ;", "a 1  . getPons (  )  . add ( p 1  )  ;", "a 2  . setStreetName (  \" Nakatomi   Plaza \"  )  ;", "a 2  . setHouseNumber (  1  0  )  ;", "a 2  . setFlatNumber (  3  4  )  ;", "a 2  . setPons ( new   HashSet < Pon >  (  )  )  ;", "a 2  . getPons (  )  . add ( p 2  )  ;", "a 2  . getPons (  )  . add ( p 3  )  ;", "entityManager . pist ( a 1  )  ;", "entityManager . pist ( a 2  )  ;", "entityManager . pist ( p 1  )  ;", "entityManager . pist ( p 2  )  ;", "entityManager . pist ( p 3  )  ;", "System . out . println (  \" The   DB   was   populated   with   example   data .  \"  )  ;", "}", "entityManager . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["populateTestData"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "sb . append (  \" id    =     \"  )  . append ( a . getId (  )  )  . append (  \"  ,    streetName    =     \"  )  . append ( a . getStreetName (  )  )  . append (  \"  ,    houseNumber    =     \"  )  . append ( a . getHouseNumber (  )  )  . append (  \"  ,    flatNumber    =     \"  )  . append ( a . getFlatNumber (  )  )  . append (  \"  ,    persons    =     (  \"  )  ;", "Iterator < Person >    iter    =    a . getPersons (  )  . iterator (  )  ;", "while    ( iter . hasNext (  )  )     {", "Person   p    =    iter . next (  )  ;", "sb . append (  \"  <  \"  )  . append ( p . getId (  )  )  . append (  \"  >     \"  )  . append ( p . getName (  )  )  . append (  \"     \"  )  . append ( p . getSurname (  )  )  ;", "if    ( iter . hasNext (  )  )     {", "sb . append (  \"  ,     \"  )  ;", "}", "}", "sb . append (  \"  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["printAddress"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "AuditReader   reader    =    AuditReaderFactory . get ( entityManager )  ;", "Address   a    =    reader . find ( Address . class ,    addressId ,    revision )  ;", "if    ( a    =  =    null )     {", "sb . append (  \" This   address   does   not   exist   at   that   revision .  \"  )  ;", "} else    {", "printAddress ( sb ,    a )  ;", "}", "}", "METHOD_END"], "methodName": ["printAddressAtRevision"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "AuditReader   reader    =    AuditReaderFactory . get ( entityManager )  ;", "List   addressHistory    =    reader . creQuery (  )  . forRevisionsOfEntity ( Address . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( addressId )  )  . getResultList (  )  ;", "if    (  ( addressHistory . size (  )  )     =  =     0  )     {", "sb . append (  \" A   address   with   id    \"  )  . append ( addressId )  . append (  \"    does   not   exist .  \\ n \"  )  ;", "} else    {", "for    ( Object   historyObj    :    addressHistory )     {", "Object [  ]    history    =     (  ( Object [  ]  )     ( historyObj )  )  ;", "DefaultRevisionEntity   revision    =     (  ( DefaultRevisionEntity )     ( history [  1  ]  )  )  ;", "sb . append (  \" revision    =     \"  )  . append ( revision . getId (  )  )  . append (  \"  ,     \"  )  ;", "printAddress ( sb ,     (  ( Address )     ( history [  0  ]  )  )  )  ;", "sb . append (  \"     (  \"  )  . append ( revision . getRevisionD (  )  )  . append (  \"  )  \\ n \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["printAddressHistory"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "List < Address >    addresses    =    entityManager . createQuery (  \" select   a   from   Address   a   order   by   a . id \"  )  . getResultList (  )  ;", "sb . append (  \" Addresses :  \\ n \"  )  ;", "for    ( Address   a    :    addresses )     {", "printAddress ( sb ,    a )  ;", "sb . append (  \"  \\ n \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["printAddresses"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "sb . append (  \" id    =     \"  )  . append ( p . getId (  )  )  . append (  \"  ,    name    =     \"  )  . append ( p . getName (  )  )  . append (  \"  ,    surname    =     \"  )  . append ( p . getSurname (  )  )  ;", "Address   a    =    p . getAddress (  )  ;", "if    ( a    !  =    null )     {", "sb . append (  \"  ,    address    =     <  \"  )  . append ( a . getId (  )  )  . append (  \"  >     \"  )  . append ( a . getStreetName (  )  )  . append (  \"     \"  )  . append ( a . getHouseNumber (  )  )  . append (  \"  /  \"  )  . append ( a . getFlatNumber (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["printPerson"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "AuditReader   reader    =    AuditReaderFactory . get ( entityManager )  ;", "Pon   p    =    reader . find ( Pon . class ,    ponId ,    revision )  ;", "if    ( p    =  =    null )     {", "sb . append (  \" This   pon   does   not   exist   at   that   revision .  \"  )  ;", "} else    {", "printPon ( sb ,    p )  ;", "}", "}", "METHOD_END"], "methodName": ["printPersonAtRevision"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "AuditReader   reader    =    AuditReaderFactory . get ( entityManager )  ;", "List   personHistory    =    reader . creQuery (  )  . forRevisionsOfEntity ( Person . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( personId )  )  . getResultList (  )  ;", "if    (  ( personHistory . size (  )  )     =  =     0  )     {", "sb . append (  \" A   person   with   id    \"  )  . append ( personId )  . append (  \"    does   not   exist .  \\ n \"  )  ;", "} else    {", "for    ( Object   historyObj    :    personHistory )     {", "Object [  ]    history    =     (  ( Object [  ]  )     ( historyObj )  )  ;", "DefaultRevisionEntity   revision    =     (  ( DefaultRevisionEntity )     ( history [  1  ]  )  )  ;", "sb . append (  \" revision    =     \"  )  . append ( revision . getId (  )  )  . append (  \"  ,     \"  )  ;", "printPerson ( sb ,     (  ( Person )     ( history [  0  ]  )  )  )  ;", "sb . append (  \"     (  \"  )  . append ( revision . getRevisionD (  )  )  . append (  \"  )  \\ n \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["printPersonHistory"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "List < Person >    persons    =    entityManager . createQuery (  \" select   p   from   Person   p   order   by   p . id \"  )  . getResultList (  )  ;", "sb . append (  \" Persons :  \\ n \"  )  ;", "for    ( Person   p    :    persons )     {", "printPerson ( sb ,    p )  ;", "sb . append (  \"  \\ n \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["printPersons"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Address   old    =    p . getAddress (  )  ;", "String   input    =    scanner . nextLine (  )  ;", "if    (  \" NULL \"  . equals ( input )  )     {", "p . setAddress ( null )  ;", "if    ( old    !  =    null )     {", "old . getPons (  )  . remove ( p )  ;", "}", "} else", "if    (  \"  \"  . equals ( input )  )     {", "} else    {", "try    {", "Integer   id    =    Integer . valueOf ( input )  ;", "Address   a    =    entityManager . find ( Address . class ,    id )  ;", "if    ( a    =  =    null )     {", "System . err . println (  \" Unknown   address   id ,    setting   to   NULL .  \"  )  ;", "p . setAddress ( null )  ;", "if    ( old    !  =    null )     {", "old . getPons (  )  . remove ( p )  ;", "}", "} else    {", "p . setAddress ( a )  ;", "a . getPons (  )  . add ( p )  ;", "if    ( old    !  =    null )     {", "old . getPons (  )  . remove ( p )  ;", "}", "}", "}    catch    ( NumberFormatException   e )     {", "System . err . println (  \" Invalid   address   id ,    setting   to   NULL .  \"  )  ;", "p . setAddress ( null )  ;", "if    ( old    !  =    null )     {", "old . getPons (  )  . remove ( p )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readAndSetAddress"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Address   current    =    entityManager . find ( Address . class ,    addressId )  ;", "if    ( current    =  =    null )     {", "out . println (  (  (  \" Address   with   id    \"     +    addressId )     +     \"    does   not   exist .  \"  )  )  ;", "return ;", "}", "out . print (  (  (  \" Street   name    ( NULL   for   null ,    enter   for   no   change ,    current    -     \"     +     ( current . getStreetName (  )  )  )     +     \"  )  :     \"  )  )  ;", "current . setStreetName ( cotString ( scanner . nextLine (  )  ,    current . getStreetName (  )  )  )  ;", "out . print (  (  (  \" House   number    ( enter   for   no   change ,    current    -     \"     +     ( current . getHouseNumber (  )  )  )     +     \"  )  :     \"  )  )  ;", "current . setHouseNumber ( cotStringToInteger ( scanner . nextLine (  )  ,    current . getHouseNumber (  )  )  )  ;", "out . print (  (  (  \" Flat   number    ( enter   for   no   change ,    current    -     \"     +     ( current . getFlatNumber (  )  )  )     +     \"  )  :     \"  )  )  ;", "current . setFlatNumber ( cotStringToInteger ( scanner . nextLine (  )  ,    current . getFlatNumber (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["readModifyAddress"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Person   current    =    entityManager . find ( Person . class ,    personId )  ;", "if    ( current    =  =    null )     {", "out . println (  (  (  \" Person   with   id    \"     +    personId )     +     \"    does   not   exist .  \"  )  )  ;", "return ;", "}", "out . print (  (  (  \" Person   name    ( NULL   for   null ,    enter   for   no   change ,    current    -     \"     +     ( current . getName (  )  )  )     +     \"  )  :     \"  )  )  ;", "current . setName ( cotString ( scanner . nextLine (  )  ,    current . getName (  )  )  )  ;", "out . print (  (  (  \" Person   surname    ( NULL   for   null ,    enter   for   no   change ,    current    -     \"     +     ( current . getSurname (  )  )  )     +     \"  )  :     \"  )  )  ;", "current . setSurname ( cotString ( scanner . nextLine (  )  ,    current . getSurname (  )  )  )  ;", "out . print (  (  (  \" Person   address   id    ( NULL   for   null ,    enter   for   no   change ,    current    -     \"     +     (  ( current . getAddress (  )  )     =  =    null    ?     \" NULL \"     :    current . getAddress (  )  . getId (  )  )  )     +     \"  )  :     \"  )  )  ;", "readAndSetAddress ( scanner ,    current )  ;", "}", "METHOD_END"], "methodName": ["readModifyPerson"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Address   a    =    new   Address (  )  ;", "out . print (  \" Street   name    ( NULL   for   null )  :     \"  )  ;", "a . setStreetName ( cotString ( scanner . nextLine (  )  ,     \"  \"  )  )  ;", "out . print (  \" House   number :     \"  )  ;", "a . setHouseNumber ( cotStringToInteger ( scanner . nextLine (  )  ,     0  )  )  ;", "out . print (  \" Flat   number :     \"  )  ;", "a . setFlatNumber ( cotStringToInteger ( scanner . nextLine (  )  ,     0  )  )  ;", "a . setPersons ( new   HashSet < Person >  (  )  )  ;", "return   a ;", "}", "METHOD_END"], "methodName": ["readNewAddress"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Person   p    =    new   Person (  )  ;", "out . print (  \" Person   name    ( NULL   for   null )  :     \"  )  ;", "p . setName ( cotString ( scanner . nextLine (  )  ,     \"  \"  )  )  ;", "out . print (  \" Person   surname    ( NULL   for   null )  :     \"  )  ;", "p . setSurname ( cotString ( scanner . nextLine (  )  ,     \"  \"  )  )  ;", "out . print (  \" Person   address   id    ( NULL   for   null )  :     \"  )  ;", "readAndSetAddress ( scanner ,    p )  ;", "return   p ;", "}", "METHOD_END"], "methodName": ["readNewPerson"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "Scanner   scanner    =    new   Scanner ( System . in )  ;", "PrintStream   out    =    System . out ;", "while    ( true )     {", "out . println (  \"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", "out . println (  \"  1     -    list   pons                                        5     -    list   addresses \"  )  ;", "out . println (  \"  2     -    list   pon   history                   6     -    list   addresses   history \"  )  ;", "out . println (  \"  3     -    new   pon                                              7     -    new   address \"  )  ;", "out . println (  \"  4     -    modify   pon                                     8     -    modify   address \"  )  ;", "out . println (  \"  9     -    get   pon   at   revision       1  0     -    get   address   at   revision \"  )  ;", "out . println (  \"                                                                                         0     -    end \"  )  ;", "try    {", "int   choice    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "StringBuilder   sb ;", "int   ponId ;", "int   addressId ;", "int   revision ;", "switch    ( choice )     {", "case    1     :", "sb    =    new   StringBuilder (  )  ;", "printPons ( sb )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    2     :", "out . print (  \" Pon   id :     \"  )  ;", "ponId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "sb    =    new   StringBuilder (  )  ;", "printPonHistory ( sb ,    ponId )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    3     :", "Pon   p    =    readNewPon ( out ,    scanner )  ;", "entityManager . pist ( p )  ;", "break ;", "case    4     :", "out . print (  \" Pon   id :     \"  )  ;", "ponId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "readModifyPon ( out ,    scanner ,    ponId )  ;", "break ;", "case    5     :", "sb    =    new   StringBuilder (  )  ;", "printAddresses ( sb )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    6     :", "out . print (  \" Address   id :     \"  )  ;", "addressId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "sb    =    new   StringBuilder (  )  ;", "printAddressHistory ( sb ,    addressId )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    7     :", "Address   a    =    readNewAddress ( out ,    scanner )  ;", "entityManager . pist ( a )  ;", "break ;", "case    8     :", "out . print (  \" Address   id :     \"  )  ;", "addressId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "readModifyAddress ( out ,    scanner ,    addressId )  ;", "break ;", "case    9     :", "out . print (  \" Pon   id :     \"  )  ;", "ponId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "out . print (  \" Revision   number :     \"  )  ;", "revision    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "if    ( revision    <  =     0  )     {", "System . out . println (  \" Revision   must   be   greater   then    0  !  \"  )  ;", "continue ;", "}", "sb    =    new   StringBuilder (  )  ;", "printPonAtRevision ( sb ,    ponId ,    revision )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    1  0     :", "out . print (  \" Address   id :     \"  )  ;", "addressId    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "out . print (  \" Revision   number :     \"  )  ;", "revision    =    scanner . nextInt (  )  ;", "scanner . nextLine (  )  ;", "if    ( revision    <  =     0  )     {", "System . out . println (  \" Revision   must   be   greater   then    0  !  \"  )  ;", "continue ;", "}", "sb    =    new   StringBuilder (  )  ;", "printAddressAtRevision ( sb ,    addressId ,    revision )  ;", "out . println ( sb . toString (  )  )  ;", "break ;", "case    0     :", "return ;", "}", "}    catch    ( InputMismatchException   e )     {", "}    finally    {", "entityManager . getTransaction (  )  . commit (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.hibernate.envers.demo.TestConsole"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.enhanced.SequenceIdRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   Date ( timestamp )  ;", "}", "METHOD_END"], "methodName": ["getRevisionDate"], "fileName": "org.hibernate.envers.enhanced.SequenceIdRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.hibernate.envers.enhanced.SequenceIdRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.enhanced.SequenceIdRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . timestamp    =    timestamp ;", "}", "METHOD_END"], "methodName": ["setTimestamp"], "fileName": "org.hibernate.envers.enhanced.SequenceIdRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   modifiedEntityNames ;", "}", "METHOD_END"], "methodName": ["getModifiedEntityNames"], "fileName": "org.hibernate.envers.enhanced.SequenceIdTrackingModifiedEntitiesRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . modifiedEntityNames    =    modifiedEntityNames ;", "}", "METHOD_END"], "methodName": ["setModifiedEntityNames"], "fileName": "org.hibernate.envers.enhanced.SequenceIdTrackingModifiedEntitiesRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getEnversService (  )  . getGlobalConfiguration (  )  . isGenerateRevisionsForCollections (  )  )  )     {", "return ;", "}", "if    (  ( rd    !  =    null )     &  &     ( rd . isBidirectional (  )  )  )     {", "final   String   relatedEntityName    =    rd . getToEntityName (  )  ;", "final   IdMapper   relatedIdMapper    =    getEnversService (  )  . getEntitiesConfigurations (  )  . get ( relatedEntityName )  . getIdMapper (  )  ;", "final   Set < String >    toPropertyNames    =    getEnversService (  )  . getEntitiesConfigurations (  )  . getToPropertyNames ( event . getAffectedOwnerEntityName (  )  ,    rd . getFromPropertyName (  )  ,    relatedEntityName )  ;", "final   String   toPropertyName    =    toPropertyNames . iterator (  )  . next (  )  ;", "for    ( PersistentCollectionChangeData   changeData    :    workUnit . getCollectionChanges (  )  )     {", "final   Object   relatedObj    =    changeData . getChangedElement (  )  ;", "final   Serializable   relatedId    =     (  ( Serializable )     ( relatedIdMapper . mapToIdFromEntity ( relatedObj )  )  )  ;", "auditProcess . addWorkUnit ( new   CollectionChangeWorkUnit ( event . getSession (  )  ,    event . getSession (  )  . bestGuessEntityName ( relatedObj )  ,    toPropertyName ,    getEnversService (  )  ,    relatedId ,    relatedObj )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["generateBidirectionalCollectionChangeWorkUnits"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "final   List < PersistentCollectionChangeData >    collectionChanges    =    getEnversService (  )  . getEntitiesConfigurations (  )  . get ( collectionEntityName )  . getPropertyMapper (  )  . mapCollectionChanges ( event . getSession (  )  ,    referencingPropertyName ,    newColl ,    oldColl ,    event . getAffectedOwnerIdOrNull (  )  )  ;", "final   String   relatedEntityName    =    rd . getToEntityName (  )  ;", "final   IdMapper   relatedIdMapper    =    getEnversService (  )  . getEntitiesConfigurations (  )  . get ( relatedEntityName )  . getIdMapper (  )  ;", "for    ( PersistentCollectionChangeData   changeData    :    collectionChanges )     {", "final   Object   relatedObj    =    changeData . getChangedElement (  )  ;", "final   Serializable   relatedId    =     (  ( Serializable )     ( relatedIdMapper . mapToIdFromEntity ( relatedObj )  )  )  ;", "final   RevisionType   revType    =     (  ( RevisionType )     ( changeData . getData (  )  . get ( getEnversService (  )  . getAuditEntitiesConfiguration (  )  . getRevisionTypePropName (  )  )  )  )  ;", "final   String   realRelatedEntityName    =    event . getSession (  )  . bestGuessEntityName ( relatedObj )  ;", "final   AuditWorkUnit   nestedWorkUnit    =    new   CollectionChangeWorkUnit ( event . getSession (  )  ,    realRelatedEntityName ,    rd . getMappedByPropertyName (  )  ,    getEnversService (  )  ,    relatedId ,    relatedObj )  ;", "auditProcess . addWorkUnit ( new   FakeBidirectionalRelationWorkUnit ( event . getSession (  )  ,    realRelatedEntityName ,    getEnversService (  )  ,    relatedId ,    referencingPropertyName ,    event . getAffectedOwnerOrNull (  )  ,    rd ,    revType ,    changeData . getChangedElementIndex (  )  ,    nestedWorkUnit )  )  ;", "}", "auditProcess . addWorkUnit ( new   CollectionChangeWorkUnit ( event . getSession (  )  ,    collectionEntityName ,    referencingPropertyName ,    getEnversService (  )  ,    event . getAffectedOwnerIdOrNull (  )  ,    event . getAffectedOwnerOrNull (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["generateFakeBidirecationalRelationWorkUnits"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "return   event . getSession (  )  . getPersistenceContext (  )  . getCollectionEntry ( event . getCollection (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCollectionEntry"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "event . getCollection (  )  . forceInitialization (  )  ;", "return   event . getCollection (  )  . getStoredSnapshot (  )  ;", "}", "METHOD_END"], "methodName": ["initializeCollection"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "if    ( shouldGenerateRevision ( event )  )     {", "checkIfTransactionInProgress ( event . getSession (  )  )  ;", "final   AuditProcess   auditProcess    =    getEnversService (  )  . getAuditProcessManager (  )  . get ( event . getSession (  )  )  ;", "final   String   entityName    =    event . getAffectedOwnerEntityName (  )  ;", "final   String   ownerEntityName    =     (  ( AbstractPersister )     ( collectionEntry . getLoadedPersister (  )  )  )  . getOwnerEntityName (  )  ;", "final   String   referencingPropertyName    =    collectionEntry . getRole (  )  . substring (  (  ( ownerEntityName . length (  )  )     +     1  )  )  ;", "final   RelationDescription   rd    =    searchForRelationDescription ( entityName ,    referencingPropertyName )  ;", "if    (  ( rd    !  =    null )     &  &     (  ( rd . getMappedByPropertyName (  )  )     !  =    null )  )     {", "generateFakeBidirecationalRelationWorkUnits ( auditProcess ,    newColl ,    oldColl ,    entityName ,    referencingPropertyName ,    event ,    rd )  ;", "} else    {", "final   PersistentChangeWorkUnit   workUnit    =    new   PersistentChangeWorkUnit ( event . getSession (  )  ,    entityName ,    getEnversService (  )  ,    newColl ,    collectionEntry ,    oldColl ,    event . getAffectedOwnerIdOrNull (  )  ,    referencingPropertyName )  ;", "auditProcess . addWorkUnit ( workUnit )  ;", "if    ( workUnit . containsWork (  )  )     {", "auditProcess . addWorkUnit ( new   ChangeWorkUnit ( event . getSession (  )  ,    event . getAffectedOwnerEntityName (  )  ,    referencingPropertyName ,    getEnversService (  )  ,    event . getAffectedOwnerIdOrNull (  )  ,    event . getAffectedOwnerOrNull (  )  )  )  ;", "generateBidirectionalChangeWorkUnits ( auditProcess ,    event ,    workUnit ,    rd )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["onCollectionAction"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "if    ( shouldGenerateRevision ( event )  )     {", "final   String   entityName    =    event . getAffectedOwnerEntityName (  )  ;", "final   String   ownerEntityName    =     (  ( AbstractPersister )     ( collectionEntry . getLoadedPersister (  )  )  )  . getOwnerEntityName (  )  ;", "final   String   referencingPropertyName    =    collectionEntry . getRole (  )  . substring (  (  ( ownerEntityName . length (  )  )     +     1  )  )  ;", "final   RelationDescription   rd    =    searchForRelationDescription ( entityName ,    referencingPropertyName )  ;", "if    ( rd    !  =    null )     {", "if    (  ( rd . getRelationType (  )  . equals ( RelationType . TO _ MANY _ NOT _ OWNING )  )     &  &     ( rd . isIndexed (  )  )  )     {", "onAction ( event ,    newColl ,    oldColl ,    collectionEntry )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["onCollectionActionInversed"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyName    !  =    null )     &  &     (  ( propertyName . indexOf (  '  .  '  )  )     !  =     (  -  1  )  )  )     {", "return   propertyName . replaceAll (  \"  \\  \\  .  \"  ,     \"  \\  \\  _  \"  )  ;", "}", "return   propertyName ;", "}", "METHOD_END"], "methodName": ["sanitizeReferencingPropertyName"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "final   EntityConfiguration   configuration    =    getEnversService (  )  . getEntitiesConfigurations (  )  . get ( entityName )  ;", "final   String   propertyName    =    sanitizeReferencingPropertyName ( referencingPropertyName )  ;", "final   RelationDescription   rd    =    configuration . getRelationDescription ( propertyName )  ;", "if    (  ( rd    =  =    null )     &  &     (  ( configuration . getParentEntityName (  )  )     !  =    null )  )     {", "return   searchForRelationDescription ( configuration . getParentEntityName (  )  ,    propertyName )  ;", "}", "return   rd ;", "}", "METHOD_END"], "methodName": ["searchForRelationDescription"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "final   String   entityName    =    event . getAffectedOwnerEntityName (  )  ;", "return    ( getEnversService (  )  . getGlobalConfiguration (  )  . isGenerateRevisionsFors (  )  )     &  &     ( getEnversService (  )  . getEntitiesConfigurations (  )  . isVersioned ( entityName )  )  ;", "}", "METHOD_END"], "methodName": ["shouldGenerateRevision"], "fileName": "org.hibernate.envers.event.spi.BaseEnversCollectionEventListener"}, {"methodBody": ["METHOD_START", "{", "String   toEntityName ;", "Serializable   id ;", "if    ( value   instanceof   HibernateProxy )     {", "final   HibernateProxy   Proxy    =     (  ( HibernateProxy )     ( value )  )  ;", "id    =    Proxy . getHibernateLazyInitializer (  )  . getIdentifier (  )  ;", "value    =    EntityTools . getTargetFromProxy ( session . getFactory (  )  ,    Proxy )  ;", "toEntityName    =    session . bestGuessEntityName ( value )  ;", "} else    {", "toEntityName    =    session . guessEntityName ( value )  ;", "final   IdMapper   idMapper    =    enversService . getEntitiesConfigurations (  )  . get ( toEntityName )  . getIdMapper (  )  ;", "id    =     (  ( Serializable )     ( idMapper . mapToIdFromEntity ( value )  )  )  ;", "}", "final   Set < String >    toPropertyNames    =    enversService . getEntitiesConfigurations (  )  . getToPropertyNames ( fromEntityName ,    relDesc . getFromPropertyName (  )  ,    toEntityName )  ;", "final   String   toPropertyName    =    toPropertyNames . iterator (  )  . next (  )  ;", "auditProcess . addWorkUnit ( new   CollectionChangeWorkUnit ( session ,    toEntityName ,    toPropertyName ,    enversService ,    id ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["addCollectionChangeWorkUnit"], "fileName": "org.hibernate.envers.event.spi.BaseEnversEventListener"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( session . isTransactionInProgress (  )  )  )     {", "throw   new   AuditException (  \" Unable   to   cre   revision   because   of   non - active   transaction \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkIfTransactionInProgress"], "fileName": "org.hibernate.envers.event.spi.BaseEnversEventListener"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( enversService . getGlobalConfiguration (  )  . isGenerateRevisionsForCollections (  )  )  )     {", "return ;", "}", "final   String [  ]    propertyNames    =    entityPersister . getPropertyNames (  )  ;", "for    ( int   i    =     0  ;    i    <     ( propertyNames . length )  ;    i +  +  )     {", "final   String   propertyName    =    propertyNames [ i ]  ;", "final   RelationDescription   relDesc    =    enversService . getEntitiesConfigurations (  )  . getRelationDescription ( entityName ,    propertyName )  ;", "if    (  (  (  ( relDesc    !  =    null )     &  &     ( relDesc . isBidirectional (  )  )  )     &  &     (  ( relDesc . getRelationType (  )  )     =  =     ( RelationType . TO _ ONE )  )  )     &  &     ( relDesc . isInsertable (  )  )  )     {", "final   Object   oldValue    =     ( oldState    =  =    null )     ?    null    :    oldState [ i ]  ;", "final   Object   newValue    =     ( newState    =  =    null )     ?    null    :    newState [ i ]  ;", "if    (  !  ( EntityTools . entitiesEqual ( session ,    relDesc . getToEntityName (  )  ,    oldValue ,    newValue )  )  )     {", "if    ( newValue    !  =    null )     {", "addCollectionChangeWorkUnit ( auditProcess ,    session ,    entityName ,    relDesc ,    newValue )  ;", "}", "if    ( oldValue    !  =    null )     {", "addCollectionChangeWorkUnit ( auditProcess ,    session ,    entityName ,    relDesc ,    oldValue )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["generateBidirectionalCollectionChangeWorkUnits"], "fileName": "org.hibernate.envers.event.spi.BaseEnversEventListener"}, {"methodBody": ["METHOD_START", "{", "return   enversService ;", "}", "METHOD_END"], "methodName": ["getEnversService"], "fileName": "org.hibernate.envers.event.spi.BaseEnversEventListener"}, {"methodBody": ["METHOD_START", "{", "final   EntityConfiguration   configuration    =    getEnversService (  )  . getEntitiesConfigurations (  )  . get ( entityName )  ;", "if    (  (  ( configuration . getPropertyMapper (  )  )     !  =    null )     &  &     ( oldState    =  =    null )  )     {", "return   configuration . getPropertyMapper (  )  . hasPropertiesWithModifiedFlag (  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDetachedEntityUpdate"], "fileName": "org.hibernate.envers.event.spi.BaseEnversUpdateEventListener"}, {"methodBody": ["METHOD_START", "{", "if    ( isDetachedEntityUpdate ( entityName ,    event . getOldState (  )  )  )     {", "return   auditProcess . getCachedEntityState ( event . getId (  )  ,    entityName )  ;", "}", "return   event . getOldState (  )  ;", "}", "METHOD_END"], "methodName": ["getOldDBState"], "fileName": "org.hibernate.envers.event.spi.EnversPostUpdateEventListenerImpl"}, {"methodBody": ["METHOD_START", "{", "final   Object [  ]    newDbState    =    event . getState (  )  . clone (  )  ;", "if    (  ( event . getOldState (  )  )     !  =    null )     {", "final   EntityPersister   entityPersister    =    event . getPersister (  )  ;", "for    ( int   i    =     0  ;    i    <     ( entityPersister . getPropertyNames (  )  . length )  ;     +  + i )     {", "if    (  !  ( entityPersister . getPropertyUpdateability (  )  [ i ]  )  )     {", "newDbState [ i ]     =    event . getOldState (  )  [ i ]  ;", "}", "}", "}", "return   newDbState ;", "}", "METHOD_END"], "methodName": ["postUpdateDBState"], "fileName": "org.hibernate.envers.event.spi.EnversPostUpdateEventListenerImpl"}, {"methodBody": ["METHOD_START", "{", "return   entityName ;", "}", "METHOD_END"], "methodName": ["getEntityName"], "fileName": "org.hibernate.envers.exception.NotAuditedException"}, {"methodBody": ["METHOD_START", "{", "return   date ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "org.hibernate.envers.exception.RevisionDoesNotExistException"}, {"methodBody": ["METHOD_START", "{", "return   revision ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.hibernate.envers.exception.RevisionDoesNotExistException"}, {"methodBody": ["METHOD_START", "{", "return   Logger . getLogger ( classNeedingLogging )  ;", "}", "METHOD_END"], "methodName": ["logger"], "fileName": "org.hibernate.envers.internal.EnversLogging"}, {"methodBody": ["METHOD_START", "{", "return   Logger . getLogger ( loggerName )  ;", "}", "METHOD_END"], "methodName": ["logger"], "fileName": "org.hibernate.envers.internal.EnversLogging"}, {"methodBody": ["METHOD_START", "{", "return   EnversLogging . messageLogger ( classNeedingLogging . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["messageLogger"], "fileName": "org.hibernate.envers.internal.EnversLogging"}, {"methodBody": ["METHOD_START", "{", "return   Logger . getMessageLogger ( EnversMessageLogger . class ,    loggerName )  ;", "}", "METHOD_END"], "methodName": ["messageLogger"], "fileName": "org.hibernate.envers.internal.EnversLogging"}, {"methodBody": ["METHOD_START", "{", "entityNames . add ( entityName )  ;", "final   EntityConfiguration   entCfg    =    e . get ( entityName )  ;", "if    (  ( entCfg . getParentEntityName (  )  )     !  =    null )     {", "addWithParentEntityNames ( entCfg . getParentEntityName (  )  ,    entityNames )  ;", "}", "}", "METHOD_END"], "methodName": ["addWithParentEntityNames"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    EntityConfiguration >    entry    :    entitiesConfigurations . entrySet (  )  )     {", "final   String   entityName    =    entry . getKey (  )  ;", "final   EntityConfiguration   entCfg    =    entry . getValue (  )  ;", "for    ( RelationDescription   relDesc    :    entCfg . getRelationsIterator (  )  )     {", "if    (  (  ( relDesc . getRelationType (  )  )     =  =     ( RelationType . TO _ ONE )  )     |  |     (  ( relDesc . getRelationType (  )  )     =  =     ( RelationType . TO _ MANY _ MIDDLE )  )  )     {", "final   EntityConfiguration   entityConfiguration    =    entitiesConfigurations . get ( relDesc . getToEntityName (  )  )  ;", "if    ( entityConfiguration    !  =    null )     {", "for    ( RelationDescription   other    :    entityConfiguration . getRelationsIterator (  )  )     {", "if    (  ( relDesc . getFromPropertyName (  )  . equals ( other . getMappedByPropertyName (  )  )  )     &  &     ( entityName . equals ( other . getToEntityName (  )  )  )  )     {", "relDesc . setBidirectional ( true )  ;", "other . setBidirectional ( true )  ;", "}", "}", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["generateBidirectionRelationInfo"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "entityNamesForVersionsEntityNames    =    new   HashMap <  >  (  )  ;", "for    ( Map . Entry < String ,    EntityConfiguration >    entry    :    e . entrySet (  )  )     {", "entityNamesForVersionsEntityNames . put ( entry . getValue (  )  . getVersionsEntityName (  )  ,    entry . getKey (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["generateVersionsEntityToEntityNames"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "return   entitiesConfigurations . get ( entityName )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    names    =    new   HashSet <  >  (  )  ;", "addWithParentyNames ( entityName ,    names )  ;", "return   names ;", "}", "METHOD_END"], "methodName": ["getEntityAndParentsNames"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "return   entityNamesForVersionsEntityNames . get ( versionsEntityName )  ;", "}", "METHOD_END"], "methodName": ["getEntityNameForVersionsEntityName"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "return   notAuditedEntitiesConfigurations . get ( entityName )  ;", "}", "METHOD_END"], "methodName": ["getNotVersionEntityConfiguration"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "final   EntityConfiguration   entCfg ;", "if    ( isVersioned ( entityName )  )     {", "entCfg    =    get ( entityName )  ;", "} else    {", "entCfg    =    getNotVersionEntityConfiguration ( entityName )  ;", "}", "final   RelationDescription   relDesc    =    entCfg . getRelationDescription ( propertyName )  ;", "if    ( relDesc    !  =    null )     {", "return   relDesc ;", "} else", "if    (  ( entCfg . getParentEntityName (  )  )     !  =    null )     {", "return   getRelationDescription ( entCfg . getParentEntityName (  )  ,    propertyName )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getRelationDescription"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "final   EntityConfiguration   entCfg    =    entitiesConfigurations . get ( entityName )  ;", "Collection < RelationDescription >    descriptions    =    new   ArrayList <  >  (  )  ;", "if    (  ( entCfg . getParentEntityName (  )  )     !  =    null )     {", "descriptions . addAll ( getRelationDescriptions ( entCfg . getParentEntityName (  )  )  )  ;", "}", "for    ( RelationDescription   relationDescription    :    entCfg . getRelationsIterator (  )  )     {", "descriptions . add ( relationDescription )  ;", "}", "return   descriptions ;", "}", "METHOD_END"], "methodName": ["getRelationDescriptions"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    entityAndParentsNames    =    getEntityAndParentsNames ( fromEntityName )  ;", "final   Set < String >    toPropertyNames    =    new   HashSet <  >  (  )  ;", "for    ( RelationDescription   relationDescription    :    getRelationDescriptions ( toEntityName )  )     {", "final   String   relToEntityName    =    relationDescription . getToEntityName (  )  ;", "final   String   mappedByPropertyName    =    relationDescription . getMappedByPropertyName (  )  ;", "if    (  (  ( entityAndParentsNames . contains ( relToEntityName )  )     &  &     ( mappedByPropertyName    !  =    null )  )     &  &     ( mappedByPropertyName . equals ( fromPropertyName )  )  )     {", "toPropertyNames . add ( relationDescription . getFromPropertyName (  )  )  ;", "}", "}", "return   toPropertyNames ;", "}", "METHOD_END"], "methodName": ["getToPropertyNames"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "return    ( entitiesConfigurations . size (  )  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["hasAuditedEntities"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "return    ( get ( entityName )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isVersioned"], "fileName": "org.hibernate.envers.internal.entities.EntitiesConfigurations"}, {"methodBody": ["METHOD_START", "{", "relations . put ( fromPropertyName ,    RelationDescription . toMany ( fromPropertyName ,    RelationType . TO _ MANY _ MIDDLE _ NOT _ OWNING ,    toEntityName ,    mappedByPropertyName ,    null ,    null ,    null ,    true ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addToManyMiddleNotOwningRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "relations . put ( fromPropertyName ,    RelationDescription . toMany ( fromPropertyName ,    RelationType . TO _ MANY _ MIDDLE ,    toEntityName ,    null ,    null ,    null ,    null ,    true ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["addToManyMiddleRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "relations . put ( fromPropertyName ,    RelationDescription . toMany ( fromPropertyName ,    RelationType . TO _ MANY _ NOT _ OWNING ,    toEntityName ,    mappedByPropertyName ,    idMapper ,    fakeBidirectionalRelationMapper ,    fakeBidirectionalRelationIndexMapper ,    true ,    indexed )  )  ;", "}", "METHOD_END"], "methodName": ["addToManyNotOwningRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "relations . put ( fromPropertyName ,    RelationDescription . toOne ( fromPropertyName ,    RelationType . TO _ ONE _ NOT _ OWNING ,    toEntityName ,    mappedByPropertyName ,    idMapper ,    null ,    null ,    true ,    ignoreNotFound )  )  ;", "}", "METHOD_END"], "methodName": ["addToOneNotOwningRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "relations . put ( fromPropertyName ,    RelationDescription . toOne ( fromPropertyName ,    RelationType . TO _ ONE ,    toEntityName ,    null ,    idMapper ,    null ,    null ,    insertable ,    ignoreNotFound )  )  ;", "}", "METHOD_END"], "methodName": ["addToOneRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   entityClassName ;", "}", "METHOD_END"], "methodName": ["getEntityClassName"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   idMappingData . getIdMapper (  )  ;", "}", "METHOD_END"], "methodName": ["getIdMapper"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   idMappingData ;", "}", "METHOD_END"], "methodName": ["getIdMappingData"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   parentEntityName ;", "}", "METHOD_END"], "methodName": ["getParentEntityName"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   propertyMapper ;", "}", "METHOD_END"], "methodName": ["getPropertyMapper"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   relations . get ( propertyName )  ;", "}", "METHOD_END"], "methodName": ["getRelationDescription"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   relations . values (  )  ;", "}", "METHOD_END"], "methodName": ["getRelationsIterator"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   versionsEntityName ;", "}", "METHOD_END"], "methodName": ["getVersionsEntityName"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    ( relations . get ( propertyName )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isRelation"], "fileName": "org.hibernate.envers.internal.entities.EntityConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( Map   versionsEntity    :    versionsEntities )     {", "addTo . add ( createInstanceFromVersionsEntity ( entityName ,    versionsEntity ,    revision )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addInstancesFromVersionsEntities"], "fileName": "org.hibernate.envers.internal.entities.EntityInstantiator"}, {"methodBody": ["METHOD_START", "{", "if    ( versionsEntity    =  =    null )     {", "return   null ;", "}", "final   String   type    =    enversService . getEntitiesConfigurations (  )  . getEntityNameForVersionsEntityName (  (  ( String )     ( versionsEntity . get (  \"  $ type $  \"  )  )  )  )  ;", "if    ( type    !  =    null )     {", "entityName    =    type ;", "}", "final   IdMapper   idMapper    =    enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getIdMapper (  )  ;", "final   Map   originalId    =     (  ( Map )     ( versionsEntity . get ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )  )  )  ;", "replaceNonAuditIdProxies ( versionsEntity ,    revision )  ;", "final   Object   primaryKey    =    idMapper . mapToIdFromMap ( originalId )  ;", "if    ( versionsReader . getFirstLevelCache (  )  . contains ( entityName ,    revision ,    primaryKey )  )     {", "return   versionsReader . getFirstLevelCache (  )  . get ( entityName ,    revision ,    primaryKey )  ;", "}", "Object   ret    =    versionsReader . getSessionImplementor (  )  . getFactory (  )  . getEntityPersister ( entityName )  . getEntityTuplizer (  )  . ie (  )  ;", "versionsReader . getFirstLevelCache (  )  . put ( entityName ,    revision ,    primaryKey ,    ret )  ;", "enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getPropertyMapper (  )  . mapToEntityFromMap ( enversService ,    ret ,    versionsEntity ,    primaryKey ,    versionsReader ,    revision )  ;", "idMapper . mapToEntityFromMap ( ret ,    originalId )  ;", "versionsReader . getFirstLevelCache (  )  . putOnEntityNameCache ( primaryKey ,    revision ,    ret ,    entityName )  ;", "return   ret ;", "}", "METHOD_END"], "methodName": ["createInstanceFromVersionsEntity"], "fileName": "org.hibernate.envers.internal.entities.EntityInstantiator"}, {"methodBody": ["METHOD_START", "{", "return   versionsReader ;", "}", "METHOD_END"], "methodName": ["getAuditReaderImplementor"], "fileName": "org.hibernate.envers.internal.entities.EntityInstantiator"}, {"methodBody": ["METHOD_START", "{", "return   enversService ;", "}", "METHOD_END"], "methodName": ["getEnversService"], "fileName": "org.hibernate.envers.internal.entities.EntityInstantiator"}, {"methodBody": ["METHOD_START", "{", "final   Map   originalId    =     (  ( Map )     ( versionsEntity . get ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )  )  )  ;", "for    ( Object   key    :    originalId . keySet (  )  )     {", "final   Object   value    =    originalId . get ( key )  ;", "if    ( value   instanceof   HibernateProxy )     {", "final   HibernateProxy   Proxy    =     (  ( HibernateProxy )     ( value )  )  ;", "final   LazyInitializer   initializer    =    Proxy . getHibernateLazyInitializer (  )  ;", "final   String   entityName    =    initializer . getEntityName (  )  ;", "final   Serializable   entityId    =    initializer . getIdentifier (  )  ;", "if    ( enversService . getEntitiesConfigurations (  )  . isVersioned ( entityName )  )     {", "final   String   entityClassName    =    enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getEntityClassName (  )  ;", "final   Class   entityClass    =    ReflectionTools . loadClass ( entityClassName ,    enversService . getClassLoaderService (  )  )  ;", "final   ToOneDelegateSessionImplementor   delegate    =    new   ToOneDelegateSessionImplementor ( versionsReader ,    entityClass ,    entityId ,    revision ,    RevisionType . DEL . equals ( versionsEntity . get ( enversService . getAuditEntitiesConfiguration (  )  . getRevisionTypePropName (  )  )  )  ,    enversService )  ;", "originalId . put ( key ,    versionsReader . getSessionImplementor (  )  . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  . createProxy ( entityId ,    delegate )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["replaceNonAuditIdProxies"], "fileName": "org.hibernate.envers.internal.entities.EntityInstantiator"}, {"methodBody": ["METHOD_START", "{", "return   idMapper ;", "}", "METHOD_END"], "methodName": ["getIdMapper"], "fileName": "org.hibernate.envers.internal.entities.IdMappingData"}, {"methodBody": ["METHOD_START", "{", "return   xmlMapping ;", "}", "METHOD_END"], "methodName": ["getXmlMapping"], "fileName": "org.hibernate.envers.internal.entities.IdMappingData"}, {"methodBody": ["METHOD_START", "{", "return   xmlRelationMapping ;", "}", "METHOD_END"], "methodName": ["getXmlRelationMapping"], "fileName": "org.hibernate.envers.internal.entities.IdMappingData"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyData ( propertyName ,    null ,    null ,    null ,    propertyType )  ;", "}", "METHOD_END"], "methodName": ["forProperty"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   accessType ;", "}", "METHOD_END"], "methodName": ["getAccessType"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   beanName ;", "}", "METHOD_END"], "methodName": ["getBeanName"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   modifiedFlagName ;", "}", "METHOD_END"], "methodName": ["getModifiedFlagPropertyName"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   store ;", "}", "METHOD_END"], "methodName": ["getStore"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   propertyType ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   synthetic ;", "}", "METHOD_END"], "methodName": ["isSynthetic"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   usingModifiedFlag ;", "}", "METHOD_END"], "methodName": ["isUsingModifiedFlag"], "fileName": "org.hibernate.envers.internal.entities.PropertyData"}, {"methodBody": ["METHOD_START", "{", "return   fakeBidirectionalRelationIndexMapper ;", "}", "METHOD_END"], "methodName": ["getFakeBidirectionalRelationIndexMapper"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   fakeBidirectionalRelationMapper ;", "}", "METHOD_END"], "methodName": ["getFakeBidirectionalRelationMapper"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   fromPropertyName ;", "}", "METHOD_END"], "methodName": ["getFromPropertyName"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   idMapper ;", "}", "METHOD_END"], "methodName": ["getIdMapper"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   mappedByPropertyName ;", "}", "METHOD_END"], "methodName": ["getMappedByPropertyName"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   relationType ;", "}", "METHOD_END"], "methodName": ["getRelationType"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   toEntityName ;", "}", "METHOD_END"], "methodName": ["getToEntityName"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   bidirectional ;", "}", "METHOD_END"], "methodName": ["isBidirectional"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   ignoreNotFound ;", "}", "METHOD_END"], "methodName": ["isIgnoreNotFound"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   indexed ;", "}", "METHOD_END"], "methodName": ["isIndexed"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   insertable ;", "}", "METHOD_END"], "methodName": ["isInsertable"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "this . bidirectional    =    bidirectional ;", "}", "METHOD_END"], "methodName": ["setBidirectional"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   RelationDescription ( fromPropertyName ,    relationType ,    toEntityName ,    mappedByPropertyName ,    idMapper ,    fakeBidirectionalRelationMapper ,    fakeBidirectionalRelationIndexMapper ,    insertable ,    false ,    indexed )  ;", "}", "METHOD_END"], "methodName": ["toMany"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   RelationDescription ( fromPropertyName ,    relationType ,    toEntityName ,    mappedByPropertyName ,    idMapper ,    fakeBidirectionalRelationMapper ,    fakeBidirectionalRelationIndexMapper ,    insertable ,    ignoreNotFound ,    false )  ;", "}", "METHOD_END"], "methodName": ["toOne"], "fileName": "org.hibernate.envers.internal.entities.RelationDescription"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < PropertyData ,    PropertyMapper >    property    :    delegate . getProperties (  )  . entrySet (  )  )     {", "final   Object   value    =    data . get ( property . getKey (  )  . getName (  )  )  ;", "if    (  ( value    !  =    null )     |  |     (  !  (  ( property . getValue (  )  )    instanceof   SinglePropertyMapper )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isAllPropertiesNull"], "fileName": "org.hibernate.envers.internal.entities.mapper.ComponentPropertyMapper"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Map )     ( newObj )  )  . get ( propertyData . getBeanName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.internal.entities.mapper.MultiDynamicComponentMapper"}, {"methodBody": ["METHOD_START", "{", "return   array    =  =    null    ?    null    :    array [ index ]  ;", "}", "METHOD_END"], "methodName": ["getAtIndexOrNull"], "fileName": "org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper"}, {"methodBody": ["METHOD_START", "{", "String   delegatePropertyName ;", "final   int   dotIndex    =    referencingPropertyName . indexOf (  '  .  '  )  ;", "if    ( dotIndex    !  =     (  -  1  )  )     {", "final   String   componentName    =    referencingPropertyName . substring (  0  ,    dotIndex )  ;", "final   String   propertyInComponentName    =     ( MappingTools . createComponentPrefix ( componentName )  )     +     ( referencingPropertyName . substring (  ( dotIndex    +     1  )  )  )  ;", "referencingPropertyName    =    componentName ;", "delegatePropertyName    =    propertyInComponentName ;", "} else    {", "delegatePropertyName    =    referencingPropertyName ;", "}", "return   Pair . make ( properties . get ( propertyDatas . get ( referencingPropertyName )  )  ,    delegatePropertyName )  ;", "}", "METHOD_END"], "methodName": ["getMapperAndDelegatePropName"], "fileName": "org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper"}, {"methodBody": ["METHOD_START", "{", "return   propertyDatas ;", "}", "METHOD_END"], "methodName": ["getPropertyDatas"], "fileName": "org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( changedElement )    instanceof   Pair )     {", "return    (  ( Pair )     ( changedElement )  )  . getSecond (  )  ;", "}", "if    (  ( changedElement )    instanceof   Map . Entry )     {", "return    (  ( Map . Entry )     ( changedElement )  )  . getValue (  )  ;", "}", "return   changedElement ;", "}", "METHOD_END"], "methodName": ["getChangedElement"], "fileName": "org.hibernate.envers.internal.entities.mapper.PersistentCollectionChangeData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( changedElement )    instanceof   Pair )     {", "return    (  ( Pair )     ( changedElement )  )  . getFirst (  )  ;", "}", "if    (  ( changedElement )    instanceof   Map . Entry )     {", "return    (  ( Map . Entry )     ( changedElement )  )  . getKey (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getChangedElementIndex"], "fileName": "org.hibernate.envers.internal.entities.mapper.PersistentCollectionChangeData"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.internal.entities.mapper.PersistentCollectionChangeData"}, {"methodBody": ["METHOD_START", "{", "return   entityName ;", "}", "METHOD_END"], "methodName": ["getEntityName"], "fileName": "org.hibernate.envers.internal.entities.mapper.PersistentCollectionChangeData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( propertyData . getType (  )  )     !  =    null )     {", "return   propertyData . getType (  )  . isEqual ( newObj ,    oldObj )  ;", "}", "return   EqualsHelper . areEqual ( newObj ,    oldObj )  ;", "}", "METHOD_END"], "methodName": ["areEqual"], "fileName": "org.hibernate.envers.internal.entities.mapper.SinglePropertyMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( cls    =  =    null )     {", "throw   new   HException (  (  \" No   field   found   for   property :     \"     +     ( propertyData . getName (  )  )  )  )  ;", "}", "if    ( setter   instanceof   SetterFieldImpl )     {", "try    {", "return   cls . getDeclaredField ( propertyData . getBeanName (  )  )  . getType (  )  . isPrimitive (  )  ;", "}    catch    ( NoSuchFieldException   e )     {", "return   isPrimitive ( setter ,    propertyData ,    cls . getSuperclass (  )  )  ;", "}", "} else    {", "return   setter . getMethod (  )  . getParameterTypes (  )  [  0  ]  . isPrimitive (  )  ;", "}", "}", "METHOD_END"], "methodName": ["isPrimitive"], "fileName": "org.hibernate.envers.internal.entities.mapper.SinglePropertyMapper"}, {"methodBody": ["METHOD_START", "{", "return   AccessController . doPrivileged ( new   PrivilegedAction < Object >  (  )     {", "@ Override", "public   Object   run (  )     {", "try    {", "return   ReflectHelper . getDefaultConstructor ( cClass )  . newInstance (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   AuditException ( e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["instantiateCompositeId"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.AbstractCompositeIdMapper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( paramDatas . size (  )  )     >     1  )     {", "return   parametaddSubParamet \" and \"  )  ;", "} else    {", "return   paramet", "}", "}", "METHOD_END"], "methodName": ["getParametersToUse"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.AbstractIdMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( equals )     {", "parametaddNullRestriction ( alias ,    propertyName )  ;", "} else    {", "parametaddNotNullRestriction ( alias ,    propertyName )  ;", "}", "}", "METHOD_END"], "methodName": ["handleNullValue"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.AbstractIdMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( prefix    !  =    null )     {", "return    ( prefix    +     \"  .  \"  )     +     ( flatEyPropertyName )  ;", "} else    {", "return   flatEyPropertyName ;", "}", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.QueryParameterData"}, {"methodBody": ["METHOD_START", "{", "return   flatEntityPropertyName ;", "}", "METHOD_END"], "methodName": ["getQueryParameterName"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.QueryParameterData"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.QueryParameterData"}, {"methodBody": ["METHOD_START", "{", "query . setParameter ( flatEntityPropertyName ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParameterValue"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.QueryParameterData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( objTo    =  =    null )     |  |     ( objFrom    =  =    null )  )     {", "return ;", "}", "AccessControlldoPrivileged ( new   PrivilegedAction < Object >  (  )     {", "@ Ovide", "public   Object   run (  )     {", "final   Gettgett =    ReflectionTools . getGettobjFrom . getClass (  )  ,    propyData ,    getSiceRegistry (  )  )  ;", "final   Settsett =    ReflectionTools . getSettobjTo . getClass (  )  ,    propyData ,    getSiceRegistry (  )  )  ;", "settset ( objTo ,    gettget ( objFrom )  ,    null )  ;", "return   null ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["mapToEntityFromEntity"], "fileName": "org.hibernate.envers.internal.entities.mapper.id.SingleIdMapper"}, {"methodBody": ["METHOD_START", "{", "int   ordinal    =     0  ;", "for    ( Object   changedObj    :    changed )     {", "final   Map < String ,    Object >    entityData    =    new   HashMap <  >  (  )  ;", "final   Map < String ,    Object >    originalId    =    createIdMap (  ( ordinal +  +  )  )  ;", "entityData . put ( commonData . getVerEntCfg (  )  . getOriginalIdPropName (  )  ,    originalId )  ;", "collectionChanges . add ( new   PersistentCollectionChangeData ( commonData . getVersionsMiddleEntityName (  )  ,    entityData ,    changedObj )  )  ;", "commonData . getReferencingIdData (  )  . getPrefixedMapper (  )  . mapToMapFromId ( originalId ,    id )  ;", "mapToMapFromObject ( session ,    originalId ,    entityData ,    changedObj )  ;", "( revisionTypeInId    ?    originalId    :    entityData )  . put ( commonData . getVerEntCfg (  )  . getRevisionTypePropName (  )  ,    revisionType )  ;", "}", "}", "METHOD_END"], "methodName": ["addCollectionChanges"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    Object >    idMap    =    new   HashMap <  >  (  )  ;", "if    ( ordinalInId )     {", "idMap . put ( commonData . getVerEntCfg (  )  . getEmbeddableSetOrdinalPropertyName (  )  ,    ordinal )  ;", "}", "return   idMap ;", "}", "METHOD_END"], "methodName": ["createIdMap"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "final   Collection   newCollection    =    getNewCollectionContent ( newColl )  ;", "final   Collection   oldCollection    =    getOldCollectionContent ( oldColl )  ;", "return    (  (  ( oldCollection    =  =    null )     &  &     ( newCollection    !  =    null )  )     &  &     ( newCollection . isEmpty (  )  )  )     |  |     (  (  ( newCollection    =  =    null )     &  &     ( oldCollection    !  =    null )  )     &  &     ( oldCollection . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isFromNullToEmptyOrFromEmptyToNull"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "return    ( obj    !  =    null )     &  &     (  !  ( obj   instanceof   PersistentCollection )  )  ;", "}", "METHOD_END"], "methodName": ["isNotPersistentCollection"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "final   List < PersistentCollectionChangeData >    collectionChanges    =    new   ArrayList < PersistentCollectionChangeData >  (  )  ;", "final   Collection   newCollection    =    getNewCollectionContent ( newColl )  ;", "final   Collection   oldCollection    =    getOldCollectionContent ( oldColl )  ;", "final   Set < Object >    added    =    buildCollectionChangeSet ( newColl ,    newCollection )  ;", "if    ( oldColl    !  =    null )     {", "added . removeAll ( new   HashSet ( oldCollection )  )  ;", "}", "addCollectionChanges ( session ,    collectionChanges ,    added ,    RevisionType . ADD ,    id )  ;", "final   Set < Object >    deleted    =    buildCollectionChangeSet ( oldColl ,    oldCollection )  ;", "if    ( newColl    !  =    null )     {", "deleted . removeAll ( new   HashSet ( newCollection )  )  ;", "}", "addCollectionChanges ( session ,    collectionChanges ,    deleted ,    RevisionType . DEL ,    id )  ;", "return   collectionChanges ;", "}", "METHOD_END"], "methodName": ["mapCollectionChanges"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "final   List < PersistentCollectionChangeData >    collectionChanges    =    new   ArrayList < PersistentCollectionChangeData >  (  )  ;", "final   Collection   newCollection    =    getNewCollectionContent ( newColl )  ;", "final   Collection   oldCollection    =    getOldCollectionContent ( oldColl )  ;", "final   Set < Object >    added    =    buildCollectionChangeSet ( newColl ,    newCollection )  ;", "if    (  ( oldColl    !  =    null )     &  &     ( collectionPersister    !  =    null )  )     {", "for    ( Object   object    :    oldCollection )     {", "for    ( Iterator   addedIt    =    added . iterator (  )  ;    addedIt . hasNext (  )  ;  )     {", "Object   object 2     =    addedIt . next (  )  ;", "if    ( collectionPersister . getElementType (  )  . isSame ( object ,    object 2  )  )     {", "addedIt . remove (  )  ;", "break ;", "}", "}", "}", "}", "addCollectionChanges ( session ,    collectionChanges ,    added ,    RevisionType . ADD ,    id )  ;", "final   Set < Object >    deleted    =    buildCollectionChangeSet ( oldColl ,    oldCollection )  ;", "if    (  ( newColl    !  =    null )     &  &     ( collectionPersister    !  =    null )  )     {", "for    ( Object   object    :    newCollection )     {", "for    ( Iterator   deletedIt    =    deleted . iterator (  )  ;    deletedIt . hasNext (  )  ;  )     {", "Object   object 2     =    deletedIt . next (  )  ;", "if    ( collectionPersister . getElementType (  )  . isSame ( object ,    object 2  )  )     {", "deletedIt . remove (  )  ;", "break ;", "}", "}", "}", "}", "addCollectionChanges ( session ,    collectionChanges ,    deleted ,    RevisionType . DEL ,    id )  ;", "return   collectionChanges ;", "}", "METHOD_END"], "methodName": ["mapCollectionChanges"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper"}, {"methodBody": ["METHOD_START", "{", "EntityConfiguration   entCfg    =    enversService . getEntitiesConfigurations (  )  . get ( entityName )  ;", "boolean   isRelationAudited    =    true ;", "if    ( entCfg    =  =    null )     {", "entCfg    =    enversService . getEntitiesConfigurations (  )  . getNotVersionEntityConfiguration ( entityName )  ;", "isRelationAudited    =    false ;", "}", "final   Class   entityClass    =    ReflectionTools . loadClass ( entCfg . getEntityClassName (  )  ,    enversService . getClassLoaderService (  )  )  ;", "return   new    . EntityInfo ( entityClass ,    entityName ,    isRelationAudited )  ;", "}", "METHOD_END"], "methodName": ["getEntityInfo"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractToOneMapper"}, {"methodBody": ["METHOD_START", "{", "return   propertyData ;", "}", "METHOD_END"], "methodName": ["getPropertyData"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractToOneMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( isDynamicComponentMap (  )  )     {", "@ SuppressWarnings (  \" unchecked \"  )", "final   Map < String ,    Object >    map    =     (  ( Map < String ,    Object >  )     ( targetObject )  )  ;", "map . put ( propertyData . getBeanName (  )  ,    value )  ;", "} else    {", "AccessController . doPrivileged ( new   PrivilegedAc < Object >  (  )     {", "@ Override", "public   Object   run (  )     {", "final   Setter   setter    =    ReflecTools . getSetter ( targetObject . getClass (  )  ,    propertyData ,    serviceRegistry )  ;", "setter . set ( targetObject ,    value ,    null )  ;", "return   null ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["setPropertyValue"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.AbstractToOneMapper"}, {"methodBody": ["METHOD_START", "{", "return   collectionReferencingPropertyData ;", "}", "METHOD_END"], "methodName": ["getCollectionReferencingPropertyData"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.CommonCollectionMapperData"}, {"methodBody": ["METHOD_START", "{", "return   queryGenerator ;", "}", "METHOD_END"], "methodName": ["getQueryGenerator"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.CommonCollectionMapperData"}, {"methodBody": ["METHOD_START", "{", "return   referencingIdData ;", "}", "METHOD_END"], "methodName": ["getReferencingIdData"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.CommonCollectionMapperData"}, {"methodBody": ["METHOD_START", "{", "return   verEntCfg ;", "}", "METHOD_END"], "methodName": ["getVerEntCfg"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.CommonCollectionMapperData"}, {"methodBody": ["METHOD_START", "{", "return   versionsMiddleEntityName ;", "}", "METHOD_END"], "methodName": ["getVersionsMiddleEntityName"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.CommonCollectionMapperData"}, {"methodBody": ["METHOD_START", "{", "return   componentIndex ;", "}", "METHOD_END"], "methodName": ["getComponentIndex"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleComponentData"}, {"methodBody": ["METHOD_START", "{", "return   componentMapper ;", "}", "METHOD_END"], "methodName": ["getComponentMapper"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleComponentData"}, {"methodBody": ["METHOD_START", "{", "return   auditEntityName ;", "}", "METHOD_END"], "methodName": ["getAuditEntityName"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleIdData"}, {"methodBody": ["METHOD_START", "{", "return   entityName ;", "}", "METHOD_END"], "methodName": ["getEntityName"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleIdData"}, {"methodBody": ["METHOD_START", "{", "return   originalMapper ;", "}", "METHOD_END"], "methodName": ["getOriginalMapper"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleIdData"}, {"methodBody": ["METHOD_START", "{", "return   prefixedMapper ;", "}", "METHOD_END"], "methodName": ["getPrefixedMapper"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleIdData"}, {"methodBody": ["METHOD_START", "{", "return    ( auditEntityName )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isAudited"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.MiddleIdData"}, {"methodBody": ["METHOD_START", "{", "final   EntityPersister   entityPersister    =    versionsReader . getSessionImplementor (  )  . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  ;", "if    ( entityPersister . hasProxy (  )  )     {", "return   versionsReader . getSession (  )  . load ( entityClass ,    p )  ;", "} else    {", "return   versionsReader . getSession (  )  . get ( entityClass ,    p )  ;", "}", "}", "METHOD_END"], "methodName": ["createNotAuditedEntityReference"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.OneToOnePrimaryKeyJoinColumnMapper"}, {"methodBody": ["METHOD_START", "{", "final   EntityPersister   persister    =    versionsReader . getSessionImplementor (  )  . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  ;", "return   persister . createProxy (  (  ( Serializable )     ( entityId )  )  ,    new   ToOneDelegateSessionImplementor ( versionsReader ,    entityClass ,    entityId ,    revision ,    removed ,    enversService )  )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.ToOneEntityLoader"}, {"methodBody": ["METHOD_START", "{", "final   EntityPersister   persister    =    versionsReader . getSessionImplementor (  )  . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  ;", "if    ( persister . hasProxy (  )  )     {", "return    . createProxy ( versionsReader ,    entityClass ,    entityName ,    entityId ,    revision ,    removed ,    enversService )  ;", "}", "return    . loadImmediate ( versionsReader ,    entityClass ,    entityName ,    entityId ,    revision ,    removed ,    enversService )  ;", "}", "METHOD_END"], "methodName": ["createProxyOrLoadImmediate"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.ToOneEntityLoader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( enversService . getEntitiesConfigurations (  )  . getNotVersionEntityConfiguration ( entityName )  )     =  =    null )     {", "return   versionsReader . find ( entityClass ,    entityName ,    entityId ,    revision ,    removed )  ;", "} else    {", "return   versionsReader . getSessionImplementor (  )  . immediateLoad ( entityName ,     (  ( Serializable )     ( entityId )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadImmediate"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.ToOneEntityLoader"}, {"methodBody": ["METHOD_START", "{", "delegate . addIdsEqualToQuery ( parameters ,    prefix 1  ,    delegate ,    prefix 2  )  ;", "}", "METHOD_END"], "methodName": ["addMiddleEqualToQuery"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.ToOneIdMapper"}, {"methodBody": ["METHOD_START", "{", "return   nonInsertableFake    ?    false    :     !  ( EntityTools . entitiesEqual ( session ,    referencedEntityName ,    newObj ,    oldObj )  )  ;", "}", "METHOD_END"], "methodName": ["checkModified"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.ToOneIdMapper"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["mapToObjectFromFullMap"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.component.MiddleDummyComponentMapper"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Map . Entry < PropertyData ,    PropertyMapper >    entry    :    compositeMapper . getProperties (  )  . entrySet (  )  )     {", "final   String   propertyName    =    entry . getKey (  )  . getName (  )  ;", "final   PropertyMapper   nestedMapper    =    entry . getValue (  )  ;", "if    ( nestedMapper   instanceof   CompositeMapperBuilder )     {", "addMiddleEqualToQuery (  (  ( CompositeMapperBuilder )     ( nestedMapper )  )  ,    parameters ,    idPrefix 1  ,    prefix 1  ,    idPrefix 2  ,    prefix 2  )  ;", "} else", "if    ( nestedMapper   instanceof   ToOneIdMapper )     {", "(  ( ToOneIdMapper )     ( nestedMapper )  )  . addMiddleEqualToQuery ( parameters ,    idPrefix 1  ,    prefix 1  ,    idPrefix 2  ,    prefix 2  )  ;", "} else    {", "parameters . addWhereOrNullRestriction (  (  ( prefix 1     +     '  .  '  )     +    propertyName )  ,    false ,     \"  =  \"  ,     (  ( prefix 2     +     '  .  '  )     +    propertyName )  ,    false )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addMiddleEqualToQuery"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.component.MiddleEmbeddableComponentMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( dataObject    !  =    null )     {", "return   dataObject ;", "}", "return   AccessController . doPrivileged ( new   PrivilegedAction < Object >  (  )     {", "@ Override", "public   Object   run (  )     {", "try    {", "return   ReflectHelper . getDefaultConstructor ( Class )  . newInstance (  )  ;", "}    catch    ( InstantiationException   e )     {", "throw   new   AuditException ( e )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   new   AuditException ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   AuditException ( e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getComponentInstance"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.component.MiddleEmbeddableComponentMapper"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getProperties (  )  ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.component.MiddleEmbeddableComponentMapper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( delegate )     =  =    null )     {", "delegate    =    initializor . initialize (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkInit"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.lazy.proxy.CollectionProxy"}, {"methodBody": ["METHOD_START", "{", "if    (  ( delegate )     =  =    null )     {", "delegate    =    initializor . initialize (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkInit"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.lazy.proxy.MapProxy"}, {"methodBody": ["METHOD_START", "{", "if    (  ( delegate )     =  =    null )     {", "delegate    =    initializor . initialize (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkInit"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.lazy.proxy.SortedMapProxy"}, {"methodBody": ["METHOD_START", "{", "return   revisionTypeInId    ?     (  ( verEntCfg . getOriginalIdPropName (  )  )     +     \"  .  \"  )     +     ( verEntCfg . getRevisionTypePropName (  )  )     :    verEntCfg . getRevisionTypePropName (  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionTypePath"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.AbstractRelationQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "return   queryToString ( query ,    Collections . emptyMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["queryToString"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.AbstractRelationQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   sb    =    new   StringBuilder (  )  ;", "build ( sb ,    aramValues )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["queryToString"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.AbstractRelationQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   QueryBuilder   qb    =    new   QueryBuilder ( versionsReferencedEntityName ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS )  ;", "qb . addProjection ( null ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    null ,    false )  ;", "if    ( multipleIdMapperKey )     {", "final   IdMapper    =    getMultipleIdPrefixedMapper (  )  ;", "addNamedIdEqualsToQuery ( qb . getRootParameters (  )  ,    null ,    referencingIdData . getPrefixedMapper (  )  ,    true )  ;", "} else    {", "referencingIdData . getPrefixedMapper (  )  . addNamedIdEqualsToQuery ( qb . getRootParameters (  )  ,    null ,    true )  ;", "}", "return   qb ;", "}", "METHOD_END"], "methodName": ["commonQueryPart"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneAuditEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   disjoint    =    remQb . getRootParameters (  )  . addSubParameters (  \" or \"  )  ;", "final   Parameters   valid    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   Parameters   removed    =    disjoint . addSubParameters (  \" and \"  )  ;", "createValidDataRestrictions ( globalCfg ,    auditStrategy ,    referencedIdData ,    remQb ,    valid )  ;", "removed . addWhereWithNamedParam ( verEntCfg . getRevisionNumberPath (  )  ,    false ,     \"  =  \"  ,    Constants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam ( getRevisionTypePath (  )  ,    false ,     \"  =  \"  ,    Constants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidAndRemovedDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneAuditEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "auditStrategy . addAtRevisionRestriction ( globalCfg ,    qb ,    rootParameters ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencedIdData ,    revisionPropertyPath ,    verEntCfg . getOriginalIdPropName (  )  ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    true )  ;", "rootParameters . addWhereWithNamedParam ( getRevisionTypePath (  )  ,    false ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneAuditEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   prefix    =     (  (  ( verEntCfg . getOriginalIdPropName (  )  )     +     \"  .  \"  )     +     ( mappedBy )  )     +     \"  .  \"  ;", "return   referencingIdData . getOriginalMapper (  )  . prefixMappedProperties ( prefix )  ;", "}", "METHOD_END"], "methodName": ["getMultipleIdPrefixedMapper"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneAuditEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   QueryBuilder   qb    =    new   QueryBuilder ( versionsMiddleEntityName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS )  ;", "qb . addProjection ( null ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS ,    null ,    false )  ;", "referencingIdData . getPrefixedMapper (  )  . addNamedIdEqualsToQuery ( qb . getRootParameters (  )  ,    verEntCfg . getOriginalIdPropName (  )  ,    true )  ;", "return   qb ;", "}", "METHOD_END"], "methodName": ["commonQueryPart"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   disjoint    =    remQb . getRootParameters (  )  . addSubParameters (  \" or \"  )  ;", "final   Parameters   valid    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   Parameters   removed    =    disjoint . addSubParameters (  \" and \"  )  ;", "createValidDataRestrictions ( auditStrategy ,    versionsMiddlName ,    remQb ,    valid ,    false ,    componentData )  ;", "removed . addWhereWithNamedParam ( verEntCfg . getRevisionNumberPath (  )  ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam ( getRevisionTypePath (  )  ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidAndRemovedDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "auditStrategy . addAssociationAtRevisionRestriction ( qb ,    rootParameters ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencingIdData ,    versionsMiddlName ,    eeOriginalIdPropertyPath ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS ,    inclusive ,    componentData )  ;", "rootParameters . addWhereWithNamedParam ( getRevisionTypePath (  )  ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.OneEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "final   QueryBuilder   qb    =    new   QueryBuilder ( versionsMiddlName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS )  ;", "qb . addFrom ( referencedIdData . getAuditEntityName (  )  ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    false )  ;", "qb . addFrom ( indexIdData . getAuditEntityName (  )  ,    QueryConstants . INDEX _ ENTITY _ ALIAS ,    false )  ;", "qb . addProjection (  \" new   list \"  ,     (  (  (  (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  ,     \"  )     +     ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )  )     +     \"  ,     \"  )     +     ( QueryConstants . INDEX _ ENTITY _ ALIAS )  )  ,    null ,    false )  ;", "final   Parameters   rootParameters    =    qb . getRootParameters (  )  ;", "referencedIdData . getPrefixedMapper (  )  . addIdsEqualToQuery ( rootParameters ,    eeOriginalIdPropertyPath ,    referencedIdData . getOriginalMapper (  )  ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName )  )  ;", "indexIdData . getPrefixedMapper (  )  . addIdsEqualToQuery ( rootParameters ,    eeOriginalIdPropertyPath ,    indexIdData . getOriginalMapper (  )  ,     (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName )  )  ;", "referencingIdData . getPrefixedMapper (  )  . addNamedIdEqualsToQuery ( rootParameters ,    originalIdPropertyName ,    true )  ;", "return   qb ;", "}", "METHOD_END"], "methodName": ["commonQueryPart"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.ThreeEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   disjoint    =    remQb . getRootParameters (  )  . addSubParameters (  \" or \"  )  ;", "final   Parameters   valid    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   Parameters   removed    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   revisionTypePropName    =    getRevisionTypePath (  )  ;", "createValidDataRestrictions ( globalCfg ,    auditStrategy ,    referencedIdData ,    versionsMiddlName ,    remQb ,    valid ,    false ,    indexIdData ,    componentData )  ;", "removed . addWhereWithNamedParam ( revisionPropertyPath ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,    false ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,    false ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam ( revisionTypePropName ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidAndRemovedDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.ThreeEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "final   String   revisionTypePropName    =    getRevisionTypePath (  )  ;", "auditStrategy . addEntityAtRevisionRestriction ( globalCfg ,    qb ,    rootParameters ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +     ( verEntCfg . getRevisionEndFieldName (  )  )  )  ,    false ,    referencedIdData ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    true )  ;", "auditStrategy . addEntityAtRevisionRestriction ( globalCfg ,    qb ,    rootParameters ,     (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,     (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +     ( verEntCfg . getRevisionEndFieldName (  )  )  )  ,    false ,    indexIdData ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . INDEX _ ENTITY _ ALIAS ,    QueryConstants . INDEX _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    true )  ;", "auditStrategy . addAssociationAtRevisionRestriction ( qb ,    rootParameters ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencingIdData ,    versionsMiddlName ,    eeOriginalIdPropertyPath ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS ,    inclusive ,    componentData )  ;", "rootParameters . addWhereWithNamedParam ( revisionTypePropName ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "rootParameters . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "rootParameters . addWhereWithNamedParam (  (  (  ( QueryConstants . INDEX _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.ThreeEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "final   QueryBuilder   qb    =    new   QueryBuilder ( versionsMiddleName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS )  ;", "qb . addFrom ( referencedIdData . getName (  )  ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    false )  ;", "qb . addProjection (  \" new   list \"  ,     (  (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  ,     \"  )     +     ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )  )  ,    null ,    false )  ;", "final   Parameters   rootParameters    =    qb . getRootParameters (  )  ;", "referencedIdData . getPrefixedMapper (  )  . addIdsEqualToQuery ( rootParameters ,    eeOriginalIdPropertyPath ,    referencedIdData . getOriginalMapper (  )  ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS )  ;", "referencingIdData . getPrefixedMapper (  )  . addNamedIdEqualsToQuery ( rootParameters ,    originalIdPropertyName ,    true )  ;", "return   qb ;", "}", "METHOD_END"], "methodName": ["commonQueryPart"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityOneAuditedQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   disjoint    =    remQb . getRootParameters (  )  . addSubParameters (  \" or \"  )  ;", "final   Parameters   valid    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   Parameters   removed    =    disjoint . addSubParameters (  \" and \"  )  ;", "createValidDataRestrictions ( auditStrategy ,    versionsMiddleName ,    remQb ,    valid ,    componentData )  ;", "removed . addWhereWithNamedParam ( verEntCfg . getRevisionNumberPath (  )  ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam ( getRevisionTypePath (  )  ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidAndRemovedDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityOneAuditedQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "auditStrategy . addAssociationAtRevisionRestriction ( qb ,    rootParameters ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencingIdData ,    versionsMiddleName ,    eeOriginalIdPropertyPath ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS ,    true ,    componentData )  ;", "rootParameters . addWhereWithNamedParam ( getRevisionTypePath (  )  ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityOneAuditedQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "QueryBuilder   qb    =    new   QueryBuilder ( versionsMiddleName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS )  ;", "qb . addFrom ( referencedIdData . getAuditName (  )  ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    false )  ;", "qb . addProjection (  \" new   list \"  ,     (  (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  ,     \"  )     +     ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )  )  ,    null ,    false )  ;", "final   Parameters   rootParameters    =    qb . getRootParameters (  )  ;", "referencedIdData . getPrefixedMapper (  )  . addIdsEqualToQuery ( rootParameters ,    eeOriginalIdPropertyPath ,    referencedIdData . getOriginalMapper (  )  ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName )  )  ;", "referencingIdData . getPrefixedMapper (  )  . addNamedIdEqualsToQuery ( rootParameters ,    originalIdPropertyName ,    true )  ;", "return   qb ;", "}", "METHOD_END"], "methodName": ["commonQueryPart"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   disjoint    =    remQb . getRootParameters (  )  . addSubParameters (  \" or \"  )  ;", "final   Parameters   valid    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   Parameters   removed    =    disjoint . addSubParameters (  \" and \"  )  ;", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   revisionTypePropName    =    getRevisionTypePath (  )  ;", "createValidDataRestrictions ( globalCfg ,    auditStrategy ,    referencedIdData ,    versionsMiddleName ,    remQb ,    valid ,    false ,    componentData )  ;", "removed . addWhereWithNamedParam ( revisionPropertyPath ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,    false ,     \"  =  \"  ,    QueryConstants . REVISION _ PARAMETER )  ;", "removed . addWhereWithNamedParam ( revisionTypePropName ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "removed . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidAndRemovedDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "final   String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "final   String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "final   String   eeOriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    originalIdPropertyName ;", "final   String   revisionTypePropName    =    getRevisionTypePath (  )  ;", "auditStrategy . addAtRevisionRestriction ( globalCfg ,    qb ,    rootParameters ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionPropertyPath )  ,     (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +     ( verEntCfg . getRevisionEndFieldName (  )  )  )  ,    false ,    referencedIdData ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    true )  ;", "auditStrategy . addAssociationAtRevisionRestriction ( qb ,    rootParameters ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencingIdData ,    versionsMiddleName ,    eeOriginalIdPropertyPath ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS ,    inclusive ,    componentData )  ;", "rootParameters . addWhereWithNamedParam ( revisionTypePropName ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "rootParameters . addWhereWithNamedParam (  (  (  ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )     +     \"  .  \"  )     +    revisionTypePropName )  ,    false ,     \"  !  =  \"  ,    QueryConstants . DEL _ REVISION _ TYPE _ PARAMETER )  ;", "}", "METHOD_END"], "methodName": ["createValidDataRestrictions"], "fileName": "org.hibernate.envers.internal.entities.mapper.relation.query.TwoEntityQueryGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( session . isOpen (  )  )  )     {", "throw   new   IllegalStException (  \" The   associd   entity   manager   is   closed !  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkSession"], "fileName": "org.hibernate.envers.internal.reader.AuditReaderImpl"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( auditReaderImplementor . getSession (  )  . isOpen (  )  )  )     {", "throw   new   IllegalStateException (  \" The   associated   entity   manager   is   closed !  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkSession"], "fileName": "org.hibernate.envers.internal.reader.CrossTypeRevisionChangesReaderImpl"}, {"methodBody": ["METHOD_START", "{", "return   cache . containsKey ( Triple . make ( entityName ,    revision ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "return   entityNameCache . containsKey ( Triple . make ( id ,    revision ,    entity )  )  ;", "}", "METHOD_END"], "methodName": ["containsEntityName"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "FirstLevelCache . LOG . debugf (  \" Resolving   object   from   First   Level   Cache :    EntityName :  % s    -    primaryKey :  % s    -    revision :  % s \"  ,    entityName ,    id ,    revision )  ;", "return   cache . get ( Triple . make ( entityName ,    revision ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "FirstLevelCache . LOG . debugf (  \" Trying   to   resolve   entityName   from   First   Level   Cache :     -    primaryKey :  % s    -    revision :  % s    -    entity :  % s \"  ,    id ,    revision ,    entity )  ;", "return   entityNameCache . get ( Triple . make ( id ,    revision ,    entity )  )  ;", "}", "METHOD_END"], "methodName": ["getFromEntityNameCache"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "FirstLevelCache . LOG . debugf (  \" Caching   entity   on   First   Level   Cache :        -    primaryKey :  % s    -    revision :  % s    -    entityName :  % s \"  ,    id ,    revision ,    entityName )  ;", "cache . put ( Triple . make ( entityName ,    revision ,    id )  ,    entity )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "FirstLevelCache . LOG . debugf (  \" Caching   entityName   on   First   Level   Cache :        -    primaryKey :  % s    -    revision :  % s    -    entity :  % s    -  >    entityName :  % s \"  ,    id ,    revision ,    entity . getClass (  )  . getName (  )  ,    entityName )  ;", "entityNameCache . put ( Triple . make ( id ,    revision ,    entity )  ,    entityName )  ;", "}", "METHOD_END"], "methodName": ["putOnEntityNameCache"], "fileName": "org.hibernate.envers.internal.reader.FirstLevelCache"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( listenerClass . equals ( RevisionListener . class )  )  )     {", "return   serviceRegistry . getService ( ManagedBeanRegistry . class )  . getBean ( listenerClass )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["resolveRevisionListenerBean"], "fileName": "org.hibernate.envers.internal.revisioninfo.DefaultRevisionInfoGenerator"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Set < String >  )     ( modifiedEntityNamesGetter . get ( revisionEntity )  )  )  ;", "}", "METHOD_END"], "methodName": ["getModifiedEntityNames"], "fileName": "org.hibernate.envers.internal.revisioninfo.ModifiedEntityNamesReader"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Number )     ( revisionIdGetter . get ( revision )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionNumber"], "fileName": "org.hibernate.envers.internal.revisioninfo.RevisionInfoNumberReader"}, {"methodBody": ["METHOD_START", "{", "return   session . createQuery ( String . format ( RevisionInfoQueryCreator . REVISION _ DATE _ QUERY ,    revisionInfoTimestampName ,    revisionInfoEntityName ,    revisionInfoIdName )  )  . setParameter ( RevisionInfoQueryCreator . REVISION _ DATE _ QUERY _ PARAMETER ,    revision )  ;", "}", "METHOD_END"], "methodName": ["getRevisionDateQuery"], "fileName": "org.hibernate.envers.internal.revisioninfo.RevisionInfoQueryCreator"}, {"methodBody": ["METHOD_START", "{", "return   session . createQuery ( String . format ( RevisionInfoQueryCreator . REVISION _ NUMBER _ FOR _ DATE _ QUERY ,    revisionInfoIdName ,    revisionInfoEntityName ,    revisionInfoTimestampName )  )  . setParameter ( RevisionInfoQueryCreator . REVISION _ NUMBER _ FOR _ DATE _ QUERY _ PARAMETER ,     ( timestampAsDate    ?    date    :    date . getTime (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionNumberForDateQuery"], "fileName": "org.hibernate.envers.internal.revisioninfo.RevisionInfoQueryCreator"}, {"methodBody": ["METHOD_START", "{", "return   session . createQuery ( String . format ( RevisionInfoQueryCreator . REVISIONS _ QUERY ,    revisionInfoEntityName ,    revisionInfoIdName )  )  . setParameter ( RevisionInfoQueryCreator . REVISIONS _ QUERY _ PARAMETER ,    revisions )  ;", "}", "METHOD_END"], "methodName": ["getRevisionsQuery"], "fileName": "org.hibernate.envers.internal.revisioninfo.RevisionInfoQueryCreator"}, {"methodBody": ["METHOD_START", "{", "if    ( vwu . containsWork (  )  )     {", "final   Object   entityId    =    vwu . getEntityId (  )  ;", "if    ( entityId    =  =    null )     {", "workUnits . offer ( vwu )  ;", "} else    {", "final   String   entityName    =    vwu . getEntityName (  )  ;", "final   Pair < String ,    Object >    usedIdsKey    =    Pair . make ( entityName ,    entityId )  ;", "if    ( usedIds . containsKey ( usedIdsKey )  )     {", "final   WorkUnit   other    =    usedIds . get ( usedIdsKey )  ;", "final   WorkUnit   result    =    vwu . dispatch ( other )  ;", "if    ( result    !  =    other )     {", "removeWorkUnit ( other )  ;", "if    ( result    !  =    null )     {", "usedIds . put ( usedIdsKey ,    result )  ;", "workUnits . offer ( result )  ;", "}", "}", "} else    {", "usedIds . put ( usedIdsKey ,    vwu )  ;", "workUnits . offer ( vwu )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addWorkUnit"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "final   Pair < String ,    Object >    key    =    new   Pair <  >  ( entityName ,    id )  ;", "if    ( entityStateCache . containsKey ( key )  )     {", "throw   new   Exception (  (  (  (  (  \" The   entity    [  \"     +    entityName )     +     \"  ]    with   id    [  \"  )     +    id )     +     \"  ]    is   already   cached .  \"  )  )  ;", "}", "entityStateCache . put ( key ,    snapshot )  ;", "}", "METHOD_END"], "methodName": ["cacheEntityState"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "final   Object   currentRevisionData    =    getCurrentRevisionData ( session ,    true )  ;", "WorkUnit   vwu ;", "while    (  ( vwu    =    undoQueue . poll (  )  )     !  =    null )     {", "vwu . undo ( session )  ;", "}", "while    (  ( vwu    =    workUnits . poll (  )  )     !  =    null )     {", "vwu . perform ( session ,    revisionData )  ;", "entityChangeNotifier . entityChanged ( session ,    currentRevisionData ,    vwu )  ;", "}", "}", "METHOD_END"], "methodName": ["executeInSession"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "final   Pair < String ,    Object >    key    =    new   Pair <  >  ( entityName ,    id )  ;", "final   Object [  ]    entityState    =    entityStateCache . get ( key )  ;", "if    ( entityState    !  =    null )     {", "entityStateCache . remove ( key )  ;", "}", "return   entityState ;", "}", "METHOD_END"], "methodName": ["getCachedEntityState"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "if    (  ( revisata )     =  =    null )     {", "revisata    =    revisnfoGenerator . generate (  )  ;", "}", "if    (  (  !  ( sesscontains ( revisata )  )  )     &  &    persist )     {", "revisnfoGenerator . saveRevisata ( sess   revisata )  ;", "}", "return   revisata ;", "}", "METHOD_END"], "methodName": ["getCurrentRevisionData"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "workUnits . remove ( vwu )  ;", "if    ( vwu . isPerformed (  )  )     {", "undoQueue . offer ( vwu )  ;", "}", "}", "METHOD_END"], "methodName": ["removeWorkUnit"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcess"}, {"methodBody": ["METHOD_START", "{", "final   Transaction   transaction    =    session . accessTransaction (  )  ;", "auditProcess    =    auditProcesses . get ( transaction )  ;", "if    ( auditProcess    =  =    null )     {", "auditProcess    =    new    ( revisionInfoGenerator ,    session )  ;", "auditProcesses . put ( transaction ,    auditProcess )  ;", "session . getActionQueue (  )  . registerProcess ( new   BeforeTransactionCompletionProcess (  )     {", "public   void   doBeforeTransactionCompletion ( SessionImplementor   session )     {", "final      process    =    auditProcesses . get ( transaction )  ;", "if    ( process    !  =    null )     {", "process . doBeforeTransactionCompletion ( session )  ;", "}", "}", "}  )  ;", "session . getActionQueue (  )  . registerProcess ( new   AfterTransactionCompletionProcess (  )     {", "public   void   doAfterTransactionCompletion ( boolean   success ,    SharedSessionContractImplementor   session )     {", "auditProcesses . remove ( transaction )  ;", "}", "}  )  ;", "}", "return   auditProcess ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.internal.synchronization.AuditProcessManager"}, {"methodBody": ["METHOD_START", "{", "Serializable   entityId    =    vwu . getEntityId (  )  ;", "if    ( entityId   instanceof   PersistentCollectionChangeWorkUnit . PersistentCollectionChangeWorkUnitId )     {", "entityId    =     (  ( PersistentCollectionChangeWorkUnit . PersistentCollectionChangeWorkUnitId )     ( entityId )  )  . getOwnerId (  )  ;", "}", "final   Class   entityClass    =    EntityTools . getEntityClass ( sessionImplementor ,    vwu . getEntityName (  )  )  ;", "revisionInfoGenerator . ed ( entityClass ,    vwu . getEntityName (  )  ,    entityId ,    vwu . getRevisionType (  )  ,    currentRevisionData )  ;", "}", "METHOD_END"], "methodName": ["entityChanged"], "fileName": "org.hibernate.envers.internal.synchronization.EntityChangeNotifier"}, {"methodBody": ["METHOD_START", "{", "(  ( EventSource )     ( session )  )  . getActionQueue (  )  . registerProcess ( new   AfterTransactionCompletionProcess (  )     {", "public   void   doAfterTransactionCompletion ( boolean   success ,    SharedontractImplementor   sessionImplementor )     {", "if    (  !  ( sessionImplementor . isClosed (  )  )  )     {", "try    {", "(  ( Session )     ( sessionImplementor )  )  . evict ( data )  ;", "}    catch    ( HibernateException   ignore )     {", "}", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["scheduleAuditDataRemoval"], "fileName": "org.hibernate.envers.internal.synchronization.SessionCacheCleaner"}, {"methodBody": ["METHOD_START", "{", "final   AuditEntitiesConfiguration   entitiesCfg    =    enversService . getAuditEntitiesConfiguration (  )  ;", "final   Map < String ,    Object >    originalId    =    new   HashMap <  >  (  )  ;", "originalId . put ( entitiesCfg . getRevisionFieldName (  )  ,    revision )  ;", "enversService . getEntitiesConfigurations (  )  . get ( getEntityName (  )  )  . getIdMapper (  )  . mapToMapFromId ( originalId ,    id )  ;", "data . put ( entitiesCfg . getRevisionTypePropName (  )  ,    revisionType )  ;", "data . put ( entitiesCfg . getOriginalIdPropName (  )  ,    originalId )  ;", "}", "METHOD_END"], "methodName": ["fillDataWithId"], "fileName": "org.hibernate.envers.internal.synchronization.work.AbstractAuditWorkUnit"}, {"methodBody": ["METHOD_START", "{", "this . performedData    =    performedData ;", "}", "METHOD_END"], "methodName": ["setPerformed"], "fileName": "org.hibernate.envers.internal.synchronization.work.AbstractAuditWorkUnit"}, {"methodBody": ["METHOD_START", "{", "if    ( isPerformed (  )  )     {", "session . delete ( Service . getAuditEntitiesConfiguration (  )  . getAuditEntityName ( getEntityName (  )  )  ,    performedData )  ;", "session . flush (  )  ;", "}", "}", "METHOD_END"], "methodName": ["undo"], "fileName": "org.hibernate.envers.internal.synchronization.work.AbstractAuditWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.hibernate.envers.internal.synchronization.work.AddWorkUnit"}, {"methodBody": ["METHOD_START", "{", "final   ExtendedPropertyMapper   mapper    =    enversService . getEntitiesConfigurations (  )  . get ( getEntityName (  )  )  . getPropertyMapper (  )  ;", "for    ( PropertyData   propertyData    :    mapper . getProperties (  )  . keySet (  )  )     {", "if    (  ( propertyData . isUsingModifiedFlag (  )  )     &  &     (  !  ( propertyData . isSynthetic (  )  )  )  )     {", "Boolean   lhsValue    =     (  ( Boolean )     ( lhs . get ( propertyData . getModifiedFlagPropertyName (  )  )  )  )  ;", "if    (  ( lhsValue    !  =    null )     &  &    lhsValue )     {", "Boolean   rhsValue    =     (  ( Boolean )     ( rhs . get ( propertyData . getModifiedFlagPropertyName (  )  )  )  )  ;", "if    (  ( rhsValue    =  =    null )     |  |     (  ! rhsValue )  )     {", "rhs . put ( propertyData . getModifiedFlagPropertyName (  )  ,    true )  ;", "}", "}", "}", "}", "return   rhs ;", "}", "METHOD_END"], "methodName": ["mergeModifiedFlags"], "fileName": "org.hibernate.envers.internal.synchronization.work.AddWorkUnit"}, {"methodBody": ["METHOD_START", "{", "enversService . getEntitiesConfigurations (  )  . get ( getEntityName (  )  )  . getPropertyMapper (  )  . mapModifiedFlagsToMapForCollectionChange ( collectionPropertyName ,    data )  ;", "}", "METHOD_END"], "methodName": ["mergeCollectionModifiedData"], "fileName": "org.hibernate.envers.internal.synchronization.work.CollectionChangeWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   fakeRelationChanges ;", "}", "METHOD_END"], "methodName": ["getFakeRelationChanges"], "fileName": "org.hibernate.envers.internal.synchronization.work.FakeBidirectionalRelationWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   nestedWorkUnit ;", "}", "METHOD_END"], "methodName": ["getNestedWorkUnit"], "fileName": "org.hibernate.envers.internal.synchronization.work.FakeBidirectionalRelationWorkUnit"}, {"methodBody": ["METHOD_START", "{", "final   AuditWorkUnit   nestedMerged    =    nestedSecond . dispatch ( nestedFirst )  ;", "return   new    ( frwu ,    nestedMerged )  ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "org.hibernate.envers.internal.synchronization.work.FakeBidirectionalRelationWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.internal.synchronization.work.ModWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   collectionChanges ;", "}", "METHOD_END"], "methodName": ["getCollectionChanges"], "fileName": "org.hibernate.envers.internal.synchronization.work.PersistentCollectionChangeWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   persistentCollectionChangeData . getData (  )  . get ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getOriginalId"], "fileName": "org.hibernate.envers.internal.synchronization.work.PersistentCollectionChangeWorkUnit"}, {"methodBody": ["METHOD_START", "{", "return   referencingPropertyName ;", "}", "METHOD_END"], "methodName": ["getReferencingPropertyName"], "fileName": "org.hibernate.envers.internal.synchronization.work.PersistentCollectionChangeWorkUnit"}, {"methodBody": ["METHOD_START", "{", "if    ( o    =  =    null )     {", "throw   new   IllegalException (  ( paramName    +     \"    cannot   be   null .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkNotNull"], "fileName": "org.hibernate.envers.internal.tools.ArgumentsTools"}, {"methodBody": ["METHOD_START", "{", "if    (  ( i . longValue (  )  )     <  =     0 L )     {", "throw   new   IllegalException (  ( paramName    +     \"    has   to   be   greater   than    0  .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkPositive"], "fileName": "org.hibernate.envers.internal.tools.ArgumentsTools"}, {"methodBody": ["METHOD_START", "{", "for    ( T   obj    :    array )     {", "if    ( cls . isAssignableFrom ( obj . getClass (  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["arrayIncludesInstanceOf"], "fileName": "org.hibernate.envers.internal.tools.ArraysTools"}, {"methodBody": ["METHOD_START", "{", "if    ( array 1     =  =    null )     {", "return   array 2     =  =    null ;", "}", "if    (  ( array 2     =  =    null )     |  |     (  ( array 1  . length )     !  =     ( array 2  . length )  )  )     {", "return   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( array 1  . length )  ;     +  + i )     {", "if    (  ( array 1  [ i ]  )     !  =    null    ?     !  ( array 1  [ i ]  . equals ( array 2  [ i ]  )  )     :     ( array 2  [ i ]  )     !  =    null )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["arraysEqual"], "fileName": "org.hibernate.envers.internal.tools.ArraysTools"}, {"methodBody": ["METHOD_START", "{", "final   Object [  ]    ret    =    new   Object [ keys . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( keys . length )  ;     +  + i )     {", "ret [ i ]     =    data . get ( keys [ i ]  )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["mapToArray"], "fileName": "org.hibernate.envers.internal.tools.ArraysTools"}, {"methodBody": ["METHOD_START", "{", "final   Session   session    =     (  ( Session )     ( proxy . getHibernateLazyInitializer (  )  . getSession (  )  )  )  ;", "return    (  ( session    !  =    null )     &  &     ( session . isOpen (  )  )  )     &  &     ( session . isConnected (  )  )  ;", "}", "METHOD_END"], "methodName": ["activeProxySession"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "final   Object   id 1     =    EntityTools . getIdentifier ( session ,    entityName ,    obj 1  )  ;", "final   Object   id 2     =    EntityTools . getIdentifier ( session ,    entityName ,    obj 2  )  ;", "return   EqualsHelper . areEqual ( id 1  ,    id 2  )  ;", "}", "METHOD_END"], "methodName": ["entitiesEqual"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "final   EntityPersister   entityPersister    =    sessionImplementor . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  ;", "return   entityPersister . getMappedClass (  )  ;", "}", "METHOD_END"], "methodName": ["getEntityClass"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "if    ( obj    =  =    null )     {", "return   null ;", "}", "if    ( obj   instanceof   HibernateProxy )     {", "final   HibernateProxy   Proxy    =     (  ( HibernateProxy )     ( obj )  )  ;", "return   Proxy . getHibernateLazyInitializer (  )  . getIdentifier (  )  ;", "}", "return   session . getEntityPersister ( entityName ,    obj )  . getIdentifier ( obj ,    session )  ;", "}", "METHOD_END"], "methodName": ["getIdentifier"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "if    ( clazz    =  =    null )     {", "return   null ;", "} else", "if    ( proxy . HibernateProxy . class . isAssignableFrom ( clazz )  )     {", "return    (  ( Class < T >  )     ( clazz . getSuperclass (  )  )  )  ;", "}", "return   clazz ;", "}", "METHOD_END"], "methodName": ["getTargetClassIfProxied"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( proxy . getHibernateLazyInitializer (  )  . isUninitialized (  )  )  )     |  |     ( EntityTools . activeProxySession ( proxy )  )  )     {", "return   proxy . getHibernateLazyInitializer (  )  . getImplementation (  )  ;", "}", "final   SharedSessionContractImplementor   sessionImplementor    =    proxy . getHibernateLazyInitializer (  )  . getSession (  )  ;", "final   Session   tempSession    =     ( sessionImplementor    =  =    null )     ?    sessionFactoryImplementor . openTemporarySession (  )     :    sessionImplementor . getFactory (  )  . openTemporarySession (  )  ;", "try    {", "return   tempSession . get ( proxy . getHibernateLazyInitializer (  )  . getEntityName (  )  ,    proxy . getHibernateLazyInitializer (  )  . getIdentifier (  )  )  ;", "}    finally    {", "tempSession . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTargetFromProxy"], "fileName": "org.hibernate.envers.internal.tools.EntityTools"}, {"methodBody": ["METHOD_START", "{", "return   componentName    +     \"  _  \"  ;", "}", "METHOD_END"], "methodName": ["createComponentPrefix"], "fileName": "org.hibernate.envers.internal.tools.MappingTools"}, {"methodBody": ["METHOD_START", "{", "return   referencePropertyName    +     \"  _  \"  ;", "}", "METHOD_END"], "methodName": ["createToOneRelationPrefix"], "fileName": "org.hibernate.envers.internal.tools.MappingTools"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   ToOne )     {", "return    (  ( ToOne )     ( value )  )  . getReferencedEntityName (  )  ;", "} else", "if    ( value   instanceof   mapping . OneToMany )     {", "return    (  ( mapping . OneToMany )     ( value )  )  . getReferencedEntityName (  )  ;", "} else", "if    ( value   instanceof   mapping . Collection )     {", "return   MappingTools . getReferencedEntityName (  (  ( mapping . Collection )     ( value )  )  . getElement (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getReferencedEntityName"], "fileName": "org.hibernate.envers.internal.tools.MappingTools"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   ManyToOne )     {", "return    (  ( ManyToOne )     ( value )  )  . isIgnoreNotFound (  )  ;", "} else", "if    ( value   instanceof   mapping . OneToMany )     {", "return    (  ( mapping . OneToMany )     ( value )  )  . isIgnoreNotFound (  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["ignoreNotFound"], "fileName": "org.hibernate.envers.internal.tools.MappingTools"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["isSet"], "fileName": "org.hibernate.envers.internal.tools.MutableBoolean"}, {"methodBody": ["METHOD_START", "{", "value    =    true ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.hibernate.envers.internal.tools.MutableBoolean"}, {"methodBody": ["METHOD_START", "{", "value    =    false ;", "}", "METHOD_END"], "methodName": ["unset"], "fileName": "org.hibernate.envers.internal.tools.MutableBoolean"}, {"methodBody": ["METHOD_START", "{", "return   new   MutableInteger ( value )  ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.internal.tools.MutableInteger"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.internal.tools.MutableInteger"}, {"methodBody": ["METHOD_START", "{", "return    ( value )  +  +  ;", "}", "METHOD_END"], "methodName": ["getAndIncrease"], "fileName": "org.hibernate.envers.internal.tools.MutableInteger"}, {"methodBody": ["METHOD_START", "{", "+  +  ( value )  ;", "}", "METHOD_END"], "methodName": ["increase"], "fileName": "org.hibernate.envers.internal.tools.MutableInteger"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.hibernate.envers.internal.tools.MutableInteger"}, {"methodBody": ["METHOD_START", "{", "return   serviceRegistry . getService ( PropertyAccessStrategyResolver . class )  . resolvePropertyAccessStrategy ( cls ,    accessorType ,    null )  ;", "}", "METHOD_END"], "methodName": ["getAccessStrategy"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "final   Pair < Class ,    String >    key    =    Pair . make ( cls ,    propertyName )  ;", "Getter   value    =     . GETTER _ CACHE . get ( key )  ;", "if    ( value    =  =    null )     {", "value    =     . getAccessStrategy ( cls ,    serviceRegistry ,    accessorType )  . buildPropertyAccess ( cls ,    propertyName )  . getGetter (  )  ;", ". GETTER _ CACHE . put ( key ,    value )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getGetter"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "return   ReflectionTools . getGetter ( cls ,    propertyData . getBeanName (  )  ,    propertyData . getAccessType (  )  ,    serviceRegistry )  ;", "}", "METHOD_END"], "methodName": ["getGetter"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "XProperty   property    =    ReflectionTools . getProperty ( clazz ,    propertyName ,     \" field \"  )  ;", "if    ( property    =  =    null )     {", "property    =    ReflectionTools . getProperty ( clazz ,    propertyName ,     \" property \"  )  ;", "}", "return   property ;", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "for    ( XProperty   property    :    clazz . getDeclaredProperties ( accessType )  )     {", "if    ( propertyNamquals ( property . getName (  )  )  )     {", "return   property ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "final   Pair < Class ,    String >    key    =    Pair . make ( cls ,    propertyName )  ;", "Setter   value    =     . SETTER _ CACHE . get ( key )  ;", "if    ( value    =  =    null )     {", "value    =     . getAccessStrategy ( cls ,    serviceRegistry ,    accessorType )  . buildPropertyAccess ( cls ,    propertyName )  . getSetter (  )  ;", ". SETTER _ CACHE . put ( key ,    value )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getSetter"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "return   ReflectionTools . getSetter ( cls ,    propertyData . getBeanName (  )  ,    propertyData . getAccessType (  )  ,    serviceRegistry )  ;", "}", "METHOD_END"], "methodName": ["getSetter"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( classLoaderService    !  =    null )     {", "return   classLoaderService . classForName ( name )  ;", "} else    {", "return    (  ( Class < T >  )     ( Thread . currentThread (  )  . getContextClassLoader (  )  . loadClass ( name )  )  )  ;", "}", "}    catch    ( Excep   e )     {", "throw   new   ClassLoadingExcep (  (  (  \" Unable   to   load   class    [  \"     +    name )     +     \"  ]  \"  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadClass"], "fileName": "org.hibernate.envers.internal.tools.ReflectionTools"}, {"methodBody": ["METHOD_START", "{", "boolean   isFirst    =    true ;", "while    ( contents . hasNext (  )  )     {", "if    (  ! isFirst )     {", "sb . append ( separator )  ;", "}", "sb . append ( contents . next (  )  )  ;", "isFirst    =    false ;", "}", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.hibernate.envers.internal.tools.StringTools"}, {"methodBody": ["METHOD_START", "{", "return    ( fieldName . substring (  0  ,     1  )  . toUpperCase ( Locale . ROOT )  )     +     ( fieldName . substring (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["capitalizeFirst"], "fileName": "org.hibernate.envers.internal.tools.StringTools"}, {"methodBody": ["METHOD_START", "{", "if    ( s    =  =    null )     {", "return   null ;", "}", "final   int   lastDot    =    s . lastIndexOf (  \"  .  \"  )  ;", "if    ( lastDot    =  =     (  -  1  )  )     {", "return   s ;", "} else    {", "return   s . subs (  ( lastDot    +     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getLastComponent"], "fileName": "org.hibernate.envers.internal.tools.StringTools"}, {"methodBody": ["METHOD_START", "{", "return    ( o    =  =    null )     |  |     (  \"  \"  . equals ( o )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.envers.internal.tools.StringTools"}, {"methodBody": ["METHOD_START", "{", "return    ( s    =  =    null )     |  |     (  \"  \"  . equals ( s )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.envers.internal.tools.StringTools"}, {"methodBody": ["METHOD_START", "{", "if    ( collection   instanceof   List )     {", "return    (  ( List < X >  )     ( collection )  )  ;", "} else    {", "List < X >    list    =    new   ArrayList <  >  (  )  ;", "list . addAll ( collection )  ;", "return   list ;", "}", "}", "METHOD_END"], "methodName": ["collectionToList"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "final   List < T >    ret    =    new   ArrayList <  >  (  )  ;", "while    ( iter . hasNext (  )  )     {", "ret . add ( iter . next (  )  )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["iteratorToList"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "while    (  ( iter 1  . hasNext (  )  )     &  &     ( iter 2  . hasNext (  )  )  )     {", "if    (  !  ( iter 1  . next (  )  . equals ( iter 2  . next (  )  )  )  )     {", "return   false ;", "}", "}", "if    (  ( iter 1  . hasNext (  )  )     |  |     ( iter 2  . hasNext (  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["iteratorsContentEqual"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "final   List < Pair < Integer ,    T >  >    ret    =    new   ArrayList <  >  (  )  ;", "final   Iterator < T >    listIter    =    list . iterator (  )  ;", "for    ( int   i    =     0  ;    i    <     ( list . size (  )  )  ;    i +  +  )     {", "ret . add ( Pair . make ( i ,    listIter . next (  )  )  )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["listToIndexElementPairList"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["newHashMap"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "return   new   HashSet <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["newHashSet"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "return   new   LinkedHashMap <  >  (  )  ;", "}", "METHOD_END"], "methodName": ["newLinkedHashMap"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "return   EqualsHelper . areEqual ( obj 1  ,    obj 2  )  ;", "}", "METHOD_END"], "methodName": ["objectsEqual"], "fileName": "org.hibernate.envers.internal.tools.Tools"}, {"methodBody": ["METHOD_START", "{", "return   obj 1  ;", "}", "METHOD_END"], "methodName": ["getFirst"], "fileName": "org.hibernate.envers.internal.tools.Triple"}, {"methodBody": ["METHOD_START", "{", "return   obj 2  ;", "}", "METHOD_END"], "methodName": ["getSecond"], "fileName": "org.hibernate.envers.internal.tools.Triple"}, {"methodBody": ["METHOD_START", "{", "return   obj 3  ;", "}", "METHOD_END"], "methodName": ["getThird"], "fileName": "org.hibernate.envers.internal.tools.Triple"}, {"methodBody": ["METHOD_START", "{", "return   new   Triple <  >  ( obj 1  ,    obj 2  ,    obj 3  )  ;", "}", "METHOD_END"], "methodName": ["make"], "fileName": "org.hibernate.envers.internal.tools.Triple"}, {"methodBody": ["METHOD_START", "{", "final   List < V >    values    =    definer . getValues (  )  ;", "final   Map < R ,    Vertex < R >  >    vertices    =    new   HashMap <  >  (  )  ;", "for    ( V   v    :    values )     {", "final   R   rep    =    definer . getRepresentation ( v )  ;", "vertices . put ( rep ,    new   Vertex <  >  ( rep )  )  ;", "}", "for    ( V   v    :    values )     {", "for    ( V   vn    :    definer . getNeighbours ( v )  )     {", "vertices . get ( definer . getRepresentation ( v )  )  . addNeighbour ( vertices . get ( definer . getRepresentation ( vn )  )  )  ;", "}", "}", "final   List < R >    sortedReps    =    new    < R >  (  )  . sort ( vertices . values (  )  )  ;", "final   List < V >    sortedValues    =    new   ArrayList <  >  ( sortedReps . size (  )  )  ;", "for    ( R   rep    :    sortedReps )     {", "sortedValues . add ( definer . getValue ( rep )  )  ;", "}", "return   sortedValues ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "org.hibernate.envers.internal.tools.graph.GraphTopologicalSort"}, {"methodBody": ["METHOD_START", "{", "if    (  ( v . getStartTime (  )  )     !  =     0  )     {", "return ;", "}", "v . setStartTime (  (  ( time )  +  +  )  )  ;", "for    ( Vertex < R >    n    :    v . getNeighbours (  )  )     {", "process ( n )  ;", "}", "v . setEndTime (  (  ( time )  +  +  )  )  ;", "sed . add ( v . getRepresentation (  )  )  ;", "}", "METHOD_END"], "methodName": ["process"], "fileName": "org.hibernate.envers.internal.tools.graph.TopologicalSort"}, {"methodBody": ["METHOD_START", "{", "sorted    =    new   ArrayList <  >  ( vertices . size (  )  )  ;", "time    =     1  ;", "for    ( Vertex < R >    v    :    vertices )     {", "if    (  ( v . getEndTime (  )  )     =  =     0  )     {", "process ( v )  ;", "}", "}", "Collections . ree ( sorted )  ;", "return   sorted ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "org.hibernate.envers.internal.tools.graph.TopologicalSort"}, {"methodBody": ["METHOD_START", "{", "neighbours . add ( n )  ;", "}", "METHOD_END"], "methodName": ["addNeighbour"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "return   neighbours ;", "}", "METHOD_END"], "methodName": ["getNeighbours"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "return   representation ;", "}", "METHOD_END"], "methodName": ["getRepresentation"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "this . endTime    =    endTime ;", "}", "METHOD_END"], "methodName": ["setEndTime"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "this . startTime    =    startTime ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.hibernate.envers.internal.tools.graph.Vertex"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   newParams    =    new   Parameters ( alias ,    Parameters . AND ,    queryParamCounter )  ;", "negatedParameters . add ( newParams )  ;", "return   newParams ;", "}", "METHOD_END"], "methodName": ["addNegatedParameters"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere ( propertyName ,    addAlias ,     \" is   not \"  ,     \" null \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addNotNullRestriction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere ( alias ,    propertyName ,     \" is   not \"  ,    null ,     \" null \"  )  ;", "}", "METHOD_END"], "methodName": ["addNotNullRestriction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere ( propertyName ,    addAlias ,     \" is \"  ,     \" null \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addNullRestriction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere ( alias ,    propertyName ,     \" is \"  ,    null ,     \" null \"  )  ;", "}", "METHOD_END"], "methodName": ["addNullRestriction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "if    ( connective . equals ( newConnective )  )     {", "return   this ;", "} else    {", "final      newParams    =    new    ( alias ,    newConnective ,    queryParamCounter )  ;", "sub . add ( newParams )  ;", "return   newParams ;", "}", "}", "METHOD_END"], "methodName": ["addSubParameters"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere (  ( addAliasLeft    ?    alias    :    null )  ,    left ,    op ,     ( addAliasRight    ?    alias    :    null )  ,    right )  ;", "}", "METHOD_END"], "methodName": ["addWhere"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhere (  ( addAlias    ?    alias    :    null )  ,    left ,    op ,    right )  ;", "}", "METHOD_END"], "methodName": ["addWhere"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   expression    =    new   StringBuilder (  )  ;", "if    ( aliasLeft    !  =    null )     {", "expression . append ( aliasLeft )  . append (  \"  .  \"  )  ;", "}", "expression . append ( left )  ;", "expression . append (  \"     \"  )  . append ( op )  . append (  \"     \"  )  ;", "if    ( aliasRight    !  =    null )     {", "expression . append ( aliasRight )  . append (  \"  .  \"  )  ;", "}", "expression . append ( right )  ;", "expressions . add ( expression . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWhere"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   expression    =    new   StringBuilder (  )  ;", "if    ( leftAlias    !  =    null )     {", "expression . append ( leftAlias )  . append (  \"  .  \"  )  ;", "}", "expression . append ( left )  ;", "expression . append (  \"     \"  )  . append ( op )  . append (  \"     \"  )  ;", "expression . append (  \"  (  \"  )  ;", "right . build ( expression ,    localQueryValues )  ;", "expression . append (  \"  )  \"  )  ;", "expressions . add ( expression . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWhere"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   sub 1     =    addSubParameters (  \" or \"  )  ;", "sub 1  . addWhere ( left ,    addAliasLeft ,    op ,    right ,    addAliasRight )  ;", "final   Parameters   sub 2     =    sub 1  . addSubParameters (  \" and \"  )  ;", "sub 2  . addNullRestriction ( left ,    false )  ;", "sub 2  . addNullRestriction ( right ,    false )  ;", "}", "METHOD_END"], "methodName": ["addWhereOrNullRestriction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   String   paramName    =    generateQueryParam (  )  ;", "localQueryParamValues . put ( paramName ,    paramValue )  ;", "final   StringBuilder   expression    =    new   StringBuilder (  )  ;", "expression . append ( leftFunction )  . append (  \"  (  \"  )  ;", "expression . append ( alias )  . append (  \"  .  \"  )  ;", "expression . append ( left )  . append (  \"  )  \"  )  ;", "expression . append (  \"     \"  )  . append ( op )  . append (  \"     \"  )  ;", "expression . append (  \"  :  \"  )  . append ( paramName )  ;", "expressions . add ( expression . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithFunction"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   expression    =    new   StringBuilder (  )  ;", "if    ( addAlias )     {", "expression . append ( alias )  . append (  \"  .  \"  )  ;", "}", "expression . append ( left )  ;", "expression . append (  \"     \"  )  . append ( op )  . append (  \"     \"  )  ;", "expression . append (  \"  :  \"  )  . append ( pName )  ;", "expressions . add ( expression . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithNamedParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhereWithNamedParam ( left ,    true ,    op ,    paramName )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithNamedParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   String   paramName    =    generateQueryParam (  )  ;", "localQueryParamValues . put ( paramName ,    paramValue )  ;", "addWhereWithNamedParam ( left ,    addAlias ,    op ,    paramName )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "addWhereWithParam ( left ,    true ,    op ,    paramValue )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "String   effectiveLeft    =    alias . concat (  \"  .  \"  )  . concat ( left )  ;", "addWhereWith ( effectiveLeft ,    false ,    op ,    paramValue )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   expression    =    new   StringBuilder (  )  ;", "expression . append ( alias )  . append (  \"  .  \"  )  . append ( left )  . append (  \"     \"  )  . append ( opStart )  ;", "for    ( int   i    =     0  ;    i    <     ( paramValues . length )  ;    i +  +  )     {", "final   Object   paramValue    =    paramValues [ i ]  ;", "final   String   paramName    =    generateQuery (  )  ;", "localQueryValues . put ( paramName ,    paramValue )  ;", "expression . append (  \"  :  \"  )  . append ( paramName )  ;", "if    ( i    !  =     (  ( paramValues . length )     -     1  )  )     {", "expression . append (  \"  ,     \"  )  ;", "}", "}", "expression . append ( opEnd )  ;", "expressions . add ( expression . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["addWhereWithParams"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isFirst . isSet (  )  )  )     {", "sb . append (  \"     \"  )  . append ( connective )  . append (  \"     \"  )  ;", "}", "sb . append ( toAppend )  ;", "isFirst . unset (  )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "final   MutableBoolean   isFirst    =    new   MutableBoolean ( true )  ;", "for    ( String   expression    :    expressions )     {", "append ( sb ,    expression ,    isFirst )  ;", "}", "for    (    sub    :    sub )     {", "if    (  !  ( sub . isEmpty (  )  )  )     {", "append ( sb ,     \"  (  \"  ,    isFirst )  ;", "sub . build ( sb ,    queryParamValues )  ;", "sb . append (  \"  )  \"  )  ;", "}", "}", "for    (    negated    :    negated )     {", "if    (  !  ( negated . isEmpty (  )  )  )     {", "append ( sb ,     \" not    (  \"  ,    isFirst )  ;", "negated . build ( sb ,    queryParamValues )  ;", "sb . append (  \"  )  \"  )  ;", "}", "}", "queryParamValues . putAll ( localQueryParamValues )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "return   new   Parameters ( this )  ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "return    \"  _ p \"     +     ( queryParamCounter . getAndIncrease (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateQueryParam"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( expressions . size (  )  )     =  =     0  )     &  &     (  ( subParameters . size (  )  )     =  =     0  )  )     &  &     (  ( negatedParameters . size (  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.hibernate.envers.internal.tools.query.Parameters"}, {"methodBody": ["METHOD_START", "{", "QueryBuilder . CrossJoinParameter   joinParameter    =    new   QueryBuilder . CrossJoinParameter ( entityName ,    alias ,    select )  ;", "froms . add ( joinParameter )  ;", "}", "METHOD_END"], "methodName": ["addFrom"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "Parameters   joinConditionParameters    =    new   Parameters ( alias ,    Parameters . AND ,    paramCounter )  ;", ". InnerOuterJoinParameter   joinParameter    =    new    . InnerOuterJoinParameter ( joinType ,    entityName ,    alias ,    select ,    joinConditionParameters )  ;", "froms . add ( joinParameter )  ;", "return   joinConditionParameters ;", "}", "METHOD_END"], "methodName": ["addJoin"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "orders . add ( Triple . make ( alias ,    propertyName ,    ascending )  )  ;", "}", "METHOD_END"], "methodName": ["addOrder"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "final   Parameters   result    =    new   Parameters ( alias ,    Parameters . AND ,    paramCounter )  ;", "parameters . add ( result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["addParameters"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "final   String   effectivePropertyName    =     ( propertyName    =  =    null )     ?     \"  \"     :     \"  .  \"  . concat ( propertyName )  ;", "if    ( function    =  =    null )     {", "projections . add (  (  (  ( distinct    ?     \" distinct    \"     :     \"  \"  )     +    alias )     +    effectivePropertyName )  )  ;", "} else    {", "projections . add (  (  (  (  (  ( function    +     \"  (  \"  )     +     ( distinct    ?     \" distinct    \"     :     \"  \"  )  )     +    alias )     +    effectivePropertyName )     +     \"  )  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addProjection"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "sb . append (  \" select    \"  )  ;", "if    (  ( projections . size (  )  )     >     0  )     {", "StringTools . append ( sb ,    projections . iterator (  )  ,     \"  ,     \"  )  ;", "} else    {", "StringTools . append ( sb ,    getSelectAliasList (  )  . iterator (  )  ,     \"  ,     \"  )  ;", "}", "sb . append (  \"    from    \"  )  ;", "boolean   first    =    true ;", "for    ( final    . JoinParameter   joinParameter    :    froms )     {", "joinParameter . appendJoin ( first ,    sb ,    queryParamValues )  ;", "first    =    false ;", "}", "first    =    true ;", "for    ( final   Parameters   params    :    parameters )     {", "if    (  !  ( params . isEmpty (  )  )  )     {", "if    ( first )     {", "sb . append (  \"    where    \"  )  ;", "first    =    false ;", "} else    {", "sb . append (  \"    and    \"  )  ;", "}", "params . build ( sb ,    queryParamValues )  ;", "}", "}", "if    (  ( orders . size (  )  )     >     0  )     {", "sb . append (  \"    order   by    \"  )  ;", "StringTools . append ( sb ,    getOrderList (  )  . iterator (  )  ,     \"  ,     \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryBuilder ( this )  ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return    \"  _ e \"     +     ( aliasCounter . getAndIncrease (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateAlias"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   alias ;", "}", "METHOD_END"], "methodName": ["getAlias"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "final   List < String >    orderList    =    new   ArrayList <  >  (  )  ;", "for    ( Triple < String ,    String ,    Boolean >    order    :    orders )     {", "orderList . add (  (  (  (  (  ( order . getFirst (  )  )     +     \"  .  \"  )     +     ( order . getSecond (  )  )  )     +     \"     \"  )     +     ( order . getThird (  )     ?     \" asc \"     :     \" desc \"  )  )  )  ;", "}", "return   orderList ;", "}", "METHOD_END"], "methodName": ["getOrderList"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   alias ;", "}", "METHOD_END"], "methodName": ["getRootAlias"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   parameters . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getRootParameters"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "final   List < String >    aliasList    =    new   ArrayList <  >  (  )  ;", "for    (  . JoinParameter   from    :    froms )     {", "if    ( from . isSelect (  )  )     {", "aliasList . add ( from . getAlias (  )  )  ;", "}", "}", "return   aliasList ;", "}", "METHOD_END"], "methodName": ["getSelectAliasList"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryBuilder ( entityName ,    alias ,    aliasCounter ,    paramCounter )  ;", "}", "METHOD_END"], "methodName": ["newSubQueryBuilder"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   querySb    =    new   StringBuilder (  )  ;", "final   Map < String ,    Object >    queryParamValues    =    new   HashMap <  >  (  )  ;", "build ( querySb ,    queryParamValues )  ;", "final   Query   query    =    session . createQuery ( querySb . toString (  )  )  ;", "for    ( Map . Entry < String ,    Object >    paramValue    :    queryParamValues . entrySet (  )  )     {", "if    (  ( paramValue . getValue (  )  )    instanceof   RevisionType )     {", "query . setParameter ( paramValue . getKey (  )  ,    paramValue . getValue (  )  ,    new   CustomType ( new   RevisionTypeType (  )  )  )  ;", "} else    {", "query . setParameter ( paramValue . getKey (  )  ,    paramValue . getValue (  )  )  ;", "}", "}", "return   query ;", "}", "METHOD_END"], "methodName": ["toQuery"], "fileName": "org.hibernate.envers.internal.tools.query.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "sb . append (  \" update    \"  )  . append ( entityName )  . append (  \"     \"  )  . append ( alias )  ;", "sb . append (  \"    set    \"  )  ;", "int   i    =     1  ;", "for    ( String   property    :    updates . keySet (  )  )     {", "final   String   paramName    =    generateParameterName (  )  ;", "sb . append ( alias )  . append (  \"  .  \"  )  . append ( property )  . append (  \"     =     \"  )  . append (  \"  :  \"  )  . append ( paramName )  ;", "updateParamValues . put ( paramName ,    updates . get ( property )  )  ;", "if    ( i    <     ( updates . size (  )  )  )     {", "sb . append (  \"  ,     \"  )  ;", "}", "+  + i ;", "}", "if    (  !  ( rootParameters . isEmpty (  )  )  )     {", "sb . append (  \"    where    \"  )  ;", "rootParameters . build ( sb ,    updateParamValues )  ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.hibernate.envers.internal.tools.query.UpdateBuilder"}, {"methodBody": ["METHOD_START", "{", "return    \"  _ u \"     +     ( paramCounter . getAndIncrease (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateParameterName"], "fileName": "org.hibernate.envers.internal.tools.query.UpdateBuilder"}, {"methodBody": ["METHOD_START", "{", "return   rootParameters ;", "}", "METHOD_END"], "methodName": ["getRootParameters"], "fileName": "org.hibernate.envers.internal.tools.query.UpdateBuilder"}, {"methodBody": ["METHOD_START", "{", "final   StringBuilder   querySb    =    new   StringBuilder (  )  ;", "final   Map < String ,    Object >    queryParamValues    =    new   HashMap <  >  (  )  ;", "build ( querySb ,    queryParamValues )  ;", "final   Query   query    =    session . createQuery ( querySb . toString (  )  )  ;", "for    ( Map . Entry < String ,    Object >    paramValue    :    queryParamValues . entrySet (  )  )     {", "query . setParameter ( paramValue . getKey (  )  ,    paramValue . getValue (  )  )  ;", "}", "return   query ;", "}", "METHOD_END"], "methodName": ["toQuery"], "fileName": "org.hibernate.envers.internal.tools.query.UpdateBuilder"}, {"methodBody": ["METHOD_START", "{", "updates . put ( propertyName ,    value )  ;", "}", "METHOD_END"], "methodName": ["updateValue"], "fileName": "org.hibernate.envers.internal.tools.query.UpdateBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   LogicalAuditExpression ( lhs ,    rhs ,     \" and \"  )  ;", "}", "METHOD_END"], "methodName": ["and"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditConjunction (  )  ;", "}", "METHOD_END"], "methodName": ["conjunction"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditDisjunction (  )  ;", "}", "METHOD_END"], "methodName": ["disjunction"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . id ( null )  ;", "}", "METHOD_END"], "methodName": ["id"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditId ( alias )  ;", "}", "METHOD_END"], "methodName": ["id"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   NotAuditExpression ( expression )  ;", "}", "METHOD_END"], "methodName": ["not"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   LogicalAuditExpression ( lhs ,    rhs ,     \" or \"  )  ;", "}", "METHOD_END"], "methodName": ["or"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . property ( null ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["property"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditProperty <  >  ( alias ,    new   EntityPropertyName ( propertyName )  )  ;", "}", "METHOD_END"], "methodName": ["property"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . relatedId ( null ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["relatedId"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditRelatedId ( alias ,    new   EntityPropertyName ( propertyName )  )  ;", "}", "METHOD_END"], "methodName": ["relatedId"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . revisionNumber ( null )  ;", "}", "METHOD_END"], "methodName": ["revisionNumber"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditProperty <  >  ( alias ,    new   RevisionNumberPropertyName (  )  )  ;", "}", "METHOD_END"], "methodName": ["revisionNumber"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . revisionProperty ( null ,    propertyName )  ;", "}", "METHOD_END"], "methodName": ["revisionProperty"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditProperty <  >  ( alias ,    new   RevisionPropertyPropertyName ( propertyName )  )  ;", "}", "METHOD_END"], "methodName": ["revisionProperty"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   AuditEntity . revisionType ( null )  ;", "}", "METHOD_END"], "methodName": ["revisionType"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditProperty <  >  ( alias ,    new   RevisionTypePropertyName (  )  )  ;", "}", "METHOD_END"], "methodName": ["revisionType"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   EntityAuditProjection ( null ,    distinct )  ;", "}", "METHOD_END"], "methodName": ["selectEntity"], "fileName": "org.hibernate.envers.query.AuditEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( auditReaderImplementor . isEntityNameAudited ( entityName )  )  )     {", "throw   new   NotAuditedException ( entityName ,     (  (  \" Cannot   query   audit   history   on   a   non - audited   entity    [  \"     +    entityName )     +     \"  ]  .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkEntityAudited"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "ArgumentsTools . checkNotNull ( revision ,     \" Entity   revision \"  )  ;", "ArgumentsTools . checkPositive ( revision ,     \" Entity   revision \"  )  ;", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( c . getName (  )  )  ;", "return   new   EntitiesAtRevisionQuery ( Service ,    auditReaderImplementor ,    c ,    revision ,    false )  ;", "}", "METHOD_END"], "methodName": ["forEntitiesAtRevision"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "return   forEntitiesAtRevision ( c ,    entityName ,    revision ,    false )  ;", "}", "METHOD_END"], "methodName": ["forEntitiesAtRevision"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "ArgumentsTools . checkNotNull ( revision ,     \" Entity   revision \"  )  ;", "ArgumentsTools . checkPositive ( revision ,     \" Entity   revision \"  )  ;", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( entityName )  ;", "return   new   EntitiesAtRevisionQuery ( Service ,    auditReaderImplementor ,    c ,    entityName ,    revision ,    includeDeletions )  ;", "}", "METHOD_END"], "methodName": ["forEntitiesAtRevision"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "ArgumentsTools . checkNotNull ( revision ,     \" Entity   revision \"  )  ;", "ArgumentsTools . checkPositive ( revision ,     \" Entity   revision \"  )  ;", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( c . getName (  )  )  ;", "return   new   EntitiesModifiedAtRevisionQuery ( Service ,    auditReaderImplementor ,    c ,    revision )  ;", "}", "METHOD_END"], "methodName": ["forEntitiesModifiedAtRevision"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "ArgumentsTools . checkNotNull ( revision ,     \" Entity   revision \"  )  ;", "ArgumentsTools . checkPositive ( revision ,     \" Entity   revision \"  )  ;", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( entityName )  ;", "return   new   EntitiesModifiedAtRevisionQuery ( Service ,    auditReaderImplementor ,    c ,    entityName ,    revision )  ;", "}", "METHOD_END"], "methodName": ["forEntitiesModifiedAtRevision"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "clazz    =    EntityTools . getTargetClassIfProxied ( clazz )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    clazz ,    false ,    selectDeletedEntities ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntity"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( c . getName (  )  )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    c ,    selectEntitiesOnly ,    selectDeletedEntities ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntity"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "clazz    =    EntityTools . getTargetClassIfProxied ( clazz )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    clazz ,    entityName ,    false ,    selectDeletedEntities ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntity"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "c    =    EntityTools . getTargetClassIfProxied ( c )  ;", "checkEntityAudited ( entityName )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    c ,    entityName ,    selectEntitiesOnly ,    selectDeletedEntities ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntity"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "clazz    =    EntityTools . getTargetClassIfProxied ( clazz )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    clazz ,    false ,    selectDeletedEntities ,    false ,    true )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntityWithChanges"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "clazz    =    EntityTools . getTargetClassIfProxied ( clazz )  ;", "return   new   RevisionsOfEntityQuery ( Service ,    auditReaderImplementor ,    clazz ,    entityName ,    false ,    selectDeletedEntities ,    false ,    true )  ;", "}", "METHOD_END"], "methodName": ["forRevisionsOfEntityWithChanges"], "fileName": "org.hibernate.envers.query.AuditQueryCreator"}, {"methodBody": ["METHOD_START", "{", "correlate    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["computeAggregationInInstanceContext"], "fileName": "org.hibernate.envers.query.criteria.AggregatedAuditExpression"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditOrder ( alias ,    propertyNameGetter ,    true )  ;", "}", "METHOD_END"], "methodName": ["asc"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   BetweenAuditExpression ( alias ,    propertyNameGetter ,    lo ,    hi )  ;", "}", "METHOD_END"], "methodName": ["between"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,     \" count \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["count"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,     \" count \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["countDistinct"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditOrder ( alias ,    propertyNameGetter ,    false )  ;", "}", "METHOD_END"], "methodName": ["desc"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,    null ,    true )  ;", "}", "METHOD_END"], "methodName": ["distinct"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["eq"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   eqProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["eqProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["eqProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,    functionName ,    false )  ;", "}", "METHOD_END"], "methodName": ["function"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  >  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["ge"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   geProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["geProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  >  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["geProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   AuditProjection . ProjectionData ( null ,    alias ,    propertyNameGetter . get ( enversService )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  >  \"  )  ;", "}", "METHOD_END"], "methodName": ["gt"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   gtProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["gtProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  >  \"  )  ;", "}", "METHOD_END"], "methodName": ["gtProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    new   ModifiedFlagPropertyName ( propertyNameGetter )  ,    true ,     \"  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["hasChanged"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    new   ModifiedFlagPropertyName ( propertyNameGetter )  ,    false ,     \"  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["hasNotChanged"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   IlikeAuditExpression ( alias ,    propertyNameGetter ,    value . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["ilike"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   IlikeAuditExpression ( alias ,    propertyNameGetter ,    matchMode . toMatchString ( value )  )  ;", "}", "METHOD_END"], "methodName": ["ilike"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   IlikeAuditExpression ( alias ,    propertyNameGetter ,    matchMode . toMatchString ( value )  )  ;", "}", "METHOD_END"], "methodName": ["ilike"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   InAuditExpression ( alias ,    propertyNameGetter ,    values )  ;", "}", "METHOD_END"], "methodName": ["in"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   InAuditExpression ( alias ,    propertyNameGetter ,    values . toArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["in"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   NotNullAuditExpression ( alias ,    propertyNameGetter )  ;", "}", "METHOD_END"], "methodName": ["isNotNull"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   NullAuditExpression ( alias ,    propertyNameGetter )  ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  <  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["le"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   leProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["leProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  <  =  \"  )  ;", "}", "METHOD_END"], "methodName": ["leProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"    like    \"  )  ;", "}", "METHOD_END"], "methodName": ["like"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    matchMode . toMatchString ( value )  ,     \"    like \"  )  ;", "}", "METHOD_END"], "methodName": ["like"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    matchMode . toMatchString ( value )  ,     \"    like    \"  )  ;", "}", "METHOD_END"], "methodName": ["like"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  <  \"  )  ;", "}", "METHOD_END"], "methodName": ["lt"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   ltProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["ltProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  <  \"  )  ;", "}", "METHOD_END"], "methodName": ["ltProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,     \" max \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["max"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   AggregatedAuditExpression ( alias ,    propertyNameGetter ,    AggregatedAuditExpression . AggregatedMode . MAX )  ;", "}", "METHOD_END"], "methodName": ["maximize"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditProjection ( alias ,    propertyNameGetter ,     \" min \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["min"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   AggregatedAuditExpression ( alias ,    propertyNameGetter ,    AggregatedAuditExpression . AggregatedMode . MIN )  ;", "}", "METHOD_END"], "methodName": ["minimize"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   SimpleAuditExpression ( alias ,    propertyNameGetter ,    value ,     \"  <  >  \"  )  ;", "}", "METHOD_END"], "methodName": ["ne"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   neProperty ( alias ,    otherPropertyName )  ;", "}", "METHOD_END"], "methodName": ["neProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyAuditExpression ( alias ,    propertyNameGetter ,    otherAlias ,    otherPropertyName ,     \"  <  >  \"  )  ;", "}", "METHOD_END"], "methodName": ["neProperty"], "fileName": "org.hibernate.envers.query.criteria.AuditProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   RelatedAuditEqualityExpression ( alias ,    propertyNameGetter ,    id ,    true )  ;", "}", "METHOD_END"], "methodName": ["eq"], "fileName": "org.hibernate.envers.query.criteria.AuditRelatedId"}, {"methodBody": ["METHOD_START", "{", "return   new   RelatedAuditInExpression ( alias ,    propertyNameGetter ,    values )  ;", "}", "METHOD_END"], "methodName": ["in"], "fileName": "org.hibernate.envers.query.criteria.AuditRelatedId"}, {"methodBody": ["METHOD_START", "{", "return   new   RelatedAuditEqualityExpression ( alias ,    propertyNameGetter ,    id ,    false )  ;", "}", "METHOD_END"], "methodName": ["ne"], "fileName": "org.hibernate.envers.query.criteria.AuditRelatedId"}, {"methodBody": ["METHOD_START", "{", "if    ( enversService . getEntitiesConfigurations (  )  . get ( entityName )  . isRelation ( propertyName )  )     {", "throw   new   AuditException (  (  \" This   on   cannot   be   used   on   a   property   that   is    \"     +     \" a   relation   to   another   property .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkPropertyNotARelation"], "fileName": "org.hibernate.envers.query.criteria.internal.CriteriaTools"}, {"methodBody": ["METHOD_START", "{", "final   SessionFactoryImplementor   sessionFactory    =    versionsReader . getSessionImplementor (  )  . getFactory (  )  ;", "if    ( AuditId . IDENTIFIER _ PLACEHOLDER . equals ( propertyName )  )     {", "final   String   identifierPropertyName    =    sessionFactory . getMetamodel (  )  . entityPersister ( entityName )  . getIdentifierPropertyName (  )  ;", "propertyName    =     (  ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )     +     \"  .  \"  )     +    identifierPropertyName ;", "} else    {", "final   List < String >    identifierPropertyNames    =     . identifierPropertyNames ( sessionFactory ,    entityName )  ;", "if    ( identifierPropertyNames . contains ( propertyName )  )     {", "propertyName    =     (  ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )     +     \"  .  \"  )     +    propertyName ;", "} else", "if    ( propertyName    !  =    null )     {", "for    ( String   identifierPropertyName    :    identifierPropertyNames )     {", "if    ( propertyName . startsWith (  ( identifierPropertyName    +     \"  .  \"  )  )  )     {", "propertyName    =     ( enversService . getAuditEntitiesConfiguration (  )  . getOriginalIdPropName (  )  )     +     ( propertyName . substring ( identifierPropertyName . length (  )  )  )  ;", "break ;", "}", "}", "}", "}", "return   propertyName ;", "}", "METHOD_END"], "methodName": ["determinePropertyName"], "fileName": "org.hibernate.envers.query.criteria.internal.CriteriaTools"}, {"methodBody": ["METHOD_START", "{", "return   CriteriaTools . determinePropertyName ( enversService ,    versionsReader ,    entityName ,    propertyNameGetter . get ( enversService )  )  ;", "}", "METHOD_END"], "methodName": ["determinePropertyName"], "fileName": "org.hibernate.envers.query.criteria.internal.CriteriaTools"}, {"methodBody": ["METHOD_START", "{", "RelationDescription   relationDesc    =    enversService . getEntitiesConfigurations (  )  . getRelationDescription ( entityName ,    propertyName )  ;", "if    ( relationDesc    =  =    null )     {", "return   null ;", "}", "if    (  ( relationDesc . getRelationType (  )  )     =  =     ( RelationType . TO _ ONE )  )     {", "return   relationDesc ;", "}", "throw   new   AuditException (  (  (  (  (  \" This   type   of   relation    (  \"     +    entityName )     +     \"  .  \"  )     +    propertyName )     +     \"  )    isn ' t   supported   and   can ' t   be   used   in   queries .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getRelatedEntity"], "fileName": "org.hibernate.envers.query.criteria.internal.CriteriaTools"}, {"methodBody": ["METHOD_START", "{", "final   String   identifierPropertyName    =    sessionFactory . getMetamodel (  )  . entityPersister ( entityName )  . getIdentifierPropertyName (  )  ;", "if    ( identifierPropertyName    !  =    null )     {", "return   Arrays . asList ( identifierPropertyName )  ;", "}", "final   Type   identifierType    =    sessionFactory . getMetamodel (  )  . entityPersister ( entityName )  . getIdentifierType (  )  ;", "if    ( identifierType   instanceof   EmbeddedComponentType )     {", "final   EmbeddedComponentType   embeddedComponentType    =     (  ( EmbeddedComponentType )     ( identifierType )  )  ;", "return   Arrays . asList ( embeddedComponentType . getPropertyNames (  )  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["identifierPropertyNames"], "fileName": "org.hibernate.envers.query.criteria.internal.CriteriaTools"}, {"methodBody": ["METHOD_START", "{", "Parameters   opParameters    =    parameters . addSubParameters ( op )  ;", "lhs . addToQuery ( Service ,    versionsReader ,    aliasToEntityNameMap ,    alias ,    qb ,    opParameters . addSubParameters (  \" and \"  )  )  ;", "rhs . addToQuery ( Service ,    versionsReader ,    aliasToEntityNameMap ,    alias ,    qb ,    opParameters . addSubParameters (  \" and \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addToQuery"], "fileName": "org.hibernate.envers.query.criteria.internal.LogicalAuditExpression"}, {"methodBody": ["METHOD_START", "{", "criterion . addToQuery ( enversService ,    versionsReader ,    aliasToEntityNameMap ,    alias ,    qb ,    parameters . addNegatedParameters (  )  )  ;", "}", "METHOD_END"], "methodName": ["addToQuery"], "fileName": "org.hibernate.envers.query.criteria.internal.NotAuditExpression"}, {"methodBody": ["METHOD_START", "{", "final   EntityPersister   persister    =    session . getSessionFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  ;", "for    ( String   name    :    persister . getPropertyNames (  )  )     {", "if    ( name . equals ( propertyName )  )     {", "return   persister . getPropertyType ( propertyName )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPropertyType"], "fileName": "org.hibernate.envers.query.criteria.internal.SimpleAuditExpression"}, {"methodBody": ["METHOD_START", "{", "criterions . add ( criterion )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "hasOrder    =    true ;", "AuditOrder . OrderData   orderData    =    order . getData ( Service )  ;", "String   orderEntityAlias    =    orderData . getAlias ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )  ;", "String   orderEntityName    =    aliasToEntityNameMap . get ( orderEntityAlias )  ;", "String   propertyName    =    CriteriaTools . determinePropertyName ( Service ,    versionsReader ,    orderEntityName ,    orderData . getPropertyName (  )  )  ;", "qb . addOrder ( orderEntityAlias ,    propertyName ,    orderData . isAscending (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addOrder"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "AuditProjection . ProjectionData   projectionData    =    projection . getData ( enversService )  ;", "String   projectionEntityAlias    =    projectionData . getAlias ( QueryConstants . REFERENCED _ ENTITY _ ALIAS )  ;", "String   projectionEntityName    =    aliasToEntityNameMap . get ( projectionEntityAlias )  ;", "registerProjection ( projectionEntityName ,    projection )  ;", "String   propertyName    =    CriteriaTools . determinePropertyName ( enversService ,    versionsReader ,    projectionEntityName ,    projectionData . getPropertyName (  )  )  ;", "qb . addProjection ( projectionData . getFunction (  )  ,    projectionEntityAlias ,    propertyName ,    projectionData . isDistinct (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addProjection"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "final   List   result    =    new   ArrayList ( queryResult . size (  )  )  ;", "if    ( hasProjection (  )  )     {", "for    ( final   Object   qr    :    queryResult )     {", "if    (  ( projections . size (  )  )     =  =     1  )     {", "final   Pair < String ,    AuditProjection >    projection    =    projections . get (  0  )  ;", "result . add ( projection . getSecond (  )  . convertQueryResult ( Service ,    entityInstantiator ,    projection . getFirst (  )  ,    revision ,    qr )  )  ;", "} else    {", "Object [  ]    qresults    =     (  ( Object [  ]  )     ( qr )  )  ;", "Object [  ]    tresults    =    new   Object [ qresults . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( qresults . length )  ;    i +  +  )     {", "final   Pair < String ,    AuditProjection >    projection    =    projections . get ( i )  ;", "tresults [ i ]     =    projection . getSecond (  )  . convertQueryResult ( Service ,    entityInstantiator ,    projection . getFirst (  )  ,    revision ,    qresults [ i ]  )  ;", "}", "result . add ( tresults )  ;", "}", "}", "} else    {", "entityInstantiator . addInstancesFromVersionsEntities ( entityName ,    result ,    queryResult ,    revision )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["applyProjections"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "Query    =    buildQuery (  )  ;", "return   list (  )  ;", "}", "METHOD_END"], "methodName": ["buildAndExecuteQuery"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "Query   query    =    qb . toQuery ( versionsReader . getSession (  )  )  ;", "seProperties ( query )  ;", "return   query ;", "}", "METHOD_END"], "methodName": ["buildQuery"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "return   enversService . getEntitiesConfigurations (  )  . get ( entityName )  ;", "}", "METHOD_END"], "methodName": ["getEntityConfiguration"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "return   entityName ;", "}", "METHOD_END"], "methodName": ["getEntityName"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "return   list (  )  ;", "}", "METHOD_END"], "methodName": ["getResultList"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    list (  )  ;", "if    (  ( result    =  =    null )     |  |     (  ( result . size (  )  )     =  =     0  )  )     {", "throw   new   NoResultException (  )  ;", "}", "if    (  ( result . size (  )  )     >     1  )     {", "throw   new   NonUniResultException (  )  ;", "}", "return   result . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getSingleResult"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "return    !  ( projections . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasProjection"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . cacheMode    =    cacheMode ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCacheMode"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . cacheRegion    =    cacheRegion ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCacheRegion"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . cacheable    =    cacheable ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCacheable"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . comment    =    comment ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setComment"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . firstResult    =    firstResult ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setFirstResult"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . flushMode    =    flushMode ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setFlushMode"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "lockOptions . setLockMode ( lockMode )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLockMode"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "LockOptions . copy ( lockOptions ,    this . lockOptions )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLockOptions"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . maxResults    =    maxResults ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxResults"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "if    (  ( maxResults )     !  =    null )     {", "setMaxResults ( maxResults )  ;", "}", "if    (  ( firstResult )     !  =    null )     {", "setFirstResult ( firstResult )  ;", "}", "if    (  ( cacheable )     !  =    null )     {", "setCacheable ( cacheable )  ;", "}", "if    (  ( cacheRegion )     !  =    null )     {", "setCacheRegion ( cacheRegion )  ;", "}", "if    (  ( comment )     !  =    null )     {", "setComment ( comment )  ;", "}", "if    (  ( flushMode )     !  =    null )     {", "setFlushMode ( flushMode )  ;", "}", "if    (  ( cacheMode )     !  =    null )     {", "setCacheMode ( cacheMode )  ;", "}", "if    (  ( timeout )     !  =    null )     {", "setTimeout ( timeout )  ;", "}", "if    (  (  ( lockOptions )     !  =    null )     &  &     (  ( lockOptions . getLockMode (  )  )     !  =     ( LockMode . NONE )  )  )     {", "setLockMode ( QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    lockOptions . getLockMode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setQueryProperties"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "this . timeout    =    timeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTimeout"], "fileName": "org.hibernate.envers.query.internal.impl.AbstractAuditQuery"}, {"methodBody": ["METHOD_START", "{", "if    ( enversService . getEntitiesConfigurations (  )  . isVersioned ( entityName )  )     {", "String   auditEntityName    =    enversService . getAuditEntitiesConfiguration (  )  . getAuditEntityName ( entityName )  ;", "Parameters   joinConditionParameters    =    queryBuilder . addJoin ( joinType ,    auditEntityName ,    alias ,    false )  ;", "AuditEntitiesConfiguration   verEntCfg    =    enversService . getAuditEntitiesConfiguration (  )  ;", "String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "IdMapper   idMapperTarget    =    enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getIdMapper (  )  ;", "final   String   prefix    =    alias . concat (  \"  .  \"  )  . concat ( originalIdPropertyName )  ;", "ownerAssociationIdMapper . addIdsEqualToQuery ( joinConditionParameters ,    ownerAlias ,    idMapperTarget ,    prefix )  ;", "Parameters   parametersToUse    =    parameters ;", "String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "if    (  ( joinType )     =  =     ( JoinType . LEFT )  )     {", "parametersToUse    =    parameters . addSubParameters ( Parameters . OR )  ;", "parametersToUse . addNullRestriction ( revisionPropertyPath ,    true )  ;", "parametersToUse    =    parametersToUse . addSubParameters ( Parameters . AND )  ;", "}", "MiddleIdData   referencedIdData    =    new   MiddleIdData ( verEntCfg ,    enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getIdMappingData (  )  ,    null ,    entityName ,    enversService . getEntitiesConfigurations (  )  . isVersioned ( entityName )  )  ;", "enversService . getAuditStrategy (  )  . addEntityAtRevisionRestriction ( enversService . getGlobalConfiguration (  )  ,    queryBuilder ,    parametersToUse ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencedIdData ,    revisionPropertyPath ,    originalIdPropertyName ,    alias ,    queryBuilder . generateAlias (  )  ,    true )  ;", "} else    {", "Parameters   joinConditionParameters    =    queryBuilder . addJoin ( joinType ,    entityName ,    alias ,    false )  ;", "final   IdMapper   idMapperTarget    =    enversService . getEntitiesConfigurations (  )  . getNotVersionEntityConfiguration ( entityName )  . getIdMapper (  )  ;", "ownerAssociationIdMapper . addIdsEqualToQuery ( joinConditionParameters ,    ownerAlias ,    idMapperTarget ,    alias )  ;", "}", "for    ( AuditCriterion   criterion    :    criterions )     {", "criterion . addToQuery ( enversService ,    versionsReader ,    aliasToEntityNameMap ,    alias ,    queryBuilder ,    parameters )  ;", "}", "for    ( final    <  ?  >    sub    :    associationQueries )     {", "sub . addCriterionsToQuery ( versionsReader )  ;", "}", "}", "METHOD_END"], "methodName": ["addCriterionsToQuery"], "fileName": "org.hibernate.envers.query.internal.impl.AuditAssociationQueryImpl"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["up"], "fileName": "org.hibernate.envers.query.internal.impl.AuditAssociationQueryImpl"}, {"methodBody": ["METHOD_START", "{", "AuditEntitiesConfiguration   verEntCfg    =    enversService . getAuditEntitiesConfiguration (  )  ;", "String   revisionPropertyPath    =    verEntCfg . getRevisionNumberPath (  )  ;", "String   originalIdPropertyName    =    verEntCfg . getOriginalIdPropName (  )  ;", "MiddleIdData   referencedIdData    =    new   MiddleIdData ( verEntCfg ,    enversService . getEntitiesConfigurations (  )  . get ( entityName )  . getIdMappingData (  )  ,    null ,    entityName ,    enversService . getEntitiesConfigurations (  )  . isVersioned ( entityName )  )  ;", "enversService . getAuditStrategy (  )  . addEntityRestriction ( enversService . getGlobalConfiguration (  )  ,    qb ,    qb . getRootParameters (  )  ,    revisionPropertyPath ,    verEntCfg . getRevisionEndFieldName (  )  ,    true ,    referencedIdData ,    revisionPropertyPath ,    originalIdPropertyName ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    true )  ;", "if    (  !  ( includeDeletions )  )     {", "qb . getRootParameters (  )  . addWhereWithParam ( verEntCfg . getRevisionTypePropName (  )  ,     \"  <  >  \"  ,    RevisionType . DEL )  ;", "}", "for    ( AuditCriterion   criterion    :    criterions )     {", "criterion . addToQuery ( enversService ,    versionsReader ,    aliasToEntityNameMap ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    qb ,    qb . getRootParameters (  )  )  ;", "}", "for    ( final   AuditAssociationQueryImpl <  ?  >    associationQuery    :    associationQueries )     {", "associationQuery . addCriterionsToQuery ( versionsReader )  ;", "}", "Query   query    =    buildQuery (  )  ;", "Collection < String >    params    =    query . getParameterMetadata (  )  . getNamedParameterNames (  )  ;", "if    ( params . contains ( QueryConstants . REVISION _ PARAMETER )  )     {", "query . setParameter ( QueryConstants . REVISION _ PARAMETER ,    revision )  ;", "}", "List   queryResult    =    query . list (  )  ;", "return   applyProjections ( queryResult ,    revision )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.hibernate.envers.query.internal.impl.EntitiesAtRevisionQuery"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    changedPropertyNames    =    new   HashSet <  >  (  )  ;", "if    ( revisionType    =  =     ( Type . MOD )  )     {", "final   String   modifiedFlagSuffix    =    enversService . getGlobalConfiguration (  )  . getModifiedFlagSuffix (  )  ;", "for    ( Map . Entry < String ,    Object >    entry    :    dataMap . entrySet (  )  )     {", "final   String   key    =    entry . getKey (  )  ;", "if    ( key . endsWith ( modifiedFlagSuffix )  )     {", "if    (  (  ( entry . getValue (  )  )     !  =    null )     &  &     ( Boolean . parseBoolean ( entry . getValue (  )  . toString (  )  )  )  )     {", "changedPropertyNames . add ( key . substring (  0  ,     (  ( key . length (  )  )     -     ( modifiedFlagSuffix . length (  )  )  )  )  )  ;", "}", "}", "}", "}", "return   changedPropertyNames ;", "}", "METHOD_END"], "methodName": ["getChangedPropertyNames"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "final   Number   revision    =    getRevisionNumber ( versionsData )  ;", "final   Object   entity    =    entityInstantiator . createInstanceFromVersionsEntity ( entityName ,    versionsData ,    revision )  ;", "if    ( selectEntitiesOnly )     {", "return   entity ;", "}", "final   String   revisionTypePropertyName    =    enversService . getAuditEntitiesConfiguration (  )  . getRevisionTypePropName (  )  ;", "Object   revisionType    =    versionsData . get ( revisionTypePropertyName )  ;", "if    (  !  ( includePropertyChanges )  )     {", "return   new   Object [  ]  {    entity ,    revisionData ,    revisionType    }  ;", "}", "if    (  !  ( isEntityUsingModifiedFlags (  )  )  )     {", "throw   new   AuditException ( String . format ( Locale . ROOT ,     \" The   specified   entity    [  % s ]    does   not   support   or   use   modified   flags .  \"  ,    getEntityConfiguration (  )  . getEntityClassName (  )  )  )  ;", "}", "final   Set < String >    changedPropertyNames    =    getChangedPropertyNames ( versionsData ,    revisionType )  ;", "return   new   Object [  ]  {    entity ,    revisionData ,    revisionType ,    changedPropertyNames    }  ;", "}", "METHOD_END"], "methodName": ["getQueryResultRowValue"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "List <  ?  >    queryResults    =    buildAndExecuteQuery (  )  ;", "if    ( hasProjection (  )  )     {", "return   queryResults ;", "} else", "if    ( selectInfoOnly )     {", "return   queryResults . stream (  )  . map (  (    e )     -  >     (  ( Object [  ]  )     ( e )  )  [  1  ]  )  . collect ( toList (  )  )  ;", "} else    {", "List   entities    =    new   ArrayList (  )  ;", "if    ( selectEntitiesOnly )     {", "for    ( Object   row    :    queryResults )     {", "final   Map   versionsEntity    =     (  ( Map )     ( row )  )  ;", "entities . add ( getQueryResultRowValue ( versionsEntity ,    null ,    getEntityName (  )  )  )  ;", "}", "} else    {", "for    ( Object   row    :    queryResults )     {", "final   Object [  ]    rowArray    =     (  ( Object [  ]  )     ( row )  )  ;", "final   Map   versionsEntity    =     (  ( Map )     ( rowArray [  0  ]  )  )  ;", "final   Object   revisionData    =    rowArray [  1  ]  ;", "entities . add ( getQueryResultRowValue ( versionsEntity ,    revisionData ,    getEntityName (  )  )  )  ;", "}", "}", "return   entities ;", "}", "}", "METHOD_END"], "methodName": ["getQueryResults"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "AuditEntitiesConfiguration   verEntCfg    =    enversService . getAuditEntitiesConfiguration (  )  ;", "String   originalId    =    verEntCfg . getOriginalIdPropName (  )  ;", "String   revisionPropertyName    =    verEntCfg . getFieldName (  )  ;", "Object   revisionInfoObject    =     (  ( Map )     ( versionsEntity . get ( originalId )  )  )  . get ( revisionPropertyName )  ;", "if    ( revisionInfoObject   instanceof   HibernateProxy )     {", "return    (  ( Number )     (  (  ( HibernateProxy )     ( revisionInfoObject )  )  . getHibernateLazyInitializer (  )  . getIdentifier (  )  )  )  ;", "} else    {", "return   enversService . getInfoNumberReader (  )  . getNumber ( revisionInfoObject )  ;", "}", "}", "METHOD_END"], "methodName": ["getRevisionNumber"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "final   ExtendedPropertyMapper   propertyMapper    =    getEntityConfiguration (  )  . getPropertyMapper (  )  ;", "for    ( PropertyData   propertyData    :    propertyMapper . getProperties (  )  . keySet (  )  )     {", "if    ( propertyData . isUsingModifiedFlag (  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isEntityUsingModifiedFlags"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "AuditEntitiesConfiguration   verEntCfg    =    enversService . getAuditEntitiesConfiguration (  )  ;", "if    (  !  ( selectDeletedEntities )  )     {", "qb . getRootParameters (  )  . addWhereWithParam ( verEntCfg . getTypePropName (  )  ,     \"  <  >  \"  ,    Type . DEL )  ;", "}", "for    ( AuditCriterion   criterion    :    criterions )     {", "criterion . addToQuery ( enversService ,    versionsReader ,    aliasToEntityNameMap ,    QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    qb ,    qb . getRootParameters (  )  )  ;", "}", "if    (  (  !  ( hasProjection (  )  )  )     &  &     (  !  ( hasOrder )  )  )     {", "String   revisionPropertyPath    =    verEntCfg . getNumberPath (  )  ;", "qb . addOrder ( QueryConstants . REFERENCED _ ENTITY _ ALIAS ,    revisionPropertyPath ,    true )  ;", "}", "if    (  !  ( selectEntitiesOnly )  )     {", "qb . addFrom ( enversService . getAuditEntitiesConfiguration (  )  . getInfoEntityName (  )  ,     \" r \"  ,    true )  ;", "qb . getRootParameters (  )  . addWhere ( enversService . getAuditEntitiesConfiguration (  )  . getNumberPath (  )  ,    true ,     \"  =  \"  ,     \" r . id \"  ,    false )  ;", "}", "return   getQueryResults (  )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.hibernate.envers.query.internal.impl.RevisionsOfEntityQuery"}, {"methodBody": ["METHOD_START", "{", "return   propertyName ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.query.internal.property.EntityPropertyName"}, {"methodBody": ["METHOD_START", "{", "return   MetadataTools . getModifiedFlagPropertyName ( propertyNameGetter . get ( enversService )  ,    enversService . getGlobalConfiguration (  )  . getModifiedFlagSuffix (  )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.hibernate.envers.query.internal.property.ModifiedFlagPropertyName"}, {"methodBody": ["METHOD_START", "{", "perform ( session ,    entityName ,    enversService . getAuditEntitiesConfiguration (  )  ,    id ,    data ,    revision )  ;", "}", "METHOD_END"], "methodName": ["perform"], "fileName": "org.hibernate.envers.strategy.AuditStrategy"}, {"methodBody": ["METHOD_START", "{", "performCollectionChange ( session ,    entityName ,    propertyName ,    enversService . getAuditEntitiesConfiguration (  )  ,    persistentCollectionChangeData ,    revision )  ;", "}", "METHOD_END"], "methodName": ["performCollectionChange"], "fileName": "org.hibernate.envers.strategy.AuditStrategy"}, {"methodBody": ["METHOD_START", "{", "QueryBuilder   maxEeRevQb    =    rootQueryBuilder . newSubQueryBuilder ( versionsMiddleEntityName ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS _ DEF _ AUD _ STR )  ;", "maxEeRevQb . addProjection (  \" max \"  ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS _ DEF _ AUD _ STR ,    revisionPropertyPath ,    false )  ;", "Parameters   maxEeRevQbParameters    =    maxEeRevQb . getRootParameters (  )  ;", "maxEeRevQbParameters . addWhereWithNamedParam ( revisionPropertyPath ,     ( inclusive    ?     \"  <  =  \"     :     \"  <  \"  )  ,    QueryConstants . REVISION _ PARAMETER )  ;", "String   ee 2 OriginalIdPropertyPath    =     (  ( QueryConstants . MIDDLE _ ENTITY _ ALIAS _ DEF _ AUD _ STR )     +     \"  .  \"  )     +    originalIdPropertyName ;", "referencingIdData . getPrefixedMapper (  )  . addIdsEqualToQuery ( maxEeRevQbParameters ,    eeOriginalIdPropertyPath ,    ee 2 OriginalIdPropertyPath )  ;", "for    ( MiddleComponentData   componentData    :    componentDatas )     {", "componentData . getComponentMapper (  )  . addMiddleEqualToQuery ( maxEeRevQbParameters ,    eeOriginalIdPropertyPath ,    alias 1  ,    ee 2 OriginalIdPropertyPath ,    QueryConstants . MIDDLE _ ENTITY _ ALIAS _ DEF _ AUD _ STR )  ;", "}", "parameters . addWhere ( revisionProperty ,    addAlias ,     \"  =  \"  ,    maxEeRevQb )  ;", "}", "METHOD_END"], "methodName": ["addAssociationAtRevisionRestriction"], "fileName": "org.hibernate.envers.strategy.DefaultAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "QueryBuilder   maxERevQb    =    rootQueryBuilder . newSubQueryBuilder ( idData . getAuditEntityName (  )  ,    alias 2  )  ;", "maxERevQb . addProjection (  \" max \"  ,    alias 2  ,    revisionPropertyPath ,    false )  ;", "Parameters   maxERevQbParameters    =    maxERevQb . getRootParameters (  )  ;", "maxERevQbParameters . addWhereWithNamedParam ( revisionPropertyPath ,     ( inclusive    ?     \"  <  =  \"     :     \"  <  \"  )  ,    QueryConstants . REVISION _ PARAMETER )  ;", "idData . getOriginalMapper (  )  . addIdsEqualToQuery ( maxERevQbParameters ,     (  ( alias 1     +     \"  .  \"  )     +    originalIdPropertyName )  ,     (  ( alias 2     +     \"  .  \"  )     +    originalIdPropertyName )  )  ;", "String   subqueryOperator    =    globalCfg . getCorrelatedSubqueryOperator (  )  ;", "parameters . addWhere ( revisionProperty ,    addAlias ,    subqueryOperator ,    maxERevQb )  ;", "}", "METHOD_END"], "methodName": ["addEntityAtRevisionRestriction"], "fileName": "org.hibernate.envers.strategy.DefaultAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "addRevisionRestriction ( parameters ,    revisionProperty ,    revisionEndProperty ,    addAlias ,    inclusive )  ;", "}", "METHOD_END"], "methodName": ["addAssociationAtRevisionRestriction"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "rootParameters . addWhere ( auditEntitiesConfiguration . getRevisionEndFieldName (  )  ,    true ,     \" is \"  ,     \" null \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addEndRevisionNullRestriction"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "addRevisionRestriction ( parameters ,    revisionProperty ,    revisionEndProperty ,    addAlias ,    inclusive )  ;", "}", "METHOD_END"], "methodName": ["addEntityAtRevisionRestriction"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "final   Parametparamet =    qb . getRootParamet )  ;", "for    ( Map . Entry < String ,    Object >    entry    :    data . entrySet (  )  )     {", "if    (  !  ( originalIdPropertyName . equals ( entry . getKey (  )  )  )  )     {", "if    (  ( entry . getValue (  )  )     !  =    null )     {", "parametaddWhereWithParam ( entry . getKey (  )  ,    true ,     \"  =  \"  ,    entry . getValue (  )  )  ;", "} else    {", "parametaddNullRestriction ( entry . getKey (  )  ,    true )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addNonIdentifierWhereConditions"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "Parameters   subParm    =    rootParameters . addSubParameters (  \" or \"  )  ;", "rootParameters . addWhereWithNamedParam ( revisionProperty ,    addAlias ,     ( inclusive    ?     \"  <  =  \"     :     \"  <  \"  )  ,    QueryConstants . REVISION _ PARAMETER )  ;", "subParm . addWhereWithNamedParam (  ( revisionEndProperty    +     \"  . id \"  )  ,    addAlias ,     ( inclusive    ?     \"  >  \"     :     \"  >  =  \"  )  ,    QueryConstants . REVISION _ PARAMETER )  ;", "subParm . addWhere ( revisionEndProperty ,    addAlias ,     \" is \"  ,     \" null \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addRevisionRestriction"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "if    ( revEndTimestampObj   instanceof   Date )     {", "return    (  ( Date )     ( revEndTimestampObj )  )  ;", "}", "return   new   Date (  (  ( Long )     ( revEndTimestampObj )  )  )  ;", "}", "METHOD_END"], "methodName": ["convertRevEndTimestampToDate"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Queryable )     ( sessionImplementor . getFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getQueryable"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RevisionType )     (  (  ( Map < String ,    Object >  )     ( data )  )  . get ( auditEntitiesConfiguration . getRevisionTypePropName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionType"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "final   Type   propertyType    =    session . getSessionFactory (  )  . getMetamodel (  )  . entityPersister ( entityName )  . getPropertyType ( propertyName )  ;", "if    ( propertyType . isCollectionType (  )  )     {", "final   CollectionType   collectionType    =     (  ( CollectionType )     ( propertyType )  )  ;", "final   Type   collectionElementType    =    collectionType . getElementType ( session . getSessionFactory (  )  )  ;", "if    ( collectionElementType   instanceof   ComponentType )     {", "return   true ;", "} else", "if    (  ( collectionElementType   instanceof   type . MaterializedClobType )     |  |     ( collectionElementType   instanceof   type . MaterializedNClobType )  )     {", "return   collectionType   instanceof   type . MapType ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isNonIdentifierWhereConditionsRequired"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "this . revisionTimestampGetter    =    revisionTimestampGetter ;", "}", "METHOD_END"], "methodName": ["setRevisionTimestampGetter"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "if    (  ( l . size (  )  )     =  =     1  )     {", "Object   previousData    =    l . get (  0  )  ;", "String   revisionEndFieldName    =    auditEntitiesConfiguration . getRevisionEndFieldName (  )  ;", "(  ( Map < String ,    Object >  )     ( previousData )  )  . put ( revisionEndFieldName ,    revision )  ;", "if    ( auditEntitiesConfiguration . isRevisionEndTimestampEnabled (  )  )     {", "String   revEndTimestampFieldName    =    auditEntitiesConfiguration . getRevisionEndTimestampFieldName (  )  ;", "Object   revEndTimestampObj    =    this . revisionTimestampGetter . get ( revision )  ;", "Date   revisionEndTimestamp    =    convertRevEndTimestampToDate ( revEndTimestampObj )  ;", "(  ( Map < String ,    Object >  )     ( previousData )  )  . put ( revEndTimestampFieldName ,    revisionEndTimestamp )  ;", "}", "session . save ( auditedEntityName ,    previousData )  ;", "sessionCacheCleaner . scheduleDataRemoval ( session ,    previousData )  ;", "} else    {", "throw   new   RuntimeException (  (  (  (  \" Cannot   find   previous   revision   for   entity    \"     +    auditedEntityName )     +     \"    and   id    \"  )     +    id )  )  ;", "}", "}", "METHOD_END"], "methodName": ["updateLastRevision"], "fileName": "org.hibernate.envers.strategy.ValidityAuditStrategy"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( new   Object [  ]  {    null    }  ,    new   Object [  ]  {     \" ValidityAuditStrategy \"     }  )  ;", "}", "METHOD_END"], "methodName": ["data"], "fileName": "org.hibernate.envers.test.AbstractEnversTest"}, {"methodBody": ["METHOD_START", "{", "return   auditStrategy ;", "}", "METHOD_END"], "methodName": ["getAuditStrategy"], "fileName": "org.hibernate.envers.test.AbstractEnversTest"}, {"methodBody": ["METHOD_START", "{", "auditStrategy    =     (  ( String )     ( data [  0  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["setTestData"], "fileName": "org.hibernate.envers.test.AbstractEnversTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "sFactory . close (  )  ;", "}    finally    {", "if    (  ( serviceRegistry )     !  =    null )     {", "ServiceRegistryBuilder . destroy ( serviceRegistry )  ;", "serviceRegistry    =    null ;", "}", "}", "}", "METHOD_END"], "methodName": ["closeSessionFactory"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "session    =    getSessionFactory (  )  . openSession (  )  ;", "auditReader    =    AuditReaderFactory . get ( session )  ;", "}", "METHOD_END"], "methodName": ["forceNewSession"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "return   auditReader ;", "}", "METHOD_END"], "methodName": ["getAuditReader"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "return    \" hibernate . test . session - cfg . xml \"  ;", "}", "METHOD_END"], "methodName": ["getHibernateConfigurationFileName"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "return   session ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "return   sessionFactory ;", "}", "METHOD_END"], "methodName": ["getSessionFactory"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "config    =    new   Configuration (  )  ;", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource ( getHConfigurationFileName (  )  )  ;", "config . configure ( new   File ( url . toURI (  )  )  )  ;", "String   auditStrategy    =    getAuditStrategy (  )  ;", "if    (  ( auditStrategy    !  =    null )     &  &     (  !  (  \"  \"  . equals ( auditStrategy )  )  )  )     {", "config . setProperty ( EnversSettings . AUDIT _ STRATEGY ,    auditStrategy )  ;", "}", "config . setProperty ( USE _ NEW _ ID _ GENERATOR _ MAPPINGS ,     \" true \"  )  ;", "config . setProperty ( EnversSettings . USE _ REVISION _ ENTITY _ WITH _ NATIVE _ ID ,     \" false \"  )  ;", "addProperties ( config )  ;", "this . initMappings (  )  ;", "serviceRegistry    =    ServiceRegistryBuilder . buildServiceRegistry ( config . getProperties (  )  )  ;", "sessionFactory    =    config . buildSessionFactory ( serviceRegistry )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getSession (  )  )     =  =    null )     {", "session    =    getSessionFactory (  )  . openSession (  )  ;", "auditReader    =    AuditReaderFactory . get ( session )  ;", "}", "}", "METHOD_END"], "methodName": ["initializeSession"], "fileName": "org.hibernate.envers.test.AbstractOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( new   Object [  ]  {    null    }  ,    new   Object [  ]  {     \" ValidityAuditStrategy \"     }  )  ;", "}", "METHOD_END"], "methodName": ["data"], "fileName": "org.hibernate.envers.test.BaseEnversFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    getSession (  )  ;", "if    (  ( session . getTransa (  )  . getStatus (  )  )     !  =     ( TransaStatus . ACTIVE )  )     {", "session . getTransa (  )  . begin (  )  ;", "}", "return   AuditReaderFactory . get ( getSession (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAuditReader"], "fileName": "org.hibernate.envers.test.BaseEnversFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   auditStrategy ;", "}", "METHOD_END"], "methodName": ["getAuditStrategy"], "fileName": "org.hibernate.envers.test.BaseEnversFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "auditStrategy    =     (  ( String )     ( data [  0  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["setTestData"], "fileName": "org.hibernate.envers.test.BaseEnversFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "Strin ]    mappin    =    tMappin (  )  ;", "if    ( mappin    !  =    null )     {", "settin . put ( HBXML _ FILES ,    Strinjoin (  \"  ,  \"  ,    mappin )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addMappings"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["autoRegisterListeners"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "log . trace (  \" Building   EntityManagerFactory \"  )  ;", "entityManagerFactoryBuilder    =     (  ( EntityManagerFactoryBuilderImpl )     ( Bootstrap . getEntityManagerFactoryBuilder ( buildPistenceUnitDescriptor (  )  ,    buildSettings (  )  )  )  )  ;", "entityManagerFactory    =    entityManagerFactoryBuilder . build (  )  . unwrap ( SessionFactoryImplementor . class )  ;", "serviceRegistry    =     (  ( StandardServiceRegistryImpl )     ( entityManagerFactory . getServiceRegistry (  )  . getParentServiceRegistry (  )  )  )  ;", "afterEntityManagerFactoryBuilt (  )  ;", "}", "METHOD_END"], "methodName": ["buildEntityManagerFactory"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   PersistenceUnitDescriptorAdapter (  )  ;", "}", "METHOD_END"], "methodName": ["buildPersistenceUnitDescriptor"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "Map   settings    =    getConfig (  )  ;", "addMappings ( settings )  ;", "if    ( createSchema (  )  )     {", "settings . put ( HBM 2 DDL _ AUTO ,     \" create - drop \"  )  ;", "final   String   secondSchemaName    =    createSecondSchema (  )  ;", "if    ( StringHelper . isNotEmpty ( secondSchemaName )  )     {", "if    (  !  (  ( getDialect (  )  )    instanceof   H 2 Dialect )  )     {", "throw   new   UnsupportedOperationException (  \" Only   H 2    dialect   supports   creation   of   second   schema .  \"  )  ;", "}", "Helper . createH 2 Schema ( secondSchemaName ,    settings )  ;", "}", "}", "if    ( StringHelper . isNotEmpty ( getAuditStrategy (  )  )  )     {", "settings . put ( Settings . AUDIT _ STRATEGY ,    getAuditStrategy (  )  )  ;", "}", "if    (  !  ( autoRegisterListeners (  )  )  )     {", "settings . put ( Integrator . AUTO _ REGISTER ,     \" false \"  )  ;", "}", "settings . put ( Settings . USE _ REVISION _ ENTITY _ WITH _ NATIVE _ ID ,     \" false \"  )  ;", "settings . put ( USE _ NEW _ ID _ GENERATOR _ MAPPINGS ,     \" true \"  )  ;", "settings . put ( DIALECT ,    getDialect (  )  . getClass (  )  . getName (  )  )  ;", "return   settings ;", "}", "METHOD_END"], "methodName": ["buildSettings"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( em )     !  =    null )     &  &     ( em . isOpen (  )  )  )     {", "em . close (  )  ;", "}", "em    =    entityManagerFactory . creEntityManager ( properties )  ;", "return   em ;", "}", "METHOD_END"], "methodName": ["createEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "EntityManager   isolatedEm    =    entityManagerFactory . createEntityManager (  )  ;", "isolatedEms . add ( isolatedEm )  ;", "return   isolatedEm ;", "}", "METHOD_END"], "methodName": ["createIsolatedEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "EntityManager   isolatedEm    =    entityManagerFactory . createEntityManager ( props )  ;", "isolatedEms . add ( isolatedEm )  ;", "return   isolatedEm ;", "}", "METHOD_END"], "methodName": ["createIsolatedEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["createSchema"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["createSecondSchema"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   entityManagerFactory ;", "}", "METHOD_END"], "methodName": ["entityManagerFactory"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BaseEnversJPAFunctionalTestCase . NO _ CLASSES ;", "}", "METHOD_END"], "methodName": ["getAnnotatedClasses"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( auditReader )     !  =    null )     {", "return   auditReader ;", "}", "return   auditReader    =    AuditReaderFactory . get ( getOrCreEntityManager (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAuditReader"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap < Class ,    String >  (  )  ;", "}", "METHOD_END"], "methodName": ["getCachedClasses"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   HashMap < String ,    String >  (  )  ;", "}", "METHOD_END"], "methodName": ["getCachedCollections"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "Map < Object ,    Object >    config    =    new   HashMap < Object ,    Object >  (  )  ;", "config . put ( LOADED _ CLASSES ,    Arrays . asList ( getAnnotatedClasses (  )  )  )  ;", "for    ( Map . Entry < Class ,    String >    entry    :    getCachedClasses (  )  . entrySet (  )  )     {", "config . put (  (  (  ( AvailableSettings . CLASS _ CACHE _ PREFIX )     +     \"  .  \"  )     +     ( entry . getKey (  )  . getName (  )  )  )  ,    entry . getValue (  )  )  ;", "}", "for    ( Map . Entry < String ,    String >    entry    :    getCachedColles (  )  . entrySet (  )  )     {", "config . put (  (  (  ( AvailableSettings . COLLECTION _ CACHE _ PREFIX )     +     \"  .  \"  )     +     ( entry . getKey (  )  )  )  ,    entry . getValue (  )  )  ;", "}", "if    (  ( getEjb 3 DD (  )  . length )     >     0  )     {", "ArrayList < String >    dds    =    new   ArrayList < String >  (  )  ;", "dds . addAll ( Arrays . asList ( getEjb 3 DD (  )  )  )  ;", "config . put ( XML _ FILE _ NAMES ,    dds )  ;", "}", "addConfigOptions ( config )  ;", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BaseEnversJPAFunctionalTestCase . dialect ;", "}", "METHOD_END"], "methodName": ["getDialect"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  ]  {        }  ;", "}", "METHOD_END"], "methodName": ["getEjb3DD"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   getOrCreateEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["getEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   BaseEnversJPAFunctionalTestCase . NO _ MAPPINGS ;", "}", "METHOD_END"], "methodName": ["getMappings"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( em )     =  =    null )     |  |     (  !  ( em . isOpen (  )  )  )  )     {", "em    =    entityManagerFactory . creEntityManager (  )  ;", "}", "return   em ;", "}", "METHOD_END"], "methodName": ["getOrCreateEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   entityManagerFactoryBuilder . getMetadata (  )  ;", "}", "METHOD_END"], "methodName": ["metadata"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( entityManagerFactory )     !  =    null )     &  &     ( entityManagerFactory . isOpen (  )  )  )     {", "entityManagerFactory . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseEntityManagerFactory"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "if    ( em    =  =    null )     {", "return ;", "}", "if    (  !  ( em . isOpen (  )  )  )     {", "em    =    null ;", "return ;", "}", "if    ( JtaStatusHelper . isActive ( INSTANCE . getTransaManager (  )  )  )     {", "log . warn (  \" Cleaning   up   unfinished   transa \"  )  ;", "try    {", "INSTANCE . getTransaManager (  )  . rollback (  )  ;", "}    catch    ( SystemException   ignored )     {", "}", "}", "try    {", "if    ( em . getTransa (  )  . isActive (  )  )     {", "em . getTransa (  )  . rollback (  )  ;", "log . warn (  \" You   left   an   open   transa !    Fix   your   test   case .    For   now ,    we   are   closing   it   for   you .  \"  )  ;", "}", "}    catch    ( IllegalStateException   e )     {", "}", "if    ( em . isOpen (  )  )     {", "em . close (  )  ;", "log . warn (  \" The   EntityManager   is   not   closed .    Closing   it .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseUnclosedEntityManager"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "releaseUnclosedEntityManager ( this . em )  ;", "auditReader    =    null ;", "for    ( EntityManager   isolatedEm    :    isolatedEms )     {", "releaseUnclosedEntityManager ( isolatedEm )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseUnclosedEntityManagers"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return   serviceRegistry ;", "}", "METHOD_END"], "methodName": ["serviceRegistry"], "fileName": "org.hibernate.envers.test.BaseEnversJPAFunctionalTestCase"}, {"methodBody": ["METHOD_START", "{", "return    (  ( List < Object [  ]  >  )     ( getParametersMethod ( klass )  . invokeExplosively ( null )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParametersList"], "fileName": "org.hibernate.envers.test.EnversRunner"}, {"methodBody": ["METHOD_START", "{", "List < FrameworkMethod >    methods    =    testClass . getAnnotatedMethods ( Parameters . class )  ;", "for    ( FrameworkMethod   each    :    methods )     {", "int   modifiers    =    each . getMethod (  )  . getModifiers (  )  ;", "if    (  ( Modifier . isStatic ( modifiers )  )     &  &     ( Modifier . isPublic ( modifiers )  )  )     {", "return   each ;", "}", "}", "throw   new   Exception (  (  \" No   public   static   parameters   method   on   class    \"     +     ( testClass . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParametersMethod"], "fileName": "org.hibernate.envers.test.EnversRunner"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( DefaultRevisionEntity _  . class )  ;", "Assert . assertNotNull ( DefaultTrackingModifiedEntitiesRevisionEntity _  . class )  ;", "Assert . assertNotNull ( SequenceIdRevisionEntity _  . class )  ;", "Assert . assertNotNull ( SequenceIdTrackingModifiedEntitiesRevisionEntity _  . class )  ;", "}", "METHOD_END"], "methodName": ["testStaticMetamodelGenerationHappened"], "fileName": "org.hibernate.envers.test.JpaStaticMetamodelTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( that . numVal )  )     :     ( that . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" INATE ( id    =     \"     +     ( id )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.IntNoAutoIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number )     !  =    null    ?     !  ( number . equals ( that . number )  )     :     ( that . number )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( num )     !  =    null    ?    num . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ITE ( id    =     \"     +     ( id )  )     +     \"  ,    number    =     \"  )     +     ( number )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.IntTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number )     !  =    null    ?     !  ( number . equals ( that . number )  )     :     ( that . number )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( num )     !  =    null    ?    num . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ITPSE ( id    =     \"     +     ( id )  )     +     \"  ,    number    =     \"  )     +     ( number )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.IntTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal 1  ;", "}", "METHOD_END"], "methodName": ["getNumVal1"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal 2  ;", "}", "METHOD_END"], "methodName": ["getNumVal2"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal 1     =    numVal 1  ;", "}", "METHOD_END"], "methodName": ["setNumVal1"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal 2     =    numVal 2  ;", "}", "METHOD_END"], "methodName": ["setNumVal2"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" PTE ( id    =     \"     +     ( id )  )     +     \"  ,    numVal 1     =     \"  )     +     ( numVal 1  )  )     +     \"  ,    numVal 2     =     \"  )     +     ( numVal 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.PrimitiveTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number )     !  =    null    ?     !  ( number . equals ( that . number )  )     :     ( that . number )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( num )     !  =    null    ?    num . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" SITE ( id    =     \"     +     ( id )  )     +     \"  ,    str 1     =     \"  )     +     ( str 1  )  )     +     \"  ,    number    =     \"  )     +     ( number )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.StrIntTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" STE ( id    =     \"     +     ( id )  )     +     \"  ,    str    =     \"  )     +     ( str )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.StrTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" STNPE ( id    =     \"     +     ( id )  )     +     \"  ,    str    =     \"  )     +     ( str )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.StrTestNoProxyEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" STPSE ( id    =     \"     +     ( id )  )     +     \"  ,    str    =     \"  )     +     ( str )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.StrTestPrivSeqEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data 1  )     !  =    null    ?     !  ( data 1  . equals ( that . data 1  )  )     :     ( that . data 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( data 2  )     !  =    null    ?     !  ( data 2  . equals ( that . data 2  )  )     :     ( that . data 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data 1  )     !  =    null    ?    data 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data 2  )     !  =    null    ?    data 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.UnversionedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . getStr (  )  )  )     :     ( that . getStr (  )  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" USTE ( id    =     \"     +     ( id )  )     +     \"  ,    str    =     \"  )     +     ( str )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.UnversionedStrTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   components ;", "}", "METHOD_END"], "methodName": ["getComponents"], "fileName": "org.hibernate.envers.test.entities.collection.CompositeCustomTypeSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.CompositeCustomTypeSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . components    =    components ;", "}", "METHOD_END"], "methodName": ["setComponents"], "fileName": "org.hibernate.envers.test.entities.collection.CompositeCustomTypeSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.CompositeCustomTypeSetEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "return   componentList ;", "}", "METHOD_END"], "methodName": ["getComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "return   otherData ;", "}", "METHOD_END"], "methodName": ["getOtherData"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "this . componentList    =    componentList ;", "}", "METHOD_END"], "methodName": ["setComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "this . otherData    =    otherData ;", "}", "METHOD_END"], "methodName": ["setOtherData"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ELE 1  ( id    =     \"     +     ( id )  )     +     \"  ,    otherData    =     \"  )     +     ( otherData )  )     +     \"  ,    componentList    =     \"  )     +     ( componentList )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "return   componentList ;", "}", "METHOD_END"], "methodName": ["getComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "this . componentList    =    componentList ;", "}", "METHOD_END"], "methodName": ["setComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ELE 2  ( id    =     \"     +     ( id )  )     +     \"  ,    componentList    =     \"  )     +     ( componentList )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "return   componentList ;", "}", "METHOD_END"], "methodName": ["getComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "this . componentList    =    componentList ;", "}", "METHOD_END"], "methodName": ["setComponentList"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ELE 3  ( id    =     \"     +     ( id )  )     +     \"  ,    componentList    =     \"  )     +     ( componentList )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableListEntity3"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   componentMap ;", "}", "METHOD_END"], "methodName": ["getComponentMap"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . componentMap    =    strings ;", "}", "METHOD_END"], "methodName": ["setComponentMap"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" EME ( id    =     \"     +     ( id )  )     +     \"  ,    componentMap    =     \"  )     +     ( componentMap )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableMapEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   componentSet ;", "}", "METHOD_END"], "methodName": ["getComponentSet"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . componentSet    =    componentSet ;", "}", "METHOD_END"], "methodName": ["setComponentSet"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ESE ( id    =     \"     +     ( id )  )     +     \"  ,    componentSet    =     \"  )     +     ( componentSet )  )     +     '  )  '  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EmbeddableSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   types ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . types    =    types ;", "}", "METHOD_END"], "methodName": ["setTypes"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapType"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapType"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapType"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.entities.collection.EnumMapType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   enums 1  ;", "}", "METHOD_END"], "methodName": ["getEnums1"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   enums 2  ;", "}", "METHOD_END"], "methodName": ["getEnums2"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . enums 1     =    enums 1  ;", "}", "METHOD_END"], "methodName": ["setEnums1"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . enums 2     =    enums 2  ;", "}", "METHOD_END"], "methodName": ["setEnums2"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ESE ( id    =     \"     +     ( id )  )     +     \"  ,    enums 1     =     \"  )     +     ( enums 1  )  )     +     \"  ,    enums 2     =     \"  )     +     ( enums 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.EnumSetEntity"}, {"methodBody": ["METHOD_START", "{", "refEntities 1  . add ( refEntity 1  )  ;", "}", "METHOD_END"], "methodName": ["addRefEntity1"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "refEntities 2  . add ( refEntity 2  )  ;", "}", "METHOD_END"], "methodName": ["addRefEntity2"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( refEntities 1  )  ;", "}", "METHOD_END"], "methodName": ["getRefEntities1"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( refEntities 2  )  ;", "}", "METHOD_END"], "methodName": ["getRefEntities2"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   text ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "refEntities 1  . remove ( refEntity 1  )  ;", "}", "METHOD_END"], "methodName": ["removeRefEntity1"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "refEntities 2  . remove ( refEntity 2  )  ;", "}", "METHOD_END"], "methodName": ["removeRefEntity2"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "this . refEntities 1     =    refEntities 1  ;", "}", "METHOD_END"], "methodName": ["setRefEntities1"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "this . refEntities 2     =    refEntities 2  ;", "}", "METHOD_END"], "methodName": ["setRefEntities2"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "this . text    =    text ;", "}", "METHOD_END"], "methodName": ["setText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "return   multipleCollectionEntity ;", "}", "METHOD_END"], "methodName": ["getMultipleCollectionEntity"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "return   multipleCollectionEntityId ;", "}", "METHOD_END"], "methodName": ["getMultipleCollectionEntityId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "return   text ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "this . multipleCollectionEntity    =    multipleCollectionEntity ;", "}", "METHOD_END"], "methodName": ["setMultipleCollectionEntity"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "this . multipleCollectionEntityId    =    multipleCollectionEntityId ;", "}", "METHOD_END"], "methodName": ["setMultipleCollectionEntityId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "this . text    =    text ;", "}", "METHOD_END"], "methodName": ["setText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "return   multipleCollectionEntity ;", "}", "METHOD_END"], "methodName": ["getMultipleCollectionEntity"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "return   multipleCollectionEntityId ;", "}", "METHOD_END"], "methodName": ["getMultipleCollectionEntityId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "return   text ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "this . multipleCollectionEntity    =    multipleCollectionEntity ;", "}", "METHOD_END"], "methodName": ["setMultipleCollectionEntity"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "this . multipleCollectionEntityId    =    multipleCollectionEntityId ;", "}", "METHOD_END"], "methodName": ["setMultipleCollectionEntityId"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "this . text    =    text ;", "}", "METHOD_END"], "methodName": ["setText"], "fileName": "org.hibernate.envers.test.entities.collection.MultipleCollectionRefEntity2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "return   strings ;", "}", "METHOD_END"], "methodName": ["getStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "this . strings    =    strings ;", "}", "METHOD_END"], "methodName": ["setStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SLE ( id    =     \"     +     ( id )  )     +     \"  ,    strings    =     \"  )     +     ( strings )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.StringListEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   strings ;", "}", "METHOD_END"], "methodName": ["getStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . strings    =    strings ;", "}", "METHOD_END"], "methodName": ["setStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SME ( id    =     \"     +     ( id )  )     +     \"  ,    strings    =     \"  )     +     ( strings )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.StringMapEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   strings ;", "}", "METHOD_END"], "methodName": ["getStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . strings    =    strings ;", "}", "METHOD_END"], "methodName": ["setStrings"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SSE ( id    =     \"     +     ( id )  )     +     \"  ,    strings    =     \"  )     +     ( strings )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.collection.StringSetEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 2  )     !  =    null    ?     !  ( str 2  . equals ( that . str 2  )  )     :     ( that . str 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( str 1  )     !  =    null )     ?    str 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 2  )     !  =    null    ?    str 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Comp 1  ( str 1     =     \"     +     ( str 1  )  )     +     \"  ,     \"  )     +     ( str 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.Component1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str 5  )     !  =    null    ?     !  ( str 5  . equals ( that . str 5  )  )     :     ( that . str 5  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 6  )     !  =    null    ?     !  ( str 6  . equals ( that . str 6  )  )     :     ( that . str 6  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "return   str 5  ;", "}", "METHOD_END"], "methodName": ["getStr5"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "return   str 6  ;", "}", "METHOD_END"], "methodName": ["getStr6"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( str 5  )     !  =    null )     ?    str 5  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 6  )     !  =    null    ?    str 6  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "this . str 5     =    str 5  ;", "}", "METHOD_END"], "methodName": ["setStr5"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "this . str 6     =    str 6  ;", "}", "METHOD_END"], "methodName": ["setStr6"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Comp 2  ( str 1     =     \"     +     ( str 5  )  )     +     \"  ,     \"  )     +     ( str 6  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.Component2"}, {"methodBody": ["METHOD_START", "{", "return   auditedComponent ;", "}", "METHOD_END"], "methodName": ["getAuditedComponent"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "return   nonAuditedComponent ;", "}", "METHOD_END"], "methodName": ["getNonAuditedComponent"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "this . auditedComponent    =    auditedComponent ;", "}", "METHOD_END"], "methodName": ["setAuditedComponent"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "this . nonAuditedComponent    =    nonAuditedComponent ;", "}", "METHOD_END"], "methodName": ["setNonAuditedComponent"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.components.Component3"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "return   key ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "this . key    =    key ;", "}", "METHOD_END"], "methodName": ["setKey"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.hibernate.envers.test.entities.components.Component4"}, {"methodBody": ["METHOD_START", "{", "return   comps ;", "}", "METHOD_END"], "methodName": ["getComps"], "fileName": "org.hibernate.envers.test.entities.components.ComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.ComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comps    =    comps ;", "}", "METHOD_END"], "methodName": ["setComps"], "fileName": "org.hibernate.envers.test.entities.components.ComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.ComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( comp 1  )     !  =    null    ?     !  ( comp 1  . equals ( that . comp 1  )  )     :     ( that . comp 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( comp 2  )     !  =    null    ?     !  ( comp 2  . equals ( that . comp 2  )  )     :     ( that . comp 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   comp 2  ;", "}", "METHOD_END"], "methodName": ["getComp2"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  (  1  )     !  =    null    ?     1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  (  2  )     !  =    null    ?     2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 2     =    comp 2  ;", "}", "METHOD_END"], "methodName": ["setComp2"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" CTE ( id    =     \"     +     ( id )  )     +     \"  ,    comp 1     =     \"  )     +     ( comp 1  )  )     +     \"  ,    comp 2     =     \"  )     +     ( comp 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( comp 2  )     !  =    null    ?     !  ( comp 2  . equals ( that . comp 2  )  )     :     ( that . comp 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "return   comp 2  ;", "}", "METHOD_END"], "methodName": ["getComp2"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( str 1  )     !  =    null )     ?    str 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  (  2  )     !  =    null    ?     2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponent 1    instance    =    new   DefaultValueComponent 1  (  )  ;", "instance . setStr 1  ( str 1  )  ;", "instance . setComp 2  ( comp 2  )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "this . comp 2     =    comp 2  ;", "}", "METHOD_END"], "methodName": ["setComp2"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Comp 1  ( str 1     =     \"     +     ( str 1  )  )     +     \"  ,    comp 2     =     \"  )     +     ( comp 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 2  )     !  =    null    ?     !  ( str 2  . equals ( that . str 2  )  )     :     ( that . str 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( str 1  )     !  =    null )     ?    str 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 2  )     !  =    null    ?    str 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponent 2    instance    =    new   DefaultValueComponent 2  (  )  ;", "instance . setStr 1  ( str 1  )  ;", "instance . setStr 2  ( str 2  )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Comp 2  ( str 1     =     \"     +     ( str 1  )  )     +     \"  ,    str 2     =     \"  )     +     ( str 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponent2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( comp 1  )     !  =    null    ?     !  ( comp 1  . equals ( that . comp 1  )  )     :     ( that . comp 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  (  1  )     !  =    null    ?     1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   instance    =    new   DefaultValueComponentTestEntity (  )  ;", "instance . setId ( id )  ;", "instance . setComp 1  ( comp 1  )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   instance    =    new   DefaultValueComponentTestEntity (  )  ;", "instance . setComp 1  ( comp 1  )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" CTE ( id    =     \"     +     ( id )  )     +     \"  ,    comp 1     =     \"  )     +     ( comp 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.DefaultValueComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" UniquePropsEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data 1     =     \"  )     +     ( data 1  )  )     +     \"  ,    data 2     =     \"  )     +     ( data 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" UniquePropsNotAuditedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data 1     =     \"  )     +     ( data 1  )  )     +     \"  ,    data 2     =     \"  )     +     ( data 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.UniquePropsNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return   entity ;", "}", "METHOD_END"], "methodName": ["getEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "this . entity    =    entity ;", "}", "METHOD_END"], "methodName": ["setEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ManyToOneComponent ( str 1     =     \"     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MTOCTE ( id    =     \"     +     ( id )  )     +     \"  ,    comp 1     =     \"  )     +     ( comp 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneEagerComponent"}, {"methodBody": ["METHOD_START", "{", "return   entity ;", "}", "METHOD_END"], "methodName": ["getEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneEagerComponent"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneEagerComponent"}, {"methodBody": ["METHOD_START", "{", "this . entity    =    entity ;", "}", "METHOD_END"], "methodName": ["setEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneEagerComponent"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ManyToOneEagerComponent ( data    =     \"     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.ManyToOneEagerComponent"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return   entity ;", "}", "METHOD_END"], "methodName": ["getEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "this . entity    =    entity ;", "}", "METHOD_END"], "methodName": ["setEntity"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return    (  \" NotAuditedManyToOneComponent ( str 1     =     \"     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponent"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" NAMTOCTE ( id    =     \"     +     ( id )  )     +     \"  ,    comp 1     =     \"  )     +     ( comp 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.NotAuditedManyToOneComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponent"}, {"methodBody": ["METHOD_START", "{", "return   entities ;", "}", "METHOD_END"], "methodName": ["getEntities"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponent"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponent"}, {"methodBody": ["METHOD_START", "{", "this . entities    =    entities ;", "}", "METHOD_END"], "methodName": ["setEntities"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponent"}, {"methodBody": ["METHOD_START", "{", "return    (  \" OneToManyComponent ( data    =     \"     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponent"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" OTMCTE ( id    =     \"     +     ( id )  )     +     \"  ,    comp 1     =     \"  )     +     ( comp 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.components.relations.OneToManyComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "StandardServiceRegistry   ssr    =    new   StandardServiceRegistryBuilder (  )  . applySetting ( HBM 2 DDL _ AUTO ,     \" create - drop \"  )  . build (  )  ;", "try    {", "Metadata   metadata    =    new   boot . MetadataSources ( ssr )  . addAnnotatedClass ( Person . class )  . getMetadataBuilder (  )  . applyAttributeConverter ( SexConverter . class )  . build (  )  ;", "(  ( MetadataImpl )     ( metadata )  )  . validate (  )  ;", "PersistentClass   personBinding    =    metadata . getEntityBinding ( Person . class . getName (  )  )  ;", "Assert . assertNotNull ( personBinding )  ;", "PersistentClass   personAuditBinding    =    metadata . getEntityBinding (  (  ( Person . class . getName (  )  )     +     \"  _ AUD \"  )  )  ;", "Assert . assertNotNull ( personAuditBinding )  ;", "}    finally    {", "StandardServiceRegistryBuilder . destroy ( ssr )  ;", "}", "}", "METHOD_END"], "methodName": ["testMetamodelBuilding"], "fileName": "org.hibernate.envers.test.entities.converter.BasicModelingTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( prop 2  )     !  =     ( that . prop 2  )  )     {", "return   false ;", "}", "if    (  ( prop 1  )     !  =    null    ?     !  ( prop 1  . equals ( that . prop 1  )  )     :     ( that . prop 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "return   prop 1  ;", "}", "METHOD_END"], "methodName": ["getProp1"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "return   prop 2  ;", "}", "METHOD_END"], "methodName": ["getProp2"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( prop 1  )     !  =    null )     ?    prop 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     ( prop 2  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "this . prop 1     =    prop 1  ;", "}", "METHOD_END"], "methodName": ["setProp1"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "this . prop 2     =    prop 2  ;", "}", "METHOD_END"], "methodName": ["setProp2"], "fileName": "org.hibernate.envers.test.entities.customtype.Component"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( component )     !  =    null    ?     !  ( component . equals ( that . component )  )     :     ( that . component )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   component ;", "}", "METHOD_END"], "methodName": ["getComponent"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( cnent )     !  =    null    ?    cnent . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . component    =    component ;", "}", "METHOD_END"], "methodName": ["setComponent"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" CCTE ( id    =     \"     +     ( id )  )     +     \"  ,    component    =     \"  )     +     ( component )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   cached ;", "}", "METHOD_END"], "methodName": ["assemble"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "Component   comp    =     (  ( Component )     ( value )  )  ;", "return   new   Component ( comp . getProp 1  (  )  ,    comp . getProp 2  (  )  )  ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Serializable )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["disassemble"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( x    =  =    y )     {", "retu   true ;", "}", "if    (  ( x    =  =    null )     |  |     ( y    =  =    null )  )     {", "retu   false ;", "}", "retu   x . equals ( y )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   new   String [  ]  {     \" prop 1  \"  ,     \" prop 2  \"     }  ;", "}", "METHOD_END"], "methodName": ["getPropertyNames"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   new   Type [  ]  {    StringType . INSTANCE ,    IntegerType . INSTANCE    }  ;", "}", "METHOD_END"], "methodName": ["getPropertyTypes"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "Component   comp    =     (  ( Component )     ( component )  )  ;", "if    ( property    =  =     0  )     {", "return   comp . getProp 1  (  )  ;", "} else    {", "return   comp . getProp 2  (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getPropertyValue"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   x . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isMutable"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "final   String   prop 1     =    rs . getString ( names [  0  ]  )  ;", "if    ( prop 1     =  =    null )     {", "return   null ;", "}", "final   int   prop 2     =    rs . getInt ( names [  1  ]  )  ;", "return   new   nent ( prop 1  ,    prop 2  )  ;", "}", "METHOD_END"], "methodName": ["nullSafeGet"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "st . setNull ( index ,    INSTANCE . sqlType (  )  )  ;", "st . setNull (  ( index    +     1  )  ,    Integ . INSTANCE . sqlType (  )  )  ;", "} else    {", "final   Component   comp    =     (  ( Component )     ( value )  )  ;", "st . setString ( index ,    comp . getProp 1  (  )  )  ;", "st . setInt (  ( index    +     1  )  ,    comp . getProp 2  (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nullSafeSet"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   original ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   Component . class ;", "}", "METHOD_END"], "methodName": ["returnedClass"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "Component   comp    =     (  ( Component )     ( component )  )  ;", "if    ( property    =  =     0  )     {", "comp . setProp 1  (  (  ( String )     ( value )  )  )  ;", "} else    {", "comp . setProp 2  (  (  ( Integer )     ( value )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setPropertyValue"], "fileName": "org.hibernate.envers.test.entities.customtype.CompositeTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   enum 1  ;", "}", "METHOD_END"], "methodName": ["getEnum1"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   enum 2  ;", "}", "METHOD_END"], "methodName": ["getEnum2"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 1     =    enum 1  ;", "}", "METHOD_END"], "methodName": ["setEnum1"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 2     =    enum 2  ;", "}", "METHOD_END"], "methodName": ["setEnum2"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.customtype.EnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" PCTE ( id    =     \"     +     ( id )  )     +     \"  ,    str    =     \"  )     +     ( str )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedCustomTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   cached ;", "}", "METHOD_END"], "methodName": ["assemble"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Serializable )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["disassemble"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( x    =  =    y )     {", "rurn   true ;", "}", "if    (  ( x    =  =    null )     |  |     ( y    =  =    null )  )     {", "rurn   false ;", "}", "rurn   x . equals ( y )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   x . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isMutable"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   INSTANCE . nullSafeGet ( rs ,    names [  0  ]  ,    session )  ;", "}", "METHOD_END"], "methodName": ["nullSafeGet"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "String   v    =     (  ( String )     ( value )  )  ;", "if    (  !  ( v . startsWith ( p 1  )  )  )     {", "v    =     ( p 1  )     +    v ;", "}", "if    (  !  ( v . endsWith ( p 2  )  )  )     {", "v    =    v    +     ( p 2  )  ;", "}", "INSTANCE . nullSafeSet ( st ,    v ,    index ,    session )  ;", "} else    {", "INSTANCE . nullSafeSet ( st ,    null ,    index ,    session )  ;", "}", "}", "METHOD_END"], "methodName": ["nullSafeSet"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   original ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   String . class ;", "}", "METHOD_END"], "methodName": ["returnedClass"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "param 1     =    parameters . getProperty (  \" param 1  \"  )  ;", "param 2     =    parameters . getProperty (  \" param 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["setParameterValues"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   ParametrizedTestUserType . TYPES ;", "}", "METHOD_END"], "methodName": ["sqlTypes"], "fileName": "org.hibernate.envers.test.entities.customtype.ParametrizedTestUserType"}, {"methodBody": ["METHOD_START", "{", "return   enum 1  ;", "}", "METHOD_END"], "methodName": ["getEnum1"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   enum 2  ;", "}", "METHOD_END"], "methodName": ["getEnum2"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 1     =    enum 1  ;", "}", "METHOD_END"], "methodName": ["setEnum1"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 2     =    enum 2  ;", "}", "METHOD_END"], "methodName": ["setEnum2"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.customtype.UnspecifiedEnumTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.CompositeDateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.ids.CompositeDateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.CompositeDateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.ids.CompositeDateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    \" Y \"  . equals ( value )     ?    CustomEnum . YES    :    CustomEnum . NO ;", "}", "METHOD_END"], "methodName": ["fromYesNo"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnum"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( CustomEnum . YES )     ?     \" Y \"     :     \" N \"  ;", "}", "METHOD_END"], "methodName": ["toYesNo"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnum"}, {"methodBody": ["METHOD_START", "{", "return   cached ;", "}", "METHOD_END"], "methodName": ["assemble"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["deepCopy"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Serializable )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["disassemble"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( x    =  =    y )     {", "retu   true ;", "}", "if    (  ( x    =  =    null )     |  |     ( y    =  =    null )  )     {", "retu   false ;", "}", "retu   x . equals ( y )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   x    =  =    null    ?     0     :    x . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isMutable"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "String   name    =    rs . getString ( names [  0  ]  )  ;", "if    ( rs . wasNull (  )  )     {", "return   null ;", "}", "return    . fromYesNo ( name )  ;", "}", "METHOD_END"], "methodName": ["nullSafeGet"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "CustomEnum   val    =     (  ( CustomEnum )     ( value )  )  ;", "if    ( val    =  =    null )     {", "st . setNull ( index ,    Types . VARCHAR )  ;", "} else    {", "st . setString ( index ,    val . toYesNo (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nullSafeSet"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   original ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   CustomEnum . class ;", "}", "METHOD_END"], "methodName": ["returnedClass"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "return   CustomEnumUserType . SQL _ TYPES ;", "}", "METHOD_END"], "methodName": ["sqlTypes"], "fileName": "org.hibernate.envers.test.entities.ids.CustomEnumUserType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "embId    =     (  (  )     ( o )  )  ;", "if    (  ( x )     !  =    null    ?     !  ( x . equals ( embId . x )  )     :     ( embId . x )     !  =    null )     {", "return   false ;", "}", "if    (  ( y )     !  =    null    ?     !  ( y . equals ( embId . y )  )     :     ( embId . y )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "return   x ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "return   y ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( x )     !  =    null )     ?    x . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( y )     !  =    null    ?    y . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "this . x    =    x ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "this . y    =    y ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DateEmbId (  \"     +     ( x )  )     +     \"  ,     \"  )     +     ( y )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.ids.DateEmbId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.DateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.ids.DateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.DateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.ids.DateIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "embId    =     (  (  )     ( o )  )  ;", "if    (  ( x )     !  =    null    ?     !  ( x . equals ( embId . x )  )     :     ( embId . x )     !  =    null )     {", "return   false ;", "}", "if    (  ( y )     !  =    null    ?     !  ( y . equals ( embId . y )  )     :     ( embId . y )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "return   x ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "return   y ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( x )     !  =    null )     ?    x . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( y )     !  =    null    ?    y . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "this . x    =    x ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "this . y    =    y ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" EmbId (  \"     +     ( x )  )     +     \"  ,     \"  )     +     ( y )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.ids.EmbId"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   customEnum ;", "}", "METHOD_END"], "methodName": ["getCustomEnum"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomType"}, {"methodBody": ["METHOD_START", "{", "return   x ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomType"}, {"methodBody": ["METHOD_START", "{", "this . customEnum    =    customEnum ;", "}", "METHOD_END"], "methodName": ["setCustomEnum"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomType"}, {"methodBody": ["METHOD_START", "{", "this . x    =    x ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    obj )     {", "return   true ;", "}", "if    (  !  ( obj   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( obj )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.ids.EmbIdWithCustomTypeTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneIdNotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneIdNotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneIdNotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneIdNotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneNotAuditedEmbId"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.ids.ManyToOneNotAuditedEmbId"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "mulId    =     (  (  )     ( o )  )  ;", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( mulId . id 1  )  )     :     ( mulId . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( mulId . id 2  )  )     :     ( mulId . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MulId (  \"     +     ( id 1  )  )     +     \"  ,     \"  )     +     ( id 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.ids.MulId"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.entities.ids.MulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   uniqueField ;", "}", "METHOD_END"], "methodName": ["getUniqueField"], "fileName": "org.hibernate.envers.test.entities.ids.UnusualIdNamingEntity"}, {"methodBody": ["METHOD_START", "{", "return   variousData ;", "}", "METHOD_END"], "methodName": ["getVariousData"], "fileName": "org.hibernate.envers.test.entities.ids.UnusualIdNamingEntity"}, {"methodBody": ["METHOD_START", "{", "this . uniqueField    =    uniqueField ;", "}", "METHOD_END"], "methodName": ["setUniqueField"], "fileName": "org.hibernate.envers.test.entities.ids.UnusualIdNamingEntity"}, {"methodBody": ["METHOD_START", "{", "this . variousData    =    variousData ;", "}", "METHOD_END"], "methodName": ["setVariousData"], "fileName": "org.hibernate.envers.test.entities.ids.UnusualIdNamingEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetOwnedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetOwningEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.ListOwningEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MapOwnedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MapOwningEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.MapOwningEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetOwnedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwnedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetOwningEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.SetOwningEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "return    (  !  (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )  )     &  &     (  !  (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   sortedMap ;", "}", "METHOD_END"], "methodName": ["getSortedMap"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   sortedSet ;", "}", "METHOD_END"], "methodName": ["getSortedSet"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . sortedMap    =    sortedMap ;", "}", "METHOD_END"], "methodName": ["setSortedMap"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . sortedSet    =    sortedSet ;", "}", "METHOD_END"], "methodName": ["setSortedSet"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetOwnedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.SortedSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return   references 1  ;", "}", "METHOD_END"], "methodName": ["getReferences1"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return   references 2  ;", "}", "METHOD_END"], "methodName": ["getReferences2"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . references 1     =    references 1  ;", "}", "METHOD_END"], "methodName": ["setReferences1"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . references 2     =    references 2  ;", "}", "METHOD_END"], "methodName": ["setReferences2"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" WJTE ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.WhereJoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListBiowning 1 Entity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning1Entity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListBiowning 2 Entity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.biowned.ListBiowning2Entity"}, {"methodBody": ["METHOD_START", "{", "return   child 1 Data ;", "}", "METHOD_END"], "methodName": ["getChild1Data"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "return   parents ;", "}", "METHOD_END"], "methodName": ["getParents"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "this . child 1 Data    =    child 1 Data ;", "}", "METHOD_END"], "methodName": ["setChild1Data"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "this . parents    =    parents ;", "}", "METHOD_END"], "methodName": ["setParents"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" C 1 E ( id    =     \"     +     ( id )  )     +     \"  ,    child 1 Data    =     \"  )     +     ( child 1 Data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity"}, {"methodBody": ["METHOD_START", "{", "return   child 2 Data ;", "}", "METHOD_END"], "methodName": ["getChild2Data"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "return   parents ;", "}", "METHOD_END"], "methodName": ["getParents"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "this . child 2 Data    =    child 2 Data ;", "}", "METHOD_END"], "methodName": ["setChild2Data"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "this . parents    =    parents ;", "}", "METHOD_END"], "methodName": ["setParents"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" C 2 E ( id    =     \"     +     ( id )  )     +     \"  ,    child 2 Data    =     \"  )     +     ( child 2 Data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity"}, {"methodBody": ["METHOD_START", "{", "return   children 1  ;", "}", "METHOD_END"], "methodName": ["getChildren1"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   children 2  ;", "}", "METHOD_END"], "methodName": ["getChildren2"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   parentData ;", "}", "METHOD_END"], "methodName": ["getParentData"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . children 1     =    children 1  ;", "}", "METHOD_END"], "methodName": ["setChildren1"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . children 2     =    children 2  ;", "}", "METHOD_END"], "methodName": ["setChildren2"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . parentData    =    parentData ;", "}", "METHOD_END"], "methodName": ["setParentData"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" PE ( id    =     \"     +     ( id )  )     +     \"  ,    parentData    =     \"  )     +     ( parentData )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.JoinTableEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListUniEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ListUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MIndexedListTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . getData (  )  )  )     :     ( that . getData (  )  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" M 2 MTargetNotAuditedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.M2MTargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )", "return   true ;", "if    (  !  ( o   instanceof    )  )", "return   false ;", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . getData (  )  )  )     :     ( that . getData (  )  )     !  =    null )", "return   false ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ManyToManyNotAuditedNullEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.ManyToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   map ;", "}", "METHOD_END"], "methodName": ["getMap"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . map    =    map ;", "}", "METHOD_END"], "methodName": ["setMap"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MapUniEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.MapUniEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetUniEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytomany.unidirectional.SetUniEntity"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ExtManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . extension    =    extension ;", "}", "METHOD_END"], "methodName": ["setExtension"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ExtManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )", "return   true ;", "if    (  !  ( o   instanceof    )  )", "return   false ;", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . getData (  )  )  )     :     ( that . getData (  )  )     !  =    null )", "return   false ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ManyToOneNotAuditedNullEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.ManyToOneNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . getData (  )  )  )     :     ( that . getData (  )  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" TargetNotAuditedEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.manytoone.unidirectional.TargetNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" CollectionRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" CollectionRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.CollectionRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ListRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )", "return   true ;", "if    (  !  ( o   instanceof    )  )", "return   false ;", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . getData (  )  )  )     :     ( that . getData (  )  )     !  =    null )", "return   false ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . getId (  )  )  )     :     ( that . getId (  )  )     !  =    null )", "return   false ;", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" OneToManyNotAuditedNullEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.OneToManyNotAuditedNullEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DoubleListJoinColumnBidirectionalRefIngEntity 1  ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DoubleListJoinColumnBidirectionalRefIngEntity 2  ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefEdEntity2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references 1  ;", "}", "METHOD_END"], "methodName": ["getReferences1"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references 2  ;", "}", "METHOD_END"], "methodName": ["getReferences2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references 1     =    references 1  ;", "}", "METHOD_END"], "methodName": ["setReferences1"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references 2     =    references 2  ;", "}", "METHOD_END"], "methodName": ["setReferences2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DoubleListJoinColumnBidirectionalRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection 2  ;", "}", "METHOD_END"], "methodName": ["getCollection2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection 2     =    collection 2  ;", "}", "METHOD_END"], "methodName": ["setCollection2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DoubleSetRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.DoubleSetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   position ;", "}", "METHOD_END"], "methodName": ["getPosition"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . position    =    position ;", "}", "METHOD_END"], "methodName": ["setPosition"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" IndexedListJoinColumnBidirectionalRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" IndexedListJoinColumnBidirectionalRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.IndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   childData ;", "}", "METHOD_END"], "methodName": ["getChildData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . childData    =    childData ;", "}", "METHOD_END"], "methodName": ["setChildData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ListJoinColumnBidirectionalInheritanceRefEdChildEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    parentData    =     \"  )     +     ( getParentData (  )  )  )     +     \"  ,    childData    =     \"  )     +     ( childData )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdChildEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( parentData )     !  =    null    ?     !  ( parentData . equals ( that . parentData )  )     :     ( that . parentData )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   parentData ;", "}", "METHOD_END"], "methodName": ["getParentData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( pData )     !  =    null    ?    pData . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . parentData    =    parentData ;", "}", "METHOD_END"], "methodName": ["setParentData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListJoinColumnBidirectionalInheritanceRefEdParentEntity ( id    =     \"     +     ( id )  )     +     \"  ,    parentData    =     \"  )     +     ( parentData )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefEdParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListJoinColumnBidirectionalInheritanceRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalInheritanceRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListJoinColumnBidirectionalRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ListJoinColumnBidirectionalRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ListRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetJoinColumnRefCollEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetJoinColumnRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.SetRefCollEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefCollEntityEmbId ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityEmbId"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" SetRefCollEntityMulId ( id 1     =     \"     +     ( id 1  )  )     +     \"  ,    id 2     =     \"  )     +     ( id 2  )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.ids.SetRefCollEntityMulId"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ChildIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ChildIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIndexedListJoinColumnBidirectionalRefIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    data 2     =     \"  )     +     ( data 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ChildIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentIndexedListJoinColumnBidirectionalRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentIndexedListJoinColumnBidirectionalRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   position ;", "}", "METHOD_END"], "methodName": ["getPosition"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . position    =    position ;", "}", "METHOD_END"], "methodName": ["setPosition"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.detached.inheritance.ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefEdEmbIdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" SetRefEdMulIdEntity ( id 1     =     \"     +     ( id 1  )  )     +     \"  ,    id 2     =     \"  )     +     ( id 2  )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefEdMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefIngEmbIdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngEmbIdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" SetRefIngMulIdEntity ( id 1     =     \"     +     ( id 1  )  )     +     \"  ,    id 2     =     \"  )     +     ( id 2  )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.entities.onetomany.ids.SetRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefEdOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefEdOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   refIng ;", "}", "METHOD_END"], "methodName": ["getRefIng"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefEdOneToOne"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefEdOneToOne"}, {"methodBody": ["METHOD_START", "{", "this . refIng    =    refIng ;", "}", "METHOD_END"], "methodName": ["setRefIng"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefEdOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   refedOne ;", "}", "METHOD_END"], "methodName": ["getRefedOne"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   refedTwo ;", "}", "METHOD_END"], "methodName": ["getRefedTwo"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "this . refedOne    =    refedOne ;", "}", "METHOD_END"], "methodName": ["setRefedOne"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "this . refedTwo    =    refedTwo ;", "}", "METHOD_END"], "methodName": ["setRefedTwo"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerAnnotationRefIngOneToOne"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefEdPK"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.entities.onetoone.BidirectionalEagerHbmRefIngPK"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDataRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDateRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   dateTimestamp ;", "}", "METHOD_END"], "methodName": ["getDateTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDateRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDateRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . dateTimestamp    =    dateTimestamp ;", "}", "METHOD_END"], "methodName": ["setDateTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomDateRevEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =     ( that . customId )  )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =     ( that . customTimestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    cId ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( cTimestamp )     ^     (  ( cTimestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomPropertyAccessRevEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =     ( that . customId )  )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =     ( that . customTimestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    cId ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( cTimestamp )     ^     (  ( cTimestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntityColumnMapping"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntityColumnMapping"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntityColumnMapping"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.CustomRevEntityColumnMapping"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =     ( that . customId )  )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =     ( that . customTimestamp )  )     {", "return   false ;", "}", "if    (  ( entityNames )     !  =    null    ?     !  ( entityNames . equals ( that . entityNames )  )     :     ( that . entityNames )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   entityNames ;", "}", "METHOD_END"], "methodName": ["getEntityNames"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    customId ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( customTimestamp )     ^     (  ( customTimestamp )     >  >  >     3  2  )  )  )  ;", "result    =     (  3  1     *    result )     +     (  ( Names )     !  =    null    ?    Names . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . entityNames    =    entityNames ;", "}", "METHOD_END"], "methodName": ["setEntityNames"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.AnnotatedTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "modifiedEntityTypes . add ( new   ModifiedEntityTypeEntity ( this ,    entityClassName )  )  ;", "}", "METHOD_END"], "methodName": ["addModifiedEntityType"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =     ( that . customId )  )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =     ( that . customTimestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   modifiedEntityTypes ;", "}", "METHOD_END"], "methodName": ["getModifiedEntityTypes"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    customId ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( cimestamp )     ^     (  ( cimestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . modifiedEntityTypes    =    modifiedEntityTypes ;", "}", "METHOD_END"], "methodName": ["setModifiedEntityTypes"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.CustomTrackingRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ExtendedRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . comment    =    comment ;", "}", "METHOD_END"], "methodName": ["setComment"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ExtendedRevisionEntity"}, {"methodBody": ["METHOD_START", "{", "(  ( ExtendedRevisionEntity )     ( revisionEntity )  )  . setComment ( ExtendedRevisionListener . COMMENT _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["newRevision"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ExtendedRevisionListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( entityClassName )     !  =    null    ?     !  ( entityClassName . equals ( that . entityClassName )  )     :     ( that . entityClassName )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   entityClassName ;", "}", "METHOD_END"], "methodName": ["getEntityClassName"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   revision ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( entityClassName )     !  =    null    ?    entityClassName . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . entityClassName    =    entityClassName ;", "}", "METHOD_END"], "methodName": ["setEntityClassName"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . revision    =    revision ;", "}", "METHOD_END"], "methodName": ["setRevision"], "fileName": "org.hibernate.envers.test.entities.reventity.trackmodifiedentities.ModifiedEntityTypeEntity"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue ( AttributeAccessorTest . BasicAttributeAccessor . invoked )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Foo   foo    =    new   Foo (  1  ,     \" ABC \"  )  ;", "entityManager . persist ( foo )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Foo   foo    =    getAuditReader (  )  . find (  . class ,     1  ,     1  )  ;", "assertEquals (  \" ABC \"  ,    foo . getName (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testAttributeAccessor"], "fileName": "org.hibernate.envers.test.integration.accesstype.AttributeAccessorTest"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["getCode"], "fileName": "org.hibernate.envers.test.integration.accesstype.Country"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.accesstype.Country"}, {"methodBody": ["METHOD_START", "{", "return   new   Country ( code ,    name )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.hibernate.envers.test.integration.accesstype.Country"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   fate    =    new   Entity (  \" data \"  )  ;", "em . persist ( fate )  ;", "id 1     =    fate . readId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fate    =    em . find ( Entity . class ,    id 1  )  ;", "fate . writeData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessType"}, {"methodBody": ["METHOD_START", "{", "FieldAccessTypeEntity   ver 1     =    new   FieldAccessTypeEntity ( id 1  ,     \" data \"  )  ;", "FieldAccessTypeEntity   ver 2     =    new   FieldAccessTypeEntity ( id 1  ,     \" data 2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( FieldAccessTypeEntity . class ,    id 1  ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( FieldAccessTypeEntity . class ,    id 1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessType"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( FieldAccessTypeEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["readId"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["writeData"], "fileName": "org.hibernate.envers.test.integration.accesstype.FieldAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "country    =    Country . of (  1  2  3  ,     \" Germany \"  )  ;", "em . persist ( country )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.accesstype.ImmutableClassAccessType"}, {"methodBody": ["METHOD_START", "{", "Country   country 1     =    getEntityManager (  )  . find ( Country . class ,    country . getCode (  )  )  ;", "Assert . assertEquals ( country 1  ,    country )  ;", "Country   history    =    getAuditReader (  )  . find ( Country . class ,    country 1  . getCode (  )  ,     1  )  ;", "Assert . assertEquals ( country ,    history )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.accesstype.ImmutableClassAccessType"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Country . class ,    country . getCode (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.accesstype.ImmutableClassAccessType"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   mate    =    new   Entity (  \" data \"  )  ;", "em . persist ( mate )  ;", "id 1     =    mate . readId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mate    =    em . find ( Entity . class ,    id 1  )  ;", "mate . writeData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessType"}, {"methodBody": ["METHOD_START", "{", "MixedAccessTypeEntity   ver 1     =    new   MixedAccessTypeEntity ( id 1  ,     \" data \"  )  ;", "MixedAccessTypeEntity   ver 2     =    new   MixedAccessTypeEntity ( id 1  ,     \" data 2  \"  )  ;", "MixedAccessTypeEntity   rev 1     =    getAuditReader (  )  . find ( MixedAccessTypeEntity . class ,    id 1  ,     1  )  ;", "MixedAccessTypeEntity   rev 2     =    getAuditReader (  )  . find ( MixedAccessTypeEntity . class ,    id 1  ,     2  )  ;", "assert   rev 1  . isDataSet (  )  ;", "assert   rev 2  . isDataSet (  )  ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessType"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( MixedAccessTypeEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   dataSet ;", "}", "METHOD_END"], "methodName": ["isDataSet"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["readId"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "dataSet    =    true ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  )  ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["writeData"], "fileName": "org.hibernate.envers.test.integration.accesstype.MixedAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   pate    =    new   Entity (  \" data \"  )  ;", "em . persist ( pate )  ;", "id 1     =    pate . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pate    =    em . find ( Entity . class ,    id 1  )  ;", "pate . writeData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessType"}, {"methodBody": ["METHOD_START", "{", "PropertyAccessTypeEntity   ver 1     =    new   PropertyAccessTypeEntity ( id 1  ,     \" data \"  )  ;", "PropertyAccessTypeEntity   ver 2     =    new   PropertyAccessTypeEntity ( id 1  ,     \" data 2  \"  )  ;", "PropertyAccessTypeEntity   rev 1     =    getAuditReader (  )  . find ( PropertyAccessTypeEntity . class ,    id 1  ,     1  )  ;", "PropertyAccessTypeEntity   rev 2     =    getAuditReader (  )  . find ( PropertyAccessTypeEntity . class ,    id 1  ,     2  )  ;", "assert   rev 1  . isIdSet (  )  ;", "assert   rev 2  . isIdSet (  )  ;", "assert   rev 1  . isDataSet (  )  ;", "assert   rev 2  . isDataSet (  )  ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessType"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( PropertyAccessTypeEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   dataSet ;", "}", "METHOD_END"], "methodName": ["isDataSet"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   idSet ;", "}", "METHOD_END"], "methodName": ["isIdSet"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "dataSet    =    true ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "idSet    =    true ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["writeData"], "fileName": "org.hibernate.envers.test.integration.accesstype.PropertyAccessTypeEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "edTestEntity   ent 1     =    new   edTestEntity (  1  ,     \" str 1  \"  )  ;", "NotedTestEntity   ent 2     =    new   NotedTestEntity (  1  ,     \" str 1  \"  )  ;", "em . persist ( ent 1  )  ;", "em . persist ( ent 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ent 1     =    em . find ( edTestEntity . class ,     1  )  ;", "ent 2     =    em . find ( NotedTestEntity . class ,     1  )  ;", "ent 1  . setStr 1  (  \" str 2  \"  )  ;", "ent 2  . setStr 1  (  \" str 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ent 1     =    em . find ( edTestEntity . class ,     1  )  ;", "em . remove ( ent 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "try    {", "List <  ?  >    revisionInfos    =    get (  )  . createQuery (  )  . forRevisionsOfEntity ( NotAuditedTestEntity . class ,    false )  . getResultList (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( NotAuditedException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testFindRevisionEntitiesNonAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "List <  ?  >    revisionInfos    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( AuditedTestEntity . class ,    true )  . getResultList (  )  ;", "Assert . assertEquals (  3  ,    revisionInfos . size (  )  )  ;", "revisionInfos . forEach (  (    e )     -  >    assertTyping ( SequenceIdRevisionEntity . class ,    e )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisionEntitiesWithDeletions"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "List <  ?  >    revisionInfos    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( AuditedTestEntity . class ,    false )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    revisionInfos . size (  )  )  ;", "revisionInfos . forEach (  (    e )     -  >    assertTyping ( SequenceIdRevisionEntity . class ,    e )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisionEntitiesWithoutDeletions"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertTrue ( getAuditReader (  )  . isEntityClassAudited ( AuditedTestEntity . class )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( AuditedTestEntity . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsEntityClassAuditedForAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "assert    !  ( getAuditReader (  )  . isEntityClassAudited ( NotAuditedTestEntity . class )  )  ;", "try    {", "getAuditReader (  )  . getRevisions ( NotAuditedTestEntity . class ,     1  )  ;", "}    catch    ( NotAuditedException   nae )     {", "assert   true ;", "}", "}", "METHOD_END"], "methodName": ["testIsEntityClassAuditedForNotAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditReaderAPITest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.auditReader.AuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.auditReader.NotAuditedTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( long 1  )     !  =     ( that . long 1  )  )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   long 1  ;", "}", "METHOD_END"], "methodName": ["getLong1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( long 1  )     ^     (  ( long 1  )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . long 1     =    long 1  ;", "}", "METHOD_END"], "methodName": ["setLong1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 2  )     !  =    null    ?     !  ( str 2  . equals ( that . str 2  )  )     :     ( that . str 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( str 2  )     !  =    null    ?    str 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 2  )     !  =    null    ?     !  ( str 2  . equals ( that . str 2  )  )     :     ( that . str 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( str 2  )     !  =    null    ?    str 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity3"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 2  )     !  =    null    ?     !  ( str 2  . equals ( that . str 2  )  )     :     ( that . str 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( str 2  )     !  =    null    ?    str 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.basic.BasicTestEntity4"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . BigDecimalEntity   entity    =    new    . BigDecimalEntity ( BigDecimal . valueOf ( bigDecimalValue )  ,     \" Test \"  )  ;", "System . out . println ( entity . getBigDecimal (  )  . scale (  )  )  ;", "entityManager . persist ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "this . entityId    =    entity . getId (  )  ;", "}    catch    ( Throwable   t )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   t ;", "}    finally    {", "entityManager . close (  )  ;", "}", "entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . BigDecimalEntity   entity    =    entityManager . find (  . BigDecimalEntity . class ,    entityId )  ;", "entity . setData (  \" Updated \"  )  ;", "entity . setBigDecimal ( BigDecimal . valueOf ( bigDecimalValue )  )  ;", "entityManager . merge ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Throwable   t )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   t ;", "}    finally    {", "entityManager . close (  )  ;", "}", "entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . BigDecimalEntity   entity    =    entityManager . find (  . BigDecimalEntity . class ,    entityId )  ;", "entity . setData (  \" Updated 2  \"  )  ;", "entity . setBigDecimal ( BigDecimal . valueOf (  (  ( bigDecimalValue )     +     1  .  0  )  )  )  ;", "entityManager . merge ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Throwable   t )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   t ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.BigDecimalTypeTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( BigDecimalTypeTest . BigDecimalEntity . class ,    entityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.basic.BigDecimalTypeTest"}, {"methodBody": ["METHOD_START", "{", "final   BigDecimalTypeTest . BigDecimalEntity   rev 1     =    getAuditReader (  )  . find ( BigDecimalTypeTest . BigDecimalEntity . class ,    entityId ,     1  )  ;", "Assert . assertTrue (  (  ( BigDecimal . valueOf ( bigDecimalValue )  . compareTo ( rev 1  . getBigDecimal (  )  )  )     =  =     0  )  )  ;", "Assert . assertNull ( rev 1  . getData (  )  )  ;", "final   BigDecimalTypeTest . BigDecimalEntity   rev 2     =    getAuditReader (  )  . find ( BigDecimalTypeTest . BigDecimalEntity . class ,    entityId ,     2  )  ;", "Assert . assertTrue (  (  ( BigDecimal . valueOf (  (  ( bigDecimalValue )     +     1  .  0  )  )  . compareTo ( rev 2  . getBigDecimal (  )  )  )     =  =     0  )  )  ;", "Assert . assertNull ( rev 2  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.basic.BigDecimalTypeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ScalePrecisionEntity   entity    =    new   ScalePrecisionEntity (  1  3  .  0  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "auditTable    =    metadata (  )  . getEntityBinding (  \" ScalePrecisionEntity _ AUD \"  )  . getTable (  )  ;", "originalTable    =    metadata (  )  . getEntityBinding (  \" ScalePrecisionEntity \"  )  . getTable (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.ColumnScalePrecisionTest"}, {"methodBody": ["METHOD_START", "{", "Column   testColumn    =    new   Column (  \" wholeNumber \"  )  ;", "Column   sAuditColumn    =    auditTable . getColumn ( testColumn )  ;", "Column   sColumn    =    originalTable . getColumn ( testColumn )  ;", "Assert . assertNotNull ( sAuditColumn )  ;", "Assert . assertEquals ( sColumn . getPrecision (  )  ,    sAuditColumn . getPrecision (  )  )  ;", "Assert . assertEquals ( sColumn . getScale (  )  ,    sAuditColumn . getScale (  )  )  ;", "}", "METHOD_END"], "methodName": ["testColumnScalePrecision"], "fileName": "org.hibernate.envers.test.integration.basic.ColumnScalePrecisionTest"}, {"methodBody": ["METHOD_START", "{", "ScalePrecisionEntity   ver 1     =    new   ScalePrecisionEntity (  1  3  .  0  ,    id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( ScalePrecisionEntity . class ,    id ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfScalePrecisionEntity"], "fileName": "org.hibernate.envers.test.integration.basic.ColumnScalePrecisionTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( ScalePrecisionEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.ColumnScalePrecisionTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 2    bte 1     =    new   BasicTestEntity 2  (  \" x \"  ,     \" a \"  )  ;", "BasicTestEntity 2    bte 2     =    new   BasicTestEntity 2  (  \" y \"  ,     \" b \"  )  ;", "BasicTestEntity 2    bte 3     =    new   BasicTestEntity 2  (  \" z \"  ,     \" c \"  )  ;", "em . persist ( bte 1  )  ;", "em . persist ( bte 2  )  ;", "em . persist ( bte 3  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "bte 1     =    em . find ( BasicTestEntity 2  . class ,    bte 1  . getId (  )  )  ;", "bte 2     =    em . find ( BasicTestEntity 2  . class ,    bte 2  . getId (  )  )  ;", "bte 3     =    em . find ( BasicTestEntity 2  . class ,    bte 3  . getId (  )  )  ;", "bte 1  . setStr 1  (  \" x 2  \"  )  ;", "bte 2  . setStr 2  (  \" b 2  \"  )  ;", "em . remove ( bte 3  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "bte 2     =    em . find ( BasicTestEntity 2  . class ,    bte 2  . getId (  )  )  ;", "em . remove ( bte 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "bte 1     =    em . find ( BasicTestEntity 2  . class ,    bte 1  . getId (  )  )  ;", "em . remove ( bte 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "id 1     =    bte 1  . getId (  )  ;", "id 2     =    bte 2  . getId (  )  ;", "id 3     =    bte 3  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.Delete"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 2    ver 1     =    new   BasicTestEntity 2  ( id 1  ,     \" x \"  ,    null )  ;", "BasicTestEntity 2    ver 2     =    new   BasicTestEntity 2  ( id 1  ,     \" x 2  \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     4  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.Delete"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 2    ver 1     =    new   BasicTestEntity 2  ( id 2  ,     \" y \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 2  ,     2  )  . equals ( ver 1  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 2  ,     3  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 2  ,     4  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.basic.Delete"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 2    ver 1     =    new   BasicTestEntity 2  ( id 3  ,     \" z \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 3  ,     1  )  . equals ( ver 1  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 3  ,     2  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 3  ,     3  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 3  ,     4  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.basic.Delete"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 2  . class ,    id 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 2  . class ,    id 2  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 2  . class ,    id 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.Delete"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrTestEntity   emptyEntity    =    new   StrTestEntity (  \"  \"  )  ;", "em . persist ( emptyEntity )  ;", "StrTestEntity   nullEntity    =    new   StrTestEntity ( null )  ;", "em . persist ( nullEntity )  ;", "em . getTransac (  )  . commit (  )  ;", "emptyId    =    emptyEntity . getId (  )  ;", "nullId    =    nullEntity . getId (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "emptyEntity    =    em . find ( StrTestEntity . class ,    emptyId )  ;", "emptyEntity . setStr ( null )  ;", "em . merge ( emptyEntity )  ;", "nullEntity    =    em . find ( StrTestEntity . class ,    nullId )  ;", "nullEntity . setStr (  \"  \"  )  ;", "em . merge ( nullEntity )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.EmptyStringTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    emptyId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    nullId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.EmptyStringTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 4    bte 1     =    new   BasicTestEntity 4  (  \" x \"  ,     \" y \"  )  ;", "em . persist ( bte 1  )  ;", "id 1     =    bte 1  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "bte 1     =    em . find ( BasicTestEntity 4  . class ,    id 1  )  ;", "bte 1  . setStr 1  (  \" a \"  )  ;", "bte 1  . setStr 2  (  \" b \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.GlobalVersioned"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 4    ver 1     =    new   BasicTestEntity 4  ( id 1  ,     \" x \"  ,     \" y \"  )  ;", "BasicTestEntity 4    ver 2     =    new   BasicTestEntity 4  ( id 1  ,     \" a \"  ,     \" b \"  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 4  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 4  . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.GlobalVersioned"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 4  . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.GlobalVersioned"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . get (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    new   BasicTestEntity 1  (  \" x \"  ,     1  )  ;", "BasicTestEntity 1    bte 2     =    new   BasicTestEntity 1  (  \" y \"  ,     2  0  )  ;", "em . persist ( bte 1  )  ;", "em . persist ( bte 2  )  ;", "em . get (  )  . commit (  )  ;", "em . get (  )  . begin (  )  ;", "bte 1     =    em . find ( BasicTestEntity 1  . class ,    bte 1  . getId (  )  )  ;", "bte 2     =    em . find ( BasicTestEntity 1  . class ,    bte 2  . getId (  )  )  ;", "BasicTestEntity 1    bte 3     =    new   BasicTestEntity 1  (  \" z \"  ,     3  0  0  )  ;", "bte 1  . setStr 1  (  \" x 2  \"  )  ;", "bte 2  . setLong 1  (  2  1  )  ;", "em . persist ( bte 3  )  ;", "em . get (  )  . commit (  )  ;", "em . get (  )  . begin (  )  ;", "bte 2     =    em . find ( BasicTestEntity 1  . class ,    bte 2  . getId (  )  )  ;", "bte 3     =    em . find ( BasicTestEntity 1  . class ,    bte 3  . getId (  )  )  ;", "bte 2  . setStr 1  (  \" y 3  \"  )  ;", "bte 2  . setLong 1  (  2  2  )  ;", "bte 3  . setStr 1  (  \" z 3  \"  )  ;", "em . get (  )  . commit (  )  ;", "id 1     =    bte 1  . getId (  )  ;", "id 2     =    bte 2  . getId (  )  ;", "id 3     =    bte 3  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.ManyOperationsInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 1  ,     \" x \"  ,     1  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 1  ,     \" x 2  \"  ,     1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.ManyOperationsInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 2  ,     \" y \"  ,     2  0  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 2  ,     \" y \"  ,     2  1  )  ;", "BasicTestEntity 1    ver 3     =    new   BasicTestEntity 1  ( id 2  ,     \" y 3  \"  ,     2  2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     3  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.basic.ManyOperationsInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 3  ,     \" z \"  ,     3  0  0  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 3  ,     \" z 3  \"  ,     3  0  0  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.basic.ManyOperationsInTransaction"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 2  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.ManyOperationsInTransaction"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "List < PersistentClass >    pcs    =    Tools . collecToList ( metadata (  )  . getEntityBindings (  )  )  ;", "Assert . assertEquals (  1  ,    pcs . size (  )  )  ;", "Assert . assertTrue ( pcs . get (  0  )  . getClassName (  )  . contains (  \" BasicTestEntity 3  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionInfoTableNotCreated"], "fileName": "org.hibernate.envers.test.integration.basic.NoneAudited"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 3    bte 1     =    new   BasicTestEntity 3  (  \" x \"  ,     \" y \"  )  ;", "em . persist ( bte 1  )  ;", "id 1     =    bte 1  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "bte 1     =    em . find ( BasicTestEntity 3  . class ,    id 1  )  ;", "bte 1  . setStr 1  (  \" a \"  )  ;", "bte 1  . setStr 2  (  \" b \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.NotVersioned"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . find ( BasicTestEntity 3  . class ,    id 1  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.NotVersioned"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisions ( BasicTestEntity 3  . class ,    id 1  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.NotVersioned"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    new   BasicTestEntity 1  ( str ,    lng )  ;", "em . persist ( bte 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "return   bte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     1  )  ;", "id 2     =    addNewEntity ( n ,     2  0  )  ;", "modifyEntity ( id 1  ,    n ,     1  )  ;", "modifyEntity ( id 2  ,     \" y 2  \"  ,     2  0  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    em . find ( BasicTestEntity 1  . class ,    id )  ;", "bte 1  . setLong 1  ( lng )  ;", "bte 1  . setStr 1  ( str )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["modifyEntity"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 1  ,     \" x \"  ,     1  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 1  ,    null ,     1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     4  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 2  ,    null ,     2  0  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 2  ,     \" y 2  \"  ,     2  0  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     3  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     4  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 1  )  )  ;", "assert   Arrays . asList (  2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.NullProperties"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . get (  )  . begin (  )  ;", "Person   person    =    new   Person (  )  ;", "Name   name    =    new   Name (  )  ;", "name . setName (  \" Name \"  )  ;", "person . getNames (  )  . add ( name )  ;", "session . saveOrUpdate ( person )  ;", "session . get (  )  . commit (  )  ;", "person . setNames ( null )  ;", "session . saveOrUpdate ( person )  ;", "session . flush (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionRemovalOutsideActiveTransaction"], "fileName": "org.hibernate.envers.test.integration.basic.OutsideTransactionTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . get (  )  . begin (  )  ;", "Person   person    =    new   Person (  )  ;", "Name   name    =    new   Name (  )  ;", "name . setName (  \" Name \"  )  ;", "person . getNames (  )  . add ( name )  ;", "session . saveOrUpdate ( person )  ;", "session . get (  )  . commit (  )  ;", "person . getNames (  )  . remove ( name )  ;", "session . saveOrUpdate ( person )  ;", "session . flush (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionUpdateOutsideActiveTransaction"], "fileName": "org.hibernate.envers.test.integration.basic.OutsideTransactionTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . get (  )  . begin (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" data \"  )  ;", "session . persist ( entity )  ;", "session . get (  )  . commit (  )  ;", "session . delete ( entity )  ;", "session . flush (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteOutsideActiveTransaction"], "fileName": "org.hibernate.envers.test.integration.basic.OutsideTransactionTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "StrEntity   entity    =    new   StrEntity (  \" data \"  )  ;", "session . persist ( entity )  ;", "session . flush (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testInsertOutsideActiveTransaction"], "fileName": "org.hibernate.envers.test.integration.basic.OutsideTransactionTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . get (  )  . begin (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" data \"  )  ;", "session . persist ( entity )  ;", "session . get (  )  . commit (  )  ;", "entity . setStr (  \" modified   data \"  )  ;", "session . update ( entity )  ;", "session . flush (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testUpdateOutsideActiveTransaction"], "fileName": "org.hibernate.envers.test.integration.basic.OutsideTransactionTest"}, {"methodBody": ["METHOD_START", "{", "final   EventListenerRegistry   registry    =    sessionFactory (  )  . getServiceRegistry (  )  . getService ( EventListenerRegistry . class )  ;", "final    . CountingPostInsertTransactionBoundaryListener   listener    =    new    . CountingPostInsertTransactionBoundaryListener (  )  ;", "registry . getEventListenerGroup ( POST _ INSERT )  . appendListener ( listener )  ;", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" str 1  \"  )  ;", "session . save ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "Assert . assertEquals (  3  ,    listener . getBeforeCount (  )  )  ;", "Assert . assertEquals (  3  ,    listener . getAfterCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionProcessSynchronization"], "fileName": "org.hibernate.envers.test.integration.basic.RegisterUserEventListenersTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.basic.ScalePrecisionEntity"}, {"methodBody": ["METHOD_START", "{", "return   wholeNumber ;", "}", "METHOD_END"], "methodName": ["getWholeNumber"], "fileName": "org.hibernate.envers.test.integration.basic.ScalePrecisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.basic.ScalePrecisionEntity"}, {"methodBody": ["METHOD_START", "{", "this . wholeNumber    =    wholeNumber ;", "}", "METHOD_END"], "methodName": ["setWholeNumber"], "fileName": "org.hibernate.envers.test.integration.basic.ScalePrecisionEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite    =    new   IntTestEntity (  1  0  )  ;", "em . persist ( ite )  ;", "id 1     =    ite . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ite    =    em . find ( IntTestEntity . class ,    id 1  )  ;", "ite . setNumber (  2  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.Simple"}, {"methodBody": ["METHOD_START", "{", "IntTestEntity   ver 1     =    new   IntTestEntity (  1  0  ,    id 1  )  ;", "IntTestEntity   ver 2     =    new   IntTestEntity (  2  0  ,    id 1  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.Simple"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.Simple"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . get (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    new   BasicTestEntity 1  ( str ,    lng )  ;", "em . persist ( bte 1  )  ;", "em . get (  )  . commit (  )  ;", "return   bte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     1  )  ;", "id 2     =    addNewEntity (  \" y \"  ,     2  0  )  ;", "id 3     =    addNewEntity (  \" z \"  ,     3  0  )  ;", "modifyEntity ( id 1  ,     \" x 2  \"  ,     2  )  ;", "modifyEntity ( id 2  ,     \" y 2  \"  ,     2  0  )  ;", "modifyEntity ( id 1  ,     \" x 3  \"  ,     3  )  ;", "modifyEntity ( id 1  ,     \" x 3  \"  ,     3  )  ;", "modifyEntity ( id 2  ,     \" y 3  \"  ,     2  1  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . get (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    em . find ( BasicTestEntity 1  . class ,    id )  ;", "bte 1  . setLong 1  ( lng )  ;", "bte 1  . setStr 1  ( str )  ;", "em . get (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["modifyEntity"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 1  ,     \" x \"  ,     1  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 1  ,     \" x 2  \"  ,     2  )  ;", "BasicTestEntity 1    ver 3     =    new   BasicTestEntity 1  ( id 1  ,     \" x 3  \"  ,     3  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     3  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     4  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     5  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     6  )  . equals ( ver 3  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 1  ,     7  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 2  ,     \" y \"  ,     2  0  )  ;", "BasicTestEntity 1    ver 2     =    new   BasicTestEntity 1  ( id 2  ,     \" y 2  \"  ,     2  0  )  ;", "BasicTestEntity 1    ver 3     =    new   BasicTestEntity 1  ( id 2  ,     \" y 3  \"  ,     2  1  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     3  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     4  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     5  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     6  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 2  ,     7  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 1    ver 1     =    new   BasicTestEntity 1  ( id 3  ,     \" z \"  ,     3  0  )  ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     1  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     2  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     3  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     4  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     5  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     6  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 1  . class ,    id 3  ,     7  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,     (  (  ( id 1  )     +     ( id 2  )  )     +     ( id 3  )  )  ,     1  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( BasicTestEntity 1  . class ,     (  (  ( id 1  )     +     ( id 2  )  )     +     ( id 3  )  )  ,     7  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfNotExistingEntity"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionDate (  0  )  ;", "}", "METHOD_END"], "methodName": ["testIllegalRevision"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionDate (  8  )  ;", "}", "METHOD_END"], "methodName": ["testNotExistingRevision"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     4  ,     6  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 1  )  )  ;", "assert   Arrays . asList (  2  ,     5  ,     7  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 2  )  )  ;", "assert   Arrays . asList (  3  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,    id 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     1  ;    i    <     7  ;    i +  +  )     {", "assert    ( getAuditReader (  )  . getRevisionDate ( i )  . getTime (  )  )     <  =     ( getAuditReader (  )  . getRevisionDate (  ( i    +     1  )  )  . getTime (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsDates"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisions ( BasicTestEntity 1  . class ,     (  (  ( id 1  )     +     ( id 2  )  )     +     ( id 3  )  )  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testRevisionsOfNotExistingEntity"], "fileName": "org.hibernate.envers.test.integration.basic.SingleOperationInTransaction"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "if    ( autoClear    !  =    null )     {", "entityManager . unwrap ( SessionImpl . class )  . setAutoClear ( autoClear )  ;", "}", "entityManager . get (  )  . begin (  )  ;", "IntTestEntity   rollbackEntity    =    new   IntTestEntity (  3  0  )  ;", "entityManager . persist ( rollbackEntity )  ;", "if    ( flush )     {", "entityManager . flush (  )  ;", "}", "Integer   rollbackId    =    rollbackEntity . getId (  )  ;", "entityManager . get (  )  . rollback (  )  ;", "entityManager . get (  )  . begin (  )  ;", "IntTestEntity   commitEntity    =    new   IntTestEntity (  5  0  )  ;", "entityManager . persist ( commitEntity )  ;", "if    ( flush )     {", "entityManager . flush (  )  ;", "}", "Integer   commitId    =    commitEntity . getId (  )  ;", "entityManager . get (  )  . commit (  )  ;", "List < Number >    revisionsForSavedClass    =    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    commitId )  ;", "Assert . assertEquals (  \" There   should   be   one   revision   for   inserted   entity .  \"  ,     1  ,    revisionsForSavedClass . size (  )  )  ;", "List < Number >    revisionsForRolledbackClass    =    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    rollbackId )  ;", "Assert . assertEquals (  \" There   should   be   no   revision   for   rolled   back   entity .  \"  ,     0  ,    revisionsForRolledbackClass . size (  )  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuditRecordsRollbackBehavior"], "fileName": "org.hibernate.envers.test.integration.basic.TransactionRollbackBehaviour"}, {"methodBody": ["METHOD_START", "{", "testAuditRecordsRollbackBehavior ( false ,    true )  ;", "}", "METHOD_END"], "methodName": ["testAuditRecordsRollbackWithAutoClear"], "fileName": "org.hibernate.envers.test.integration.basic.TransactionRollbackBehaviour"}, {"methodBody": ["METHOD_START", "{", "testAuditRecordsRollbackBehavior ( false ,    false )  ;", "}", "METHOD_END"], "methodName": ["testAuditRecordsRollbackWithNoAutoClear"], "fileName": "org.hibernate.envers.test.integration.basic.TransactionRollbackBehaviour"}, {"methodBody": ["METHOD_START", "{", "testAuditRecordsRollbackBehavior ( true ,    null )  ;", "}", "METHOD_END"], "methodName": ["testFlushedAuditRecordsRollback"], "fileName": "org.hibernate.envers.test.integration.basic.TransactionRollbackBehaviour"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 2    bte 2     =    new   BasicTestEntity 2  ( str 1  ,    str 2  )  ;", "em . persist ( bte 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "return   bte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedPropertiesChange"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     \" a \"  )  ;", "modifyEntity ( id 1  ,     \" x \"  ,     \" a \"  )  ;", "modifyEntity ( id 1  ,     \" y \"  ,     \" b \"  )  ;", "modifyEntity ( id 1  ,     \" y \"  ,     \" c \"  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedPropertiesChange"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 2    bte 2     =    em . find ( BasicTestEntity 2  . class ,    id )  ;", "bte 2  . setStr 1  ( str 1  )  ;", "bte 2  . setStr 2  ( str 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["modifyEntity"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedPropertiesChange"}, {"methodBody": ["METHOD_START", "{", "BasicTestEntity 2    ver 1     =    new   BasicTestEntity 2  ( id 1  ,     \" x \"  ,    null )  ;", "BasicTestEntity 2    ver 2     =    new   BasicTestEntity 2  ( id 1  ,     \" y \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( BasicTestEntity 2  . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedPropertiesChange"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BasicTestEntity 2  . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedPropertiesChange"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ue 1     =    new   Entity (  \" a 1  \"  ,     \" b 1  \"  )  ;", "em . persist ( ue 1  )  ;", "id 1     =    ue 1  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ue 1     =    em . find ( Entity . class ,    id 1  )  ;", "ue 1  . setData 1  (  \" a 2  \"  )  ;", "ue 1  . setData 2  (  \" b 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedProperty"}, {"methodBody": ["METHOD_START", "{", "UnversionedEntity   rev 1     =    new   UnversionedEntity ( id 1  ,     \" a 1  \"  ,    null )  ;", "UnversionedEntity   rev 2     =    new   UnversionedEntity ( id 1  ,     \" a 2  \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( UnversionedEntity . class ,    id 1  ,     1  )  . equals ( rev 1  )  ;", "assert   getAuditReader (  )  . find ( UnversionedEntity . class ,    id 1  ,     2  )  . equals ( rev 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedProperty"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( UnversionedEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.basic.UnversionedProperty"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  1  ,     \" data _ ing _  1  \"  )  ;", "SetRefIngEntity   ing 2     =    new   SetRefIngEntity (  2  ,     \" data _ ing _  2  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "ing 1  . setReference ( ed 1  )  ;", "ing 2  . setReference ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( SetRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.cache.OneToManyCache"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1  _ rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "assert    ( ed 1  _ rev 1  . getReffering (  )  . size (  )  )     =  =     2  ;", "SetRefIngEntity   ing 1  _ rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEntity   ing 2  _ rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "for    ( SetRefIngEntity   setRefIngEntity    :    ed 1  _ rev 1  . getReffering (  )  )     {", "assert    ( setRefIngEntity    =  =    ing 1  _ rev 1  )     |  |     ( setRefIngEntity    =  =    ing 2  _ rev 1  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCacheFindAfterCollectionAccessRev1"], "fileName": "org.hibernate.envers.test.integration.cache.OneToManyCache"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1  _ rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "assert    ( ed 1  _ rev 1  . getReffering (  )  . size (  )  )     =  =     2  ;", "for    ( SetRefIngEntity   setRefIngEntity    :    ed 1  _ rev 1  . getReffering (  )  )     {", "assert    ( setRefIngEntity . getReference (  )  )     =  =    ed 1  _ rev 1  ;", "}", "}", "METHOD_END"], "methodName": ["testCacheReferenceAccessAfterCollectionAccessRev1"], "fileName": "org.hibernate.envers.test.integration.cache.OneToManyCache"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 2  _ rev 2     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "assert    ( ed 2  _ rev 2  . getReffering (  )  . size (  )  )     =  =     2  ;", "for    ( SetRefIngEntity   setRefIngEntity    :    ed 2  _ rev 2  . getReffering (  )  )     {", "assert    ( setRefIngEntity . getReference (  )  )     =  =    ed 2  _ rev 2  ;", "}", "}", "METHOD_END"], "methodName": ["testCacheReferenceAccessAfterCollectionAccessRev2"], "fileName": "org.hibernate.envers.test.integration.cache.OneToManyCache"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1  _ rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "SetRefIngEntity   ing 1  _ rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEntity   ing 2  _ rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "assert    ( ing 1  _ rev 1  . getReference (  )  )     =  =    ed 1  _ rev 1  ;", "assert    ( ing 2  _ rev 1  . getReference (  )  )     =  =    ed 1  _ rev 1  ;", "}", "METHOD_END"], "methodName": ["testCacheReferenceAccessAfterFind"], "fileName": "org.hibernate.envers.test.integration.cache.OneToManyCache"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1     =    new   BiRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "BiRefEdEntity   ed 2     =    new   BiRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "BiRefIngEntity   ing 1     =    new   BiRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( BiRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.cache.OneToOneCache"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1  _ rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiRefIngEntity   ing 1  _ rev 1     =    getAuditReader (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "assert    ( ing 1  _ rev 1  . getReference (  )  )     =  =    ed 1  _ rev 1  ;", "}", "METHOD_END"], "methodName": ["testCacheReferenceAccessAfterFindRev1"], "fileName": "org.hibernate.envers.test.integration.cache.OneToOneCache"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 2  _ rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "BiRefIngEntity   ing 1  _ rev 2     =    getAuditReader (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "assert    ( ing 1  _ rev 2  . getReference (  )  )     =  =    ed 2  _ rev 2  ;", "}", "METHOD_END"], "methodName": ["testCacheReferenceAccessAfterFindRev2"], "fileName": "org.hibernate.envers.test.integration.cache.OneToOneCache"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite    =    new   IntTestEntity (  1  0  )  ;", "em . persist ( ite )  ;", "id 1     =    ite . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ite    =    em . find ( IntTestEntity . class ,    id 1  )  ;", "ite . setNumber (  2  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.cache.QueryCache"}, {"methodBody": ["METHOD_START", "{", "IntTestEntity   entFromQuery    =     (  ( IntTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     1  )  . getSingleResult (  )  )  )  ;", "IntTestEntity   entFromFind    =    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,     1  )  ;", "assert   entFromFind    =  =    entFromQuery ;", "}", "METHOD_END"], "methodName": ["testCacheFindAfterEntitiesAtRevisionQuery"], "fileName": "org.hibernate.envers.test.integration.cache.QueryCache"}, {"methodBody": ["METHOD_START", "{", "List   entsFromQuery    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    false )  . getResultList (  )  ;", "IntTestEntity   entFromFindRev 1     =    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,     1  )  ;", "IntTestEntity   entFromFindRev 2     =    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,     2  )  ;", "assert   entFromFindRev 1     =  =     ( entsFromQuery . get (  0  )  )  ;", "assert   entFromFindRev 2     =  =     ( entsFromQuery . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testCacheFindAfterRevisionsOfEntityQuery"], "fileName": "org.hibernate.envers.test.integration.cache.QueryCache"}, {"methodBody": ["METHOD_START", "{", "mapId    =    doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringMapEntity   sme    =    new   StringMapEntity (  )  ;", "sme . getStrings (  )  . put (  \" A \"  ,     \" B \"  )  ;", "sme . getStrings (  )  . put (  \" B \"  ,    n )  ;", "entityManager . persist ( sme )  ;", "return   sme . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringMapEntity   sme    =    entityManager . find (  . class ,    mapId )  ;", "sme . getStrings (  )  . put (  \" C \"  ,    n )  ;", "sme . getStrings (  )  . put (  \" D \"  ,     \" E \"  )  ;", "sme . getStrings (  )  . remove (  \" A \"  )  ;", "entityManager . merge ( sme )  ;", "}  )  ;", "listId    =    doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringListEntity   sle    =    new   StringListEntity (  )  ;", "sle . getStrings (  )  . add (  \" A \"  )  ;", "sle . getStrings (  )  . add ( n )  ;", "entityManager . persist ( sle )  ;", "return   sle . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringListEntity   sle    =    entityManager . find (  . class ,    listId )  ;", "sle . getStrings (  )  . add ( n )  ;", "sle . getStrings (  )  . add (  \" D \"  )  ;", "sle . getStrings (  )  . remove (  \" A \"  )  ;", "entityManager . merge ( sle )  ;", "}  )  ;", "setId    =    doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringSetEntity   sse    =    new   StringSetEntity (  )  ;", "sse . getStrings (  )  . add (  \" A \"  )  ;", "sse . getStrings (  )  . add ( n )  ;", "entityManager . persist ( sse )  ;", "return   sse . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   StringSetEntity   sse    =    entityManager . find (  . class ,    setId )  ;", "sse . getStrings (  )  . add ( n )  ;", "sse . getStrings (  )  . add (  \" D \"  )  ;", "sse . getStrings (  )  . remove (  \" A \"  )  ;", "entityManager . merge ( sse )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.CollectionNullValueTest"}, {"methodBody": ["METHOD_START", "{", "final   List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( StringListEntity . class ,    listId )  ;", "Assert . assertEquals ( Arrays . asList (  3  ,     4  )  ,    revisions )  ;", "final   StringListEntity   rev 3     =    getAuditReader (  )  . find ( StringListEntity . class ,    listId ,     3  )  ;", "Assert . assertEquals ( Tools . makeList (  \" A \"  )  ,    rev 3  . getStrings (  )  )  ;", "final   StringListEntity   rev 4     =    getAuditReader (  )  . find ( StringListEntity . class ,    listId ,     4  )  ;", "Assert . assertEquals ( Tools . makeList ( null ,     \" D \"  )  ,    rev 4  . getStrings (  )  )  ;", "}", "METHOD_END"], "methodName": ["testStringListHistory"], "fileName": "org.hibernate.envers.test.integration.collection.CollectionNullValueTest"}, {"methodBody": ["METHOD_START", "{", "final   List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( StringMapEntity . class ,    mapId )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    revisions )  ;", "final   StringMapEntity   rev 1     =    getAuditReader (  )  . find ( StringMapEntity . class ,    mapId ,     1  )  ;", "Assert . assertEquals ( Tools . makeMap (  \" A \"  ,     \" B \"  )  ,    rev 1  . getStrings (  )  )  ;", "final   StringMapEntity   rev 2     =    getAuditReader (  )  . find ( StringMapEntity . class ,    mapId ,     2  )  ;", "Assert . assertEquals ( Tools . makeMap (  \" D \"  ,     \" E \"  )  ,    rev 2  . getStrings (  )  )  ;", "}", "METHOD_END"], "methodName": ["testStringMapHistory"], "fileName": "org.hibernate.envers.test.integration.collection.CollectionNullValueTest"}, {"methodBody": ["METHOD_START", "{", "final   List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( StringSetEntity . class ,    setId )  ;", "Assert . assertEquals ( Arrays . asList (  5  ,     6  )  ,    revisions )  ;", "final   StringSetEntity   rev 5     =    getAuditReader (  )  . find ( StringSetEntity . class ,    setId ,     5  )  ;", "Assert . assertEquals ( Tools . makeSet (  \" A \"  )  ,    rev 5  . getStrings (  )  )  ;", "final   StringSetEntity   rev 6     =    getAuditReader (  )  . find ( StringSetEntity . class ,    setId ,     6  )  ;", "Assert . assertEquals ( Tools . makeSet (  \" D \"  )  ,    rev 6  . getStrings (  )  )  ;", "}", "METHOD_END"], "methodName": ["testStringSetHistory"], "fileName": "org.hibernate.envers.test.integration.collection.CollectionNullValueTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "final   Component   comp 1     =    new   Component ( null ,     1  1  )  ;", "final   Component   comp 2     =    new   Component ( null ,     2  2  )  ;", "final   SetEntity   entity    =    new   SetEntity (  )  ;", "entity . setComponents ( new   HashSet < Component >  (  )  )  ;", "entity . getComponents (  )  . add ( comp 1  )  ;", "entity . getComponents (  )  . add ( comp 2  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getComponents (  )  . remove ( comp 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "SetEntity   rev 1     =    getAuditReader (  )  . find ( SetEntity . class ,    entity . getId (  )  ,     1  )  ;", "SetEntity   rev 2     =    getAuditReader (  )  . find ( SetEntity . class ,    entity . getId (  )  ,     2  )  ;", "Assert . assertEquals (  \" Unexpected   components \"  ,    TestTools . makeSet ( comp 1  ,    comp 2  )  ,    rev 1  . getComponents (  )  )  ;", "Assert . assertEquals (  \" Unexpected   components \"  ,    TestTools . makeSet ( comp 2  )  ,    rev 2  . getComponents (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRemoval"], "fileName": "org.hibernate.envers.test.integration.collection.CompositeCustomType"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   qryBuilder    =    new   StringBuilder (  \" select    \"  )  ;", "qryBuilder . append (  \" aud    \"  )  ;", "qryBuilder . append (  \"  ,     \"  )  . append ( joinColumnIdProp )  . append (  \"    as   joinColumnId \"  )  ;", "qryBuilder . append (  \"  ,     \"  )  . append ( inverseJoinColumnIdProp )  . append (  \"    as   inverseJoinColumnId \"  )  ;", "qryBuilder . append (  \"  ,     \"  )  . append ( revProp )  . append (  \"    as   rev \"  )  ;", "qryBuilder . append (  \"  ,     \"  )  . append ( revIdProp )  . append (  \"    as   revId \"  )  ;", "qryBuilder . append (  \"  ,     \"  )  . append ( revTypeProp )  . append (  \"    as   revType \"  )  ;", "qryBuilder . append (  \"    from    \"  )  . append ( middleEntityName )  . append (  \"    aud    \"  )  ;", "qryBuilder . append (  \"    order   by   joinColumnId   asc ,    inverseJoinColumnId   asc ,    revId   asc \"  )  ;", "String   query    =    qryBuilder . toString (  )  ;", "EntityManager   em    =    createIsolatedEntityManager (  )  ;", "Query   qry    =    em . createQuery ( query )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Object [  ]  >    auditJoinTableRows    =    qry . getResultList (  )  ;", "List <  . AuditJoinTableInfo >    result    =    new   ArrayList <  . AuditJoinTableInfo >  ( auditJoinTableRows . size (  )  )  ;", "for    ( Object [  ]    auditJoinTableRow    :    auditJoinTableRows )     {", "Long   joinColumnId    =     (  ( Long )     ( auditJoinTableRow [  1  ]  )  )  ;", "Long   inverseJoinColumnId    =     (  ( Long )     ( auditJoinTableRow [  2  ]  )  )  ;", "SequenceIdRevisionEntity   rev    =     (  ( SequenceIdRevisionEntity )     ( auditJoinTableRow [  3  ]  )  )  ;", "RevisionType   revType    =     (  ( RevisionType )     ( auditJoinTableRow [  5  ]  )  )  ;", ". AuditJoinTableInfo   info    =    new    . AuditJoinTableInfo ( middleEntityName ,    rev ,    revType ,    joinColumnIdName ,    joinColumnId ,    inverseJoinColumnIdName ,    inverseJoinColumnId )  ;", "result . add ( info )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getAuditJoinTableRows"], "fileName": "org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em ;", "MultipleCollectionEntity   mce ;", "MultipleCollectionRefEntity 1    re 1  _  1  ;", "MultipleCollectionRefEntity 1    updatedRe 1  _  1  ;", "MultipleCollectionRefEntity 1    re 1  _  2  ;", "MultipleCollectionRefEntity 1    re 1  _  3  ;", "MultipleCollectionRefEntity 2    re 2  _  1  ;", "MultipleCollectionRefEntity 2    updatedRe 2  _  1  ;", "MultipleCollectionRefEntity 2    re 2  _  2  ;", "MultipleCollectionRefEntity 2    re 2  _  3  ;", "tm . begin (  )  ;", "try    {", "em    =    createIsolatedEntityManager (  )  ;", "em . joinTransaction (  )  ;", "mce    =    new   MultipleCollectionEntity (  )  ;", "mce . setText (  \" MultipleCollectionEntity -  1  \"  )  ;", "em . persist ( mce )  ;", "mceId 1     =    mce . getId (  )  ;", "}    finally    {", ". tryCommit ( tm )  ;", "}", "Assert . assertNotNull ( mceId 1  )  ;", "tm . begin (  )  ;", "try    {", "em    =    createIsolatedEntityManager (  )  ;", "em . joinTransaction (  )  ;", "re 1  _  1     =    new   MultipleCollectionRefEntity 1  (  )  ;", "re 1  _  1  . setText (  \" MultipleCollectionRefEntity 1  -  1  \"  )  ;", "re 1  _  1  . setMultipleCollectionEntity ( mce )  ;", "re 1  _  2     =    new   MultipleCollectionRefEntity 1  (  )  ;", "re 1  _  2  . setText (  \" MultipleCollectionRefEntity 1  -  2  \"  )  ;", "re 1  _  2  . setMultipleCollectionEntity ( mce )  ;", "mce . addRefEntity 1  ( re 1  _  1  )  ;", "mce . addRefEntity 1  ( re 1  _  2  )  ;", "re 2  _  1     =    new   MultipleCollectionRefEntity 2  (  )  ;", "re 2  _  1  . setText (  \" MultipleCollectionRefEntity 2  -  1  \"  )  ;", "re 2  _  1  . setMultipleCollectionEntity ( mce )  ;", "re 2  _  2     =    new   MultipleCollectionRefEntity 2  (  )  ;", "re 2  _  2  . setText (  \" MultipleCollectionRefEntity 2  -  2  \"  )  ;", "re 2  _  2  . setMultipleCollectionEntity ( mce )  ;", "mce . addRefEntity 2  ( re 2  _  1  )  ;", "mce . addRefEntity 2  ( re 2  _  2  )  ;", "mce    =    em . merge ( mce )  ;", "}    finally    {", ". tryCommit ( tm )  ;", "}", "for    ( MultipleCollectionRefEntity 1    refEnt 1     :    mce . getRefEntities 1  (  )  )     {", "if    ( refEnt 1  . equals ( re 1  _  1  )  )     {", "re 1 Id 1     =    refEnt 1  . getId (  )  ;", "} else", "if    ( refEnt 1  . equals ( re 1  _  2  )  )     {", "re 1 Id 2     =    refEnt 1  . getId (  )  ;", "} else    {", "throw   new   IllegalStateException (  \" unexpected   instance \"  )  ;", "}", "}", "for    ( MultipleCollectionRefEntity 2    refEnt 2     :    mce . getRefEntities 2  (  )  )     {", "if    ( refEnt 2  . equals ( re 2  _  1  )  )     {", "re 2 Id 1     =    refEnt 2  . getId (  )  ;", "} else", "if    ( refEnt 2  . equals ( re 2  _  2  )  )     {", "re 2 Id 2     =    refEnt 2  . getId (  )  ;", "} else    {", "throw   new   IllegalStateException (  \" unexpected   instance \"  )  ;", "}", "}", "Assert . assertNotNull ( re 1 Id 1  )  ;", "Assert . assertNotNull ( re 1 Id 2  )  ;", "Assert . assertNotNull ( re 2 Id 1  )  ;", "Assert . assertNotNull ( re 2 Id 2  )  ;", "tm . begin (  )  ;", "try    {", "em    =    createIsolatedEntityManager (  )  ;", "em . joinTransaction (  )  ;", "Assert . assertEquals (  2  ,    mce . getRefEntities 1  (  )  . size (  )  )  ;", "mce . removeRefEntity 1  ( re 1  _  2  )  ;", "Assert . assertEquals (  1  ,    mce . getRefEntities 1  (  )  . size (  )  )  ;", "updatedRe 1  _  1     =    mce . getRefEntities 1  (  )  . get (  0  )  ;", "Assert . assertEquals ( re 1  _  1  ,    updatedRe 1  _  1  )  ;", "updatedRe 1  _  1  . setText (  \" MultipleCollectionRefEntity 1  -  1  - updated \"  )  ;", "re 1  _  3     =    new   MultipleCollectionRefEntity 1  (  )  ;", "re 1  _  3  . setText (  \" MultipleCollectionRefEntity 1  -  3  \"  )  ;", "re 1  _  3  . setMultipleCollectionEntity ( mce )  ;", "mce . addRefEntity 1  ( re 1  _  3  )  ;", "Assert . assertEquals (  2  ,    mce . getRefEntities 1  (  )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    mce . getRefEntities 2  (  )  . size (  )  )  ;", "mce . removeRefEntity 2  ( re 2  _  2  )  ;", "Assert . assertEquals (  1  ,    mce . getRefEntities 2  (  )  . size (  )  )  ;", "updatedRe 2  _  1     =    mce . getRefEntities 2  (  )  . get (  0  )  ;", "Assert . assertEquals ( re 2  _  1  ,    updatedRe 2  _  1  )  ;", "updatedRe 2  _  1  . setText (  \" MultipleCollectionRefEntity 2  -  1  - updated \"  )  ;", "re 2  _  3     =    new   MultipleCollectionRefEntity 2  (  )  ;", "re 2  _  3  . setText (  \" MultipleCollectionRefEntity 2  -  3  \"  )  ;", "re 2  _  3  . setMultipleCollectionEntity ( mce )  ;", "mce . addRefEntity 2  ( re 2  _  3  )  ;", "Assert . assertEquals (  2  ,    mce . getRefEntities 2  (  )  . size (  )  )  ;", "mce    =    em . merge ( mce )  ;", "}    finally    {", ". tryCommit ( tm )  ;", "}", "for    ( MultipleCollectionRefEntity 1    adres    :    mce . getRefEntities 1  (  )  )     {", "if    ( adres . equals ( re 1  _  3  )  )     {", "re 1 Id 3     =    adres . getId (  )  ;", "}", "}", "for    ( MultipleCollectionRefEntity 2    partner    :    mce . getRefEntities 2  (  )  )     {", "if    ( partner . equals ( re 2  _  3  )  )     {", "re 2 Id 3     =    partner . getId (  )  ;", "}", "}", "Assert . assertNotNull ( re 1 Id 3  )  ;", "Assert . assertNotNull ( re 2 Id 3  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "List < DetachedMultipleCollectionChangeTest . AuditJoinTableInfo >    mceRe 1 AuditJoinTableInfos    =    getAuditJoinTableRows (  \" MCE _ RE 1  _ AUD \"  ,     \" MCE _ ID \"  ,     \" aud . originalId . MultipleCollectionEntity _ id \"  ,     \" RE 1  _ ID \"  ,     \" aud . originalId . refEntities 1  _ id \"  ,     \" aud . originalId . REV \"  ,     \" aud . originalId . REV . id \"  ,     \" aud . REVTYPE \"  )  ;", "List < DetachedMultipleCollectionChangeTest . AuditJoinTableInfo >    mceRe 2 AuditJoinTableInfos    =    getAuditJoinTableRows (  \" MCE _ RE 2  _ AUD \"  ,     \" MCE _ ID \"  ,     \" aud . originalId . MultipleCollectionEntity _ id \"  ,     \" RE 2  _ ID \"  ,     \" aud . originalId . refEntities 2  _ id \"  ,     \" aud . originalId . REV \"  ,     \" aud . originalId . REV . id \"  ,     \" aud . REVTYPE \"  )  ;", "Assert . assertEquals (  4  ,    mceRe 1 AuditJoinTableInfos . size (  )  )  ;", "Assert . assertEquals (  4  ,    mceRe 2 AuditJoinTableInfos . size (  )  )  ;", "SequenceIdRevisionEntity   rev 2     =    new   SequenceIdRevisionEntity (  )  ;", "rev 2  . setId (  2  )  ;", "SequenceIdRevisionEntity   rev 3     =    new   SequenceIdRevisionEntity (  )  ;", "rev 3  . setId (  3  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 1  _ AUD \"  ,    rev 2  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 1  _ ID \"  ,     1 L )  ,    mceRe 1 AuditJoinTableInfos . get (  0  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 1  _ AUD \"  ,    rev 2  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 1  _ ID \"  ,     2 L )  ,    mceRe 1 AuditJoinTableInfos . get (  1  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 1  _ AUD \"  ,    rev 3  ,    RevisionType . DEL ,     \" MCE _ ID \"  ,     1 L ,     \" RE 1  _ ID \"  ,     2 L )  ,    mceRe 1 AuditJoinTableInfos . get (  2  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 1  _ AUD \"  ,    rev 3  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 1  _ ID \"  ,     3 L )  ,    mceRe 1 AuditJoinTableInfos . get (  3  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 2  _ AUD \"  ,    rev 2  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 2  _ ID \"  ,     1 L )  ,    mceRe 2 AuditJoinTableInfos . get (  0  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 2  _ AUD \"  ,    rev 2  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 2  _ ID \"  ,     2 L )  ,    mceRe 2 AuditJoinTableInfos . get (  1  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 2  _ AUD \"  ,    rev 3  ,    RevisionType . DEL ,     \" MCE _ ID \"  ,     1 L ,     \" RE 2  _ ID \"  ,     2 L )  ,    mceRe 2 AuditJoinTableInfos . get (  2  )  )  ;", "Assert . assertEquals ( new   DetachedMultipleCollectionChangeTest . AuditJoinTableInfo (  \" MCE _ RE 2  _ AUD \"  ,    rev 3  ,    RevisionType . ADD ,     \" MCE _ ID \"  ,     1 L ,     \" RE 2  _ ID \"  ,     3 L )  ,    mceRe 2 AuditJoinTableInfos . get (  3  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditJoinTable"], "fileName": "org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "List < Number >    mceId 1 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionEntity . class ,    mceId 1  )  ;", "List < Number >    re 1 Id 1 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 1  . class ,    re 1 Id 1  )  ;", "List < Number >    re 1 Id 2 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 1  . class ,    re 1 Id 2  )  ;", "List < Number >    re 1 Id 3 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 1  . class ,    re 1 Id 3  )  ;", "List < Number >    re 2 Id 1 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 2  . class ,    re 2 Id 1  )  ;", "List < Number >    re 2 Id 2 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 2  . class ,    re 2 Id 2  )  ;", "List < Number >    re 2 Id 3 Revs    =    getAuditReader (  )  . getRevisions ( MultipleCollectionRefEntity 2  . class ,    re 2 Id 3  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    mceId 1 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    re 1 Id 1 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    re 1 Id 2 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  3  )  ,    re 1 Id 3 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    re 2 Id 1 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    re 2 Id 2 Revs )  ;", "Assert . assertEquals ( Arrays . asList (  3  )  ,    re 2 Id 3 Revs )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( tm . getStatus (  )  )     =  =     ( Status . STATUS _ MARKED _ ROLLBACK )  )     {", "tm . rback (  )  ;", "} else    {", "tm . commit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["tryCommit"], "fileName": "org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "final   Component 3    comp 1     =    new   Component 3  (  \" comp 1  \"  ,    null ,    null )  ;", "final   Component 3    comp 2     =    new   Component 3  (  \" comp 2  \"  ,    null ,    null )  ;", "Entity   entity    =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getComponentSet (  )  . add ( comp 1  )  ;", "entity . getComponentSet (  )  . add ( comp 2  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getComponentSet (  )  . remove ( comp 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    entity . getId (  )  ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    entity . getId (  )  ,     2  )  ;", "Assert . assertEquals (  \" Unexpected   components \"  ,    TestTools . makeSet ( comp 1  ,    comp 2  )  ,    rev 1  . getComponentSet (  )  )  ;", "Assert . assertEquals (  \" Unexpected   components \"  ,    TestTools . makeSet ( comp 2  )  ,    rev 2  . getComponentSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRemoval"], "fileName": "org.hibernate.envers.test.integration.collection.EmbeddableSet"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Item   item    =    new   Item (  \" The   Item \"  )  ;", "entityManager . persist ( item )  ;", "final   Category   category    =    new   Category (  \" The   Category \"  )  ;", "category . setDescription (  \" The   description \"  )  ;", "category . setValue ( item ,    new   Value (  \" The   Value \"  ,     4  7  1  1 L )  )  ;", "category . setText ( item ,     \" The   text \"  )  ;", "entityManager . persist ( category )  ;", "this . category    =    category ;", "this . item    =    item ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapCompositeElementTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   reader    =    getAuditReader (  )  ;", "AuditQuery   categoryQuery    =    reader . createQuery (  )  . forRevisionsOfEntity (  . Category . class ,    false ,    true )  . addOrder ( AuditEntity . revisionProperty (  \" timestamp \"  )  . asc (  )  )  . add ( AuditEntity . id (  )  . eq ( category . getId (  )  )  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Object [  ]  >    history    =     (  ( List < Object [  ]  >  )     ( categoryQuery . getResultList (  )  )  )  ;", "Assert . assertNotNull ( history )  ;", "Assert . assertEquals (  1  ,    history . size (  )  )  ;", "final    . Category   category    =     (  (  . Category )     ( reader . createQuery (  )  . forEntitiesAtRevision (  . Category . class ,     1  )  . add ( AuditEntity . property (  \" id \"  )  . eq ( this . category . getId (  )  )  )  . setMaxResults (  1  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( this . category . getName (  )  ,    category . getName (  )  )  ;", "Assert . assertEquals ( this . category . getDescription (  )  ,    category . getDescription (  )  )  ;", "Assert . assertEquals (  \" The   text \"  ,    category . getText ( this . item )  )  ;", "final    . Value   value    =    category . getValue ( this . item )  ;", "Assert . assertEquals (  \" The   Value \"  ,    value . getText (  )  )  ;", "Assert . assertEquals ( Long . valueOf (  4  7  1  1 L )  ,    value . getNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapCompositeElementTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   A   a    =    new   A (  )  ;", "final   B   b    =    new   B (  )  ;", "final   C   c    =    new   C (  )  ;", "entityManager . persist ( b )  ;", "entityManager . persist ( c )  ;", "a . getMap (  )  . put ( b ,    c )  ;", "entityManager . persist ( a )  ;", "this . a    =    a ;", "this . b 1     =    b ;", "this . c 1     =    c ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   A   a    =    entityManager . find (  . class ,    this . a . getId (  )  )  ;", "final   B   b    =    new   B (  )  ;", "final   C   c    =    new   C (  )  ;", "entityManager . persist ( b )  ;", "entityManager . persist ( c )  ;", "a . getMap (  )  . put ( b ,    c )  ;", "entityManager . merge ( a )  ;", "this . b 2     =    b ;", "this . c 2     =    c ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   A   a    =    entityManager . find (  . class ,    this . a . getId (  )  )  ;", "a . getMap (  )  . remove ( this . b 1  )  ;", "entityManager . merge ( a )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityMapTest . A   rev 1     =    getAuditReader (  )  . find ( EntityMapTest . A . class ,    this . a . getId (  )  ,     1  )  ;", "Assert . assertEquals (  1  ,    rev 1  . getMap (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( this . b 1  ,    this . c 1  )  ,    rev 1  . getMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision1"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityMapTest . A   rev 2     =    getAuditReader (  )  . find ( EntityMapTest . A . class ,    this . a . getId (  )  ,     2  )  ;", "Assert . assertEquals (  2  ,    rev 2  . getMap (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( this . b 1  ,    this . c 1  ,    this . b 2  ,    this . c 2  )  ,    rev 2  . getMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision2"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityMapTest . A   rev 3     =    getAuditReader (  )  . find ( EntityMapTest . A . class ,    this . a . getId (  )  ,     3  )  ;", "Assert . assertEquals (  1  ,    rev 3  . getMap (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( this . b 2  ,    this . c 2  )  ,    rev 3  . getMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision3"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions (  . class ,    a . getId (  )  )  )  ;", "assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions (  . class ,    b 1  . getId (  )  )  )  ;", "assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions (  . class ,    c 1  . getId (  )  )  )  ;", "assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions (  . class ,    b 2  . getId (  )  )  )  ;", "assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions (  . class ,    c 2  . getId (  )  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.collection.EntityMapTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   reader    =    getAuditReader (  )  ;", "System . out . prln (  \" Halt \"  )  ;", "}", "METHOD_END"], "methodName": ["blockTest"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Some   some    =    new   Some (  )  ;", "final   Other   other    =    new   Other (  )  ;", "entityManager . persist ( other )  ;", "some . getMap (  )  . put ( other ,    Some . Status . A )  ;", "entityManager . persist ( some )  ;", "this . otherId    =    other . getId (  )  ;", "this . someId    =    some . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Some   some    =    entityManager . find (  . class ,    someId )  ;", "final   Other   other    =    entityManager . find (  . class ,    otherId )  ;", "some . getMap (  )  . put ( other ,    Some . Status . B )  ;", "entityManager . merge ( some )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Some   some    =    entityManager . find (  . class ,    someId )  ;", "some . getMap (  )  . clear (  )  ;", "entityManager . merge ( some )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( EntitySameMapKeyMultiMapValueTest . OtherEntity . class ,    otherEntityId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( EntitySameMapKeyMultiMapValueTest . SomeEntity . class ,    someEntityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "final   EntitySameMapKeyMultiMapValueTest . SomeEntity   someEntity    =    getAuditReader (  )  . find ( EntitySameMapKeyMultiMapValueTest . SomeEntity . class ,    someEntityId ,     1  )  ;", "Assert . assertNotNull ( someEntity )  ;", "Assert . assertFalse ( someEntity . getMap (  )  . isEmpty (  )  )  ;", "Assert . assertEquals (  1  ,    someEntity . getMap (  )  . size (  )  )  ;", "final   EntitySameMapKeyMultiMapValueTest . OtherEntity   otherEntity    =    getAuditReader (  )  . find ( EntitySameMapKeyMultiMapValueTest . OtherEntity . class ,    otherEntityId ,     1  )  ;", "Assert . assertNotNull ( otherEntity )  ;", "final   Map . Entry < EntitySameMapKeyMultiMapValueTest . OtherEntity ,    EntitySameMapKeyMultiMapValueTest . SomeEntity . Status >    entry    =    someEntity . getMap (  )  . entrySet (  )  . iterator (  )  . next (  )  ;", "Assert . assertEquals ( otherEntity ,    entry . getKey (  )  )  ;", "Assert . assertEquals ( EntitySameMapKeyMultiMapValueTest . SomeEntity . Status . A ,    entry . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionOne"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "final   EntitySameMapKeyMultiMapValueTest . SomeEntity   someEntity    =    getAuditReader (  )  . find ( EntitySameMapKeyMultiMapValueTest . SomeEntity . class ,    someEntityId ,     3  )  ;", "Assert . assertNotNull ( someEntity )  ;", "Assert . assertTrue ( someEntity . getMap (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionThree"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "final   EntitySameMapKeyMultiMapValueTest . SomeEntity   someEntity    =    getAuditReader (  )  . find ( EntitySameMapKeyMultiMapValueTest . SomeEntity . class ,    someEntityId ,     2  )  ;", "Assert . assertNotNull ( someEntity )  ;", "Assert . assertFalse ( someEntity . getMap (  )  . isEmpty (  )  )  ;", "Assert . assertEquals (  1  ,    someEntity . getMap (  )  . size (  )  )  ;", "final   EntitySameMapKeyMultiMapValueTest . OtherEntity   otherEntity    =    getAuditReader (  )  . find ( EntitySameMapKeyMultiMapValueTest . OtherEntity . class ,    otherEntityId ,     2  )  ;", "Assert . assertNotNull ( otherEntity )  ;", "final   Map . Entry < EntitySameMapKeyMultiMapValueTest . OtherEntity ,    EntitySameMapKeyMultiMapValueTest . SomeEntity . Status >    entry    =    someEntity . getMap (  )  . entrySet (  )  . iterator (  )  . next (  )  ;", "Assert . assertEquals ( otherEntity ,    entry . getKey (  )  )  ;", "Assert . assertEquals ( EntitySameMapKeyMultiMapValueTest . SomeEntity . Status . B ,    entry . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTwo"], "fileName": "org.hibernate.envers.test.integration.collection.EntitySameMapKeyMultiMapValueTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getOrCreateEntityManager (  )  ;", "try    {", "EnumMapEntity   entity    =    new   EnumMapEntity (  )  ;", "entity . getTypes (  )  . put ( EnumMapEntity . EnumType . TYPE _ A ,    new   ype (  \" A \"  )  )  ;", "entity . getTypes (  )  . put ( EnumMapEntity . EnumType . TYPE _ B ,    new   ype (  \" B \"  )  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( EnumMapEntity . class ,    entity . getId (  )  )  ;", "entity . getTypes (  )  . remove ( EnumMapEntity . EnumType . TYPE _ A )  ;", "entity . getTypes (  )  . put ( EnumMapEntity . EnumType . TYPE _ C ,    new   ype (  \" C \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "entityId    =    entity . getId (  )  ;", "}    finally    {", "em . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.EnumMapTest"}, {"methodBody": ["METHOD_START", "{", "EnumMapEntity   rev 1     =    getAuditReader (  )  . find ( EnumMapEntity . class ,    entityId ,     1  )  ;", "Assert . assertTrue ( rev 1  . getTypes (  )  . keySet (  )  . containsAll ( Arrays . asList ( EnumMapEntity . EnumType . TYPE _ A ,    EnumMapEntity . EnumType . TYPE _ B )  )  )  ;", "EnumMapEntity   rev 2     =    getAuditReader (  )  . find ( EnumMapEntity . class ,    entityId ,     2  )  ;", "Assert . assertTrue ( rev 2  . getTypes (  )  . keySet (  )  . containsAll ( Arrays . asList ( EnumMapEntity . EnumType . TYPE _ B ,    EnumMapEntity . EnumType . TYPE _ C )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditEnumMapCollection"], "fileName": "org.hibernate.envers.test.integration.collection.EnumMapTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( EnumMapEntity . class ,    entityId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCount"], "fileName": "org.hibernate.envers.test.integration.collection.EnumMapTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sse 1     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1  . getEnums 1  (  )  . add ( Entity . E 1  . X )  ;", "sse 1  . getEnums 2  (  )  . add ( Entity . E 2  . A )  ;", "em . persist ( sse 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 1  . getEnums 1  (  )  . add ( Entity . E 1  . Y )  ;", "sse 1  . getEnums 2  (  )  . remove ( Entity . E 2  . B )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 1  . getEnums 1  (  )  . remove ( Entity . E 1  . X )  ;", "sse 1  . getEnums 2  (  )  . add ( Entity . E 2  . A )  ;", "em . getTransaction (  )  . commit (  )  ;", "sse 1  _ id    =    sse 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.EnumSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "List < Object >    enums 1     =    entityManager . createNativeQuery (  \" SELECT   enums 1    FROM   Entity _ enums 1  _ AUD   ORDER   BY   REV   ASC \"  )  . getResultList (  )  ;", "List < Object >    enums 2     =    entityManager . createNativeQuery (  \" SELECT   enums 2    FROM   Entity _ enums 2  _ AUD   ORDER   BY   REV   ASC \"  )  . getResultList (  )  ;", "entityManager . close (  )  ;", "Assert . assertEquals ( Arrays . asList (  \" X \"  ,     \" Y \"  ,     \" X \"  )  ,    enums 1  )  ;", "Assert . assertEquals (  1  ,    enums 2  . size (  )  )  ;", "Object   enum 2     =    enums 2  . get (  0  )  ;", "Assert . assertEquals (  \"  0  \"  ,    enum 2  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnumRepresentation"], "fileName": "org.hibernate.envers.test.integration.collection.EnumSet"}, {"methodBody": ["METHOD_START", "{", "EnumSetEntity   rev 1     =    getAuditReader (  )  . find ( EnumSetEntity . class ,    sse 1  _ id ,     1  )  ;", "EnumSetEntity   rev 2     =    getAuditReader (  )  . find ( EnumSetEntity . class ,    sse 1  _ id ,     2  )  ;", "EnumSetEntity   rev 3     =    getAuditReader (  )  . find ( EnumSetEntity . class ,    sse 1  _ id ,     3  )  ;", "assert   rev 1  . getEnums 1  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 1  . X )  )  ;", "assert   rev 2  . getEnums 1  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 1  . X ,    EnumSetEntity . E 1  . Y )  )  ;", "assert   rev 3  . getEnums 1  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 1  . Y )  )  ;", "assert   rev 1  . getEnums 2  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 2  . A )  )  ;", "assert   rev 2  . getEnums 2  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 2  . A )  )  ;", "assert   rev 3  . getEnums 2  (  )  . equals ( TestTools . makeSet ( EnumSetEntity . E 2  . A )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse1"], "fileName": "org.hibernate.envers.test.integration.collection.EnumSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( EnumSetEntity . class ,    sse 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.EnumSet"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . getChildren (  )  . add (  \" child 1  \"  )  ;", "p . getChildren (  )  . add (  \" child 2  \"  )  ;", "entityManager . persist ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . remove (  0  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . add (  0  ,     \" child 3  \"  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . clear (  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 1  \"  ,     \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 3  \"  ,     \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Parent . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . getChildren (  )  . add (  \" child 1  \"  )  ;", "p . getChildren (  )  . add (  \" child 2  \"  )  ;", "entityManager . persist ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . remove (  0  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . add (  0  ,     \" child 3  \"  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . getChildren (  )  . clear (  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 1  \"  ,     \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  \" child 3  \"  ,     \" child 2  \"  )  ,    p . getChildren (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Parent . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sle 1     =    new   Entity (  )  ;", "Entity   sle 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sle 2  . getStrings (  )  . add (  \" sle 2  _ string 1  \"  )  ;", "sle 2  . getStrings (  )  . add (  \" sle 2  _ string 2  \"  )  ;", "em . persist ( sle 1  )  ;", "em . persist ( sle 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sle 1     =    em . find ( Entity . class ,    sle 1  . getId (  )  )  ;", "sle 2     =    em . find ( Entity . class ,    sle 2  . getId (  )  )  ;", "sle 1  . getStrings (  )  . add (  \" sle 1  _ string 1  \"  )  ;", "sle 1  . getStrings (  )  . add (  \" sle 1  _ string 2  \"  )  ;", "sle 2  . getStrings (  )  . add (  \" sle 2  _ string 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sle 1     =    em . find ( Entity . class ,    sle 1  . getId (  )  )  ;", "sle 2     =    em . find ( Entity . class ,    sle 2  . getId (  )  )  ;", "sle 1  . getStrings (  )  . set (  0  ,     \" sle 1  _ string 3  \"  )  ;", "sle 2  . getStrings (  )  . remove (  0  )  ;", "em . getTransaction (  )  . commit (  )  ;", "sle 1  _ id    =    sle 1  . getId (  )  ;", "sle 2  _ id    =    sle 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.StringList"}, {"methodBody": ["METHOD_START", "{", "StringListEntity   rev 1     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 1  _ id ,     1  )  ;", "StringListEntity   rev 2     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 1  _ id ,     2  )  ;", "StringListEntity   rev 3     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 1  _ id ,     3  )  ;", "assert   rev 1  . getStrings (  )  . equals ( Collections . EMPTY _ LIST )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeList (  \" sle 1  _ string 1  \"  ,     \" sle 1  _ string 2  \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeList (  \" sle 1  _ string 3  \"  ,     \" sle 1  _ string 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSle1"], "fileName": "org.hibernate.envers.test.integration.collection.StringList"}, {"methodBody": ["METHOD_START", "{", "StringListEntity   rev 1     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 2  _ id ,     1  )  ;", "StringListEntity   rev 2     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 2  _ id ,     2  )  ;", "StringListEntity   rev 3     =    getAuditReader (  )  . find ( StringListEntity . class ,    sle 2  _ id ,     3  )  ;", "assert   rev 1  . getStrings (  )  . equals ( TestTools . makeList (  \" sle 2  _ string 1  \"  ,     \" sle 2  _ string 2  \"  )  )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeList (  \" sle 2  _ string 1  \"  ,     \" sle 2  _ string 2  \"  ,     \" sle 2  _ string 1  \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeList (  \" sle 2  _ string 2  \"  ,     \" sle 2  _ string 1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse2"], "fileName": "org.hibernate.envers.test.integration.collection.StringList"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( StringListEntity . class ,    sle 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( StringListEntity . class ,    sle 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.StringList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sme 1     =    new   Entity (  )  ;", "Entity   sme 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" a \"  )  ;", "em . persist ( sme 1  )  ;", "em . persist ( sme 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . put (  \"  1  \"  ,     \" a \"  )  ;", "sme 1  . getStrings (  )  . put (  \"  2  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . remove (  \"  1  \"  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . remove (  \"  3  \"  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "sme 1  _ id    =    sme 1  . getId (  )  ;", "sme 2  _ id    =    sme 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.StringMap"}, {"methodBody": ["METHOD_START", "{", "StringMapEntity   rev 1     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 1  _ id ,     1  )  ;", "StringMapEntity   rev 2     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 1  _ id ,     2  )  ;", "StringMapEntity   rev 3     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 1  _ id ,     3  )  ;", "StringMapEntity   rev 4     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 1  _ id ,     4  )  ;", "assert   rev 1  . getStrings (  )  . equals ( Collections . EMPTY _ MAP )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,     \" a \"  ,     \"  2  \"  ,     \" b \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeMap (  \"  2  \"  ,     \" b \"  )  )  ;", "assert   rev 4  . getStrings (  )  . equals ( TestTools . makeMap (  \"  2  \"  ,     \" b \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse1"], "fileName": "org.hibernate.envers.test.integration.collection.StringMap"}, {"methodBody": ["METHOD_START", "{", "StringMapEntity   rev 1     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 2  _ id ,     1  )  ;", "StringMapEntity   rev 2     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 2  _ id ,     2  )  ;", "StringMapEntity   rev 3     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 2  _ id ,     3  )  ;", "StringMapEntity   rev 4     =    getAuditReader (  )  . find ( StringMapEntity . class ,    sme 2  _ id ,     4  )  ;", "assert   rev 1  . getStrings (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,     \" a \"  )  )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,     \" a \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,     \" b \"  )  )  ;", "assert   rev 4  . getStrings (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,     \" b \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse2"], "fileName": "org.hibernate.envers.test.integration.collection.StringMap"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( StringMapEntity . class ,    sme 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( StringMapEntity . class ,    sme 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.StringMap"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    new   Simple (  1  ,     \" Simple \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  1  \"  ,     \" One \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  2  \"  ,     \" Two \"  )  ;", "entityManager . persist ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  3  \"  ,     \" Three \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  1  \"  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  2  \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  3  \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  3  \"  ,     \" Three - New \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . clear (  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapLobTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( StringMapLobTest . Simple . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapLobTest"}, {"methodBody": ["METHOD_START", "{", "final   StringMapLobTest . Simple   rev 1     =    getAuditReader (  )  . find ( StringMapLobTest . Simple . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    rev 1  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  1  \"  ,     \" One \"  )  . add (  \"  2  \"  ,     \" Two \"  )  . entries (  )  ,    rev 1  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapLobTest . Simple   rev 2     =    getAuditReader (  )  . find ( StringMapLobTest . Simple . class ,     1  ,     2  )  ;", "Assert . assertEquals (  3  ,    rev 2  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  1  \"  ,     \" One \"  )  . add (  \"  2  \"  ,     \" Two \"  )  . add (  \"  3  \"  ,     \" Three \"  )  . entries (  )  ,    rev 2  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapLobTest . Simple   rev 3     =    getAuditReader (  )  . find ( StringMapLobTest . Simple . class ,     1  ,     3  )  ;", "Assert . assertEquals (  1  ,    rev 3  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  3  \"  ,     \" Three \"  )  . entries (  )  ,    rev 3  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapLobTest . Simple   rev 4     =    getAuditReader (  )  . find ( StringMapLobTest . Simple . class ,     1  ,     4  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  3  \"  ,     \" Three - New \"  )  . entries (  )  ,    rev 4  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapLobTest . Simple   rev 5     =    getAuditReader (  )  . find ( StringMapLobTest . Simple . class ,     1  ,     5  )  ;", "Assert . assertEquals (  0  ,    rev 5  . getEmbeddedMap (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapLobTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    new   Simple (  1  ,     \" Simple \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  1  \"  ,     \" One \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  2  \"  ,     \" Two \"  )  ;", "entityManager . persist ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  3  \"  ,     \" Three \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  1  \"  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  2  \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . remove (  \"  3  \"  )  ;", "simple . getEmbeddedMap (  )  . put (  \"  3  \"  ,     \" Three - New \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,     1  )  ;", "simple . getEmbeddedMap (  )  . clear (  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapNationalizedLobTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( StringMapNationalizedLobTest . Simple . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapNationalizedLobTest"}, {"methodBody": ["METHOD_START", "{", "final   StringMapNationalizedLobTest . Simple   rev 1     =    getAuditReader (  )  . find ( StringMapNationalizedLobTest . Simple . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    rev 1  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  1  \"  ,     \" One \"  )  . add (  \"  2  \"  ,     \" Two \"  )  . entries (  )  ,    rev 1  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapNationalizedLobTest . Simple   rev 2     =    getAuditReader (  )  . find ( StringMapNationalizedLobTest . Simple . class ,     1  ,     2  )  ;", "Assert . assertEquals (  3  ,    rev 2  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  1  \"  ,     \" One \"  )  . add (  \"  2  \"  ,     \" Two \"  )  . add (  \"  3  \"  ,     \" Three \"  )  . entries (  )  ,    rev 2  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapNationalizedLobTest . Simple   rev 3     =    getAuditReader (  )  . find ( StringMapNationalizedLobTest . Simple . class ,     1  ,     3  )  ;", "Assert . assertEquals (  1  ,    rev 3  . getEmbeddedMap (  )  . entrySet (  )  . size (  )  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  3  \"  ,     \" Three \"  )  . entries (  )  ,    rev 3  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapNationalizedLobTest . Simple   rev 4     =    getAuditReader (  )  . find ( StringMapNationalizedLobTest . Simple . class ,     1  ,     4  )  ;", "TestTools . assertCollectionsEqual ( TestTools .  < String ,    String > mapBuilder (  )  . add (  \"  3  \"  ,     \" Three - New \"  )  . entries (  )  ,    rev 4  . getEmbeddedMap (  )  . entrySet (  )  )  ;", "final   StringMapNationalizedLobTest . Simple   rev 5     =    getAuditReader (  )  . find ( StringMapNationalizedLobTest . Simple . class ,     1  ,     5  )  ;", "Assert . assertEquals (  0  ,    rev 5  . getEmbeddedMap (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.collection.StringMapNationalizedLobTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sse 1     =    new   Entity (  )  ;", "Entity   sse 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 1  \"  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 2  \"  )  ;", "em . persist ( sse 1  )  ;", "em . persist ( sse 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 2     =    em . find ( Entity . class ,    sse 2  . getId (  )  )  ;", "sse 1  . getStrings (  )  . add (  \" sse 1  _ string 1  \"  )  ;", "sse 1  . getStrings (  )  . add (  \" sse 1  _ string 2  \"  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 2     =    em . find ( Entity . class ,    sse 2  . getId (  )  )  ;", "sse 1  . getStrings (  )  . remove (  \" sse 1  _ string 3  \"  )  ;", "sse 2  . getStrings (  )  . remove (  \" sse 2  _ string 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "sse 1  _ id    =    sse 1  . getId (  )  ;", "sse 2  _ id    =    sse 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.StringSet"}, {"methodBody": ["METHOD_START", "{", "StringSetEntity   rev 1     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 1  _ id ,     1  )  ;", "StringSetEntity   rev 2     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 1  _ id ,     2  )  ;", "StringSetEntity   rev 3     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 1  _ id ,     3  )  ;", "assert   rev 1  . getStrings (  )  . equals ( Collections . EMPTY _ SET )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeSet (  \" sse 1  _ string 1  \"  ,     \" sse 1  _ string 2  \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeSet (  \" sse 1  _ string 1  \"  ,     \" sse 1  _ string 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse1"], "fileName": "org.hibernate.envers.test.integration.collection.StringSet"}, {"methodBody": ["METHOD_START", "{", "StringSetEntity   rev 1     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 2  _ id ,     1  )  ;", "StringSetEntity   rev 2     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 2  _ id ,     2  )  ;", "StringSetEntity   rev 3     =    getAuditReader (  )  . find ( StringSetEntity . class ,    sse 2  _ id ,     3  )  ;", "assert   rev 1  . getStrings (  )  . equals ( TestTools . makeSet (  \" sse 2  _ string 1  \"  ,     \" sse 2  _ string 2  \"  )  )  ;", "assert   rev 2  . getStrings (  )  . equals ( TestTools . makeSet (  \" sse 2  _ string 1  \"  ,     \" sse 2  _ string 2  \"  )  )  ;", "assert   rev 3  . getStrings (  )  . equals ( TestTools . makeSet (  \" sse 2  _ string 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSse2"], "fileName": "org.hibernate.envers.test.integration.collection.StringSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StringSetEntity . class ,    sse 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( StringSetEntity . class ,    sse 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.StringSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "DarkCharacter   darkCharacter    =    new   DarkCharacter (  1  ,     1  )  ;", "em . persist ( darkCharacter )  ;", "em . getTransa (  )  . commit (  )  ;", "id    =    darkCharacter . getId (  )  ;", "em . getTransa (  )  . begin (  )  ;", "darkCharacter    =    em . find ( DarkCharacter . class ,    darkCharacter . getId (  )  )  ;", "darkCharacter . getNames (  )  . add ( new   Name (  \" A \"  ,     \" Hank \"  )  )  ;", "darkCharacter    =    em . merge ( darkCharacter )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "darkCharacter    =    em . find ( DarkCharacter . class ,    darkCharacter . getId (  )  )  ;", "darkCharacter . getNames (  )  . add ( new   Name (  \" Green \"  ,     \" Lantern \"  )  )  ;", "darkCharacter    =    em . merge ( darkCharacter )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "darkCharacter    =    em . find ( DarkCharacter . class ,    darkCharacter . getId (  )  )  ;", "darkCharacter . getNames (  )  . remove ( new   Name (  \" A \"  ,     \" Hank \"  )  )  ;", "darkCharacter    =    em . merge ( darkCharacter )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "darkCharacter    =    em . find ( DarkCharacter . class ,    darkCharacter . getId (  )  )  ;", "darkCharacter . getNames (  )  . clear (  )  ;", "darkCharacter    =    em . merge ( darkCharacter )  ;", "em . getTransa (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.BasicEmbeddableCollection"}, {"methodBody": ["METHOD_START", "{", "DarkCharacter   darkCharacter    =    new   DarkCharacter ( id ,     1  )  ;", "DarkCharacter   ver 1     =    getAuditReader (  )  . find ( DarkCharacter . class ,    id ,     1  )  ;", "Assert . assertEquals ( darkCharacter ,    ver 1  )  ;", "Assert . assertEquals (  0  ,    ver 1  . getNames (  )  . size (  )  )  ;", "darkCharacter . getNames (  )  . add ( new   Name (  \" A \"  ,     \" Hank \"  )  )  ;", "DarkCharacter   ver 2     =    getAuditReader (  )  . find ( DarkCharacter . class ,    id ,     2  )  ;", "Assert . assertEquals ( darkCharacter ,    ver 2  )  ;", "Assert . assertEquals ( darkCharacter . getNames (  )  ,    ver 2  . getNames (  )  )  ;", "darkCharacter . getNames (  )  . add ( new   Name (  \" Green \"  ,     \" Lantern \"  )  )  ;", "DarkCharacter   ver 3     =    getAuditReader (  )  . find ( DarkCharacter . class ,    id ,     3  )  ;", "Assert . assertEquals ( darkCharacter ,    ver 3  )  ;", "Assert . assertEquals ( darkCharacter . getNames (  )  ,    ver 3  . getNames (  )  )  ;", "darkCharacter . getNames (  )  . remove ( new   Name (  \" A \"  ,     \" Hank \"  )  )  ;", "DarkCharacter   ver 4     =    getAuditReader (  )  . find ( DarkCharacter . class ,    id ,     4  )  ;", "Assert . assertEquals ( darkCharacter ,    ver 4  )  ;", "Assert . assertEquals ( darkCharacter . getNames (  )  ,    ver 4  . getNames (  )  )  ;", "darkCharacter . getNames (  )  . clear (  )  ;", "DarkCharacter   ver 5     =    getAuditReader (  )  . find ( DarkCharacter . class ,    id ,     5  )  ;", "Assert . assertEquals ( darkCharacter ,    ver 5  )  ;", "Assert . assertEquals ( darkCharacter . getNames (  )  ,    ver 5  . getNames (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfCharacter"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.BasicEmbeddableCollection"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( DarkCharacter . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCount"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.BasicEmbeddableCollection"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "return   kills ;", "}", "METHOD_END"], "methodName": ["getKills"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "return   names ;", "}", "METHOD_END"], "methodName": ["getNames"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "this . kills    =    kills ;", "}", "METHOD_END"], "methodName": ["setKills"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "this . names    =    names ;", "}", "METHOD_END"], "methodName": ["setNames"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.DarkCharacter"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity 1    ele 1     =    new   Entity 1  (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1  . getComponentList (  )  . add ( c 3  _  1  )  ;", "em . persist ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . add ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . add ( c 3  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ele 1  _ id    =    ele 1  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList1"}, {"methodBody": ["METHOD_START", "{", "EmbeddableListEntity 1    rev 1     =    getAuditReader (  )  . find ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     1  )  ;", "EmbeddableListEntity 1    rev 2     =    getAuditReader (  )  . find ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     2  )  ;", "EmbeddableListEntity 1    rev 3     =    getAuditReader (  )  . find ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     3  )  ;", "EmbeddableListEntity 1    rev 4     =    getAuditReader (  )  . find ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     4  )  ;", "Assert . assertEquals ( Collections . singletonList ( c 3  _  1  )  ,    rev 1  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( c 3  _  1  ,    c 3  _  2  )  ,    rev 2  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( c 3  _  1  ,    c 3  _  2  ,    c 3  _  1  )  ,    rev 3  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( c 3  _  1  ,    c 3  _  1  )  ,    rev 4  . getComponentList (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEle1"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList1"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableListEntity 1  . class ,    ele 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList1"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity 2    ele 1     =    new   Entity 2  (  )  ;", "em . persist ( entity 1  )  ;", "em . persist ( entity 2  )  ;", "ele 1  . getComponentList (  )  . add ( manyToOneComponent 1  )  ;", "em . persist ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ele _ id 1     =    ele 1  . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . clear (  )  ;", "ele 1  . getComponentList (  )  . add ( manyToOneComponent 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . add ( manyToOneComponent 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "em . persist ( entity 3  )  ;", "ele 1  . getComponentList (  )  . get ( ele 1  . getComponentList (  )  . indexOf ( manyToOneComponent 2  )  )  . setEntity ( entity 3  )  ;", "ele 1  . getComponentList (  )  . get ( ele 1  . getComponentList (  )  . indexOf ( manyToOneComponent 2  )  )  . setData (  \" dataComponent 3  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "em . persist ( entity 4  )  ;", "entity 4 Copy    =    new   StrTestNoProxyEntity ( entity 4  . getStr (  )  ,    entity 4  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . add ( manyToOneComponent 4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . get ( ele 1  . getComponentList (  )  . indexOf ( manyToOneComponent 4  )  )  . getEntity (  )  . setStr (  \" sat 4  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getComponentList (  )  . remove ( ele 1  . getComponentList (  )  . indexOf ( manyToOneComponent 4  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( Entity 2  . class ,    ele 1  . getId (  )  )  ;", "em . remove ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList2"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     1  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 2  ,     \" dataComponent 2  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     2  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 2  ,     \" dataComponent 2  \"  )  ,    new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     3  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 3  ,     \" dataComponent 3  \"  )  ,    new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     4  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 3  ,     \" dataComponent 3  \"  )  ,    new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  ,    new   ManyToOneEagerComponent ( entity 4 Copy ,     \" dataComponent 4  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     5  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 3  ,     \" dataComponent 3  \"  )  ,    new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  ,    new   ManyToOneEagerComponent ( entity 4  ,     \" dataComponent 4  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     6  )  . getComponentList (  )  )  ;", "Assert . assertEquals ( Arrays . asList ( new   ManyToOneEagerComponent ( entity 3  ,     \" dataComponent 3  \"  )  ,    new   ManyToOneEagerComponent ( entity 1  ,     \" dataComponent 1  \"  )  )  ,    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     7  )  . getComponentList (  )  )  ;", "Assert . assertNull ( getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     8  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEle1"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList2"}, {"methodBody": ["METHOD_START", "{", "EmbeddableListEntity 2    rev 1     =    getAuditReader (  )  . find ( EmbeddableListEntity 2  . class ,    ele _ id 1  ,     1  )  ;", "Assert . assertNotNull (  \" Revision   not   found \"  ,    rev 1  )  ;", "Assert . assertTrue (  \" The   component   collection   was   not   audited \"  ,     (  ( rev 1  . getComponentList (  )  . size (  )  )     >     0  )  )  ;", "Assert . assertEquals (  \" The   component   primitive   property   was   not   audited \"  ,     \" dataComponent 1  \"  ,    rev 1  . getComponentList (  )  . get (  0  )  . getData (  )  )  ;", "Assert . assertEquals (  \" The   component   manyToOne   reference   was   not   audited \"  ,    entity 1  ,    rev 1  . getComponentList (  )  . get (  0  )  . getEntity (  )  )  ;", "}", "METHOD_END"], "methodName": ["testManyToOneComponentList"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList2"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     7  ,     8  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableListEntity 2  . class ,    ele _ id 1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestNoProxyEntity . class ,    entity 1  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestNoProxyEntity . class ,    entity 2  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  4  )  ,    getAuditReader (  )  . getRevisions ( StrTestNoProxyEntity . class ,    entity 3  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  5  ,     6  )  ,    getAuditReader (  )  . getRevisions ( StrTestNoProxyEntity . class ,    entity 4  . getId (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList2"}, {"methodBody": ["METHOD_START", "{", "ele 3  _ id    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Entity 3    ele 3     =    new   Entity 3  (  )  ;", "ele 3  . getComponentList (  )  . add ( new   ManyToOneEagerComponent ( null ,     \" data \"  )  )  ;", "entityManager . persist ( ele 3  )  ;", "return   ele 3  . getId (  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList3"}, {"methodBody": ["METHOD_START", "{", "final   EmbeddableListEntity 3    ele 3     =    getAuditReader (  )  . find ( EmbeddableListEntity 3  . class ,    ele 3  _ id ,     1  )  ;", "Assert . assertEquals (  \" Expected   there   to   be   elements   in   the   list \"  ,     1  ,    ele 3  . getComponentList (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionOfEmbeddableWithNullJoinColumn"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList3"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableListEntity 3  . class ,    ele 3  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableList3"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   eme 1     =    new   Entity (  )  ;", "Entity   eme 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "eme 2  . getComponentMap (  )  . put (  \"  1  \"  ,    c 3  _  1  )  ;", "em . persist ( eme 1  )  ;", "em . persist ( eme 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "eme 1     =    em . find ( Entity . class ,    eme 1  . getId (  )  )  ;", "eme 2     =    em . find ( Entity . class ,    eme 2  . getId (  )  )  ;", "eme 1  . getComponentMap (  )  . put (  \"  1  \"  ,    c 3  _  1  )  ;", "eme 1  . getComponentMap (  )  . put (  \"  2  \"  ,    c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "eme 1     =    em . find ( Entity . class ,    eme 1  . getId (  )  )  ;", "eme 2     =    em . find ( Entity . class ,    eme 2  . getId (  )  )  ;", "eme 1  . getComponentMap (  )  . remove (  \"  1  \"  )  ;", "eme 2  . getComponentMap (  )  . put (  \"  1  \"  ,    c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "eme 1     =    em . find ( Entity . class ,    eme 1  . getId (  )  )  ;", "eme 2     =    em . find ( Entity . class ,    eme 2  . getId (  )  )  ;", "eme 1  . getComponentMap (  )  . remove (  \"  3  \"  )  ;", "eme 2  . getComponentMap (  )  . put (  \"  1  \"  ,    c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "eme 1  _ id    =    eme 1  . getId (  )  ;", "eme 2  _ id    =    eme 2  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableMap"}, {"methodBody": ["METHOD_START", "{", "EmbeddableMapEntity   rev 1     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 1  _ id ,     1  )  ;", "EmbeddableMapEntity   rev 2     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 1  _ id ,     2  )  ;", "EmbeddableMapEntity   rev 3     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 1  _ id ,     3  )  ;", "EmbeddableMapEntity   rev 4     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 1  _ id ,     4  )  ;", "Assert . assertEquals ( Collections . EMPTY _ MAP ,    rev 1  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  1  \"  ,    c 3  _  1  ,     \"  2  \"  ,    c 3  _  2  )  ,    rev 2  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  2  \"  ,    c 3  _  2  )  ,    rev 3  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  2  \"  ,    c 3  _  2  )  ,    rev 4  . getComponentMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEme1"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableMap"}, {"methodBody": ["METHOD_START", "{", "EmbeddableMapEntity   rev 1     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 2  _ id ,     1  )  ;", "EmbeddableMapEntity   rev 2     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 2  _ id ,     2  )  ;", "EmbeddableMapEntity   rev 3     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 2  _ id ,     3  )  ;", "EmbeddableMapEntity   rev 4     =    getAuditReader (  )  . find ( EmbeddableMapEntity . class ,    eme 2  _ id ,     4  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  1  \"  ,    c 3  _  1  )  ,    rev 1  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  1  \"  ,    c 3  _  1  )  ,    rev 2  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  1  \"  ,    c 3  _  2  )  ,    rev 3  . getComponentMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap (  \"  1  \"  ,    c 3  _  2  )  ,    rev 4  . getComponentMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEme2"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableMap"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableMapEntity . class ,    eme 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableMapEntity . class ,    eme 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableMap"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   ese 1     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  1  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  3  )  ;", "em . persist ( ese 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  2  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  2  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  1  )  ;", "ese 1  . getComponentSet (  )  . remove ( c 3  _  3  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  2  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ese 1     =    em . find ( Entity . class ,    ese 1  . getId (  )  )  ;", "ese 1  . getComponentSet (  )  . add ( c 3  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ese 1  _ id    =    ese 1  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableSet"}, {"methodBody": ["METHOD_START", "{", "EmbeddableSetEntity   rev 1     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     1  )  ;", "EmbeddableSetEntity   rev 2     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     2  )  ;", "EmbeddableSetEntity   rev 3     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     3  )  ;", "EmbeddableSetEntity   rev 4     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     4  )  ;", "EmbeddableSetEntity   rev 5     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     5  )  ;", "EmbeddableSetEntity   rev 6     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     6  )  ;", "EmbeddableSetEntity   rev 7     =    getAuditReader (  )  . find ( EmbeddableSetEntity . class ,    ese 1  _ id ,     7  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  1  ,    c 3  _  3  )  ,    rev 1  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  1  ,    c 3  _  2  ,    c 3  _  3  )  ,    rev 2  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  1  ,    c 3  _  3  )  ,    rev 3  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  1  ,    c 3  _  2  ,    c 3  _  3  ,    c 3  _  4  )  ,    rev 4  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  1  ,    c 3  _  3  )  ,    rev 5  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  2  ,    c 3  _  4  )  ,    rev 6  . getComponentSet (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( c 3  _  2  ,    c 3  _  4  ,    c 3  _  1  )  ,    rev 7  . getComponentSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEse1"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableSet"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableSetEntity . class ,    ese 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.EmbeddableSet"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Item"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Item"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Item"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Item"}, {"methodBody": ["METHOD_START", "{", "return   firstName ;", "}", "METHOD_END"], "methodName": ["getFirstName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Name"}, {"methodBody": ["METHOD_START", "{", "return   lastName ;", "}", "METHOD_END"], "methodName": ["getLastName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Name"}, {"methodBody": ["METHOD_START", "{", "this . firstName    =    firstName ;", "}", "METHOD_END"], "methodName": ["setFirstName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Name"}, {"methodBody": ["METHOD_START", "{", "this . lastName    =    lastName ;", "}", "METHOD_END"], "methodName": ["setLastName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Name"}, {"methodBody": ["METHOD_START", "{", "this . productId    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Product   product    =    new   Product (  1  ,     \" Test \"  )  ;", "product . getItems (  )  . add ( new   Item (  \" bread \"  ,    null )  )  ;", "entityManager . persist ( product )  ;", "return   product . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Type   type    =    new   Type (  2  ,     \" T 2  \"  )  ;", "entityManager . persist ( type )  ;", "Product   product    =    entityManager . find (  . class ,    productId )  ;", "product . getItems (  )  . add ( new   Item (  \" bread 2  \"  ,    type )  )  ;", "entityManager . merge ( product )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Product   product    =    entityManager . find (  . class ,    productId )  ;", "product . getItems (  )  . remove (  0  )  ;", "entityManager . merge ( product )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.NullPointerExceptionTest"}, {"methodBody": ["METHOD_START", "{", "final   Product   product    =    getAuditReader (  )  . find ( Product . class ,    productId ,     1  )  ;", "Assert . assertEquals (  1  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision1"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.NullPointerExceptionTest"}, {"methodBody": ["METHOD_START", "{", "final   Product   product    =    getAuditReader (  )  . find ( Product . class ,    productId ,     2  )  ;", "Assert . assertEquals (  2  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals (  \" bread 2  \"  ,    product . getItems (  )  . get (  1  )  . getName (  )  )  ;", "Assert . assertEquals ( new   Type (  2  ,     \" T 2  \"  )  ,    product . getItems (  )  . get (  1  )  . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision2"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.NullPointerExceptionTest"}, {"methodBody": ["METHOD_START", "{", "final   Product   product    =    getAuditReader (  )  . find ( Product . class ,    productId ,     3  )  ;", "Assert . assertEquals (  1  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread 2  \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals ( new   Type (  2  ,     \" T 2  \"  )  ,    product . getItems (  )  . get (  0  )  . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision3"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.NullPointerExceptionTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Product . class ,    productId )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . find ( Product . class ,    productId ,     1  )  . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . find ( Product . class ,    productId ,     2  )  . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . find ( Product . class ,    productId ,     3  )  . getItems (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.NullPointerExceptionTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "return   items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "this . items    =    items ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Product"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Type"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Type"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Type"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.collection.embeddable.Type"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   imke    =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   cte 1     =    new   ComponentTestEntity ( new   Component 1  (  \" x 1  \"  ,     \" y 2  \"  )  ,    new   Component 2  (  \" a 1  \"  ,     \" b 2  \"  )  )  ;", "ComponentTestEntity   cte 2     =    new   ComponentTestEntity ( new   Component 1  (  \" x 1  \"  ,     \" y 2  \"  )  ,    new   Component 2  (  \" a 1  \"  ,     \" b 2  \"  )  )  ;", "em . persist ( cte 1  )  ;", "em . persist ( cte 2  )  ;", "imke . getIdmap (  )  . put ( cte 1  . getComp 1  (  )  ,    cte 1  )  ;", "em . persist ( imke )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 2     =    em . find ( ComponentTestEntity . class ,    cte 2  . getId (  )  )  ;", "imke    =    em . find ( Entity . class ,    imke . getId (  )  )  ;", "imke . getIdmap (  )  . put ( cte 2  . getComp 1  (  )  ,    cte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "cmke _ id    =    imke . getId (  )  ;", "cte 1  _ id    =    cte 1  . getId (  )  ;", "cte 2  _ id    =    cte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   cte 1     =    getEntityManager (  )  . find ( ComponentTestEntity . class ,    cte 1  _ id )  ;", "ComponentTestEntity   cte 2     =    getEntityManager (  )  . find ( ComponentTestEntity . class ,    cte 2  _ id )  ;", "cte 1  . setComp 2  ( null )  ;", "cte 2  . setComp 2  ( null )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    cmke _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    cmke _ id ,     2  )  ;", "assert   rev 1  . getIdmap (  )  . equals ( TestTools . makeMap ( cte 1  . getComp 1  (  )  ,    cte 1  )  )  ;", "assert   rev 2  . getIdmap (  )  . equals ( TestTools . makeMap ( cte 1  . getComp 1  (  )  ,    cte 1  ,    cte 2  . getComp 1  (  )  ,    cte 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfImke"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentMapKeyEntity . class ,    cmke _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   idmap ;", "}", "METHOD_END"], "methodName": ["getIdmap"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . idmap    =    idmap ;", "}", "METHOD_END"], "methodName": ["setIdmap"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" CMKE ( id    =     \"     +     ( id )  )     +     \"  ,    idmap    =     \"  )     +     ( idmap )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.ComponentMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   imke    =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  \" x \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  \" y \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "imke . getIdmap (  )  . put ( ste 1  . getId (  )  ,    ste 1  )  ;", "em . persist ( imke )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste 2     =    em . find ( StrTestEntity . class ,    ste 2  . getId (  )  )  ;", "imke    =    em . find ( Entity . class ,    imke . getId (  )  )  ;", "imke . getIdmap (  )  . put ( ste 2  . getId (  )  ,    ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "imke _ id    =    imke . getId (  )  ;", "ste 1  _ id    =    ste 1  . getId (  )  ;", "ste 2  _ id    =    ste 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKey"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste 1  _ id )  ;", "StrTestEntity   ste 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste 2  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    imke _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    imke _ id ,     2  )  ;", "assert   rev 1  . getIdmap (  )  . equals ( TestTools . makeMap ( ste 1  . getId (  )  ,    ste 1  )  )  ;", "assert   rev 2  . getIdmap (  )  . equals ( TestTools . makeMap ( ste 1  . getId (  )  ,    ste 1  ,    ste 2  . getId (  )  ,    ste 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfImke"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKey"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( IdMapKeyEntity . class ,    imke _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKey"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   idmap ;", "}", "METHOD_END"], "methodName": ["getIdmap"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . idmap    =    idmap ;", "}", "METHOD_END"], "methodName": ["setIdmap"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" IMKE ( id    =     \"     +     ( id )  )     +     \"  ,    idmap    =     \"  )     +     ( idmap )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.collection.mapkey.IdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Person   p    =    new   Person (  )  ;", "Name   n    =    new   Name (  )  ;", "n . setName (  \" name 1  \"  )  ;", "p . getNames (  )  . add ( n )  ;", "session . saveOrUpdate ( p )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "n . setName (  \" d   name \"  )  ;", "session . saveOrUpdate ( p )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Name   n 2     =    new   Name (  )  ;", "n 2  . setName (  \" name 2  \"  )  ;", "p . getNames (  )  . add ( n 2  )  ;", "session . getTransaction (  )  . commit (  )  ;", "personId    =    p . getId (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.AbstractCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . getRevisions ( Person . class ,    personId )  . equals ( getExpectedPersonRevisions (  )  )  ;", "}", "METHOD_END"], "methodName": ["testPersonRevisionCount"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.AbstractCollectionChangeTest"}, {"methodBody": ["METHOD_START", "{", "return    \" false \"  ;", "}", "METHOD_END"], "methodName": ["getCollectionChangeValue"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.CollectionChangeNoRevisionTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "return   person ;", "}", "METHOD_END"], "methodName": ["getPerson"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "this . person    =    person ;", "}", "METHOD_END"], "methodName": ["setPerson"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Name"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Person"}, {"methodBody": ["METHOD_START", "{", "return   names ;", "}", "METHOD_END"], "methodName": ["getNames"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Person"}, {"methodBody": ["METHOD_START", "{", "this . names    =    names ;", "}", "METHOD_END"], "methodName": ["setNames"], "fileName": "org.hibernate.envers.test.integration.collection.norevision.Person"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   cte 1     =    new   TestEntity ( new    1  (  \" a \"  ,     \" b \"  )  ,    new    2  (  \" x \"  ,     \" y \"  )  )  ;", "TestEntity   cte 2     =    new   TestEntity ( new    1  (  \" a 2  \"  ,     \" b 2  \"  )  ,    new    2  (  \" x 2  \"  ,     \" y 2  \"  )  )  ;", "TestEntity   cte 3     =    new   TestEntity ( new    1  (  \" a 3  \"  ,     \" b 3  \"  )  ,    new    2  (  \" x 3  \"  ,     \" y 3  \"  )  )  ;", "TestEntity   cte 4     =    new   TestEntity ( null ,    null )  ;", "em . persist ( cte 1  )  ;", "em . persist ( cte 2  )  ;", "em . persist ( cte 3  )  ;", "em . persist ( cte 4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "cte 3     =    em . find ( TestEntity . class ,    cte 3  . getId (  )  )  ;", "cte 4     =    em . find ( TestEntity . class ,    cte 4  . getId (  )  )  ;", "cte 1  . setComp 1  ( new    1  (  \" a '  \"  ,     \" b '  \"  )  )  ;", "cte 2  . getComp 1  (  )  . setStr 1  (  \" a 2  '  \"  )  ;", "cte 3  . getComp 2  (  )  . setStr 6  (  \" y 3  '  \"  )  ;", "cte 4  . setComp 1  ( new    1  (  )  )  ;", "cte 4  . getComp 1  (  )  . setStr 1  (  \" n \"  )  ;", "cte 4  . setComp 2  ( new    2  (  )  )  ;", "cte 4  . getComp 2  (  )  . setStr 5  (  \" m \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "cte 3     =    em . find ( TestEntity . class ,    cte 3  . getId (  )  )  ;", "cte 4     =    em . find ( TestEntity . class ,    cte 4  . getId (  )  )  ;", "cte 1  . setComp 2  ( new    2  (  \" x '  \"  ,     \" y '  \"  )  )  ;", "cte 3  . getComp 1  (  )  . setStr 2  (  \" b 3  '  \"  )  ;", "cte 4  . setComp 1  ( null )  ;", "cte 4  . setComp 2  ( null )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "em . remove ( cte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "id 2     =    cte 2  . getId (  )  ;", "id 3     =    cte 3  . getId (  )  ;", "id 4     =    cte 4  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   ver 1     =    new   ComponentTestEntity ( id 1  ,    new   Component 1  (  \" a \"  ,     \" b \"  )  ,    null )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( id 1  ,    new   Component 1  (  \" a '  \"  ,     \" b '  \"  )  ,    null )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     4  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   ver 1     =    new   ComponentTestEntity ( id 2  ,    new   Component 1  (  \" a 2  \"  ,     \" b 2  \"  )  ,    null )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( id 2  ,    new   Component 1  (  \" a 2  '  \"  ,     \" b 2  \"  )  ,    null )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 2  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 2  ,     3  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 2  ,     4  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   ver 1     =    new   ComponentTestEntity ( id 3  ,    new   Component 1  (  \" a 3  \"  ,     \" b 3  \"  )  ,    null )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( id 3  ,    new   Component 1  (  \" a 3  \"  ,     \" b 3  '  \"  )  ,    null )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 3  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 3  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 3  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 3  ,     4  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   ver 1     =    new   ComponentTestEntity ( id 4  ,    null ,    null )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( id 4  ,    new   Component 1  (  \" n \"  ,    null )  ,    null )  ;", "ComponentTestEntity   ver 3     =    new   ComponentTestEntity ( id 4  ,    null ,    null )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 4  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 4  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 4  ,     3  )  . equals ( ver 3  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 4  ,     4  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId4"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentTestEntity . class ,    id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentTestEntity . class ,    id 2  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentTestEntity . class ,    id 3  )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentTestEntity . class ,    id 4  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.Components"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Long   entCount    =     (  ( Long )     ( em . createQuery (  (  \" select   count ( s )    from   TestEntity   s   where   s . id    =     \"     +     ( expectedId . toString (  )  )  )  )  . getSingleResult (  )  )  )  ;", "Number   auditCount    =     (  ( Number )     ( em . createNativeQuery (  (  \" select   count ( id )    from    _ AUD   s   where   s . id    =     \"     +     ( expectedId . toString (  )  )  )  )  . getSingleResult (  )  )  )  ;", "String   comp 2 Str 1 Rev 1     =     (  ( String )     ( em . createNativeQuery (  (  \" select   COMP 2  _ STR 1    from    _ AUD   s   where   REV =  1    and   s . id    =     \"     +     ( expectedId . toString (  )  )  )  )  . getSingleResult (  )  )  )  ;", "String   comp 2 Str 1 Rev 2     =     (  ( String )     ( em . createNativeQuery (  (  \" select   COMP 2  _ STR 1    from    _ AUD   s   where   REV =  2    and   s . id    =     \"     +     ( expectedId . toString (  )  )  )  )  . getSingleResult (  )  )  )  ;", "assert   Long . valueOf (  1 L )  . equals ( entCount )  ;", "assert   Integer . valueOf (  2  )  . equals ( auditCount . intValue (  )  )  ;", "if    ( expectedComp 2 Str 1 Rev 1     =  =    null )     {", "assert   comp 2 Str 1 Rev 1     =  =    null ;", "} else    {", "assert   expectedComp 2 Str 1 Rev 1  . equals ( comp 2 Str 1 Rev 1  )  ;", "}", "if    ( expectedComp 2 Str 1 Rev 2     =  =    null )     {", "assert   comp 2 Str 1 Rev 2     =  =    null ;", "} else    {", "assert   expectedComp 2 Str 1 Rev 2  . equals ( comp 2 Str 1 Rev 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCorrectlyPersisted"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   cte 0     =    TestEntity . of ( null )  ;", "TestEntity   cte 1     =    TestEntity . of (  1  . of (  \" c 1  - str 1  \"  ,    null )  )  ;", "TestEntity   cte 2     =    TestEntity . of (  1  . of (  \" c 1  - str 1  \"  ,     2  . of (  \" c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "TestEntity   cte 3     =    TestEntity . of (  1  . of ( null ,     2  . of (  \" c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "TestEntity   cte 4     =    TestEntity . of (  1  . of ( null ,     2  . of ( null ,     \" c 2  - str 2  \"  )  )  )  ;", "TestEntity   cte 5     =    TestEntity . of (  1  . of ( null ,     2  . of (  \" c 2  - str 1  \"  ,    null )  )  )  ;", "TestEntity   cte 6     =    TestEntity . of (  1  . of ( null ,     2  . of ( null ,    null )  )  )  ;", "em . persist ( cte 0  )  ;", "em . persist ( cte 1  )  ;", "em . persist ( cte 2  )  ;", "em . persist ( cte 3  )  ;", "em . persist ( cte 4  )  ;", "em . persist ( cte 5  )  ;", "em . persist ( cte 6  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 0     =    em . find ( TestEntity . class ,    cte 0  . getId (  )  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "cte 3     =    em . find ( TestEntity . class ,    cte 3  . getId (  )  )  ;", "cte 4     =    em . find ( TestEntity . class ,    cte 4  . getId (  )  )  ;", "cte 5     =    em . find ( TestEntity . class ,    cte 5  . getId (  )  )  ;", "cte 6     =    em . find ( TestEntity . class ,    cte 6  . getId (  )  )  ;", "cte 0  . setComp 1  (  1  . of (  \" upd - c 1  - str 1  \"  ,    null )  )  ;", "cte 1  . setComp 1  (  1  . of ( null ,     2  . of (  \" upd - c 2  - str 1  \"  ,     \" upd - c 2  - str 2  \"  )  )  )  ;", "cte 2  . getComp 1  (  )  . getComp 2  (  )  . setStr 1  (  \" upd - c 2  - str 1  \"  )  ;", "cte 3  . getComp 1  (  )  . getComp 2  (  )  . setStr 1  (  \" upd - c 2  - str 1  \"  )  ;", "cte 4  . getComp 1  (  )  . getComp 2  (  )  . setStr 1  (  \" upd - c 2  - str 1  \"  )  ;", "cte 5  . getComp 1  (  )  . getComp 2  (  )  . setStr 1  (  \" upd - c 2  - str 1  \"  )  ;", "cte 6  . getComp 1  (  )  . getComp 2  (  )  . setStr 1  (  \" upd - c 2  - str 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 0     =    cte 0  . getId (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "id 2     =    cte 2  . getId (  )  ;", "id 3     =    cte 3  . getId (  )  ;", "id 4     =    cte 4  . getId (  )  ;", "id 5     =    cte 5  . getId (  )  ;", "id 6     =    cte 6  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 0  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 0  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 0     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "checkCorrectlyPersisted ( id 0  ,    null ,    null )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 0  ,    DefaultValueComponent 1  . of ( null ,    null )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 0  ,    DefaultValueComponent 1  . of (  \" upd - c 1  - str 1  \"  ,    null )  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId0"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 1  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 1  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 1     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "checkCorrectlyPersisted ( id 1  ,    null ,     \" upd - c 2  - str 1  \"  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 1  ,    DefaultValueComponent 1  . of (  \" c 1  - str 1  \"  ,    null )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 1  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,     \" upd - c 2  - str 2  \"  )  )  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 2  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 2  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 2     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 2  ,    DefaultValueComponent 1  . of (  \" c 1  - str 1  \"  ,    DefaultValueComponent 2  . of (  \" c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 2  ,    DefaultValueComponent 1  . of (  \" c 1  - str 1  \"  ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 3  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 3  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 3     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 3  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 3  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 4  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 4  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 4     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 4  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of ( null ,     \" c 2  - str 2  \"  )  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 4  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,     \" c 2  - str 2  \"  )  )  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId4"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 5  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 5  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 5     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 5  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" c 2  - str 1  \"  ,    null )  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 5  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,    null )  )  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId5"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponentTestEntity   ent 1     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 6  ,     1  )  ;", "DefaultValueComponentTestEntity   ent 2     =    getAuditReader (  )  . find ( DefaultValueComponentTestEntity . class ,    id 6  ,     2  )  ;", ". log . error (  \"  -  -  -  -  -  -  -  -  -  -  -  -    id 6     -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", ". log . error ( ent 1  . toString (  )  )  ;", ". log . error ( ent 2  . toString (  )  )  ;", "DefaultValueComponentTestEntity   expectedVer 1     =    DefaultValueComponentTestEntity . of ( id 6  ,    DefaultValueComponent 1  . of ( null ,    null )  )  ;", "DefaultValueComponentTestEntity   expectedVer 2     =    DefaultValueComponentTestEntity . of ( id 6  ,    DefaultValueComponent 1  . of ( null ,    DefaultValueComponent 2  . of (  \" upd - c 2  - str 1  \"  ,    null )  )  )  ;", "assert   ent 2  . equals ( expectedVer 2  )  ;", "assert   ent 1  . equals ( expectedVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId6"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 0  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 1  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 2  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 3  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 4  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 5  )  . toString (  )  )  ;", "DefaultValueComponents . log . error ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 6  )  . toString (  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 0  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 2  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 3  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 4  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 5  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DefaultValueComponentTestEntity . class ,    id 6  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.DefaultValueComponents"}, {"methodBody": ["METHOD_START", "{", "headerId    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Header   h 1     =    new   Header (  \" h 1  \"  )  ;", "h 1  . addItem ( new   Item (  \" h 1  - item 0  \"  ,    h 1  )  )  ;", "h 1  . addItem ( new   Item (  \" h 1  - item 1  \"  ,    h 1  )  )  ;", "entityManager . persist ( h 1  )  ;", "return   h 1  . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Header   header    =    entityManager . find (  . class ,    headerId )  ;", "header . addItem ( new   Item (  \" h 1  - item 2  \"  ,    header )  )  ;", "entityManager . merge ( header )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Header   header    =    entityManager . find (  . class ,    headerId )  ;", "header . removeItem ( header . get (  )  . getItems (  )  . get (  0  )  )  ;", "entityManager . merge ( header )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Header   header    =    entityManager . find (  . class ,    headerId )  ;", "header . set ( null )  ;", "entityManager . merge ( header )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.EmbeddableWithCollectionTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( EmbeddableWithCollectionTest . Header . class ,    headerId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.components.EmbeddableWithCollectionTest"}, {"methodBody": ["METHOD_START", "{", "final   EmbeddableWithCollectionTest . Header   rev 1     =    getAuditReader (  )  . find ( EmbeddableWithCollectionTest . Header . class ,    headerId ,     1  )  ;", "Assert . assertEquals (  2  ,    rev 1  . getEmbeddableWithCollection (  )  . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 0  \"  ,    rev 1  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 1  \"  ,    rev 1  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  1  )  . getName (  )  )  ;", "final   EmbeddableWithCollectionTest . Header   rev 2     =    getAuditReader (  )  . find ( EmbeddableWithCollectionTest . Header . class ,    headerId ,     2  )  ;", "Assert . assertEquals (  3  ,    rev 2  . getEmbeddableWithCollection (  )  . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 0  \"  ,    rev 2  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 1  \"  ,    rev 2  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  1  )  . getName (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 2  \"  ,    rev 2  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  2  )  . getName (  )  )  ;", "final   EmbeddableWithCollectionTest . Header   rev 3     =    getAuditReader (  )  . find ( EmbeddableWithCollectionTest . Header . class ,    headerId ,     3  )  ;", "Assert . assertEquals (  2  ,    rev 3  . getEmbeddableWithCollection (  )  . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 1  \"  ,    rev 3  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals (  \" h 1  - item 2  \"  ,    rev 3  . getEmbeddableWithCollection (  )  . getItems (  )  . get (  1  )  . getName (  )  )  ;", "final   EmbeddableWithCollectionTest . Header   rev 4     =    getAuditReader (  )  . find ( EmbeddableWithCollectionTest . Header . class ,    headerId ,     4  )  ;", "Assert . assertEquals (  0  ,    rev 4  . getEmbeddableWithCollection (  )  . getItems (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.components.EmbeddableWithCollectionTest"}, {"methodBody": ["METHOD_START", "{", "uniquePropsAudit    =    metadata (  )  . getEntityBinding (  \" UniquePropsEntity _ AUD \"  )  ;", "uniquePropsNotAuditedAudit    =    metadata (  )  . getEntityBinding (  \" UniquePropsNotAuditedEntity _ AUD \"  )  ;", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "UniquePropsEntity   ent    =    new   UniquePropsEntity (  )  ;", "ent . setData 1  (  \" data 1  \"  )  ;", "ent . setData 2  (  \" data 2  \"  )  ;", "session . persist ( ent )  ;", "session . getTransaction (  )  . commit (  )  ;", "entityRev 1     =    new   UniquePropsEntity ( ent . getId (  )  ,    ent . getData 1  (  )  ,    ent . getData 2  (  )  )  ;", "session . getTransaction (  )  . begin (  )  ;", "UniquePropsNotAuditedEntity   entNotAud    =    new   UniquePropsNotAuditedEntity (  )  ;", "entNotAud . setData 1  (  \" data 3  \"  )  ;", "entNotAud . setData 2  (  \" data 4  \"  )  ;", "session . persist ( entNotAud )  ;", "session . getTransaction (  )  . commit (  )  ;", "entityNotAuditedRev 2     =    new   UniquePropsNotAuditedEntity ( entNotAud . getId (  )  ,    entNotAud . getData 1  (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.PropertiesGroupTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( uniquePropsAudit . getTable (  )  . getColumn ( new   Column (  \" DATA 1  \"  )  )  )  ;", "Assert . assertNotNull ( uniquePropsAudit . getTable (  )  . getColumn ( new   Column (  \" DATA 2  \"  )  )  )  ;", "Assert . assertNotNull ( uniquePropsNotAuditedAudit . getTable (  )  . getColumn ( new   Column (  \" DATA 1  \"  )  )  )  ;", "Assert . assertNull ( uniquePropsNotAuditedAudit . getTable (  )  . getColumn ( new   Column (  \" DATA 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditTableColumns"], "fileName": "org.hibernate.envers.test.integration.components.PropertiesGroupTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( entityRev 1  ,    getAuditReader (  )  . find ( UniquePropsEntity . class ,    entityRev 1  . getId (  )  ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfUniquePropsEntity"], "fileName": "org.hibernate.envers.test.integration.components.PropertiesGroupTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( entityNotAuditedRev 2  ,    getAuditReader (  )  . find ( UniquePropsNotAuditedEntity . class ,    entityNotAuditedRev 2  . getId (  )  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfUniquePropsNotAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.components.PropertiesGroupTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetTestEntity   cte 1     =    new   SetTestEntity (  )  ;", "SetTestEntity   cte 2     =    new   SetTestEntity (  )  ;", "cte 2  . getComps (  )  . add ( new    1  (  \" string 1  \"  ,    null )  )  ;", "em . persist ( cte 2  )  ;", "em . persist ( cte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( SetTestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 1  . getComps (  )  . add ( new    1  (  \" a \"  ,     \" b \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "id 2     =    cte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.collections.CollectionOfComponents"}, {"methodBody": ["METHOD_START", "{", "final   Component 1    componentV 1     =    new   Component 1  (  \" string 1  \"  ,    null )  ;", "final   ComponentSetTestEntity   entityV 1     =    getAuditReader (  )  . find ( ComponentSetTestEntity . class ,    id 2  ,     1  )  ;", "Assert . assertEquals (  \" Expected   a   component \"  ,    Csingleton ( componentV 1  )  ,    entityV 1  . getComps (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionOfEmbeddableWithNullValue"], "fileName": "org.hibernate.envers.test.integration.components.collections.CollectionOfComponents"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  0  ,    getAuditReader (  )  . find ( ComponentSetTestEntity . class ,    id 1  ,     1  )  . getComps (  )  . size (  )  )  ;", "Set < Component 1  >    comps 1     =    getAuditReader (  )  . find ( ComponentSetTestEntity . class ,    id 1  ,     2  )  . getComps (  )  ;", "Assert . assertEquals (  1  ,    comps 1  . size (  )  )  ;", "Assert . assertTrue ( comps 1  . contains ( new   Component 1  (  \" a \"  ,     \" b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.collections.CollectionOfComponents"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ComponentSetTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.collections.CollectionOfComponents"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["getCode"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.AbstractCode"}, {"methodBody": ["METHOD_START", "{", "this . code    =    code ;", "}", "METHOD_END"], "methodName": ["setCode"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.AbstractCode"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetTestEntity   cte 1     =    new   SetTestEntity (  )  ;", "em . persist ( cte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( SetTestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 1  . getComps (  )  . add ( new   Code (  1  )  )  ;", "cte 1  . getCompsNotAudited (  )  . add ( new   Code (  1  0  0  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.CollectionOfMappedSuperclassComponentsTest"}, {"methodBody": ["METHOD_START", "{", "MappedSuperclassComponentSetTestEntity   entity    =    getAuditReader (  )  . find ( MappedSuperclassComponentSetTestEntity . class ,    id 1  ,     1  )  ;", "Assert . assertEquals (  0  ,    entity . getComps (  )  . size (  )  )  ;", "Assert . assertEquals (  0  ,    entity . getCompsNotAudited (  )  . size (  )  )  ;", "entity    =    getAuditReader (  )  . find ( MappedSuperclassComponentSetTestEntity . class ,    id 1  ,     2  )  ;", "Set < Code >    comps 1     =    entity . getComps (  )  ;", "Assert . assertEquals (  0  ,    comps 1  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.CollectionOfMappedSuperclassComponentsTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( MappedSuperclassComponentSetTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.CollectionOfMappedSuperclassComponentsTest"}, {"methodBody": ["METHOD_START", "{", "return   comps ;", "}", "METHOD_END"], "methodName": ["getComps"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   compsNotAudited ;", "}", "METHOD_END"], "methodName": ["getCompsNotAudited"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comps    =    comps ;", "}", "METHOD_END"], "methodName": ["setComps"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . compsNotAudited    =    compsNotAudited ;", "}", "METHOD_END"], "methodName": ["setCompsNotAudited"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.collections.mappedsuperclasselement.MappedSuperclassComponentSetTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   dynamicConfiguration ;", "}", "METHOD_END"], "methodName": ["getDynamicConfiguration"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "this . dynamicConfiguration    =    dynamicConfiguration ;", "}", "METHOD_END"], "methodName": ["setDynamicConfiguration"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AdvancedEntity"}, {"methodBody": ["METHOD_START", "{", "return   ageInYears ;", "}", "METHOD_END"], "methodName": ["getAgeInYears"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.Age"}, {"methodBody": ["METHOD_START", "{", "this . ageInYears    =    ageInYears ;", "}", "METHOD_END"], "methodName": ["setAgeInYears"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.Age"}, {"methodBody": ["METHOD_START", "{", "return   customFields ;", "}", "METHOD_END"], "methodName": ["getCustomFields"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "return   simpleEntity ;", "}", "METHOD_END"], "methodName": ["getSimpleEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "this . customFields    =    customFields ;", "}", "METHOD_END"], "methodName": ["setCustomFields"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "this . simpleEntity    =    simpleEntity ;", "}", "METHOD_END"], "methodName": ["setSimpleEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentEntity"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "SimpleEntity   simpleEntity    =    new   SimpleEntity (  1 L ,     \" Very   simple   entity \"  )  ;", "session . getTransaction (  )  . begin (  )  ;", "session . save ( simpleEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Entity   entity    =    new   Entity (  1 L ,     \" static   field   value \"  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     1  3  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,     0  .  1 F )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    simpleEntity )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    true )  ;", "session . save ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "SimpleEntity   simpleEntity 2     =    new   SimpleEntity (  2 L ,     \" Not   so   simple   entity \"  )  ;", "session . save ( simpleEntity 2  )  ;", "entity    =     (  ( Entity )     ( session . get ( Entity . class ,    entity . getId (  )  )  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    simpleEntity 2  )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( Entity )     ( session . get ( Entity . class ,    entity . getId (  )  )  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     2  )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    false )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( Entity )     ( session . load ( Entity . class ,    entity . getId (  )  )  )  )  ;", "entity . getCustomFields (  )  . remove (  \" prop 2  \"  )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( Entity )     ( session . load ( Entity . class ,    entity . getId (  )  )  )  )  ;", "entity . getCustomFields (  )  . clear (  )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( Entity )     ( session . load ( Entity . class ,    entity . getId (  )  )  )  )  ;", "session . delete ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "final   Configuration   config    =    new   Configuration (  )  ;", "final   URL   hbm    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / dynamicComponents / mapAudited . hbm . xml \"  )  ;", "config . addFile ( new   File ( hbm . toURI (  )  )  )  ;", "final   String   auditStrategy    =    getAuditStrategy (  )  ;", "if    (  !  ( StringTools . isEmpty ( auditStrategy )  )  )     {", "config . setProperty ( EnversSettings . AUDIT _ STRATEGY ,    auditStrategy )  ;", "}", "final   ServiceRegistry   serviceRegistry    =    ServiceRegistryBuilder . buildServiceRegistry ( config . getProperties (  )  )  ;", "try    {", "config . buildSessionFactory ( serviceRegistry )  ;", "Assert . fail (  \" MappingException   expected \"  )  ;", "}    catch    ( MappingException   e )     {", "Assert . assertEquals (  (  (  \" Audited   dynamic - component   properties   are   not   supported .    Consider   applying    @ NotAudited   annotation   to    \"     +     ( Entity . class . getName (  )  )  )     +     \"  # customFields .  \"  )  ,    e . getMessage (  )  )  ;", "}    finally    {", "ServiceRegistryBuilder . destroy ( serviceRegistry )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuditedDynamicComponentFailure"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "AuditedDynamicComponentEntity   entity    =    new   AuditedDynamicComponentEntity (  1 L ,     \" static   field   value \"  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     1  3  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,     0  .  1 F )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    new   SimpleEntity (  1 L ,     \" Very   simple   entity \"  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    true )  ;", "AuditedDynamicComponentEntity   ver 2     =    getAuditReader (  )  . find ( AuditedDynamicComponentEntity . class ,    entity . getId (  )  ,     2  )  ;", "Assert . assertEquals ( entity ,    ver 2  )  ;", "SimpleEntity   simpleEntity 2     =    new   SimpleEntity (  2 L ,     \" Not   so   simple   entity \"  )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    simpleEntity 2  )  ;", "AuditedDynamicComponentEntity   ver 3     =    getAuditReader (  )  . find ( AuditedDynamicComponentEntity . class ,    entity . getId (  )  ,     3  )  ;", "Assert . assertEquals ( entity ,    ver 3  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     2  )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    false )  ;", "AuditedDynamicComponentEntity   ver 4     =    getAuditReader (  )  . find ( AuditedDynamicComponentEntity . class ,    entity . getId (  )  ,     4  )  ;", "Assert . assertEquals ( entity ,    ver 4  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,    null )  ;", "AuditedDynamicComponentEntity   ver 5     =    getAuditReader (  )  . find ( AuditedDynamicComponentEntity . class ,    entity . getId (  )  ,     5  )  ;", "Assert . assertEquals ( entity ,    ver 5  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,    null )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,    null )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    null )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    null )  ;", "AuditedDynamicComponentEntity   ver 6     =    getAuditReader (  )  . find ( AuditedDynamicComponentEntity . class ,    entity . getId (  )  ,     6  )  ;", "Assert . assertEquals ( entity ,    ver 6  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "AuditedDynamicComponentEntity   entity    =    new   AuditedDynamicComponentEntity (  1 L ,     \" static   field   value \"  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     1  3  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,     0  .  1 F )  ;", "entity . getCustomFields (  )  . put (  \" prop 3  \"  ,    new   SimpleEntity (  1 L ,     \" Very   simple   entity \"  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 4  \"  ,    true )  ;", "List   resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AuditedDynamicComponentEntity . class ,     2  )  . add ( AuditEntity . property (  \" customFields _ prop 1  \"  )  . le (  2  0  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AuditedDynamicComponentEntity . class ,     2  )  . add ( AuditEntity . property (  \" customFields _ prop 3  \"  )  . eq ( new   SimpleEntity (  1 L ,     \" Very   simple   entity \"  )  )  )  . getResultList (  )  ;", "entity    =     (  ( AuditedDynamicComponentEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AuditedDynamicComponentEntity . class ,     4  )  . getResultList (  )  . get (  0  )  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,    null )  ;", "resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AuditedDynamicComponentEntity . class ,     5  )  . add ( AuditEntity . property (  \" customFields _ prop 2  \"  )  . isNull (  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testOfQueryOnDynamicComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  2  ,     3  ,     4  ,     5  ,     6  ,     7  )  ,    getAuditReader (  )  . getRevisions ( AuditedDynamicComponentEntity . class ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "AdvancedEntity   advancedEntity    =    new   AdvancedEntity (  )  ;", "advancedEntity . setId (  1 L )  ;", "advancedEntity . setNote (  \" Test   note \"  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . PROP _ BOOLEAN ,    true )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . PROP _ INT ,     1  9  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . PROP _ FLOAT ,     1  5  .  9 F )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . PROP _ MANY _ TO _ ONE ,    manyToOne )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . PROP _ ONE _ TO _ ONE ,    oneToOne )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ COMPONENT ,    new   InternalComponent (  \" Internal   value \"  )  )  ;", "List < String >    list    =    new   ArrayList < String >  (  )  ;", "list . add (  \" One \"  )  ;", "list . add (  \" Two \"  )  ;", "list . add (  \" Three \"  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ LIST ,    list )  ;", "Map < String ,    String >    map    =    new   HashMap < String ,    String >  (  )  ;", "map . put (  \" one \"  ,     \"  1  \"  )  ;", "map . put (  \" two \"  ,     \"  2  \"  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ MAP ,    map )  ;", "Map < String ,    ManyToManyEntity >    mapWithManyToMany    =    new   HashMap < String ,    ManyToManyEntity >  (  )  ;", "mapWithManyToMany . put (  \" entity 1  \"  ,    manyToManyEntity )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY ,    mapWithManyToMany )  ;", "Set < String >    set    =    new   HashSet < String >  (  )  ;", "set . add (  \" Une \"  )  ;", "set . add (  \" Due \"  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ SET ,    set )  ;", "Set < InternalComponent >    componentSet    =    new   HashSet < InternalComponent >  (  )  ;", "componentSet . add ( new   InternalComponent (  \" Ein \"  )  )  ;", "componentSet . add ( new   InternalComponent (  \" Zwei \"  )  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ SET _ OF _ COMPONENTS ,    componentSet )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . AGE _ USER _ TYPE ,    new   Age (  1  8  )  )  ;", "List < Age >    ages    =    new   ArrayList < Age >  (  )  ;", "ages . add ( new   Age (  1  )  )  ;", "ages . add ( new   Age (  2  )  )  ;", "ages . add ( new   Age (  3  )  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . INTERNAL _ LIST _ OF _ USER _ TYPES ,    ages )  ;", "return   advancedEntity ;", "}", "METHOD_END"], "methodName": ["getAdvancedEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "return   new   ManyToManyEntity (  1 L ,     \" ManyToMany \"  )  ;", "}", "METHOD_END"], "methodName": ["getManyToManyEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "return   new   ManyToOneEntity (  1 L ,     \" ManyToOne \"  )  ;", "}", "METHOD_END"], "methodName": ["getManyToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "return   new   OneToOneEntity (  1 L ,     \" OneToOne \"  )  ;", "}", "METHOD_END"], "methodName": ["getOneToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "ManyToOneEntity   manyToOne    =    getManyToOneEntity (  )  ;", "OneToOneEntity   oneToOne    =    getOneToOneEntity (  )  ;", "ManyToManyEntity   manyToManyEntity    =    getManyToManyEntity (  )  ;", "AdvancedEntity   advancedEntity    =    getAdvancedEntity ( manyToOne ,    oneToOne ,    manyToManyEntity )  ;", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "session . save ( manyToOne )  ;", "session . save ( oneToOne )  ;", "session . save ( manyToManyEntity )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "InternalComponent   internalComponent    =     (  ( InternalComponent )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ COMPONENT )  )  )  ;", "internalComponent . setProperty (  \" new   value \"  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "List < String >    internalList    =     (  ( List )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ LIST )  )  )  ;", "internalList . add (  \" four \"  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Map < String ,    String >    map    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP )  )  )  ;", "map . put (  \" three \"  ,     \"  3  \"  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Map < String ,    ManyToManyEntity >    mapWithManyToMany    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  ;", "ManyToManyEntity   manyToManyEntity 2     =    new   ManyToManyEntity (  2 L ,     \" new   value \"  )  ;", "mapWithManyToMany . put (  \" entity 2  \"  ,    manyToManyEntity 2  )  ;", "session . save ( manyToManyEntity 2  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "mapWithManyToMany    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  ;", "mapWithManyToMany . clear (  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Set < InternalComponent >    internalComponentSet    =     (  ( Set )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ SET _ OF _ COMPONENTS )  )  )  ;", "internalComponentSet . add ( new   InternalComponent (  \" drei \"  )  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . AGE _ USER _ TYPE ,    new   Age (  1  9  )  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "List < Age >    ages    =     (  ( List < Age >  )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ LIST _ OF _ USER _ TYPES )  )  )  ;", "ages . add ( new   Age (  4  )  )  ;", "session . save ( advancedEntity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "AdvancedEntity   advancedEntityActual    =     (  ( AdvancedEntity )     ( session . load ( AdvancedEntity . class ,     1 L )  )  )  ;", "Assert . assertEquals ( advancedEntity ,    advancedEntityActual )  ;", "}", "METHOD_END"], "methodName": ["shouldInitData"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "ManyToOneEntity   manyToOne    =    getManyToOneEntity (  )  ;", "OneToOneEntity   oneToOne    =    getOneToOneEntity (  )  ;", "ManyToManyEntity   manyToManyEntity    =    getManyToManyEntity (  )  ;", "AdvancedEntity   advancedEntity    =    getAdvancedEntity ( manyToOne ,    oneToOne ,    manyToManyEntity )  ;", "AdvancedEntity   ver 1     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     1  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 1  )  ;", "InternalComponent   internalComponent    =     (  ( InternalComponent )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ COMPONENT )  )  )  ;", "internalComponent . setProperty (  \" new   value \"  )  ;", "AdvancedEntity   ver 2     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     2  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 2  )  ;", "List   internalList    =     (  ( List )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ LIST )  )  )  ;", "internalList . add (  \" four \"  )  ;", "AdvancedEntity   ver 3     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     3  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 3  )  ;", "Map < String ,    String >    map    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP )  )  )  ;", "map . put (  \" three \"  ,     \"  3  \"  )  ;", "AdvancedEntity   ver 4     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     4  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 4  )  ;", "Map < String ,    ManyToManyEntity >    mapWithManyToMany    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  ;", "ManyToManyEntity   manyToManyEntity 2     =    new   ManyToManyEntity (  2 L ,     \" new   value \"  )  ;", "mapWithManyToMany . put (  \" entity 2  \"  ,    manyToManyEntity 2  )  ;", "AdvancedEntity   ver 5     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     5  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 5  )  ;", "mapWithManyToMany    =     (  ( Map )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  ;", "mapWithManyToMany . clear (  )  ;", "AdvancedEntity   ver 6     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     6  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 6  )  ;", "Set < InternalComponent >    internalComponentSet    =     (  ( Set )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ SET _ OF _ COMPONENTS )  )  )  ;", "internalComponentSet . add ( new   InternalComponent (  \" drei \"  )  )  ;", "AdvancedEntity   ver 7     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     7  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 7  )  ;", "advancedEntity . getDynamicConfiguration (  )  . put (  . AGE _ USER _ TYPE ,    new   Age (  1  9  )  )  ;", "AdvancedEntity   ver 8     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     8  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 8  )  ;", "List < Age >    ages    =     (  ( List < Age >  )     ( advancedEntity . getDynamicConfiguration (  )  . get (  . INTERNAL _ LIST _ OF _ USER _ TYPES )  )  )  ;", "ages . add ( new   Age (  4  )  )  ;", "AdvancedEntity   ver 9     =    getAuditReader (  )  . find ( AdvancedEntity . class ,    advancedEntity . getId (  )  ,     9  )  ;", "Assert . assertEquals ( advancedEntity ,    ver 9  )  ;", "session . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["shouldMakeRevisions"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "AdvancedEntity   entity    =    getAdvancedEntity ( getManyToOneEntity (  )  ,    getOneToOneEntity (  )  ,    getManyToManyEntity (  )  )  ;", "ManyToOneEntity   manyToOneEntity    =     (  ( ManyToOneEntity )     ( entity . getDynamicConfiguration (  )  . get ( AuditedDynamicComponentsAdvancedCasesTest . PROP _ MANY _ TO _ ONE )  )  )  ;", "List   resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AdvancedEntity . class ,     1  )  . add ( AuditEntity . relatedId (  (  \" dynamicConfiguration _  \"     +     ( AuditedDynamicComponentsAdvancedCasesTest . PROP _ MANY _ TO _ ONE )  )  )  . eq ( manyToOneEntity . getId (  )  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "InternalComponent   internalComponent    =     (  ( InternalComponent )     ( entity . getDynamicConfiguration (  )  . get ( AuditedDynamicComponentsAdvancedCasesTest . INTERNAL _ COMPONENT )  )  )  ;", "resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AdvancedEntity . class ,     1  )  . add ( AuditEntity . property (  (  (  \" dynamicConfiguration _  \"     +     ( AuditedDynamicComponentsAdvancedCasesTest . INTERNAL _ COMPONENT )  )     +     \"  _ property \"  )  )  . eq ( internalComponent . getProperty (  )  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "try    {", "OneToOneEntity   oneToOneEntity    =     (  ( OneToOneEntity )     ( entity . getDynamicConfiguration (  )  . get ( AuditedDynamicComponentsAdvancedCasesTest . PROP _ ONE _ TO _ ONE )  )  )  ;", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AdvancedEntity . class ,     1  )  . add ( AuditEntity . property (  (  \" dynamicConfiguration _  \"     +     ( AuditedDynamicComponentsAdvancedCasesTest . PROP _ ONE _ TO _ ONE )  )  )  . eq ( oneToOneEntity )  )  . getResultList (  )  ;", "Assert . fail (  )  ;", "}    catch    ( Exception   e )     {", "if    ( getSession (  )  . getTransaction (  )  . isActive (  )  )     {", "getSession (  )  . getTransaction (  )  . rollback (  )  ;", "}", "assertTyping ( IllegalArgumentException . class ,    e )  ;", "}", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( AdvancedEntity . class ,     1  )  . add ( AuditEntity . property (  (  \" dynamicConfiguration _  \"     +     ( AuditedDynamicComponentsAdvancedCasesTest . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  . eq ( entity . getDynamicConfiguration (  )  . get ( AuditedDynamicComponentsAdvancedCasesTest . INTERNAL _ MAP _ WITH _ MANY _ TO _ MANY )  )  )  . getResultList (  )  ;", "Assert . fail (  )  ;", "}    catch    ( Exception   e )     {", "if    ( getSession (  )  . getTransaction (  )  . isActive (  )  )     {", "getSession (  )  . getTransaction (  )  . rollback (  )  ;", "}", "assertTyping ( AuditException . class ,    e )  ;", "Assert . assertEquals (  \" This   type   of   relation    ( dvancedEntity . dynamicConfiguration _ internalMapWithEntities )    isn ' t   supported   and   can ' t   be   used   in   queries .  \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testOfQueryOnDynamicComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     9  )  ,    getAuditReader (  )  . getRevisions ( AdvancedEntity . class ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.AuditedDynamicComponentsAdvancedCasesTest"}, {"methodBody": ["METHOD_START", "{", "return   property ;", "}", "METHOD_END"], "methodName": ["getProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.InternalComponent"}, {"methodBody": ["METHOD_START", "{", "this . property    =    property ;", "}", "METHOD_END"], "methodName": ["setProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.InternalComponent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToManyEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToManyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToManyEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToManyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToOneEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToOneEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToOneEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.ManyToOneEntity"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "MapComponent   entity    =    new   MapComponent (  1 L ,     \" static   field   value \"  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     1  3  )  ;", "entity . getCustomFields (  )  . put (  \" prop 2  \"  ,     0  .  1 F )  ;", "session . save ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( MapComponent )     ( session . get ( MapComponent . class ,    entity . getId (  )  )  )  )  ;", "entity . getCustomFields (  )  . put (  \" prop 1  \"  ,     0  )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( MapComponent )     ( session . get ( MapComponent . class ,    entity . getId (  )  )  )  )  ;", "entity . setNote (  \" updated   note \"  )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( MapComponent )     ( session . load ( MapComponent . class ,    entity . getId (  )  )  )  )  ;", "session . delete ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "NotAuditedDynamicMapComponent   entity    =    new   NotAuditedDynamicMapComponent (  1 L ,     \" static   field   value \"  )  ;", "NotAuditedDynamicMapComponent   ver 1     =    getAuditReader (  )  . find ( NotAuditedDynamicMapComponent . class ,    entity . getId (  )  ,     1  )  ;", "Assert . assertEquals ( entity ,    ver 1  )  ;", "Assert . assertTrue ( ver 1  . getCustomFields (  )  . isEmpty (  )  )  ;", "entity . setNote (  \" updated   note \"  )  ;", "NotAuditedDynamicMapComponent   ver 2     =    getAuditReader (  )  . find ( NotAuditedDynamicMapComponent . class ,    entity . getId (  )  ,     2  )  ;", "Assert . assertEquals ( entity ,    ver 2  )  ;", "Assert . assertTrue ( ver 2  . getCustomFields (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( NotAuditedDynamicMapComponent . class ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicComponentTest"}, {"methodBody": ["METHOD_START", "{", "return   customFields ;", "}", "METHOD_END"], "methodName": ["getCustomFields"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "this . customFields    =    customFields ;", "}", "METHOD_END"], "methodName": ["setCustomFields"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.NotAuditedDynamicMapComponent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.OneToOneEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.OneToOneEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.OneToOneEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.OneToOneEntity"}, {"methodBody": ["METHOD_START", "{", "return   componentNote ;", "}", "METHOD_END"], "methodName": ["getComponentNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   internalComponent ;", "}", "METHOD_END"], "methodName": ["getInternalComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   internalComponents ;", "}", "METHOD_END"], "methodName": ["getInternalComponents"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   manyToManyList ;", "}", "METHOD_END"], "methodName": ["getManyToManyList"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   manyToOneEntity ;", "}", "METHOD_END"], "methodName": ["getManyToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   oneToOneEntity ;", "}", "METHOD_END"], "methodName": ["getOneToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . componentNote    =    componentNote ;", "}", "METHOD_END"], "methodName": ["setComponentNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . internalComponent    =    internalComponent ;", "}", "METHOD_END"], "methodName": ["setInternalComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . internalComponents    =    internalComponents ;", "}", "METHOD_END"], "methodName": ["setInternalComponents"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . manyToManyList    =    manyToManyList ;", "}", "METHOD_END"], "methodName": ["setManyToManyList"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . manyToOneEntity    =    manyToOneEntity ;", "}", "METHOD_END"], "methodName": ["setManyToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "this . oneToOneEntity    =    oneToOneEntity ;", "}", "METHOD_END"], "methodName": ["setOneToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainComponent"}, {"methodBody": ["METHOD_START", "{", "return   component ;", "}", "METHOD_END"], "methodName": ["getComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "return   note ;", "}", "METHOD_END"], "methodName": ["getNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "this . component    =    component ;", "}", "METHOD_END"], "methodName": ["setComponent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "this . note    =    note ;", "}", "METHOD_END"], "methodName": ["setNote"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.PlainEntity"}, {"methodBody": ["METHOD_START", "{", "return   new   ManyToManyEntity (  1 L ,     \" ManyToMany \"  )  ;", "}", "METHOD_END"], "methodName": ["getManyToManyEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "return   new   ManyToOneEntity (  1 L ,     \" ManyToOne \"  )  ;", "}", "METHOD_END"], "methodName": ["getManyToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "return   new   OneToOneEntity (  1 L ,     \" OneToOne \"  )  ;", "}", "METHOD_END"], "methodName": ["getOneToOneEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "PlainComponent   plainComponent    =    new   PlainComponent (  )  ;", "List < ManyToManyEntity >    manyToManyEntityList    =    new   ArrayList < ManyToManyEntity >  (  )  ;", "manyToManyEntityList . add ( manyToMany )  ;", "plainComponent . setManyToManyList ( manyToManyEntityList )  ;", "plainComponent . setComponentNote (  \" Note \"  )  ;", "plainComponent . setOneToOneEntity ( oneToOne )  ;", "plainComponent . setManyToOneEntity ( manyToOne )  ;", "plainComponent . setInternalComponent ( new   InternalComponent (  \" Some   val \"  )  )  ;", "ArrayList < InternalComponent >    internalC =    new   ArrayList < InternalComponent >  (  )  ;", "internalCadd ( new   InternalComponent (  \" test \"  )  )  ;", "plainComponent . setInternalCinternalC ;", "PlainEntity   plainEntity    =    new   PlainEntity (  )  ;", "plainEntity . setId (  1 L )  ;", "plainEntity . setNote (  \" Plain   note \"  )  ;", "plainEntity . setComponent ( plainComponent )  ;", "return   plainEntity ;", "}", "METHOD_END"], "methodName": ["getPlainEntity"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "ManyToManyEntity   manyToMany    =    getManyToManyEntity (  )  ;", "List < ManyToManyEntity >    manyToManyEntities    =    new   ArrayList < ManyToManyEntity >  (  )  ;", "manyToManyEntities . add ( manyToMany )  ;", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( PlainEntity . class ,     1  )  . add ( AuditEntity . property (  \" component _ manyToManyList \"  )  . eq ( manyToManyEntities )  )  . getResultList (  )  ;", "Assert . fail (  \" This   should   have   generated   an   AuditException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( AuditException . class ,    e )  ;", "Assert . assertEquals (  \" This   type   of   relation    ( PlainEntity . component _ manyToManyList )    isn ' t   supported   and   can ' t   be   used   in   queries .  \"  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailWhenQueryOnManyToMany"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "PlainEntity   plainEntity    =     (  ( PlainEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( PlainEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" component _ manyToOneEntity \"  )  . eq ( getManyToOneEntity (  )  . getId (  )  )  )  . getResultList (  )  . get (  0  )  )  )  ;", "Assert . assertEquals ( getManyToOneEntity (  )  ,    plainEntity . getComponent (  )  . getManyToOneEntity (  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailWhenQueryOnManyToOne"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( PlainEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \"  _ oneToOneEntity \"  )  . eq ( getOneToOneEntity (  )  . getId (  )  )  )  . getResultList (  )  ;", "Assert . fail (  \" This   should   have   generated   an   IllegalArgumentException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( IllegalArgumentException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailWhenQueryOnOneToOne"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "ManyToOneEntity   manyToOne    =    getManyToOneEntity (  )  ;", "ManyToManyEntity   manyToMany    =    getManyToManyEntity (  )  ;", "OneToOneEntity   oneToOne    =    getOneToOneEntity (  )  ;", "PlainEntity   entity    =    getPlainEntity ( manyToOne ,    manyToMany ,    oneToOne )  ;", "List   resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( PlainEntity . class ,     1  )  . add ( AuditEntity . property (  \"  _ internalComponent _ property \"  )  . eq ( entity . getComponent (  )  . getInternalComponent (  )  . getProperty (  )  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFindByInternalComponentProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "ManyToOneEntity   manyToOne    =    getManyToOneEntity (  )  ;", "ManyToManyEntity   manyToMany    =    getManyToManyEntity (  )  ;", "OneToOneEntity   oneToOne    =    getOneToOneEntity (  )  ;", "PlainEntity   entity    =    getPlainEntity ( manyToOne ,    manyToMany ,    oneToOne )  ;", "List   resultList    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( PlainEntity . class ,     1  )  . add ( AuditEntity . property (  \"  _ Note \"  )  . eq (  \" Note \"  )  )  . getResultList (  )  ;", "Assert . assertEquals ( entity ,    resultList . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFindRevisionBySimpleProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "Sesssess =    getSess )  ;", "sessgetTransact )  . begin (  )  ;", "ManyToOneEntity   manyToOne    =    getManyToOneEntity (  )  ;", "ManyToManyEntity   manyToMany    =    getManyToManyEntity (  )  ;", "OneToOneEntity   oneToOne    =    getOneToOneEntity (  )  ;", "PlainEntity   plainEntity    =    getPlainEntity ( manyToOne ,    manyToMany ,    oneToOne )  ;", "sesssave ( manyToMany )  ;", "sesssave ( manyToOne )  ;", "sesssave ( oneToOne )  ;", "sesssave ( plainEntity )  ;", "sessgetTransact )  . commit (  )  ;", "sessgetTransact )  . begin (  )  ;", "PlainEntity   load    =     (  ( PlainEntity )     ( sessload ( PlainEntity . class ,     1 L )  )  )  ;", "Assert . assertEquals ( plainEntity ,    load )  ;", "sessgetTransact )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["shouldInit"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SanityCheckTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "return   simpleProperty ;", "}", "METHOD_END"], "methodName": ["getSimpleProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . simpleProperty    =    simpleProperty ;", "}", "METHOD_END"], "methodName": ["setSimpleProperty"], "fileName": "org.hibernate.envers.test.integration.components.dynamic.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["getCode"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.AbstractEmbeddable"}, {"methodBody": ["METHOD_START", "{", "return   codeArt ;", "}", "METHOD_END"], "methodName": ["getCodeart"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "EntityWith   entity    =    new   EntityWith (  )  ;", "entity . setName (  \" Entity    1  \"  )  ;", "entity . setValue ( new    (  4  2  ,     \" TestCodeart \"  )  )  ;", "EntityTransaction   tx    =    em . getTransaction (  )  ;", "tx . begin (  )  ;", "em . persist ( entity )  ;", "tx . commit (  )  ;", "em . close (  )  ;", "id    =    entity . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EmbeddableWithDeclaredDataTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "EntityWith   entityLoaded    =    em . find ( EntityWith . class ,    id )  ;", "AuditReader   reader    =    AuditReaderFactory . get ( em )  ;", "List < Number >    revs    =    reader . getRevisions ( EntityWith . class ,    id )  ;", "Assert . assertEquals (  1  ,    revs . size (  )  )  ;", "EntityWith   entityRev 1     =    reader . find ( EntityWith . class ,    id ,    revs . get (  0  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "Assert . assertEquals ( entityLoaded . getName (  )  ,    entityRev 1  . getName (  )  )  ;", "Assert . assertEquals ( entityLoaded . getValue (  )  . getCodeart (  )  ,    entityRev 1  . getValue (  )  . getCodeart (  )  )  ;", "Assert . assertNull ( entityRev 1  . getValue (  )  . getCode (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmbeddableThatExtendsMappedSuperclass"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EmbeddableWithDeclaredDataTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "EntityWith   entity    =    new   EntityWith (  )  ;", "entity . setName (  \" Entity    1  \"  )  ;", "entity . setValue ( new    (  8  4  )  )  ;", "EntityTransaction   tx    =    em . getTransaction (  )  ;", "tx . begin (  )  ;", "em . persist ( entity )  ;", "tx . commit (  )  ;", "em . close (  )  ;", "id    =    entity . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EmbeddableWithNoDeclaredDataTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "EntityWith   entityLoaded    =    em . find ( EntityWith . class ,    id )  ;", "AuditReader   reader    =    AuditReaderFactory . get ( em )  ;", "List < Number >    revs    =    reader . getRevisions ( EntityWith . class ,    id )  ;", "Assert . assertEquals (  1  ,    revs . size (  )  )  ;", "EntityWith   entityRev 1     =    reader . find ( EntityWith . class ,    id ,    revs . get (  0  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "Assert . assertEquals ( entityLoaded . getName (  )  ,    entityRev 1  . getName (  )  )  ;", "Assert . assertNull ( entityRev 1  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmbeddableThatExtendsMappedSuperclass"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EmbeddableWithNoDeclaredDataTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithDeclaredData"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.hibernate.envers.test.integration.components.mappedsuperclass.EntityWithEmbeddableWithNoDeclaredData"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  )  ;", "ste 1  . setStr (  \" str 1  \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  )  ;", "ste 2  . setStr (  \" str 2  \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   mtocte 1     =    new   ComponentTestEntity ( new   Component ( ste 1  ,     \" data 1  \"  )  )  ;", "em . persist ( mtocte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mtocte 1     =    em . find ( ComponentTestEntity . class ,    mtocte 1  . getId (  )  )  ;", "mtocte 1  . getComp 1  (  )  . setEntity ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mtocte _ id 1     =    mtocte 1  . getId (  )  ;", "ste _ id 1     =    ste 1  . getId (  )  ;", "ste _ id 2     =    ste 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.relations.ManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste _ id 1  )  ;", "StrTestEntity   ste 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste _ id 2  )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( mtocte _ id 1  ,    new   Component ( ste 1  ,     \" data 1  \"  )  )  ;", "ComponentTestEntity   ver 3     =    new   ComponentTestEntity ( mtocte _ id 1  ,    new   Component ( ste 2  ,     \" data 1  \"  )  )  ;", "assert    ( getAuditReader (  )  . find ( ComponentTestEntity . class ,    mtocte _ id 1  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    mtocte _ id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    mtocte _ id 1  ,     3  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.relations.ManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ManyToOneComponentTestEntity . class ,    mtocte _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.relations.ManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "UnversionedStrTestEntity   ste 1     =    new   UnversionedStrTestEntity (  )  ;", "ste 1  . setStr (  \" str 1  \"  )  ;", "UnversionedStrTestEntity   ste 2     =    new   UnversionedStrTestEntity (  )  ;", "ste 2  . setStr (  \" str 2  \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   mtocte 1     =    new   ComponentTestEntity ( new   Component ( ste 1  ,     \" data 1  \"  )  )  ;", "em . persist ( mtocte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mtocte 1     =    em . find ( ComponentTestEntity . class ,    mtocte 1  . getId (  )  )  ;", "mtocte 1  . getComp 1  (  )  . setEntity ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mtocte 1     =    em . find ( ComponentTestEntity . class ,    mtocte 1  . getId (  )  )  ;", "mtocte 1  . getComp 1  (  )  . setData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mtocte _ id 1     =    mtocte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.relations.NotAuditedManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "NotAuditedManyToOneComponentTestEntity   ver 1     =    new   NotAuditedManyToOneComponentTestEntity ( mtocte _ id 1  ,    new   NotAuditedManyToOneComponent ( null ,     \" data 1  \"  )  )  ;", "NotAuditedManyToOneComponentTestEntity   ver 2     =    new   NotAuditedManyToOneComponentTestEntity ( mtocte _ id 1  ,    new   NotAuditedManyToOneComponent ( null ,     \" data 2  \"  )  )  ;", "assert   getAuditReader (  )  . find ( NotAuditedManyToOneComponentTestEntity . class ,    mtocte _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( NotAuditedManyToOneComponentTestEntity . class ,    mtocte _ id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.relations.NotAuditedManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( NotAuditedManyToOneComponentTestEntity . class ,    mtocte _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.relations.NotAuditedManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  )  ;", "ste 1  . setStr (  \" str 1  \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  )  ;", "ste 2  . setStr (  \" str 2  \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   otmcte 1     =    new   ComponentTestEntity ( new   Component (  \" data 1  \"  )  )  ;", "otmcte 1  . getComp 1  (  )  . getEntities (  )  . add ( ste 1  )  ;", "em . persist ( otmcte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "otmcte 1     =    em . find ( ComponentTestEntity . class ,    otmcte 1  . getId (  )  )  ;", "otmcte 1  . getComp 1  (  )  . getEntities (  )  . add ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "otmcte _ id 1     =    otmcte 1  . getId (  )  ;", "ste _ id 1     =    ste 1  . getId (  )  ;", "ste _ id 2     =    ste 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.components.relations.OneToManyInComponent"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste _ id 1  )  ;", "StrTestEntity   ste 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ste _ id 2  )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( otmcte _ id 1  ,    new   Component (  \" data 1  \"  )  )  ;", "ver 2  . getComp 1  (  )  . getEntities (  )  . add ( ste 1  )  ;", "ComponentTestEntity   ver 3     =    new   ComponentTestEntity ( otmcte _ id 1  ,    new   Component (  \" data 1  \"  )  )  ;", "ver 3  . getComp 1  (  )  . getEntities (  )  . add ( ste 1  )  ;", "ver 3  . getComp 1  (  )  . getEntities (  )  . add ( ste 2  )  ;", "assert    ( getAuditReader (  )  . find ( ComponentTestEntity . class ,    otmcte _ id 1  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    otmcte _ id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    otmcte _ id 1  ,     3  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.components.relations.OneToManyInComponent"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( OneToManyComponentTestEntity . class ,    otmcte _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.components.relations.OneToManyInComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "TypeEntity   ccte    =    new   TypeEntity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte . setComponent ( new   Component (  \" a \"  ,     1  )  )  ;", "em . persist ( ccte )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte    =    em . find ( TypeEntity . class ,    ccte . getId (  )  )  ;", "ccte . getComponent (  )  . setProp 1  (  \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte    =    em . find ( TypeEntity . class ,    ccte . getId (  )  )  ;", "ccte . setComponent ( new   Component (  \" c \"  ,     3  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ccte _ id    =    ccte . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.CompositeCustom"}, {"methodBody": ["METHOD_START", "{", "CompositeCustomTypeEntity   rev 1     =    getAuditReader (  )  . find ( CompositeCustomTypeEntity . class ,    ccte _ id ,     1  )  ;", "CompositeCustomTypeEntity   rev 2     =    getAuditReader (  )  . find ( CompositeCustomTypeEntity . class ,    ccte _ id ,     2  )  ;", "CompositeCustomTypeEntity   rev 3     =    getAuditReader (  )  . find ( CompositeCustomTypeEntity . class ,    ccte _ id ,     3  )  ;", "assert   rev 1  . getComponent (  )  . equals ( new   Component (  \" a \"  ,     1  )  )  ;", "assert   rev 2  . getComponent (  )  . equals ( new   Component (  \" b \"  ,     1  )  )  ;", "assert   rev 3  . getComponent (  )  . equals ( new   Component (  \" c \"  ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfCcte"], "fileName": "org.hibernate.envers.test.integration.customtype.CompositeCustom"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( CompositeCustomTypeEntity . class ,    ccte _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.customtype.CompositeCustom"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   entity    =    new   Entity ( Entity . E 1  . X ,    Entity . E 2  . A )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.EnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "List < Object [  ]  >    values    =    entityManager . createNativeQuery (  \" SELECT   enum 1  ,    enum 2    FROM   Entity _ AUD   ORDER   BY   REV   ASC \"  )  . getResultList (  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . close (  )  ;", "Assert . assertNotNull ( values )  ;", "Assert . assertEquals (  1  ,    values . size (  )  )  ;", "Object [  ]    results    =    values . get (  0  )  ;", "Assert . assertEquals (  2  ,    results . length )  ;", "Assert . assertEquals (  \" X \"  ,    results [  0  ]  )  ;", "Assert . assertEquals (  \"  0  \"  ,     (  ( results [  1  ]  )     +     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnumRepresentation"], "fileName": "org.hibernate.envers.test.integration.customtype.EnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   SessionFactoryImplementor   sessionFactory    =    entityManager . unwrap (  . class )  . getSessionFactory (  )  ;", "final   EntityPersister   entityPersister    =    sessionFactory . getMetamodel (  )  . entityPersister ( entityClass )  ;", "final   EnversService   enversService    =    sessionFactory . getServiceRegistry (  )  . getService (  . class )  ;", "final   String   entityName    =    entityPersister . getEntityName (  )  ;", "final   String   auditEntityName    =    enversService . getAuditEntitiesConfiguration (  )  . getAuditEntityName ( entityName )  ;", "final   EntityPersister   auditedEntityPersister    =    sessionFactory . getMetamodel (  )  . entityPersister ( auditEntityName )  ;", "final   Type   propertyType    =    auditedEntityPersister . getPropertyType ( propertyName )  ;", "assertTyping (  . class ,    propertyType )  ;", "final   UserType   userType    =     (  ( CustomType )     ( propertyType )  )  . getUserType (  )  ;", "assertTyping ( typeClass ,    userType )  ;", "assertTyping (  . class ,    userType )  ;", "switch    ( expectedType )     {", "case   STRING    :", "assertTrue (  (  !  (  (  (  )     ( userType )  )  . isOrdinal (  )  )  )  )  ;", "break ;", "default    :", "assertTrue (  (  (  )     ( userType )  )  . isOrdinal (  )  )  ;", "break ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["assertEnumProperty"], "fileName": "org.hibernate.envers.test.integration.customtype.ExtendedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "this . widgetId    =    doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Widget   widget    =    new   Widget ( Widget . Status . DRAFT )  ;", "entityManager . pist ( widget )  ;", "return   widget . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Widget   widget    =    entityManager . find (  . class ,    this . widgetId )  ;", "widget . setStatus ( Widget . Status . ARCHIVED )  ;", "entityManager . merge ( widget )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Widget   widget    =    entityManager . find (  . class ,    this . widgetId )  ;", "entityManager . remove ( widget )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.ExtendedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "assertEnumProperty ( ExtendedEnumTypeTest . Widget . class ,    ExtendedEnumTypeTest . ExtendedEnumType . class ,     \" status \"  ,    STRING )  ;", "assertEnumProperty ( ExtendedEnumTypeTest . Widget . class ,    ExtendedEnumTypeTest . ExtendedEnumType . class ,     \" status 2  \"  ,    ORDINAL )  ;", "}", "METHOD_END"], "methodName": ["testEnumPropertyStorageType"], "fileName": "org.hibernate.envers.test.integration.customtype.ExtendedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "List   revisions    =    getAuditReader (  )  . getRevisions ( ExtendedEnumTypeTest . Widget . class ,    this . widgetId )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    revisions )  ;", "final   ExtendedEnumTypeTest . Widget   rev 1     =    getAuditReader (  )  . find ( ExtendedEnumTypeTest . Widget . class ,    this . widgetId ,     1  )  ;", "Assert . assertEquals ( ExtendedEnumTypeTest . Widget . Status . DRAFT ,    rev 1  . getStatus (  )  )  ;", "final   ExtendedEnumTypeTest . Widget   rev 2     =    getAuditReader (  )  . find ( ExtendedEnumTypeTest . Widget . class ,    this . widgetId ,     2  )  ;", "Assert . assertEquals ( ExtendedEnumTypeTest . Widget . Status . ARCHIVED ,    rev 2  . getStatus (  )  )  ;", "final   ExtendedEnumTypeTest . Widget   rev 3     =    getAuditReader (  )  . find ( ExtendedEnumTypeTest . Widget . class ,    this . widgetId ,     3  )  ;", "Assert . assertNull ( rev 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.customtype.ExtendedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "if    ( stream    !  =    null )     {", "try    {", "stream . close (  )  ;", "}    catch    ( IOExcep   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserType"}, {"methodBody": ["METHOD_START", "{", "if    ( stream    !  =    null )     {", "try    {", "stream . close (  )  ;", "}    catch    ( IOExcep   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserType"}, {"methodBody": ["METHOD_START", "{", "ObjectInputStream   objectInputStream    =    null ;", "try    {", "objectInputStream    =    new   ObjectInputStream ( inputStream )  ;", "return   objectInputStream . readObject (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( e )  ;", "}    finally    {", "closeQuietly ( objectInputStream )  ;", "}", "}", "METHOD_END"], "methodName": ["convertInputStreamToObject"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserType"}, {"methodBody": ["METHOD_START", "{", "ByteArrayOutputStream   byteArrayOutputStream    =    new   ByteArrayOutputStream (  )  ;", "OutputStream   objectOutputStream    =    null ;", "try    {", "objectOutputStream    =    new   OutputStream ( byteArrayOutputStream )  ;", "objectOutputStream . write ( value )  ;", "objectOutputStream . flush (  )  ;", "return   new   ByteArrayInputStream ( byteArrayOutputStream . toByteArray (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}    finally    {", "closeQuietly ( objectOutputStream )  ;", "}", "}", "METHOD_END"], "methodName": ["convertObjectToInputStream"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserType"}, {"methodBody": ["METHOD_START", "{", "return   buildInType ;", "}", "METHOD_END"], "methodName": ["getBuildInType"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   userType ;", "}", "METHOD_END"], "methodName": ["getUserType"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . buildInType    =    buildInType ;", "}", "METHOD_END"], "methodName": ["setBuildInType"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . userType    =    userType ;", "}", "METHOD_END"], "methodName": ["setUserType"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   entity    =    new   Entity (  \" builtInType 1  \"  ,     \" stringUserType 1  \"  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( Entity . class ,    entity . getId (  )  )  ;", "entity . setUserType (  2  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( Entity . class ,    entity . getId (  )  )  ;", "em . remove ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeTest"}, {"methodBody": ["METHOD_START", "{", "ObjectUserTypeEntity   ver 1     =    new   ObjectUserTypeEntity ( id ,     \" builtInType 1  \"  ,     \" stringUserType 1  \"  )  ;", "ObjectUserTypeEntity   ver 2     =    new   ObjectUserTypeEntity ( id ,     \" builtInType 1  \"  ,     2  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( ObjectUserTypeEntity . class ,    id ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( ObjectUserTypeEntity . class ,    id ,     2  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( ObjectUserTypeEntity . class ,    true ,    true )  . getResultList (  )  . get (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistory"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ObjectUserTypeEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCount"], "fileName": "org.hibernate.envers.test.integration.customtype.ObjectUserTypeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "TypeEntity   pcte    =    new   TypeEntity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pcte . setStr (  \" U \"  )  ;", "em . persist ( pcte )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pcte    =    em . find ( TypeEntity . class ,    pcte . getId (  )  )  ;", "pcte . setStr (  \" V \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "pcte _ id    =    pcte . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.ParametrizedCustom"}, {"methodBody": ["METHOD_START", "{", "ParametrizedCustomTypeEntity   rev 1     =    getAuditReader (  )  . find ( ParametrizedCustomTypeEntity . class ,    pcte _ id ,     1  )  ;", "ParametrizedCustomTypeEntity   rev 2     =    getAuditReader (  )  . find ( ParametrizedCustomTypeEntity . class ,    pcte _ id ,     2  )  ;", "assert    \" xUy \"  . equals ( rev 1  . getStr (  )  )  ;", "assert    \" xVy \"  . equals ( rev 2  . getStr (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfCcte"], "fileName": "org.hibernate.envers.test.integration.customtype.ParametrizedCustom"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ParametrizedCustomTypeEntity . class ,    pcte _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.customtype.ParametrizedCustom"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    getSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "Entity   entity    =    new   Entity ( Entity . E 1  . X ,    Entity . E 2  . A )  ;", "session . persist ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "entity    =     (  ( Entity )     ( session . get ( Entity . class ,    entity . getId (  )  )  )  )  ;", "entity . setEnum 1  ( Entity . E 1  . Y )  ;", "entity . setEnum 2  ( Entity . E 2  . B )  ;", "session . update ( entity )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.customtype.UnspecifiedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    getSession (  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Object [  ]  >    values    =    sessreateSQLQuery (  \" SELECT   enum 1  ,    enum 2    FROM   ENUM _ ENTITY _ AUD   ORDER   BY   rev   ASC \"  )  . list (  )  ;", "sesslose (  )  ;", "Assert . assertNotNull ( values )  ;", "Assert . assertEquals (  2  ,    values . size (  )  )  ;", "Assert . assertArrayEquals ( new   Object [  ]  {     0  ,     0     }  ,    values . get (  0  )  )  ;", "Assert . assertArrayEquals ( new   Object [  ]  {     1  ,     1     }  ,    values . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnumRepresentation"], "fileName": "org.hibernate.envers.test.integration.customtype.UnspecifiedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "UnspecifiedEnumTypeEntity   ver 1     =    new   UnspecifiedEnumTypeEntity ( UnspecifiedEnumTypeEntity . E 1  . X ,    UnspecifiedEnumTypeEntity . E 2  . A ,    id )  ;", "UnspecifiedEnumTypeEntity   ver 2     =    new   UnspecifiedEnumTypeEntity ( UnspecifiedEnumTypeEntity . E 1  . Y ,    UnspecifiedEnumTypeEntity . E 2  . B ,    id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( UnspecifiedEnumTypeEntity . class ,    id ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( UnspecifiedEnumTypeEntity . class ,    id ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEnums"], "fileName": "org.hibernate.envers.test.integration.customtype.UnspecifiedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( UnspecifiedEnumTypeEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCount"], "fileName": "org.hibernate.envers.test.integration.customtype.UnspecifiedEnumTypeTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( dateValue )     !  =    null )     {", "if    (  ( that . dateValue )     =  =    null )     {", "return   false ;", "}", "if    (  ( dateValue . getTime (  )  )     !  =     ( that . dateValue . getTime (  )  )  )     {", "return   false ;", "}", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   dateValue ;", "}", "METHOD_END"], "methodName": ["getDateValue"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( dateValue )     !  =    null    ?    dateValue . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . dateValue    =    dateValue ;", "}", "METHOD_END"], "methodName": ["setDateValue"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.data.DateTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "DateTestEntity   dte    =    new   DateTestEntity ( new   Date (  1  2  3  4  5  0  0  0  )  )  ;", "em . persist ( dte )  ;", "id 1     =    dte . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "dte    =    em . find ( DateTestEntity . class ,    id 1  )  ;", "dte . setDateValue ( new   Date (  4  5  6  7  8  0  0  0  )  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.data.Dates"}, {"methodBody": ["METHOD_START", "{", "DateTestEntity   ver 1     =    new   DateTestEntity ( id 1  ,    new   Date (  1  2  3  4  5  0  0  0  )  )  ;", "DateTestEntity   ver 2     =    new   DateTestEntity ( id 1  ,    new   Date (  4  5  6  7  8  0  0  0  )  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( DateTestEntity . class ,    id 1  ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( DateTestEntity . class ,    id 1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.data.Dates"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DateTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.data.Dates"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( enum 1  )     !  =     ( that . enum 1  )  )     {", "return   false ;", "}", "if    (  ( enum 2  )     !  =     ( that . enum 2  )  )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   enum 1  ;", "}", "METHOD_END"], "methodName": ["getEnum1"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   enum 2  ;", "}", "METHOD_END"], "methodName": ["getEnum2"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( enum 1  )     !  =    null    ?    enum 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( enum 2  )     !  =    null    ?    enum 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 1     =    enum 1  ;", "}", "METHOD_END"], "methodName": ["setEnum1"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . enum 2     =    enum 2  ;", "}", "METHOD_END"], "methodName": ["setEnum2"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.data.EnumTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "EnumTestEntity   ete    =    new   EnumTestEntity ( EnumTestEntity . E 1  . X ,    EnumTestEntity . E 2  . A )  ;", "em . persist ( ete )  ;", "id 1     =    ete . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ete    =    em . find ( EnumTestEntity . class ,    id 1  )  ;", "ete . setEnum 1  ( EnumTestEntity . E 1  . Y )  ;", "ete . setEnum 2  ( EnumTestEntity . E 2  . B )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.data.Enums"}, {"methodBody": ["METHOD_START", "{", "EnumTestEntity   ver 1     =    new   EnumTestEntity ( id 1  ,    EnumTestEntity . E 1  . X ,    EnumTestEntity . E 2  . A )  ;", "EnumTestEntity   ver 2     =    new   EnumTestEntity ( id 1  ,    EnumTestEntity . E 1  . Y ,    EnumTestEntity . E 2  . B )  ;", "assert   getAuditReader (  )  . find ( EnumTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EnumTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.data.Enums"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( EnumTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.data.Enums"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( obj )     !  =    null    ?     !  ( obj . equals ( that . obj )  )     :     ( that . obj )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   obj ;", "}", "METHOD_END"], "methodName": ["getObj"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( obj )     !  =    null    ?    obj . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . obj    =    obj ;", "}", "METHOD_END"], "methodName": ["setObj"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   ste    =    new   TestEntity ( new   SerObject (  \" d 1  \"  )  )  ;", "em . persist ( ste )  ;", "id 1     =    ste . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( TestEntity . class ,    id 1  )  ;", "ste . setObj ( new   SerObject (  \" d 2  \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializables"}, {"methodBody": ["METHOD_START", "{", "LobSerializableTestEntity   ver 1     =    new   LobSerializableTestEntity ( id 1  ,    new   SerObject (  \" d 1  \"  )  )  ;", "LobSerializableTestEntity   ver 2     =    new   LobSerializableTestEntity ( id 1  ,    new   SerObject (  \" d 2  \"  )  )  ;", "assert   getAuditReader (  )  . find ( LobSerializableTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( LobSerializableTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializables"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( LobSerializableTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.data.LobSerializables"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  !  ( Arrays . equals ( byteLob ,    that . byteLob )  )  )     {", "return   false ;", "}", "if    (  !  ( Arrays . equals ( charLob ,    that . charLob )  )  )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( stringLob )     !  =    null    ?     !  ( stringLob . equals ( that . stringLob )  )     :     ( that . stringLob )     !  =    null )     {", "return   false ;", "}", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   byteLob ;", "}", "METHOD_END"], "methodName": ["getByteLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   charLob ;", "}", "METHOD_END"], "methodName": ["getCharLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   stringLob ;", "}", "METHOD_END"], "methodName": ["getStringLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( stringLob )     !  =    null    ?    stringLob . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( byteLob )     !  =    null    ?    Arrays . hashCode ( byteLob )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( charLob )     !  =    null    ?    Arrays . hashCode ( charLob )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  (     !  =    null    ?    hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . byteLob    =    byteLob ;", "}", "METHOD_END"], "methodName": ["setByteLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . charLob    =    charLob ;", "}", "METHOD_END"], "methodName": ["setCharLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . stringLob    =    stringLob ;", "}", "METHOD_END"], "methodName": ["setStringLob"], "fileName": "org.hibernate.envers.test.integration.data.LobTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "LobTestEntity   lte    =    new   LobTestEntity (  \" abc \"  ,    new   byte [  ]  {     0  ,     1  ,     2     }  ,    new   char [  ]  {     ' x '  ,     ' y '  ,     ' z '     }  )  ;", "em . persist ( lte )  ;", "id 1     =    lte . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "lte    =    em . find ( LobTestEntity . class ,    id 1  )  ;", "lte . setStringLob (  \" def \"  )  ;", "lte . setByteLob ( new   byte [  ]  {     3  ,     4  ,     5     }  )  ;", "lte . setCharLob ( new   char [  ]  {     ' h '  ,     ' i '  ,     ' j '     }  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "LobTestEntity   lte 2     =    new   LobTestEntity (  \" abc \"  ,    new   byte [  ]  {     0  ,     1  ,     2     }  ,    new   char [  ]  {     ' x '  ,     ' y '  ,     ' z '     }  )  ;", "lte 2  . setData (  \" Hi \"  )  ;", "em . persist ( lte 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "id 2     =    lte 2  . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "lte 2     =    em . find ( LobTestEntity . class ,    id 2  )  ;", "lte 2  . setData (  \" Hello   World \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.data.Lobs"}, {"methodBody": ["METHOD_START", "{", "LobTestEntity   ver 1     =    new   LobTestEntity ( id 1  ,     \" abc \"  ,    new   byte [  ]  {     0  ,     1  ,     2     }  ,    new   char [  ]  {     ' x '  ,     ' y '  ,     ' z '     }  )  ;", "LobTestEntity   ver 2     =    new   LobTestEntity ( id 1  ,     \" def \"  ,    new   byte [  ]  {     3  ,     4  ,     5     }  ,    new   char [  ]  {     ' h '  ,     ' i '  ,     ' j '     }  )  ;", "Assert . assertEquals ( getAuditReader (  )  . find ( LobTestEntity . class ,    id 1  ,     1  )  ,    ver 1  )  ;", "Assert . assertEquals ( getAuditReader (  )  . find ( LobTestEntity . class ,    id 1  ,     2  )  ,    ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.data.Lobs"}, {"methodBody": ["METHOD_START", "{", "LobTestEntity   ver 1     =    new   LobTestEntity ( id 2  ,     \" abc \"  ,    new   byte [  ]  {     0  ,     1  ,     2     }  ,    new   char [  ]  {     ' x '  ,     ' y '  ,     ' z '     }  )  ;", "Assert . assertEquals ( getAuditReader (  )  . find ( LobTestEntity . class ,    id 2  ,     3  )  ,    ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.data.Lobs"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( LobTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.data.Lobs"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  3  )  ,    getAuditReader (  )  . getRevisions ( LobTestEntity . class ,    id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForAuditedArraysWithNoChanges"], "fileName": "org.hibernate.envers.test.integration.data.Lobs"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "serObject    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( serObject . data )  )     :     ( serObject . data )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.SerObject"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.data.SerObject"}, {"methodBody": ["METHOD_START", "{", "return    ( data )     !  =    null    ?    data . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.SerObject"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.data.SerObject"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( obj )     !  =    null    ?     !  ( obj . equals ( that . obj )  )     :     ( that . obj )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   obj ;", "}", "METHOD_END"], "methodName": ["getObj"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( obj )     !  =    null    ?    obj . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . obj    =    obj ;", "}", "METHOD_END"], "methodName": ["setObj"], "fileName": "org.hibernate.envers.test.integration.data.SerializableTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   ste    =    new   TestEntity ( new   SerObject (  \" d 1  \"  )  )  ;", "em . persist ( ste )  ;", "id 1     =    ste . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( TestEntity . class ,    id 1  )  ;", "ste . setObj ( new   SerObject (  \" d 2  \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.data.Serializables"}, {"methodBody": ["METHOD_START", "{", "SerializableTestEntity   ver 1     =    new   SerializableTestEntity ( id 1  ,    new   SerObject (  \" d 1  \"  )  )  ;", "SerializableTestEntity   ver 2     =    new   SerializableTestEntity ( id 1  ,    new   SerObject (  \" d 2  \"  )  )  ;", "assert   getAuditReader (  )  . find ( SerializableTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SerializableTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.data.Serializables"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SerializableTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.data.Serializables"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getOrCreateEntityManager (  )  ;", "Assert . assertNotNull (  \" Expected   an   entity   manager   to   be   returned \"  ,    entityManager )  ;", "}", "METHOD_END"], "methodName": ["testDynamicModelMapping"], "fileName": "org.hibernate.envers.test.integration.dynamicmodel.DynamicModelTest"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.Person"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hn \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 3     =    new   Person (  \" Barba \"  ,     3  0  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "pers 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "pers 1  . setAge (  2  9  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 2  )  ;", "id _ pers 2     =    pers 2  . getId (  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "pers 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "pers 1  . setName (  \" Hn   David \"  )  ;", "pers 2     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 2  )  )  )  ;", "pers 2  . setAge (  3  0  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 2  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 3  )  ;", "id _ pers 3     =    pers 3  . getId (  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "currentPers 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / auditedEntity / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "person 1  _  1     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     1  )  ;", "person 1  _  2     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     2  )  ;", "person 1  _  3     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     3  )  ;", "String   currentPers 1 EN    =    getSession (  )  . ge ( currentPers 1  )  ;", "String   person 1 EN    =    getAuditReader (  )  . ge ( person 1  _  1  . getId (  )  ,     1  ,    person 1  _  1  )  ;", "assert   currentPers 1 EN . equals ( person 1 EN )  ;", "String   person 2 EN    =    getAuditReader (  )  . ge ( person 1  _  2  . getId (  )  ,     2  ,    person 1  _  2  )  ;", "assert   currentPers 1 EN . equals ( person 2 EN )  ;", "String   person 3 EN    =    getAuditReader (  )  . ge ( person 1  _  3  . getId (  )  ,     3  ,    person 1  _  3  )  ;", "assert   currentPers 1 EN . equals ( person 3 EN )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameAuditedEntityWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "person 1  _  1     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     1  )  ;", "person 1  _  2     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     2  )  ;", "person 1  _  3     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     3  )  ;", "assert    ( person 1  _  1  )     !  =    null ;", "assert    ( person 1  _  2  )     !  =    null ;", "assert    ( person 1  _  3  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["testRetrieveAuditedEntityWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "person 1  _  1     =    getAReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     1  )  ;", "person 1  _  2     =    getAReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     2  )  ;", "person 1  _  3     =    getAReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     3  )  ;", "assert    ( person 1  _  1  )     !  =    null ;", "assert    ( person 1  _  2  )     !  =    null ;", "assert    ( person 1  _  3  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["testRetrieveAuditedEntityWithEntityNameWithNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "List < Number >    pers 1 Revs    =    getAuditReader (  )  . getRevisions ( Person . class ,     \" Personaje \"  ,    id _ pers 1  )  ;", "List < Number >    pers 2 Revs    =    getAuditReader (  )  . getRevisions ( Person . class ,     \" Personaje \"  ,    id _ pers 2  )  ;", "List < Number >    pers 3 Revs    =    getAuditReader (  )  . getRevisions ( Person . class ,     \" Personaje \"  ,    id _ pers 3  )  ;", "assert    ( pers 1 Revs . size (  )  )     =  =     3  ;", "assert    ( pers 2 Revs . size (  )  )     =  =     2  ;", "assert    ( pers 3 Revs . size (  )  )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["testRetrieveRevisionsWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.auditedEntity.ReadEntityWhitEntityNameTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   owners ;", "}", "METHOD_END"], "methodName": ["getOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   registrationNumber ;", "}", "METHOD_END"], "methodName": ["getRegistrationNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . owners    =    owners ;", "}", "METHOD_END"], "methodName": ["setOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . registrationNumber    =    registrationNumber ;", "}", "METHOD_END"], "methodName": ["setRegistrationNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   cars ;", "}", "METHOD_END"], "methodName": ["getCars"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . cars    =    cars ;", "}", "METHOD_END"], "methodName": ["setCars"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "String   currPerson 1 EN    =    getSession (  )  . getEntityName ( person 1  )  ;", "String   currCar 1 EN    =    getSession (  )  . getEntityName ( car 1  )  ;", "String   person 1  _  1 EN    =    getAuditReader (  )  . getEntityName ( id _ pers 1  ,     1  ,    person 1  _  1  )  ;", "assert   currPerson 1 EN . equals ( person 1  _  1 EN )  ;", "String   car 1  _  2 EN    =    getAuditReader (  )  . getEntityName ( id _ car 1  ,     2  ,    car 1  _  2  )  ;", "assert   currCar 1 EN . equals ( car 1  _  2 EN )  ;", "}", "METHOD_END"], "methodName": ["checkEntityNames"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hn \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 3     =    new   Person (  \" Barba \"  ,     3  2  )  ;", "Person   pers 4     =    new   Person (  \" Camomo \"  ,     1  5  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "List < Person >    owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 1  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "Car   car 1     =    new   Car (  5  ,    owners )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "owners . add ( pers 4  )  ;", "Car   car 2     =    new   Car (  2  7  ,    owners )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "Person   person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  . setName (  \" Hn   David \"  )  ;", "person 1  . setAge (  4  0  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ car 2     =    car 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / manyToManyAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "car 1  _  2     =    getAuditReader (  )  . find ( Car . class ,    id _ car 1  ,     2  )  ;", "Car   car 2  _  2     =    getAuditReader (  )  . find ( Car . class ,    id _ car 2  ,     2  )  ;", "for    ( Person   owner    :    car 1  _  2  . getOwners (  )  )     {", "for    ( Car   ownedCar    :    owner . getCars (  )  )     {", "ownedCar . getRegistNumber (  )  ;", "}", "}", "for    ( Person   owner    :    car 2  _  2  . getOwners (  )  )     {", "for    ( Car   ownedCar    :    owner . getCars (  )  )     {", "ownedCar . getRegistNumber (  )  ;", "}", "}", "car 1     =     (  ( Car )     ( getSession (  )  . get ( Car . class ,    id _ car 1  )  )  )  ;", "person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  _  1     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["loadDataOnSessionAndAuditReader"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testGetEntityNameManyYoManyWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testGetEntityNameManyYoManyWithEntityNameInNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.manyToManyAudited.ReadEntityWithAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   owners ;", "}", "METHOD_END"], "methodName": ["getOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . owners    =    owners ;", "}", "METHOD_END"], "methodName": ["setOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.Person"}, {"methodBody": ["METHOD_START", "{", "String   currCar 1 EN    =    getSession (  )  . getEntityName ( currentCar 1  )  ;", "String   currPerson 1 EN    =    getSession (  )  . getEntityName ( currentPerson 1  )  ;", "String   car 1  _  1 EN    =    getAuditReader (  )  . getEntityName ( id _ car 1  ,     2  ,    car 1  _  1  )  ;", "assert   currCar 1 EN . equals ( car 1  _  1 EN )  ;", "String   person 1  _  1 EN    =    getAuditReader (  )  . getEntityName ( id _ pers 1  ,     1  ,    person 1  _  1  )  ;", "assert   currPerson 1 EN . equals ( person 1  _  1 EN )  ;", "}", "METHOD_END"], "methodName": ["checkEntityNames"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hernan \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 4     =    new   Person (  \" Camomo \"  ,     1  5  )  ;", "List < Person >    owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 1  )  ;", "owners . add ( pers 2  )  ;", "Car   car 1     =    new   Car (  5  ,    owners )  ;", "getSession (  )  . getTransa (  )  . begin (  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransa (  )  . commit (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 4  )  ;", "Car   car 2     =    new   Car (  2  7  ,    owners )  ;", "getSession (  )  . getTransa (  )  . begin (  )  ;", "Person   person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  . setName (  \" Hernan   David \"  )  ;", "person 1  . setAge (  4  0  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransa (  )  . commit (  )  ;", "id _ car 2     =    car 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / oneToManyAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "currentCar 1     =     (  ( Car )     ( getSession (  )  . get ( Car . class ,    id _ car 1  )  )  )  ;", "currentPerson 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  _  1     =    getReader (  )  . find ( Person . class ,     \" Personaje \"  ,    id _ pers 1  ,     1  )  ;", "car 1  _  1     =    getReader (  )  . find ( Car . class ,    id _ car 1  ,     2  )  ;", "Car   car 2     =    getReader (  )  . find ( Car . class ,    id _ car 2  ,     2  )  ;", "for    ( Person   owner    :    car 1  _  1  . getOwners (  )  )     {", "owner . getName (  )  ;", "owner . getAge (  )  ;", "}", "for    ( Person   owner    :    car 2  . getOwners (  )  )     {", "owner . getName (  )  ;", "owner . getAge (  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadDataOnSessionAndAuditReader"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "this . loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameAuditedCollectionWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameAuditedCollectionWithEntityNameInNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   owners ;", "}", "METHOD_END"], "methodName": ["getOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . owners    =    owners ;", "}", "METHOD_END"], "methodName": ["setOwners"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "String   currCar 1 EN    =    getSession (  )  . getEntityName ( currentCar 1  )  ;", "String   currPerson 1 EN    =    getSession (  )  . getEntityName ( currentPerson 1  )  ;", "String   car 1  _  1 EN    =    getAuditReader (  )  . getEntityName ( id _ car 1  ,     2  ,    car 1  _  1  )  ;", "assert   currCar 1 EN . equals ( car 1  _  1 EN )  ;", "String   person 1  _  1 EN    =    getSession (  )  . getEntityName ( currentPerson 1  )  ;", "assert   currPerson 1 EN . equals ( person 1  _  1 EN )  ;", "}", "METHOD_END"], "methodName": ["checkEntityNames"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hernan \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 4     =    new   Person (  \" Camomo \"  ,     1  5  )  ;", "List < Person >    owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 1  )  ;", "owners . add ( pers 2  )  ;", "Car   car 1     =    new   Car (  5  ,    owners )  ;", "getSession (  )  . getTransa (  )  . begin (  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransa (  )  . commit (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 4  )  ;", "Car   car 2     =    new   Car (  2  7  ,    owners )  ;", "getSession (  )  . getTransa (  )  . begin (  )  ;", "Person   person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  . setName (  \" Hernan   David \"  )  ;", "person 1  . setAge (  4  0  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransa (  )  . commit (  )  ;", "id _ car 2     =    car 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / oneToManyNotAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "currentCar 1     =     (  ( Car )     ( getSession (  )  . get ( Car . class ,    id _ car 1  )  )  )  ;", "currentPerson 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "car 1  _  1     =    geReader (  )  . find ( Car . class ,    id _ car 1  ,     2  )  ;", "Car   car 2     =    geReader (  )  . find ( Car . class ,    id _ car 2  ,     2  )  ;", "for    ( Person   owner    :    car 1  _  1  . getOwners (  )  )     {", "owner . getName (  )  ;", "owner . getAge (  )  ;", "}", "for    ( Person   owner    :    car 2  . getOwners (  )  )     {", "owner . getName (  )  ;", "owner . getAge (  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadDataOnSessionAndAuditReader"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameCollectionWithEntityNameAndNotAuditedMode"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "loadDataOnSessionAndAuditReader (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameCollectionWithEntityNameAndNotAuditedModeInNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.oneToManyNotAudited.ReadEntityWithAuditedCollectionTest"}, {"methodBody": ["METHOD_START", "{", "return   driver ;", "}", "METHOD_END"], "methodName": ["getDriver"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . driver    =    driver ;", "}", "METHOD_END"], "methodName": ["setDriver"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.Person"}, {"methodBody": ["METHOD_START", "{", "assert    ( currentPerson 1  . getAge (  )  )     !  =     ( person 1  . getAge (  )  )  ;", "Person   person 2     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 2  )  )  )  ;", "Car   car 2     =    getReader (  )  . find ( Car . class ,    id _ car 2  ,     2  )  ;", "Person   person 2  _  1     =    car 2  . getOwner (  )  ;", "assert    ( person 2  . getAge (  )  )     =  =     ( person 2  _  1  . getAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkEntities"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "String   currentCar 1 EN    =    getSession (  )  . getEntityName ( currentCar 1  )  ;", "String   currentPerson 1 EN    =    getSession (  )  . getEntityName ( currentPerson 1  )  ;", "String   car 1 EN    =    getAuditReader (  )  . getEntityName ( id _ car 1  ,     1  ,    car 1  )  ;", "assert   currentCar 1 EN . equals ( car 1 EN )  ;", "String   person 1 EN    =    getAuditReader (  )  . getEntityName ( id _ pers 1  ,     1  ,    person 1  )  ;", "assert   currentPerson 1 EN . equals ( person 1 EN )  ;", "}", "METHOD_END"], "methodName": ["checkEntityNames"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hn \"  ,     1  5  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     1  9  )  ;", "Car   car 1     =    new   Car (  1  ,    pers 1  ,    null )  ;", "Car   car 2     =    new   Car (  2  ,    pers 2  ,    null )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "pers 1  . setAge (  5  0  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 2  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ car 2     =    car 2  . getId (  )  ;", "id _ pers 2     =    pers 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / singleAssociatedAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "currentCar 1     =     (  ( Car )     ( getSession (  )  . get ( Car . class ,    id _ car 1  )  )  )  ;", "currentPerson 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "car 1     =    getReader (  )  . find ( Car . class ,    id _ car 1  ,     1  )  ;", "person 1     =    car 1  . getOwner (  )  ;", "}", "METHOD_END"], "methodName": ["loadDataOnSessionAndAuditReader"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "loadDataOnSessionAndAuditReader (  )  ;", "checkEntities (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testGetAssociationWithEntityName"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "loadDataOnSessionAndAuditReader (  )  ;", "checkEntities (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testGetAssociationWithEntityNameInNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.ReadEntityAssociatedAuditedTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "getSession (  )  . getTransac (  )  . begin (  )  ;", "Person   owner    =    new   Person (  \" Lukasz \"  ,     2  5  )  ;", "Person   driver    =    new   Person (  \" Kinga \"  ,     2  4  )  ;", "Car   car    =    new   Car (  1  ,    owner ,    driver )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    owner )  ;", "getSession (  )  . persist (  \" Driveraje \"  ,    driver )  ;", "getSession (  )  . persist ( car )  ;", "getSession (  )  . getTransac (  )  . commit (  )  ;", "carId    =    car . getId (  )  ;", "ownerId    =    owner . getId (  )  ;", "driverId    =    driver . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.SingleDomainObjectToMultipleTablesTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / singleAssociatedAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.SingleDomainObjectToMultipleTablesTest"}, {"methodBody": ["METHOD_START", "{", "Car   carVer 1     =    getAuditReader (  )  . find ( Car . class ,    carId ,     1  )  ;", "Person   ownerVer 1     =    getAuditReader (  )  . find ( Person . class ,     \" Personaje \"  ,    ownerId ,     1  )  ;", "Person   driverVer 1     =    getAuditReader (  )  . find ( Person . class ,     \" Driveraje \"  ,    driverId ,     1  )  ;", "Assert . assertEquals ( ownerVer 1  . getId (  )  ,    carVer 1  . getOwner (  )  . getId (  )  )  ;", "Assert . assertEquals ( driverVer 1  . getId (  )  ,    carVer 1  . getDriver (  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Lukasz \"  ,    ownerVer 1  . getName (  )  )  ;", "Assert . assertEquals (  \" Kinga \"  ,    driverVer 1  . getName (  )  )  ;", "Assert . assertEquals (  1  ,    carVer 1  . getNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDomainObjectToMultipleTablesMapping"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedAudited.SingleDomainObjectToMultipleTablesTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Car"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.Person"}, {"methodBody": ["METHOD_START", "{", "person 1  _  1     =    car 1  . getOwner (  )  ;", "Person   person 2  _  1     =    car 2  . getOwner (  )  ;", "assert    ( currentPerson 1  . getAge (  )  )     =  =     ( person 1  _  1  . getAge (  )  )  ;", "assert    ( person 2  . getAge (  )  )     =  =     ( person 2  _  1  . getAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkEntities"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "String   currentCar 1 EN    =    getSession (  )  . getEntityName ( currentCar 1  )  ;", "String   car 1 EN    =    getAuditReader (  )  . getEntityName ( id _ car 1  ,     1  ,    car 1  )  ;", "assert   currentCar 1 EN . equals ( car 1 EN )  ;", "}", "METHOD_END"], "methodName": ["checkEntityNames"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hn \"  ,     1  5  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     1  9  )  ;", "Car   car 1     =    new   Car (  1  ,    pers 1  )  ;", "Car   car 2     =    new   Car (  2  ,    pers 2  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "pers 1  . setAge (  5  0  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 1  )  ;", "getSession (  )  . persist (  \" Personaje \"  ,    pers 2  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ car 2     =    car 2  . getId (  )  ;", "id _ pers 2     =    pers 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / singleAssociatedNotAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "currentPerson 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 2     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 2  )  )  )  ;", "currentCar 1     =     (  ( Car )     ( getSession (  )  . get ( Car . class ,    id _ car 1  )  )  )  ;", "car 1     =    geReader (  )  . find ( Car . class ,    id _ car 1  ,     1  )  ;", "car 2     =    geReader (  )  . find ( Car . class ,    id _ car 2  ,     2  )  ;", "}", "METHOD_END"], "methodName": ["loadDataOnSessionAndAuditReader"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "loadDataOnSessionAndAuditReader (  )  ;", "checkEntities (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameAssociationWithEntityNameAndNotAuditedMode"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "forceNewSession (  )  ;", "loadDataOnSessionAndAuditReader (  )  ;", "checkEntities (  )  ;", "checkE (  )  ;", "}", "METHOD_END"], "methodName": ["testObtainEntityNameAssociationWithEntityNameAndNotAuditedModeInNewSession"], "fileName": "org.hibernate.envers.test.integration.entityNames.singleAssociatedNotAudited.ReadEntityAssociatedNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "Object   delegate    =    em . getDelegate (  )  ;", "if    ( delegate   instanceof   Session )     {", "return    (  ( Session )     ( delegate )  )  ;", "} else", "if    ( delegate   instanceof   EntityManager )     {", "Object   delegate 2     =     (  ( EntityManager )     ( delegate )  )  . getDelegate (  )  ;", "if    ( delegate 2    instanceof   Session )     {", "return    (  ( Session )     ( delegate 2  )  )  ;", "}", "}", "throw   new   RuntimeExcep (  \" Invalid   entity   manager \"  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "org.hibernate.envers.test.integration.flush.AbstractFlushTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    AbstractFlushTest . getSession ( getEntityManager (  )  )  ;", "session . setFlushMode ( getFlushMode (  )  )  ;", "}", "METHOD_END"], "methodName": ["initFlush"], "fileName": "org.hibernate.envers.test.integration.flush.AbstractFlushTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . c (  )  ;", "id    =    entity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( StrTestEntity . class ,    entity . getId (  )  )  ;", "entity . setStr (  \" y \"  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . c (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   StrTestEntity (  \" y \"  ,    id )  ,    getEntityManager (  )  . find ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testCurrent"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlush"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ver 1     =    new   StrTestEntity (  \" x \"  ,    id )  ;", "StrTestEntity   ver 2     =    new   StrTestEntity (  \" y \"  ,    id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlush"}, {"methodBody": ["METHOD_START", "{", "List < Object [  ]  >    results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id )  )  . getResultList (  )  ;", "Assert . assertEquals ( results . get (  0  )  [  2  ]  ,    RevisionType . ADD )  ;", "Assert . assertEquals ( results . get (  1  )  [  2  ]  ,    RevisionType . MOD )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypes"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlush"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . get (  )  . begin (  )  ;", "SequenceIdRevisionEntity   revisionBeforeFlush    =    getAuditReader (  )  . getCurrentRevision ( SequenceIdRevisionEntity . class ,    true )  ;", "int   revisionNumberBeforeFlush    =    revisionBeforeFlush . getId (  )  ;", "em . flush (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" entity \"  )  ;", "em . persist ( entity )  ;", "em . get (  )  . commit (  )  ;", "SequenceIdRevisionEntity   entity 2 Revision    =     (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( entity . getId (  )  )  )  . getSingleResult (  )  )  )  [  1  ]  )  )  ;", "Assert . assertEquals (  \" The   revision   number   obtained   before   the   flush   and   the   persisting   of   the   entity   should   be   the   same   as   the   revision   number   of   the   entity   because   there   should   only   be   one   revision   number   per   transaction \"  ,    revisionNumberBeforeFlush ,    entity 2 Revision . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleRevisionInTransaction"], "fileName": "org.hibernate.envers.test.integration.flush.CommitFlushSingleRevisionInTransaction"}, {"methodBody": ["METHOD_START", "{", "return   FlushMode . MANUAL ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddDel"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   fe    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( fe )  ;", "em (  )  ;", "em . remove ( em . find ( StrTestEntity . class ,    fe . getId (  )  )  )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    fe . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddDel"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddDel"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddDel"}, {"methodBody": ["METHOD_START", "{", "return   FlushMode . MANUAL ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddMod"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   fe    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( fe )  ;", "em (  )  ;", "fe . setStr (  \" y \"  )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" z \"  )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    fe . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddMod"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ver 1     =    new   StrTestEntity (  \" y \"  ,    id )  ;", "StrTestEntity   ver 2     =    new   StrTestEntity (  \" z \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddMod"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "List < Object [  ]  >    results    =    getAuditReader (  )  . creQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id )  )  . getResultList (  )  ;", "Assert . assertEquals ( results . get (  0  )  [  2  ]  ,    RevisionType . ADD )  ;", "Assert . assertEquals ( results . get (  1  )  [  2  ]  ,    RevisionType . MOD )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypes"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddMod"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushAddMod"}, {"methodBody": ["METHOD_START", "{", "return   FlushMode . MANUAL ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModDel"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   fe    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( fe )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" y \"  )  ;", "em (  )  ;", "em . remove ( em . find ( StrTestEntity . class ,    fe . getId (  )  )  )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    fe . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModDel"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ver 1     =    new   StrTestEntity (  \" x \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert    ( getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     2  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModDel"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "List < Object [  ]  >    results    =    getAuditReader (  )  . creQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id )  )  . getResultList (  )  ;", "Assert . assertEquals ( results . get (  0  )  [  2  ]  ,    RevisionType . ADD )  ;", "Assert . assertEquals ( results . get (  1  )  [  2  ]  ,    RevisionType . DEL )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypes"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModDel"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModDel"}, {"methodBody": ["METHOD_START", "{", "return   FlushMode . MANUAL ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModMod"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   fe    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( fe )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" y \"  )  ;", "em (  )  ;", "fe . setStr (  \" z \"  )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    fe . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModMod"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ver 1     =    new   StrTestEntity (  \" x \"  ,    id )  ;", "StrTestEntity   ver 2     =    new   StrTestEntity (  \" z \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModMod"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "List < Object [  ]  >    results    =    getAuditReader (  )  . creQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id )  )  . getResultList (  )  ;", "Assert . assertEquals ( results . get (  0  )  [  2  ]  ,    RevisionType . ADD )  ;", "Assert . assertEquals ( results . get (  1  )  [  2  ]  ,    RevisionType . MOD )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypes"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModMod"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.DoubleFlushModMod"}, {"methodBody": ["METHOD_START", "{", "return   FlushMode . MANUAL ;", "}", "METHOD_END"], "methodName": ["getFlushMode"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   fe    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( fe )  ;", "em (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" z \"  )  ;", "em (  )  ;", "fe    =    em . find ( StrTestEntity . class ,    fe . getId (  )  )  ;", "fe . setStr (  \" z 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    fe . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   StrTestEntity (  \" z \"  ,    id )  ,    getEntityManager (  )  . find ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testCurrent"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ver 1     =    new   StrTestEntity (  \" x \"  ,    id )  ;", "StrTestEntity   ver 2     =    new   StrTestEntity (  \" z \"  ,    id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "List < Object [  ]  >    results    =    getAuditReader (  )  . creQuery (  )  . forRevisionsOfEntity ( StrTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id )  )  . getResultList (  )  ;", "Assert . assertEquals ( results . get (  0  )  [  2  ]  ,    RevisionType . ADD )  ;", "Assert . assertEquals ( results . get (  1  )  [  2  ]  ,    RevisionType . MOD )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypes"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.flush.ManualFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  3  ,    getAuditReader (  )  . getRevisions ( SimpleEntity . class ,    entityId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.generated.GeneratedColumnTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "SimpleEntity   se    =    new   SimpleEntity (  )  ;", "se . setData (  \" data \"  )  ;", "entityManager . getTransac (  )  . begin (  )  ;", "entityManager . persist ( se )  ;", "entityManager . getTransac (  )  . commit (  )  ;", "entityManager . clear (  )  ;", "entityId    =    se . getId (  )  ;", "entityManager . getTransac (  )  . begin (  )  ;", "se    =    entityManager . find ( SimpleEntity . class ,    se . getId (  )  )  ;", "se . setData (  \" data 2  \"  )  ;", "entityManager . merge ( se )  ;", "entityManager . getTransac (  )  . commit (  )  ;", "entityManager . getTransac (  )  . begin (  )  ;", "se    =    entityManager . find ( SimpleEntity . class ,    se . getId (  )  )  ;", "entityManager . remove ( se )  ;", "entityManager . getTransac (  )  . commit (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.generated.GeneratedColumnTest"}, {"methodBody": ["METHOD_START", "{", "final   SimpleEntity   rev 1     = tAuditReader (  )  . find ( SimpleEntity . class ,    entityId ,     1  )  ;", "Assert . assertEquals (  \" data \"  ,    rev 1 tData (  )  )  ;", "Assert . assertEquals (  1  ,    rev 1 tCaseNumberInsert (  )  )  ;", "final   SimpleEntity   rev 2     = tAuditReader (  )  . find ( SimpleEntity . class ,    entityId ,     2  )  ;", "Assert . assertEquals (  \" data 2  \"  ,    rev 2 tData (  )  )  ;", "Assert . assertEquals (  1  ,    rev 2 tCaseNumberInsert (  )  )  ;", "final   SimpleEntity   rev 3     = tAuditReader (  )  . find ( SimpleEntity . class ,    entityId ,     3  )  ;", "Assert . assertEquals (  \" data 2  \"  ,    rev 2 tData (  )  )  ;", "Assert . assertEquals (  1  ,    rev 2 tCaseNumberInsert (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.generated.GeneratedColumnTest"}, {"methodBody": ["METHOD_START", "{", "return   caseNumberInsert ;", "}", "METHOD_END"], "methodName": ["getCaseNumberInsert"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . caseNumberInsert    =    caseNumberInsert ;", "}", "METHOD_END"], "methodName": ["setCaseNumberInsert"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.generated.SimpleEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "WikiPage   page    =    new   WikiPage (  \" title \"  ,     \" content \"  )  ;", "em . persist ( page )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "WikiImage   image    =    new   WikiImage (  \" name 1  \"  )  ;", "em . persist ( image )  ;", "page    =    em . find ( WikiPage . class ,    page . getId (  )  )  ;", "page . getImages (  )  . add ( image )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "image    =    em . find ( WikiImage . class ,    image . getId (  )  )  ;", "image . setName (  \" name 2  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "pageId    =    page . getId (  )  ;", "imageId    =    image . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.hashcode.ChangingHashcode"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( WikiImage . class ,    imageId ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( WikiImage . class ,    imageId ,     2  )  . equals ( new   WikiImage (  \" name 1  \"  )  )  ;", "assert   getAuditReader (  )  . find ( WikiImage . class ,    imageId ,     3  )  . equals ( new   WikiImage (  \" name 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfImage"], "fileName": "org.hibernate.envers.test.integration.hashcode.ChangingHashcode"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( WikiPage . class ,    pageId ,     1  )  . getImages (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( WikiPage . class ,    pageId ,     2  )  . getImages (  )  . equals ( TTools . makeSet ( new   WikiImage (  \" name 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( WikiPage . class ,    pageId ,     3  )  . getImages (  )  . equals ( TTools . makeSet ( new   WikiImage (  \" name 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPage"], "fileName": "org.hibernate.envers.test.integration.hashcode.ChangingHashcode"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( WikiPage . class ,    pageId )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( WikiImage . class ,    imageId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.hashcode.ChangingHashcode"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", ". Component   component 1     =    new    . Component (  )  ;", "component 1  . setName (  \" User 1  \"  )  ;", "component 1  . setData (  \" Test 1  \"  )  ;", ". Component   component 2     =    new    . Component (  )  ;", "component 2  . setName (  \" User 2  \"  )  ;", "component 2  . setData (  \" Test 2  \"  )  ;", ". ComponentEntity   entity    =    new    . ComponentEntity (  )  ;", "entity . getComponents (  )  . add ( component 1  )  ;", "entity . getComponents (  )  . add ( component 2  )  ;", "entityManager . persist ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "component 1  . setName (  \" User 1  - Inline \"  )  ;", "entityManager . merge ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "entity . getComponents (  )  . remove ( component 2  )  ;", ". Component   component 3     =    new    . Component (  )  ;", "component 3  . setName (  \" User 2  \"  )  ;", "component 3  . setData (  \" Test 3  \"  )  ;", "entity . getComponents (  )  . add ( component 3  )  ;", "entityManager . merge ( entity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.hashcode.ComponentCollectionHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "final   ComponentCollectionHashcodeChangeTest . ComponentEntity   rev 1     =    getAuditReader (  )  . find ( ComponentCollectionHashcodeChangeTest . ComponentEntity . class ,    id ,     1  )  ;", "Assert . assertEquals (  2  ,    rev 1  . getComponents (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   ComponentCollectionHashcodeChangeTest . Component (  \" User 1  \"  ,     \" Test 1  \"  )  ,    new   ComponentCollectionHashcodeChangeTest . Component (  \" User 2  \"  ,     \" Test 2  \"  )  )  ,    rev 1  . getComponents (  )  )  ;", "final   ComponentCollectionHashcodeChangeTest . ComponentEntity   rev 2     =    getAuditReader (  )  . find ( ComponentCollectionHashcodeChangeTest . ComponentEntity . class ,    id ,     2  )  ;", "Assert . assertEquals (  2  ,    rev 2  . getComponents (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   ComponentCollectionHashcodeChangeTest . Component (  \" User 1  - Inline \"  ,     \" Test 1  \"  )  ,    new   ComponentCollectionHashcodeChangeTest . Component (  \" User 2  \"  ,     \" Test 2  \"  )  )  ,    rev 2  . getComponents (  )  )  ;", "final   ComponentCollectionHashcodeChangeTest . ComponentEntity   rev 3     =    getAuditReader (  )  . find ( ComponentCollectionHashcodeChangeTest . ComponentEntity . class ,    id ,     3  )  ;", "Assert . assertEquals (  2  ,    rev 3  . getComponents (  )  . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   ComponentCollectionHashcodeChangeTest . Component (  \" User 1  - Inline \"  ,     \" Test 1  \"  )  ,    new   ComponentCollectionHashcodeChangeTest . Component (  \" User 2  \"  ,     \" Test 3  \"  )  )  ,    rev 3  . getComponents (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionHistory"], "fileName": "org.hibernate.envers.test.integration.hashcode.ComponentCollectionHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ComponentCollectionHashcodeChangeTest . ComponentEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.hashcode.ComponentCollectionHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "ListHashcodeChangeTest . Book   book    =    new   ListHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 1  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook1"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "ListHashcodeChangeTest . Book   book    =    new   ListHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 2  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook2"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "ListHashcodeChangeTest . Book   book    =    new   ListHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 3  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook3"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . Author   author    =    new    . Author (  )  ;", "author . setFirstName (  \" TestFirstName \"  )  ;", "author . setLastName (  \" lastName \"  )  ;", "author . addBook ( createBook 1  (  )  )  ;", "author . addBook ( createBook 2  (  )  )  ;", "entityManager . persist ( author )  ;", "authorId    =    author . getId (  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . Author   author    =    entityManager . find (  . Author . class ,    authorId )  ;", "author . removeAllBooks (  )  ;", "author . addBook ( createBook 1  (  )  )  ;", "author . addBook ( createBook 2  (  )  )  ;", "author . addBook ( createBook 3  (  )  )  ;", "entityManager . merge ( author )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "final   AuditReader   reader    =    getAuditReader (  )  ;", "final   List < Number >    revisions    =    reader . getRevisions (  . Author . class ,    authorId )  ;", "final   Number   lastRevision    =    revisions . get (  (  ( revisions . size (  )  )     -     1  )  )  ;", "final    . Author   author    =     (  (  . Author )     ( reader . createQuery (  )  . forEntitiesAtRevision (  . Author . class ,    lastRevision )  . getSingleResult (  )  )  )  ;", "Assert . assertNotNull ( author )  ;", "Assert . assertEquals (  3  ,    author . getBooks (  )  . size (  )  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuthorLastRevision"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "final    . Author   author    =    entityManager . find (  . Author . class ,    authorId )  ;", "Assert . assertNotNull ( author )  ;", "Assert . assertEquals (  3  ,    author . getBooks (  )  . size (  )  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuthorState"], "fileName": "org.hibernate.envers.test.integration.hashcode.ListHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "SetHashcodeChangeTest . Book   book    =    new   SetHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 1  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook1"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "SetHashcodeChangeTest . Book   book    =    new   SetHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 2  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook2"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "SetHashcodeChangeTest . Book   book    =    new   SetHashcodeChangeTest . Book (  )  ;", "book . setTitle (  \" Book 3  \"  )  ;", "return   book ;", "}", "METHOD_END"], "methodName": ["createBook3"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . Author   author    =    new    . Author (  )  ;", "author . setFirstName (  \" TestFirstName \"  )  ;", "author . setLastName (  \" lastName \"  )  ;", "author . addBook ( createBook 1  (  )  )  ;", "author . addBook ( createBook 2  (  )  )  ;", "entityManager . persist ( author )  ;", "authorId    =    author . getId (  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "final    . Author   author    =    entityManager . find (  . Author . class ,    authorId )  ;", "author . removeAllBooks (  )  ;", "author . addBook ( createBook 1  (  )  )  ;", "author . addBook ( createBook 2  (  )  )  ;", "author . addBook ( createBook 3  (  )  )  ;", "entityManager . merge ( author )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "final   AuditReader   reader    =    getAuditReader (  )  ;", "final   List < Number >    revisions    =    reader . getRevisions (  . Author . class ,    authorId )  ;", "final   Number   lastRevision    =    revisions . get (  (  ( revisions . size (  )  )     -     1  )  )  ;", "final    . Author   author    =     (  (  . Author )     ( reader . createQuery (  )  . forEntitiesAtRevision (  . Author . class ,    lastRevision )  . getSingleResult (  )  )  )  ;", "Assert . assertNotNull ( author )  ;", "Assert . assertEquals (  3  ,    author . getBooks (  )  . size (  )  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuthorLastRevision"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "final    . Author   author    =    entityManager . find (  . Author . class ,    authorId )  ;", "Assert . assertNotNull ( author )  ;", "Assert . assertEquals (  3  ,    author . getBooks (  )  . size (  )  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuthorState"], "fileName": "org.hibernate.envers.test.integration.hashcode.SetHashcodeChangeTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiImage"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiImage"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiImage"}, {"methodBody": ["METHOD_START", "{", "return   content ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "return   images ;", "}", "METHOD_END"], "methodName": ["getImages"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "return   links ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "return   title ;", "}", "METHOD_END"], "methodName": ["getTitle"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "this . content    =    content ;", "}", "METHOD_END"], "methodName": ["setContent"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "this . images    =    images ;", "}", "METHOD_END"], "methodName": ["setImages"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "this . links    =    links ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "this . title    =    title ;", "}", "METHOD_END"], "methodName": ["setTitle"], "fileName": "org.hibernate.envers.test.integration.hashcode.WikiPage"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   dite    =    new   TestEntity ( new   DateEmbId ( new   Date (  )  ,    new   Date (  )  )  ,     \" x \"  )  ;", "em . persist ( dite )  ;", "id 1     =    dite . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "dite    =    em . find ( TestEntity . class ,    id 1  )  ;", "dite . setStr 1  (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeDateId"}, {"methodBody": ["METHOD_START", "{", "CompositeDateIdTestEntity   ver 1     =    new   CompositeDateIdTestEntity ( id 1  ,     \" x \"  )  ;", "CompositeDateIdTestEntity   ver 2     =    new   CompositeDateIdTestEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( CompositeDateIdTestEntity . class ,    id 1  ,     1  )  . getStr 1  (  )  . equals (  \" x \"  )  ;", "assert   getAuditReader (  )  . find ( CompositeDateIdTestEntity . class ,    id 1  ,     2  )  . getStr 1  (  )  . equals (  \" y \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeDateId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( CompositeDateIdTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeDateId"}, {"methodBody": ["METHOD_START", "{", "id 1     =    new   EmbId (  1  ,     2  )  ;", "id 2     =    new   EmbId (  1  0  ,     2  0  )  ;", "id 3     =    new   MulId (  1  0  0  ,     1  0  1  )  ;", "id 4     =    new   MulId (  1  0  2  ,     1  0  3  )  ;", "id 5     =    new   EmbIdWithCustomType (  2  5  ,    CustomEnum . NO )  ;", "id 6     =    new   EmbIdWithCustomType (  2  7  ,    CustomEnum . YES )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( new   EmbIdTestEntity ( id 1  ,     \" x \"  )  )  ;", "em . persist ( new   MulIdTestEntity ( id 3  . getId 1  (  )  ,    id 3  . getId 2  (  )  ,     \" a \"  )  )  ;", "em . persist ( new   EmbIdWithCustomTypeTestEntity ( id 5  ,     \" c \"  )  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( new   EmbIdTestEntity ( id 2  ,     \" y \"  )  )  ;", "em . persist ( new   MulIdTestEntity ( id 4  . getId 1  (  )  ,    id 4  . getId 2  (  )  ,     \" b \"  )  )  ;", "em . persist ( new   EmbIdWithCustomTypeTestEntity ( id 6  ,     \" d \"  )  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "EmbIdTestEntity   ete 1     =    em . find ( EmbIdTestEntity . class ,    id 1  )  ;", "EmbIdTestEntity   ete 2     =    em . find ( EmbIdTestEntity . class ,    id 2  )  ;", "MulIdTestEntity   mte 3     =    em . find ( MulIdTestEntity . class ,    id 3  )  ;", "MulIdTestEntity   mte 4     =    em . find ( MulIdTestEntity . class ,    id 4  )  ;", "EmbIdWithCustomTypeTestEntity   cte 5     =    em . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  )  ;", "EmbIdWithCustomTypeTestEntity   cte 6     =    em . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  )  ;", "ete 1  . setStr 1  (  \" x 2  \"  )  ;", "ete 2  . setStr 1  (  \" y 2  \"  )  ;", "mte 3  . setStr 1  (  \" a 2  \"  )  ;", "mte 4  . setStr 1  (  \" b 2  \"  )  ;", "cte 5  . setStr 1  (  \" c 2  \"  )  ;", "cte 6  . setStr 1  (  \" d 2  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ete 1     =    em . find ( EmbIdTestEntity . class ,    id 1  )  ;", "ete 2     =    em . find ( EmbIdTestEntity . class ,    id 2  )  ;", "mte 3     =    em . find ( MulIdTestEntity . class ,    id 3  )  ;", "cte 5     =    em . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  )  ;", "cte 6     =    em . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  )  ;", "em . remove ( ete 1  )  ;", "em . remove ( mte 3  )  ;", "em . remove ( cte 6  )  ;", "ete 2  . setStr 1  (  \" y 3  \"  )  ;", "cte 5  . setStr 1  (  \" c 3  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ete 2     =    em . find ( EmbIdTestEntity . class ,    id 2  )  ;", "em . remove ( ete 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "EmbIdTestEntity   ver 1     =    new   EmbIdTestEntity ( id 1  ,     \" x \"  )  ;", "EmbIdTestEntity   ver 2     =    new   EmbIdTestEntity ( id 1  ,     \" x 2  \"  )  ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 1  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 1  ,     4  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 1  ,     5  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "EmbIdTestEntity   ver 1     =    new   EmbIdTestEntity ( id 2  ,     \" y \"  )  ;", "EmbIdTestEntity   ver 2     =    new   EmbIdTestEntity ( id 2  ,     \" y 2  \"  )  ;", "EmbIdTestEntity   ver 3     =    new   EmbIdTestEntity ( id 2  ,     \" y 3  \"  )  ;", "assert    ( getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 2  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 2  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 2  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 2  ,     4  )  . equals ( ver 3  )  ;", "assert    ( getAuditReader (  )  . find ( EmbIdTestEntity . class ,    id 2  ,     5  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "MulIdTestEntity   ver 1     =    new   MulIdTestEntity ( id 3  . getId 1  (  )  ,    id 3  . getId 2  (  )  ,     \" a \"  )  ;", "MulIdTestEntity   ver 2     =    new   MulIdTestEntity ( id 3  . getId 1  (  )  ,    id 3  . getId 2  (  )  ,     \" a 2  \"  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 3  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 3  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 3  ,     3  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 3  ,     4  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 3  ,     5  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId3"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "MulIdTestEntity   ver 1     =    new   MulIdTestEntity ( id 4  . getId 1  (  )  ,    id 4  . getId 2  (  )  ,     \" b \"  )  ;", "MulIdTestEntity   ver 2     =    new   MulIdTestEntity ( id 4  . getId 1  (  )  ,    id 4  . getId 2  (  )  ,     \" b 2  \"  )  ;", "assert    ( getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 4  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 4  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 4  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 4  ,     4  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( MulIdTestEntity . class ,    id 4  ,     5  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId4"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "EmbIdWithCustomTypeTestEntity   ver 1     =    new   EmbIdWithCustomTypeTestEntity ( id 5  ,     \" c \"  )  ;", "EmbIdWithCustomTypeTestEntity   ver 2     =    new   EmbIdWithCustomTypeTestEntity ( id 5  ,     \" c 2  \"  )  ;", "EmbIdWithCustomTypeTestEntity   ver 3     =    new   EmbIdWithCustomTypeTestEntity ( id 5  ,     \" c 3  \"  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  ,     4  )  . equals ( ver 3  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 5  ,     5  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId5"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "EmbIdWithCustomTypeTestEntity   ver 1     =    new   EmbIdWithCustomTypeTestEntity ( id 6  ,     \" d \"  )  ;", "EmbIdWithCustomTypeTestEntity   ver 2     =    new   EmbIdWithCustomTypeTestEntity ( id 6  ,     \" d 2  \"  )  ;", "assert    ( getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  ,     3  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  ,     4  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( EmbIdWithCustomTypeTestEntity . class ,    id 6  ,     5  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId6"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdTestEntity . class ,    id 1  )  )  ;", "assert   Arrays . asList (  2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdTestEntity . class ,    id 2  )  )  ;", "assert   Arrays . asList (  1  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( MulIdTestEntity . class ,    id 3  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( MulIdTestEntity . class ,    id 4  )  )  ;", "assert   Arrays . asList (  1  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdWithCustomTypeTestEntity . class ,    id 5  )  )  ;", "assert   Arrays . asList (  2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdWithCustomTypeTestEntity . class ,    id 6  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.ids.CompositeIds"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   dite    =    new   TestEntity ( new   Date (  )  ,     \" x \"  )  ;", "em . persist ( dite )  ;", "id 1     =    dite . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "dite    =    em . find ( TestEntity . class ,    id 1  )  ;", "dite . setStr 1  (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.DateId"}, {"methodBody": ["METHOD_START", "{", "DateIdTestEntity   ver 1     =    new   DateIdTestEntity ( id 1  ,     \" x \"  )  ;", "DateIdTestEntity   ver 2     =    new   DateIdTestEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( DateIdTestEntity . class ,    id 1  ,     1  )  . getStr 1  (  )  . equals (  \" x \"  )  ;", "assert   getAuditReader (  )  . find ( DateIdTestEntity . class ,    id 1  ,     2  )  . getStr 1  (  )  . equals (  \" y \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.ids.DateId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DateIdTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.ids.DateId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "UnversionedStrTestEntity   uste    =    new   UnversionedStrTestEntity (  )  ;", "uste . setStr (  \" test 1  \"  )  ;", "em . persist ( uste )  ;", "id 1     =    new   ManyToOneNotAuditedEmbId ( uste )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   mtoinate    =    new   TestEntity (  )  ;", "mtoinate . setData (  \" data 1  \"  )  ;", "mtoinate . setId ( id 1  )  ;", "em . persist ( mtoinate )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.ManyToOneIdNotAudited"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChild"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChild"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChild"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChild"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChildId"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChildId"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChildId"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.CorrectChildId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChild"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChild"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChildId"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChildId"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChildId"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.IncorrectChildId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Item"}, {"methodBody": ["METHOD_START", "{", "return   price ;", "}", "METHOD_END"], "methodName": ["getPrice"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Item"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Item"}, {"methodBody": ["METHOD_START", "{", "this . price    =    price ;", "}", "METHOD_END"], "methodName": ["setPrice"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Item"}, {"methodBody": ["METHOD_START", "{", "return   model ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "return   producer ;", "}", "METHOD_END"], "methodName": ["getProducer"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "this . model    =    model ;", "}", "METHOD_END"], "methodName": ["setModel"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "this . producer    =    producer ;", "}", "METHOD_END"], "methodName": ["setProducer"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.ItemId"}, {"methodBody": ["METHOD_START", "{", "this . correctChildren . add ( new   CorrectChild ( number ,    this )  )  ;", "}", "METHOD_END"], "methodName": ["addCorrectChild"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "this . incorrectChildren . add ( new   IncorrectChild ( number ,    this )  )  ;", "}", "METHOD_END"], "methodName": ["addIncorrectChild"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "return   correctChildren ;", "}", "METHOD_END"], "methodName": ["getCorrectChildren"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "return   incorrectChildren ;", "}", "METHOD_END"], "methodName": ["getIncorrectChildren"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "this . correctChildren    =    correctChildren ;", "}", "METHOD_END"], "methodName": ["setCorrectChildren"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "this . incorrectChildren    =    incorrectChildren ;", "}", "METHOD_END"], "methodName": ["setIncorrectChildren"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Parent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Producer"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Producer"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Producer"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.Producer"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "return   item ;", "}", "METHOD_END"], "methodName": ["getItem"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "this . comment    =    comment ;", "}", "METHOD_END"], "methodName": ["setComment"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "this . item    =    item ;", "}", "METHOD_END"], "methodName": ["setItem"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.PurchaseOrder"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Author   author    =    new   Author (  )  ;", "author . setName (  \" Stephen   King \"  )  ;", "entityManager . persist ( author )  ;", "authorId    =    author . getId (  )  ;", "final   Book   book    =    new   Book (  )  ;", "book . setId ( new   BookId (  )  )  ;", "book . getId (  )  . setId (  1  )  ;", "book . getId (  )  . setAuthor ( author )  ;", "book . setName (  \" Gunslinger \"  )  ;", "book . setEdi (  1  )  ;", "entityManager . persist ( book )  ;", "this . bookId 1     =    book . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Author   author    =    entityManager . find (  . class ,    authorId )  ;", "final   Book   book    =    new   Book (  )  ;", "book . setId ( new   BookId (  )  )  ;", "book . getId (  )  . setId (  2  )  ;", "book . getId (  )  . setAuthor ( author )  ;", "book . setName (  \" Gunslinger \"  )  ;", "book . setEdi (  2  )  ;", "entityManager . persist ( book )  ;", "this . bookId 2     =    book . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Book   book 1     =    entityManager . find (  . class ,    bookId 1  )  ;", "book 1  . setName (  \" Gunslinger :    Dark   Tower \"  )  ;", "entityManager . merge ( book 1  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Book   book 2     =    entityManager . find (  . class ,    bookId 2  )  ;", "book 2  . setName (  \" Gunslinger :    Dark   Tower \"  )  ;", "entityManager . merge ( book 2  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Book   book 1     =    entityManager . find (  . class ,    bookId 1  )  ;", "entityManager . remove ( book 1  )  ;", "final   Book   book 2     =    entityManager . find (  . class ,    bookId 2  )  ;", "entityManager . remove ( book 2  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     5  )  ,    getAuditReader (  )  . getRevisions ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 2  )  )  ;", "}", "METHOD_END"], "methodName": ["tesRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 1     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 1  ,     1  )  ;", "Assert . assertNotNull ( rev 1  . getId (  )  . getAuthor (  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 3     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 1  ,     3  )  ;", "Assert . assertNotNull ( rev 3  . getId (  )  . getAuthor (  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 5     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 1  ,     5  )  ;", "Assert . assertNull ( rev 5  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryBook1"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 2     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 2  ,     2  )  ;", "Assert . assertNotNull ( rev 2  . getId (  )  . getAuthor (  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 4     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 2  ,     4  )  ;", "Assert . assertNotNull ( rev 4  . getId (  )  . getAuthor (  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   rev 5     =    getAuditReader (  )  . find ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    bookId 2  ,     5  )  ;", "Assert . assertNull ( rev 5  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryBook2"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "List < RelationInsideEmbeddableNotAuditedTest . Book >    books    =     (  ( List < RelationInsideEmbeddableNotAuditedTest . Book >  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( bookId 1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  )  )  ;", "Assert . assertTrue (  (  !  ( books . isEmpty (  )  )  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   book    =    books . get (  0  )  ;", "Assert . assertNotNull ( book . getId (  )  )  ;", "Assert . assertNotNull ( book . getId (  )  . getAuthor (  )  )  ;", "Assert . assertEquals ( authorId ,    book . getId (  )  . getAuthor (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectDeletedEntitiesBook1"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "List < RelationInsideEmbeddableNotAuditedTest . Book >    books    =     (  ( List < RelationInsideEmbeddableNotAuditedTest . Book >  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( RelationInsideEmbeddableNotAuditedTest . Book . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( bookId 2  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  )  )  ;", "Assert . assertTrue (  (  !  ( books . isEmpty (  )  )  )  )  ;", "final   RelationInsideEmbeddableNotAuditedTest . Book   book    =    books . get (  0  )  ;", "Assert . assertNotNull ( book . getId (  )  )  ;", "Assert . assertNotNull ( book . getId (  )  . getAuthor (  )  )  ;", "Assert . assertEquals ( authorId ,    book . getId (  )  . getAuthor (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectDeletedEntitiesBook2"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableNotAuditedTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "Parent   parent    =    new   Parent (  \" Parent \"  )  ;", "parent . addIncorrectChild (  1  )  ;", "parent . addCorrectChild (  1  )  ;", "entityManager . persist ( parent )  ;", "for    ( IncorrectChild   child    :    parent . getIncorrectChildren (  )  )     {", "entityManager . persist ( child )  ;", "}", "for    ( CorrectChild   child    :    parent . getCorrectChildren (  )  )     {", "entityManager . persist ( child )  ;", "}", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "for    ( IncorrectChild   child    :    parent . getIncorrectChildren (  )  )     {", "entityManager . r ( child )  ;", "}", "parent . getIncorrectChildren (  )  . clear (  )  ;", "for    ( CorrectChild   child    :    parent . getCorrectChildren (  )  )     {", "entityManager . r ( child )  ;", "}", "parent . getCorrectChildren (  )  . clear (  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "entityManager . r ( parent )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   e ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableRemoveTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Parent . class ,     \" Parent \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableRemoveTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Producer   producer    =    new   Producer (  1  ,     \" Sony \"  )  ;", "ItemId   sonyId    =    new   ItemId (  \" TV \"  ,     1  ,    producer )  ;", "Item   item    =    new   Item ( sonyId ,     1  0  0  .  5  )  ;", "PurchaseOrder   order    =    new   PurchaseOrder ( item ,    null )  ;", "em . persist ( producer )  ;", "em . persist ( item )  ;", "em . persist ( order )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "order    =    em . find ( PurchaseOrder . class ,    order . getId (  )  )  ;", "order . setComment (  \" fragile \"  )  ;", "order    =    em . merge ( order )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "item    =    em . find ( Item . class ,    sonyId )  ;", "item . setPrice (  1  1  0  .  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "orderId    =    order . getId (  )  ;", "itemId    =    sonyId ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableTest"}, {"methodBody": ["METHOD_START", "{", "Item   ver 1     =    new   Item ( itemId ,     1  0  0  .  5  )  ;", "Item   ver 2     =    new   Item ( itemId ,     1  1  0  .  0  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( Item . class ,    itemId ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( Item . class ,    itemId ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfItem"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableTest"}, {"methodBody": ["METHOD_START", "{", "PurchaseOrder   ver 1     =    new   PurchaseOrder ( orderId ,    new   Item ( new   ItemId (  \" TV \"  ,     1  ,    new   Producer (  1  ,     \" Sony \"  )  )  ,     1  0  0  .  5  )  ,    null )  ;", "PurchaseOrder   ver 2     =    new   PurchaseOrder ( orderId ,    new   Item ( new   ItemId (  \" TV \"  ,     1  ,    new   Producer (  1  ,     \" Sony \"  )  )  ,     1  0  0  .  5  )  ,     \" fragile \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( PurchaseOrder . class ,    orderId ,     1  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( PurchaseOrder . class ,    orderId ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPurchaseOrder"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( PurchaseOrder . class ,    orderId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Item . class ,    itemId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.ids.embeddedid.RelationInsideEmbeddableTest"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.ClassType"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.ClassType"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.ClassType"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.ClassType"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ClassType   type    =    new   ClassType (  \" type \"  ,     \" initial   description \"  )  ;", "SampleClass   entity    =    new   SampleClass (  )  ;", "entity . setType ( type )  ;", "entity . setSampleValue (  \" initial   data \"  )  ;", "em . persist ( type )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "typeId    =    type . getType (  )  ;", "entityId    =    new   alClassId ( entity . getId (  )  ,    new   ClassType (  \" type \"  ,     \" initial   description \"  )  )  ;", "em . getTransaction (  )  . begin (  )  ;", "type    =    em . find ( ClassType . class ,    type . getType (  )  )  ;", "type . setDescription (  \" modified   description \"  )  ;", "em . merge ( type )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( SampleClass . class ,    entityId )  ;", "entity . setSampleValue (  \" modified   data \"  )  ;", "em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.IdClassWithRelationTest"}, {"methodBody": ["METHOD_START", "{", "SampleClass   entity    =    new   SampleClass ( entityId . getId (  )  ,    entityId . getType (  )  ,     \" initial   data \"  )  ;", "SampleClass   ver 1     =    getAuditReader (  )  . find ( SampleClass . class ,    entityId ,     1  )  ;", "Assert . assertEquals ( entity . getId (  )  ,    ver 1  . getId (  )  )  ;", "Assert . assertEquals ( entity . getSampleValue (  )  ,    ver 1  . getSampleValue (  )  )  ;", "Assert . assertEquals ( entity . getType (  )  . getType (  )  ,    ver 1  . getType (  )  . getType (  )  )  ;", "Assert . assertEquals ( entity . getType (  )  . getDescription (  )  ,    ver 1  . getType (  )  . getDescription (  )  )  ;", "entity . setSampleValue (  \" modified   data \"  )  ;", "entity . getType (  )  . setDescription (  \" modified   description \"  )  ;", "SampleClass   ver 2     =    getAuditReader (  )  . find ( SampleClass . class ,    entityId ,     3  )  ;", "Assert . assertEquals ( entity . getId (  )  ,    ver 2  . getId (  )  )  ;", "Assert . assertEquals ( entity . getSampleValue (  )  ,    ver 2  . getSampleValue (  )  )  ;", "Assert . assertEquals ( entity . getType (  )  . getType (  )  ,    ver 2  . getType (  )  . getType (  )  )  ;", "Assert . assertEquals ( entity . getType (  )  . getDescription (  )  ,    ver 2  . getType (  )  . getDescription (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEntity"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.IdClassWithRelationTest"}, {"methodBody": ["METHOD_START", "{", "ClassType   type    =    new   ClassType ( typeId ,     \" initial   description \"  )  ;", "ClassType   ver 1     =    getAuditReader (  )  . find ( ClassType . class ,    typeId ,     1  )  ;", "Assert . assertEquals ( type ,    ver 1  )  ;", "Assert . assertEquals ( type . getDescription (  )  ,    ver 1  . getDescription (  )  )  ;", "type . setDescription (  \" modified   description \"  )  ;", "ClassType   ver 2     =    getAuditReader (  )  . find ( ClassType . class ,    typeId ,     2  )  ;", "Assert . assertEquals ( type ,    ver 2  )  ;", "Assert . assertEquals ( type . getDescription (  )  ,    ver 2  . getDescription (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.IdClassWithRelationTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ClassType . class ,    typeId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( SampleClass . class ,    entityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.IdClassWithRelationTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.RelationalClassId"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.RelationalClassId"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.RelationalClassId"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.RelationalClassId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "return   sampleValue ;", "}", "METHOD_END"], "methodName": ["getSampleValue"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "this . sampleValue    =    sampleValue ;", "}", "METHOD_END"], "methodName": ["setSampleValue"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.ids.idclass.SampleClass"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( wrappedStringId )     !  =    null    ?     !  ( wrappedStringId . equals ( that . wrappedStringId )  )     :     ( that . wrappedStringId )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "return   wrappedStringId ;", "}", "METHOD_END"], "methodName": ["getWrappedStringId"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( wrappedStringId )     !  =    null )     ?    wrappedStringId . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "this . wrappedStringId    =    wrappedStringId ;", "}", "METHOD_END"], "methodName": ["setWrappedStringId"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( testEntity )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorTest"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ProtectedConstructorEntity . class ,     1  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList ( testEntity )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testAuditEntityInstantiation"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.ProtectedConstructorTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  ( o    =  =    null )     |  |     (  ( getClass (  )  )     !  =     ( o . getClass (  )  )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "return    !  (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.WrappedStringId"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.WrappedStringId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.ids.protectedmodifier.WrappedStringId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity ( id 1  ,     \" x \"  ,     1 L )  ;", "em . persist ( ce )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData (  \" y \"  )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   ver 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "ChildEntity   ver 2     =    new   ChildEntity ( id 1  ,     \" y \"  ,     2 L )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   childVer 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ChildEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity ( id 1  ,     \" x \"  ,    null )  ;", "em . persist ( ce )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData ( null )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildNullAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   ver 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,    null )  ;", "ChildEntity   ver 2     =    new   ChildEntity ( id 1  ,    null ,     2 L )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildNullAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   childVer 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,    null )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildNullAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ChildEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ChildNullAuditing"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", ". ChildEntity   childEntity    =    new    . ChildEntity (  1  ,     \" Child \"  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "entityManager . persist ( childEntity )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", ". ChildListHolder   holder    =    new    . ChildListHolder (  )  ;", "holder . setId (  1  )  ;", "holder . setChildren ( Arrays . asList ( childEntity )  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "entityManager . persist ( holder )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   e ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.DiscriminatorJoinedInheritanceTest"}, {"methodBody": ["METHOD_START", "{", "DiscriminatorJoinedInheritanceTest . ChildEntity   entity    =    getAuditReader (  )  . find ( DiscriminatorJoinedInheritanceTest . ChildEntity . class ,     1  ,     1  )  ;", "Assert . assertEquals (  \" ce \"  ,    entity . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["testConfiguredDiscriminatorValue"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.DiscriminatorJoinedInheritanceTest"}, {"methodBody": ["METHOD_START", "{", "DiscriminatorJoinedInheritanceTest . ChildListHolder   holder    =    getAuditReader (  )  . find ( DiscriminatorJoinedInheritanceTest . ChildListHolder . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    holder . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals (  \" ce \"  ,    holder . getChildren (  )  . get (  0  )  . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDiscriminatorValuesViaRelatedEntityQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.DiscriminatorJoinedInheritanceTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( DiscriminatorJoinedInheritanceTest . ChildEntity . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( DiscriminatorJoinedInheritanceTest . ChildListHolder . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.DiscriminatorJoinedInheritanceTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   pe    =    new   Entity ( id 1  ,     \" x \"  )  ;", "em . persist ( pe )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pe    =    em . find ( Entity . class ,    id 1  )  ;", "pe . setData (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   ver 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "ParentEntity   ver 2     =    new   ParentEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParentId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   parentVer 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( parentVer 1  )  ;", "assert    ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getResultList (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "re _ id 1     =     1  ;", "re _ id 2     =     1  0  ;", "c _ id    =     1  0  0  ;", "em . getTransaction (  )  . begin (  )  ;", "edEntity   re 1     =    new   edEntity ( re _ id 1  )  ;", "em . persist ( re 1  )  ;", "edEntity   re 2     =    new   edEntity ( re _ id 2  )  ;", "em . persist ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 1     =    em . find ( edEntity . class ,    re _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  ;", "cie . seted ( re 1  )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 2     =    em . find ( edEntity . class ,    re _ id 2  )  ;", "cie    =    em . find ( ChildIngEntity . class ,    c _ id )  ;", "cie . seted ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     2  )  . geted (  )  . equals ( new   edEntity ( re _ id 1  )  )  ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     3  )  . geted (  )  . equals ( new   edEntity ( re _ id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testChildHistory"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     3  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     2  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection2"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 2  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentNotIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ReferencedEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   pe    =    new   Entity ( id 1  ,     \" x \"  )  ;", "em . persist ( pe )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pe    =    em . find ( Entity . class ,    id 1  )  ;", "pe . setData (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.EmptyChildAuditing"}, {"methodBody": ["METHOD_START", "{", "EmptyChildEntity   ver 1     =    new   EmptyChildEntity ( id 1  ,     \" x \"  )  ;", "EmptyChildEntity   ver 2     =    new   EmptyChildEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( EmptyChildEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( EmptyChildEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.EmptyChildAuditing"}, {"methodBody": ["METHOD_START", "{", "EmptyChildEntity   childVer 1     =    new   EmptyChildEntity ( id 1  ,     \" x \"  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( EmptyChildEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.EmptyChildAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( EmptyChildEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.EmptyChildAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.emptychild.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "address    =     (  (  )     ( o )  )  ;", "if    (  ( address 1  )     !  =    null    ?     !  ( address 1  . equals ( address . address 1  )  )     :     ( address . address 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( address . id )  )     :     ( address . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   address 1  ;", "}", "METHOD_END"], "methodName": ["getAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   contact ;", "}", "METHOD_END"], "methodName": ["getContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( a 1  )     !  =    null    ?    a 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . address 1     =    address 1  ;", "}", "METHOD_END"], "methodName": ["setAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . contact    =    contact ;", "}", "METHOD_END"], "methodName": ["setContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Address ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    address 1     =     \"  )     +     ( getAddress 1  (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   addresses ;", "}", "METHOD_END"], "methodName": ["getAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   email ;", "}", "METHOD_END"], "methodName": ["getEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . addresses    =    addresses ;", "}", "METHOD_END"], "methodName": ["setAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . email    =    email ;", "}", "METHOD_END"], "methodName": ["setEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "pc _ id    =     1 L ;", "a 1  _ id    =     1  0 L ;", "a 2  _ id    =     1  0  0 L ;", "em . getTransa (  )  . begin (  )  ;", "PersonalContact   pc    =    new   PersonalContact ( pc _ id ,     \" e \"  ,     \" f \"  )  ;", "Address   a 1     =    new   Address ( a 1  _ id ,     \" a 1  \"  )  ;", "a 1  . setContact ( pc )  ;", "em . persist ( pc )  ;", "em . persist ( a 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "pc    =    em . find ( PersonalContact . class ,    pc _ id )  ;", "Address   a 2     =    new   Address ( a 2  _ id ,     \" a 2  \"  )  ;", "a 2  . setContact ( pc )  ;", "em . persist ( a 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPersonalContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( Contact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( PersContact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "return   firstname ;", "}", "METHOD_END"], "methodName": ["getFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "this . firstname    =    firstname ;", "}", "METHOD_END"], "methodName": ["setFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity ( id 1  ,     \" x \"  ,     1 L )  ;", "em . persist ( ce )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData (  \" y \"  )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinAuditing"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  \" other _ id \"  ,     (  ( Column )     ( metadata (  )  . getEntityBinding (  \" ChildPrimaryKeyJoinEntity _ AUD \"  )  . getKey (  )  . getColumnIterator (  )  . next (  )  )  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testChildIdColumnName"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildPrimaryKeyJoinEntity   ver 1     =    new   ChildPrimaryKeyJoinEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "ChildPrimaryKeyJoinEntity   ver 2     =    new   ChildPrimaryKeyJoinEntity ( id 1  ,     \" y \"  ,     2 L )  ;", "assert   getAuditReader (  )  . find ( ChildPrimaryKeyJoinEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ChildPrimaryKeyJoinEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildPrimaryKeyJoinEntity   childVer 1     =    new   ChildPrimaryKeyJoinEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildPrimaryKeyJoinEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ChildPrimaryKeyJoinEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childPrimaryKeyJoinEntity    =     (  (  )     ( o )  )  ;", "if    (  ( namVal )     !  =    null    ?     !  ( namVal . equals ( childPrimaryKeyJoinEntity . namVal )  )     :     ( childPrimaryKeyJoinEntity . namVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinEntity"}, {"methodBody": ["METHOD_START", "{", "return   namVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( namVal )     !  =    null    ?    namVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinEntity"}, {"methodBody": ["METHOD_START", "{", "this . namVal    =    namVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" CPKJE ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    namVal    =     \"  )     +     ( namVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.primarykeyjoin.ChildPrimaryKeyJoinEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Person   lukasz    =    new   Person (  )  ;", "lukasz . setName (  \" Lukasz \"  )  ;", "lukasz . setGroup (  \" IT \"  )  ;", "em . persist ( lukasz )  ;", "Role   admin    =    new   Role (  )  ;", "admin . setName (  \" Admin \"  )  ;", "admin . setGroup (  \" Confidential \"  )  ;", "lukasz . getRoles (  )  . add ( admin )  ;", "admin . getMembers (  )  . add ( lukasz )  ;", "em . persist ( admin )  ;", "em . getTransac (  )  . commit (  )  ;", "expLukaszRev 1     =    new   Person ( lukasz . getId (  )  ,     \" IT \"  ,     \" Lukasz \"  )  ;", "expAdminRev 1     =    new   Role ( admin . getId (  )  ,     \" Confidential \"  ,     \" Admin \"  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentReferencingChildTest"}, {"methodBody": ["METHOD_START", "{", "Role   adminRev 1     =    getAuditReader (  )  . find ( Role . class ,    expAdminRev 1  . getId (  )  ,     1  )  ;", "Assert . assertEquals ( expAdminRev 1  ,    adminRev 1  )  ;", "Assert . assertEquals ( Tools . makeSet ( expLukaszRev 1  )  ,    adminRev 1  . getMembers (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAdmin"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentReferencingChildTest"}, {"methodBody": ["METHOD_START", "{", "Person   lukaszRev 1     =    getAuditReader (  )  . find ( Person . class ,    expLukaszRev 1  . getId (  )  ,     1  )  ;", "RightsSubject   rightsSubjectLukaszRev 1     =    getAuditReader (  )  . find ( RightsSubject . class ,    expLukaszRev 1  . getId (  )  ,     1  )  ;", "Assert . assertEquals ( expLukaszRev 1  ,    lukaszRev 1  )  ;", "Assert . assertEquals ( Tools . makeSet ( expAdminRev 1  )  ,    lukaszRev 1  . getRoles (  )  )  ;", "Assert . assertEquals ( Tools . makeSet ( expAdminRev 1  )  ,    rightsSubjectLukaszRev 1  . getRoles (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfLukasz"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentReferencingChildTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( Person . class ,    expLukaszRev 1  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( RightsSubject . class ,    expLukaszRev 1  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( Role . class ,    expAdminRev 1  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( RightsSubject . class ,    expAdminRev 1  . getId (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ParentReferencingChildTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "person    =     (  (  )     ( o )  )  ;", "if    (  ( name )     !  =    null    ?     !  ( name . equals ( person . name )  )     :     ( person . name )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Person"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ed _ id 1     =     1  ;", "p _ id    =     1  0  ;", "c _ id    =     1  0  0  ;", "em . getTransa (  )  . begin (  )  ;", "ReferencedEntity   re    =    new   ReferencedEntity ( ed _ id 1  )  ;", "em . persist ( re )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ParentIngEntity   pie    =    new   ParentIngEntity ( p _ id ,     \" x \"  )  ;", "pie . setReferenced ( re )  ;", "em . persist ( pie )  ;", "p _ id    =    pie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  ;", "cie . setReferenced ( re )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  ,    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentIngEntity . class ,    p _ id )  )  ;", "assert   Arrays . asList (  3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ReferencedEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "return   roles ;", "}", "METHOD_END"], "methodName": ["getRoles"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "this . group    =    group ;", "}", "METHOD_END"], "methodName": ["setGroup"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "this . roles    =    roles ;", "}", "METHOD_END"], "methodName": ["setRoles"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.RightsSubject"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   insof   Role )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "Role   role    =     (  ( Role )     ( o )  )  ;", "if    (  ( name )     !  =    null    ?     !  ( name . equals ( role . name )  )     :     ( role . name )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Role"}, {"methodBody": ["METHOD_START", "{", "return   members ;", "}", "METHOD_END"], "methodName": ["getMembers"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Role"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Role"}, {"methodBody": ["METHOD_START", "{", "this . members    =    members ;", "}", "METHOD_END"], "methodName": ["setMembers"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Role"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.Role"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractContainedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractContainedEntity"}, {"methodBody": ["METHOD_START", "{", "return   entities ;", "}", "METHOD_END"], "methodName": ["getEntities"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractSetEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . entities    =    entities ;", "}", "METHOD_END"], "methodName": ["setEntities"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractSetEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.AbstractSetEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ContainedEntity   cce 1     =    new   ContainedEntity (  )  ;", "em . persist ( cce 1  )  ;", "SetEntity   cse 1     =    new   SetEntity (  )  ;", "cse 1  . getEntities (  )  . add ( cce 1  )  ;", "em . persist ( cse 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "cce 1  _ id    =    cce 1  . getId (  )  ;", "cse 1  _ id    =    cse 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.UnidirectionalDoubleAbstract"}, {"methodBody": ["METHOD_START", "{", "ContainedEntity   cce 1     =    getEntityManager (  )  . find ( ContainedEntity . class ,    cce 1  _ id )  ;", "Set < ContainedEntity >    entities    =    getAuditReader (  )  . find ( SetEntity . class ,    cse 1  _ id ,     1  )  . getEntities (  )  ;", "assert    ( entities . size (  )  )     =  =     1  ;", "assert    ( entities . iterator (  )  . next (  )  )    instanceof   ContainedEntity ;", "assert   entities . contains ( cce 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.UnidirectionalDoubleAbstract"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( ContainedEntity . class ,    cce 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( SetEntity . class ,    cse 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.joined.relation.unidirectional.UnidirectionalDoubleAbstract"}, {"methodBody": ["METHOD_START", "{", "CheckInActivity   checkInActivity    =    getAuditReader (  )  . find ( CheckInActivity . class ,    id 2  ,     2  )  ;", "NormalActivity   normalActivity    =    getAuditReader (  )  . find ( NormalActivity . class ,    id 1  ,     2  )  ;", "Assert . assertEquals ( id 2  ,    checkInActivity . getId (  )  )  ;", "Assert . assertEquals (  0  ,    checkInActivity . getSequenceNumber (  )  . intValue (  )  )  ;", "Assert . assertEquals (  3  0  ,    checkInActivity . getDuInMinutes (  )  . intValue (  )  )  ;", "Activity   relatedActivity    =    checkInActivity . getRelatedActivity (  )  ;", "Assert . assertEquals ( normalActivity . getId (  )  ,    relatedActivity . getId (  )  )  ;", "Assert . assertEquals ( normalActivity . getSequenceNumber (  )  ,    relatedActivity . getSequenceNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestFirstRevisionOfCheckInActivity"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "CheckInActivity   checkInActivity    =    getAuditReader (  )  . find ( CheckInActivity . class ,    id 2  ,     4  )  ;", "NormalActivity   normalActivity    =    getAuditReader (  )  . find ( NormalActivity . class ,    id 3  ,     4  )  ;", "Assert . assertEquals ( id 2  ,    checkInActivity . getId (  )  )  ;", "Assert . assertEquals (  0  ,    checkInActivity . getSequenceNumber (  )  . intValue (  )  )  ;", "Assert . assertEquals (  3  0  ,    checkInActivity . getDuInMinutes (  )  . intValue (  )  )  ;", "Activity   relatedActivity    =    checkInActivity . getRelatedActivity (  )  ;", "Assert . assertEquals ( normalActivity . getId (  )  ,    relatedActivity . getId (  )  )  ;", "Assert . assertEquals ( normalActivity . getSequenceNumber (  )  ,    relatedActivity . getSequenceNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["doTestSecondRevisionOfCheckInActivity"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "NormalActivity   normalActivity    =    new   NormalActivity (  )  ;", "id 1     =    new   ActivityId (  1  ,     2  )  ;", "normalActivity . setId ( id 1  )  ;", "normalActivity . setSequenceNumber (  1  )  ;", "getManager (  )  . getTransaction (  )  . begin (  )  ;", "getManager (  )  . persist ( normalActivity )  ;", "getManager (  )  . getTransaction (  )  . commit (  )  ;", "getManager (  )  . getTransaction (  )  . begin (  )  ;", "normalActivity    =    getManager (  )  . find ( NormalActivity . class ,    id 1  )  ;", "CheckInActivity   checkInActivity    =    new   CheckInActivity (  )  ;", "id 2     =    new   ActivityId (  2  ,     3  )  ;", "checkInActivity . setId ( id 2  )  ;", "checkInActivity . setSequenceNumber (  0  )  ;", "checkInActivity . setDurationInMinutes (  3  0  )  ;", "checkInActivity . setRelatedActivity ( normalActivity )  ;", "getManager (  )  . persist ( checkInActivity )  ;", "getManager (  )  . getTransaction (  )  . commit (  )  ;", "normalActivity    =    new   NormalActivity (  )  ;", "id 3     =    new   ActivityId (  3  ,     4  )  ;", "normalActivity . setId ( id 3  )  ;", "normalActivity . setSequenceNumber (  2  )  ;", "getManager (  )  . getTransaction (  )  . begin (  )  ;", "getManager (  )  . persist ( normalActivity )  ;", "getManager (  )  . getTransaction (  )  . commit (  )  ;", "getManager (  )  . getTransaction (  )  . begin (  )  ;", "normalActivity    =    getManager (  )  . find ( NormalActivity . class ,    id 3  )  ;", "checkInActivity    =    getManager (  )  . find ( CheckInActivity . class ,    id 2  )  ;", "checkInActivity . setRelatedActivity ( normalActivity )  ;", "getManager (  )  . merge ( checkInActivity )  ;", "getManager (  )  . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "final   NormalActivity   normalActivity 1     =    getEntityManager (  )  . find ( NormalActivity . class ,    id 1  )  ;", "final   NormalActivity   normalActivity 2     =    getEntityManager (  )  . find ( NormalActivity . class ,    id 3  )  ;", "Assert . assertEquals ( id 1  ,    normalActivity 1  . getId (  )  )  ;", "Assert . assertEquals (  1  ,    normalActivity 1  . getSequenceNumber (  )  . intValue (  )  )  ;", "Assert . assertEquals ( id 3  ,    normalActivity 2  . getId (  )  )  ;", "Assert . assertEquals (  2  ,    normalActivity 2  . getSequenceNumber (  )  . intValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCheckCurrentStateOfNormalActivities"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "final   CheckInActivity   checkInActivity    =    getEntityManager (  )  . find ( CheckInActivity . class ,    id 2  )  ;", "final   NormalActivity   normalActivity    =    getEntityManager (  )  . find ( NormalActivity . class ,    id 3  )  ;", "Assert . assertEquals ( id 2  ,    checkInActivity . getId (  )  )  ;", "Assert . assertEquals (  0  ,    checkInActivity . getSequenceNumber (  )  . intValue (  )  )  ;", "Assert . assertEquals (  3  0  ,    checkInActivity . getDurationInMinutes (  )  . intValue (  )  )  ;", "final   Activity   relatedActivity    =    checkInActivity . getRelatedActivity (  )  ;", "Assert . assertEquals ( normalActivity . getId (  )  ,    relatedActivity . getId (  )  )  ;", "Assert . assertEquals ( normalActivity . getSequenceNumber (  )  ,    relatedActivity . getSequenceNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCurrentStateOfCheckInActivity"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( NormalActivity . class ,    id 1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  )  ,    getAuditReader (  )  . getRevisions ( NormalActivity . class ,    id 3  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( CheckInActivity . class ,    id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.MixedInheritanceStrategiesEntityTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractActivity"}, {"methodBody": ["METHOD_START", "{", "return   sequenceNumber ;", "}", "METHOD_END"], "methodName": ["getSequenceNumber"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractActivity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractActivity"}, {"methodBody": ["METHOD_START", "{", "this . sequenceNumber    =    sequenceNumber ;", "}", "METHOD_END"], "methodName": ["setSequenceNumber"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractActivity"}, {"methodBody": ["METHOD_START", "{", "return   durationInMinutes ;", "}", "METHOD_END"], "methodName": ["getDurationInMinutes"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractCheckActivity"}, {"methodBody": ["METHOD_START", "{", "return   relatedActivity ;", "}", "METHOD_END"], "methodName": ["getRelatedActivity"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractCheckActivity"}, {"methodBody": ["METHOD_START", "{", "this . durationInMinutes    =    durationInMinutes ;", "}", "METHOD_END"], "methodName": ["setDurationInMinutes"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractCheckActivity"}, {"methodBody": ["METHOD_START", "{", "this . relatedActivity    =    relatedActivity ;", "}", "METHOD_END"], "methodName": ["setRelatedActivity"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.AbstractCheckActivity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.ActivityId"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.ActivityId"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.ActivityId"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.inheritance.mixed.entities.ActivityId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity (  \" x \"  ,     1 L )  ;", "em . persist ( ce )  ;", "id 1     =    ce . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData (  \" y \"  )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   ver 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "ChildEntity   ver 2     =    new   ChildEntity ( id 1  ,     \" y \"  ,     2 L )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   childVer 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ChildEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildPrimaryKeyJoinEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   pe    =    new   Entity (  \" x \"  )  ;", "em . persist ( pe )  ;", "id 1     =    pe . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pe    =    em . find ( Entity . class ,    id 1  )  ;", "pe . setData (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   ver 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "ParentEntity   ver 2     =    new   ParentEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParentId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   parentVer 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( parentVer 1  )  ;", "assert    ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getResultList (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "edEntity   re 1     =    new   edEntity (  )  ;", "em . persist ( re 1  )  ;", "re _ id 1     =    re 1  . getId (  )  ;", "edEntity   re 2     =    new   edEntity (  )  ;", "em . persist ( re 2  )  ;", "re _ id 2     =    re 2  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 1     =    em . find ( edEntity . class ,    re _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity (  \" y \"  ,     1 L )  ;", "cie . seted ( re 1  )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 2     =    em . find ( edEntity . class ,    re _ id 2  )  ;", "cie    =    em . find ( ChildIngEntity . class ,    c _ id )  ;", "cie . seted ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     2  )  . geted (  )  . equals ( new   edEntity ( re _ id 1  )  )  ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     3  )  . geted (  )  . equals ( new   edEntity ( re _ id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testChildHistory"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     3  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     2  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection2"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 2  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentNotIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( specificData )     !  =    null    ?     !  ( specificData . equals ( that . specificData )  )     :     ( that . specificData )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   specificData ;", "}", "METHOD_END"], "methodName": ["getSpecificData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( specificData )     !  =    null    ?    specificData . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . specificData    =    specificData ;", "}", "METHOD_END"], "methodName": ["setSpecificData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  (  (  \" ChildEntity ( id    =     \"     +     ( id )  )     +     \"  ,    typeId    =     \"  )     +     ( typeId )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  ,    specificData    =     \"  )     +     ( specificData )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( type )     !  =    null    ?     !  ( type . equals ( that . type )  )     :     ( that . type )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( type )     !  =    null    ?    type . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ClassTypeEntity ( id    =     \"     +     ( id )  )     +     \"  ,    type    =     \"  )     +     ( type )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ClassTypeEntity"}, {"methodBody": ["METHOD_START", "{", "parentAudit    =    metadata (  )  . getEntityBinding (  \" ParentEntity _ AUD \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ClassTypeEntity   childType    =    new   ClassTypeEntity (  )  ;", "childType . setType ( ClassTypeEntity . CHILD _ TYPE )  ;", "em . persist ( childType )  ;", "Long   childTypeId    =    childType . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ClassTypeEntity   parentType    =    new   ClassTypeEntity (  )  ;", "parentType . setType ( ClassTypeEntity . PARENT _ TYPE )  ;", "em . persist ( parentType )  ;", "Long   parentTypeId    =    parentType . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ChildEntity   child    =    new   ChildEntity ( childTypeId ,     \" Child   data \"  ,     \" Child   specific   data \"  )  ;", "em . persist ( child )  ;", "Long   childId    =    child . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ParentEntity   parent    =    new   ParentEntity ( parentTypeId ,     \" Parent   data \"  )  ;", "em . persist ( parent )  ;", "Long   parentId    =    parent . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "child    =    em . find ( ChildEntity . class ,    childId )  ;", "child . setData (  \" Child   data   modified \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "parent    =    em . find ( ParentEntity . class ,    parentId )  ;", "parent . setData (  \" Parent   data   modified \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "childVer 1     =    new   ChildEntity ( childId ,    childTypeId ,     \" Child   data \"  ,     \" Child   specific   data \"  )  ;", "childVer 2     =    new   ChildEntity ( childId ,    childTypeId ,     \" Child   data   modified \"  ,     \" Child   specific   data \"  )  ;", "parentVer 1     =    new   ParentEntity ( parentId ,    parentTypeId ,     \" Parent   data \"  )  ;", "parentVer 2     =    new   ParentEntity ( parentId ,    parentTypeId ,     \" Parent   data   modified \"  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "assert   parentAudit . getDiscriminator (  )  . hasFormula (  )  ;", "Iterator   iterator    =    parentAudit . getDiscriminator (  )  . getColumnIterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "Object   o    =    iterator . next (  )  ;", "if    ( o   instanceof   Formula )     {", "Formula   formula    =     (  ( Formula )     ( o )  )  ;", "Assert . assertEquals ( ParentEntity . DISCRIMINATOR _ QUERY ,    formula . getText (  )  )  ;", "return ;", "}", "}", "assert   false ;", "}", "METHOD_END"], "methodName": ["testDiscriminatorFormulaInAuditTable"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( childVer 1  ,    getAuditReader (  )  . find ( ChildEntity . class ,    childVer 1  . getId (  )  ,     1  )  )  ;", "Assert . assertEquals ( childVer 2  ,    getAuditReader (  )  . find ( ChildEntity . class ,    childVer 2  . getId (  )  ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( parentVer 1  ,    getAuditReader (  )  . find ( ParentEntity . class ,    parentVer 1  . getId (  )  ,     2  )  )  ;", "Assert . assertEquals ( parentVer 2  ,    getAuditReader (  )  . find ( ParentEntity . class ,    parentVer 2  . getId (  )  ,     4  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( childVer 1  ,    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getSingleResult (  )  )  ;", "Assert . assertEquals ( childVer 1  ,    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  )  ;", "List   childEntityRevisions    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( ChildEntity . class ,    true ,    false )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList ( childVer 1  ,    childVer 2  )  ,    childEntityRevisions )  ;", "List   parentEntityRevisions    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( ParentEntity . class ,    true ,    false )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList ( childVer 1  ,    parentVer 1  ,    childVer 2  ,    parentVer 2  )  ,    parentEntityRevisions )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ChildEntity . class ,    childVer 1  . getId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ParentEntity . class ,    parentVer 1  . getId (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.DiscriminatorFormulaTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( typeId )     !  =    null    ?     !  ( typeId . equals ( that . typeId )  )     :     ( that . typeId )     !  =    null )     {", "return   false ;", "}", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   typeId ;", "}", "METHOD_END"], "methodName": ["getTypeId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( typeId )     !  =    null    ?    typeId . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . typeId    =    typeId ;", "}", "METHOD_END"], "methodName": ["setTypeId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ParentEntity ( id    =     \"     +     ( id )  )     +     \"  ,    typeId    =     \"  )     +     ( typeId )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.discriminatorformula.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "address    =     (  (  )     ( o )  )  ;", "if    (  ( address 1  )     !  =    null    ?     !  ( address 1  . equals ( address . address 1  )  )     :     ( address . address 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( address . id )  )     :     ( address . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   address 1  ;", "}", "METHOD_END"], "methodName": ["getAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   contact ;", "}", "METHOD_END"], "methodName": ["getContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( a 1  )     !  =    null    ?    a 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . address 1     =    address 1  ;", "}", "METHOD_END"], "methodName": ["setAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . contact    =    contact ;", "}", "METHOD_END"], "methodName": ["setContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   addresses ;", "}", "METHOD_END"], "methodName": ["getAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   email ;", "}", "METHOD_END"], "methodName": ["getEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . addresses    =    addresses ;", "}", "METHOD_END"], "methodName": ["setAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . email    =    email ;", "}", "METHOD_END"], "methodName": ["setEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "PersonalContact   pc    =    new   PersonalContact (  )  ;", "pc . setEmail (  \" e \"  )  ;", "pc . setFirstname (  \" f \"  )  ;", "Address   a 1     =    new   Address (  )  ;", "a 1  . setAddress 1  (  \" a 1  \"  )  ;", "a 1  . setContact ( pc )  ;", "em . persist ( pc )  ;", "em . persist ( a 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "pc    =    em . find ( PersonalContact . class ,    pc . getId (  )  )  ;", "Address   a 2     =    new   Address (  )  ;", "a 2  . setAddress 1  (  \" a 2  \"  )  ;", "a 2  . setContact ( pc )  ;", "em . persist ( a 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "pc _ id    =    pc . getId (  )  ;", "a 1  _ id    =    a 1  . getId (  )  ;", "a 2  _ id    =    a 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPersonalContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( Contact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( PersContact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "return   firstname ;", "}", "METHOD_END"], "methodName": ["getFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "this . firstname    =    firstname ;", "}", "METHOD_END"], "methodName": ["setFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ReferencedEntity   re    =    new   ReferencedEntity (  )  ;", "em . persist ( re )  ;", "ed _ id 1     =    re . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ParentIngEntity   pie    =    new   ParentIngEntity (  \" x \"  )  ;", "pie . setReferenced ( re )  ;", "em . persist ( pie )  ;", "p _ id    =    pie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity (  \" y \"  ,     1 L )  ;", "cie . setReferenced ( re )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  ,    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentIngEntity . class ,    p _ id )  )  ;", "assert   Arrays . asList (  3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "this . typeId    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "SalaryEmployeeType   type    =    new   SalaryEmployeeType (  )  ;", "type . setData (  \" salaried \"  )  ;", "entityManager . persist ( type )  ;", "return   type . getId (  )  ;", "}  )  ;", "this . employeeId    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "EmployeeType   type    =    entityManager . find (  . class ,    typeId )  ;", "Employee   employee    =    new   Employee (  )  ;", "employee . setType ( type )  ;", "entityManager . persist ( employee )  ;", "return   employee . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Employee   employee    =    entityManager . find (  . class ,    employeeId )  ;", "entityManager . remove ( employee )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicRemovalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( PolymorphicRemovalTest . EmployeeType . class ,    typeId )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( PolymorphicRemovalTest . Employee . class ,    employeeId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicRemovalTest"}, {"methodBody": ["METHOD_START", "{", "final   PolymorphicRemovalTest . EmployeeType   rev 1     =    getAuditReader (  )  . find ( PolymorphicRemovalTest . EmployeeType . class ,    typeId ,     1  )  ;", "assertTyping ( PolymorphicRemovalTest . SalaryEmployeeType . class ,    rev 1  )  ;", "Assert . assertEquals (  \" SALARY \"  ,    rev 1  . getType (  )  )  ;", "final   PolymorphicRemovalTest . EmployeeType   rev 2     =    getAuditReader (  )  . find ( PolymorphicRemovalTest . EmployeeType . class ,    typeId ,     2  )  ;", "assertTyping ( PolymorphicRemovalTest . SalaryEmployeeType . class ,    rev 2  )  ;", "Assert . assertEquals (  \" SALARY \"  ,    rev 2  . getType (  )  )  ;", "final   PolymorphicRemovalTest . EmployeeType   rev 3     =    getAuditReader (  )  . find ( PolymorphicRemovalTest . EmployeeType . class ,    typeId ,     3  )  ;", "assertTyping ( PolymorphicRemovalTest . SalaryEmployeeType . class ,    rev 3  )  ;", "Assert . assertEquals (  \" SALARY \"  ,    rev 3  . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryPayment"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.PolymorphicRemovalTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.single.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity ( id 1  ,     \" x \"  ,     1 L )  ;", "em . persist ( ce )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData (  \" y \"  )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   ver 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "ChildEntity   ver 2     =    new   ChildEntity ( id 1  ,     \" y \"  ,     2 L )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "ChildEntity   childVer 1     =    new   ChildEntity ( id 1  ,     \" x \"  ,     1 L )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( childVer 1  )  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ChildEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildPrimaryKeyJoinEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ChildEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   pe    =    new   Entity ( id 1  ,     \" x \"  )  ;", "em . persist ( pe )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pe    =    em . find ( Entity . class ,    id 1  )  ;", "pe . setData (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     1  )  )     =  =    null ;", "assert    ( getAuditReader (  )  . find ( ChildEntity . class ,    id 1  ,     2  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChildId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   ver 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "ParentEntity   ver 2     =    new   ParentEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ParentEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParentId1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   parentVer 1     =    new   ParentEntity ( id 1  ,     \" x \"  )  ;", "assert   getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ParentEntity . class ,     1  )  . getSingleResult (  )  . equals ( parentVer 1  )  ;", "assert    ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( ChildEntity . class ,     1  )  . getResultList (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testPolymorphicQuery"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentAuditing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.ParentEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "EffectiveEntity 1    entity    =    new   EffectiveEntity 1  (  1 L ,     \" commonField \"  ,     \" specificField 1  \"  )  ;", "em . persist ( entity )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.abstractparent.AuditedAbstractParentTest"}, {"methodBody": ["METHOD_START", "{", "for    ( Table   table    :    metadata (  )  . collectTableMappings (  )  )     {", "if    (  \" Entity _ AUD \"  . equals ( table . getName (  )  )  )     {", "Assert . assertFalse ( table . isPhysicalTable (  )  )  ;", "return ;", "}", "}", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["testAbstractTableExistence"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.abstractparent.AuditedAbstractParentTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "re _ id 1     =     1  ;", "re _ id 2     =     1  0  ;", "c _ id    =     1  0  0  ;", "em . getTransaction (  )  . begin (  )  ;", "edEntity   re 1     =    new   edEntity ( re _ id 1  )  ;", "em . persist ( re 1  )  ;", "edEntity   re 2     =    new   edEntity ( re _ id 2  )  ;", "em . persist ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 1     =    em . find ( edEntity . class ,    re _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  ;", "cie . seted ( re 1  )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 2     =    em . find ( edEntity . class ,    re _ id 2  )  ;", "cie    =    em . find ( ChildIngEntity . class ,    c _ id )  ;", "cie . seted ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     1  )  )     =  =    null ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     2  )  . geted (  )  . equals ( new   edEntity ( re _ id 1  )  )  ;", "assert   getAuditReader (  )  . find ( ChildIngEntity . class ,    c _ id ,     3  )  . geted (  )  . equals ( new   edEntity ( re _ id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testChildHistory"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 1  ,     3  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     2  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    re _ id 2  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection2"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    re _ id 2  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ChildReferencing"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentNotIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ParentNotIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ReferencedEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.childrelation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "address    =     (  (  )     ( o )  )  ;", "if    (  ( address 1  )     !  =    null    ?     !  ( address 1  . equals ( address . address 1  )  )     :     ( address . address 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( address . id )  )     :     ( address . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   address 1  ;", "}", "METHOD_END"], "methodName": ["getAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   contact ;", "}", "METHOD_END"], "methodName": ["getContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( a 1  )     !  =    null    ?    a 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . address 1     =    address 1  ;", "}", "METHOD_END"], "methodName": ["setAddress1"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . contact    =    contact ;", "}", "METHOD_END"], "methodName": ["setContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Address ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    address 1     =     \"  )     +     ( getAddress 1  (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Address"}, {"methodBody": ["METHOD_START", "{", "return   addresses ;", "}", "METHOD_END"], "methodName": ["getAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   email ;", "}", "METHOD_END"], "methodName": ["getEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . addresses    =    addresses ;", "}", "METHOD_END"], "methodName": ["setAddresses"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . email    =    email ;", "}", "METHOD_END"], "methodName": ["setEmail"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.Contact"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "pc _ id    =     1 L ;", "a 1  _ id    =     1  0 L ;", "a 2  _ id    =     1  0  0 L ;", "em . getTransa (  )  . begin (  )  ;", "PersonalContact   pc    =    new   PersonalContact ( pc _ id ,     \" e \"  ,     \" f \"  )  ;", "Address   a 1     =    new   Address ( a 1  _ id ,     \" a 1  \"  )  ;", "a 1  . setContact ( pc )  ;", "em . persist ( pc )  ;", "em . persist ( a 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "pc    =    em . find ( PersonalContact . class ,    pc _ id )  ;", "Address   a 2     =    new   Address ( a 2  _ id ,     \" a 2  \"  )  ;", "a 2  . setContact ( pc )  ;", "em . persist ( a 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( Contact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     1  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( PersonalContact . class ,    pc _ id ,     2  )  . getAddresses (  )  . equals ( TestTools . makeSet ( new   Address ( a 1  _ id ,     \" a 1  \"  )  ,    new   Address ( a 2  _ id ,     \" a 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPersonalContact"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( Contact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( PersonalContact . class ,    pc _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 1  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( Address . class ,    a 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.NotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "return   firstname ;", "}", "METHOD_END"], "methodName": ["getFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "this . firstname    =    firstname ;", "}", "METHOD_END"], "methodName": ["setFirstname"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.notownedrelation.PersonalContact"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "childEntity    =     (  (  )     ( o )  )  ;", "if    (  ( numVal )     !  =    null    ?     !  ( numVal . equals ( childEntity . numVal )  )     :     ( childEntity . numVal )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   numVal ;", "}", "METHOD_END"], "methodName": ["getNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( numVal )     !  =    null    ?    numVal . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . numVal    =    numVal ;", "}", "METHOD_END"], "methodName": ["setNumVal"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" ChildIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  ,    numVal    =     \"  )     +     ( numVal )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ChildIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   referenced ;", "}", "METHOD_END"], "methodName": ["getReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . referenced    =    referenced ;", "}", "METHOD_END"], "methodName": ["setReferenced"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ParentIngEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  ,    data    =     \"  )     +     ( getData (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ParentIngEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ed _ id 1     =     1  ;", "p _ id    =     1  0  ;", "c _ id    =     1  0  0  ;", "em . getTransa (  )  . begin (  )  ;", "ReferencedEntity   re    =    new   ReferencedEntity ( ed _ id 1  )  ;", "em . persist ( re )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ParentIngEntity   pie    =    new   ParentIngEntity ( p _ id ,     \" x \"  )  ;", "pie . setReferenced ( re )  ;", "em . persist ( pie )  ;", "p _ id    =    pie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "re    =    em . find ( ReferencedEntity . class ,    ed _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  ;", "cie . setReferenced ( re )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     1  )  . getReferencing (  )  . size (  )  )     =  =     0  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     2  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  )  )  ;", "assert   getAuditReader (  )  . find ( ReferencedEntity . class ,    ed _ id 1  ,     3  )  . getReferencing (  )  . equals ( TestTools . makeSet ( new   ParentIngEntity ( p _ id ,     \" x \"  )  ,    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfReferencedCollection"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ReferencedEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( ParentIngEntity . class ,    p _ id )  )  ;", "assert   Arrays . asList (  3  )  . equals ( getAuditReader (  )  . getRevisions ( ChildIngEntity . class ,    c _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.PolymorphicCollection"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  \" ReferencedEntity ( id    =     \"     +     ( getId (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.inheritance.tableperclass.relation.ReferencedEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.Component1"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.Component1"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.ComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   cte 1     =    new   TestEntity ( new    1  (  \" a \"  )  )  ;", "em . persist ( cte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 1  . setComp 1  ( new    1  (  \" b \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 1  . getComp 1  (  )  . setData (  \" c \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.InterfacesComponents"}, {"methodBody": ["METHOD_START", "{", "ComponentTestEntity   ver 1     =    new   ComponentTestEntity ( id 1  ,    new   Component 1  (  \" a \"  )  )  ;", "ComponentTestEntity   ver 2     =    new   ComponentTestEntity ( id 1  ,    new   Component 1  (  \" b \"  )  )  ;", "ComponentTestEntity   ver 3     =    new   ComponentTestEntity ( id 1  ,    new   Component 1  (  \" c \"  )  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( ComponentTestEntity . class ,    id 1  ,     3  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.InterfacesComponents"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ComponentTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.interfaces.components.InterfacesComponents"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Implementor   ai    =    new   Implementor (  )  ;", "ai . setData (  \" La   data \"  )  ;", "ai . setImplementorData (  \" audited   implementor   data \"  )  ;", "NonImplementor   nai    =    new   NonImplementor (  )  ;", "nai . setData (  \" info \"  )  ;", "nai . setNonImplementorData (  \" sttring \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ai )  ;", "em . persist ( nai )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ai    =    em . find ( Implementor . class ,    ai . getId (  )  )  ;", "nai    =    em . find ( NonImplementor . class ,    nai . getId (  )  )  ;", "ai . setData (  \" La   data    2  \"  )  ;", "ai . setImplementorData (  \" audited   implementor   data    2  \"  )  ;", "nai . setData (  \" info    2  \"  )  ;", "nai . setNonImplementorData (  \" sttring    2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ai _ id    =    ai . getId (  )  ;", "nai _ id    =    nai . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AbstractAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedImplementor   ai    =    getEntityManager (  )  . find ( AuditedImplementor . class ,    ai _ id )  ;", "assert   ai    !  =    null ;", "SimpleI   si    =    getEntityManager (  )  . find ( SimpleI . class ,    ai _ id )  ;", "assert   si    !  =    null ;", "AuditedImplementor   ai _ rev 1     =    getAuditReader (  )  . find ( AuditedImplementor . class ,    ai _ id ,     1  )  ;", "assert   ai _ rev 1     !  =    null ;", "SimpleI   si _ rev 1     =    getAuditReader (  )  . find ( SimpleI . class ,    ai _ id ,     1  )  ;", "assert   si _ rev 1     !  =    null ;", "AuditedImplementor   ai _ rev 2     =    getAuditReader (  )  . find ( AuditedImplementor . class ,    ai _ id ,     2  )  ;", "assert   ai _ rev 2     !  =    null ;", "SimpleI   si _ rev 2     =    getAuditReader (  )  . find ( SimpleI . class ,    ai _ id ,     2  )  ;", "assert   si _ rev 2     !  =    null ;", "Assert . assertEquals ( ai . getData (  )  ,     \" La   data    2  \"  )  ;", "Assert . assertEquals ( si . getData (  )  ,     \" La   data    2  \"  )  ;", "Assert . assertEquals ( ai _ rev 1  . getData (  )  ,     \" La   data \"  )  ;", "Assert . assertEquals ( si _ rev 1  . getData (  )  ,     \" La   data \"  )  ;", "Assert . assertEquals ( ai _ rev 2  . getData (  )  ,     \" La   data    2  \"  )  ;", "Assert . assertEquals ( si _ rev 2  . getData (  )  ,     \" La   data    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRetrieveAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AbstractAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "NonAuditedImplementor   nai    =    getEntityManager (  )  . find ( NonAuditedImplementor . class ,    nai _ id )  ;", "assert   nai    !  =    null ;", "SimpleI   si    =    getEntityManager (  )  . find ( SimpleI . class ,    nai _ id )  ;", "assert   si    !  =    null ;", "assert   si . getData (  )  . equals ( nai . getData (  )  )  ;", "try    {", "getAuditReader (  )  . find ( NonAuditedImplementor . class ,    nai _ id ,     1  )  ;", "assert   false ;", "}    catch    ( Exception   e )     {", "assert   e   instanceof   NotAuditedException ;", "}", "SimpleI   si _ rev 1     =    getAuditReader (  )  . find ( SimpleI . class ,    nai _ id ,     1  )  ;", "assert   si _ rev 1     =  =    null ;", "}", "METHOD_END"], "methodName": ["testRetrieveNonAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AbstractAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( getAuditReader (  )  . getRevisions ( AuditedImplementor . class ,    ai _ id )  ,    Arrays . asList (  1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisions"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AbstractAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "return   auditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . auditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   nonAuditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . nonAuditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.allAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "AuditedImplementor   ai    =    new   AuditedImplementor (  )  ;", "ai . setData (  \" La   data \"  )  ;", "ai . setAuditedImplementorData (  \" audited   implementor   data \"  )  ;", "ai . setNumerito (  . NUMERITO )  ;", "NonAuditedImplementor   nai    =    new   NonAuditedImplementor (  )  ;", "nai . setData (  \" info \"  )  ;", "nai . setNonAuditedImplementorData (  \" sttring \"  )  ;", "nai . setNumerito (  . NUMERITO )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ai )  ;", "em . persist ( nai )  ;", "em . getTransaction (  )  . commit (  )  ;", "ai _ id    =    ai . getId (  )  ;", "nai _ id    =    nai . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AbstractPropertiesAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedImplementor   ai    =    getEntityManager (  )  . find ( AuditedImplementor . class ,    ai _ id )  ;", "assert   ai    !  =    null ;", "SimpleInterface   si    =    getEntityManager (  )  . find ( SimpleInterface . class ,    ai _ id )  ;", "assert   si    !  =    null ;", "AuditedImplementor   ai _ rev 1     =    getAuditReader (  )  . find ( AuditedImplementor . class ,    ai _ id ,     1  )  ;", "assert   ai _ rev 1     !  =    null ;", "SimpleInterface   si _ rev 1     =    getAuditReader (  )  . find ( SimpleInterface . class ,    ai _ id ,     1  )  ;", "assert   si _ rev 1     !  =    null ;", "assert    ( ai . getData (  )  )     !  =    null ;", "assert    ( si . getData (  )  )     !  =    null ;", "assert    ( ai _ rev 1  . getData (  )  )     =  =    null ;", "assert    ( si _ rev 1  . getData (  )  )     =  =    null ;", "assert    ( ai _ rev 1  . getNumerito (  )  )     =  =     (  . NUMERITO )  ;", "assert    ( si _ rev 1  . getNumerito (  )  )     =  =     (  . NUMERITO )  ;", "}", "METHOD_END"], "methodName": ["testRetrieveAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AbstractPropertiesAuditedTest"}, {"methodBody": ["METHOD_START", "{", "NonAuditedImplementor   nai    =    getEntityManager (  )  . find ( NonAuditedImplementor . class ,    nai _ id )  ;", "assert   nai    !  =    null ;", "SimpleI   si    =    getEntityManager (  )  . find ( SimpleI . class ,    nai _ id )  ;", "assert   si    !  =    null ;", "assert   si . getData (  )  . equals ( nai . getData (  )  )  ;", "try    {", "getAuditReader (  )  . find ( NonAuditedImplementor . class ,    nai _ id ,     1  )  ;", "assert   false ;", "}    catch    ( Exception   e )     {", "assert   e   instanceof   NotAuditedException ;", "}", "SimpleI   si _ rev 1     =    getAuditReader (  )  . find ( SimpleI . class ,    nai _ id ,     1  )  ;", "assert   si _ rev 1     =  =    null ;", "}", "METHOD_END"], "methodName": ["testRetrieveNonAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AbstractPropertiesAuditedTest"}, {"methodBody": ["METHOD_START", "{", "return   auditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   numerito ;", "}", "METHOD_END"], "methodName": ["getNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . auditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . numerito    =    numerito ;", "}", "METHOD_END"], "methodName": ["setNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   nonAuditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   numerito ;", "}", "METHOD_END"], "methodName": ["getNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . nonAuditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . numerito    =    numerito ;", "}", "METHOD_END"], "methodName": ["setNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "AuditedImplementor   ai    =    new   AuditedImplementor (  )  ;", "ai . setData (  \" La   data \"  )  ;", "ai . setAuditedImplementorData (  \" audited   implementor   data \"  )  ;", "ai . setNumerito (  . NUMERITO )  ;", "NonAuditedImplementor   nai    =    new   NonAuditedImplementor (  )  ;", "nai . setData (  \" info \"  )  ;", "nai . setNonAuditedImplementorData (  \" sttring \"  )  ;", "nai . setNumerito (  . NUMERITO )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ai )  ;", "em . persist ( nai )  ;", "em . getTransaction (  )  . commit (  )  ;", "ai _ id    =    ai . getId (  )  ;", "nai _ id    =    nai . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AbstractPropertiesAudited2Test"}, {"methodBody": ["METHOD_START", "{", "AuditedImplementor   ai    =    getEntityManager (  )  . find ( AuditedImplementor . class ,    ai _ id )  ;", "assert   ai    !  =    null ;", "SimpleInterface   si    =    getEntityManager (  )  . find ( SimpleInterface . class ,    ai _ id )  ;", "assert   si    !  =    null ;", "AuditedImplementor   ai _ rev 1     =    getAuditReader (  )  . find ( AuditedImplementor . class ,    ai _ id ,     1  )  ;", "assert   ai _ rev 1     !  =    null ;", "SimpleInterface   si _ rev 1     =    getAuditReader (  )  . find ( SimpleInterface . class ,    ai _ id ,     1  )  ;", "assert   si _ rev 1     !  =    null ;", "assert    ( ai . getData (  )  )     !  =    null ;", "assert    ( si . getData (  )  )     !  =    null ;", "assert    ( ai _ rev 1  . getData (  )  )     !  =    null ;", "assert    ( si _ rev 1  . getData (  )  )     !  =    null ;", "assert    ( ai _ rev 1  . getNumerito (  )  )     =  =     (  . NUMERITO )  ;", "assert    ( si _ rev 1  . getNumerito (  )  )     =  =     (  . NUMERITO )  ;", "}", "METHOD_END"], "methodName": ["testRetrieveAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AbstractPropertiesAudited2Test"}, {"methodBody": ["METHOD_START", "{", "NonAuditedImplementor   nai    =    getEntityManager (  )  . find ( NonAuditedImplementor . class ,    nai _ id )  ;", "assert   nai    !  =    null ;", "SimpleI   si    =    getEntityManager (  )  . find ( SimpleI . class ,    nai _ id )  ;", "assert   si    !  =    null ;", "assert   si . getData (  )  . equals ( nai . getData (  )  )  ;", "try    {", "getAuditReader (  )  . find ( NonAuditedImplementor . class ,    nai _ id ,     1  )  ;", "assert   false ;", "}    catch    ( Exception   e )     {", "assert   e   instanceof   NotAuditedException ;", "}", "SimpleI   si _ rev 1     =    getAuditReader (  )  . find ( SimpleI . class ,    nai _ id ,     1  )  ;", "assert   si _ rev 1     =  =    null ;", "}", "METHOD_END"], "methodName": ["testRetrieveNonAudited"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AbstractPropertiesAudited2Test"}, {"methodBody": ["METHOD_START", "{", "return   auditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   numerito ;", "}", "METHOD_END"], "methodName": ["getNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . auditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . numerito    =    numerito ;", "}", "METHOD_END"], "methodName": ["setNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.AuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   nonAuditedImplementorData ;", "}", "METHOD_END"], "methodName": ["getNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "return   numerito ;", "}", "METHOD_END"], "methodName": ["getNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . nonAuditedImplementorData    =    implementorData ;", "}", "METHOD_END"], "methodName": ["setNonAuditedImplementorData"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "this . numerito    =    numerito ;", "}", "METHOD_END"], "methodName": ["setNumerito"], "fileName": "org.hibernate.envers.test.integration.interfaces.hbm.propertiesAudited2.NonAuditedImplementor"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ed 1     =    em . find ( SetRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.InterfacesRelation"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id )  ;", "SetRefEdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1     =  =    null ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.InterfacesRelation"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.InterfacesRelation"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" SetRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.interfaces.relation.SetRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", ". TestEntity   entity    =    new    . TestEntity (  . ENTITY _ ID ,     \" Fab \"  )  ;", "entityManager . persist ( entity )  ;", ". OtherTestEntity   other    =    new    . OtherTestEntity (  . OTHER _ ENTITY _ ID ,     \" other \"  )  ;", "entity . addOther ( other )  ;", "entityManager . persist ( entity )  ;", "entityManager . persist ( other )  ;", "}    finally    {", "entityManager . close (  )  ;", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "entityManager    =    getEntityManager (  )  ;", "try    {", ". TestEntity   entity    =    entityManager . find (  . TestEntity . class ,     . ENTITY _ ID )  ;", ". OtherTestEntity   other    =    entityManager . find (  . OtherTestEntity . class ,     . OTHER _ ENTITY _ ID )  ;", "entityManager . remove ( entity )  ;", "entityManager . remove ( other )  ;", "}    finally    {", "entityManager . close (  )  ;", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.jta.DeleteCollectionJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( DeleteCollectionJtaSessionClosedBeforeCommitTest . TestEntity . class ,    DeleteCollectionJtaSessionClosedBeforeCommitTest . ENTITY _ ID )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.jta.DeleteCollectionJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   DeleteCollectionJtaSessionClosedBeforeCommitTest . TestEntity (  1  ,     \" Fab \"  )  ,    getAuditReader (  )  . find ( DeleteCollectionJtaSessionClosedBeforeCommitTest . TestEntity . class ,    DeleteCollectionJtaSessionClosedBeforeCommitTest . ENTITY _ ID ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.jta.DeleteCollectionJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "try    {", "EntityManager   em    =    getEntityManager (  )  ;", "long   count    =    em . createQuery (  \" from   StrTestEntity   s   where   s . str    =     ' x '  \"  )  . getResultList (  )  . size (  )  ;", "Assert . assertEquals (  0  ,    count )  ;", "}    finally    {", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testDataNotPersisted"], "fileName": "org.hibernate.envers.test.integration.jta.JtaExceptionListener"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "try    {", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   te    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( te )  ;", "}    finally    {", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testTransactionRollback"], "fileName": "org.hibernate.envers.test.integration.jta.JtaExceptionListener"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "IntTestEntity   ite    =    new   IntTestEntity (  1  0  )  ;", "entityManager . persist ( ite )  ;", "entityId    =    ite . getId (  )  ;", "entityManager . close (  )  ;", "}    finally    {", "TestingJtaPlatformImpl . try (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.jta.JtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    entityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.jta.JtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   IntTestEntity (  1  0  ,    entityId )  ,    getAuditReader (  )  . find ( IntTestEntity . class ,    entityId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.jta.JtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "EntityManager   em ;", "IntTestEntity   ite ;", "try    {", "em    =    getEntityManager (  )  ;", "ite    =    new   IntTestEntity (  1  0  )  ;", "em . persist ( ite )  ;", "id 1     =    ite . getId (  )  ;", "}    finally    {", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "em . close (  )  ;", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "try    {", "em    =    getEntityManager (  )  ;", "ite    =    em . find ( IntTestEntity . class ,    id 1  )  ;", "ite . setNumber (  2  0  )  ;", "}    finally    {", "TestingJtaPlatformImpl . tryCommit (  )  ;", "}", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.jta.JtaTransaction"}, {"methodBody": ["METHOD_START", "{", "IntTestEntity   ver 1     =    new   IntTestEntity (  1  0  ,    id 1  )  ;", "IntTestEntity   ver 2     =    new   IntTestEntity (  2  0  ,    id 1  )  ;", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    id 1  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,    revisions . get (  0  )  )  )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( IntTestEntity . class ,    id 1  ,    revisions . get (  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.jta.JtaTransaction"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( IntTestEntity . class ,    id 1  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.jta.JtaTransaction"}, {"methodBody": ["METHOD_START", "{", "final   SessionFactoryImplementor   sf    =    entityManagerFactory (  )  . unwrap ( SessionFactoryImplementor . class )  ;", "final   EnversService   enversService    =    sf . getServiceRegistry (  )  . getService ( EnversService . class )  ;", "final   AuditProcessManager   auditProcessManager    =    enversService . getAuditProcessManager (  )  ;", "Map <  ,    AuditProcess >    values ;", "Field   field    =    auditProcessManager . getClass (  )  . getDeclaredField (  \" auditProcesses \"  )  ;", "field . setAccessible ( true )  ;", "values    =     (  ( Map <  ,    AuditProcess >  )     ( field . get ( auditProcessManager )  )  )  ;", "Assert . assertNotNull ( values )  ;", "Assert . assertEquals (  0  ,    values . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertAuditProcessManagerEmpty"], "fileName": "org.hibernate.envers.test.integration.jta.JtaTransactionAfterCallbackTest"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . setTransactionTimeout (  5  )  ;", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "EntityManager   entityManager    =    null ;", "try    {", "entityManager    =    getEntityManager (  )  ;", "IntTestEntity   ite    =    new   IntTestEntity (  1  0  )  ;", "entityManager . persist ( ite )  ;", "final   SessionImplementor   session    =    entityManager . unwrap ( SessionImplementor . class )  ;", "session . getActionQueue (  )  . registerProcess ( new    . BeforeCallbackCompletionHandler (  )  )  ;", "TestingJtaPlatformImpl . transactionManager (  )  . commit (  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( RollbackException . class ,    e )  ;", "}    finally    {", "try    {", "if    ( entityManager    !  =    null )     {", "entityManager . close (  )  ;", "}", "}    catch    ( PersistenceException   e )     {", "Assert . assertTrue ( e . getMessage (  )  . contains (  \" Transaction   was   rolled   back   in   a   different   thread !  \"  )  )  ;", "}", "assertAuditProcessManagerEmpty (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuditProcessManagerFlushedOnTransactionTimeout"], "fileName": "org.hibernate.envers.test.integration.jta.JtaTransactionAfterCallbackTest"}, {"methodBody": ["METHOD_START", "{", "INSTANCE . getTransactionManager (  )  . begin (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "SetRefEdEntity   edEntity    =    new   SetRefEdEntity (  2  ,     \" edEntity \"  )  ;", "entityManager . persist ( edEntity )  ;", "SetRefIngEntity   ingEntity    =    new   SetRefIngEntity (  1  ,     \" ingEntity \"  )  ;", "Set < SetRefIngEntity >    sries    =    new   HashSet <  >  (  )  ;", "sries . add ( ingEntity )  ;", "ingEntity . setReference ( edEntity )  ;", "edEntity . setReffering ( sries )  ;", "entityManager . persist ( ingEntity )  ;", "entityId    =    ingEntity . getId (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "TestingJtaPlatformImpl . try (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.jta.OneToManyJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    entityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.jta.OneToManyJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   SetRefIngEntity (  1  ,     \" ingEntity \"  )  ,    getAuditReader (  )  . find ( SetRefIngEntity . class ,    entityId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.jta.OneToManyJtaSessionClosedBeforeCommitTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "OwnedEntity   ed 1     =    new   OwnedEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "OwnedEntity   ed 2     =    new   OwnedEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "OwningEntity   ing 1     =    new   OwningEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "OwningEntity   ing 2     =    new   OwningEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( OwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( OwningEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( OwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( OwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReferences ( new   Array < OwnedEntity >  (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . setReferences ( new   Array < OwnedEntity >  (  )  )  ;", "ing 2  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( OwningEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( OwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( OwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( OwningEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( OwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( OwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( OwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReferences ( null )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListOwningEntity   ing 1     =    getEntityManager (  )  . find ( ListOwningEntity . class ,    ing 1  _ id )  ;", "ListOwningEntity   ing 2     =    getEntityManager (  )  . find ( ListOwningEntity . class ,    ing 2  _ id )  ;", "ListOwnedEntity   rev 1     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id ,     1  )  ;", "ListOwnedEntity   rev 2     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id ,     2  )  ;", "ListOwnedEntity   rev 3     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id ,     3  )  ;", "ListOwnedEntity   rev 4     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id ,     4  )  ;", "ListOwnedEntity   rev 5     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id ,     5  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( Collections . EMPTY _ LIST )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferencing (  )  ,    ing 1  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferencing (  )  ,    ing 1  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferencing (  )  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferencing (  )  ,    ing 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListOwningEntity   ing 1     =    getEntityManager (  )  . find ( ListOwningEntity . class ,    ing 1  _ id )  ;", "ListOwningEntity   ing 2     =    getEntityManager (  )  . find ( ListOwningEntity . class ,    ing 2  _ id )  ;", "ListOwnedEntity   rev 1     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id ,     1  )  ;", "ListOwnedEntity   rev 2     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id ,     2  )  ;", "ListOwnedEntity   rev 3     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id ,     3  )  ;", "ListOwnedEntity   rev 4     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id ,     4  )  ;", "ListOwnedEntity   rev 5     =    getAuditReader (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id ,     5  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( Collections . EMPTY _ LIST )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferencing (  )  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferencing (  )  ,    ing 1  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferencing (  )  ,    ing 1  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferencing (  )  ,    ing 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListOwnedEntity   ed 1     =    getEntityManager (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id )  ;", "ListOwnedEntity   ed 2     =    getEntityManager (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id )  ;", "ListOwningEntity   rev 1     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 1  _ id ,     1  )  ;", "ListOwningEntity   rev 2     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 1  _ id ,     2  )  ;", "ListOwningEntity   rev 3     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 1  _ id ,     3  )  ;", "ListOwningEntity   rev 4     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 1  _ id ,     4  )  ;", "ListOwningEntity   rev 5     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 1  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Collections . EMPTY _ LIST )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    ed 1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  ,    ed 2  )  ;", "assert   rev 5  . getReferences (  )  . equals ( Collections . EMPTY _ LIST )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListOwnedEntity   ed 1     =    getEntityManager (  )  . find ( ListOwnedEntity . class ,    ed 1  _ id )  ;", "ListOwnedEntity   ed 2     =    getEntityManager (  )  . find ( ListOwnedEntity . class ,    ed 2  _ id )  ;", "ListOwningEntity   rev 1     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 2  _ id ,     1  )  ;", "ListOwningEntity   rev 2     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 2  _ id ,     2  )  ;", "ListOwningEntity   rev 3     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 2  _ id ,     3  )  ;", "ListOwningEntity   rev 4     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 2  _ id ,     4  )  ;", "ListOwningEntity   rev 5     =    getAuditReader (  )  . find ( ListOwningEntity . class ,    ing 2  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Collections . EMPTY _ LIST )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ListOwnedEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( ListOwnedEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( ListOwningEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ListOwningEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "MapOwnedEntity   ed 1     =    new   MapOwnedEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "MapOwnedEntity   ed 2     =    new   MapOwnedEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "MapOwningEntity   ing 1     =    new   MapOwningEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "MapOwningEntity   ing 2     =    new   MapOwningEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 2  . getReferences (  )  . put (  \"  2  \"  ,    ed 2  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( MapOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( MapOwningEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( MapOwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( MapOwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . getReferences (  )  . put (  \"  1  \"  ,    ed 1  )  ;", "ing 1  . getReferences (  )  . put (  \"  2  \"  ,    ed 1  )  ;", "ing 2  . getReferences (  )  . put (  \"  2  \"  ,    ed 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( MapOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( MapOwningEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . getReferences (  )  . put (  \"  1  \"  ,    ed 1  )  ;", "ing 2  . getReferences (  )  . remove (  \"  3  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( MapOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ed 1     =    em . find ( MapOwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . clear (  )  ;", "ing 2  . setReferences ( new   HashMap < String ,    MapOwnedEntity >  (  )  )  ;", "ing 2  . getReferences (  )  . put (  \"  1  \"  ,    ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "MapOwningEntity   ing 1     =    getEntityManager (  )  . find ( MapOwningEntity . class ,    ing 1  _ id )  ;", "MapOwningEntity   ing 2     =    getEntityManager (  )  . find ( MapOwningEntity . class ,    ing 2  _ id )  ;", "MapOwnedEntity   rev 1     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 1  _ id ,     1  )  ;", "MapOwnedEntity   rev 2     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 1  _ id ,     2  )  ;", "MapOwnedEntity   rev 3     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 1  _ id ,     3  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 3  . getReferencing (  )  . equals ( Collecs . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "MapOwningEntity   ing 2     =    getEntityManager (  )  . find ( MapOwningEntity . class ,    ing 2  _ id )  ;", "MapOwnedEntity   rev 1     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 2  _ id ,     1  )  ;", "MapOwnedEntity   rev 2     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 2  _ id ,     2  )  ;", "MapOwnedEntity   rev 3     =    getAuditReader (  )  . find ( MapOwnedEntity . class ,    ed 2  _ id ,     3  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "assert   rev 2  . getReferencing (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 3  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "MapOwnedEntity   ed 1     =    getEntityManager (  )  . find ( MapOwnedEntity . class ,    ed 1  _ id )  ;", "MapOwningEntity   rev 1     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 1  _ id ,     1  )  ;", "MapOwningEntity   rev 2     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 1  _ id ,     2  )  ;", "MapOwningEntity   rev 3     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Collecs . EMPTY _ MAP )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,    ed 1  ,     \"  2  \"  ,    ed 1  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( Collecs . EMPTY _ MAP )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "MapOwnedEntity   ed 1     =    getEntityManager (  )  . find ( MapOwnedEntity . class ,    ed 1  _ id )  ;", "MapOwnedEntity   ed 2     =    getEntityManager (  )  . find ( MapOwnedEntity . class ,    ed 2  _ id )  ;", "MapOwningEntity   rev 1     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 2  _ id ,     1  )  ;", "MapOwningEntity   rev 2     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 2  _ id ,     2  )  ;", "MapOwningEntity   rev 3     =    getAuditReader (  )  . find ( MapOwningEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReferences (  )  . equals ( TestTools . makeMap (  \"  2  \"  ,    ed 2  )  )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeMap (  \"  2  \"  ,    ed 1  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,    ed 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( MapOwnedEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( MapOwnedEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( MapOwningEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( MapOwningEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicMap"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetOwnedEntity   ed 1     =    new   SetOwnedEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetOwnedEntity   ed 2     =    new   SetOwnedEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetOwningEntity   ing 1     =    new   SetOwningEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "SetOwningEntity   ing 2     =    new   SetOwningEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( SetOwningEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( SetOwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetOwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReferences ( new   HashSet < SetOwnedEntity >  (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . setReferences ( new   HashSet < SetOwnedEntity >  (  )  )  ;", "ing 2  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetOwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( SetOwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetOwnedEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( SetOwnedEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetOwningEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReferences ( null )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetOwningEntity   ing 1     =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing 1  _ id )  ;", "SetOwningEntity   ing 2     =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing 2  _ id )  ;", "SetOwnedEntity   rev 1     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id ,     1  )  ;", "SetOwnedEntity   rev 2     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id ,     2  )  ;", "SetOwnedEntity   rev 3     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id ,     3  )  ;", "SetOwnedEntity   rev 4     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id ,     4  )  ;", "SetOwnedEntity   rev 5     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id ,     5  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 3  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 4  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "assert   rev 5  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetOwningEntity   ing 1     =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing 1  _ id )  ;", "SetOwningEntity   ing 2     =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing 2  _ id )  ;", "SetOwnedEntity   rev 1     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id ,     1  )  ;", "SetOwnedEntity   rev 2     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id ,     2  )  ;", "SetOwnedEntity   rev 3     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id ,     3  )  ;", "SetOwnedEntity   rev 4     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id ,     4  )  ;", "SetOwnedEntity   rev 5     =    getAuditReader (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id ,     5  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "assert   rev 3  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 4  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 5  . getReferencing (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetOwnedEntity   ed 1     =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id )  ;", "SetOwnedEntity   ed 2     =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id )  ;", "SetOwningEntity   rev 1     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 1  _ id ,     1  )  ;", "SetOwningEntity   rev 2     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 1  _ id ,     2  )  ;", "SetOwningEntity   rev 3     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 1  _ id ,     3  )  ;", "SetOwningEntity   rev 4     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 1  _ id ,     4  )  ;", "SetOwningEntity   rev 5     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 1  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 4  . getReferences (  )  . equals ( TestTools . makeSet ( ed 2  )  )  ;", "assert   rev 5  . getReferences (  )  . equals ( Collecs . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetOwnedEntity   ed 1     =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed 1  _ id )  ;", "SetOwnedEntity   ed 2     =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed 2  _ id )  ;", "SetOwningEntity   rev 1     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 2  _ id ,     1  )  ;", "SetOwningEntity   rev 2     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 2  _ id ,     2  )  ;", "SetOwningEntity   rev 3     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 2  _ id ,     3  )  ;", "SetOwningEntity   rev 4     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 2  _ id ,     4  )  ;", "SetOwningEntity   rev 5     =    getAuditReader (  )  . find ( SetOwningEntity . class ,    ing 2  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 4  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 5  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetOwnedEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( SetOwnedEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( SetOwningEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetOwningEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "IntNoAutoIdTestEntity   ite 1  _  1     =    new   IntNoAutoIdTestEntity (  1  ,     1  0  )  ;", "IntNoAutoIdTestEntity   ite 1  _  2     =    new   IntNoAutoIdTestEntity (  1  ,     1  1  )  ;", "IntNoAutoIdTestEntity   ite 2  _  1     =    new   IntNoAutoIdTestEntity (  2  ,     2  0  )  ;", "IntNoAutoIdTestEntity   ite 2  _  2     =    new   IntNoAutoIdTestEntity (  2  ,     2  1  )  ;", "Entity   wjte 1     =    new   Entity (  )  ;", "wjte 1  . setData (  \" wjte 1  \"  )  ;", "Entity   wjte 2     =    new   Entity (  )  ;", "wjte 1  . setData (  \" wjte 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ite 1  _  1  )  ;", "em . persist ( ite 1  _  2  )  ;", "em . persist ( ite 2  _  1  )  ;", "em . persist ( ite 2  _  2  )  ;", "em . persist ( wjte 1  )  ;", "em . persist ( wjte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "wjte 1     =    em . find ( Entity . class ,    wjte 1  . getId (  )  )  ;", "wjte 1  . getReferences 1  (  )  . add ( ite 1  _  1  )  ;", "wjte 1  . getReferences 2  (  )  . add ( ite 2  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "wjte 2     =    em . find ( Entity . class ,    wjte 2  . getId (  )  )  ;", "wjte 2  . getReferences 1  (  )  . add ( ite 1  _  1  )  ;", "wjte 2  . getReferences 1  (  )  . add ( ite 1  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "wjte 1     =    em . find ( Entity . class ,    wjte 1  . getId (  )  )  ;", "wjte 2     =    em . find ( Entity . class ,    wjte 2  . getId (  )  )  ;", "wjte 1  . getReferences 1  (  )  . remove ( ite 1  _  1  )  ;", "wjte 2  . getReferences 2  (  )  . add ( ite 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ite 1  _  1  _ id    =    ite 1  _  1  . getId (  )  ;", "ite 1  _  2  _ id    =    ite 1  _  2  . getId (  )  ;", "ite 2  _  1  _ id    =    ite 2  _  1  . getId (  )  ;", "ite 2  _  2  _ id    =    ite 2  _  2  . getId (  )  ;", "wjte 1  _ id    =    wjte 1  . getId (  )  ;", "wjte 2  _ id    =    wjte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicWhereJoinTable"}, {"methodBody": ["METHOD_START", "{", "IntNoAutoIdTestEntity   ite 1  _  1     =    getEntityManager (  )  . find ( IntNoAutoIdTestEntity . class ,    ite 1  _  1  _ id )  ;", "IntNoAutoIdTestEntity   ite 2  _  1     =    getEntityManager (  )  . find ( IntNoAutoIdTestEntity . class ,    ite 2  _  1  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    wjte 1  _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    wjte 1  _ id ,     2  )  ;", "Entity   rev 3     =    getAuditReader (  )  . find ( Entity . class ,    wjte 1  _ id ,     3  )  ;", "Entity   rev 4     =    getAuditReader (  )  . find ( Entity . class ,    wjte 1  _ id ,     4  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences 1  (  )  ,    ite 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences 1  (  )  ,    ite 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences 2  (  )  ,    ite 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences 2  (  )  ,    ite 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences 2  (  )  ,    ite 2  _  1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfWjte1"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicWhereJoinTable"}, {"methodBody": ["METHOD_START", "{", "IntNoAutoIdTestEntity   ite 1  _  1     =    getEntityManager (  )  . find ( IntNoAutoIdTestEntity . class ,    ite 1  _  1  _ id )  ;", "IntNoAutoIdTestEntity   ite 1  _  2     =    getEntityManager (  )  . find ( IntNoAutoIdTestEntity . class ,    ite 1  _  2  _ id )  ;", "IntNoAutoIdTestEntity   ite 2  _  2     =    getEntityManager (  )  . find ( IntNoAutoIdTestEntity . class ,    ite 2  _  2  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    wjte 2  _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    wjte 2  _ id ,     2  )  ;", "Entity   rev 3     =    getAuditReader (  )  . find ( Entity . class ,    wjte 2  _ id ,     3  )  ;", "Entity   rev 4     =    getAuditReader (  )  . find ( Entity . class ,    wjte 2  _ id ,     4  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences 1  (  )  ,    ite 1  _  1  ,    ite 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences 1  (  )  ,    ite 1  _  1  ,    ite 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences 2  (  )  ,    ite 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfWjte2"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicWhereJoinTable"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( WhereJoinTableEntity . class ,    wjte 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( WhereJoinTableEntity . class ,    wjte 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntNoAutoIdTestEntity . class ,    ite 1  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntNoAutoIdTestEntity . class ,    ite 1  _  2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntNoAutoIdTestEntity . class ,    ite 2  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntNoAutoIdTestEntity . class ,    ite 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.BasicWhereJoinTable"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( id ,    entity . getId (  )  )  ;", "Assert . assertEquals ( sortKey ,    entity . getStr (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkStrTestEntity"], "fileName": "org.hibernate.envers.test.integration.manytomany.CustomComparatorEntityTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SortedSetEntity   entity 1     =    new   SortedSetEntity (  1  ,     \" sortedEntity 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( entity 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity 1     =    em . find ( SortedSetEntity . class ,     1  )  ;", "final   StrTestEntity   strTestEntity 1     =    new   StrTestEntity (  \" abc \"  )  ;", "em . persist ( strTestEntity 1  )  ;", "id 1     =    strTestEntity 1  . getId (  )  ;", "entity 1  . getSortedSet (  )  . add ( strTestEntity 1  )  ;", "entity 1  . getSortedMap (  )  . put ( strTestEntity 1  ,     \" abc \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity 1     =    em . find ( SortedSetEntity . class ,     1  )  ;", "final   StrTestEntity   strTestEntity 2     =    new   StrTestEntity (  \" aaa \"  )  ;", "em . persist ( strTestEntity 2  )  ;", "id 2     =    strTestEntity 2  . getId (  )  ;", "entity 1  . getSortedSet (  )  . add ( strTestEntity 2  )  ;", "entity 1  . getSortedMap (  )  . put ( strTestEntity 2  ,     \" aaa \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity 1     =    em . find ( SortedSetEntity . class ,     1  )  ;", "final   StrTestEntity   strTestEntity 3     =    new   StrTestEntity (  \" aba \"  )  ;", "em . persist ( strTestEntity 3  )  ;", "id 3     =    strTestEntity 3  . getId (  )  ;", "entity 1  . getSortedSet (  )  . add ( strTestEntity 3  )  ;", "entity 1  . getSortedMap (  )  . put ( strTestEntity 3  ,     \" aba \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity 1     =    em . find ( SortedSetEntity . class ,     1  )  ;", "final   StrTestEntity   strTestEntity 4     =    new   StrTestEntity (  \" aac \"  )  ;", "em . persist ( strTestEntity 4  )  ;", "id 4     =    strTestEntity 4  . getId (  )  ;", "entity 1  . getSortedSet (  )  . add ( strTestEntity 4  )  ;", "entity 1  . getSortedMap (  )  . put ( strTestEntity 4  ,     \" aac \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.CustomComparatorEntityTest"}, {"methodBody": ["METHOD_START", "{", "final   SortedSetEntity   entity 1     =    getEntityManager (  )  . find ( SortedSetEntity . class ,     1  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "final   SortedSet < StrTestEntity >    sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  4  ,    sortedSet . size (  )  )  ;", "final   Iterator < StrTestEntity >    iterator    =    sortedSet . iterator (  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 4  ,     \" aac \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 1  ,     \" abc \"  )  ;", "final   SortedMap < StrTestEntity ,    String >    sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  4  ,    sortedMap . size (  )  )  ;", "Iterator < Map . Entry < StrTestEntity ,    String >  >    mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 4  ,     \" aac \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 1  ,     \" abc \"  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aaa \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aac \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aba \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" abc \"  )  ;", "}", "METHOD_END"], "methodName": ["testCurrentStateOfEntity1"], "fileName": "org.hibernate.envers.test.integration.manytomany.CustomComparatorEntityTest"}, {"methodBody": ["METHOD_START", "{", "SortedSetEntity   entity 1     =    getAuditReader (  )  . find ( SortedSetEntity . class ,     1  ,     1  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "SortedSet < StrTestEntity >    sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  0  ,    sortedSet . size (  )  )  ;", "SortedMap < StrTestEntity ,    String >    sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  0  ,    sortedMap . size (  )  )  ;", "entity 1     =    getAuditReader (  )  . find ( SortedSetEntity . class ,     1  ,     2  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  1  ,    sortedSet . size (  )  )  ;", "Iterator < StrTestEntity >    iterator    =    sortedSet . iterator (  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 1  ,     \" abc \"  )  ;", "sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  1  ,    sortedMap . size (  )  )  ;", "Iterator < Map . Entry < StrTestEntity ,    String >  >    mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 1  ,     \" abc \"  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" abc \"  )  ;", "entity 1     =    getAuditReader (  )  . find ( SortedSetEntity . class ,     1  ,     3  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  2  ,    sortedSet . size (  )  )  ;", "iterator    =    sortedSet . iterator (  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 1  ,     \" abc \"  )  ;", "sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  2  ,    sortedMap . size (  )  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 1  ,     \" abc \"  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aaa \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" abc \"  )  ;", "entity 1     =    getAuditReader (  )  . find ( SortedSetEntity . class ,     1  ,     4  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  3  ,    sortedSet . size (  )  )  ;", "iterator    =    sortedSet . iterator (  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 1  ,     \" abc \"  )  ;", "sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  3  ,    sortedMap . size (  )  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 1  ,     \" abc \"  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aaa \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aba \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" abc \"  )  ;", "entity 1     =    getAuditReader (  )  . find ( SortedSetEntity . class ,     1  ,     5  )  ;", "Assert . assertEquals (  \" sortedEntity 1  \"  ,    entity 1  . getData (  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    entity 1  . getId (  )  )  ;", "sortedSet    =    entity 1  . getSortedSet (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedSet . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  4  ,    sortedSet . size (  )  )  ;", "iterator    =    sortedSet . iterator (  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 4  ,     \" aac \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( iterator . next (  )  ,    id 1  ,     \" abc \"  )  ;", "sortedMap    =    entity 1  . getSortedMap (  )  ;", "Assert . assertEquals ( StrTestEntity . class ,    sortedMap . comparator (  )  . getClass (  )  )  ;", "Assert . assertEquals (  4  ,    sortedMap . size (  )  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 2  ,     \" aaa \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 4  ,     \" aac \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 3  ,     \" aba \"  )  ;", "checkStrTestEntity ( mapIterator . next (  )  . getKey (  )  ,    id 1  ,     \" abc \"  )  ;", "mapIterator    =    sortedMap . entrySet (  )  . iterator (  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aaa \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aac \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" aba \"  )  ;", "Assert . assertEquals ( mapIterator . next (  )  . getValue (  )  ,     \" abc \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEntity1"], "fileName": "org.hibernate.envers.test.integration.manytomany.CustomComparatorEntityTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( SortedSetEntity . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id 1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id 2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  4  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id 3  )  )  ;", "Assert . assertEquals ( Arrays . asList (  5  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id 4  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.CustomComparatorEntityTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . addChild ( new   Child (  1  ,     \" child 1  \"  )  )  ;", "p . addChild ( new   Child (  2  ,     \" child 2  \"  )  )  ;", "entityManager . persist ( p )  ;", "p . getChildren (  )  . forEach ( entityManager :  : persist )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . removeChild ( p . getChildren (  )  . get (  0  )  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "final   Child   child    =    new   Child (  3  ,     \" child 3  \"  )  ;", "p . getChildren (  )  . add (  0  ,    child )  ;", "child . getParents (  )  . add ( p )  ;", "entityManager . persist ( child )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "while    (  !  ( p . getChildren (  )  . isEmpty (  )  )  )     {", "Child   child    =    p . getChildren (  )  . get (  0  )  ;", "p . removeChild ( child )  ;", "entityManager . remove ( child )  ;", "}", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  1  ,     \" child 1  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  3  ,     \" child 3  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Parent . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   EntityA   a    =    new   EntityA (  \" A \"  )  ;", "final   EntityB   b    =    new   EntityB (  \" B \"  ,    a )  ;", "entityManager . pist ( a )  ;", "entityManager . pist ( b )  ;", "this . aId    =    a . getId (  )  ;", "this . bId 1     =    b . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   EntityA   a    =    entityManager . find (  . class ,    this . aId )  ;", "for    ( EntityB   b    :    a . getContainer (  )  . getbList (  )  )     {", "b . setName (  (  ( b . getName (  )  )     +     \"  - Updated \"  )  )  ;", "entityManager . merge ( b )  ;", "}", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   EntityA   a    =    entityManager . find (  . class ,    this . aId )  ;", "final   EntityB   b    =    new   EntityB (  \" B 2  \"  ,    a )  ;", "entityManager . pist ( b )  ;", "entityManager . merge ( a )  ;", "this . bId 2     =    b . getId (  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.MappedByEmbeddableAttributeTest"}, {"methodBody": ["METHOD_START", "{", "List < Number >    aRevisions    =    getAuditReader (  )  . getRevisions ( MappedByEmbeddableAttributeTest . EntityA . class ,    this . aId )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    aRevisions )  ;", "MappedByEmbeddableAttributeTest . EntityA   rev 1     =    getAuditReader (  )  . find ( MappedByEmbeddableAttributeTest . EntityA . class ,    this . aId ,     1  )  ;", "Assert . assertEquals (  1  ,    rev 1  . getContainer (  )  . getbList (  )  . size (  )  )  ;", "Assert . assertEquals (  \" B \"  ,    rev 1  . getContainer (  )  . getbList (  )  . get (  0  )  . getName (  )  )  ;", "MappedByEmbeddableAttributeTest . EntityA   rev 3     =    getAuditReader (  )  . find ( MappedByEmbeddableAttributeTest . EntityA . class ,    this . aId ,     3  )  ;", "Assert . assertEquals (  2  ,    rev 3  . getContainer (  )  . getbList (  )  . size (  )  )  ;", "Assert . assertThat ( rev 3  . getContainer (  )  . getbList (  )  ,    hasItem ( new   MappedByEmbeddableAttributeTest . EntityBNameMatcher (  \" B - Updated \"  )  )  )  ;", "Assert . assertThat ( rev 3  . getContainer (  )  . getbList (  )  ,    hasItem ( new   MappedByEmbeddableAttributeTest . EntityBNameMatcher (  \" B 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryEntityA"], "fileName": "org.hibernate.envers.test.integration.manytomany.MappedByEmbeddableAttributeTest"}, {"methodBody": ["METHOD_START", "{", "List < Number >    b 1 Revisions    =    getAuditReader (  )  . getRevisions ( MappedByEmbeddableAttributeTest . EntityB . class ,    this . bId 1  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    b 1 Revisions )  ;", "MappedByEmbeddableAttributeTest . EntityB   b 1 Rev 1     =    getAuditReader (  )  . find ( MappedByEmbeddableAttributeTest . EntityB . class ,    this . bId 1  ,     1  )  ;", "Assert . assertEquals (  \" B \"  ,    b 1 Rev 1  . getName (  )  )  ;", "Assert . assertEquals (  1  ,    b 1 Rev 1  . getaList (  )  . size (  )  )  ;", "Assert . assertEquals ( this . aId ,    b 1 Rev 1  . getaList (  )  . get (  0  )  . getId (  )  )  ;", "MappedByEmbeddableAttributeTest . EntityB   b 1 Rev 2     =    getAuditReader (  )  . find ( MappedByEmbeddableAttributeTest . EntityB . class ,    this . bId 1  ,     2  )  ;", "Assert . assertEquals (  \" B - Updated \"  ,    b 1 Rev 2  . getName (  )  )  ;", "Assert . assertEquals (  1  ,    b 1 Rev 1  . getaList (  )  . size (  )  )  ;", "Assert . assertEquals ( this . aId ,    b 1 Rev 1  . getaList (  )  . get (  0  )  . getId (  )  )  ;", "List < Number >    b 2 Revisions    =    getAuditReader (  )  . getRevisions ( MappedByEmbeddableAttributeTest . EntityB . class ,    this . bId 2  )  ;", "Assert . assertEquals ( Arrays . asList (  3  )  ,    b 2 Revisions )  ;", "MappedByEmbeddableAttributeTest . EntityB   b 2 Rev 3     =    getAuditReader (  )  . find ( MappedByEmbeddableAttributeTest . EntityB . class ,    this . bId 2  ,     3  )  ;", "Assert . assertEquals (  \" B 2  \"  ,    b 2 Rev 3  . getName (  )  )  ;", "Assert . assertEquals (  1  ,    b 2 Rev 3  . getaList (  )  . size (  )  )  ;", "Assert . assertEquals ( this . aId ,    b 2 Rev 3  . getaList (  )  . get (  0  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryEntityB"], "fileName": "org.hibernate.envers.test.integration.manytomany.MappedByEmbeddableAttributeTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . addChild ( new   Child (  1  ,     \" child 1  \"  )  )  ;", "p . addChild ( new   Child (  2  ,     \" child 2  \"  )  )  ;", "entityManager . persist ( p )  ;", "p . getChildren (  )  . forEach ( entityManager :  : persist )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . removeChild ( p . getChildren (  )  . get (  0  )  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "final   Child   child    =    new   Child (  3  ,     \" child 3  \"  )  ;", "p . getChildren (  )  . add (  0  ,    child )  ;", "child . getParents (  )  . add ( p )  ;", "entityManager . persist ( child )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "while    (  !  ( p . getChildren (  )  . isEmpty (  )  )  )     {", "Child   child    =    p . getChildren (  )  . get (  0  )  ;", "p . removeChild ( child )  ;", "entityManager . remove ( child )  ;", "}", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  1  ,     \" child 1  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  3  ,     \" child 3  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Parent . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Listing 1 Entity   o 1  _  1     =    new   Listing 1 Entity (  \" o 1  _  1  \"  )  ;", "Listing 1 Entity   o 1  _  2     =    new   Listing 1 Entity (  \" o 1  _  2  \"  )  ;", "Listing 2 Entity   o 2  _  1     =    new   Listing 2 Entity (  \" o 2  _  1  \"  )  ;", "Listing 2 Entity   o 2  _  2     =    new   Listing 2 Entity (  \" o 2  _  2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( o 1  _  1  )  ;", "em . persist ( o 1  _  2  )  ;", "em . persist ( o 2  _  1  )  ;", "em . persist ( o 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "o 1  _  1     =    em . find ( Listing 1 Entity . class ,    o 1  _  1  . getId (  )  )  ;", "o 1  _  2     =    em . find ( Listing 1 Entity . class ,    o 1  _  2  . getId (  )  )  ;", "o 2  _  1     =    em . find ( Listing 2 Entity . class ,    o 2  _  1  . getId (  )  )  ;", "o 2  _  2     =    em . find ( Listing 2 Entity . class ,    o 2  _  2  . getId (  )  )  ;", "o 1  _  1  . getReferences (  )  . add ( o 2  _  1  )  ;", "o 1  _  2  . getReferences (  )  . add ( o 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "o 1  _  1     =    em . find ( Listing 1 Entity . class ,    o 1  _  1  . getId (  )  )  ;", "o 2  _  2     =    em . find ( Listing 2 Entity . class ,    o 2  _  2  . getId (  )  )  ;", "o 1  _  1  . getReferences (  )  . add ( o 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "o 1  _  1     =    em . find ( Listing 1 Entity . class ,    o 1  _  1  . getId (  )  )  ;", "o 1  _  2     =    em . find ( Listing 1 Entity . class ,    o 1  _  2  . getId (  )  )  ;", "o 2  _  1     =    em . find ( Listing 2 Entity . class ,    o 2  _  1  . getId (  )  )  ;", "o 2  _  2     =    em . find ( Listing 2 Entity . class ,    o 2  _  2  . getId (  )  )  ;", "o 2  _  2  . getReferences (  )  . remove ( o 1  _  1  )  ;", "o 2  _  1  . getReferences (  )  . remove ( o 1  _  1  )  ;", "o 2  _  1  . getReferences (  )  . add ( o 1  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "o 1  _  1     =    em . find ( Listing 1 Entity . class ,    o 1  _  1  . getId (  )  )  ;", "o 1  _  2     =    em . find ( Listing 1 Entity . class ,    o 1  _  2  . getId (  )  )  ;", "o 2  _  1     =    em . find ( Listing 2 Entity . class ,    o 2  _  1  . getId (  )  )  ;", "o 2  _  2     =    em . find ( Listing 2 Entity . class ,    o 2  _  2  . getId (  )  )  ;", "o 1  _  2  . getReferences (  )  . remove ( o 2  _  1  )  ;", "o 1  _  1  . getReferences (  )  . add ( o 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "o 1  _  1  _ id    =    o 1  _  1  . getId (  )  ;", "o 1  _  2  _ id    =    o 1  _  2  . getId (  )  ;", "o 2  _  1  _ id    =    o 2  _  1  . getId (  )  ;", "o 2  _  2  _ id    =    o 2  _  2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "ListBiowning 2 Entity   o 2  _  1     =    getEntityManager (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id )  ;", "ListBiowning 2 Entity   o 2  _  2     =    getEntityManager (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id )  ;", "ListBiowning 1 Entity   rev 1     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id ,     1  )  ;", "ListBiowning 1 Entity   rev 2     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id ,     2  )  ;", "ListBiowning 1 Entity   rev 3     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id ,     3  )  ;", "ListBiowning 1 Entity   rev 4     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id ,     4  )  ;", "ListBiowning 1 Entity   rev 5     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    o 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    o 2  _  1  ,    o 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferences (  )  ,    o 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfO1_1"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "ListBiowning 2 Entity   o 2  _  1     =    getEntityManager (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id )  ;", "ListBiowning 2 Entity   o 2  _  2     =    getEntityManager (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id )  ;", "ListBiowning 1 Entity   rev 1     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id ,     1  )  ;", "ListBiowning 1 Entity   rev 2     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id ,     2  )  ;", "ListBiowning 1 Entity   rev 3     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id ,     3  )  ;", "ListBiowning 1 Entity   rev 4     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id ,     4  )  ;", "ListBiowning 1 Entity   rev 5     =    getAuditReader (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    o 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    o 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  ,    o 2  _  1  ,    o 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferences (  )  ,    o 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfO1_2"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "ListBiowning 1 Entity   o 1  _  1     =    getEntityManager (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id )  ;", "ListBiowning 1 Entity   o 1  _  2     =    getEntityManager (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id )  ;", "ListBiowning 2 Entity   rev 1     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id ,     1  )  ;", "ListBiowning 2 Entity   rev 2     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id ,     2  )  ;", "ListBiowning 2 Entity   rev 3     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id ,     3  )  ;", "ListBiowning 2 Entity   rev 4     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id ,     4  )  ;", "ListBiowning 2 Entity   rev 5     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    o 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    o 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  ,    o 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfO2_1"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "ListBiowning 1 Entity   o 1  _  1     =    getEntityManager (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id )  ;", "ListBiowning 1 Entity   o 1  _  2     =    getEntityManager (  )  . find ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id )  ;", "ListBiowning 2 Entity   rev 1     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id ,     1  )  ;", "ListBiowning 2 Entity   rev 2     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id ,     2  )  ;", "ListBiowning 2 Entity   rev 3     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id ,     3  )  ;", "ListBiowning 2 Entity   rev 4     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id ,     4  )  ;", "ListBiowning 2 Entity   rev 5     =    getAuditReader (  )  . find ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReferences (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReferences (  )  ,    o 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReferences (  )  ,    o 1  _  1  ,    o 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getReferences (  )  ,    o 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getReferences (  )  ,    o 1  _  1  ,    o 1  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfO2_2"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     5  )  ,    getAuditReader (  )  . getRevisions ( ListBiowning 1 Entity . class ,    o 1  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     5  )  ,    getAuditReader (  )  . getRevisions ( ListBiowning 1 Entity . class ,    o 1  _  2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListBiowning 2 Entity . class ,    o 2  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListBiowning 2 Entity . class ,    o 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.biowned.BasicBiowned"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSubclass"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSubclass"}, {"methodBody": ["METHOD_START", "{", "return   str 3  ;", "}", "METHOD_END"], "methodName": ["getStr3"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSubclass2"}, {"methodBody": ["METHOD_START", "{", "this . str 3     =    str 3  ;", "}", "METHOD_END"], "methodName": ["setStr3"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSubclass2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   masters ;", "}", "METHOD_END"], "methodName": ["getMasters"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . masters    =    masters ;", "}", "METHOD_END"], "methodName": ["setMasters"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Master   m 1     =    new   Master (  )  ;", "DetailSub   det 1     =    new   DetailSub 2  (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "det 1  . setStr 2  (  \" detail    1  \"  )  ;", "m 1  . setStr (  \" master \"  )  ;", "m 1  . setItems ( new   ArrayList < DetailSub >  (  )  )  ;", "m 1  . getItems (  )  . add ( det 1  )  ;", "det 1  . setMasters ( new   ArrayList < Master >  (  )  )  ;", "det 1  . getMasters (  )  . add ( m 1  )  ;", "em . persist ( m 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "m 1  _ id    =    m 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.ManyToManyInverseToSuperclassTest"}, {"methodBody": ["METHOD_START", "{", "Master   rev 1  _  1     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     1  )  ;", "Master   rev 1  _  2     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     2  )  ;", "Master   rev 1  _  3     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     3  )  ;", "Master   rev 1  _  4     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     4  )  ;", "assert   rev 1  _  1     !  =    null ;", "assert   rev 1  _  2     !  =    null ;", "assert   rev 1  _  3     !  =    null ;", "assert   rev 1  _  4     !  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryExists"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.ManyToManyInverseToSuperclassTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "return   items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . items    =    items ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.manytomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Session   session    =     (  ( Session )     ( em . getDelegate (  )  )  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children    (    parent _ id    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children _ AUD \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children _ AUD    (    REV    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"    NOT   NULL \"  )     +     \"  ,    REVEND    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    REVTYPE    \"  )     +     ( getDialect (  )  . getTypeName ( Types . TINYINT )  )  )     +     \"  ,    parent _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "ParentEntity   p 1     =    new   ParentEntity (  \" parent _  1  \"  )  ;", "ParentEntity   p 2     =    new   ParentEntity (  \" parent _  2  \"  )  ;", "Child 1 Entity   c 1  _  1     =    new   Child 1 Entity (  \" child 1  _  1  \"  )  ;", "Child 1 Entity   c 1  _  2     =    new   Child 1 Entity (  \" child 1  _  2  \"  )  ;", "Child 2 Entity   c 2  _  1     =    new   Child 2 Entity (  \" child 2  _  1  \"  )  ;", "Child 2 Entity   c 2  _  2     =    new   Child 2 Entity (  \" child 2  _  2  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( p 1  )  ;", "em . persist ( p 2  )  ;", "em . persist ( c 1  _  1  )  ;", "em . persist ( c 1  _  2  )  ;", "em . persist ( c 2  _  1  )  ;", "em . persist ( c 2  _  2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransac (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  1     =    em . find ( Child 2 Entity . class ,    c 2  _  1  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransac (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  2  )  ;", "p 1  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "p 2  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransac (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . remove ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransac (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "c 2  _  2  . getParents (  )  . remove ( p 2  )  ;", "c 1  _  2  . getParents (  )  . remove ( p 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . clear (  )  ;", "p 1  _ id    =    p 1  . getId (  )  ;", "p 2  _ id    =    p 2  . getId (  )  ;", "c 1  _  1  _ id    =    c 1  _  1  . getId (  )  ;", "c 1  _  2  _ id    =    c 1  _  2  . getId (  )  ;", "c 2  _  1  _ id    =    c 2  _  1  . getId (  )  ;", "c 2  _  2  _ id    =    c 2  _  2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 1 Entity   rev 1     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollec ( rev 3  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_1"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "Child 1 Entity   rev 1     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getAuditReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollec ( rev 4  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollec ( rev 5  . getParents (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_2"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 3  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_1"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getAuditReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollec ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollec ( rev 4  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getParents (  )  ,    p 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_2"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 1 Entity   c 1  _  2     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollec ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollec ( rev 4  . getChildren 1  (  )  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollec ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollec ( rev 3  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollec ( rev 4  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent1"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 2 Entity   c 2  _  1     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getAuditReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     5  )  ;", "assert   TestTools . checkCollec ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollec ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollec ( rev 4  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollec ( rev 5  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollec ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollec ( rev 2  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollec ( rev 3  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollec ( rev 4  . getChildren 2  (  )  ,    c 2  _  1  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollec ( rev 5  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent2"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     5  )  ,    getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.sametable.BasicSametable"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestPrivSeqEntity   str 1     =    new   StrTestPrivSeqEntity (  \" a \"  )  ;", "StrTestPrivSeqEntity   str 2     =    new   StrTestPrivSeqEntity (  \" b \"  )  ;", "IntTestPrivSeqEntity   int 1     =    new   IntTestPrivSeqEntity (  1  )  ;", "IntTestPrivSeqEntity   int 2     =    new   IntTestPrivSeqEntity (  2  )  ;", "Entity   map 1     =    new   Entity (  )  ;", "Entity   map 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "em . persist ( int 1  )  ;", "em . persist ( int 2  )  ;", "map 1  . getMap (  )  . put ( int 1  ,    str 1  )  ;", "em . persist ( map 1  )  ;", "em . persist ( map 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "map 1     =    em . find ( Entity . class ,    map 1  . getId (  )  )  ;", "map 2     =    em . find ( Entity . class ,    map 2  . getId (  )  )  ;", "str 1     =    em . find ( StrTestPrivSeqEntity . class ,    str 1  . getId (  )  )  ;", "str 2     =    em . find ( StrTestPrivSeqEntity . class ,    str 2  . getId (  )  )  ;", "int 1     =    em . find ( IntTestPrivSeqEntity . class ,    int 1  . getId (  )  )  ;", "int 2     =    em . find ( IntTestPrivSeqEntity . class ,    int 2  . getId (  )  )  ;", "map 1  . getMap (  )  . put ( int 1  ,    str 2  )  ;", "map 2  . getMap (  )  . put ( int 1  ,    str 1  )  ;", "map 2  . getMap (  )  . put ( int 2  ,    str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "map 1     =    em . find ( Entity . class ,    map 1  . getId (  )  )  ;", "map 2     =    em . find ( Entity . class ,    map 2  . getId (  )  )  ;", "str 2     =    em . find ( StrTestPrivSeqEntity . class ,    str 2  . getId (  )  )  ;", "int 1     =    em . find ( IntTestPrivSeqEntity . class ,    int 1  . getId (  )  )  ;", "int 2     =    em . find ( IntTestPrivSeqEntity . class ,    int 2  . getId (  )  )  ;", "map 1  . getMap (  )  . remove ( int 2  )  ;", "map 1  . getMap (  )  . put ( int 1  ,    str 2  )  ;", "map 2  . getMap (  )  . remove ( int 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "map 1     =    em . find ( Entity . class ,    map 1  . getId (  )  )  ;", "map 2     =    em . find ( Entity . class ,    map 2  . getId (  )  )  ;", "str 2     =    em . find ( StrTestPrivSeqEntity . class ,    str 2  . getId (  )  )  ;", "int 1     =    em . find ( IntTestPrivSeqEntity . class ,    int 1  . getId (  )  )  ;", "int 2     =    em . find ( IntTestPrivSeqEntity . class ,    int 2  . getId (  )  )  ;", "map 1  . getMap (  )  . put ( int 2  ,    str 2  )  ;", "map 2  . getMap (  )  . put ( int 1  ,    str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "map 1  _ id    =    map 1  . getId (  )  ;", "map 2  _ id    =    map 2  . getId (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "int 1  _ id    =    int 1  . getId (  )  ;", "int 2  _ id    =    int 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMap"}, {"methodBody": ["METHOD_START", "{", "StrTestPrivSeqEntity   str 1     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 1  _ id )  ;", "StrTestPrivSeqEntity   str 2     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 2  _ id )  ;", "IntTestPrivSeqEntity   int 1     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 1  _ id )  ;", "IntTestPrivSeqEntity   int 2     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 2  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     2  )  ;", "Entity   rev 3     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     3  )  ;", "Entity   rev 4     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     4  )  ;", "Assert . assertEquals ( TestTools . makeMap ( int 1  ,    str 1  )  ,    rev 1  . getMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( int 1  ,    str 2  )  ,    rev 2  . getMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( int 1  ,    str 2  )  ,    rev 3  . getMap (  )  )  ;", "Assert . assertEquals ( TestTools . makeMap ( int 1  ,    str 2  ,    int 2  ,    str 2  )  ,    rev 4  . getMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfMap1"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMap"}, {"methodBody": ["METHOD_START", "{", "StrTestPrivSeqEntity   str 1     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 1  _ id )  ;", "StrTestPrivSeqEntity   str 2     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 2  _ id )  ;", "IntTestPrivSeqEntity   int 1     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 1  _ id )  ;", "IntTestPrivSeqEntity   int 2     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 2  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    map 2  _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    map 2  _ id ,     2  )  ;", "Entity   rev 3     =    getAuditReader (  )  . find ( Entity . class ,    map 2  _ id ,     3  )  ;", "Entity   rev 4     =    getAuditReader (  )  . find ( Entity . class ,    map 2  _ id ,     4  )  ;", "assert   rev 1  . getMap (  )  . equals ( TestTools . makeMap (  )  )  ;", "assert   rev 2  . getMap (  )  . equals ( TestTools . makeMap ( int 1  ,    str 1  ,    int 2  ,    str 1  )  )  ;", "assert   rev 3  . getMap (  )  . equals ( TestTools . makeMap ( int 2  ,    str 1  )  )  ;", "assert   rev 4  . getMap (  )  . equals ( TestTools . makeMap ( int 1  ,    str 2  ,    int 2  ,    str 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfMap2"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMap"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( TernaryMapEntity . class ,    map 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( TernaryMapEntity . class ,    map 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestPrivSeqEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestPrivSeqEntity . class ,    str 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( IntTestPrivSeqEntity . class ,    int 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( IntTestPrivSeqEntity . class ,    int 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMap"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "return   map ;", "}", "METHOD_END"], "methodName": ["getMap"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "this . map    =    map ;", "}", "METHOD_END"], "methodName": ["setMap"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" TME ( id    =     \"     +     ( id )  )     +     \"  ,    map    =     \"  )     +     ( map )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestPrivSeqEntity   str 1     =    new   StrTestPrivSeqEntity (  \" a \"  )  ;", "StrTestPrivSeqEntity   str 2     =    new   StrTestPrivSeqEntity (  \" b \"  )  ;", "IntTestPrivSeqEntity   int 1     =    new   IntTestPrivSeqEntity (  1  )  ;", "IntTestPrivSeqEntity   int 2     =    new   IntTestPrivSeqEntity (  2  )  ;", "Entity   map 1     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "em . persist ( int 1  )  ;", "em . persist ( int 2  )  ;", "map 1  . getMap (  )  . put ( int 1  ,    str 1  )  ;", "em . persist ( map 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "map 1     =    em . find ( Entity . class ,    map 1  . getId (  )  )  ;", "str 1     =    em . find ( StrTestPrivSeqEntity . class ,    str 1  . getId (  )  )  ;", "int 1     =    em . find ( IntTestPrivSeqEntity . class ,    int 1  . getId (  )  )  ;", "map 1  . setMap ( new   HashMap < IntTestPrivSeqEntity ,    StrTestPrivSeqEntity >  (  )  )  ;", "em . flush (  )  ;", "map 1  . getMap (  )  . put ( int 1  ,    str 1  )  ;", "map 1  . getMap (  )  . put ( int 2  ,    str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "map 1     =    em . find ( Entity . class ,    map 1  . getId (  )  )  ;", "str 1     =    em . find ( StrTestPrivSeqEntity . class ,    str 1  . getId (  )  )  ;", "int 1     =    em . find ( IntTestPrivSeqEntity . class ,    int 1  . getId (  )  )  ;", "map 1  . getMap (  )  . remove ( int 1  )  ;", "em . flush (  )  ;", "map 1  . getMap (  )  . put ( int 2  ,    str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "map 1  _ id    =    map 1  . getId (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "int 1  _ id    =    int 1  . getId (  )  ;", "int 2  _ id    =    int 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapFlush"}, {"methodBody": ["METHOD_START", "{", "StrTestPrivSeqEntity   str 1     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 1  _ id )  ;", "StrTestPrivSeqEntity   str 2     =    getEntityManager (  )  . find ( StrTestPrivSeqEntity . class ,    str 2  _ id )  ;", "IntTestPrivSeqEntity   int 1     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 1  _ id )  ;", "IntTestPrivSeqEntity   int 2     =    getEntityManager (  )  . find ( IntTestPrivSeqEntity . class ,    int 2  _ id )  ;", "Entity   rev 1     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     1  )  ;", "Entity   rev 2     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     2  )  ;", "Entity   rev 3     =    getAuditReader (  )  . find ( Entity . class ,    map 1  _ id ,     3  )  ;", "Assert . assertEquals ( rev 1  . getMap (  )  ,    TestTools . makeMap ( int 1  ,    str 1  )  )  ;", "Assert . assertEquals ( rev 2  . getMap (  )  ,    TestTools . makeMap ( int 1  ,    str 1  ,    int 2  ,    str 2  )  )  ;", "Assert . assertEquals ( rev 3  . getMap (  )  ,    TestTools . makeMap ( int 2  ,    str 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfMap1"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapFlush"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( TernaryMapEntity . class ,    map 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestPrivSeqEntity . class ,    str 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestPrivSeqEntity . class ,    str 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntTestPrivSeqEntity . class ,    int 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IntTestPrivSeqEntity . class ,    int 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.ternary.TernaryMapFlush"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   ed 1     =    new   StrTestEntity (  \" data _ ed _  1  \"  )  ;", "StrTestEntity   ed 2     =    new   StrTestEntity (  \" data _ ed _  2  \"  )  ;", "ListUniEntity   ing 1     =    new   ListUniEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "ListUniEntity   ing 2     =    new   ListUniEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( ListUniEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ListUniEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReferences ( new   ArrayList < StrTestEntity >  (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . setReferences ( new   ArrayList < StrTestEntity >  (  )  )  ;", "ing 2  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( ListUniEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( ListUniEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( ListUniEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReferences ( null )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniList"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ed 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 1  _ id )  ;", "StrTestEntity   ed 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 2  _ id )  ;", "ListUniEntity   rev 1     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 1  _ id ,     1  )  ;", "ListUniEntity   rev 2     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 1  _ id ,     2  )  ;", "ListUniEntity   rev 3     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 1  _ id ,     3  )  ;", "ListUniEntity   rev 4     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 1  _ id ,     4  )  ;", "ListUniEntity   rev 5     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 1  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Colls . EMPTY _ LIST )  ;", "assert   TestTools . checkColl ( rev 2  . getReferences (  )  ,    ed 1  )  ;", "assert   TestTools . checkColl ( rev 3  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkColl ( rev 4  . getReferences (  )  ,    ed 2  )  ;", "assert   rev 5  . getReferences (  )  . equals ( Colls . EMPTY _ LIST )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniList"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ed 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 1  _ id )  ;", "StrTestEntity   ed 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 2  _ id )  ;", "ListUniEntity   rev 1     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 2  _ id ,     1  )  ;", "ListUniEntity   rev 2     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 2  _ id ,     2  )  ;", "ListUniEntity   rev 3     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 2  _ id ,     3  )  ;", "ListUniEntity   rev 4     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 2  _ id ,     4  )  ;", "ListUniEntity   rev 5     =    getAuditReader (  )  . find ( ListUniEntity . class ,    ing 2  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Colls . EMPTY _ LIST )  ;", "assert   TestTools . checkColl ( rev 2  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkColl ( rev 3  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkColl ( rev 4  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "assert   TestTools . checkColl ( rev 5  . getReferences (  )  ,    ed 1  ,    ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniList"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( ListUniEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ListUniEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   str 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "MapUniEntity   coll 1     =    new   MapUniEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setMap ( new   HashMap < String ,    StrTestEntity >  (  )  )  ;", "coll 1  . getMap (  )  . put (  \"  1  \"  ,    str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "str 2     =    em . find ( StrTestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( MapUniEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getMap (  )  . put (  \"  2  \"  ,    str 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( MapUniEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getMap (  )  . put (  \"  2  \"  ,    str 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "coll 1     =    em . find ( MapUniEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getMap (  )  . remove (  \"  1  \"  )  ;", "em . getTransa (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniMap"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "StrTestEntity   str 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 2  _ id )  ;", "MapUniEntity   rev 1     =    getAuditReader (  )  . find ( MapUniEntity . class ,    coll 1  _ id ,     1  )  ;", "MapUniEntity   rev 2     =    getAuditReader (  )  . find ( MapUniEntity . class ,    coll 1  _ id ,     2  )  ;", "MapUniEntity   rev 3     =    getAuditReader (  )  . find ( MapUniEntity . class ,    coll 1  _ id ,     3  )  ;", "MapUniEntity   rev 4     =    getAuditReader (  )  . find ( MapUniEntity . class ,    coll 1  _ id ,     4  )  ;", "assert   rev 1  . getMap (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,    str 1  )  )  ;", "assert   rev 2  . getMap (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,    str 1  ,     \"  2  \"  ,    str 2  )  )  ;", "assert   rev 3  . getMap (  )  . equals ( TestTools . makeMap (  \"  1  \"  ,    str 1  ,     \"  2  \"  ,    str 1  )  )  ;", "assert   rev 4  . getMap (  )  . equals ( TestTools . makeMap (  \"  2  \"  ,    str 1  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniMap"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( MapUniEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniMap"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   ed 1     =    new   StrTestEntity (  \" data _ ed _  1  \"  )  ;", "StrTestEntity   ed 2     =    new   StrTestEntity (  \" data _ ed _  2  \"  )  ;", "SetUniEntity   ing 1     =    new   SetUniEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "SetUniEntity   ing 2     =    new   SetUniEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( SetUniEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( SetUniEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReferences ( new   HashSet < StrTestEntity >  (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . setReferences ( new   HashSet < StrTestEntity >  (  )  )  ;", "ing 2  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( SetUniEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( SetUniEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( StrTestEntity . class ,    ed 2  . getId (  )  )  ;", "ed 1     =    em . find ( StrTestEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( SetUniEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReferences ( null )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniSet"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ed 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 1  _ id )  ;", "StrTestEntity   ed 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 2  _ id )  ;", "SetUniEntity   rev 1     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 1  _ id ,     1  )  ;", "SetUniEntity   rev 2     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 1  _ id ,     2  )  ;", "SetUniEntity   rev 3     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 1  _ id ,     3  )  ;", "SetUniEntity   rev 4     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 1  _ id ,     4  )  ;", "SetUniEntity   rev 5     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 1  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Colls . EMPTY _ SET )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 4  . getReferences (  )  . equals ( TestTools . makeSet ( ed 2  )  )  ;", "assert   rev 5  . getReferences (  )  . equals ( Colls . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniSet"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ed 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 1  _ id )  ;", "StrTestEntity   ed 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    ed 2  _ id )  ;", "SetUniEntity   rev 1     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 2  _ id ,     1  )  ;", "SetUniEntity   rev 2     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 2  _ id ,     2  )  ;", "SetUniEntity   rev 3     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 2  _ id ,     3  )  ;", "SetUniEntity   rev 4     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 2  _ id ,     4  )  ;", "SetUniEntity   rev 5     =    getAuditReader (  )  . find ( SetUniEntity . class ,    ing 2  _ id ,     5  )  ;", "assert   rev 1  . getReferences (  )  . equals ( Colls . EMPTY _ SET )  ;", "assert   rev 2  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 3  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 4  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "assert   rev 5  . getReferences (  )  . equals ( TestTools . makeSet ( ed 1  ,    ed 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( SetUniEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetUniEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.BasicUniSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   collectionEntity    =    new   Entity (  \" some   data \"  )  ;", "StrTestEntity   element 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   element 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "collectionEntity . getReferences (  )  . add ( element 1  )  ;", "collectionEntity . getReferences (  )  . add ( element 2  )  ;", "em . persist ( element 1  )  ;", "em . persist ( element 2  )  ;", "em . persist ( collectionEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "collectionEntityId    =    collectionEntity . getId (  )  ;", "element 1 Id    =    element 1  . getId (  )  ;", "element 2 Id    =    element 2  . getId (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collectionEntity    =    em . find ( Entity . class ,    collectionEntity . getId (  )  )  ;", "collectionEntity . setData (  \" some   other   data \"  )  ;", "collectionEntity    =    em . merge ( collectionEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collectionEntity    =    em . find ( Entity . class ,    collectionEntity . getId (  )  )  ;", "collectionEntity . getReferences (  )  . remove ( element 1  )  ;", "collectionEntity    =    em . merge ( collectionEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collectionEntity    =    em . find ( Entity . class ,    collectionEntity . getId (  )  )  ;", "collectionEntity . setReferences ( new   HashSet < StrTestEntity >  (  )  )  ;", "collectionEntity    =    em . merge ( collectionEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collectionEntity    =    em . find ( Entity . class ,    collectionEntity . getId (  )  )  ;", "collectionEntity . getReferences (  )  . add ( element 1  )  ;", "collectionEntity    =    em . merge ( collectionEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.JoinTableDetachedTest"}, {"methodBody": ["METHOD_START", "{", "JoinTableEntity   collectionEntity    =    new   JoinTableEntity ( collectionEntityId ,     \" some   data \"  )  ;", "StrTestEntity   element 1     =    new   StrTestEntity (  \" str 1  \"  ,    element 1 Id )  ;", "StrTestEntity   element 2     =    new   StrTestEntity (  \" str 2  \"  ,    element 2 Id )  ;", "collectionEntity . getReferences (  )  . add ( element 1  )  ;", "collectionEntity . getReferences (  )  . add ( element 2  )  ;", "JoinTableEntity   ver 1     =    getAuditReader (  )  . find ( JoinTableEntity . class ,    collectionEntityId ,     1  )  ;", "Assert . assertEquals ( collectionEntity ,    ver 1  )  ;", "Assert . assertEquals ( collectionEntity . getReferences (  )  ,    ver 1  . getReferences (  )  )  ;", "collectionEntity . setData (  \" some   other   data \"  )  ;", "JoinTableEntity   ver 2     =    getAuditReader (  )  . find ( JoinTableEntity . class ,    collectionEntityId ,     2  )  ;", "Assert . assertEquals ( collectionEntity ,    ver 2  )  ;", "Assert . assertEquals ( collectionEntity . getReferences (  )  ,    ver 2  . getReferences (  )  )  ;", "collectionEntity . getReferences (  )  . remove ( element 1  )  ;", "JoinTableEntity   ver 3     =    getAuditReader (  )  . find ( JoinTableEntity . class ,    collectionEntityId ,     3  )  ;", "Assert . assertEquals ( collectionEntity ,    ver 3  )  ;", "Assert . assertEquals ( collectionEntity . getReferences (  )  ,    ver 3  . getReferences (  )  )  ;", "collectionEntity . setReferences ( new   HashSet < StrTestEntity >  (  )  )  ;", "JoinTableEntity   ver 4     =    getAuditReader (  )  . find ( JoinTableEntity . class ,    collectionEntityId ,     4  )  ;", "Assert . assertEquals ( collectionEntity ,    ver 4  )  ;", "Assert . assertEquals ( collectionEntity . getReferences (  )  ,    ver 4  . getReferences (  )  )  ;", "collectionEntity . getReferences (  )  . add ( element 1  )  ;", "JoinTableEntity   ver 5     =    getAuditReader (  )  . find ( JoinTableEntity . class ,    collectionEntityId ,     5  )  ;", "Assert . assertEquals ( collectionEntity ,    ver 5  )  ;", "Assert . assertEquals ( collectionEntity . getReferences (  )  ,    ver 5  . getReferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfCollectionEntity"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.JoinTableDetachedTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( JoinTableEntity . class ,    collectionEntityId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    element 1 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    element 2 Id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.JoinTableDetachedTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "uste 1     =    new   UnversionedStrTestEntity (  \" str 1  \"  )  ;", "uste 2     =    new   UnversionedStrTestEntity (  \" str 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( uste 1  )  ;", "em . persist ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uste 1     =    em . find ( UnversionedStrTestEntity . class ,    uste 1  . getId (  )  )  ;", "uste 2     =    em . find ( UnversionedStrTestEntity . class ,    uste 2  . getId (  )  )  ;", "TargetNotAuditedEntity   itnae 1     =    new   TargetNotAuditedEntity (  1  ,     \" tnae 1  \"  )  ;", "itnae 1  . getReferences (  )  . add ( uste 1  )  ;", "itnae 1  . getReferences (  )  . add ( uste 2  )  ;", "em . persist ( itnae 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TargetNotAuditedEntity   itnae 2     =    new   TargetNotAuditedEntity (  2  ,     \" tnae 2  \"  )  ;", "itnae 2  . getReferences (  )  . add ( uste 2  )  ;", "em . persist ( itnae 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "itnae 1  . getReferences (  )  . set (  0  ,    uste 2  )  ;", "itnae 1  . getReferences (  )  . set (  1  ,    uste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "itnae 1  _ id    =    itnae 1  . getId (  )  ;", "itnae 2  _ id    =    itnae 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MIndexedListNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "M 2 MIndexedListTargetNotAuditedEntity   rev 1     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 1  _ id ,     1  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   rev 2     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 1  _ id ,     2  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   rev 3     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 1  _ id ,     3  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    uste 1  ,    uste 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    uste 1  ,    uste 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  ,    uste 2  ,    uste 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistory1"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MIndexedListNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "M 2 MIndexedListTargetNotAuditedEntity   rev 1     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 2  _ id ,     1  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   rev 2     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 2  _ id ,     2  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   rev 3     =    getAuditReader (  )  . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 2  _ id ,     3  )  ;", "Assert . assertNull ( rev 1  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    uste 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  ,    uste 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistory2"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MIndexedListNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 1  _ id )  ;", "Assert . assertEquals ( revisions ,    Arrays . asList (  1  ,     3  )  )  ;", "revisions    =    getAuditReader (  )  . getRevisions ( M 2 MIndexedListTargetNotAuditedEntity . class ,    itnae 2  _ id )  ;", "Assert . assertEquals ( revisions ,    Arrays . asList (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MIndexedListNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "UnversionedStrTestEntity   uste 1     =    new   UnversionedStrTestEntity (  \" str 1  \"  )  ;", "UnversionedStrTestEntity   uste 2     =    new   UnversionedStrTestEntity (  \" str 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( uste 1  )  ;", "em . persist ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uste 1     =    em . find ( UnversionedStrTestEntity . class ,    uste 1  . getId (  )  )  ;", "uste 2     =    em . find ( UnversionedStrTestEntity . class ,    uste 2  . getId (  )  )  ;", "M 2 MTargetEntity   tnae 1     =    new   M 2 MTargetEntity (  1  ,     \" tnae 1  \"  ,    new   ArrayList < UnversionedStrTestEntity >  (  )  )  ;", "M 2 MTargetEntity   tnae 2     =    new   M 2 MTargetEntity (  2  ,     \" tnae 2  \"  ,    new   ArrayList < UnversionedStrTestEntity >  (  )  )  ;", "tnae 2  . getReferences (  )  . add ( uste 1  )  ;", "tnae 2  . getReferences (  )  . add ( uste 2  )  ;", "em . persist ( tnae 1  )  ;", "em . persist ( tnae 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( M 2 MTargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( M 2 MTargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . getReferences (  )  . add ( uste 1  )  ;", "tnae 2  . getReferences (  )  . remove ( uste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( M 2 MTargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( M 2 MTargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . getReferences (  )  . add ( uste 1  )  ;", "tnae 2  . getReferences (  )  . remove ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( M 2 MTargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( M 2 MTargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . getReferences (  )  . add ( uste 2  )  ;", "tnae 2  . getReferences (  )  . add ( uste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "tnae 1  _ id    =    tnae 1  . getId (  )  ;", "tnae 2  _ id    =    tnae 2  . getId (  )  ;", "uste 1  _ id    =    uste 1  . getId (  )  ;", "uste 2  _ id    =    uste 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MRelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "UnversionedStrTestEntity   uste 1     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 1  _ id )  ;", "UnversionedStrTestEntity   uste 2     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 2  _ id )  ;", "M 2 MTargetEntity   rev 1     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 1  _ id ,     1  )  ;", "M 2 MTargetEntity   rev 2     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 1  _ id ,     2  )  ;", "M 2 MTargetEntity   rev 3     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 1  _ id ,     3  )  ;", "M 2 MTargetEntity   rev 4     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 1  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    uste 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  ,    uste 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences (  )  ,    uste 1  ,    uste 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTnae1_id"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MRelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "UnversionedStrTestEntity   uste 1     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 1  _ id )  ;", "UnversionedStrTestEntity   uste 2     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 2  _ id )  ;", "M 2 MTargetEntity   rev 1     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 2  _ id ,     1  )  ;", "M 2 MTargetEntity   rev 2     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 2  _ id ,     2  )  ;", "M 2 MTargetEntity   rev 3     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 2  _ id ,     3  )  ;", "M 2 MTargetEntity   rev 4     =    getAuditReader (  )  . find ( M 2 MTargetEntity . class ,    tnae 2  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    uste 1  ,    uste 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    uste 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences (  )  ,    uste 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTnae2_id"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MRelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( M 2 MTargetNotAuditedEntity . class ,    tnae 1  _ id )  ;", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( revisions )  ;", "revisions    =    getAuditReader (  )  . getRevisions ( M 2 MTargetNotAuditedEntity . class ,    tnae 2  _ id )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( revisions )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytomany.unidirectional.M2MRelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "for    ( Table   table    :    metadata (  )  . getDatabase (  )  . getDefaultNamespace (  )  . getTables (  )  )     {", "if    ( table . getName (  )  . equals (  \" CustomerAddress _ AUD \"  )  )     {", "for    (    foreignKey    :    table . gets (  )  . values (  )  )     {", "Assert . assertEquals (  \" REVINFO \"  ,    foreignKey . getReferencedTable (  )  . getName (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testJoinTableForeignKeyToNonAuditTables"], "fileName": "org.hibernate.envers.test.integration.manytoone.EmbeddedIdManyToOneForeignKeyTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "BiRefingEntity   refingWithNoRefed    =    new   BiRefingEntity (  )  ;", "refingWithNoRefed . setReference ( null )  ;", "entityManager . persist ( refingWithNoRefed )  ;", "BiRefingEntity   refing    =    new   BiRefingEntity (  )  ;", "BiRefedEntity   refed    =    new   BiRefedEntity (  )  ;", "refed . getReferences (  )  . add ( refing )  ;", "refing . setReference ( refed )  ;", "entityManager . persist ( refing )  ;", "entityManager . persist ( refed )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "this . refingId    =    refing . getId (  )  ;", "this . refedId    =    refed . getId (  )  ;", "this . refingWithNoRefedId    =    refingWithNoRefed . getId (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BidirectionalManyToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefingOptionalEntity . class ,    refingId )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefingOptionalEntity . class ,    refingWithNoRefedId )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefedOptionalEntity . class ,    refedId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BidirectionalManyToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "BiRefingOptionalEntity   rev 1     =    getAuditReader (  )  . find ( BiRefingOptionalEntity . class ,    refingWithNoRefedId ,     1  )  ;", "Assert . assertNull ( rev 1  . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryNullReference"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BidirectionalManyToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( getAuditReader (  )  . find ( BiRefingOptionalEntity . class ,    refingId ,     1  )  . getReference (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . find ( BiRefedOptionalEntity . class ,    refedId ,     1  )  . getReferences (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryWithNonNullReference"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.BidirectionalManyToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "OneToManyOwned   owned    =    new   OneToManyOwned (  \" data \"  ,    null )  ;", "Set < ManyToOneOwning >    referencing    =    new   HashSet < ManyToOneOwning >  (  )  ;", "ManyToOneOwning   owning 1     =    new   ManyToOneOwning (  \" data 1  \"  ,    owned )  ;", "referencing . add ( owning 1  )  ;", "ManyToOneOwning   owning 2     =    new   ManyToOneOwning (  \" data 2  \"  ,    owned )  ;", "referencing . add ( owning 2  )  ;", "owned . setReferencing ( referencing )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( owned )  ;", "em . persist ( owning 1  )  ;", "em . persist ( owning 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "ownedId    =    owned . getId (  )  ;", "owning 1 Id    =    owning 1  . getId (  )  ;", "owning 2 Id    =    owning 2  . getId (  )  ;", "em . getTransa (  )  . begin (  )  ;", "owning 1     =    em . find ( ManyToOneOwning . class ,    owning 1  . getId (  )  )  ;", "em . remove ( owning 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "owning 2     =    em . find ( ManyToOneOwning . class ,    owning 2  . getId (  )  )  ;", "owning 2  . setData (  \" data 2 modified \"  )  ;", "em . merge ( owning 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ImplicitMappedByTest"}, {"methodBody": ["METHOD_START", "{", "OneToManyOwned   owned    =    new   OneToManyOwned (  \" data \"  ,    null ,    ownedId )  ;", "ManyToOneOwning   owning 1     =    new   ManyToOneOwning (  \" data 1  \"  ,    owned ,    owning 1 Id )  ;", "ManyToOneOwning   owning 2     =    new   ManyToOneOwning (  \" data 2  \"  ,    owned ,    owning 2 Id )  ;", "OneToManyOwned   ver 1     =    getAuditReader (  )  . find ( OneToManyOwned . class ,    ownedId ,     1  )  ;", "Assert . assertEquals ( owned ,    ver 1  )  ;", "Assert . assertEquals ( Tools . makeSet ( owning 1  ,    owning 2  )  ,    ver 1  . getReferencing (  )  )  ;", "OneToManyOwned   ver 2     =    getAuditReader (  )  . find ( OneToManyOwned . class ,    ownedId ,     2  )  ;", "Assert . assertEquals ( owned ,    ver 2  )  ;", "Assert . assertEquals ( Tools . makeSet ( owning 2  )  ,    ver 2  . getReferencing (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfOwned"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ImplicitMappedByTest"}, {"methodBody": ["METHOD_START", "{", "ManyToOneOwning   ver 1     =    new   ManyToOneOwning (  \" data 1  \"  ,    null ,    owning 1 Id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( ManyToOneOwning . class ,    owning 1 Id ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfOwning1"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ImplicitMappedByTest"}, {"methodBody": ["METHOD_START", "{", "OneToManyOwned   owned    =    new   OneToManyOwned (  \" data \"  ,    null ,    ownedId )  ;", "ManyToOneOwning   owning 1     =    new   ManyToOneOwning (  \" data 2  \"  ,    owned ,    owning 2 Id )  ;", "ManyToOneOwning   owning 3     =    new   ManyToOneOwning (  \" data 2 modified \"  ,    owned ,    owning 2 Id )  ;", "ManyToOneOwning   ver 1     =    getAuditReader (  )  . find ( ManyToOneOwning . class ,    owning 2 Id ,     1  )  ;", "ManyToOneOwning   ver 3     =    getAuditReader (  )  . find ( ManyToOneOwning . class ,    owning 2 Id ,     3  )  ;", "Assert . assertEquals ( owning 1  ,    ver 1  )  ;", "Assert . assertEquals ( owned . getId (  )  ,    ver 1  . getReferences (  )  . getId (  )  )  ;", "Assert . assertEquals ( owning 3  ,    ver 3  )  ;", "Assert . assertEquals ( owned . getId (  )  ,    ver 3  . getReferences (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfOwning2"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ImplicitMappedByTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( OneToManyOwned . class ,    ownedId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ManyToOneOwning . class ,    owning 1 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ManyToOneOwning . class ,    owning 2 Id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ImplicitMappedByTest"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "return   references ;", "}", "METHOD_END"], "methodName": ["getReferences"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "this . references    =    references ;", "}", "METHOD_END"], "methodName": ["setReferences"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.ManyToOneOwning"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.manytoone.bidirectional.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "UnversionedStrTestEntity   uste 1     =    new   UnversionedStrTestEntity (  \" str 1  \"  )  ;", "UnversionedStrTestEntity   uste 2     =    new   UnversionedStrTestEntity (  \" str 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( uste 1  )  ;", "em . persist ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uste 1     =    em . find ( UnversionedStrTestEntity . class ,    uste 1  . getId (  )  )  ;", "uste 2     =    em . find ( UnversionedStrTestEntity . class ,    uste 2  . getId (  )  )  ;", "TargetEntity   tnae 1     =    new   TargetEntity (  1  ,     \" tnae 1  \"  ,    uste 1  )  ;", "TargetEntity   tnae 2     =    new   TargetEntity (  2  ,     \" tnae 2  \"  ,    uste 2  )  ;", "em . persist ( tnae 1  )  ;", "em . persist ( tnae 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( TargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( TargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . setReference ( uste 2  )  ;", "tnae 2  . setReference ( uste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( TargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( TargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . setReference ( uste 2  )  ;", "tnae 2  . setReference ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "tnae 1     =    em . find ( TargetEntity . class ,    tnae 1  . getId (  )  )  ;", "tnae 2     =    em . find ( TargetEntity . class ,    tnae 2  . getId (  )  )  ;", "tnae 1  . setReference ( uste 1  )  ;", "tnae 2  . setReference ( uste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "tnae 1  _ id    =    tnae 1  . getId (  )  ;", "tnae 2  _ id    =    tnae 2  . getId (  )  ;", "uste 1  _ id    =    uste 1  . getId (  )  ;", "uste 2  _ id    =    uste 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.manytoone.unidirectional.RelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "TargetNotAuditedEntity   original    =    getEntityManager (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  _ id )  ;", "UnversionedStrTestEntity   uste 1     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 1  _ id )  ;", "UnversionedStrTestEntity   uste 2     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 2  _ id )  ;", "TargetNotAuditedEntity   rev 1     =    getAuditReader (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  _ id ,     1  )  ;", "TargetNotAuditedEntity   rev 2     =    getAuditReader (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  _ id ,     2  )  ;", "TargetNotAuditedEntity   rev 3     =    getAuditReader (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  _ id ,     3  )  ;", "TargetNotAuditedEntity   rev 4     =    getAuditReader (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  _ id ,     4  )  ;", "assert   rev 1  . getReference (  )  . equals ( uste 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( uste 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( uste 2  )  ;", "assert   rev 4  . getReference (  )  . equals ( uste 1  )  ;", "assert    ( original . getReference (  )  )    instanceof   HibernateProxy ;", "assert   UnversionedStrTestEntity . class . equals ( Hibernate . getClass ( original . getReference (  )  )  )  ;", "assert   UnversionedStrTestEntity . class . equals ( HibernateProxyHelper . getClassWithoutInitializingProxy ( rev 1  . getReference (  )  )  )  ;", "assert   UnversionedStrTestEntity . class . equals ( Hibernate . getClass ( rev 1  . getReference (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTnae1_id"], "fileName": "org.hibernate.envers.test.integration.manytoone.unidirectional.RelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "UnversionedStrTestEntity   uste 1     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 1  _ id )  ;", "UnversionedStrTestEntity   uste 2     =    getEntityManager (  )  . find ( UnversionedStrTestEntity . class ,    uste 2  _ id )  ;", "TargetEntity   rev 1     =    getAuditReader (  )  . find ( TargetEntity . class ,    tnae 2  _ id ,     1  )  ;", "TargetEntity   rev 2     =    getAuditReader (  )  . find ( TargetEntity . class ,    tnae 2  _ id ,     2  )  ;", "TargetEntity   rev 3     =    getAuditReader (  )  . find ( TargetEntity . class ,    tnae 2  _ id ,     3  )  ;", "TargetEntity   rev 4     =    getAuditReader (  )  . find ( TargetEntity . class ,    tnae 2  _ id ,     4  )  ;", "assert   rev 1  . getReference (  )  . equals ( uste 2  )  ;", "assert   rev 2  . getReference (  )  . equals ( uste 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( uste 2  )  ;", "assert   rev 4  . getReference (  )  . equals ( uste 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTnae2_id"], "fileName": "org.hibernate.envers.test.integration.manytoone.unidirectional.RelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( TargetNotAuditedEntity . class ,    tnae 1  _ id )  ;", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( revisions )  ;", "revisions    =    getAuditReader (  )  . getRevisions ( TargetNotAuditedEntity . class ,    tnae 2  _ id )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( revisions )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.manytoone.unidirectional.RelationNotAuditedTarget"}, {"methodBody": ["METHOD_START", "{", "Sesssess =    openSess )  ;", "sessgetTransact )  . begin (  )  ;", "GivenIdStrEntity   entity    =    new   GivenIdStrEntity (  1  ,     \" data \"  )  ;", "sesspersist ( entity )  ;", "sessgetTransact )  . commit (  )  ;", "sessgetTransact )  . begin (  )  ;", "sesspersist ( new   StrTestEntity (  \" another   data \"  )  )  ;", "entity    =     (  ( GivenIdStrEntity )     ( sessget ( GivenIdStrEntity . class ,     1  )  )  )  ;", "sessdelete ( entity )  ;", "sesssave ( entity )  ;", "sessgetTransact )  . commit (  )  ;", "sessgetTransact )  . begin (  )  ;", "entity    =     (  ( GivenIdStrEntity )     ( sessget ( GivenIdStrEntity . class ,     1  )  )  )  ;", "sessdelete ( entity )  ;", "entity . setData (  \" modified   data \"  )  ;", "sesssave ( entity )  ;", "sessgetTransact )  . commit (  )  ;", "sessclose (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.merge.AddDelTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( new   GivenIdStrEntity (  1  ,     \" data \"  )  ,    getAuditReader (  )  . find ( GivenIdStrEntity . class ,     1  ,     1  )  )  ;", "Assert . assertEquals ( new   GivenIdStrEntity (  1  ,     \" modified   data \"  )  ,    getAuditReader (  )  . find ( GivenIdStrEntity . class ,     1  ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfGivenIdStrEntity"], "fileName": "org.hibernate.envers.test.integration.merge.AddDelTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( GivenIdStrEntity . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountOfGivenIdStrEntity"], "fileName": "org.hibernate.envers.test.integration.merge.AddDelTest"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.merge.GivenIdStrEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.merge.GivenIdStrEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.merge.GivenIdStrEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.merge.GivenIdStrEntity"}, {"methodBody": ["METHOD_START", "{", "for    ( String   propertyName    :    propertyNames )     {", "query . add ( Audit . property ( propertyName )  . hasChanged (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addHasChangedProperties"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "for    ( String   propertyName    :    propertyNames )     {", "query . add ( Audit . property ( propertyName )  . hasNotChanged (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addHasNotChangedProperties"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "return   getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( clazz ,    false ,    withDeleted )  . add ( AuditEntity . id (  )  . eq ( id )  )  ;", "}", "METHOD_END"], "methodName": ["createForRevisionsQuery"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["forceModifiedFlags"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   query    =    createForRevisionsQuery ( clazz ,    id ,    false )  ;", "addHasChangedProperties ( query ,    propertyNames )  ;", "return   query . getResultList (  )  ;", "}", "METHOD_END"], "methodName": ["queryForPropertyHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   query    =    createForRevisionsQuery ( clazz ,    id ,    true )  ;", "addHasChangedProperties ( query ,    propertyNames )  ;", "return   query . getResultList (  )  ;", "}", "METHOD_END"], "methodName": ["queryForPropertyHasChangedWithDeleted"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   query    =    createForRevisionsQuery ( clazz ,    id ,    false )  ;", "addHasNotChangedProperties ( query ,    propertyNames )  ;", "return   query . getResultList (  )  ;", "}", "METHOD_END"], "methodName": ["queryForPropertyHasNotChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   query    =    createForRevisionsQuery ( clazz ,    id ,    true )  ;", "addHasNotChangedProperties ( query ,    propertyNames )  ;", "return   query . getResultList (  )  ;", "}", "METHOD_END"], "methodName": ["queryForPropertyHasNotChangedWithDeleted"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsEntityTest"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["forceModifiedFlags"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.AbstractModifiedFlagsOneSessionTest"}, {"methodBody": ["METHOD_START", "{", "final   Session   s    =    openSession (  )  ;", "try    {", "s . getTransaction (  )  . begin (  )  ;", "final    . Project   project    =    new    . Project (  1  ,     \" fooName \"  )  ;", "s . persist ( project )  ;", "s . getTransaction (  )  . commit (  )  ;", "s . clear (  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;     +  + i )     {", "s . getTransaction (  )  . begin (  )  ;", "project . setName (  (  \" fooName \"     +     ( i    +     2  )  )  )  ;", "s . update ( project )  ;", "s . getTransaction (  )  . commit (  )  ;", "s . clear (  )  ;", "}", "}    catch    ( Throwable   t )     {", "if    ( s . getTransaction (  )  . isActive (  )  )     {", "s . getTransaction (  )  . rollback (  )  ;", "}", "throw   t ;", "}    finally    {", "s . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.DetachedEntityTest"}, {"methodBody": ["METHOD_START", "{", "final   List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( DetachedEntityTest . Project . class ,    false ,    true )  . add ( AuditEntity . property (  \" name \"  )  . hasChanged (  )  )  . addProjection ( AuditEntity . revisionNumber (  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["testModifiedFlagChangesForProjectName"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.DetachedEntityTest"}, {"methodBody": ["METHOD_START", "{", "final   List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( DetachedEntityTest . Project . class ,    false ,    true )  . add ( AuditEntity . property (  \" type \"  )  . hasChanged (  )  )  . addProjection ( AuditEntity . revisionNumber (  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["testModifiedFlagChangesForProjectType"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.DetachedEntityTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  )  ,    getAuditReader (  )  . getRevisions ( DetachedEntityTest . Project . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.DetachedEntityTest"}, {"methodBody": ["METHOD_START", "{", "for    ( Integer   revision    :    Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  )  )     {", "final    . Project   project    =    getAuditReader (  )  . find (  . Project . class ,     1  ,    revision )  ;", "if    ( revision    =  =     1  )     {", "Assert . assertEquals ( new    . Project (  1  ,     \" fooName \"  )  ,    project )  ;", "} else    {", "Assert . assertEquals ( new    . Project (  1  ,     (  \" fooName \"     +    revision )  )  ,    project )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testRevisionHistory"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.DetachedEntityTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "AuditedTestEntity   ent 1     =    new   AuditedTestEntity (  1  ,     \" str 1  \"  )  ;", "NotAuditedTestEntity   ent 2     =    new   NotAuditedTestEntity (  1  ,     \" str 1  \"  )  ;", "em . persist ( ent 1  )  ;", "em . persist ( ent 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ent 1     =    em . find ( AuditedTestEntity . class ,     1  )  ;", "ent 2     =    em . find ( NotAuditedTestEntity . class ,     1  )  ;", "ent 1  . setStr 1  (  \" str 2  \"  )  ;", "ent 2  . setStr 1  (  \" str 2  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAPITest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( AuditedTestEntity . class ,    true ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals (  \" str 1  \"  ,     (  ( AuditedTestEntity )     ( list . get (  0  )  )  )  . getStr 1  (  )  )  ;", "Assert . assertEquals (  \" str 2  \"  ,     (  ( AuditedTestEntity )     ( list . get (  1  )  )  )  . getStr 1  (  )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( AuditedTestEntity . class ,    true ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . hasNotChanged (  )  )  . getResultList (  )  ;", "Assert . assertTrue ( list . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedHasNotChangedCriteria"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAPITest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "Professor   professor    =    new   Professor (  )  ;", "Student   student    =    new   Student (  )  ;", "professor . getStudents (  )  . add ( student )  ;", "student . getProfessors (  )  . add ( professor )  ;", "entityManager . getTransac (  )  . begin (  )  ;", "entityManager . persist ( professor )  ;", "entityManager . persist ( student )  ;", "entityManager . getTransac (  )  . commit (  )  ;", "entityManager . clear (  )  ;", "entityManager . getTransac (  )  . begin (  )  ;", "professor    =    entityManager . find ( Professor . class ,    professor . getId (  )  )  ;", "student    =    entityManager . find ( Student . class ,    student . getId (  )  )  ;", "entityManager . remove ( professor )  ;", "entityManager . remove ( student )  ;", "entityManager . getTransac (  )  . commit (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyRemovalTest"}, {"methodBody": ["METHOD_START", "{", "initializeSession (  )  ;", "Person   pers 1     =    new   Person (  \" Hn \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 3     =    new   Person (  \" Barba \"  ,     3  2  )  ;", "Person   pers 4     =    new   Person (  \" Camomo \"  ,     1  5  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "List < Person >    owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 1  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "Car   car 1     =    new   Car (  5  ,    owners )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id _ pers 1     =    pers 1  . getId (  )  ;", "id _ car 1     =    car 1  . getId (  )  ;", "id _ pers 2     =    pers 2  . getId (  )  ;", "owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "owners . add ( pers 4  )  ;", "Car   car 2     =    new   Car (  2  7  ,    owners )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "Person   person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    id _ pers 1  )  )  )  ;", "person 1  . setName (  \" Hn   David \"  )  ;", "person 1  . setAge (  4  0  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    Thread . currentThread (  )  . getContextClassLoader (  )  . getResource (  \" mappings / entityNames / manyToManyAudited / mappings . hbm . xml \"  )  ;", "config . addFile ( new   File ( url . toURI (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["initMappings"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Car . class ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ car 1  )  )  . add ( AuditEntity . property (  \" owners \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Car . class ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ car 1  )  )  . add ( AuditEntity . property (  \" owners \"  )  . hasNotChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedCar1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Person . class ,     \" Personaje \"  ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ pers 1  )  )  . add ( AuditEntity . property (  \" cars \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Person . class ,     \" Personaje \"  ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ pers 1  )  )  . add ( AuditEntity . property (  \" cars \"  )  . hasNotChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedPerson1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Person . class ,     \" Personaje \"  ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ pers 2  )  )  . add ( AuditEntity . property (  \" cars \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Person . class ,     \" Personaje \"  ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id _ pers 2  )  )  . add ( AuditEntity . property (  \" cars \"  )  . hasNotChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedPerson2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedAuditedManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1     =    new   BiRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "BiRefEdEntity   ed 2     =    new   BiRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "BiRefIngEntity   ing 1     =    new   BiRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "BiRefIngEntity   ing 2     =    new   BiRefIngEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 1     =    em . find ( BiRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 1     =    em . find ( BiRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( BiRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . setReference ( null )  ;", "ing 2  . setReference ( ed 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 2     =    em . find ( BiRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( BiRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "ing 2  . setReference ( null )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectional2"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( BiRefEdEntity . class ,    ed 1  _ id ,     \" referencing \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( BiRefEdEntity . class ,    ed 2  _ id ,     \" referencing \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectional2"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    new   Ticket (  1  ,     \" data - t 1  \"  )  ;", "final   Comment   comment    =    new   Comment (  1  ,     \" Initial   comment - t 1  \"  )  ;", "ticket . addComment ( comment )  ;", "entityManager . persist ( comment )  ;", "entityManager . persist ( ticket )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    new   Ticket (  2  ,     \" data - t 2  \"  )  ;", "entityManager . persist ( ticket )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    entityManager . find (  . class ,     1  )  ;", "ticket . setData (  \" data - changed - t 1  \"  )  ;", "entityManager . merge ( ticket )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    entityManager . find (  . class ,     2  )  ;", "ticket . setData (  \" data - changed - t 2  \"  )  ;", "entityManager . merge ( ticket )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    entityManager . find (  . class ,     1  )  ;", "ticket . setData (  \" data - changed - twice \"  )  ;", "ticket . getComments (  )  . get (  0  )  . setText (  \" comment -  \"  )  ;", "ticket . getComments (  )  . forEach ( entityManager :  : merge )  ;", "entityManager . merge ( ticket )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Ticket   ticket    =    entityManager . find (  . class ,     1  )  ;", "final   Comment   comment    =    new   Comment (  2  ,     \" Comment 2  \"  )  ;", "ticket . addComment ( comment )  ;", "entityManager . merge ( comment )  ;", "entityManager . merge ( ticket )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     6  )  ,    TestTools . extractRevisionNumbers ( queryForPropertyHasChanged ( HasChangedBidirectionalTest . Ticket . class ,     1  ,     \" comments \"  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    TestTools . extractRevisionNumbers ( queryForPropertyHasChanged ( HasChangedBidirectionalTest . Ticket . class ,     2  ,     \" comments \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  3  ,     5  )  ,    TestTools . extractRevisionNumbers ( queryForPropertyHasNotChanged ( HasChangedBidirectionalTest . Ticket . class ,     1  ,     \" comments \"  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  4  )  ,    TestTools . extractRevisionNumbers ( queryForPropertyHasNotChanged ( HasChangedBidirectionalTest . Ticket . class ,     2  ,     \" comments \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasNotChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     5  ,     6  )  ,    getAuditReader (  )  . getRevisions ( HasChangedBidirectionalTest . Ticket . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( HasChangedBidirectionalTest . Ticket . class ,     2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     5  )  ,    getAuditReader (  )  . getRevisions ( HasChangedBidirectionalTest . Comment . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  6  )  ,    getAuditReader (  )  . getRevisions ( HasChangedBidirectionalTest . Comment . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedBidirectionalTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "id 1     =     1  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   ce    =    new   Entity ( id 1  ,     \" x \"  ,     1 L )  ;", "em . persist ( ce )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ce    =    em . find ( Entity . class ,    id 1  )  ;", "ce . setData (  \" y \"  )  ;", "ce . setNumVal (  2 L )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedChildAuditing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ChildEntity . class ,    id 1  ,     \" data \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ChildEntity . class ,    id 1  ,     \" numVal \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ChildEntity . class ,    id 1  ,     \" data \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( ChildEntity . class ,    id 1  ,     \" numVal \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testChildHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedChildAuditing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ParentEntity . class ,    id 1  ,     \" data \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ParentEntity . class ,    id 1  ,     \" data \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testParentHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedChildAuditing"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "re _ id 1     =     1  ;", "re _ id 2     =     1  0  ;", "Integer   c _ id    =     1  0  0  ;", "em . getTransaction (  )  . begin (  )  ;", "edEntity   re 1     =    new   edEntity ( re _ id 1  )  ;", "em . persist ( re 1  )  ;", "edEntity   re 2     =    new   edEntity ( re _ id 2  )  ;", "em . persist ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 1     =    em . find ( edEntity . class ,    re _ id 1  )  ;", "ChildIngEntity   cie    =    new   ChildIngEntity ( c _ id ,     \" y \"  ,     1 L )  ;", "cie . seted ( re 1  )  ;", "em . persist ( cie )  ;", "c _ id    =    cie . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "re 2     =    em . find ( edEntity . class ,    re _ id 2  )  ;", "cie    =    em . find ( ChildIngEntity . class ,    c _ id )  ;", "cie . seted ( re 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedChildReferencing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ReferencedEntity . class ,    re _ id 1  ,     \" referencing \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ReferencedEntity . class ,    re _ id 1  ,     \" referencing \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ReferencedEntity . class ,    re _ id 2  ,     \" referencing \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testReferencedEntityHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedChildReferencing"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "EmbeddableListEntity 1    ele 1     =    new   EmbeddableListEntity 1  (  )  ;", "ele 1  . setOtherData (  \" data \"  )  ;", "ele 1  . getList (  )  . add ( c 3  _  1  )  ;", "em . persist ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getList (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . setOtherData (  \" modified \"  )  ;", "ele 1  . getList (  )  . remove ( c 3  _  2  )  ;", "ele 1     =    em . merge ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getList (  )  . add ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getList (  )  . add ( c 3  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . getList (  )  . remove ( c 3  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ele 1     =    em . find ( EmbeddableListEntity 1  . class ,    ele 1  . getId (  )  )  ;", "ele 1  . setOtherData (  \" another   modification \"  )  ;", "ele 1     =    em . merge ( ele 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ele 1  _ id    =    ele 1  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponentCollection"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     \" componentList \"  )  ;", "Assert . assertEquals (  4  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  ,     4  ,     5  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( EmbeddableListEntity 1  . class ,    ele 1  _ id ,     \" otherData \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     6  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedEle"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponentCollection"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   imke    =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   cte 1     =    new   ComponentTestEntity ( new   Component 1  (  \" x 1  \"  ,     \" y 2  \"  )  ,    new   Component 2  (  \" a 1  \"  ,     \" b 2  \"  )  )  ;", "ComponentTestEntity   cte 2     =    new   ComponentTestEntity ( new   Component 1  (  \" x 1  \"  ,     \" y 2  \"  )  ,    new   Component 2  (  \" a 1  \"  ,     \" b 2  \"  )  )  ;", "em . persist ( cte 1  )  ;", "em . persist ( cte 2  )  ;", "imke . getIdmap (  )  . put ( cte 1  . getComp 1  (  )  ,    cte 1  )  ;", "em . persist ( imke )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 2     =    em . find ( ComponentTestEntity . class ,    cte 2  . getId (  )  )  ;", "imke    =    em . find ( Entity . class ,    imke . getId (  )  )  ;", "imke . getIdmap (  )  . put ( cte 2  . getComp 1  (  )  ,    cte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "cmke _ id    =    imke . getId (  )  ;", "cte 1  _ id    =    cte 1  . getId (  )  ;", "cte 2  _ id    =    cte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ComponentTestEntity . class ,    cte 1  _ id ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ComponentTestEntity . class ,    cte 1  _ id ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasChanged ( ComponentTestEntity . class ,    cte 2  _ id ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ComponentTestEntity . class ,    cte 2  _ id ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedComponentEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ComponentMapKeyEntity . class ,    cmke _ id ,     \" idmap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ComponentMapKeyEntity . class ,    cmke _ id ,     \" idmap \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedMapEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponentMapKey"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   cte 1     =    new   TestEntity ( new    1  (  \" a \"  ,     \" b \"  )  ,    new    2  (  \" x \"  ,     \" y \"  )  )  ;", "TestEntity   cte 2     =    new   TestEntity ( new    1  (  \" a 2  \"  ,     \" b 2  \"  )  ,    new    2  (  \" x 2  \"  ,     \" y 2  \"  )  )  ;", "TestEntity   cte 3     =    new   TestEntity ( new    1  (  \" a 3  \"  ,     \" b 3  \"  )  ,    new    2  (  \" x 3  \"  ,     \" y 3  \"  )  )  ;", "TestEntity   cte 4     =    new   TestEntity ( null ,    null )  ;", "em . persist ( cte 1  )  ;", "em . persist ( cte 2  )  ;", "em . persist ( cte 3  )  ;", "em . persist ( cte 4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "cte 3     =    em . find ( TestEntity . class ,    cte 3  . getId (  )  )  ;", "cte 4     =    em . find ( TestEntity . class ,    cte 4  . getId (  )  )  ;", "cte 1  . setComp 1  ( new    1  (  \" a '  \"  ,     \" b '  \"  )  )  ;", "cte 2  . getComp 1  (  )  . setStr 1  (  \" a 2  '  \"  )  ;", "cte 3  . getComp 2  (  )  . setStr 6  (  \" y 3  '  \"  )  ;", "cte 4  . setComp 1  ( new    1  (  )  )  ;", "cte 4  . getComp 1  (  )  . setStr 1  (  \" n \"  )  ;", "cte 4  . setComp 2  ( new    2  (  )  )  ;", "cte 4  . getComp 2  (  )  . setStr 5  (  \" m \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 1     =    em . find ( TestEntity . class ,    cte 1  . getId (  )  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "cte 3     =    em . find ( TestEntity . class ,    cte 3  . getId (  )  )  ;", "cte 4     =    em . find ( TestEntity . class ,    cte 4  . getId (  )  )  ;", "cte 1  . setComp 2  ( new    2  (  \" x '  \"  ,     \" y '  \"  )  )  ;", "cte 3  . getComp 1  (  )  . setStr 2  (  \" b 3  '  \"  )  ;", "cte 4  . setComp 1  ( null )  ;", "cte 4  . setComp 2  ( null )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "cte 2     =    em . find ( TestEntity . class ,    cte 2  . getId (  )  )  ;", "em . remove ( cte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    cte 1  . getId (  )  ;", "id 2     =    cte 2  . getId (  )  ;", "id 3     =    cte 3  . getId (  )  ;", "id 4     =    cte 4  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ComponentTestEntity . class ,    id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ComponentTestEntity . class ,    id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChangedWithDeleted ( ComponentTestEntity . class ,    id 2  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChangedWithDeleted ( ComponentTestEntity . class ,    id 2  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChangedWithDeleted ( ComponentTestEntity . class ,    id 3  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChangedWithDeleted ( ComponentTestEntity . class ,    id 3  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId3"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChangedWithDeleted ( ComponentTestEntity . class ,    id 4  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChangedWithDeleted ( ComponentTestEntity . class ,    id 4  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId4"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "queryForPropertyHasChanged ( ComponentTestEntity . class ,    id 1  ,     \" comp 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedNotAudited"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( TestTools . makeSet (  \" comp 1  _ MOD \"  )  ,    TestTools . extractModProperties ( metadata (  )  . getEntityBinding (  \" ComponentTestEntity _ AUD \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testModFlagProperties"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedComponents"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "TypeEntity   ccte    =    new   TypeEntity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte . setComponent ( new   Component (  \" a \"  ,     1  )  )  ;", "em . persist ( ccte )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte    =    em . find ( TypeEntity . class ,    ccte . getId (  )  )  ;", "ccte . getComponent (  )  . setProp 1  (  \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ccte    =    em . find ( TypeEntity . class ,    ccte . getId (  )  )  ;", "ccte . setComponent ( new   Component (  \" c \"  ,     3  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ccte _ id    =    ccte . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedCompositeCustom"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( CompositeCustomTypeEntity . class ,    ccte _ id ,     \" component \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( CompositeCustomTypeEntity . class ,    ccte _ id ,     \" component \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedCompositeCustom"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   mce 1     =    new   Entity (  )  ;", "mce 1  . setText (  \" Entity -  1  -  1  \"  )  ;", "em . persist ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mce 1 Id    =    mce 1  . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mce 1     =    em . find ( Entity . class ,    mce 1  . getId (  )  )  ;", "RefEntity 1    mcre 1     =    new   RefEntity 1  (  )  ;", "mcre 1  . setText (  \" RefEntity 1  -  1  -  1  \"  )  ;", "mcre 1  . setEntity ( mce 1  )  ;", "mce 1  . addRefEntity 1  ( mcre 1  )  ;", "em . persist ( mcre 1  )  ;", "mce 1     =    em . merge ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mcre 1 Id    =    mcre 1  . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mce 1     =    em . find ( Entity . class ,    mce 1  . getId (  )  )  ;", "mce 1     =    em . merge ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mce 1  . removeRefEntity 1  ( mcre 1  )  ;", "mce 1     =    em . merge ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mce 1  . setRefEntities 1  ( new   ArrayList < RefEntity 1  >  (  )  )  ;", "mce 1  . setRefEntities 2  ( new   ArrayList < RefEntity 2  >  (  )  )  ;", "mce 1  . setText (  \" Entity -  1  -  2  \"  )  ;", "mce 1     =    em . merge ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mce 1  . setRefEntities 1  ( new   ArrayList < RefEntity 1  >  (  )  )  ;", "mce 1  . setRefEntities 2  ( new   ArrayList < RefEntity 2  >  (  )  )  ;", "mce 1     =    em . merge ( mce 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   mce 2     =    new   Entity (  )  ;", "mce 2  . setText (  \" Entity -  2  -  1  \"  )  ;", "RefEntity 2    mcre 2     =    new   RefEntity 2  (  )  ;", "mcre 2  . setText (  \" RefEntity 2  -  1  -  1  \"  )  ;", "mcre 2  . setEntity ( mce 2  )  ;", "mce 2  . addRefEntity 2  ( mcre 2  )  ;", "em . persist ( mce 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mce 2 Id    =    mce 2  . getId (  )  ;", "mcre 2 Id    =    mcre 2  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDetachedMultipleCollection"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( MultipleCollectionEntity . class ,    mce 1 Id ,     \" text \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionEntity . class ,    mce 1 Id ,     \" refEntities 1  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionEntity . class ,    mce 1 Id ,     \" refEntities 2  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionRefEntity 1  . class ,    mcre 1 Id ,     \" text \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionEntity . class ,    mce 2 Id ,     \" text \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  5  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionEntity . class ,    mce 2 Id ,     \" refEntities 2  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  5  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( MultipleCollectionRefEntity 2  . class ,    mcre 2 Id ,     \" text \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  5  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDetachedMultipleCollection"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "DoubleListRefEdEntity 1    ed 1  _  1     =    new   DoubleListRefEdEntity 1  (  \" ed 1  _  1  \"  ,    null )  ;", "DoubleListRefEdEntity 1    ed 1  _  2     =    new   DoubleListRefEdEntity 1  (  \" ed 1  _  2  \"  ,    null )  ;", "DoubleListRefEdEntity 2    ed 2  _  1     =    new   DoubleListRefEdEntity 2  (  \" ed 2  _  1  \"  ,    null )  ;", "DoubleListRefEdEntity 2    ed 2  _  2     =    new   DoubleListRefEdEntity 2  (  \" ed 2  _  2  \"  ,    null )  ;", "DoubleListRefIngEntity   ing 1     =    new   DoubleListRefIngEntity (  \" coll 1  \"  )  ;", "DoubleListRefIngEntity   ing 2     =    new   DoubleListRefIngEntity (  \" coll 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1  . getReferences 1  (  )  . add ( ed 1  _  1  )  ;", "ing 1  . getReferences 2  (  )  . add ( ed 2  _  1  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 2  . getReferences 2  (  )  . add ( ed 2  _  2  )  ;", "em . persist ( ed 1  _  1  )  ;", "em . persist ( ed 1  _  2  )  ;", "em . persist ( ed 2  _  1  )  ;", "em . persist ( ed 2  _  2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ing 2  . getReferences 1  (  )  . clear (  )  ;", "ing 2  . getReferences 2  (  )  . clear (  )  ;", "ing 1  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 1  . getReferences 2  (  )  . add ( ed 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ed 1  _  1  . setData (  \" ed 1  _  1    bis \"  )  ;", "ed 2  _  2  . setData (  \" ed 2  _  2    bis \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ing 1  . getReferences 1  (  )  . clear (  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  1  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 1  . getReferences 2  (  )  . remove ( ed 2  _  1  )  ;", "ing 2  . getReferences 2  (  )  . add ( ed 2  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _  1  _ id    =    ed 1  _  1  . getId (  )  ;", "ed 1  _  2  _ id    =    ed 1  _  2  . getId (  )  ;", "ed 2  _  1  _ id    =    ed 2  _  1  . getId (  )  ;", "ed 2  _  2  _ id    =    ed 2  _  2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOwnerHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     \" owner \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testOwnerSecEntityHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     \" references 1  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     \" references 1  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     \" references 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     \" references 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferences1HasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     \" references 2  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     \" references 2  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     \" references 2  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     \" references 2  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferences2HasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedDoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sse 1     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1  . getEnums 1  (  )  . add ( Entity . E 1  . X )  ;", "sse 1  . getEnums 2  (  )  . add ( Entity . E 2  . A )  ;", "em . persist ( sse 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 1  . getEnums 1  (  )  . add ( Entity . E 1  . Y )  ;", "sse 1  . getEnums 2  (  )  . remove ( Entity . E 2  . B )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 1  . getEnums 1  (  )  . remove ( Entity . E 1  . X )  ;", "sse 1  . getEnums 2  (  )  . add ( Entity . E 2  . A )  ;", "em . getTransaction (  )  . commit (  )  ;", "sse 1  _ id    =    sse 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedEnumSet"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( EnumSetEntity . class ,    sse 1  _ id ,     \" enums 1  \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( EnumSetEntity . class ,    sse 1  _ id ,     \" enums 2  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( EnumSetEntity . class ,    sse 1  _ id ,     \" enums 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( EnumSetEntity . class ,    sse 1  _ id ,     \" enums 2  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedEnumSet"}, {"methodBody": ["METHOD_START", "{", "PartialModifiedFlagsEntity   entity    =    new   PartialModifiedFlagsEntity ( HasChangedForDefaultNotUsing . entityId )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . setData (  \" data 1  \"  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . setComp 1  ( new   Component 1  (  \" str 1  \"  ,     \" str 2  \"  )  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . setComp 2  ( new   Component 2  (  \" str 1  \"  ,     \" str 2  \"  )  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "WithModifiedFlagReferencingEntity   withModifiedFlagReferencingEntity    =    new   WithModifiedFlagReferencingEntity ( HasChangedForDefaultNotUsing . refEntityId ,     \" first \"  )  ;", "withModifiedFlagReferencingEntity . setReference ( entity )  ;", "em . persist ( withModifiedFlagReferencingEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "withModifiedFlagReferencingEntity    =    em . find ( WithModifiedFlagReferencingEntity . class ,    HasChangedForDefaultNotUsing . refEntityId )  ;", "withModifiedFlagReferencingEntity . setReference ( null )  ;", "withModifiedFlagReferencingEntity . setSecondReference ( entity )  ;", "em . merge ( withModifiedFlagReferencingEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getStringSet (  )  . add (  \" firstElement \"  )  ;", "entity . getStringSet (  )  . add (  \" secondElement \"  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getStringSet (  )  . remove (  \" secondElement \"  )  ;", "entity . getStringMap (  )  . put (  \" someKey \"  ,     \" someValue \"  )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   strTestEntity    =    new   StrTestEntity (  \" first \"  )  ;", "em . persist ( strTestEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getEntitiesSet (  )  . add ( strTestEntity )  ;", "entity    =    em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity . getEntitiesSet (  )  . remove ( strTestEntity )  ;", "entity . getEntitiesMap (  )  . put (  \" someKey \"  ,    strTestEntity )  ;", "em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "strTestEntity . setStr (  \" second \"  )  ;", "em . merge ( strTestEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedComp1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" comp 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedComp2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" data \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" entitiesMap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     1  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedEntitiesMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" entitiesSet \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     1  0  ,     1  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedEntitiesSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" entitiesSet \"  ,     \" entitiesMap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     1  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedEntitiesSetAndMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" referencing \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  5  ,     6  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedReferencing"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" referencing 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedReferencing2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" stringMap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     8  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedStringMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" stringSet \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     7  ,     8  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedStringSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId ,     \" stringSet \"  ,     \" stringMap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     8  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedStringSetAndMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  (  ( Number )     (  1  )  )  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     1  0  ,     1  1  )  ,    getAuditReader (  )  . getRevisions ( PartialModifiedFlagsEntity . class ,    HasChangedForDefaultNotUsing . entityId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedForDefaultNotUsing"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   imke    =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  \" x \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  \" y \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "imke . getIdmap (  )  . put ( ste 1  . getId (  )  ,    ste 1  )  ;", "em . persist ( imke )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste 2     =    em . find ( StrTestEntity . class ,    ste 2  . getId (  )  )  ;", "imke    =    em . find ( Entity . class ,    imke . getId (  )  )  ;", "imke . getIdmap (  )  . put ( ste 2  . getId (  )  ,    ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "imke _ id    =    imke . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedIdMapKey"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( IdMapKeyEntity . class ,    imke _ id ,     \" idmap \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( IdMapKeyEntity . class ,    imke _ id ,     \" idmap \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedIdMapKey"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . get (  )  . begin (  )  ;", "BasicTestEntity 1    entity    =    new   BasicTestEntity 1  (  \" str 1  \"  ,     1  )  ;", "entityManager . persist ( entity )  ;", "entity . setStr 1  (  \" str 2  \"  )  ;", "entityManager . merge ( entity )  ;", "entityManager . get (  )  . commit (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedInsertUpdateSameTransactionTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( BasicTestEntity 1  . class ,     1  ,     \" long 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testPropertyChangedInsrtUpdateSameTransaction"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedInsertUpdateSameTransactionTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    entity    =    new   BasicTestEntity 1  (  \" str 1  \"  ,     1  )  ;", "em . persist ( entity )  ;", "em . getTransac (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "entity    =    em . find ( BasicTestEntity 1  . class ,    entity . getId (  )  )  ;", "entity . setStr 1  (  \" str 2  \"  )  ;", "entity    =    em . merge ( entity )  ;", "em . flush (  )  ;", "entity . setLong 1  (  2  )  ;", "entity    =    em . merge ( entity )  ;", "em . flush (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedManualFlush"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( BasicTestEntity 1  . class ,    id ,     \" str 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( BasicTestEntity 1  . class ,    id ,     \" long 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedOnDoubleFlush"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedManualFlush"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  )  ;", "ste 1  . setStr (  \" str 1  \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  )  ;", "ste 2  . setStr (  \" str 2  \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   mtocte 1     =    new   ComponentTestEntity ( new   Component ( ste 1  ,     \" data 1  \"  )  )  ;", "em . persist ( mtocte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mtocte 1     =    em . find ( ComponentTestEntity . class ,    mtocte 1  . getId (  )  )  ;", "mtocte 1  . getComp 1  (  )  . setEntity ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "mtocte _ id 1     =    mtocte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ManyToOneComponentTestEntity . class ,    mtocte _ id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( ManyToOneComponentTestEntity . class ,    mtocte _ id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedManyToOneInComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ListRefEdEntity   parent 1     =    new   ListRefEdEntity (  1  ,     \" initial   data \"  )  ;", "parent 1  . setReffering ( new   ArrayList < ListRefIngEntity >  (  )  )  ;", "ListRefEdEntity   parent 2     =    new   ListRefEdEntity (  2  ,     \" initial   data \"  )  ;", "parent 2  . setReffering ( new   ArrayList < ListRefIngEntity >  (  )  )  ;", "em . persist ( parent 1  )  ;", "em . persist ( parent 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "parent 1     =    em . find ( ListRefEdEntity . class ,    parent 1  . getId (  )  )  ;", "ListRefIngEntity   child 1     =    new   ListRefIngEntity (  1  ,     \" initial   data \"  ,    parent 1  )  ;", "em . persist ( child 1  )  ;", "parent 1  . setData (  \" updated   data \"  )  ;", "parent 1     =    em . merge ( parent 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "parent 2     =    em . find ( ListRefEdEntity . class ,    parent 2  . getId (  )  )  ;", "parent 2  . setData (  \" updated   data \"  )  ;", "parent 2     =    em . merge ( parent 2  )  ;", "em . flush (  )  ;", "ListRefIngEntity   child 2     =    new   ListRefIngEntity (  2  ,     \" initial   data \"  ,    parent 2  )  ;", "em . persist ( child 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "parent 1 Id    =    parent 1  . getId (  )  ;", "child 1 Id    =    child 1  . getId (  )  ;", "parent 2 Id    =    parent 2  . getId (  )  ;", "child 2 Id    =    child 2  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedMergeTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ListRefEdEntity . class ,    parent 1 Id ,     \" data \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ListRefEdEntity . class ,    parent 1 Id ,     \" reffering \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ListRefIngEntity . class ,    child 1 Id ,     \" reference \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testOneToManyInsertChildUpdateParent"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedMergeTest"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( ListRefEdEntity . class ,    parent 2 Id ,     \" data \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ListRefEdEntity . class ,    parent 2 Id ,     \" reffering \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( ListRefIngEntity . class ,    child 2 Id ,     \" reference \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testOneToManyUpdateParentInsertChild"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedMergeTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "pc _ id    =     1 L ;", "a 1  _ id    =     1  0 L ;", "a 2  _ id    =     1  0  0 L ;", "em . getTransa (  )  . begin (  )  ;", "PersonalContact   pc    =    new   PersonalContact ( pc _ id ,     \" e \"  ,     \" f \"  )  ;", "Address   a 1     =    new   Address ( a 1  _ id ,     \" a 1  \"  )  ;", "a 1  . setContact ( pc )  ;", "em . persist ( pc )  ;", "em . persist ( a 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "pc    =    em . find ( PersonalContact . class ,    pc _ id )  ;", "Address   a 2     =    new   Address ( a 2  _ id ,     \" a 2  \"  )  ;", "a 2  . setContact ( pc )  ;", "em . persist ( a 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( PersonalContact . class ,    pc _ id ,     \" addresses \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( Address . class ,    a 1  _ id ,     \" contact \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( Address . class ,    a 2  _ id ,     \" contact \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testReferencedEntityHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNotOwnedBidirectional"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    new   BasicTestEntity 1  ( str ,    lng )  ;", "em . persist ( bte 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "return   bte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNullProperties"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     1  )  ;", "id 2     =    addNewEntity ( null ,     2  0  )  ;", "yEntity ( id 1  ,    null ,     1  )  ;", "yEntity ( id 2  ,     \" y 2  \"  ,     2  0  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNullProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    em . find ( BasicTestEntity 1  . class ,    id )  ;", "bte 1  . setLong 1  ( lng )  ;", "bte 1  . setStr 1  ( str )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["modifyEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNullProperties"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 1  ,     \" str 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 1  ,     \" long 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 2  ,     \" str 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  4  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 2  ,     \" long 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( BasicTestEntity 1  . class ,    false ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . hasChanged (  )  )  . add ( AuditEntity . property (  \" long 1  \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedNullProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste 1     =    new   StrTestEntity (  )  ;", "ste 1  . setStr (  \" str 1  \"  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  )  ;", "ste 2  . setStr (  \" str 2  \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ComponentTestEntity   otmcte 1     =    new   ComponentTestEntity ( new   Component (  \" data 1  \"  )  )  ;", "otmcte 1  . getComp 1  (  )  . getEntities (  )  . add ( ste 1  )  ;", "em . persist ( otmcte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "otmcte 1     =    em . find ( ComponentTestEntity . class ,    otmcte 1  . getId (  )  )  ;", "otmcte 1  . getComp 1  (  )  . getEntities (  )  . add ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "otmcte _ id 1     =    otmcte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedOneToManyInComponent"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( OneToManyComponentTestEntity . class ,    otmcte _ id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( OneToManyComponentTestEntity . class ,    otmcte _ id 1  ,     \" comp 1  \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedId1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedOneToManyInComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sme 1     =    new   Entity (  )  ;", "Entity   sme 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" a \"  )  ;", "em . persist ( sme 1  )  ;", "em . persist ( sme 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . put (  \"  1  \"  ,     \" a \"  )  ;", "sme 1  . getStrings (  )  . put (  \"  2  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . remove (  \"  1  \"  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sme 1     =    em . find ( Entity . class ,    sme 1  . getId (  )  )  ;", "sme 2     =    em . find ( Entity . class ,    sme 2  . getId (  )  )  ;", "sme 1  . getStrings (  )  . remove (  \"  3  \"  )  ;", "sme 2  . getStrings (  )  . put (  \"  1  \"  ,     \" b \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "sme 1  _ id    =    sme 1  . getId (  )  ;", "sme 2  _ id    =    sme 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedStringMap"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( StringMapEntity . class ,    sme 1  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  3  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( StringMapEntity . class ,    sme 2  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( StringMapEntity . class ,    sme 1  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( StringMapEntity . class ,    sme 2  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedStringMap"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Entity   sse 1     =    new   Entity (  )  ;", "Entity   sse 2     =    new   Entity (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 1  \"  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 2  \"  )  ;", "em . persist ( sse 1  )  ;", "em . persist ( sse 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 2     =    em . find ( Entity . class ,    sse 2  . getId (  )  )  ;", "sse 1  . getStrings (  )  . add (  \" sse 1  _ string 1  \"  )  ;", "sse 1  . getStrings (  )  . add (  \" sse 1  _ string 2  \"  )  ;", "sse 2  . getStrings (  )  . add (  \" sse 2  _ string 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "sse 1     =    em . find ( Entity . class ,    sse 1  . getId (  )  )  ;", "sse 2     =    em . find ( Entity . class ,    sse 2  . getId (  )  )  ;", "sse 1  . getStrings (  )  . remove (  \" sse 1  _ string 3  \"  )  ;", "sse 2  . getStrings (  )  . remove (  \" sse 2  _ string 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "sse 1  _ id    =    sse 1  . getId (  )  ;", "sse 2  _ id    =    sse 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedStringSet"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( StringSetEntity . class ,    sse 1  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChanged ( StringSetEntity . class ,    sse 2  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     3  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasNotChanged ( StringSetEntity . class ,    sse 1  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "list    =    queryForPropertyHasNotChanged ( StringSetEntity . class ,    sse 2  _ id ,     \" strings \"  )  ;", "Assert . assertEquals (  0  ,    list . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedStringSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 2    bte 2     =    new   BasicTestEntity 2  ( str 1  ,    str 2  )  ;", "em . persist ( bte 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "return   bte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedUnversionedProperties"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     \" a \"  )  ;", "yEntity ( id 1  ,     \" x \"  ,     \" a \"  )  ;", "yEntity ( id 1  ,     \" y \"  ,     \" b \"  )  ;", "yEntity ( id 1  ,     \" y \"  ,     \" c \"  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedUnversionedProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 2    bte 2     =    em . find ( BasicTestEntity 2  . class ,    id )  ;", "bte 2  . setStr 1  ( str 1  )  ;", "bte 2  . setStr 2  ( str 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["modifyEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedUnversionedProperties"}, {"methodBody": ["METHOD_START", "{", "queryForPropertyHasChangedWithDeleted ( BasicTestEntity 2  . class ,    id 1  ,     \" str 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExceptionOnHasChangedQuery"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedUnversionedProperties"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChanged ( BasicTestEntity 2  . class ,    id 1  ,     \" str 1  \"  )  ;", "Assert . assertEquals (  2  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  ,     2  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChangedQuery"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.HasChangedUnversionedProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "BasicTestEntity 1    bte 1     =    new   BasicTestEntity 1  ( str ,    lng )  ;", "em . persist ( bte 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "return   bte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["addNewEntity"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix"}, {"methodBody": ["METHOD_START", "{", "id 1     =    addNewEntity (  \" x \"  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix"}, {"methodBody": ["METHOD_START", "{", "List   list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 1  ,     \" str 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    queryForPropertyHasChangedWithDeleted ( BasicTestEntity 1  . class ,    id 1  ,     \" long 1  \"  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( BasicTestEntity 1  . class ,    false ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . hasChanged (  )  )  . add ( AuditEntity . property (  \" long 1  \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    list . size (  )  )  ;", "Assert . assertEquals ( TestTools . makeList (  1  )  ,    TestTools . extractRevisionNumbers ( list )  )  ;", "}", "METHOD_END"], "methodName": ["testHasChanged"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( TestTools . makeSet (  \" str 1  _ CHANGED \"  ,     \" long 1  _ CHANGED \"  )  ,    TestTools . extractModProperties ( metadata (  )  . getEntityBinding (  \" BasicTestEntity 1  _ AUD \"  )  ,     \"  _ CHANGED \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testModFlagProperties"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   comp 1  ;", "}", "METHOD_END"], "methodName": ["getComp1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   comp 2  ;", "}", "METHOD_END"], "methodName": ["getComp2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   entitiesMap ;", "}", "METHOD_END"], "methodName": ["getEntitiesMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   entitiesSet ;", "}", "METHOD_END"], "methodName": ["getEntitiesSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing 2  ;", "}", "METHOD_END"], "methodName": ["getReferencing2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   stringMap ;", "}", "METHOD_END"], "methodName": ["getStringMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   stringSet ;", "}", "METHOD_END"], "methodName": ["getStringSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 1     =    comp 1  ;", "}", "METHOD_END"], "methodName": ["setComp1"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . comp 2     =    comp 2  ;", "}", "METHOD_END"], "methodName": ["setComp2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . entitiesMap    =    entitiesMap ;", "}", "METHOD_END"], "methodName": ["setEntitiesMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . entitiesSet    =    entitiesSet ;", "}", "METHOD_END"], "methodName": ["setEntitiesSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing 2     =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing2"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . stringMap    =    stringMap ;", "}", "METHOD_END"], "methodName": ["setStringMap"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "this . stringSet    =    stringSet ;", "}", "METHOD_END"], "methodName": ["setStringSet"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.PartialModifiedFlagsEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Professor"}, {"methodBody": ["METHOD_START", "{", "return   students ;", "}", "METHOD_END"], "methodName": ["getStudents"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Professor"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Professor"}, {"methodBody": ["METHOD_START", "{", "this . students    =    students ;", "}", "METHOD_END"], "methodName": ["setStudents"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Professor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Student"}, {"methodBody": ["METHOD_START", "{", "return   professors ;", "}", "METHOD_END"], "methodName": ["getProfessors"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Student"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Student"}, {"methodBody": ["METHOD_START", "{", "this . professors    =    professors ;", "}", "METHOD_END"], "methodName": ["setProfessors"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.Student"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "return   secondReference ;", "}", "METHOD_END"], "methodName": ["getSecondReference"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "this . secondReference    =    reference ;", "}", "METHOD_END"], "methodName": ["setSecondReference"], "fileName": "org.hibernate.envers.test.integration.modifiedflags.entities.WithModifiedFlagReferencingEntity"}, {"methodBody": ["METHOD_START", "{", "return   city ;", "}", "METHOD_END"], "methodName": ["getCity"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "return   landlord ;", "}", "METHOD_END"], "methodName": ["getLandlord"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "return   tenants ;", "}", "METHOD_END"], "methodName": ["getTenants"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "this . city    =    city ;", "}", "METHOD_END"], "methodName": ["setCity"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "this . landlord    =    landlord ;", "}", "METHOD_END"], "methodName": ["setLandlord"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "this . tenants    =    tenants ;", "}", "METHOD_END"], "methodName": ["setTenants"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Address"}, {"methodBody": ["METHOD_START", "{", "return   TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Session   session    =    entityManager . unwrap (  . class )  ;", "final   Query   query    =    session . createSQLQuery (  \" SELECT   uniqueGroup _ id   FROM    _ AUD   ORDER   BY   rev   DESC \"  )  . addScalar (  \" uniqueGroup _ id \"  ,    IntegerType . INSTANCE )  . setMaxResults (  1  )  ;", "final   Object   result    =    query . getSingleResult (  )  ;", "assertNotNull ( result )  ;", "return    (  ( Integer )     ( result )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentAuditUniqueGroupId"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.GroupMemberTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   UniqueGroup   uniqueGroup    =    new   UniqueGroup (  )  ;", "final      groupMember    =    new    (  )  ;", "uniqueGroup . addMember ( groupMember )  ;", "entityManager . persist ( uniqueGroup )  ;", "entityManager . persist ( groupMember )  ;", "uniqueGroupId    =    uniqueGroup . getId (  )  ;", "groupMemberId    =    groupMember . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final      groupMember    =    entityManager . find (  . class ,    groupMemberId )  ;", "final   MultiGroup   multiGroup    =    new   MultiGroup (  )  ;", "groupMember . addMultiGroup ( multiGroup )  ;", "entityManager . persist ( multiGroup )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.GroupMemberTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final      groupMember    =    entityManager . find (  . class ,    groupMemberId )  ;", "assertNotNull ( groupMember )  ;", "assertNotNull ( groupMember . getUniqueGroup (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testUniqueGroupFound"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.GroupMemberTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( uniqueGroupId ,    getCurrentAuditUniqueGroupId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUniqueGroupFromAuditHistory"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.GroupMemberTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Person   lukasz    =    new   Person (  \" Lukasz \"  )  ;", "Person   kinga    =    new   Person (  \" Kinga \"  )  ;", "Address   warsaw    =    new   Address (  \" Warsaw \"  )  ;", "warsaw . getTenants (  )  . add ( lukasz )  ;", "warsaw . setLandlord ( lukasz )  ;", "warsaw . getTenants (  )  . add ( kinga )  ;", "lukasz . getAddresses (  )  . add ( warsaw )  ;", "lukasz . getOwnedAddresses (  )  . add ( warsaw )  ;", "kinga . getAddresses (  )  . add ( warsaw )  ;", "em . persist ( lukasz )  ;", "em . persist ( kinga )  ;", "em . persist ( warsaw )  ;", "em . getTransac (  )  . commit (  )  ;", "lukaszId    =    lukasz . getId (  )  ;", "kingaId    =    kinga . getId (  )  ;", "warsawId    =    warsaw . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "kinga    =    em . find ( Person . class ,    kinga . getId (  )  )  ;", "Address   cracow    =    new   Address (  \" Cracow \"  )  ;", "kinga . getAddresses (  )  . add ( cracow )  ;", "cracow . getTenants (  )  . add ( kinga )  ;", "cracow . setLandlord ( kinga )  ;", "em . persist ( cracow )  ;", "em . getTransac (  )  . commit (  )  ;", "cracowId    =    cracow . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "cracow    =    em . find ( Address . class ,    cracow . getId (  )  )  ;", "cracow . setCity (  \" Krakow \"  )  ;", "em . merge ( cracow )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "lukasz    =    em . find ( Person . class ,    lukasz . getId (  )  )  ;", "lukasz . setName (  \" Lucas \"  )  ;", "em . merge ( lukasz )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "warsaw    =    em . find ( Address . class ,    warsaw . getId (  )  )  ;", "lukasz    =    em . find ( Person . class ,    lukasz . getId (  )  )  ;", "kinga    =    em . find ( Person . class ,    kinga . getId (  )  )  ;", "warsaw . setLandlord ( kinga )  ;", "kinga . getOwnedAddresses (  )  . add ( warsaw )  ;", "lukasz . getOwnedAddresses (  )  . remove ( warsaw )  ;", "em . merge ( warsaw )  ;", "em . merge ( lukasz )  ;", "em . merge ( kinga )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "Address   cracow    =    new   Address (  \" Cracow \"  ,    cracowId )  ;", "Pon   kinga    =    new   Pon (  \" Kinga \"  ,    kingaId )  ;", "cracow . getTenants (  )  . add ( kinga )  ;", "cracow . setLandlord ( kinga )  ;", "Address   ver 2     =    getAuditReader (  )  . find ( Address . class ,    cracowId ,     2  )  ;", "Assert . assertEquals ( cracow ,    ver 2  )  ;", "Assert . assertEquals ( cracow . getTenants (  )  ,    ver 2  . getTenants (  )  )  ;", "Assert . assertEquals ( cracow . getLandlord (  )  . getId (  )  ,    ver 2  . getLandlord (  )  . getId (  )  )  ;", "cracow . setCity (  \" Krakow \"  )  ;", "Address   ver 3     =    getAuditReader (  )  . find ( Address . class ,    cracowId ,     3  )  ;", "Assert . assertEquals ( cracow ,    ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfCracow"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "Person   kinga    =    new   Person (  \" Kinga \"  ,    kingaId )  ;", "Address   warsaw    =    new   Address (  \" Warsaw \"  ,    warsawId )  ;", "kinga . getAddresses (  )  . add ( warsaw )  ;", "Person   ver 1     =    getAuditReader (  )  . find ( Person . class ,    kingaId ,     1  )  ;", "Assert . assertEquals ( kinga ,    ver 1  )  ;", "Assert . assertEquals ( kinga . getAddresses (  )  ,    ver 1  . getAddresses (  )  )  ;", "Assert . assertEquals ( kinga . getOwnedAddresses (  )  ,    ver 1  . getOwnedAddresses (  )  )  ;", "Address   cracow    =    new   Address (  \" Cracow \"  ,    cracowId )  ;", "kinga . getOwnedAddresses (  )  . add ( cracow )  ;", "kinga . getAddresses (  )  . add ( cracow )  ;", "Person   ver 2     =    getAuditReader (  )  . find ( Person . class ,    kingaId ,     2  )  ;", "Assert . assertEquals ( kinga ,    ver 2  )  ;", "Assert . assertEquals ( kinga . getAddresses (  )  ,    ver 2  . getAddresses (  )  )  ;", "Assert . assertEquals ( kinga . getOwnedAddresses (  )  ,    ver 2  . getOwnedAddresses (  )  )  ;", "kinga . getOwnedAddresses (  )  . add ( warsaw )  ;", "cracow . setCity (  \" Krakow \"  )  ;", "Person   ver 5     =    getAuditReader (  )  . find ( Person . class ,    kingaId ,     5  )  ;", "Assert . assertEquals ( Tools . makeSet ( kinga . getAddresses (  )  )  ,    Tools . makeSet ( ver 5  . getAddresses (  )  )  )  ;", "Assert . assertEquals ( Tools . makeSet ( kinga . getOwnedAddresses (  )  )  ,    Tools . makeSet ( ver 5  . getOwnedAddresses (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfKinga"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "Person   lukasz    =    new   Person (  \" Lukasz \"  ,    lukaszId )  ;", "Address   warsaw    =    new   Address (  \" Warsaw \"  ,    warsawId )  ;", "lukasz . getAddresses (  )  . add ( warsaw )  ;", "lukasz . getOwnedAddresses (  )  . add ( warsaw )  ;", "Person   ver 1     =    getAuditReader (  )  . find ( Person . class ,    lukaszId ,     1  )  ;", "Assert . assertEquals ( lukasz ,    ver 1  )  ;", "Assert . assertEquals ( lukasz . getAddresses (  )  ,    ver 1  . getAddresses (  )  )  ;", "Assert . assertEquals ( lukasz . getOwnedAddresses (  )  ,    ver 1  . getOwnedAddresses (  )  )  ;", "lukasz . setName (  \" Lucas \"  )  ;", "Person   ver 4     =    getAuditReader (  )  . find ( Person . class ,    lukaszId ,     4  )  ;", "Assert . assertEquals ( lukasz ,    ver 4  )  ;", "lukasz . getOwnedAddresses (  )  . remove ( warsaw )  ;", "Person   ver 5     =    getAuditReader (  )  . find ( Person . class ,    lukaszId ,     5  )  ;", "Assert . assertEquals ( lukasz . getOwnedAddresses (  )  ,    ver 5  . getOwnedAddresses (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfLukasz"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "Address   warsaw    =    new   Address (  \" Warsaw \"  ,    warsawId )  ;", "Pon   kinga    =    new   Pon (  \" Kinga \"  ,    kingaId )  ;", "Pon   lukasz    =    new   Pon (  \" Lukasz \"  ,    lukaszId )  ;", "warsaw . getTenants (  )  . add ( lukasz )  ;", "warsaw . getTenants (  )  . add ( kinga )  ;", "warsaw . setLandlord ( lukasz )  ;", "Address   ver 1     =    getAuditReader (  )  . find ( Address . class ,    warsawId ,     1  )  ;", "Assert . assertEquals ( warsaw ,    ver 1  )  ;", "Assert . assertEquals ( warsaw . getTenants (  )  ,    ver 1  . getTenants (  )  )  ;", "Assert . assertEquals ( warsaw . getLandlord (  )  . getId (  )  ,    ver 1  . getLandlord (  )  . getId (  )  )  ;", "warsaw . setLandlord ( kinga )  ;", "Address   ver 5     =    getAuditReader (  )  . find ( Address . class ,    warsawId ,     5  )  ;", "Assert . assertEquals ( warsaw . getLandlord (  )  . getId (  )  ,    ver 5  . getLandlord (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfWarsaw"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     4  ,     5  )  ,    getAuditReader (  )  . getRevisions ( Person . class ,    lukaszId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     5  )  ,    getAuditReader (  )  . getRevisions ( Person . class ,    kingaId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     5  )  ,    getAuditReader (  )  . getRevisions ( Address . class ,    warsawId )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Address . class ,    cracowId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.MultipleAssociationsTest"}, {"methodBody": ["METHOD_START", "{", "return   addresses ;", "}", "METHOD_END"], "methodName": ["getAddresses"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "return   ownedAddresses ;", "}", "METHOD_END"], "methodName": ["getOwnedAddresses"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "this . addresses    =    addresses ;", "}", "METHOD_END"], "methodName": ["setAddresses"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "this . ownedAddresses    =    ownedAddresses ;", "}", "METHOD_END"], "methodName": ["setOwnedAddresses"], "fileName": "org.hibernate.envers.test.integration.multiplerelations.Person"}, {"methodBody": ["METHOD_START", "{", "NamingTestEntity 2    nte 1     =    new   NamingTestEntity 2  (  \" data 1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( nte 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "this . id    =    nte 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.AuditColumnNameTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Query   query    =    em . createNativeQuery (  \" select   nte _ data ,    data _ MOD _ different   from    _ test _ entity _  2  _ versions   where   nte _ id    =     : nteId \"  )  ;", "query . setParameter (  \" nteId \"  ,    this . id )  ;", "List < Object [  ]  >    resultList    =    query . getResultList (  )  ;", "Assert . assertNotNull ( resultList )  ;", "Assert . assertTrue (  (  ( resultList . size (  )  )     >     0  )  )  ;", "Object [  ]    result    =    resultList . get (  0  )  ;", "Assert . assertEquals ( result . length ,     2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testColumnName"], "fileName": "org.hibernate.envers.test.integration.naming.AuditColumnNameTest"}, {"methodBody": ["METHOD_START", "{", "NamingTestEntity 1    nte 1     =    new   NamingTestEntity 1  (  \" data 1  \"  )  ;", "NamingTestEntity 1    nte 2     =    new   NamingTestEntity 1  (  \" data 2  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( nte 1  )  ;", "em . persist ( nte 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "nte 1     =    em . find ( NamingTestEntity 1  . class ,    nte 1  . getId (  )  )  ;", "nte 1  . setData (  \" data 1  '  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "nte 2     =    em . find ( NamingTestEntity 1  . class ,    nte 2  . getId (  )  )  ;", "nte 2  . setData (  \" data 2  '  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id 1     =    nte 1  . getId (  )  ;", "id 2     =    nte 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.BasicNaming"}, {"methodBody": ["METHOD_START", "{", "NamingTestEntity 1    ver 1     =    new   NamingTestEntity 1  ( id 1  ,     \" data 1  \"  )  ;", "NamingTestEntity 1    ver 2     =    new   NamingTestEntity 1  ( id 1  ,     \" data 1  '  \"  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 1  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.naming.BasicNaming"}, {"methodBody": ["METHOD_START", "{", "NamingTestEntity 1    ver 1     =    new   NamingTestEntity 1  ( id 2  ,     \" data 2  \"  )  ;", "NamingTestEntity 1    ver 2     =    new   NamingTestEntity 1  ( id 2  ,     \" data 2  '  \"  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 2  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( NamingTestEntity 1  . class ,    id 2  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.naming.BasicNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( NamingTestEntity 1  . class ,    id 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( NamingTestEntity 1  . class ,    id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.BasicNaming"}, {"methodBody": ["METHOD_START", "{", "assert    \" naming _ test _ entity _  1  _ versions \"  . equals ( metadata (  )  . getEntityBinding (  \" NamingTestEntity 1  _ AUD \"  )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableName"], "fileName": "org.hibernate.envers.test.integration.naming.BasicNaming"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" DetachedNamingTestEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.DetachedNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Parent   parent    =    new   Parent (  \" parent \"  )  ;", "Child   child    =    new   Child (  \" child \"  )  ;", "parent . getCollec (  )  . add ( child )  ;", "em . persist ( child )  ;", "em . persist ( parent )  ;", "em . getTransac (  )  . commit (  )  ;", "parentId    =    parent . getId (  )  ;", "childId    =    child . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.EstonianTableAlias"}, {"methodBody": ["METHOD_START", "{", "Parent   parent    =    new   Parent (  \" parent \"  ,    parentId )  ;", "Child   child    =    new   Child (  \" child \"  ,    childId )  ;", "Parent   ver 1     =    getAuditReader (  )  . find ( Parent . class ,    parentId ,     1  )  ;", "Assert . assertEquals ( parent ,    ver 1  )  ;", "Assert . assertEquals ( TestTools . makeSet ( child )  ,    ver 1  . getCollec (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditChildTableAlias"], "fileName": "org.hibernate.envers.test.integration.naming.EstonianTableAlias"}, {"methodBody": ["METHOD_START", "{", "JoinNamingRefEdEntity   ed 1     =    new   JoinNamingRefEdEntity (  \" data 1  \"  )  ;", "JoinNamingRefEdEntity   ed 2     =    new   JoinNamingRefEdEntity (  \" data 2  \"  )  ;", "JoinNamingRefIngEntity   ing 1     =    new   JoinNamingRefIngEntity (  \" x \"  ,    ed 1  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ed 2     =    em . find ( JoinNamingRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1     =    em . find ( JoinNamingRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setData (  \" y \"  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed _ id 1     =    ed 1  . getId (  )  ;", "ed _ id 2     =    ed 2  . getId (  )  ;", "ing _ id 1     =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "JoinNamingRefEdEntity   ver 1     =    new   JoinNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefEdEntity . class ,    ed _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefEdEntity . class ,    ed _ id 1  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "JoinNamingRefEdEntity   ver 1     =    new   JoinNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefEdEntity . class ,    ed _ id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefEdEntity . class ,    ed _ id 2  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "JoinNamingRefIngEntity   ver 1     =    new   JoinNamingRefIngEntity ( ing _ id 1  ,     \" x \"  ,    null )  ;", "JoinNamingRefIngEntity   ver 2     =    new   JoinNamingRefIngEntity ( ing _ id 1  ,     \" y \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . getReference (  )  . equals ( new   JoinNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  )  ;", "assert   getAuditReader (  )  . find ( JoinNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . getReference (  )  . equals ( new   JoinNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columns    =    metadata (  )  . getEntityBinding (  \" JoinNamingRefIngEntity _ AUD \"  )  . getProperty (  \" reference _ id \"  )  . getColumnIterator (  )  ;", "Assert . assertTrue ( columns . hasNext (  )  )  ;", "Assert . assertEquals (  \" jnree _ column _ reference \"  ,    columns . next (  )  . getName (  )  )  ;", "Assert . assertFalse ( columns . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinColumnName"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinNamingRefEdEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinNamingRefEdEntity . class ,    ed _ id 2  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinNamingRefIngEntity . class ,    ing _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNaming"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" JoinNamingRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" JoinNamingRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.JoinNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.NamingTestEntity2"}, {"methodBody": ["METHOD_START", "{", "DetachedNamingTestEntity   uni 1     =    new   DetachedNamingTestEntity (  1  ,     \" data 1  \"  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uni 1  . setCollection ( new   HashSet < StrTestEntity >  (  )  )  ;", "em . persist ( uni 1  )  ;", "em . persist ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uni 1     =    em . find ( DetachedNamingTestEntity . class ,    uni 1  . getId (  )  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "uni 1  . getCollection (  )  . add ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "uni 1  _ id    =    uni 1  . getId (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.OneToManyUnidirectionalNaming"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "DetachedTestEntity   rev 1     =    getAuditReader (  )  . find ( DetachedTestEntity . class ,    uni 1  _ id ,     1  )  ;", "DetachedTestEntity   rev 2     =    getAuditReader (  )  . find ( DetachedTestEntity . class ,    uni 1  _ id ,     2  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert    \" data 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" data 1  \"  . equals ( rev 2  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfUniId1"], "fileName": "org.hibernate.envers.test.integration.naming.OneToManyUnidirectionalNaming"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columns    =    metadata (  )  . getEntityBinding ( OneToManyUnidirectionalNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME )  . getTable (  )  . getColumnIterator (  )  ;", "boolean   id 1 Found    =    false ;", "boolean   id 2 Found    =    false ;", "while    ( columns . hasNext (  )  )     {", "Column   column    =    columns . next (  )  ;", "if    (  \" ID _  1  \"  . equals ( column . getName (  )  )  )     {", "id 1 Found    =    true ;", "}", "if    (  \" ID _  2  \"  . equals ( column . getName (  )  )  )     {", "id 2 Found    =    true ;", "}", "}", "assert   id 1 Found    &  &    id 2 Found ;", "}", "METHOD_END"], "methodName": ["testJoinColumnName"], "fileName": "org.hibernate.envers.test.integration.naming.OneToManyUnidirectionalNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( DetachedNamingTestEntity . class ,    uni 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.OneToManyUnidirectionalNaming"}, {"methodBody": ["METHOD_START", "{", "assert   OneToManyUnidirectionalNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME . equals ( metadata (  )  . getEntityBinding ( OneToManyUnidirectionalNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableName"], "fileName": "org.hibernate.envers.test.integration.naming.OneToManyUnidirectionalNaming"}, {"methodBody": ["METHOD_START", "{", "VersionsJoinTableTestEntity   uni 1     =    new   VersionsJoinTableTestEntity (  1  ,     \" data 1  \"  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uni 1  . setCollection ( new   HashSet < StrTestEntity >  (  )  )  ;", "em . persist ( uni 1  )  ;", "em . persist ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uni 1     =    em . find ( VersionsJoinTableTestEntity . class ,    uni 1  . getId (  )  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "uni 1  . getCollection (  )  . add ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "uni 1  _ id    =    uni 1  . getId (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableNaming"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "TestEntity   rev 1     =    getAuditReader (  )  . find ( TestEntity . class ,    uni 1  _ id ,     1  )  ;", "TestEntity   rev 2     =    getAuditReader (  )  . find ( TestEntity . class ,    uni 1  _ id ,     2  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert    \" data 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" data 1  \"  . equals ( rev 2  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfUniId1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableNaming"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columns    =    metadata (  )  . getEntityBinding ( VersionsJoinTableNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME )  . getTable (  )  . getColumnIterator (  )  ;", "boolean   id 1 Found    =    false ;", "boolean   id 2 Found    =    false ;", "while    ( columns . hasNext (  )  )     {", "Column   column    =    columns . next (  )  ;", "if    (  \" VJT _ ID \"  . equals ( column . getName (  )  )  )     {", "id 1 Found    =    true ;", "}", "if    (  \" STR _ ID \"  . equals ( column . getName (  )  )  )     {", "id 2 Found    =    true ;", "}", "}", "assert   id 1 Found    &  &    id 2 Found ;", "}", "METHOD_END"], "methodName": ["testJoinColumnName"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( VersionsJoinTableTestEntity . class ,    uni 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableNaming"}, {"methodBody": ["METHOD_START", "{", "assert   VersionsJoinTableNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME . equals ( metadata (  )  . getEntityBinding ( VersionsJoinTableNaming . MIDDLE _ VERSIONS _ ENTITY _ NAME )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableName"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableNaming"}, {"methodBody": ["METHOD_START", "{", "return   this . range ;", "}", "METHOD_END"], "methodName": ["getRange"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponent"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   vjrcte    =    new   TestEntity (  )  ;", "em . persist ( vjrcte )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "vjrcte    =    em . find ( TestEntity . class ,    vjrcte . getId (  )  )  ;", "VersionsJoinTableRangeTestEntity   vjtrte    =    new   VersionsJoinTableRangeTestEntity (  )  ;", "vjtrte . setGenericValue (  \" generic 1  \"  )  ;", "vjtrte . setValue (  \" value 1  \"  )  ;", "vjrcte . getComponent 1  (  )  . getRange (  )  . add ( vjtrte )  ;", "VersionsJoinTableRangeTestAlternateEntity   vjtrtae 1     =    new   VersionsJoinTableRangeTestAlternateEntity (  )  ;", "vjtrtae 1  . setGenericValue (  \" generic 2  \"  )  ;", "vjtrtae 1  . setAlternateValue (  \" alternateValue 2  \"  )  ;", "vjrcte . getComponent 2  (  )  . getRange (  )  . add ( vjtrtae 1  )  ;", "Component 1    simpleComponent    =    new   Component 1  (  \" string 1  \"  ,     \" string 2  \"  )  ;", "vjrcte . setComponent 3  ( simpleComponent )  ;", "em . persist ( vjtrte )  ;", "em . persist ( vjtrtae 1  )  ;", "em . persist ( vjrcte )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "vjrcte    =    em . find ( TestEntity . class ,    vjrcte . getId (  )  )  ;", "vjtrte    =    em . find ( VersionsJoinTableRangeTestEntity . class ,    vjtrte . getId (  )  )  ;", "vjtrtae 1     =    em . find ( VersionsJoinTableRangeTestAlternateEntity . class ,    vjtrtae 1  . getId (  )  )  ;", "assert   vjrcte    !  =    null ;", "assert   vjtrte    !  =    null ;", "assert   vjtrtae 1     !  =    null ;", "List < VersionsJoinTableRangeTestEntity >    ent 1 List    =    vjrcte . getComponent 1  (  )  . getRange (  )  ;", "assert    ( ent 1 List . size (  )  )     =  =     1  ;", "assert   vjtrte . equals ( ent 1 List . get (  0  )  )  ;", "List < VersionsJoinTableRangeTestAlternateEntity >    ent 2 List    =    vjrcte . getComponent 2  (  )  . getRange (  )  ;", "assert    ( ent 2 List . size (  )  )     =  =     1  ;", "assert   vjtrtae 1  . equals ( ent 2 List . get (  0  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "vjrcte _ id    =    vjrcte . getId (  )  ;", "vjtrte _ id    =    vjtrte . getId (  )  ;", "vjtrtae _ id 1     =    vjtrtae 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . COMPONENT _  1  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    !  =    null ;", "assert   VersionsJoinTableRangeComponentNamingTest . COMPONENT _  1  _ AUDIT _ JOIN _ TABLE _ NAME . equals ( auditClass . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExpectedTableNameComponent1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . COMPONENT _  2  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    !  =    null ;", "assert   VersionsJoinTableRangeComponentNamingTest . COMPONENT _  2  _ AUDIT _ JOIN _ TABLE _ NAME . equals ( auditClass . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExpectedTableNameComponent2"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "VersionsJoinTableRangeTestEntity   vjtrte    =    getEntityManager (  )  . find ( VersionsJoinTableRangeTestEntity . class ,    vjtrte _ id )  ;", "VersionsJoinTableRangeTestAlternateEntity   vjtrtae    =    getEntityManager (  )  . find ( VersionsJoinTableRangeTestAlternateEntity . class ,    vjtrtae _ id 1  )  ;", "TestEntity   rev 1     =    getAuditReader (  )  . find ( TestEntity . class ,    vjrcte _ id ,     1  )  ;", "TestEntity   rev 2     =    getAuditReader (  )  . find ( TestEntity . class ,    vjrcte _ id ,     2  )  ;", "assert    ( rev 1  . getComponent 1  (  )  . getRange (  )  . size (  )  )     =  =     0  ;", "assert    ( rev 1  . getComponent 2  (  )  . getRange (  )  . size (  )  )     =  =     0  ;", "assert    ( rev 2  . getComponent 1  (  )  . getRange (  )  . size (  )  )     =  =     1  ;", "assert   rev 2  . getComponent 1  (  )  . getRange (  )  . get (  0  )  . equals ( vjtrte )  ;", "assert    ( rev 2  . getComponent 2  (  )  . getRange (  )  . size (  )  )     =  =     1  ;", "assert   rev 2  . getComponent 2  (  )  . getRange (  )  . get (  0  )  . equals ( vjtrtae )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfUniId1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . COMPONENT _  1  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    !  =    null ;", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "Iterator < Column >    columns    =    auditClass . getTable (  )  . getColumnIterator (  )  ;", "boolean   id 1 Found    =    false ;", "boolean   id 2 Found    =    false ;", "while    ( columns . hasNext (  )  )     {", "Column   column    =    columns . next (  )  ;", "if    (  \" VJTRCTE 1  _ ID \"  . equals ( column . getName (  )  )  )     {", "id 1 Found    =    true ;", "}", "if    (  \" VJTRTE _ ID \"  . equals ( column . getName (  )  )  )     {", "id 2 Found    =    true ;", "}", "}", "assert   id 1 Found    &  &    id 2 Found ;", "}", "METHOD_END"], "methodName": ["testJoinColumnNamesComponent1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . COMPONENT _  2  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    !  =    null ;", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "Iterator < Column >    columns    =    auditClass . getTable (  )  . getColumnIterator (  )  ;", "boolean   id 1 Found    =    false ;", "boolean   id 2 Found    =    false ;", "while    ( columns . hasNext (  )  )     {", "Column   column    =    columns . next (  )  ;", "if    (  \" VJTRCTE 2  _ ID \"  . equals ( column . getName (  )  )  )     {", "id 1 Found    =    true ;", "}", "if    (  \" VJTRTAE _ ID \"  . equals ( column . getName (  )  )  )     {", "id 2 Found    =    true ;", "}", "}", "assert   id 1 Found    &  &    id 2 Found ;", "}", "METHOD_END"], "methodName": ["testJoinColumnNamesComponent2"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding (  (  ( VersionsJoinTableRangeComponentTestEntity . class . getName (  )  )     +     \"  _ AUD \"  )  )  ;", "assert   auditClass    !  =    null ;", "@ SuppressWarnings (  {     \" unchecked \"     }  )", "Iterator < Column >    columns    =    auditClass . getTable (  )  . getColumnIterator (  )  ;", "boolean   auditColumn 1 Found    =    false ;", "boolean   auditColumn 2 Found    =    false ;", "while    ( columns . hasNext (  )  )     {", "Column   column    =    columns . next (  )  ;", "if    (  \" STR 1  \"  . equals ( column . getName (  )  )  )     {", "auditColumn 1 Found    =    true ;", "}", "if    (  \" STR 2  \"  . equals ( column . getName (  )  )  )     {", "auditColumn 2 Found    =    true ;", "}", "}", "assert   auditColumn 1 Found    &  &     (  ! auditColumn 2 Found )  ;", "}", "METHOD_END"], "methodName": ["testOverrideNotAudited"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( VersionsJoinTableRangeComponentTestEntity . class ,    vjrcte _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( VersionsJoinTableRangeTestEntity . class ,    vjtrte _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( VersionsJoinTableRangeTestAlternateEntity . class ,    vjtrtae _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . UNMODIFIED _ COMPONENT _  1  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    =  =    null ;", "}", "METHOD_END"], "methodName": ["testWrongTableNameComponent1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   auditClass    =    metadata (  )  . getEntityBinding ( VersionsJoinTableRangeComponentNamingTest . UNMODIFIED _ COMPONENT _  2  _ AUDIT _ JOIN _ TABLE _ NAME )  ;", "assert   auditClass    =  =    null ;", "}", "METHOD_END"], "methodName": ["testWrongTableNameComponent2"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentNamingTest"}, {"methodBody": ["METHOD_START", "{", "return   component 1  ;", "}", "METHOD_END"], "methodName": ["getComponent1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   component 2  ;", "}", "METHOD_END"], "methodName": ["getComponent2"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   component 3  ;", "}", "METHOD_END"], "methodName": ["getComponent3"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . component 1     =    component 1  ;", "}", "METHOD_END"], "methodName": ["setComponent1"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . component 2     =    component 2  ;", "}", "METHOD_END"], "methodName": ["setComponent2"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . component 3     =    component 3  ;", "}", "METHOD_END"], "methodName": ["setComponent3"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeComponentTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   alternateValue ;", "}", "METHOD_END"], "methodName": ["getAlternateValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestAlternateEntity"}, {"methodBody": ["METHOD_START", "{", "this . alternateValue    =    alternateValue ;", "}", "METHOD_END"], "methodName": ["setAlternateValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestAlternateEntity"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   genericValue ;", "}", "METHOD_END"], "methodName": ["getGenericValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntitySuperClass"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntitySuperClass"}, {"methodBody": ["METHOD_START", "{", "this . genericValue    =    genericValue ;", "}", "METHOD_END"], "methodName": ["setGenericValue"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntitySuperClass"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableRangeTestEntitySuperClass"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   collection ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . collection    =    collection ;", "}", "METHOD_END"], "methodName": ["setCollection"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" VersionsJoinTableTestEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.VersionsJoinTableTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "embId    =     (  (  )     ( o )  )  ;", "if    (  ( x )     !  =    null    ?     !  ( x . equals ( embId . x )  )     :     ( embId . x )     !  =    null )     {", "return   false ;", "}", "if    (  ( y )     !  =    null    ?     !  ( y . equals ( embId . y )  )     :     ( embId . y )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "return   x ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "return   y ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( x )     !  =    null )     ?    x . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( y )     !  =    null    ?    y . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "this . x    =    x ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "this . y    =    y ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" EmbIdNaming (  \"     +     ( x )  )     +     \"  ,     \"  )     +     ( y )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.EmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "ed _ id 1     =    new   EmbIdNaming (  1  0  ,     2  0  )  ;", "ed _ id 2     =    new   EmbIdNaming (  1  1  ,     2  1  )  ;", "ing _ id 1     =    new   EmbIdNaming (  1  2  ,     2  2  )  ;", "RefEdEntity   ed 1     =    new   RefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  ;", "RefEdEntity   ed 2     =    new   RefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity ( ing _ id 1  ,     \" x \"  ,    ed 1  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1     =    em . find ( RefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setData (  \" y \"  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinEmbIdNamingRefEdEntity   ver 1     =    new   JoinEmbIdNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 1  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinEmbIdNamingRefEdEntity   ver 1     =    new   JoinEmbIdNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 2  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinEmbIdNamingRefIngEntity   ver 1     =    new   JoinEmbIdNamingRefIngEntity ( ing _ id 1  ,     \" x \"  ,    null )  ;", "JoinEmbIdNamingRefIngEntity   ver 2     =    new   JoinEmbIdNamingRefIngEntity ( ing _ id 1  ,     \" y \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . getReference (  )  . equals ( new   JoinEmbIdNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  )  ;", "assert   getAuditReader (  )  . find ( JoinEmbIdNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . getReference (  )  . equals ( new   JoinEmbIdNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columns    =    metadata (  )  . getEntityBinding (  \" JoinEmbIdNamingRefIngEntity _ AUD \"  )  . getProperty (  \" reference _ x \"  )  . getColumnIterator (  )  ;", "Assert . assertTrue ( columns . hasNext (  )  )  ;", "Assert . assertEquals (  \" XX _ reference \"  ,    columns . next (  )  . getName (  )  )  ;", "Assert . assertFalse ( columns . hasNext (  )  )  ;", "columns    =    metadata (  )  . getEntityBinding (  \" JoinEmbIdNamingRefIngEntity _ AUD \"  )  . getProperty (  \" reference _ y \"  )  . getColumnIterator (  )  ;", "Assert . assertTrue ( columns . hasNext (  )  )  ;", "Assert . assertEquals (  \" YY _ reference \"  ,    columns . next (  )  . getName (  )  )  ;", "Assert . assertFalse ( columns . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinColumnNames"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinEmbIdNamingRefEdEntity . class ,    ed _ id 2  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinEmbIdNamingRefIngEntity . class ,    ing _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNaming"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" JoinEmbIdNamingRefEdEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" JoinEmbIdNamingRefIngEntity ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinEmbIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "ed _ id 1     =    new   MulIdNaming (  1  0  ,     2  0  )  ;", "ed _ id 2     =    new   MulIdNaming (  1  1  ,     2  1  )  ;", "ing _ id 1     =    new   MulIdNaming (  1  2  ,     2  2  )  ;", "RefEdEntity   ed 1     =    new   RefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  ;", "RefEdEntity   ed 2     =    new   RefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity ( ing _ id 1  ,     \" x \"  ,    ed 1  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed _ id 2  )  ;", "ing 1     =    em . find ( RefIngEntity . class ,    ing _ id 1  )  ;", "ing 1  . setData (  \" y \"  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinMulIdNamingRefEdEntity   ver 1     =    new   JoinMulIdNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 1  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinMulIdNamingRefEdEntity   ver 1     =    new   JoinMulIdNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 2  ,     2  )  . equals ( ver 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "JoinMulIdNamingRefIngEntity   ver 1     =    new   JoinMulIdNamingRefIngEntity ( ing _ id 1  ,     \" x \"  ,    null )  ;", "JoinMulIdNamingRefIngEntity   ver 2     =    new   JoinMulIdNamingRefIngEntity ( ing _ id 1  ,     \" y \"  ,    null )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefIngEntity . class ,    ing _ id 1  ,     1  )  . getReference (  )  . equals ( new   JoinMulIdNamingRefEdEntity ( ed _ id 1  ,     \" data 1  \"  )  )  ;", "assert   getAuditReader (  )  . find ( JoinMulIdNamingRefIngEntity . class ,    ing _ id 1  ,     2  )  . getReference (  )  . equals ( new   JoinMulIdNamingRefEdEntity ( ed _ id 2  ,     \" data 2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columns    =    metadata (  )  . getEntityBinding (  \" JoinMulIdNamingRefIngEntity _ AUD \"  )  . getProperty (  \" reference _ id 1  \"  )  . getColumnIterator (  )  ;", "Assert . assertTrue ( columns . hasNext (  )  )  ;", "Assert . assertEquals (  \" ID 1  _ reference \"  ,    columns . next (  )  . getName (  )  )  ;", "Assert . assertFalse ( columns . hasNext (  )  )  ;", "columns    =    metadata (  )  . getEntityBinding (  \" JoinMulIdNamingRefIngEntity _ AUD \"  )  . getProperty (  \" reference _ id 2  \"  )  . getColumnIterator (  )  ;", "Assert . assertTrue ( columns . hasNext (  )  )  ;", "Assert . assertEquals (  \" ID 2  _ reference \"  ,    columns . next (  )  . getName (  )  )  ;", "Assert . assertFalse ( columns . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinColumnNames"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 1  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinMulIdNamingRefEdEntity . class ,    ed _ id 2  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( JoinMulIdNamingRefIngEntity . class ,    ing _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNaming"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reffering ;", "}", "METHOD_END"], "methodName": ["getReffering"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reffering    =    reffering ;", "}", "METHOD_END"], "methodName": ["setReffering"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" JoinMulIdNamingRefEdEntity ( id 1     =     \"     +     ( id 1  )  )     +     \"  ,    id 2     =     \"  )     +     ( id 2  )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" JoinMulIdNamingRefIngEntity ( id 1     =     \"     +     ( id 1  )  )     +     \"  ,    id 2     =     \"  )     +     ( id 2  )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.JoinMulIdNamingRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "mulId    =     (  (  )     ( o )  )  ;", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( mulId . id 1  )  )     :     ( mulId . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( mulId . id 2  )  )     :     ( mulId . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" MulIdNaming (  \"     +     ( id 1  )  )     +     \"  ,     \"  )     +     ( id 2  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.naming.ids.MulIdNaming"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( data 1  )     !  =    null    ?     !  ( data 1  . equals ( that . data 1  )  )     :     ( that . data 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( data 2  )     !  =    null    ?     !  ( data 2  . equals ( that . data 2  )  )     :     ( that . data 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data 1  )     !  =    null    ?    data 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data 2  )     !  =    null    ?    data 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsEntity"}, {"methodBody": ["METHOD_START", "{", "Iterator < Column >    columnIterator    =    table . getColumnIterator (  )  ;", "while    ( columnIterator . hasNext (  )  )     {", "Column   column    =    columnIterator . next (  )  ;", "if    ( columnName . equals ( column . getName (  )  )  )     {", "return   column ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getColumnByName"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "QuotedFieldsEntity   qfe 1     =    new   QuotedFieldsEntity (  \" data 1  \"  ,     1  )  ;", "QuotedFieldsEntity   qfe 2     =    new   QuotedFieldsEntity (  \" data 2  \"  ,     2  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( qfe 1  )  ;", "em . persist ( qfe 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "qfe 1     =    em . find ( QuotedFieldsEntity . class ,    qfe 1  . getId (  )  )  ;", "qfe 1  . setData 1  (  \" data 1    changed \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "qfe 2     =    em . find ( QuotedFieldsEntity . class ,    qfe 2  . getId (  )  )  ;", "qfe 2  . setData 2  (  3  )  ;", "em . getTransaction (  )  . commit (  )  ;", "qfeId 1     =    qfe 1  . getId (  )  ;", "qfeId 2     =    qfe 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "Table   table    =    metadata (  )  . getEntityBinding (  \" QuotedFieldsEntity _ AUD \"  )  . getTable (  )  ;", "Column   column 1     =    getColumnByName ( table ,     \" id \"  )  ;", "Column   column 2     =    getColumnByName ( table ,     \" data 1  \"  )  ;", "Column   column 3     =    getColumnByName ( table ,     \" data 2  \"  )  ;", "assert   column 1     !  =    null ;", "assert   column 2     !  =    null ;", "assert   column 3     !  =    null ;", "assert   column 1  . isQuoted (  )  ;", "assert   column 2  . isQuoted (  )  ;", "assert   column 3  . isQuoted (  )  ;", "}", "METHOD_END"], "methodName": ["testEscapeEntityField"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "QuotedFieldsEntity   ver 1     =    new   QuotedFieldsEntity ( qfeId 1  ,     \" data 1  \"  ,     1  )  ;", "QuotedFieldsEntity   ver 2     =    new   QuotedFieldsEntity ( qfeId 1  ,     \" data 1    changed \"  ,     1  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 1  ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 1  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "QuotedFieldsEntity   ver 1     =    new   QuotedFieldsEntity ( qfeId 2  ,     \" data 2  \"  ,     2  )  ;", "QuotedFieldsEntity   ver 2     =    new   QuotedFieldsEntity ( qfeId 2  ,     \" data 2  \"  ,     3  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 2  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 2  ,     2  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( QuotedFieldsEntity . class ,    qfeId 2  ,     3  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId2"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( QuotedFieldsEntity . class ,    qfeId 1  )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( QuotedFieldsEntity . class ,    qfeId 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.naming.quotation.QuotedFieldsTest"}, {"methodBody": ["METHOD_START", "{", "return   customer ;", "}", "METHOD_END"], "methodName": ["getCustomer"], "fileName": "org.hibernate.envers.test.integration.naturalid.Account"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Account"}, {"methodBody": ["METHOD_START", "{", "this . customer    =    customer ;", "}", "METHOD_END"], "methodName": ["setCustomer"], "fileName": "org.hibernate.envers.test.integration.naturalid.Account"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Account"}, {"methodBody": ["METHOD_START", "{", "return   accounts ;", "}", "METHOD_END"], "methodName": ["getAccounts"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "return   customerNumber ;", "}", "METHOD_END"], "methodName": ["getCustomerNumber"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "return   devices ;", "}", "METHOD_END"], "methodName": ["getDevices"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "this . accounts    =    accounts ;", "}", "METHOD_END"], "methodName": ["setAccounts"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "this . customerNumber    =    customerNumber ;", "}", "METHOD_END"], "methodName": ["setCustomerNumber"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "this . devices    =    devices ;", "}", "METHOD_END"], "methodName": ["setDevices"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.naturalid.Customer"}, {"methodBody": ["METHOD_START", "{", "return   customer ;", "}", "METHOD_END"], "methodName": ["getCustomer"], "fileName": "org.hibernate.envers.test.integration.naturalid.Device"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Device"}, {"methodBody": ["METHOD_START", "{", "this . customer    =    customer ;", "}", "METHOD_END"], "methodName": ["setCustomer"], "fileName": "org.hibernate.envers.test.integration.naturalid.Device"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.naturalid.Device"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getOrCreateEntityManager (  )  ;", "try    {", "em . getTransac (  )  . begin (  )  ;", "Customer   customer    =    new   Customer (  )  ;", "customer . setCustomerNumber (  \"  1  2  3  4  5  6  7  \"  )  ;", "customer . setName (  \" ACME \"  )  ;", "em . persist ( customer )  ;", "em . getTransac (  )  . commit (  )  ;", "customerId    =    customer . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Device   device    =    new   Device (  )  ;", "device . setCustomer ( customer )  ;", "Account   account    =    new   Account (  )  ;", "account . setCustomer ( customer )  ;", "em . persist ( account )  ;", "em . persist ( device )  ;", "em . getTransac (  )  . commit (  )  ;", "accountId    =    account . getId (  )  ;", "deviceId    =    device . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . remove ( account )  ;", "em . getTransac (  )  . commit (  )  ;", "}    finally    {", "em . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.naturalid.JoinColumnNaturalIdTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  3  ,    getAuditReader (  )  . getRevisions ( Customer . class ,    customerId )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( Account . class ,    accountId )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Device . class ,    deviceId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.naturalid.JoinColumnNaturalIdTest"}, {"methodBody": ["METHOD_START", "{", "final   Customer   customer    =    new   Customer ( customerId ,     \"  1  2  3  4  5  6  7  \"  ,     \" ACME \"  )  ;", "Customer   rev 1     =    getAuditReader (  )  . find ( Customer . class ,    customerId ,     1  )  ;", "Assert . assertEquals ( customer ,    rev 1  )  ;", "final   Account   account    =    new   Account ( accountId ,    customer )  ;", "final   Device   device    =    new   Device ( deviceId ,    customer )  ;", "customer . getAccounts (  )  . add ( account )  ;", "customer . getDevices (  )  . add ( device )  ;", "Customer   rev 2     =    getAuditReader (  )  . find ( Customer . class ,    customerId ,     2  )  ;", "Assert . assertEquals ( customer ,    rev 2  )  ;", "customer . getAccounts (  )  . clear (  )  ;", "Customer   rev 3     =    getAuditReader (  )  . find ( Customer . class ,    customerId ,     3  )  ;", "Assert . assertEquals ( customer ,    rev 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryOfCustomer"], "fileName": "org.hibernate.envers.test.integration.naturalid.JoinColumnNaturalIdTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   dte    =    new   TestEntity (  \" data 1  \"  )  ;", "em . persist ( dte )  ;", "id 1     =    dte . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "dte    =    em . find ( TestEntity . class ,    id 1  )  ;", "dte . setData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertable"}, {"methodBody": ["METHOD_START", "{", "NotInsertableTestEntity   ver 1     =    new   NotInsertableTestEntity ( id 1  ,     \" data 1  \"  ,     \" data 1  \"  )  ;", "NotInsertableTestEntity   ver 2     =    new   NotInsertableTestEntity ( id 1  ,     \" data 2  \"  ,     \" data 2  \"  )  ;", "assert   getAuditReader (  )  . find ( NotInsertableTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( NotInsertableTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertable"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( NotInsertableTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertable"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( dataCopy )     !  =    null    ?     !  ( dataCopy . equals ( that . dataCopy )  )     :     ( that . dataCopy )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   dataCopy ;", "}", "METHOD_END"], "methodName": ["getDataCopy"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( dataCopy )     !  =    null    ?    dataCopy . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . dataCopy    =    dataCopy ;", "}", "METHOD_END"], "methodName": ["setDataCopy"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.NotInsertableTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "mto _ id 1     =     1  ;", "type _ id 1     =     2  ;", "type _ id 2     =     3  ;", "em . getTransaction (  )  . begin (  )  ;", "NotInsertableEntityType   type 1     =    new   NotInsertableEntityType ( type _ id 1  ,     \" type 1  \"  )  ;", "NotInsertableEntityType   type 2     =    new   NotInsertableEntityType ( type _ id 2  ,     \" type 2  \"  )  ;", "em . persist ( type 1  )  ;", "em . persist ( type 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   master    =    new   Entity ( mto _ id 1  ,    type _ id 1  ,    type 1  )  ;", "em . persist ( master )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "master    =    em . find ( Entity . class ,    mto _ id 1  )  ;", "master . setNumber ( type _ id 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertable"}, {"methodBody": ["METHOD_START", "{", "ManyToOneNotInsertableEntity   ver 1     =    getAuditReader (  )  . find ( ManyToOneNotInsertableEntity . class ,    mto _ id 1  ,     1  )  ;", "ManyToOneNotInsertableEntity   ver 2     =    getAuditReader (  )  . find ( ManyToOneNotInsertableEntity . class ,    mto _ id 1  ,     2  )  ;", "ManyToOneNotInsertableEntity   ver 3     =    getAuditReader (  )  . find ( ManyToOneNotInsertableEntity . class ,    mto _ id 1  ,     3  )  ;", "NotInsertableEntityType   type 1     =    getEntityManager (  )  . find ( NotInsertableEntityType . class ,    type _ id 1  )  ;", "NotInsertableEntityType   type 2     =    getEntityManager (  )  . find ( NotInsertableEntityType . class ,    type _ id 2  )  ;", "assert   ver 1     =  =    null ;", "assert   ver 2  . getType (  )  . equals ( type 1  )  ;", "assert   ver 3  . getType (  )  . equals ( type 2  )  ;", "}", "METHOD_END"], "methodName": ["testNotInsertableEntity"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertable"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( NotInsertableEntityType . class ,    type _ id 1  )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( NotInsertableEntityType . class ,    type _ id 2  )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( Entity . class ,    mto _ id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertable"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.ManyToOneNotInsertableEntity"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.NotInsertableEntityType"}, {"methodBody": ["METHOD_START", "{", "return   typeId ;", "}", "METHOD_END"], "methodName": ["getTypeId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.NotInsertableEntityType"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.NotInsertableEntityType"}, {"methodBody": ["METHOD_START", "{", "this . typeId    =    typeId ;", "}", "METHOD_END"], "methodName": ["setTypeId"], "fileName": "org.hibernate.envers.test.integration.notinsertable.manytoone.NotInsertableEntityType"}, {"methodBody": ["METHOD_START", "{", "return   constantData 1  ;", "}", "METHOD_END"], "methodName": ["getConstantData1"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "return   constantData 2  ;", "}", "METHOD_END"], "methodName": ["getConstantData2"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "this . constantData 1     =    constantData 1  ;", "}", "METHOD_END"], "methodName": ["setConstantData1"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "this . constantData 2     =    constantData 2  ;", "}", "METHOD_END"], "methodName": ["setConstantData2"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   entity    =    new   Entity (  \" data \"  ,     \" constant   data    1  \"  ,     \" constant   data    2  \"  )  ;", "em . persist ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( Entity . class ,    entity . getId (  )  )  ;", "entity . setData (  \" modified   data \"  )  ;", "entity . setConstantData 1  ( null )  ;", "em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "entity    =    em . find ( Entity . class ,    entity . getId (  )  )  ;", "entity . setData (  \" another   modified   data \"  )  ;", "entity . setConstantData 2  (  \" invalid   data \"  )  ;", "em . merge ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . refresh ( entity )  ;", "em . remove ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableTest"}, {"methodBody": ["METHOD_START", "{", "PropertyNotUpdatableEntity   delete    =    new   PropertyNotUpdatableEntity (  \" another   modified   data \"  ,     \" constant   data    1  \"  ,     \" constant   data    2  \"  ,    id )  ;", "List < Object >    results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( PropertyNotUpdatableEntity . class ,    true ,    true )  . getResultList (  )  ;", "Assert . assertEquals ( delete ,    results . get (  3  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteState"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableTest"}, {"methodBody": ["METHOD_START", "{", "PropertyNotUpdatableEntity   ver 1     =    new   PropertyNotUpdatableEntity (  \" data \"  ,     \" constant   data    1  \"  ,     \" constant   data    2  \"  ,    id )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( PropertyNotUpdatableEntity . class ,    id ,     1  )  )  ;", "PropertyNotUpdatableEntity   ver 2     =    new   PropertyNotUpdatableEntity (  \" modified   data \"  ,     \" constant   data    1  \"  ,     \" constant   data    2  \"  ,    id )  ;", "Assert . assertEquals ( ver 2  ,    getAuditReader (  )  . find ( PropertyNotUpdatableEntity . class ,    id ,     2  )  )  ;", "PropertyNotUpdatableEntity   ver 3     =    new   PropertyNotUpdatableEntity (  \" another   modified   data \"  ,     \" constant   data    1  \"  ,     \" constant   data    2  \"  ,    id )  ;", "Assert . assertEquals ( ver 3  ,    getAuditReader (  )  . find ( PropertyNotUpdatableEntity . class ,    id ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( PropertyNotUpdatableEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.notupdatable.PropertyNotUpdatableTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "RefEdEntity   ed 1     =    new   RefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "RefEdEntity   ed 2     =    new   RefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity (  3  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "RefIngEntity   ing 2     =    new   RefIngEntity (  4  ,     \" data _ ing _  2  \"  ,    ed 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( RefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 2     =    em . find ( RefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "Set < T >    ret    =    new   HashSet < T >  (  )  ;", "for    ( T   obj    :    objs )     {", "ret . add ( obj )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeSet"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "CollectionRefIngEntity   ing 1     =    getEntityManager (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id )  ;", "CollectionRefIngEntity   ing 2     =    getEntityManager (  )  . find ( CollectionRefIngEntity . class ,    ing 2  _ id )  ;", "CollectionRefEdEntity   rev 1     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "CollectionRefEdEntity   rev 2     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "CollectionRefEdEntity   rev 3     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . containsAll ( makeSet ( ing 1  ,    ing 2  )  )  ;", "assert    ( rev 1  . getReffering (  )  . size (  )  )     =  =     2  ;", "assert   rev 2  . getReffering (  )  . containsAll ( makeSet ( ing 2  )  )  ;", "assert    ( rev 2  . getReffering (  )  . size (  )  )     =  =     1  ;", "assert   rev 3  . getReffering (  )  . containsAll ( Collections . EMPTY _ SET )  ;", "assert    ( rev 3  . getReffering (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "CollectionRefIngEntity   ing 1     =    getEntityManager (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id )  ;", "CollectionRefIngEntity   ing 2     =    getEntityManager (  )  . find ( CollectionRefIngEntity . class ,    ing 2  _ id )  ;", "CollectionRefEdEntity   rev 1     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "CollectionRefEdEntity   rev 2     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "CollectionRefEdEntity   rev 3     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . containsAll ( Collections . EMPTY _ SET )  ;", "assert    ( rev 1  . getReffering (  )  . size (  )  )     =  =     0  ;", "assert   rev 2  . getReffering (  )  . containsAll ( makeSet ( ing 1  )  )  ;", "assert    ( rev 2  . getReffering (  )  . size (  )  )     =  =     1  ;", "assert   rev 3  . getReffering (  )  . containsAll ( makeSet ( ing 1  ,    ing 2  )  )  ;", "assert    ( rev 3  . getReffering (  )  . size (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "CollectionRefEdEntity   ed 1     =    getEntityManager (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id )  ;", "CollectionRefEdEntity   ed 2     =    getEntityManager (  )  . find ( CollectionRefEdEntity . class ,    ed 2  _ id )  ;", "CollectionRefIngEntity   rev 1     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "CollectionRefIngEntity   rev 2     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "CollectionRefIngEntity   rev 3     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "CollectionRefEdEntity   ed 1     =    getEntityManager (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id )  ;", "CollectionRefEdEntity   ed 2     =    getEntityManager (  )  . find ( CollectionRefEdEntity . class ,    ed 2  _ id )  ;", "CollectionRefIngEntity   rev 1     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "CollectionRefIngEntity   rev 2     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "CollectionRefIngEntity   rev 3     =    getAuditReader (  )  . find ( CollectionRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( CollectionRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( CollectionRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( CollectionRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( CollectionRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicCollection"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "RefEdEntity   ed 1     =    new   RefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "RefEdEntity   ed 2     =    new   RefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity (  3  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "RefIngEntity   ing 2     =    new   RefIngEntity (  4  ,     \" data _ ing _  2  \"  ,    ed 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( RefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 2     =    em . find ( RefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( RefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListRefIngEntity . class ,    ing 1  _ id )  ;", "ListRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ListRefIngEntity . class ,    ing 2  _ id )  ;", "ListRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "ListRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "ListRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReffering (  )  ,    ing 1  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReffering (  )  ,    ing 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReffering (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListRefIngEntity . class ,    ing 1  _ id )  ;", "ListRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ListRefIngEntity . class ,    ing 2  _ id )  ;", "ListRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "ListRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "ListRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ListRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "assert   TestTools . checkCollection ( rev 1  . getReffering (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getReffering (  )  ,    ing 1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getReffering (  )  ,    ing 1  ,    ing 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListRefEdEntity   ed 1     =    getEntityManager (  )  . find ( ListRefEdEntity . class ,    ed 1  _ id )  ;", "ListRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ListRefEdEntity . class ,    ed 2  _ id )  ;", "ListRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "ListRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "ListRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "ListRefEdEntity   ed 1     =    getEntityManager (  )  . find ( ListRefEdEntity . class ,    ed 1  _ id )  ;", "ListRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ListRefEdEntity . class ,    ed 2  _ id )  ;", "ListRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "ListRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "ListRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ListRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ListRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ListRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( ListRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( ListRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "SetRefIngEntity   ing 2     =    new   SetRefIngEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ed 1     =    em . find ( SetRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . setReference ( ed 1  )  ;", "ing 2  . setReference ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 2     =    em . find ( SetRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id )  ;", "SetRefIngEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id )  ;", "SetRefEdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "SetRefEdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "SetRefEdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "SetRefEdEntity   rev 4     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReffering (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( TestTools . makeSet ( ing 2  )  )  ;", "assert   rev 4  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id )  ;", "SetRefIngEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id )  ;", "SetRefEdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "SetRefEdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "SetRefEdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "SetRefEdEntity   rev 4     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 3  . getReffering (  )  . equals ( TestTools . makeSet ( ing 1  )  )  ;", "assert   rev 4  . getReffering (  )  . equals ( TestTools . makeSet ( ing 1  ,    ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id )  ;", "SetRefEdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "assert   rev 1     =  =    null ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 4  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id )  ;", "SetRefEdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "assert   rev 1     =  =    null ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 4  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSet"}, {"methodBody": ["METHOD_START", "{", "ed 1  _ id    =    new   EmbId (  0  ,     1  )  ;", "ed 2  _ id    =    new   EmbId (  2  ,     3  )  ;", "ing 2  _ id    =    new   EmbId (  4  ,     5  )  ;", "ing 1  _ id    =    new   EmbId (  6  ,     7  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEmbIdEntity   ed 1     =    new   SetRefEdEmbIdEntity ( ed 1  _ id ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEmbIdEntity   ed 2     =    new   SetRefEdEmbIdEntity ( ed 2  _ id ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEmbIdEntity   ing 1     =    new   SetRefIngEmbIdEntity ( ing 1  _ id ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "SetRefIngEmbIdEntity   ing 2     =    new   SetRefIngEmbIdEntity ( ing 2  _ id ,     \" data _ ing _  2  \"  ,    ed 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngEmbIdEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEmbIdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 2     =    em . find ( SetRefIngEmbIdEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEmbIdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "Set < T >    ret    =    new   HashSet < T >  (  )  ;", "for    ( T   obj    :    objects )     {", "ret . add ( obj )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeSet"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEmbIdEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 1  _ id )  ;", "SetRefIngEmbIdEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 2  _ id )  ;", "SetRefEdEmbIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 1  _ id ,     1  )  ;", "SetRefEdEmbIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 1  _ id ,     2  )  ;", "SetRefEdEmbIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 1  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . equals ( makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 2  . getReffering (  )  . equals ( makeSet ( ing 2  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( Collections . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEmbIdEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 1  _ id )  ;", "SetRefIngEmbIdEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 2  _ id )  ;", "SetRefEdEmbIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 2  _ id ,     1  )  ;", "SetRefEdEmbIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 2  _ id ,     2  )  ;", "SetRefEdEmbIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 2  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collections . EMPTY _ SET )  ;", "assert   rev 2  . getReffering (  )  . equals ( makeSet ( ing 1  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( makeSet ( ing 1  ,    ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEmbIdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 1  _ id )  ;", "SetRefEdEmbIdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 2  _ id )  ;", "SetRefIngEmbIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEmbIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 1  _ id ,     2  )  ;", "SetRefIngEmbIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEmbIdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 1  _ id )  ;", "SetRefEdEmbIdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdEmbIdEntity . class ,    ed 2  _ id )  ;", "SetRefIngEmbIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 2  _ id ,     1  )  ;", "SetRefIngEmbIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 2  _ id ,     2  )  ;", "SetRefIngEmbIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEmbIdEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEmbIdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEmbIdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEmbIdEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEmbIdEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "ed 1  _ id    =    new   MulId (  0  ,     1  )  ;", "ed 2  _ id    =    new   MulId (  2  ,     3  )  ;", "ing 2  _ id    =    new   MulId (  4  ,     5  )  ;", "ing 1  _ id    =    new   MulId (  6  ,     7  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdMulIdEntity   ed 1     =    new   SetRefEdMulIdEntity ( ed 1  _ id . getId 1  (  )  ,    ed 1  _ id . getId 2  (  )  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdMulIdEntity   ed 2     =    new   SetRefEdMulIdEntity ( ed 2  _ id . getId 1  (  )  ,    ed 2  _ id . getId 2  (  )  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngMulIdEntity   ing 1     =    new   SetRefIngMulIdEntity ( ing 1  _ id . getId 1  (  )  ,    ing 1  _ id . getId 2  (  )  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "SetRefIngMulIdEntity   ing 2     =    new   SetRefIngMulIdEntity ( ing 2  _ id . getId 1  (  )  ,    ing 2  _ id . getId 2  (  )  ,     \" data _ ing _  2  \"  ,    ed 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id )  ;", "ed 2     =    em . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 2     =    em . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id )  ;", "ed 2     =    em . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "Set < T >    ret    =    new   HashSet < T >  (  )  ;", "for    ( T   obj    :    objects )     {", "ret . add ( obj )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeSet"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "SetRefIngMulIdEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id )  ;", "SetRefIngMulIdEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id )  ;", "SetRefEdMulIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 1  _ id ,     1  )  ;", "SetRefEdMulIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 1  _ id ,     2  )  ;", "SetRefEdMulIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 1  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . equals ( makeSet ( ing 1  ,    ing 2  )  )  ;", "assert   rev 2  . getReffering (  )  . equals ( makeSet ( ing 2  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( Collections . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "SetRefIngMulIdEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id )  ;", "SetRefIngMulIdEntity   ing 2     =    getEntityManager (  )  . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id )  ;", "SetRefEdMulIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id ,     1  )  ;", "SetRefEdMulIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id ,     2  )  ;", "SetRefEdMulIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id ,     3  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collections . EMPTY _ SET )  ;", "assert   rev 2  . getReffering (  )  . equals ( makeSet ( ing 1  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( makeSet ( ing 1  ,    ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "SetRefEdMulIdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdMulIdEntity . class ,    ed 1  _ id )  ;", "SetRefEdMulIdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id )  ;", "SetRefIngMulIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngMulIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id ,     2  )  ;", "SetRefIngMulIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "SetRefEdMulIdEntity   ed 1     =    getEntityManager (  )  . find ( SetRefEdMulIdEntity . class ,    ed 1  _ id )  ;", "SetRefEdMulIdEntity   ed 2     =    getEntityManager (  )  . find ( SetRefEdMulIdEntity . class ,    ed 2  _ id )  ;", "SetRefIngMulIdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id ,     1  )  ;", "SetRefIngMulIdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id ,     2  )  ;", "SetRefIngMulIdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngMulIdEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdMulIdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdMulIdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngMulIdEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngMulIdEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  3  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "SetRefIngEntity   ing 2     =    new   SetRefIngEntity (  4  ,     \" data _ ing _  2  \"  ,    ed 1  )  ;", "SetRefIngEntity   ing 3     =    new   SetRefIngEntity (  5  ,     \" data _ ing _  3  \"  ,    ed 1  )  ;", "SetRefIngEntity   ing 4     =    new   SetRefIngEntity (  6  ,     \" data _ ing _  4  \"  ,    ed 1  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . persist ( ing 3  )  ;", "em . persist ( ing 4  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 1     =    em . find ( SetRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReference ( null )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 2     =    em . find ( SetRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "em . remove ( ing 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 3     =    em . find ( SetRefIngEntity . class ,    ing 3  . getId (  )  )  ;", "ed 2     =    em . find ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 3  . setReference ( ed 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ing 4     =    em . find ( SetRefIngEntity . class ,    ing 4  . getId (  )  )  ;", "ed 1     =    em . find ( SetRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "em . remove ( ed 1  )  ;", "ing 4  . setReference ( null )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ing 3  _ id    =    ing 3  . getId (  )  ;", "ing 4  _ id    =    ing 4  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "Set < T >    ret    =    new   HashSet < T >  (  )  ;", "for    ( T   obj    :    objects )     {", "ret . add ( obj )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeSet"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEntity   ing 1     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id )  ;", "SetRefIngEntity   ing 2     =    new   SetRefIngEntity (  4  ,     \" data _ ing _  2  \"  ,    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  )  ;", "SetRefIngEntity   ing 3     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id )  ;", "SetRefIngEntity   ing 4     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id )  ;", "SetRefEdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "SetRefEdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "SetRefEdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "SetRefEdEntity   rev 4     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "SetRefEdEntity   rev 5     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     5  )  ;", "assert   rev 1  . getReffering (  )  . equals ( makeSet ( ing 1  ,    ing 2  ,    ing 3  ,    ing 4  )  )  ;", "assert   rev 2  . getReffering (  )  . equals ( makeSet ( ing 2  ,    ing 3  ,    ing 4  )  )  ;", "assert   rev 3  . getReffering (  )  . equals ( makeSet ( ing 3  ,    ing 4  )  )  ;", "assert   rev 4  . getReffering (  )  . equals ( makeSet ( ing 4  )  )  ;", "assert   rev 5     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEntity   ing 3     =    getEntityManager (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id )  ;", "SetRefEdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "SetRefEdEntity   rev 2     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "SetRefEdEntity   rev 3     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "SetRefEdEntity   rev 4     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "SetRefEdEntity   rev 5     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 2  _ id ,     5  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 2  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 3  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "assert   rev 4  . getReffering (  )  . equals ( makeSet ( ing 3  )  )  ;", "assert   rev 5  . getReffering (  )  . equals ( makeSet ( ing 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "SetRefIngEntity   rev 5     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     5  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert    ( rev 2  . getReference (  )  )     =  =    null ;", "assert    ( rev 3  . getReference (  )  )     =  =    null ;", "assert    ( rev 4  . getReference (  )  )     =  =    null ;", "assert    ( rev 5  . getReference (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "SetRefIngEntity   rev 5     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 2  _ id ,     5  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3     =  =    null ;", "assert   rev 4     =  =    null ;", "assert   rev 5     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id ,     4  )  ;", "SetRefIngEntity   rev 5     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 3  _ id ,     5  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 4  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 5  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng3"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefIngEntity   rev 1     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id ,     1  )  ;", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id ,     2  )  ;", "SetRefIngEntity   rev 3     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id ,     3  )  ;", "SetRefIngEntity   rev 4     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id ,     4  )  ;", "SetRefIngEntity   rev 5     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 4  _ id ,     5  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 4  . getReference (  )  . equals ( ed 1  )  ;", "assert    ( rev 5  . getReference (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng4"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 3  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 4  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BasicSetWithNullsDelete"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "RefEdEntity   ed    =    new   RefEdEntity (  )  ;", "em . persist ( ed )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity (  )  ;", "ing 1  . setData (  \" a \"  )  ;", "ing 1  . setReference ( ed )  ;", "RefIngEntity   ing 2     =    new   RefIngEntity (  )  ;", "ing 2  . setData (  \" b \"  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ed    =    em . find ( RefEdEntity . class ,    ed . getId (  )  )  ;", "ing 2     =    em . find ( RefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 2  . setReference ( ed )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed _ id    =    ed . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.BidirectionalMapKey"}, {"methodBody": ["METHOD_START", "{", "RefIngMapKeyEntity   ing 1     =    getEntityManager (  )  . find ( RefIngMapKeyEntity . class ,    ing 1  _ id )  ;", "RefIngMapKeyEntity   ing 2     =    getEntityManager (  )  . find ( RefIngMapKeyEntity . class ,    ing 2  _ id )  ;", "RefEdMapKeyEntity   rev 1     =    getAuditReader (  )  . find ( RefEdMapKeyEntity . class ,    ed _ id ,     1  )  ;", "RefEdMapKeyEntity   rev 2     =    getAuditReader (  )  . find ( RefEdMapKeyEntity . class ,    ed _ id ,     2  )  ;", "assert   rev 1  . getIdmap (  )  . equals ( TestTools . makeMap (  \" a \"  ,    ing 1  )  )  ;", "assert   rev 2  . getIdmap (  )  . equals ( TestTools . makeMap (  \" a \"  ,    ing 1  ,     \" b \"  ,    ing 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd"], "fileName": "org.hibernate.envers.test.integration.onetomany.BidirectionalMapKey"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( RefEdMapKeyEntity . class ,    ed _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( RefIngMapKeyEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( RefIngMapKeyEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.BidirectionalMapKey"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . addChild ( new   Child (  1  ,     \" child 1  \"  )  )  ;", "p . addChild ( new   Child (  2  ,     \" child 2  \"  )  )  ;", "entityManager . persist ( p )  ;", "p . getChildren (  )  . forEach ( entityManager :  : persist )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . removeChild ( p . getChildren (  )  . get (  0  )  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "final   Child   child    =    new   Child (  3  ,     \" child 3  \"  )  ;", "p . getChildren (  )  . add (  0  ,    child )  ;", "child . setParent ( p )  ;", "entityManager . persist ( child )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "while    (  !  ( p . getChildren (  )  . isEmpty (  )  )  )     {", "Child   child    =    p . getChildren (  )  . get (  0  )  ;", "p . removeChild ( child )  ;", "entityManager . remove ( child )  ;", "}", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  1  ,     \" child 1  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  3  ,     \" child 3  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   IndexColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   IndexColumnListTest . Parent   p    =    getAuditReader (  )  . find ( IndexColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Parent . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexColumnListTest . Child . class ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.IndexColumnListTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ed 1     =    em . find ( SetRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "em . persist ( ing 1  )  ;", "ed 1  . setReffering ( new   HashSet < SetRefIngEntity >  (  )  )  ;", "ed 1  . getReffering (  )  . add ( ing 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.InverseSideChanges"}, {"methodBody": ["METHOD_START", "{", "SetRefEdEntity   rev 1     =    getAuditReader (  )  . find ( SetRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "assert   rev 1  . getReffering (  )  . equals ( Collecs . EMPTY _ SET )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetomany.InverseSideChanges"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEntity   rev 2     =    getAuditReader (  )  . find ( SetRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "assert    ( rev 2  . getReference (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.InverseSideChanges"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  2  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefIngEntity . class ,    ing 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.InverseSideChanges"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Parent   p    =    new   Parent (  1  )  ;", "p . addChild ( new   Child (  1  ,     \" child 1  \"  )  )  ;", "p . addChild ( new   Child (  2  ,     \" child 2  \"  )  )  ;", "entityManager . persist ( p )  ;", "p . getChildren (  )  . forEach ( entityManager :  : persist )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "p . removeChild ( p . getChildren (  )  . get (  0  )  )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "final   Child   child    =    new   Child (  3  ,     \" child 3  \"  )  ;", "p . getChildren (  )  . add (  0  ,    child )  ;", "child . setParent ( p )  ;", "entityManager . persist ( child )  ;", "entityManager . merge ( p )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Parent   p    =    entityManager . find (  . class ,     1  )  ;", "while    (  !  ( p . getChildren (  )  . isEmpty (  )  )  )     {", "Child   child    =    p . getChildren (  )  . get (  0  )  ;", "p . removeChild ( child )  ;", "entityManager . remove ( child )  ;", "}", "entityManager . merge ( p )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     1  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  1  ,     \" child 1  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev1"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     2  )  ;", "Assert . assertEquals (  1  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev2"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     3  )  ;", "Assert . assertEquals (  2  ,    p . getChildren (  )  . size (  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  3  ,     \" child 3  \"  ,    p )  ,    p . getChildren (  )  . get (  0  )  )  ;", "Assert . assertEquals ( new   OrderColumnListTest . Child (  2  ,     \" child 2  \"  ,    p )  ,    p . getChildren (  )  . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev3"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "final   OrderColumnListTest . Parent   p    =    getAuditReader (  )  . find ( OrderColumnListTest . Parent . class ,     1  ,     4  )  ;", "Assert . assertEquals (  0  ,    p . getChildren (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexedCollectionRev4"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Parent . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     2  )  )  ;", "Assert . assertEquals ( Arrays . asList (  3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( OrderColumnListTest . Child . class ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.OrderColumnListTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   idmap ;", "}", "METHOD_END"], "methodName": ["getIdmap"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . idmap    =    idmap ;", "}", "METHOD_END"], "methodName": ["setIdmap"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" RedMKE ( id    =     \"     +     ( id )  )     +     \"  ,    idmap    =     \"  )     +     ( idmap )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefEdMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    ( id )     !  =    null    ?    id . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" RingMKE ( id    =     \"     +     ( id )  )     +     \"  ,    data    =     \"  )     +     ( data )  )     +     \"  ,    reference    =     \"  )     +     ( reference )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.onetomany.RefIngMapKeyEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   str 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "RefCollEntity   coll 1     =    new   RefCollEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollection ( new   Array < StrTestEntity >  (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 2     =    em . find ( StrTestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( RefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( RefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . remove ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "coll 1     =    em . find ( RefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . clear (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedList"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "StrTestEntity   str 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 2  _ id )  ;", "RefCollEntity   rev 1     =    getAuditReader (  )  . find ( RefCollEntity . class ,    coll 1  _ id ,     1  )  ;", "RefCollEntity   rev 2     =    getAuditReader (  )  . find ( RefCollEntity . class ,    coll 1  _ id ,     2  )  ;", "RefCollEntity   rev 3     =    getAuditReader (  )  . find ( RefCollEntity . class ,    coll 1  _ id ,     3  )  ;", "RefCollEntity   rev 4     =    getAuditReader (  )  . find ( RefCollEntity . class ,    coll 1  _ id ,     4  )  ;", "assert   TestTools . checkCollection ( rev 1  . getCollection (  )  ,    str 1  )  ;", "assert   TestTools . checkCollection ( rev 2  . getCollection (  )  ,    str 1  ,    str 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getCollection (  )  ,    str 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getCollection (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedList"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ListRefCollEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   str 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollec ( new   HashSet < StrTestEntity >  (  )  )  ;", "coll 1  . getCollec (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "str 2     =    em . find ( StrTestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollec (  )  . add ( str 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollec (  )  . remove ( str 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollec (  )  . clear (  )  ;", "em . getTransac (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSet"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "StrTestEntity   str 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 2  _ id )  ;", "SetRefCollEntity   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntity   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     2  )  ;", "SetRefCollEntity   rev 3     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     3  )  ;", "SetRefCollEntity   rev 4     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     4  )  ;", "assert   rev 1  . getCollec (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert   rev 2  . getCollec (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "assert   rev 3  . getCollec (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 4  . getCollec (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefCollEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "str 1  _ id    =    new    (  1  ,     2  )  ;", "str 2  _ id    =    new    (  3  ,     4  )  ;", "coll 1  _ id    =    new    (  5  ,     6  )  ;", "TestEntity   str 1     =    new   TestEntity ( str 1  _ id ,     \" str 1  \"  )  ;", "TestEntity   str 2     =    new   TestEntity ( str 2  _ id ,     \" str 2  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity ( coll 1  _ id ,     \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollection ( new   HashSet < TestEntity >  (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 2     =    em . find ( TestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 1     =    em . find ( TestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . remove ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . clear (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "EmbIdTestEntity   str 1     =    getEntityManager (  )  . find ( EmbIdTestEntity . class ,    str 1  _ id )  ;", "EmbIdTestEntity   str 2     =    getEntityManager (  )  . find ( EmbIdTestEntity . class ,    str 2  _ id )  ;", "SetRefCollEntityEmbId   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntityEmbId . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntityEmbId   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntityEmbId . class ,    coll 1  _ id ,     2  )  ;", "SetRefCollEntityEmbId   rev 3     =    getAuditReader (  )  . find ( SetRefCollEntityEmbId . class ,    coll 1  _ id ,     3  )  ;", "SetRefCollEntityEmbId   rev 4     =    getAuditReader (  )  . find ( SetRefCollEntityEmbId . class ,    coll 1  _ id ,     4  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "assert   rev 3  . getCollection (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 4  . getCollection (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefCollEntityEmbId . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( EmbIdTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithEmbId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "str 1  _ id    =    new    (  1  ,     2  )  ;", "str 2  _ id    =    new    (  3  ,     4  )  ;", "coll 1  _ id    =    new    (  5  ,     6  )  ;", "TestEntity   str 1     =    new   TestEntity ( str 1  _ id . getId 1  (  )  ,    str 1  _ id . getId 2  (  )  ,     \" str 1  \"  )  ;", "TestEntity   str 2     =    new   TestEntity ( str 2  _ id . getId 1  (  )  ,    str 2  _ id . getId 2  (  )  ,     \" str 2  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity ( coll 1  _ id . getId 1  (  )  ,    coll 1  _ id . getId 2  (  )  ,     \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollection ( new   HashSet < TestEntity >  (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 2     =    em . find ( TestEntity . class ,    str 2  _ id )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  _ id )  ;", "coll 1  . getCollection (  )  . add ( str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 1     =    em . find ( TestEntity . class ,    str 1  _ id )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  _ id )  ;", "coll 1  . getCollection (  )  . remove ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  _ id )  ;", "coll 1  . getCollection (  )  . clear (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "MulIdTestEntity   str 1     =    getEntityManager (  )  . find ( MulIdTestEntity . class ,    str 1  _ id )  ;", "MulIdTestEntity   str 2     =    getEntityManager (  )  . find ( MulIdTestEntity . class ,    str 2  _ id )  ;", "SetRefCollEntityMulId   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntityMulId . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntityMulId   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntityMulId . class ,    coll 1  _ id ,     2  )  ;", "SetRefCollEntityMulId   rev 3     =    getAuditReader (  )  . find ( SetRefCollEntityMulId . class ,    coll 1  _ id ,     3  )  ;", "SetRefCollEntityMulId   rev 4     =    getAuditReader (  )  . find ( SetRefCollEntityMulId . class ,    coll 1  _ id ,     4  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "assert   rev 3  . getCollection (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 4  . getCollection (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefCollEntityMulId . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( MulIdTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( MulIdTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicDetachedSetWithMulId"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   str 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollection ( new   HashSet < StrTestEntity >  (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 2     =    em . find ( StrTestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . remove ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . clear (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicJoinColumnSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "StrTestEntity   str 1     =    entityManager . find ( StrTestEntity . class ,    str 1  _ id )  ;", "StrTestEntity   str 2     =    entityManager . find ( StrTestEntity . class ,    str 2  _ id )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "SetRefCollEntity   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntity   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     2  )  ;", "SetRefCollEntity   rev 3     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     3  )  ;", "SetRefCollEntity   rev 4     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     4  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "assert   rev 3  . getCollection (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 4  . getCollection (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 2  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 3  . getData (  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 4  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicJoinColumnSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( SetJoinColumnRefCollEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.BasicJoinColumnSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "coll 1  . setCollec ( new   HashSet < StrTestEntity >  (  )  )  ;", "em . persist ( coll 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollec (  )  . add ( str 1  )  ;", "coll 1  . setData (  \" coll 2  \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DataChangesDetachedSet"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "SetRefCollEntity   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntity   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     2  )  ;", "assert   rev 1  . getCollec (  )  . equals ( TestTools . makeSet (  )  )  ;", "assert   rev 2  . getCollec (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert    \" coll 1  \"  . equals ( rev 1  . getData (  )  )  ;", "assert    \" coll 2  \"  . equals ( rev 2  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DataChangesDetachedSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SetRefCollEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DataChangesDetachedSet"}, {"methodBody": ["METHOD_START", "{", "ListRefCollEntity   parent    =    new   ListRefCollEntity ( parentId ,     \" initial   data \"  )  ;", "parent . setCollec ( Arrays . asList ( new   StrTestEntity (  \" data \"  ,    childId )  )  )  ;", "ListRefCollEntity   ver 1     =    getAuditReader (  )  . find ( ListRefCollEntity . class ,    parentId ,     1  )  ;", "Assert . assertEquals ( parent ,    ver 1  )  ;", "Assert . assertEquals ( parent . getCollec (  )  ,    ver 1  . getCollec (  )  )  ;", "parent . setData (  \" modified   data \"  )  ;", "ListRefCollEntity   ver 2     =    getAuditReader (  )  . find ( ListRefCollEntity . class ,    parentId ,     2  )  ;", "Assert . assertEquals ( parent ,    ver 2  )  ;", "Assert . assertEquals ( parent . getCollec (  )  ,    ver 2  . getCollec (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DetachedTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ListRefCollEntity . class ,    parentId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrEntity . class ,    childId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DetachedTest"}, {"methodBody": ["METHOD_START", "{", "Sesssess =    getSess )  ;", "sessgetTransact )  . begin (  )  ;", "ListRefCollEntity   parent    =    new   ListRefCollEntity (  1  ,     \" initial   data \"  )  ;", "StrTestEntity   child    =    new   StrTestEntity (  \" data \"  )  ;", "sesssave ( child )  ;", "parent . setCollectArrays . asList ( child )  )  ;", "sesssave ( parent )  ;", "sessgetTransact )  . commit (  )  ;", "sessclose (  )  ;", "sess =    getSess )  ;", "sessgetTransact )  . begin (  )  ;", "parent . setData (  \" modified   data \"  )  ;", "sessupdate ( parent )  ;", "sessgetTransact )  . commit (  )  ;", "sessclose (  )  ;", "parentId    =    parent . getId (  )  ;", "childId    =    child . getId (  )  ;", "}", "METHOD_END"], "methodName": ["testUpdatingDetachedEntityWithRelation"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DetachedTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "StrTestEntity   str 1     =    new   StrTestEntity (  \" str 1  \"  )  ;", "StrTestEntity   str 2     =    new   StrTestEntity (  \" str 2  \"  )  ;", "SetRefCollEntity   coll 1     =    new   SetRefCollEntity (  3  ,     \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( str 1  )  ;", "em . persist ( str 2  )  ;", "coll 1  . setCollection ( new   HashSet < StrTestEntity >  (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 1  )  ;", "em . persist ( coll 1  )  ;", "coll 1  . setCollection 2  ( new   HashSet < StrTestEntity >  (  )  )  ;", "coll 1  . getCollection 2  (  )  . add ( str 2  )  ;", "em . persist ( coll 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 2     =    em . find ( StrTestEntity . class ,    str 2  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . add ( str 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "str 1     =    em . find ( StrTestEntity . class ,    str 1  . getId (  )  )  ;", "coll 1     =    em . find ( SetRefCollEntity . class ,    coll 1  . getId (  )  )  ;", "coll 1  . getCollection (  )  . remove ( str 1  )  ;", "coll 1  . getCollection 2  (  )  . add ( str 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "str 1  _ id    =    str 1  . getId (  )  ;", "str 2  _ id    =    str 2  . getId (  )  ;", "coll 1  _ id    =    coll 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleDetachedSet"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   str 1     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 1  _ id )  ;", "StrTestEntity   str 2     =    getEntityManager (  )  . find ( StrTestEntity . class ,    str 2  _ id )  ;", "SetRefCollEntity   rev 1     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     1  )  ;", "SetRefCollEntity   rev 2     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     2  )  ;", "SetRefCollEntity   rev 3     =    getAuditReader (  )  . find ( SetRefCollEntity . class ,    coll 1  _ id ,     3  )  ;", "assert   rev 1  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  )  )  ;", "assert   rev 2  . getCollection (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "assert   rev 3  . getCollection (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 1  . getCollection 2  (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 2  . getCollection 2  (  )  . equals ( TestTools . makeSet ( str 2  )  )  ;", "assert   rev 3  . getCollection 2  (  )  . equals ( TestTools . makeSet ( str 1  ,    str 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfColl1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleDetachedSet"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( DoubleSetRefCollEntity . class ,    coll 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    str 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleDetachedSet"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "DoubleListRefEdEntity 1    ed 1  _  1     =    new   DoubleListRefEdEntity 1  (  \" ed 1  _  1  \"  ,    null )  ;", "DoubleListRefEdEntity 1    ed 1  _  2     =    new   DoubleListRefEdEntity 1  (  \" ed 1  _  2  \"  ,    null )  ;", "DoubleListRefEdEntity 2    ed 2  _  1     =    new   DoubleListRefEdEntity 2  (  \" ed 2  _  1  \"  ,    null )  ;", "DoubleListRefEdEntity 2    ed 2  _  2     =    new   DoubleListRefEdEntity 2  (  \" ed 2  _  2  \"  ,    null )  ;", "DoubleListRefIngEntity   ing 1     =    new   DoubleListRefIngEntity (  \" coll 1  \"  )  ;", "DoubleListRefIngEntity   ing 2     =    new   DoubleListRefIngEntity (  \" coll 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1  . getReferences 1  (  )  . add ( ed 1  _  1  )  ;", "ing 1  . getReferences 2  (  )  . add ( ed 2  _  1  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 2  . getReferences 2  (  )  . add ( ed 2  _  2  )  ;", "em . persist ( ed 1  _  1  )  ;", "em . persist ( ed 1  _  2  )  ;", "em . persist ( ed 2  _  1  )  ;", "em . persist ( ed 2  _  2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ing 2  . getReferences 1  (  )  . clear (  )  ;", "ing 2  . getReferences 2  (  )  . clear (  )  ;", "ing 1  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 1  . getReferences 2  (  )  . add ( ed 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ed 1  _  1  . setData (  \" ed 1  _  1    bis \"  )  ;", "ed 2  _  2  . setData (  \" ed 2  _  2    bis \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( DoubleListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( DoubleListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1  _  1     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  1  . getId (  )  )  ;", "ed 1  _  2     =    em . find ( DoubleListRefEdEntity 1  . class ,    ed 1  _  2  . getId (  )  )  ;", "ed 2  _  1     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  1  . getId (  )  )  ;", "ed 2  _  2     =    em . find ( DoubleListRefEdEntity 2  . class ,    ed 2  _  2  . getId (  )  )  ;", "ing 1  . getReferences 1  (  )  . clear (  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  1  )  ;", "ing 2  . getReferences 1  (  )  . add ( ed 1  _  2  )  ;", "ing 1  . getReferences 2  (  )  . remove ( ed 2  _  1  )  ;", "ing 2  . getReferences 2  (  )  . add ( ed 2  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _  1  _ id    =    ed 1  _  1  . getId (  )  ;", "ed 1  _  2  _ id    =    ed 1  _  2  . getId (  )  ;", "ed 2  _  1  _ id    =    ed 2  _  1  . getId (  )  ;", "ed 2  _  2  _ id    =    ed 2  _  2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 1  _  1  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 1  _  1  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 1  _  1    bis \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 1  _  1    bis \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1_1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 1  _  2  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 1  _  2  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 1  _  2  \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 1  _  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1_2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 2  _  1  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 2  _  1  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 2  _  1  \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 2  _  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2_1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 2  _  2  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 2  _  2  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 2  _  2    bis \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 2  _  2    bis \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2_2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefEdEntity 1    ed 1  _  1  _ fromRev 1     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 1  ( ed 1  _  1  _ id ,     \" ed 1  _  1  \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    ed 1  _  1  _ fromRev 3     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 1  ( ed 1  _  1  _ id ,     \" ed 1  _  1    bis \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    ed 1  _  2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    ed 2  _  1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    ed 2  _  2  _ fromRev 1     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 2  ( ed 2  _  2  _ id ,     \" ed 2  _  2  \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    ed 2  _  2  _ fromRev 3     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 2  ( ed 2  _  2  _ id ,     \" ed 2  _  2    bis \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences 1  (  )  ,    ed 1  _  1  _ fromRev 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences 1  (  )  ,    ed 1  _  1  _ fromRev 1  ,    ed 1  _  2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences 1  (  )  ,    ed 1  _  1  _ fromRev 3  ,    ed 1  _  2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences 1  (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences 2  (  )  ,    ed 2  _  1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences 2  (  )  ,    ed 2  _  1  ,    ed 2  _  2  _ fromRev 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences 2  (  )  ,    ed 2  _  1  ,    ed 2  _  2  _ fromRev 3  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences 2  (  )  ,    ed 2  _  2  _ fromRev 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "DoubleListJoinColumnBidirectionalRefEdEntity 1    ed 1  _  1  _ fromRev 3     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 1  ( ed 1  _  1  _ id ,     \" ed 1  _  1    bis \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 1    ed 1  _  2     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    ed 2  _  1     =    getEntityManager (  )  . find ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id )  ;", "DoubleListJoinColumnBidirectionalRefEdEntity 2    ed 2  _  2  _ fromRev 1     =    new   DoubleListJoinColumnBidirectionalRefEdEntity 2  ( ed 2  _  2  _ id ,     \" ed 2  _  2  \"  ,    null )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "DoubleListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences 1  (  )  ,    ed 1  _  2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences 1  (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences 1  (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences 1  (  )  ,    ed 1  _  1  _ fromRev 3  ,    ed 1  _  2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences 2  (  )  ,    ed 2  _  2  _ fromRev 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences 2  (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences 2  (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences 2  (  )  ,    ed 2  _  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefEdEntity 1  . class ,    ed 1  _  2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     4  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( DoubleListJoinColumnBidirectionalRefEdEntity 2  . class ,    ed 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.DoubleJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "IndexedListRefEdEntity   ed 1     =    new   IndexedListRefEdEntity (  \" ed 1  \"  ,    null )  ;", "IndexedListRefEdEntity   ed 2     =    new   IndexedListRefEdEntity (  \" ed 2  \"  ,    null )  ;", "IndexedListRefEdEntity   ed 3     =    new   IndexedListRefEdEntity (  \" ed 3  \"  ,    null )  ;", "IndexedListRefIngEntity   ing 1     =    new   IndexedListRefIngEntity (  \" coll 1  \"  ,    ed 1  ,    ed 2  ,    ed 3  )  ;", "IndexedListRefIngEntity   ing 2     =    new   IndexedListRefIngEntity (  \" coll 1  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ed 3  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( IndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( IndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( IndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 2  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( IndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( IndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( IndexedListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( IndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ed 3     =    em . find ( IndexedListRefEdEntity . class ,    ed 3  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 3  )  ;", "ing 1  . getReferences (  )  . add (  0  ,    ed 3  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( IndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( IndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( IndexedListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( IndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ed 3     =    em . find ( IndexedListRefEdEntity . class ,    ed 3  . getId (  )  )  ;", "ing 2  . getReferences (  )  . remove ( ed 2  )  ;", "ing 1  . getReferences (  )  . add (  0  ,    ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ed 3  _ id    =    ed 3  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "IndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "IndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "IndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     1  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     2  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     3  )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  2  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd3"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "IndexedListJoinColumnBidirectionalRefEdEntity   ed 1     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "IndexedListJoinColumnBidirectionalRefEdEntity   ed 3     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . size (  )  ,     3  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  0  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  1  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  2  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . size (  )  ,     2  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  0  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  1  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . size (  )  ,     2  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  0  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  1  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . size (  )  ,     3  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  1  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  2  )  ,    ed 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "IndexedListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "IndexedListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . size (  )  ,     0  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . size (  )  ,     1  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . size (  )  ,     1  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( IndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.IndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ParentOwnedIndexedListRefEdEntity   ed 1     =    new   ParentOwnedIndexedListRefEdEntity (  \" ed 1  \"  ,    null )  ;", "ParentOwnedIndexedListRefEdEntity   ed 2     =    new   ParentOwnedIndexedListRefEdEntity (  \" ed 2  \"  ,    null )  ;", "ParentOwnedIndexedListRefEdEntity   ed 3     =    new   ParentOwnedIndexedListRefEdEntity (  \" ed 3  \"  ,    null )  ;", "ChildIndexedListRefIngEntity   ing 1     =    new   ChildIndexedListRefIngEntity (  \" coll 1  \"  ,     \" coll 1 bis \"  ,    ed 1  ,    ed 2  ,    ed 3  )  ;", "ChildIndexedListRefIngEntity   ing 2     =    new   ChildIndexedListRefIngEntity (  \" coll 1  \"  ,     \" coll 1 bis \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ed 3  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 2  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ed 3     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 3  . getId (  )  )  ;", "ing 1  . getReferences (  )  . remove ( ed 3  )  ;", "ing 1  . getReferences (  )  . add (  0  ,    ed 3  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ChildIndexedListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ed 3     =    em . find ( ParentOwnedIndexedListRefEdEntity . class ,    ed 3  . getId (  )  )  ;", "ing 2  . getReferences (  )  . remove ( ed 2  )  ;", "ing 1  . getReferences (  )  . add (  0  ,    ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ed 3  _ id    =    ed 3  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     1  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     2  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     3  )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertEquals ( rev 1  . getPosition (  )  ,    Integer . valueOf (  2  )  )  ;", "Assert . assertEquals ( rev 2  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "Assert . assertEquals ( rev 3  . getPosition (  )  ,    Integer . valueOf (  0  )  )  ;", "Assert . assertEquals ( rev 4  . getPosition (  )  ,    Integer . valueOf (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd3"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   ed 1     =    getEntityManager (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   ed 3     =    getEntityManager (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . size (  )  ,     3  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  0  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  1  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . get (  2  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . size (  )  ,     2  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  0  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  1  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . size (  )  ,     2  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  0  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  1  )  ,    ed 1  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . size (  )  ,     3  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  1  )  ,    ed 3  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . get (  2  )  ,    ed 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "ChildIndexedListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "Assert . assertEquals ( rev 1  . getReferences (  )  . size (  )  ,     0  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . size (  )  ,     1  )  ;", "Assert . assertEquals ( rev 2  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . size (  )  ,     1  )  ;", "Assert . assertEquals ( rev 3  . getReferences (  )  . get (  0  )  ,    ed 2  )  ;", "Assert . assertEquals ( rev 4  . getReferences (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ChildIndexedListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ParentOwnedIndexedListJoinColumnBidirectionalRefEdEntity . class ,    ed 3  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.InheritanceIndexedJoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ListRefEdEntity   ed 1     =    new   ListRefEdEntity (  \" ed 1  \"  ,    null )  ;", "ListRefEdEntity   ed 2     =    new   ListRefEdEntity (  \" ed 2  \"  ,    null )  ;", "ListRefIngEntity   ing 1     =    new   ListRefIngEntity (  \" coll 1  \"  ,    ed 1  )  ;", "ListRefIngEntity   ing 2     =    new   ListRefIngEntity (  \" coll 1  \"  ,    ed 2  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( ListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( ListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . getReferences (  )  . remove ( ed 2  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( ListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( ListRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ed 2  . setOwner ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ed 1     =    em . find ( ListRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 1  . setData (  \" ed 1    bis \"  )  ;", "ed 1  . setOwner ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ListRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ListRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . getReferences (  )  . clear (  )  ;", "ing 2  . getReferences (  )  . add ( ed 1  )  ;", "ing 2  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "ListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 1  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 1  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 1    bis \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 1    bis \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  ;", "ListJoinColumnBidirectionalRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 3     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "ListJoinColumnBidirectionalRefEdEntity   rev 4     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 3  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 4  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertEquals ( rev 1  . getData (  )  ,     \" ed 2  \"  )  ;", "Assert . assertEquals ( rev 2  . getData (  )  ,     \" ed 2  \"  )  ;", "Assert . assertEquals ( rev 3  . getData (  )  ,     \" ed 2  \"  )  ;", "Assert . assertEquals ( rev 4  . getData (  )  ,     \" ed 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalRefEdEntity   ed 1  _ fromRev 1     =    new   ListJoinColumnBidirectionalRefEdEntity ( ed 1  _ id ,     \" ed 1  \"  ,    null )  ;", "ListJoinColumnBidirectionalRefEdEntity   ed 1  _ fromRev 3     =    new   ListJoinColumnBidirectionalRefEdEntity ( ed 1  _ id ,     \" ed 1    bis \"  ,    null )  ;", "ListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    ed 1  _ fromRev 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    ed 1  _ fromRev 1  ,    ed 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  ,    ed 1  _ fromRev 3  ,    ed 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalRefEdEntity   ed 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  ;", "ListJoinColumnBidirectionalRefEdEntity   ed 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 3     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "ListJoinColumnBidirectionalRefIngEntity   rev 4     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id ,     4  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    ed 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 3  . getReferences (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 4  . getReferences (  )  ,    ed 1  ,    ed 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalRefIngEntity . class ,    ing 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalRefEdEntity . class ,    ed 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalList"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ListInheritanceRefEdParentEntity   ed 1     =    new   ListInheritanceRefEdChildEntity (  \" ed 1  \"  ,    null ,     \" ed 1    child \"  )  ;", "ListInheritanceRefEdParentEntity   ed 2     =    new   ListInheritanceRefEdChildEntity (  \" ed 2  \"  ,    null ,     \" ed 2    child \"  )  ;", "ListInheritanceRefIngEntity   ing 1     =    new   ListInheritanceRefIngEntity (  \" coll 1  \"  ,    ed 1  )  ;", "ListInheritanceRefIngEntity   ing 2     =    new   ListInheritanceRefIngEntity (  \" coll 1  \"  ,    ed 2  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( ListInheritanceRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( ListInheritanceRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( ListInheritanceRefEdParentEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( ListInheritanceRefEdParentEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . getReferences (  )  . remove ( ed 2  )  ;", "ing 1  . getReferences (  )  . add ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["createData"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalInheritanceRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 1  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 1  _ id ,     1  )  ;", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 1  _ id ,     2  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 1  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalInheritanceRefIngEntity   ing 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 1  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefIngEntity   ing 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 2  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 2  _ id ,     1  )  ;", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 2  _ id ,     2  )  ;", "Assert . assertTrue ( rev 1  . getOwner (  )  . equals ( ing 2  )  )  ;", "Assert . assertTrue ( rev 2  . getOwner (  )  . equals ( ing 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   ed 1     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 1  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   ed 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 2  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "ListJoinColumnBidirectionalInheritanceRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    ed 1  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  ,    ed 1  ,    ed 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "ListJoinColumnBidirectionalInheritanceRefEdParentEntity   ed 2     =    getEntityManager (  )  . find ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 2  _ id )  ;", "ListJoinColumnBidirectionalInheritanceRefIngEntity   rev 1     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "ListJoinColumnBidirectionalInheritanceRefIngEntity   rev 2     =    getAuditReader (  )  . find ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 1  . getReferences (  )  ,    ed 2  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( rev 2  . getReferences (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng2"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalInheritanceRefIngEntity . class ,    ing 2  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 1  _ id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ListJoinColumnBidirectionalInheritanceRefEdParentEntity . class ,    ed 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.detached.JoinColumnBidirectionalListWithInheritance"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Constant"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Constant"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Constant"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Constant"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Person   personA    =    new   Person (  \" Peter \"  )  ;", "Person   personB    =    new   Person (  \" Mary \"  )  ;", "em . persist ( personA )  ;", "em . persist ( personB )  ;", "Constant   cons    =    new   Constant (  \" USD \"  ,     \" US   Dollar \"  )  ;", "em . persist ( cons )  ;", "PersonTuple   tuple 1     =    new   PersonTuple ( true ,    personA ,    personB ,    cons )  ;", "em . persist ( tuple 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "tuple 1 Ver 1     =    new   PersonTuple ( tuple 1  . isHelloWorld (  )  ,    tuple 1  . getPersonA (  )  ,    tuple 1  . getPersonB (  )  ,    tuple 1  . getConstant (  )  )  ;", "em . getTransac (  )  . begin (  )  ;", "cons    =    em . find ( Constant . class ,    cons . getId (  )  )  ;", "Person   personC 1     =    new   Person (  \" Lukasz \"  )  ;", "em . persist ( personC 1  )  ;", "PersonTuple   tuple 2     =    new   PersonTuple ( true ,    personA ,    personC 1  ,    cons )  ;", "em . persist ( tuple 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "tuple 2 Ver 1     =    new   PersonTuple ( tuple 2  . isHelloWorld (  )  ,    tuple 2  . getPersonA (  )  ,    tuple 2  . getPersonB (  )  ,    tuple 2  . getConstant (  )  )  ;", "personCVer 1     =    new   Person ( personC 1  . getId (  )  ,    personC 1  . getName (  )  )  ;", "personCVer 1  . getPersonBTuples (  )  . add ( tuple 2 Ver 1  )  ;", "em . getTransac (  )  . begin (  )  ;", "tuple 2     =    em . find ( PersonTuple . class ,    tuple 2  . getPersonTupleId (  )  )  ;", "tuple 2  . setHelloWorld ( false )  ;", "em . merge ( tuple 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "tuple 2 Ver 2     =    new   PersonTuple ( tuple 2  . isHelloWorld (  )  ,    tuple 2  . getPersonA (  )  ,    tuple 2  . getPersonB (  )  ,    tuple 2  . getConstant (  )  )  ;", "em . getTransac (  )  . begin (  )  ;", "Person   personC 2     =    em . find ( Person . class ,    personC 1  . getId (  )  )  ;", "personC 2  . setName (  \" Robert \"  )  ;", "em . merge ( personC 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "personCVer 2     =    new   Person ( personC 2  . getId (  )  ,    personC 2  . getName (  )  )  ;", "personCVer 2  . getPersonBTuples (  )  . add ( tuple 2 Ver 1  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.MapsIdTest"}, {"methodBody": ["METHOD_START", "{", "Person   person    =    getAuditReader (  )  . find ( Person . class ,    personCVer 1  . getId (  )  ,     2  )  ;", "Assert . assertEquals ( personCVer 1  ,    person )  ;", "Assert . assertEquals ( personCVer 1  . getPersonATuples (  )  ,    person . getPersonATuples (  )  )  ;", "Assert . assertEquals ( personCVer 1  . getPersonBTuples (  )  ,    person . getPersonBTuples (  )  )  ;", "person    =    getAuditReader (  )  . find ( Person . class ,    personCVer 2  . getId (  )  ,     4  )  ;", "Assert . assertEquals ( personCVer 2  ,    person )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPersonC"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.MapsIdTest"}, {"methodBody": ["METHOD_START", "{", "PersonTuple   tuple    =    getAuditReader (  )  . find ( PersonTuple . class ,    tuple 1 Ver 1  . getPersonTupleId (  )  ,     1  )  ;", "Assert . assertEquals ( tuple 1 Ver 1  ,    tuple )  ;", "Assert . assertEquals ( tuple 1 Ver 1  . isHelloWorld (  )  ,    tuple . isHelloWorld (  )  )  ;", "Assert . assertEquals ( tuple 1 Ver 1  . getPersonA (  )  . getId (  )  ,    tuple . getPersonA (  )  . getId (  )  )  ;", "Assert . assertEquals ( tuple 1 Ver 1  . getPersonB (  )  . getId (  )  ,    tuple . getPersonB (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTuple1"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.MapsIdTest"}, {"methodBody": ["METHOD_START", "{", "PersonTuple   tuple    =    getAuditReader (  )  . find ( PersonTuple . class ,    tuple 2 Ver 2  . getPersonTupleId (  )  ,     2  )  ;", "Assert . assertEquals ( tuple 2 Ver 1  ,    tuple )  ;", "Assert . assertEquals ( tuple 2 Ver 1  . isHelloWorld (  )  ,    tuple . isHelloWorld (  )  )  ;", "Assert . assertEquals ( tuple 2 Ver 1  . getPersonA (  )  . getId (  )  ,    tuple . getPersonA (  )  . getId (  )  )  ;", "Assert . assertEquals ( tuple 2 Ver 1  . getPersonB (  )  . getId (  )  ,    tuple . getPersonB (  )  . getId (  )  )  ;", "tuple    =    getAuditReader (  )  . find ( PersonTuple . class ,    tuple 2 Ver 2  . getPersonTupleId (  )  ,     3  )  ;", "Assert . assertEquals ( tuple 2 Ver 2  ,    tuple )  ;", "Assert . assertEquals ( tuple 2 Ver 2  . isHelloWorld (  )  ,    tuple . isHelloWorld (  )  )  ;", "Assert . assertEquals ( tuple 2 Ver 2  . getPersonA (  )  . getId (  )  ,    tuple . getPersonA (  )  . getId (  )  )  ;", "Assert . assertEquals ( tuple 2 Ver 2  . getPersonB (  )  . getId (  )  ,    tuple . getPersonB (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTuple2"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.MapsIdTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( PersonTuple . class ,    tuple 1 Ver 1  . getPersonTupleId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( PersonTuple . class ,    tuple 2 Ver 1  . getPersonTupleId (  )  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  ,     4  )  ,    getAuditReader (  )  . getRevisions ( Person . class ,    personCVer 1  . getId (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.MapsIdTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Contract   contract    =    new   Contract (  1  )  ;", "final   Design   design    =    new   Design (  1  )  ;", "final   DesignContract   designContract    =    new   DesignContract ( contract ,    design )  ;", "designContract . setGoal (  2  5  .  0  )  ;", "contract . getDesigns (  )  . add ( designContract )  ;", "entityManager . persist ( design )  ;", "entityManager . persist ( contract )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   AuditReader   auditReader    =    getAuditReader (  )  ;", "final   Contract   contract    =    auditReader . find (  . class ,     1  ,     1  )  ;", "final   Design   design    =    auditReader . find (  . class ,     1  ,     1  )  ;", "assertEquals (  1  ,    contract . getDesigns (  )  . size (  )  )  ;", "final   DesignContract   designContract    =    contract . getDesigns (  )  . iterator (  )  . next (  )  ;", "assertEquals ( contract . getId (  )  ,    designContract . getContract (  )  . getId (  )  )  ;", "assertEquals ( design . getId (  )  ,    designContract . getDesign (  )  . getId (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testOneToManyAssociationAuditQuery"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( OneToManyCompositeKeyTest . Contract . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( OneToManyCompositeKeyTest . Design . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "return   personATuples ;", "}", "METHOD_END"], "methodName": ["getPersonATuples"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "return   personBTuples ;", "}", "METHOD_END"], "methodName": ["getPersonBTuples"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "this . personATuples    =    personATuples ;", "}", "METHOD_END"], "methodName": ["setPersonATuples"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "this . personBTuples    =    personBTuples ;", "}", "METHOD_END"], "methodName": ["setPersonBTuples"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.Person"}, {"methodBody": ["METHOD_START", "{", "return   constant ;", "}", "METHOD_END"], "methodName": ["getConstant"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "return   personA ;", "}", "METHOD_END"], "methodName": ["getPersonA"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "return   personB ;", "}", "METHOD_END"], "methodName": ["getPersonB"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "return   personTupleId ;", "}", "METHOD_END"], "methodName": ["getPersonTupleId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "return   helloWorld ;", "}", "METHOD_END"], "methodName": ["isHelloWorld"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "this . constant    =    constant ;", "}", "METHOD_END"], "methodName": ["setConstant"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "this . helloWorld    =    helloWorld ;", "}", "METHOD_END"], "methodName": ["setHelloWorld"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "this . personA    =    personA ;", "}", "METHOD_END"], "methodName": ["setPersonA"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "this . personB    =    personB ;", "}", "METHOD_END"], "methodName": ["setPersonB"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "this . personTupleId    =    personTupleId ;", "}", "METHOD_END"], "methodName": ["setPersonTupleId"], "fileName": "org.hibernate.envers.test.integration.onetomany.embeddedid.PersonTuple"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "Node   parent    =    new   Node (  \" parent \"  ,     (  ( Node )     ( null )  )  )  ;", "Node   child 1     =    new   Node (  \" child 1  \"  ,    parent )  ;", "Node   child 2     =    new   Node (  \" child 2  \"  ,    parent )  ;", "parent . getChildren (  )  . add ( child 1  )  ;", "parent . getChildren (  )  . add ( child 2  )  ;", "em . persist ( parent )  ;", "em . persist ( child 1  )  ;", "em . persist ( child 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "parentId    =    parent . getId (  )  ;", "child 1 Id    =    child 1  . getId (  )  ;", "child 2 Id    =    child 2  . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "parent    =    em . find ( Node . class ,    parent . getId (  )  )  ;", "parent . getChildren (  )  . get (  0  )  . setData (  \" child 1    modified \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "child 2     =    em . find ( Node . class ,    child 2  . getId (  )  )  ;", "em . remove ( child 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.HierarchyTest"}, {"methodBody": ["METHOD_START", "{", "Node   parent    =    new   Node (  \" parent \"  ,    parentId )  ;", "Node   child 1     =    new   Node (  \" child 1  \"  ,    child 1 Id )  ;", "Node    1     =    getAuditReader (  )  . find ( Node . class ,    child 1 Id ,     1  )  ;", "Assert . assertEquals ( child 1  ,     1  )  ;", "Assert . assertEquals ( parent . getId (  )  ,     1  . getParent (  )  . getId (  )  )  ;", "Assert . assertEquals ( parent . getData (  )  ,     1  . getParent (  )  . getData (  )  )  ;", "child 1  . setData (  \" child 1    modified \"  )  ;", "Node    2     =    getAuditReader (  )  . find ( Node . class ,    child 1 Id ,     2  )  ;", "Assert . assertEquals ( child 1  ,     2  )  ;", "Assert . assertEquals ( parent . getId (  )  ,     2  . getParent (  )  . getId (  )  )  ;", "Assert . assertEquals ( parent . getData (  )  ,     2  . getParent (  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1Node"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.HierarchyTest"}, {"methodBody": ["METHOD_START", "{", "Node   parent    =    new   Node (  \" parent \"  ,    parentId )  ;", "Node   child 1     =    new   Node (  \" child 1  \"  ,    child 1 Id )  ;", "Node   child 2     =    new   Node (  \" child 2  \"  ,    child 2 Id )  ;", "Node   ver 1     =    getAuditReader (  )  . find ( Node . class ,    parentId ,     1  )  ;", "Assert . assertEquals ( parent ,    ver 1  )  ;", "Assert . assertTrue ( TestTools . checkCollec ( ver 1  . getChildren (  )  ,    child 1  ,    child 2  )  )  ;", "child 1  . setData (  \" child 1    modified \"  )  ;", "Node   ver 2     =    getAuditReader (  )  . find ( Node . class ,    parentId ,     2  )  ;", "Assert . assertEquals ( parent ,    ver 2  )  ;", "Assert . assertTrue ( TestTools . checkCollec ( ver 2  . getChildren (  )  ,    child 1  ,    child 2  )  )  ;", "Node   ver 3     =    getAuditReader (  )  . find ( Node . class ,    parentId ,     3  )  ;", "Assert . assertEquals ( parent ,    ver 3  )  ;", "Assert . assertTrue ( TestTools . checkCollec ( ver 3  . getChildren (  )  ,    child 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParentNode"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.HierarchyTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Node . class ,    parentId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( Node . class ,    child 1 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( Node . class ,    child 2 Id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.HierarchyTest"}, {"methodBody": ["METHOD_START", "{", "return   children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "this . children    =    children ;", "}", "METHOD_END"], "methodName": ["setChildren"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.onetomany.hierarchy.Node"}, {"methodBody": ["METHOD_START", "{", "return   new   ManyToManyCompositeKey . ManyToManyId ( oneToMany ,    manyToOne )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.ManyToManyCompositeKey"}, {"methodBody": ["METHOD_START", "{", "return   this . manyToOne ;", "}", "METHOD_END"], "methodName": ["getManyToOne"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.ManyToManyCompositeKey"}, {"methodBody": ["METHOD_START", "{", "return   this . oneToMany ;", "}", "METHOD_END"], "methodName": ["getOneToMany"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.ManyToManyCompositeKey"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.ManyToOneOwned"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.ManyToOneOwned"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "OneToManyOwned   oneToManyOwned    =    new   OneToManyOwned (  \" data \"  ,    null )  ;", "ManyToOneOwned   manyToOneOwned 1     =    new   ManyToOneOwned (  \" data 1  \"  )  ;", "ManyToOneOwned   manyToOneOwned 2     =    new   ManyToOneOwned (  \" data 2  \"  )  ;", "Many   owning 1     =    new   Many ( oneToManyOwned ,    manyToOneOwned 1  )  ;", "Many   owning 2     =    new   Many ( oneToManyOwned ,    manyToOneOwned 2  )  ;", "entityManager . persist ( oneToManyOwned )  ;", "entityManager . persist ( manyToOneOwned 1  )  ;", "entityManager . persist ( manyToOneOwned 2  )  ;", "entityManager . persist ( owning 1  )  ;", "entityManager . persist ( owning 2  )  ;", "owning 1 Id    =    owning 1  . getId (  )  ;", "owning 2 Id    =    owning 2  . getId (  )  ;", "oneToManyId    =    oneToManyOwned . getId (  )  ;", "manyToOne 1 Id    =    manyToOneOwned 1  . getId (  )  ;", "manyToOne 2 Id    =    manyToOneOwned 2  . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Many   owning 1     =    entityManager . find (  . class ,    owning 1 Id )  ;", "entityManager . remove ( owning 1  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Many   owning 2     =    entityManager . find (  . class ,    owning 2 Id )  ;", "entityManager . remove ( owning 2  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "final   ManyToOneOwned   rev 1     =    getAuditReader (  )  . find ( ManyToOneOwned . class ,    manyToOne 1 Id ,     1  )  ;", "Assert . assertEquals (  \" data 1  \"  ,    rev 1  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testManyToOne1History"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "final   ManyToOneOwned   rev 1     =    getAuditReader (  )  . find ( ManyToOneOwned . class ,    manyToOne 2 Id ,     1  )  ;", "Assert . assertEquals (  \" data 2  \"  ,    rev 1  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testManyToOne2History"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "final   OneToManyOwned   rev 1     =    getAuditReader (  )  . find ( OneToManyOwned . class ,    oneToManyId ,     1  )  ;", "Assert . assertEquals (  \" data \"  ,    rev 1  . getData (  )  )  ;", "Assert . assertEquals (  2  ,    rev 1  . getManys (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOneToManyHistory"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "final   OneToManyOwned   oneToMany    =    new   OneToManyOwned (  1 L ,     \" data \"  ,    null )  ;", "final   ManyToOneOwned   manyToOne    =    new   ManyToOneOwned (  2 L ,     \" data 1  \"  )  ;", "final   Many   rev 1     =    getAuditReader (  )  . find ( Many . class ,    owning 1 Id ,     1  )  ;", "Assert . assertEquals ( rev 1  . getOneToMany (  )  ,    oneToMany )  ;", "Assert . assertEquals ( rev 1  . getManyToOne (  )  ,    manyToOne )  ;", "Assert . assertNull ( getAuditReader (  )  . find ( Many . class ,    owning 1 Id ,     2  )  )  ;", "final   Many   rev 2     =     (  ( Many )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Many . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( owning 1 Id )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  2  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( rev 2  . getOneToMany (  )  ,    oneToMany )  ;", "Assert . assertEquals ( rev 2  . getManyToOne (  )  ,    manyToOne )  ;", "}", "METHOD_END"], "methodName": ["testOwning1History"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "final   OneToManyOwned   oneToMany    =    new   OneToManyOwned (  1 L ,     \" data \"  ,    null )  ;", "final   ManyToOneOwned   manyToOne    =    new   ManyToOneOwned (  3 L ,     \" data 2  \"  )  ;", "final   Many   rev 1     =    getAuditReader (  )  . find ( Many . class ,    owning 2 Id ,     1  )  ;", "Assert . assertEquals ( rev 1  . getOneToMany (  )  ,    oneToMany )  ;", "Assert . assertEquals ( rev 1  . getManyToOne (  )  ,    manyToOne )  ;", "Assert . assertNull ( getAuditReader (  )  . find ( Many . class ,    owning 2 Id ,     3  )  )  ;", "final   Many   rev 2     =     (  ( Many )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Many . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( owning 2 Id )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  3  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( rev 2  . getOneToMany (  )  ,    oneToMany )  ;", "Assert . assertEquals ( rev 2  . getManyToOne (  )  ,    manyToOne )  ;", "}", "METHOD_END"], "methodName": ["testOwning2History"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    getAuditReader (  )  . getRevisions ( ManyToManyCompositeKey . class ,    owning 1 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ManyToManyCompositeKey . class ,    owning 2 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( OneToManyOwned . class ,    oneToManyId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( ManyToOneOwned . class ,    manyToOne 1 Id )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( ManyToOneOwned . class ,    manyToOne 2 Id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyCompositeKeyTest"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "return   manyToManyCompositeKeys ;", "}", "METHOD_END"], "methodName": ["getManyToManyCompositeKeys"], "fileName": "org.hibernate.envers.test.integration.onetomany.idclass.OneToManyOwned"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSubclass"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSubclass"}, {"methodBody": ["METHOD_START", "{", "return   str 3  ;", "}", "METHOD_END"], "methodName": ["getStr3"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSubclass2"}, {"methodBody": ["METHOD_START", "{", "this . str 3     =    str 3  ;", "}", "METHOD_END"], "methodName": ["setStr3"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSubclass2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.DetailSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "return   items ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . items    =    items ;", "}", "METHOD_END"], "methodName": ["setItems"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.Master"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "Master   m 1     =    new   Master (  )  ;", "DetailSub   det 1     =    new   DetailSub 2  (  )  ;", "DetailSub   det 2     =    new   DetailSub 2  (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "det 1  . setStr 2  (  \" detail    1  \"  )  ;", "m 1  . setStr (  \" master \"  )  ;", "m 1  . setItems ( new   ArrayList < DetailSub >  (  )  )  ;", "m 1  . getItems (  )  . add ( det 1  )  ;", "det 1  . setParent ( m 1  )  ;", "em . persist ( m 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "m 1  _ id    =    m 1  . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "m 1     =    em . find ( Master .  ,    m 1  _ id )  ;", "det 2  . setStr 2  (  \" detail    2  \"  )  ;", "det 2  . setParent ( m 1  )  ;", "m 1  . getItems (  )  . add ( det 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "m 1     =    em . find ( Master .  ,    m 1  _ id )  ;", "m 1  . setStr (  \" new   master \"  )  ;", "det 1     =    m 1  . getItems (  )  . get (  0  )  ;", "det 1  . setStr 2  (  \" new   detail \"  )  ;", "DetailSub   det 3     =    new   DetailSub 2  (  )  ;", "det 3  . setStr 2  (  \" detail    3  \"  )  ;", "det 3  . setParent ( m 1  )  ;", "m 1  . getItems (  )  . get (  1  )  . setParent ( null )  ;", "m 1  . getItems (  )  . add ( det 3  )  ;", "em . persist ( m 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "m 1     =    em . find ( Master .  ,    m 1  _ id )  ;", "det 1     =    m 1  . getItems (  )  . get (  0  )  ;", "det 1  . setParent ( null )  ;", "em . persist ( m 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.OneToManyInverseToSuperclassTest"}, {"methodBody": ["METHOD_START", "{", "Master   rev 1  _  1     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     1  )  ;", "Master   rev 1  _  2     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     2  )  ;", "Master   rev 1  _  3     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     3  )  ;", "Master   rev 1  _  4     =    getAuditReader (  )  . find ( Master . class ,    m 1  _ id ,     4  )  ;", "assert   rev 1  _  1     !  =    null ;", "assert   rev 1  _  2     !  =    null ;", "assert   rev 1  _  3     !  =    null ;", "assert   rev 1  _  4     !  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryExists"], "fileName": "org.hibernate.envers.test.integration.onetomany.inverseToSuperclass.OneToManyInverseToSuperclassTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getOrCreateEntityManager (  )  ;", "try    {", "Company   company 1     =    new   Company (  \" COMPANY 1  \"  )  ;", "Company   company 2     =    new   Company (  \" COMPANY 2  \"  )  ;", "Employee   employee 1     =    new   Employee (  \" Employee 1  \"  ,    company 1  )  ;", "Employee   employee 2     =    new   Employee (  \" Employee 2  \"  ,    company 2  )  ;", "Employee   employee 3     =    new   Employee (  \" Employee 3  \"  ,    company 2  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( company 1  )  ;", "em . persist ( company 2  )  ;", "em . persist ( employee 1  )  ;", "em . persist ( employee 2  )  ;", "em . persist ( employee 3  )  ;", "em . getTransac (  )  . commit (  )  ;", "company 1 Id    =    company 1  . getId (  )  ;", "company 2 Id    =    company 2  . getId (  )  ;", "employee 1 Id    =    employee 1  . getId (  )  ;", "employee 2 Id    =    employee 2  . getId (  )  ;", "employee 3 Id    =    employee 3  . getId (  )  ;", "em . getTransac (  )  . begin (  )  ;", "employee 2     =    em . find ( Employee . class ,    employee 2  . getId (  )  )  ;", "employee 2  . setCompany ( company 1  )  ;", "company 2     =    em . find ( Company . class ,    company 2  . getId (  )  )  ;", "company 2  . setName (  \" COMPANY 2  - CHANGED \"  )  ;", "em . merge ( employee 2  )  ;", "em . merge ( company 2  )  ;", "em . getTransac (  )  . commit (  )  ;", "Company   company 3     =    new   Company (  \" COMPANY 3  \"  )  ;", "Employee   employee 4     =    new   Employee (  \" Employee 4  \"  ,    company 3  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . persist ( company 3  )  ;", "em . persist ( employee 4  )  ;", "em . getTransac (  )  . commit (  )  ;", "employee 4 Id    =    employee 4  . getId (  )  ;", "company 3 Id    =    company 3  . getId (  )  ;", "}    finally    {", "em . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "return   new   Employee ( employeeId ,    employeeName ,    new   Company ( companyId ,    companyName )  )  ;", "}", "METHOD_END"], "methodName": ["makeEmployee"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   auditQuery    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Employee . class ,    true ,    true )  ;", "auditQuery . add ( AuditEntitId (  \" company \"  )  . in ( new   Integer [  ]  {    company 1 Id    }  )  )  ;", "final   List < Employee >    results    =    auditQuery . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "final   Employee   employee 1     =    makeEmployee ( employee 1 Id ,     \" Employee 1  \"  ,    company 1 Id ,     \" COMPANY 1  \"  )  ;", "final   Employee   employee 2     =    makeEmployee ( employee 2 Id ,     \" Employee 2  \"  ,    company 1 Id ,     \" COMPANY 1  \"  )  ;", "Assert . assertThat ( results . contains ( employee 1  )  ,    is ( true )  )  ;", "Assert . assertThat ( results . contains ( employee 2  )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testCompany1EmployeeIn"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   auditQuery    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Employee . class ,    true ,    true )  ;", "auditQuery . add ( AuditEntitId (  \" company \"  )  . in ( new   Integer [  ]  {    company 2 Id    }  )  )  ;", "final   List < Employee >    results    =    auditQuery . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "final   Employee   employee 1     =    makeEmployee ( employee 2 Id ,     \" Employee 2  \"  ,    company 2 Id ,     \" COMPANY 2  \"  )  ;", "final   Employee   employee 2     =    makeEmployee ( employee 3 Id ,     \" Employee 3  \"  ,    company 2 Id ,     \" COMPANY 2  \"  )  ;", "Assert . assertThat ( results . contains ( employee 1  )  ,    is ( true )  )  ;", "Assert . assertThat ( results . contains ( employee 2  )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testCompany2EmployeeIn"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "AuditQuery   auditQuery    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Employee . class ,    true ,    true )  ;", "auditQuery . add ( AuditEntitId (  \" company \"  )  . in ( new   Integer [  ]  {    company 3 Id    }  )  )  ;", "final   List < Employee >    results    =    auditQuery . getResultList (  )  ;", "Assert . assertEquals (  1  ,    results . size (  )  )  ;", "final   Employee   employee    =    makeEmployee ( employee 4 Id ,     \" Employee 4  \"  ,    company 3 Id ,     \" COMPANY 3  \"  )  ;", "Assert . assertEquals ( results ,    TestTools . makeList ( employee )  )  ;", "}", "METHOD_END"], "methodName": ["testCompany3EmployeeIn"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Company . class ,    company 1 Id )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( Company . class ,    company 2 Id )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Company . class ,    company 3 Id )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Employee . class ,    employee 1 Id )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( Employee . class ,    employee 2 Id )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Employee . class ,    employee 3 Id )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( Employee . class ,    employee 4 Id )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.AuditRelatedIdInTest"}, {"methodBody": ["METHOD_START", "{", "return   employees ;", "}", "METHOD_END"], "methodName": ["getEmployees"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "this . employees    =    employees ;", "}", "METHOD_END"], "methodName": ["setEmployees"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Company"}, {"methodBody": ["METHOD_START", "{", "return   company ;", "}", "METHOD_END"], "methodName": ["getCompany"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "this . company    =    company ;", "}", "METHOD_END"], "methodName": ["setCompany"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetomany.relatedid.Employee"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefedOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BiRefingOptionalEntity"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1     =    new   BiRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "BiRefEdEntity   ed 2     =    new   BiRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "BiRefIngEntity   ing 1     =    new   BiRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( BiRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( ing 1  )  ;", "assert    ( rev 2  . getReferencing (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "assert    ( rev 1  . getReferencing (  )  )     =  =    null ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefIngEntity . class ,    ing 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1     =    new   BiRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "BiRefEdEntity   ed 2     =    new   BiRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "BiRefIngEntity   ing 1     =    new   BiRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "BiRefIngEntity   ing 2     =    new   BiRefIngEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 1     =    em . find ( BiRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 1     =    em . find ( BiRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( BiRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . setReference ( null )  ;", "ing 2  . setReference ( ed 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ed 2     =    em . find ( BiRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( BiRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "ing 2  . setReference ( null )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional2"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefIngEntity   ing 2     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 2  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "BiRefEdEntity   rev 3     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     3  )  ;", "BiRefEdEntity   rev 4     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     4  )  ;", "assert    ( rev 1  . getReferencing (  )  )     =  =    null ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 1  )  ;", "assert   rev 3  . getReferencing (  )  . equals ( ing 2  )  ;", "assert    ( rev 4  . getReferencing (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional2"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "BiRefEdEntity   rev 3     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     3  )  ;", "BiRefEdEntity   rev 4     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     4  )  ;", "assert    ( rev 1  . getReferencing (  )  )     =  =    null ;", "assert    ( rev 2  . getReferencing (  )  )     =  =    null ;", "assert    ( rev 3  . getReferencing (  )  )     =  =    null ;", "assert   rev 4  . getReferencing (  )  . equals ( ing 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional2"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.Bidirectional2"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "RefEdOneToOne   ed 1     =    new   RefEdOneToOne (  )  ;", "RefIngOneToOne   ing 1     =    new   RefIngOneToOne (  )  ;", "ed 1  . setData (  \" referredEntity 1  \"  )  ;", "ed 1  . setRefIng ( ing 1  )  ;", "ing 1  . setData (  \" referringEntity \"  )  ;", "ing 1  . setRefedOne ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "refIngId 1     =    ing 1  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalEagerAnnotationTest"}, {"methodBody": ["METHOD_START", "{", "BidirectionalEagerAnnotationRefIngOneToOne   referencing    =    getAuditReader (  )  . find ( BidirectionalEagerAnnotationRefIngOneToOne . class ,    refIngId 1  ,     1  )  ;", "Assert . assertNotNull ( referencing . getRefedOne (  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonProxyObjectTraversing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalEagerAnnotationTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "RefEdPK   ed 1     =    new   RefEdPK (  \" data _ ed _  1  \"  )  ;", "RefIngPK   ing 1     =    new   RefIngPK (  \" data _ ing _  1  \"  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "refIngId 1     =    ing 1  . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalEagerHbmTest"}, {"methodBody": ["METHOD_START", "{", "BidirectionalEagerHbmRefIngPK   referencing    =    getAuditReader (  )  . find ( BidirectionalEagerHbmRefIngPK . class ,    refIngId 1  ,     1  )  ;", "Assert . assertNotNull ( referencing . getReference (  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonProxyObjectTraversing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalEagerHbmTest"}, {"methodBody": ["METHOD_START", "{", "BiRefEdEntity   ed 1     =    new   BiRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "BiRefEdEntity   ed 2     =    new   BiRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "BiRefIngEntity   ing 1     =    new   BiRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "BiRefIngEntity   ing 2     =    new   BiRefIngEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1  . setReference ( ed 1  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( BiRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 2     =    em . find ( BiRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 1     =    em . find ( BiRefEdEntity . class ,    ed 1  . getId (  )  )  ;", "ed 2     =    em . find ( BiRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "ing 2  . setReference ( ed 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalNoNulls"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefIngEntity   ing 2     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 2  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( ing 1  )  ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalNoNulls"}, {"methodBody": ["METHOD_START", "{", "BiRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 1  _ id )  ;", "BiRefIngEntity   ing 2     =    getEntityManager (  )  . find ( BiRefIngEntity . class ,    ing 2  _ id )  ;", "BiRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "BiRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( ing 2  )  ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalNoNulls"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalNoNulls"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "try    {", "entityManager . getTransaction (  )  . begin (  )  ;", "BiRefingEntity   refingWithNoRefed    =    new   BiRefingEntity (  )  ;", "refingWithNoRefed . setReference ( null )  ;", "entityManager . persist ( refingWithNoRefed )  ;", "BiRefingEntity   refing    =    new   BiRefingEntity (  )  ;", "BiRefedEntity   refed    =    new   BiRefedEntity (  )  ;", "refed . setReferencing ( refing )  ;", "refing . setReference ( refed )  ;", "entityManager . persist ( refing )  ;", "entityManager . persist ( refed )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "this . refingId    =    refing . getId (  )  ;", "this . refedId    =    refed . getId (  )  ;", "this . refingWithNoRefedId    =    refingWithNoRefed . getId (  )  ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalOneToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefingOptionalEntity . class ,    refingId )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefingOptionalEntity . class ,    refingWithNoRefedId )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( BiRefedOptionalEntity . class ,    refedId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalOneToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "BiRefingOptionalEntity   rev 1     =    getAuditReader (  )  . find ( BiRefingOptionalEntity . class ,    refingWithNoRefedId ,     1  )  ;", "Assert . assertNull ( rev 1  . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryNullReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalOneToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( getAuditReader (  )  . find ( BiRefingOptionalEntity . class ,    refingId ,     1  )  . getReference (  )  )  ;", "Assert . assertNotNull ( getAuditReader (  )  . find ( BiRefedOptionalEntity . class ,    refedId ,     1  )  . getReferencing (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionHistoryWithNonNullReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.BidirectionalOneToOneOptionalTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiEmbIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   referencing ;", "}", "METHOD_END"], "methodName": ["getReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . referencing    =    referencing ;", "}", "METHOD_END"], "methodName": ["setReferencing"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.BiMulIdRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "ed 1  _ id    =    new   EmbId (  1  ,     2  )  ;", "ed 2  _ id    =    new   EmbId (  3  ,     4  )  ;", "ing 1  _ id    =    new   EmbId (  5  ,     6  )  ;", "BiEmbIdRefEdEntity   ed 1     =    new   BiEmbIdRefEdEntity ( ed 1  _ id ,     \" data _ ed _  1  \"  )  ;", "BiEmbIdRefEdEntity   ed 2     =    new   BiEmbIdRefEdEntity ( ed 2  _ id ,     \" data _ ed _  2  \"  )  ;", "BiEmbIdRefIngEntity   ing 1     =    new   BiEmbIdRefIngEntity ( ing 1  _ id ,     \" data _ ing _  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( BiEmbIdRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( BiEmbIdRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.EmbIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiEmbIdRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiEmbIdRefIngEntity . class ,    ing 1  _ id )  ;", "BiEmbIdRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiEmbIdRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( ing 1  )  ;", "assert    ( rev 2  . getReferencing (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.EmbIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiEmbIdRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiEmbIdRefIngEntity . class ,    ing 1  _ id )  ;", "BiEmbIdRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "BiEmbIdRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "assert    ( rev 1  . getReferencing (  )  )     =  =    null ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.EmbIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiEmbIdRefEdEntity   ed 1     =    getEntityManager (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 1  _ id )  ;", "BiEmbIdRefEdEntity   ed 2     =    getEntityManager (  )  . find ( BiEmbIdRefEdEntity . class ,    ed 2  _ id )  ;", "BiEmbIdRefIngEntity   rev 1     =    getAuditReader (  )  . find ( BiEmbIdRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "BiEmbIdRefIngEntity   rev 2     =    getAuditReader (  )  . find ( BiEmbIdRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.EmbIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiEmbIdRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiEmbIdRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiEmbIdRefIngEntity . class ,    ing 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.EmbIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "ed 1  _ id    =    new   MulId (  1  ,     2  )  ;", "ed 2  _ id    =    new   MulId (  3  ,     4  )  ;", "ing 1  _ id    =    new   MulId (  5  ,     6  )  ;", "BiMulIdRefEdEntity   ed 1     =    new   BiMulIdRefEdEntity ( ed 1  _ id . getId 1  (  )  ,    ed 1  _ id . getId 2  (  )  ,     \" data _ ed _  1  \"  )  ;", "BiMulIdRefEdEntity   ed 2     =    new   BiMulIdRefEdEntity ( ed 2  _ id . getId 1  (  )  ,    ed 2  _ id . getId 2  (  )  ,     \" data _ ed _  2  \"  )  ;", "BiMulIdRefIngEntity   ing 1     =    new   BiMulIdRefIngEntity ( ing 1  _ id . getId 1  (  )  ,    ing 1  _ id . getId 2  (  )  ,     \" data _ ing _  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1  . setReference ( ed 1  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ing 1     =    em . find ( BiMulIdRefIngEntity . class ,    ing 1  _ id )  ;", "ed 2     =    em . find ( BiMulIdRefEdEntity . class ,    ed 2  _ id )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.MulIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiMulIdRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiMulIdRefIngEntity . class ,    ing 1  _ id )  ;", "BiMulIdRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiMulIdRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "BiMulIdRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiMulIdRefEdEntity . class ,    ed 1  _ id ,     2  )  ;", "assert   rev 1  . getReferencing (  )  . equals ( ing 1  )  ;", "assert    ( rev 2  . getReferencing (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.MulIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiMulIdRefIngEntity   ing 1     =    getEntityManager (  )  . find ( BiMulIdRefIngEntity . class ,    ing 1  _ id )  ;", "BiMulIdRefEdEntity   rev 1     =    getAuditReader (  )  . find ( BiMulIdRefEdEntity . class ,    ed 2  _ id ,     1  )  ;", "BiMulIdRefEdEntity   rev 2     =    getAuditReader (  )  . find ( BiMulIdRefEdEntity . class ,    ed 2  _ id ,     2  )  ;", "assert    ( rev 1  . getReferencing (  )  )     =  =    null ;", "assert   rev 2  . getReferencing (  )  . equals ( ing 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEdId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.MulIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "BiMulIdRefEdEntity   ed 1     =    getEntityManager (  )  . find ( BiMulIdRefEdEntity . class ,    ed 1  _ id )  ;", "BiMulIdRefEdEntity   ed 2     =    getEntityManager (  )  . find ( BiMulIdRefEdEntity . class ,    ed 2  _ id )  ;", "BiMulIdRefIngEntity   rev 1     =    getAuditReader (  )  . find ( BiMulIdRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "BiMulIdRefIngEntity   rev 2     =    getAuditReader (  )  . find ( BiMulIdRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.MulIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiMulIdRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiMulIdRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( BiMulIdRefIngEntity . class ,    ing 1  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.ids.MulIdBidirectional"}, {"methodBody": ["METHOD_START", "{", "return   accountId ;", "}", "METHOD_END"], "methodName": ["getAccountId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "this . accountId    =    accountId ;", "}", "METHOD_END"], "methodName": ["setAccountId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Account"}, {"methodBody": ["METHOD_START", "{", "return   accountId ;", "}", "METHOD_END"], "methodName": ["getAccountId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "return   coOwner ;", "}", "METHOD_END"], "methodName": ["getCoOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "this . accountId    =    accountId ;", "}", "METHOD_END"], "methodName": ["setAccountId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "this . coOwner    =    coOwner ;", "}", "METHOD_END"], "methodName": ["setCoOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.AccountNotAuditedOwners"}, {"methodBody": ["METHOD_START", "{", "return   account ;", "}", "METHOD_END"], "methodName": ["getAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "return   personId ;", "}", "METHOD_END"], "methodName": ["getPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . account    =    account ;", "}", "METHOD_END"], "methodName": ["setAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . personId    =    personId ;", "}", "METHOD_END"], "methodName": ["setPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedNoProxyPerson"}, {"methodBody": ["METHOD_START", "{", "return   account ;", "}", "METHOD_END"], "methodName": ["getAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "return   personId ;", "}", "METHOD_END"], "methodName": ["getPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . account    =    account ;", "}", "METHOD_END"], "methodName": ["setAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "this . personId    =    personId ;", "}", "METHOD_END"], "methodName": ["setPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.NotAuditedProxyPerson"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "Person   person    =    new   Person (  \" Robert \"  )  ;", "Account   account    =    new   Account (  \" Saving \"  )  ;", "person . setAccount ( account )  ;", "account . setOwner ( person )  ;", "em . persist ( person )  ;", "em . persist ( account )  ;", "em . getTransa (  )  . commit (  )  ;", "em . getTransa (  )  . begin (  )  ;", "NotAuditedNoProxyPerson   noProxyPerson    =    new   NotAuditedNoProxyPerson (  \" Kinga \"  )  ;", "NotAuditedProxyPerson   proxyPerson    =    new   NotAuditedProxyPerson (  \" Lukasz \"  )  ;", "AccountNotAuditedOwners   accountNotAuditedOwners    =    new   AccountNotAuditedOwners (  \" Standard \"  )  ;", "noProxyPerson . setAccount ( accountNotAuditedOwners )  ;", "proxyPerson . setAccount ( accountNotAuditedOwners )  ;", "accountNotAuditedOwners . setOwner ( noProxyPerson )  ;", "accountNotAuditedOwners . setCoOwner ( proxyPerson )  ;", "em . persist ( accountNotAuditedOwners )  ;", "em . persist ( noProxyPerson )  ;", "em . persist ( proxyPerson )  ;", "em . getTransa (  )  . commit (  )  ;", "personId    =    person . getPersonId (  )  ;", "accountId    =    account . getAccountId (  )  ;", "accountNotAuditedOwnersId    =    accountNotAuditedOwners . getAccountId (  )  ;", "proxyPersonId    =    proxyPerson . getPersonId (  )  ;", "noProxyPersonId    =    noProxyPerson . getPersonId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.OneToOneWithPrimaryKeyJoinTest"}, {"methodBody": ["METHOD_START", "{", "Person   personVer 1     =    new   Person ( personId ,     \" Robert \"  )  ;", "Account   accountVer 1     =    new   Account ( accountId ,     \" Saving \"  )  ;", "personVer 1  . setAccount ( accountVer 1  )  ;", "accountVer 1  . setOwner ( personVer 1  )  ;", "Object [  ]    result    =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Account . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( accountId )  )  . getResultList (  )  . get (  0  )  )  )  ;", "Assert . assertEquals ( accountVer 1  ,    result [  0  ]  )  ;", "Assert . assertEquals ( accountVer 1  . getOwner (  )  ,     (  ( Account )     ( result [  0  ]  )  )  . getOwner (  )  )  ;", "Assert . assertEquals ( RevisionType . ADD ,    result [  2  ]  )  ;", "Assert . assertEquals ( accountVer 1  ,    getAuditReader (  )  . find ( Account . class ,    accountId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.OneToOneWithPrimaryKeyJoinTest"}, {"methodBody": ["METHOD_START", "{", "NotAuditedNoProxyPerson   noProxyPersonVer 1     =    new   NotAuditedNoProxyPerson ( noProxyPersonId ,     \" Kinga \"  )  ;", "NotAuditedProxyPerson   proxyPersonVer 1     =    new   NotAuditedProxyPerson ( proxyPersonId ,     \" Lukasz \"  )  ;", "AccountNotAuditedOwners   accountNotAuditedOwnersVer 1     =    new   AccountNotAuditedOwners ( accountNotAuditedOwnersId ,     \" Standard \"  )  ;", "noProxyPersonVer 1  . setAccount ( accountNotAuditedOwnersVer 1  )  ;", "proxyPersonVer 1  . setAccount ( accountNotAuditedOwnersVer 1  )  ;", "accountNotAuditedOwnersVer 1  . setOwner ( noProxyPersonVer 1  )  ;", "accountNotAuditedOwnersVer 1  . setCoOwner ( proxyPersonVer 1  )  ;", "Object [  ]    result    =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( AccountNotAuditedOwners . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( accountNotAuditedOwnersId )  )  . getResultList (  )  . get (  0  )  )  )  ;", "Assert . assertEquals ( accountNotAuditedOwnersVer 1  ,    result [  0  ]  )  ;", "Assert . assertEquals ( RevisionType . ADD ,    result [  2  ]  )  ;", "Assert . assertEquals ( accountNotAuditedOwnersVer 1  . getOwner (  )  ,     (  ( AccountNotAuditedOwners )     ( result [  0  ]  )  )  . getOwner (  )  )  ;", "Assert . assertTrue (  (  (  (  ( AccountNotAuditedOwners )     ( result [  0  ]  )  )  . getCoOwner (  )  )    instanceof   HProxy )  )  ;", "Assert . assertEquals ( proxyPersonVer 1  . getPersonId (  )  ,     (  ( AccountNotAuditedOwners )     ( result [  0  ]  )  )  . getCoOwner (  )  . getPersonId (  )  )  ;", "Assert . assertEquals ( accountNotAuditedOwnersVer 1  ,    getAuditReader (  )  . find ( AccountNotAuditedOwners . class ,    accountNotAuditedOwnersId ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAccountNotAuditedOwners"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.OneToOneWithPrimaryKeyJoinTest"}, {"methodBody": ["METHOD_START", "{", "Person   personVer 1     =    new   Person ( personId ,     \" Robert \"  )  ;", "Account   accountVer 1     =    new   Account ( accountId ,     \" Saving \"  )  ;", "personVer 1  . setAccount ( accountVer 1  )  ;", "accountVer 1  . setOwner ( personVer 1  )  ;", "Object [  ]    result    =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Person . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( personId )  )  . getResultList (  )  . get (  0  )  )  )  ;", "Assert . assertEquals ( personVer 1  ,    result [  0  ]  )  ;", "Assert . assertEquals ( personVer 1  . getAccount (  )  ,     (  ( Person )     ( result [  0  ]  )  )  . getAccount (  )  )  ;", "Assert . assertEquals ( RevisionType . ADD ,    result [  2  ]  )  ;", "Assert . assertEquals ( personVer 1  ,    getAuditReader (  )  . find ( Person . class ,    personId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPerson"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.OneToOneWithPrimaryKeyJoinTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( Pn . class ,    pnId )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( Account . class ,    accountId )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( AccountNotAuditedOwnclass ,    accountNotAuditedOwnd )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.OneToOneWithPrimaryKeyJoinTest"}, {"methodBody": ["METHOD_START", "{", "return   account ;", "}", "METHOD_END"], "methodName": ["getAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "return   personId ;", "}", "METHOD_END"], "methodName": ["getPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "this . account    =    account ;", "}", "METHOD_END"], "methodName": ["setAccount"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "this . personId    =    personId ;", "}", "METHOD_END"], "methodName": ["setPersonId"], "fileName": "org.hibernate.envers.test.integration.onetoone.bidirectional.primarykeyjoincolumn.Person"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefEdEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "return   reference ;", "}", "METHOD_END"], "methodName": ["getReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "this . reference    =    reference ;", "}", "METHOD_END"], "methodName": ["setReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UniRefIngMulIdEntity"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 1     =    new   UniRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "UniRefEdEntity   ed 2     =    new   UniRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "UniRefEdEntity   ed 3     =    new   UniRefEdEntity (  3  ,     \" data _ ed _  2  \"  )  ;", "UniRefEdEntity   ed 4     =    new   UniRefEdEntity (  4  ,     \" data _ ed _  2  \"  )  ;", "UniRefIngEntity   ing 1     =    new   UniRefIngEntity (  5  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "UniRefIngEntity   ing 2     =    new   UniRefIngEntity (  6  ,     \" data _ ing _  2  \"  ,    ed 3  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ed 3  )  ;", "em . persist ( ed 4  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( UniRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ed 2     =    em . find ( UniRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 1  . setReference ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 2     =    em . find ( UniRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 3     =    em . find ( UniRefEdEntity . class ,    ed 3  . getId (  )  )  ;", "ing 2  . setReference ( ed 4  )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ed 3  _ id    =    ed 3  . getId (  )  ;", "ed 4  _ id    =    ed 4  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.Unidirectional"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 1     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 1  _ id )  ;", "UniRefEdEntity   ed 2     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 2  _ id )  ;", "UniRefIngEntity   rev 1     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "UniRefIngEntity   rev 2     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "UniRefIngEntity   rev 3     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 2  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.Unidirectional"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 3     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 3  _ id )  ;", "UniRefEdEntity   ed 4     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 4  _ id )  ;", "UniRefIngEntity   rev 1     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "UniRefIngEntity   rev 2     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "UniRefIngEntity   rev 3     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 3  )  ;", "assert   rev 2  . getReference (  )  . equals ( ed 3  )  ;", "assert   rev 3  . getReference (  )  . equals ( ed 4  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.Unidirectional"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 3  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 4  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.Unidirectional"}, {"methodBody": ["METHOD_START", "{", "ei    =    new   EmbId (  1  ,     2  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "EmbIdTestEntity   eite    =    new   EmbIdTestEntity ( ei ,     \" data \"  )  ;", "UniRefIngEntity   notNullRef    =    new   UniRefIngEntity (  1  ,     \" data    1  \"  ,    eite )  ;", "UniRefIngEntity   nullRef    =    new   UniRefIngEntity (  2  ,     \" data    2  \"  ,    null )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( eite )  ;", "em . persist ( notNullRef )  ;", "em . persist ( nullRef )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalMulIdWithNulls"}, {"methodBody": ["METHOD_START", "{", "EmbIdTestEntity   eite    =    getAuditReader (  )  . find ( EmbIdTestEntity . class ,    ei ,     1  )  ;", "UniRefIngEntity   notNullRef    =    getAuditReader (  )  . find ( UniRefIngEntity . class ,     1  ,     1  )  ;", "Assert . assertNotNull ( notNullRef . getReference (  )  )  ;", "Assert . assertEquals ( notNullRef . getReference (  )  ,    eite )  ;", "}", "METHOD_END"], "methodName": ["testNotNullReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalMulIdWithNulls"}, {"methodBody": ["METHOD_START", "{", "UniRefIngMulIdEntity   nullRef    =    getAuditReader (  )  . find ( UniRefIngMulIdEntity . class ,     2  ,     1  )  ;", "Assert . assertNull ( nullRef . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNullReference"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalMulIdWithNulls"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 1     =    new   UniRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "UniRefEdEntity   ed 2     =    new   UniRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "UniRefIngEntity   ing 1     =    new   UniRefIngEntity (  3  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "UniRefIngEntity   ing 2     =    new   UniRefIngEntity (  4  ,     \" data _ ing _  2  \"  ,    null )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ed 2  )  ;", "em . persist ( ing 1  )  ;", "em . persist ( ing 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 1     =    em . find ( UniRefIngEntity . class ,    ing 1  . getId (  )  )  ;", "ing 1  . setReference ( null )  ;", "em . getTransa (  )  . commit (  )  ;", "em    =    getEntityManager (  )  ;", "em . getTransa (  )  . begin (  )  ;", "ing 2     =    em . find ( UniRefIngEntity . class ,    ing 2  . getId (  )  )  ;", "ed 2     =    em . find ( UniRefEdEntity . class ,    ed 2  . getId (  )  )  ;", "ing 2  . setReference ( ed 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ed 2  _ id    =    ed 2  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "ing 2  _ id    =    ing 2  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalWithNulls"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 1     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 1  _ id )  ;", "UniRefIngEntity   rev 1     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     1  )  ;", "UniRefIngEntity   rev 2     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     2  )  ;", "UniRefIngEntity   rev 3     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 1  _ id ,     3  )  ;", "assert   rev 1  . getReference (  )  . equals ( ed 1  )  ;", "assert    ( rev 2  . getReference (  )  )     =  =    null ;", "assert    ( rev 3  . getReference (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId1"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalWithNulls"}, {"methodBody": ["METHOD_START", "{", "UniRefEdEntity   ed 2     =    getEntityManager (  )  . find ( UniRefEdEntity . class ,    ed 2  _ id )  ;", "UniRefIngEntity   rev 1     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     1  )  ;", "UniRefIngEntity   rev 2     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     2  )  ;", "UniRefIngEntity   rev 3     =    getAuditReader (  )  . find ( UniRefIngEntity . class ,    ing 2  _ id ,     3  )  ;", "assert    ( rev 1  . getReference (  )  )     =  =    null ;", "assert    ( rev 2  . getReference (  )  )     =  =    null ;", "assert   rev 3  . getReference (  )  . equals ( ed 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIngId2"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalWithNulls"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 1  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefEdEntity . class ,    ed 2  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefIngEntity . class ,    ing 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( UniRefIngEntity . class ,    ing 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.onetoone.unidirectional.UnidirectionalWithNulls"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   pte    =    new   TestEntity (  1  0  ,     1  1  )  ;", "em . persist ( pte )  ;", "id 1     =    pte . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pte    =    em . find ( TestEntity . class ,    id 1  )  ;", "pte . setNumVal 1  (  2  0  )  ;", "pte . setNumVal 2  (  2  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pte    =    em . find ( TestEntity . class ,    id 1  )  ;", "em . remove ( pte )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.primitive.PrimitiveAddDelete"}, {"methodBody": ["METHOD_START", "{", "PrimitiveTestEntity   ver 1     =    new   PrimitiveTestEntity ( id 1  ,     1  0  ,     0  )  ;", "PrimitiveTestEntity   ver 2     =    new   PrimitiveTestEntity ( id 1  ,     2  0  ,     0  )  ;", "assert   getAuditReader (  )  . find ( PrimitiveTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( PrimitiveTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "assert    ( getAuditReader (  )  . find ( PrimitiveTestEntity . class ,    id 1  ,     3  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.primitive.PrimitiveAddDelete"}, {"methodBody": ["METHOD_START", "{", "List   entities    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( PrimitiveTestEntity . class ,    true ,    true )  . getResultList (  )  ;", "assert    ( entities . size (  )  )     =  =     3  ;", "assert   entities . get (  0  )  . equals ( new   PrimitiveTestEntity ( id 1  ,     1  0  ,     0  )  )  ;", "assert   entities . get (  1  )  . equals ( new   PrimitiveTestEntity ( id 1  ,     2  0  ,     0  )  )  ;", "assert   entities . get (  2  )  . equals ( new   PrimitiveTestEntity ( id 1  ,     0  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testQueryWithDeleted"], "fileName": "org.hibernate.envers.test.integration.primitive.PrimitiveAddDelete"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( PrimitiveTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.primitive.PrimitiveAddDelete"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.properties.PropertiesTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Entity   olfe    =    new   Entity (  \" x \"  )  ;", "em . persist ( olfe )  ;", "id 1     =    olfe . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "olfe    =    em . find ( Entity . class ,    id 1  )  ;", "olfe . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingField"}, {"methodBody": ["METHOD_START", "{", "UnversionedOptimisticLockingFieldEntity   ver 1     =    new   UnversionedOptimisticLockingFieldEntity ( id 1  ,     \" x \"  )  ;", "UnversionedOptimisticLockingFieldEntity   ver 2     =    new   UnversionedOptimisticLockingFieldEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( UnversionedOptimisticLockingFieldEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( UnversionedOptimisticLockingFieldEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingField"}, {"methodBody": ["METHOD_START", "{", "PersistentClass   pc    =    metadata (  )  . getEntityBinding (  (  ( UnversionedOptimisticLockingFieldEntity . class . getName (  )  )     +     \"  _ AUD \"  )  )  ;", "Iterator   pi    =    pc . getPropertyIterator (  )  ;", "while    ( pi . hasNext (  )  )     {", "Property   p    =     (  ( Property )     ( pi . next (  )  )  )  ;", "assert    !  (  \" optLocking \"  . equals ( p . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testMapping"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingField"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( UnversionedOptimisticLockingFieldEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingField"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "return   optLocking ;", "}", "METHOD_END"], "methodName": ["getOptLocking"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str )     !  =    null    ?    str . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "this . optLocking    =    optLocking ;", "}", "METHOD_END"], "methodName": ["setOptLocking"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.properties.UnversionedOptimisticLockingFieldEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity   pte    =    new   TestEntity (  \" x \"  )  ;", "em . persist ( pte )  ;", "id 1     =    pte . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "pte    =    em . find ( TestEntity . class ,    id 1  )  ;", "pte . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.properties.VersionsProperties"}, {"methodBody": ["METHOD_START", "{", "PropertiesTestEntity   ver 1     =    new   PropertiesTestEntity ( id 1  ,     \" x \"  )  ;", "PropertiesTestEntity   ver 2     =    new   PropertiesTestEntity ( id 1  ,     \" y \"  )  ;", "assert   getAuditReader (  )  . find ( PropertiesTestEntity . class ,    id 1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( PropertiesTestEntity . class ,    id 1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.properties.VersionsProperties"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( PropertiesTestEntity . class ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.properties.VersionsProperties"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "ListRefEdEntity   listReferencedEntity 1     =    new   ListRefEdEntity ( Integer . valueOf (  1  )  ,     \" str 1  \"  )  ;", "ListRefIngEntity   refingEntity 1     =    new   ListRefIngEntity ( Integer . valueOf (  1  )  ,     \" refing 1  \"  ,    listReferencedEntity 1  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( listReferencedEntity 1  )  ;", "em . persist ( refingEntity 1  )  ;", "em . getTransa (  )  . commit (  )  ;", "id _ ListRefEdEntity 1     =    listReferencedEntity 1  . getId (  )  ;", "ListRefIngEntity   refingEntity 2     =    new   ListRefIngEntity ( Integer . valueOf (  2  )  ,     \" refing 2  \"  ,    listReferencedEntity 1  )  ;", "em . getTransa (  )  . begin (  )  ;", "em . persist ( refingEntity 2  )  ;", "em . getTransa (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.proxy.AuditedCollectionProxyTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ListRefEdEntity   listReferencedEntity 1     =    em . getReference ( ListRefEdEntity . class ,    id _ ListRefEdEntity 1  )  ;", "assert   listReferencedEntity 1    instanceof   HProxy ;", "ListRefIngEntity   refingEntity 3     =    new   ListRefIngEntity ( Integer . valueOf (  3  )  ,     \" refing 3  \"  ,    listReferencedEntity 1  )  ;", "em . persist ( refingEntity 3  )  ;", "listReferencedEntity 1  . getReffering (  )  . size (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testProxyIdentifier"], "fileName": "org.hibernate.envers.test.integration.proxy.AuditedCollectionProxyTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "uste 1     =    new   UionedStrTestEntity (  \" str 1  \"  )  ;", "uste 2     =    new   UionedStrTestEntity (  \" str 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( uste 1  )  ;", "em . persist ( uste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uste 1     =    em . find ( UionedStrTestEntity . class ,    uste 1  . getId (  )  )  ;", "tnae 1     =    new   TargetNotAuditedEntity (  1  ,     \" tnae 1  \"  ,    uste 1  )  ;", "em . persist ( tnae 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "uste 2     =    em . find ( UionedStrTestEntity . class ,    uste 2  . getId (  )  )  ;", "mtonane 1     =    new   ManyToOneNotAuditedNullEntity (  2  ,     \" mtonane 1  \"  ,    uste 2  )  ;", "mtmnane 1     =    new   ManyToManyNotAuditedNullEntity (  3  ,     \" mtmnane 1  \"  )  ;", "mtmnane 1  . getReferences (  )  . add ( uste 2  )  ;", "otmnane 1     =    new   OneToManyNotAuditedNullEntity (  4  ,     \" otmnane 1  \"  )  ;", "otmnane 1  . getReferences (  )  . add ( uste 2  )  ;", "emtonane 1     =    new   ExtManyToOneNotAuditedNullEntity (  5  ,     \" emtonane 1  \"  ,    uste 2  ,     \" extension \"  )  ;", "em . persist ( mtonane 1  )  ;", "em . persist ( mtmnane 1  )  ;", "em . persist ( otmnane 1  )  ;", "em . persist ( emtonane 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ManyToOneNotAuditedNullEntity   tmp 1     =    em . find ( ManyToOneNotAuditedNullEntity . class ,    mtonane 1  . getId (  )  )  ;", "tmp 1  . setReference ( null )  ;", "tmp 1     =    em . merge ( tmp 1  )  ;", "ManyToManyNotAuditedNullEntity   tmp 2     =    em . find ( ManyToManyNotAuditedNullEntity . class ,    mtmnane 1  . getId (  )  )  ;", "tmp 2  . setReferences ( null )  ;", "tmp 2     =    em . merge ( tmp 2  )  ;", "OneToManyNotAuditedNullEntity   tmp 3     =    em . find ( OneToManyNotAuditedNullEntity . class ,    otmnane 1  . getId (  )  )  ;", "tmp 3  . setReferences ( null )  ;", "tmp 3     =    em . merge ( tmp 3  )  ;", "ExtManyToOneNotAuditedNullEntity   tmp 4     =    em . find ( ExtManyToOneNotAuditedNullEntity . class ,    emtonane 1  . getId (  )  )  ;", "tmp 4  . setReference ( null )  ;", "tmp 4     =    em . merge ( tmp 4  )  ;", "em . remove ( em . getReference ( UionedStrTestEntity . class ,    uste 2  . getId (  )  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.proxy.ProxyIdentifier"}, {"methodBody": ["METHOD_START", "{", "ManyToOneNotAuditedNullEntity   mtoRev 2     =    getAuditReader (  )  . find ( ManyToOneNotAuditedNullEntity . class ,    mtonane 1  . getId (  )  ,     2  )  ;", "Assert . assertEquals ( mtonane 1  ,    mtoRev 2  )  ;", "Assert . assertNull ( mtoRev 2  . getReference (  )  )  ;", "ManyToManyNotAuditedNullEntity   mtmRev 2     =    getAuditReader (  )  . find ( ManyToManyNotAuditedNullEntity . class ,    mtmnane 1  . getId (  )  ,     2  )  ;", "Assert . assertEquals ( mtmnane 1  ,    mtmRev 2  )  ;", "Assert . assertTrue ( mtmRev 2  . getReferences (  )  . isEmpty (  )  )  ;", "OneToManyNotAuditedNullEntity   otmRev 2     =    getAuditReader (  )  . find ( OneToManyNotAuditedNullEntity . class ,    otmnane 1  . getId (  )  ,     2  )  ;", "Assert . assertEquals ( otmnane 1  ,    otmRev 2  )  ;", "Assert . assertTrue ( otmRev 2  . getReferences (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNullReferenceWithNotFoundActionIgnore"], "fileName": "org.hibernate.envers.test.integration.proxy.ProxyIdentifier"}, {"methodBody": ["METHOD_START", "{", "ExtManyToOneNotAuditedNullEntity   emtoRev 2     =    getAuditReader (  )  . find ( ExtManyToOneNotAuditedNullEntity . class ,    emtonane 1  . getId (  )  ,     2  )  ;", "Assert . assertEquals ( emtonane 1  ,    emtoRev 2  )  ;", "Assert . assertNull ( emtoRev 2  . getReference (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNullReferenceWithNotFoundActionIgnoreInParent"], "fileName": "org.hibernate.envers.test.integration.proxy.ProxyIdentifier"}, {"methodBody": ["METHOD_START", "{", "TargetNotAuditedEntity   rev 1     =    getAuditReader (  )  . find ( TargetNotAuditedEntity . class ,    tnae 1  . getId (  )  ,     1  )  ;", "Assert . assertTrue (  (  ( rev 1  . getReference (  )  )    instanceof   HibernateProxy )  )  ;", "HibernateProxy   proxyCreateByEnvers    =     (  ( HibernateProxy )     ( rev 1  . getReference (  )  )  )  ;", "LazyInitializer   lazyInitializer    =    proxyCreateByEnvers . getHibernateLazyInitializer (  )  ;", "Assert . assertTrue ( lazyInitializer . isUninitialized (  )  )  ;", "Assert . assertNotNull ( lazyInitializer . get (  )  )  ;", "Assert . assertEquals ( tnae 1  . getId (  )  ,    lazyInitializer . get (  )  )  ;", "Assert . assertTrue ( lazyInitializer . isUninitialized (  )  )  ;", "Assert . assertEquals ( uste 1  . getId (  )  ,    rev 1  . getReference (  )  . getId (  )  )  ;", "Assert . assertEquals ( uste 1  . getStr (  )  ,    rev 1  . getReference (  )  . getStr (  )  )  ;", "Assert . assertFalse ( lazyInitializer . isUninitialized (  )  )  ;", "}", "METHOD_END"], "methodName": ["testProxyIdentifier"], "fileName": "org.hibernate.envers.test.integration.proxy.ProxyIdentifier"}, {"methodBody": ["METHOD_START", "{", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste    =    new   StrTestEntity (  \" data \"  )  ;", "getSession (  )  . persist ( ste )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "id    =    ste . getId (  )  ;", "getSession (  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.proxy.QueryingWithProxyObjectTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   originalSte    =    new   StrTestEntity (  \" data \"  ,    id )  ;", "StrTestEntity   Ste    =     (  ( StrTestEntity )     ( getSession (  )  . load ( StrTestEntity . class ,    id )  )  )  ;", "Assert . assertTrue ( getAuditReader (  )  . isEntityClassAudited ( Ste . getClass (  )  )  )  ;", "StrTestEntity   ste    =    getAuditReader (  )  . find ( Ste . getClass (  )  ,    Ste . getId (  )  ,     1  )  ;", "Assert . assertEquals ( originalSte ,    ste )  ;", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( Ste . getClass (  )  ,    Ste . getId (  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    revisions )  ;", "List < StrTestEntity >    entities    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( Ste . getClass (  )  ,     1  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList ( originalSte )  ,    entities )  ;", "ste    =     (  ( StrTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( Ste . getClass (  )  ,    true ,    false )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( originalSte ,    ste )  ;", "ste    =     (  ( StrTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision ( Ste . getClass (  )  ,     1  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( originalSte ,    ste )  ;", "}", "METHOD_END"], "methodName": ["testQueryingWithProxyObject"], "fileName": "org.hibernate.envers.test.integration.proxy.QueryingWithProxyObjectTest"}, {"methodBody": ["METHOD_START", "{", "return    (  ( SequenceIdRevisionEntity )     ( revisionEntity )  )  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["getRevisionNumber"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "SetRefEdEntity   refEdEntity 1     =    new   SetRefEdEntity (  1  ,     \" Demo   Data    1  \"  )  ;", "SetRefIngEntity   refIngEntity 1     =    new   SetRefIngEntity (  2  ,     \" Example   Data    1  \"  ,    refEdEntity 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( refEdEntity 1  )  ;", "em . persist ( refIngEntity 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "refEdEntity 1     =    em . find ( SetRefEdEntity . class ,     1  )  ;", "refIngEntity 1     =    em . find ( SetRefIngEntity . class ,     2  )  ;", "em . r ( refIngEntity 1  )  ;", "em . r ( refEdEntity 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "SetRefEdEntity   refEdEntity 2     =    new   SetRefEdEntity (  3  ,     \" Demo   Data    2  \"  )  ;", "SetRefIngEntity   refIngEntity 2     =    new   SetRefIngEntity (  4  ,     \" Example   Data    2  \"  ,    refEdEntity 2  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( refEdEntity 2  )  ;", "em . persist ( refIngEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "refIngEntity 2     =    em . find ( SetRefIngEntity . class ,     4  )  ;", "em . r ( refIngEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "refEdEntity 2     =    em . find ( SetRefEdEntity . class ,     3  )  ;", "em . r ( refEdEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "SetOwningEntity   setOwningEntity 1     =    new   SetOwningEntity (  5  ,     \" Demo   Data    1  \"  )  ;", "SetOwnedEntity   setOwnedEntity 1     =    new   SetOwnedEntity (  6  ,     \" Example   Data    1  \"  )  ;", "Set < SetOwningEntity >    owning    =    new   HashSet < SetOwningEntity >  (  )  ;", "Set < SetOwnedEntity >    owned    =    new   HashSet < SetOwnedEntity >  (  )  ;", "owning . add ( setOwningEntity 1  )  ;", "owned . add ( setOwnedEntity 1  )  ;", "setOwningEntity 1  . setReferences ( owned )  ;", "setOwnedEntity 1  . setReferencing ( owning )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( setOwnedEntity 1  )  ;", "em . persist ( setOwningEntity 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "setOwnedEntity 1     =    em . find ( SetOwnedEntity . class ,     6  )  ;", "setOwningEntity 1     =    em . find ( SetOwningEntity . class ,     5  )  ;", "em . r ( setOwningEntity 1  )  ;", "em . r ( setOwnedEntity 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "SetOwningEntity   setOwningEntity 2     =    new   SetOwningEntity (  7  ,     \" Demo   Data    2  \"  )  ;", "SetOwnedEntity   setOwnedEntity 2     =    new   SetOwnedEntity (  8  ,     \" Example   Data    2  \"  )  ;", "owning    =    new   HashSet < SetOwningEntity >  (  )  ;", "owned    =    new   HashSet < SetOwnedEntity >  (  )  ;", "owning . add ( setOwningEntity 2  )  ;", "owned . add ( setOwnedEntity 2  )  ;", "setOwningEntity 2  . setReferences ( owned )  ;", "setOwnedEntity 2  . setReferencing ( owning )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( setOwnedEntity 2  )  ;", "em . persist ( setOwningEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "setOwningEntity 2     =    em . find ( SetOwningEntity . class ,     7  )  ;", "em . r ( setOwningEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "setOwnedEntity 2     =    em . find ( SetOwnedEntity . class ,     8  )  ;", "em . r ( setOwnedEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "StringSetEntity   stringSetEntity    =    new   StringSetEntity (  )  ;", "stringSetEntity . getStrings (  )  . add (  \" string    1  \"  )  ;", "stringSetEntity . getStrings (  )  . add (  \" string    2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( stringSetEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "stringSetId    =    stringSetEntity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "stringSetEntity    =    em . find ( StringSetEntity . class ,    stringSetEntity . getId (  )  )  ;", "em . r ( stringSetEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "unversionedEntity 1     =    new   UnversionedStrTestEntity (  \" string    1  \"  )  ;", "unversionedEntity 2     =    new   UnversionedStrTestEntity (  \" string    2  \"  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   relationNotAuditedEntity    =    new   M 2 MIndexedListTargetNotAuditedEntity (  1  ,     \" Parent \"  )  ;", "relationNotAuditedEntity . getReferences (  )  . add ( unversionedEntity 1  )  ;", "relationNotAuditedEntity . getReferences (  )  . add ( unversionedEntity 2  )  ;", "em . persist ( unversionedEntity 1  )  ;", "em . persist ( unversionedEntity 2  )  ;", "em . persist ( relationNotAuditedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "relationNotAuditedEntity    =    em . find ( M 2 MIndexedListTargetNotAuditedEntity . class ,    relationNotAuditedEntity . getId (  )  )  ;", "em . r ( relationNotAuditedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "stringEntity 1     =    new   StrTestPrivSeqEntity (  \" Value    1  \"  )  ;", "stringEntity 2     =    new   StrTestPrivSeqEntity (  \" Value    2  \"  )  ;", "intEntity 1     =    new   IntTestPrivSeqEntity (  1  )  ;", "intEntity 2     =    new   IntTestPrivSeqEntity (  2  )  ;", "TernaryMapEntity   mapEntity    =    new   TernaryMapEntity (  )  ;", "mapEntity . getMap (  )  . put ( intEntity 1  ,    stringEntity 1  )  ;", "mapEntity . getMap (  )  . put ( intEntity 2  ,    stringEntity 2  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( stringEntity 1  )  ;", "em . persist ( stringEntity 2  )  ;", "em . persist ( intEntity 1  )  ;", "em . persist ( intEntity 2  )  ;", "em . persist ( mapEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "ternaryMapId    =    mapEntity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "intEntity 2     =    em . find ( IntTestPrivSeqEntity . class ,    intEntity 2  . getId (  )  )  ;", "intEntity 2  . setNumber (  3  )  ;", "intEntity 2     =    em . merge ( intEntity 2  )  ;", "stringEntity 2     =    em . find ( StrTestPrivSeqEntity . class ,    stringEntity 2  . getId (  )  )  ;", "stringEntity 2  . setStr (  \" Value    3  \"  )  ;", "stringEntity 2     =    em . merge ( stringEntity 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "mapEntity    =    em . find ( TernaryMapEntity . class ,    mapEntity . getId (  )  )  ;", "em . r ( mapEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "CollectionRefEdEntity   collEd 1     =    new   CollectionRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "CollectionRefIngEntity   collIng 1     =    new   CollectionRefIngEntity (  2  ,     \" data _ ing _  1  \"  ,    collEd 1  )  ;", "collEd 1  . setReffering ( new   ArrayList < CollectionRefIngEntity >  (  )  )  ;", "collEd 1  . getReffering (  )  . add ( collIng 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( collEd 1  )  ;", "em . persist ( collIng 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collIng 1     =    em . find ( CollectionRefIngEntity . class ,    collIng 1  . getId (  )  )  ;", "collIng 1  . setData (  \" modified   data _ ing _  1  \"  )  ;", "collIng 1     =    em . merge ( collIng 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "collEd 1     =    em . find ( CollectionRefEdEntity . class ,    collEd 1  . getId (  )  )  ;", "collIng 1     =    em . find ( CollectionRefIngEntity . class ,    collIng 1  . getId (  )  )  ;", "em . r ( collIng 1  )  ;", "em . r ( collEd 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ListOwnedEntity   listEd 1     =    new   ListOwnedEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "ListOwningEntity   listIng 1     =    new   ListOwningEntity (  2  ,     \" data _ ing _  1  \"  )  ;", "listEd 1  . setReferencing ( new   ArrayList < ListOwningEntity >  (  )  )  ;", "listIng 1  . setReferences ( new   ArrayList < ListOwnedEntity >  (  )  )  ;", "listEd 1  . getReferencing (  )  . add ( listIng 1  )  ;", "listIng 1  . getReferences (  )  . add ( listEd 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( listEd 1  )  ;", "em . persist ( listIng 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "listIng 1     =    em . find ( ListOwningEntity . class ,    listIng 1  . getId (  )  )  ;", "listIng 1  . setData (  \" modified   data _ ing _  1  \"  )  ;", "listIng 1     =    em . merge ( listIng 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "listIng 1     =    em . find ( ListOwningEntity . class ,    listIng 1  . getId (  )  )  ;", "listEd 1     =    em . find ( ListOwnedEntity . class ,    listEd 1  . getId (  )  )  ;", "em . r ( listIng 1  )  ;", "em . r ( listEd 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StringSetEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( stringSetId )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "[  ]    objArray    =     (  (  [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  1  2  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "StringSetEntity   stringSetEntity    =     (  ( StringSetEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals ( TestTools . makeSet (  \" string    1  \"  ,     \" string    2  \"  )  ,    stringSetEntity . getStrings (  )  )  ;", "}", "METHOD_END"], "methodName": ["testElementCollection"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   ListOwnedEntity   edVer 1     =    new   ListOwnedEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "final   ListOwningEntity   ingVer 1     =    new   ListOwningEntity (  2  ,     \" data _ ing _  1  \"  )  ;", "final   ListOwningEntity   ingVer 2     =    new   ListOwningEntity (  2  ,     \" modified   data _ ing _  1  \"  )  ;", "ListOwnedEntity   entity    =    getAuditReader (  )  . find ( ListOwnedEntity . class ,     1  ,     2  1  )  ;", "Assert . assertEquals ( edVer 1  ,    entity )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReferencing (  )  ,    ingVer 1  )  )  ;", "entity    =    getAuditReader (  )  . find ( ListOwnedEntity . class ,     1  ,     2  2  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReferencing (  )  ,    ingVer 2  )  )  ;", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( ListOwnedEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "[  ]    objArray    =     (  (  [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  2  3  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "entity    =     (  ( ListOwnedEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" data _ ed _  1  \"  ,    entity . getData (  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReferencing (  )  ,    ingVer 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testManyToManyCollectionSemantics"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   CollectionRefEdEntity   edVer 1     =    new   CollectionRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "final   CollectionRefIngEntity   ingVer 1     =    new   CollectionRefIngEntity (  2  ,     \" data _ ing _  1  \"  )  ;", "final   CollectionRefIngEntity   ingVer 2     =    new   CollectionRefIngEntity (  2  ,     \" modified   data _ ing _  1  \"  )  ;", "CollectionRefEdEntity   entity    =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,     1  ,     1  8  )  ;", "Assert . assertEquals ( edVer 1  ,    entity )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReffering (  )  ,    ingVer 1  )  )  ;", "entity    =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,     1  ,     1  9  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReffering (  )  ,    ingVer 2  )  )  ;", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( CollectionRefEdEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "[  ]    objArray    =     (  (  [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  2  0  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "entity    =     (  ( CollectionRefEdEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" data _ ed _  1  \"  ,    entity . getData (  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( entity . getReffering (  )  ,    ingVer 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testOneToManyCollectionSemantics"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetOwningEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  7  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  9  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetOwningEntity   setOwningEntity    =     (  ( SetOwningEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Demo   Data    2  \"  ,    setOwningEntity . getData (  )  )  ;", "Hinitialize ( setOwningEntity . getReferences (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   SetOwnedEntity (  8  ,     \" Example   Data    2  \"  )  )  ,    setOwningEntity . getReferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOwnedManyToManyDifferentRevisions"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetOwningEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  5  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  7  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetOwningEntity   setOwningEntity    =     (  ( SetOwningEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Demo   Data    1  \"  ,    setOwningEntity . getData (  )  )  ;", "Hinitialize ( setOwningEntity . getReferences (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   SetOwnedEntity (  6  ,     \" Example   Data    1  \"  )  )  ,    setOwningEntity . getReferences (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOwnedManyToManySameRevision"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetOwnedEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  8  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  1  0  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetOwnedEntity   setOwnedEntity    =     (  ( SetOwnedEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Example   Data    2  \"  ,    setOwnedEntity . getData (  )  )  ;", "Hinitialize ( setOwnedEntity . getReferencing (  )  )  ;", "Assert . assertTrue ( setOwnedEntity . getReferencing (  )  . isEmpty (  )  )  ;", "queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetOwnedEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  8  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  9  )  )  . getResultList (  )  ;", "objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "setOwnedEntity    =     (  ( SetOwnedEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Example   Data    2  \"  ,    setOwnedEntity . getData (  )  )  ;", "Hinitialize ( setOwnedEntity . getReferencing (  )  )  ;", "Assert . assertTrue ( setOwnedEntity . getReferencing (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOwningManyToManyDifferentRevisions"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetOwnedEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  6  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  7  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetOwnedEntity   setOwnedEntity    =     (  ( SetOwnedEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Example   Data    1  \"  ,    setOwnedEntity . getData (  )  )  ;", "Hinitialize ( setOwnedEntity . getReferencing (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   SetOwningEntity (  5  ,     \" Demo   Data    1  \"  )  )  ,    setOwnedEntity . getReferencing (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOwningManyToManySameRevision"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetRefIngEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  4  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  4  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetRefIngEntity   refIngEntity    =     (  ( SetRefIngEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Example   Data    2  \"  ,    refIngEntity . getData (  )  )  ;", "Hinitialize ( refIngEntity . getReference (  )  )  ;", "Assert . assertEquals (  \" Demo   Data    2  \"  ,    refIngEntity . getReference (  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferencedOneToManyDifferentRevisions"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetRefIngEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  2  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  2  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetRefIngEntity   refIngEntity    =     (  ( SetRefIngEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Example   Data    1  \"  ,    refIngEntity . getData (  )  )  ;", "Hinitialize ( refIngEntity . getReference (  )  )  ;", "Assert . assertEquals (  \" Demo   Data    1  \"  ,    refIngEntity . getReference (  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferencedOneToManySameRevision"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetRefEdEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  3  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  5  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetRefEdEntity   refEdEntity    =     (  ( SetRefEdEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Demo   Data    2  \"  ,    refEdEntity . getData (  )  )  ;", "Hinitialize ( refEdEntity . getReffering (  )  )  ;", "Assert . assertTrue ( refEdEntity . getReffering (  )  . isEmpty (  )  )  ;", "queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetRefEdEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  3  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  4  )  )  . getResultList (  )  ;", "objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "refEdEntity    =     (  ( SetRefEdEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Demo   Data    2  \"  ,    refEdEntity . getData (  )  )  ;", "Hinitialize ( refEdEntity . getReffering (  )  )  ;", "Assert . assertTrue ( refEdEntity . getReffering (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferringOneToManyDifferentRevisions"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( SetRefEdEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "Object [  ]    objArray    =     (  ( Object [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  2  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "SetRefEdEntity   refEdEntity    =     (  ( SetRefEdEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals (  \" Demo   Data    1  \"  ,    refEdEntity . getData (  )  )  ;", "Hinitialize ( refEdEntity . getReffering (  )  )  ;", "Assert . assertEquals ( TestTools . makeSet ( new   SetRefIngEntity (  2  ,     \" Example   Data    1  \"  )  )  ,    refEdEntity . getReffering (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReferringOneToManySameRevision"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   TernaryMapEntity   ternaryMap    =    new   TernaryMapEntity (  )  ;", "ternaryMap . setId ( ternaryMapId )  ;", "ternaryMap . getMap (  )  . put ( intEntity 1  ,    stringEntity 1  )  ;", "ternaryMap . getMap (  )  . put ( new   IntTestPrivSeqEntity (  2  ,    intEntity 2  . getId (  )  )  ,    new   StrTestPrivSeqEntity (  \" Value    2  \"  ,    stringEntity 2  . getId (  )  )  )  ;", "TernaryMapEntity   entity    =    getAuditReader (  )  . find ( TernaryMapEntity . class ,    ternaryMapId ,     1  5  )  ;", "Assert . assertEquals ( ternaryMap . getMap (  )  ,    entity . getMap (  )  )  ;", "ternaryMap . getMap (  )  . clear (  )  ;", "ternaryMap . getMap (  )  . put ( intEntity 1  ,    stringEntity 1  )  ;", "ternaryMap . getMap (  )  . put ( intEntity 2  ,    stringEntity 2  )  ;", "entity    =    getAuditReader (  )  . find ( TernaryMapEntity . class ,    ternaryMapId ,     1  6  )  ;", "Assert . assertEquals ( ternaryMap . getMap (  )  ,    entity . getMap (  )  )  ;", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( TernaryMapEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( ternaryMapId )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "[  ]    objArray    =     (  (  [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  1  7  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "entity    =     (  ( TernaryMapEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertEquals ( ternaryMap . getMap (  )  ,    entity . getMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTernaryMap"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   queryResult    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( M 2 MIndexedListTargetNotAuditedEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq (  1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . DEL )  )  . getResultList (  )  ;", "[  ]    objArray    =     (  (  [  ]  )     ( queryResult . get (  0  )  )  )  ;", "Assert . assertEquals (  1  4  ,    getRevisionNumber ( objArray [  1  ]  )  )  ;", "M 2 MIndexedListTargetNotAuditedEntity   relationNotAuditedEntity    =     (  ( M 2 MIndexedListTargetNotAuditedEntity )     ( objArray [  0  ]  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( relationNotAuditedEntity . getReferences (  )  ,    unversionedEntity 1  ,    unversionedEntity 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnversionedRelation"], "fileName": "org.hibernate.envers.test.integration.proxy.RemovedObjectQueryTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( expectedResults . size (  )  ,    results . size (  )  )  ;", "for    (    i    =     0  ;    i    <     ( results . size (  )  )  ;     +  + i )     {", "final   Object [  ]    row    =     (  ( Object [  ]  )     ( results . get ( i )  )  )  ;", "final   Object [  ]    expectedRow    =    expectedResults . get ( i )  ;", "Assert . assertEquals (  4  ,    row . length )  ;", "Assert . assertEquals ( expectedRow [  0  ]  ,    row [  0  ]  )  ;", "Assert . assertEquals ( expectedRow [  1  ]  ,    row [  2  ]  )  ;", "Assert . assertEquals ( expectedRow [  2  ]  ,    row [  3  ]  )  ;", "}", "}", "METHOD_END"], "methodName": ["compareResults"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "String   deleteName    =    null ;", "Integer   deleteValue    =    null ;", "if    (  ( getConfig (  )  . get ( EnversSettings . STORE _ DATA _ AT _ DELETE )  )     =  =     ( Boolean . TRUE )  )     {", "deleteName    =     \" Name - Modified 3  \"  ;", "deleteValue    =     1  0  0  ;", "}", "final   List < Object [  ]  >    results    =    new   ArrayList <  >  (  )  ;", "results . add ( new   Object [  ]  {    new    . Simple ( simpleId ,     \" Name \"  ,     2  5  )  ,    RevisionType . ADD ,    Collections . emptySet (  )     }  )  ;", "results . add ( new   Object [  ]  {    new    . Simple ( simpleId ,     \" Name - Modified 2  \"  ,     2  5  )  ,    RevisionType . MOD ,    TestTools . makeSet (  \" name \"  )     }  )  ;", "results . add ( new   Object [  ]  {    new    . Simple ( simpleId ,     \" Name - Modified 3  \"  ,     1  0  0  )  ,    RevisionType . MOD ,    TestTools . makeSet (  \" name \"  ,     \" value \"  )     }  )  ;", "if    ( includeDeletions )     {", "results . add ( new   Object [  ]  {    new    . Simple ( simpleId ,    deleteName ,    deleteValue )  ,    RevisionType . DEL ,    Collections . emptySet (  )     }  )  ;", "}", "System . out . println (  (  (  \" Generated    \"     +     ( results . size (  )  )  )     +     \"    results .  \"  )  )  ;", "return   results ;", "}", "METHOD_END"], "methodName": ["getExpectedResults"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "simpleId    =    doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    new   Simple (  )  ;", "simple . setName (  \" Name \"  )  ;", "simple . setValue (  2  5  )  ;", "entityManager . persist ( simple )  ;", "return   simple . getId (  )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,    simpleId )  ;", "simple . setName (  \" Name - Modified 2  \"  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,    simpleId )  ;", "simple . setName (  \" Name - Modified 3  \"  )  ;", "simple . setValue (  1  0  0  )  ;", "entityManager . merge ( simple )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Simple   simple    =    entityManager . find (  . class ,    simpleId )  ;", "entityManager . remove ( simple )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntityWithChanges ( AbstractEntityWithChangesQueryTest . Simple . class ,    true )  . add ( AuditEntity . id (  )  . eq ( simpleId )  )  . getResultList (  )  ;", "compareResults ( getExpectedResults ( true )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["testEntityRevisionsWithChangesQuery"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntityWithChanges ( AbstractEntityWithChangesQueryTest . Simple . class ,    false )  . add ( AuditEntity . id (  )  . eq ( simpleId )  )  . getResultList (  )  ;", "compareResults ( getExpectedResults ( false )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["testEntityRevisionsWithChangesQueryNoDeletions"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  )  ,    getAuditReader (  )  . getRevisions ( AbstractEntityWithChangesQueryTest . Simple . class ,    simpleId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCount"], "fileName": "org.hibernate.envers.test.integration.query.AbstractEntityWithChangesQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite 1     =    new   IntTestEntity (  2  )  ;", "IntTestEntity   ite 2     =    new   IntTestEntity (  1  0  )  ;", "em . persist ( ite 1  )  ;", "em . persist ( ite 2  )  ;", "Integer   id 1     =    ite 1  . getId (  )  ;", "Integer   id 2     =    ite 2  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite 3     =    new   IntTestEntity (  8  )  ;", "UnusualIdNamingEntity   uine 1     =    new   UnusualIdNamingEntity (  \" id 1  \"  ,     \" data 1  \"  )  ;", "em . persist ( uine 1  )  ;", "em . persist ( ite 3  )  ;", "ite 1     =    em . find ( IntTestEntity . class ,    id 1  )  ;", "ite 1  . setNumber (  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "ite 2     =    em . find ( IntTestEntity . class ,    id 2  )  ;", "ite 2  . setNumber (  5  2  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    ver 1     =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     1  )  . addProjection ( AuditEntity . property (  \" number \"  )  . max (  )  )  . addProjection ( AuditEntity . property (  \" number \"  )  . function (  \" avg \"  )  )  . getSingleResult (  )  )  )  ;", "Object [  ]    ver 2     =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     2  )  . addProjection ( AuditEntity . property (  \" number \"  )  . max (  )  )  . addProjection ( AuditEntity . property (  \" number \"  )  . function (  \" avg \"  )  )  . getSingleResult (  )  )  )  ;", "Object [  ]    ver 3     =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     3  )  . addProjection ( AuditEntity . property (  \" number \"  )  . max (  )  )  . addProjection ( AuditEntity . property (  \" number \"  )  . function (  \" avg \"  )  )  . getSingleResult (  )  )  )  ;", "assert    (  ( Integer )     ( ver 1  [  0  ]  )  )     =  =     1  0  ;", "assert    (  ( Double )     ( ver 1  [  1  ]  )  )     =  =     6  .  0  ;", "assert    (  ( Integer )     ( ver 2  [  0  ]  )  )     =  =     1  0  ;", "assert    (  ( Double )     ( ver 2  [  1  ]  )  )     =  =     6  .  0  ;", "assert    (  ( Integer )     ( ver 3  [  0  ]  )  )     =  =     5  2  ;", "assert    (  ( Double )     ( ver 3  [  1  ]  )  )     =  =     2  0  .  0  ;", "}", "METHOD_END"], "methodName": ["testEntitiesAvgMaxQuery"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . cre (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . hasChanged (  )  )  . getResultList (  )  ;", "}    catch    ( UnsupportedOperationException   e 1  )     {", "try    {", "getAuditReader (  )  . cre (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . hasNotChanged (  )  )  . getResultList (  )  ;", "}    catch    ( UnsupportedOperationException   e 2  )     {", "return ;", "}", "Assert . fail (  )  ;", "}", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["testEntityIdModifiedFlagNotSupported"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "List < IntTestEntity >    list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    true )  . add ( AuditEntity . revisionNumber (  )  . lt (  2  )  )  . addOrder ( AuditEntity . id (  )  . desc (  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList ( new   IntTestEntity (  1  0  ,     2  )  ,    new   IntTestEntity (  2  ,     1  )  )  ,    list )  ;", "}", "METHOD_END"], "methodName": ["testEntityIdOrdering"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "Integer   maxId    =     (  ( Integer )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    true )  . addProjection ( AuditEntity . id (  )  . max (  )  )  . add ( AuditEntity . revisionNumber (  )  . gt (  2  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  2  )  ,    maxId )  ;", "}", "METHOD_END"], "methodName": ["testEntityIdProjection"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "List < IntTestEntity >    list    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( IntTestEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . between (  2  ,     3  )  )  . getResultList (  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( list ,    new   IntTestEntity (  1  0  ,     2  )  ,    new   IntTestEntity (  8  ,     3  )  ,    new   IntTestEntity (  5  2  ,     2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityIdRestriction"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "UnusualIdNamingEntity   entity    =     (  ( UnusualIdNamingEntity )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( UnusualIdNamingEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . like (  \" id 1  \"  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( new   UnusualIdNamingEntity (  \" id 1  \"  ,     \" data 1  \"  )  ,    entity )  ;", "}", "METHOD_END"], "methodName": ["testUnusualIdFieldName"], "fileName": "org.hibernate.envers.test.integration.query.AggregateQuery"}, {"methodBody": ["METHOD_START", "{", "return   getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision ( AssociationEntitiesModifiedQueryTest . Template . class ,    revision )  . traverseRelation (  \" templateType \"  ,    INNER )  . addProjection ( AuditEntity . selectEntity ( false )  )  . up (  )  . add ( AuditEntity . property (  \" templateType \"  )  . hasChanged (  )  )  . getResultList (  )  ;", "}", "METHOD_END"], "methodName": ["getEntitiesModifiedAtRevisionUsingAssociationQueryResults"], "fileName": "org.hibernate.envers.test.integration.query.AssociationEntitiesModifiedQueryTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   TemplateType   type 1     =    new   TemplateType (  1  ,     \" Type 1  \"  )  ;", "final   TemplateType   type 2     =    new   TemplateType (  2  ,     \" Type 2  \"  )  ;", "final   Template   template    =    new   Template (  1  ,     \" Template 1  \"  ,    type 1  )  ;", "entityManager . persist ( type 1  )  ;", "entityManager . persist ( type 2  )  ;", "entityManager . persist ( template )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   TemplateType   type    =    entityManager . find (  . class ,     2  )  ;", "final   Template   template    =    entityManager . find (  . class ,     1  )  ;", "template . setTemplateType ( type )  ;", "entityManager . merge ( template )  ;", "}  )  ;", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Template   template    =    entityManager . find (  . class ,     1  )  ;", "entityManager . remove ( template )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.AssociationEntitiesModifiedQueryTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAtRevisionUsingAssociationQueryResults (  1  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "assertEquals (  \" Type 1  \"  ,     (  ( TemplateType )     ( results . get (  0  )  )  )  . getName (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesModifiedAtRevision1WithAssociationQueries"], "fileName": "org.hibernate.envers.test.integration.query.AssociationEntitiesModifiedQueryTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAtRevisionUsingAssociationQueryResults (  2  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "assertEquals (  \" Type 2  \"  ,     (  ( TemplateType )     ( results . get (  0  )  )  )  . getName (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesModifiedAtRevision2WithAssociationQueries"], "fileName": "org.hibernate.envers.test.integration.query.AssociationEntitiesModifiedQueryTest"}, {"methodBody": ["METHOD_START", "{", "doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAtRevisionUsingAssociationQueryResults (  3  )  ;", "assertEquals (  0  ,    results . size (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesModifiedAtRevision3WithAssociationQueries"], "fileName": "org.hibernate.envers.test.integration.query.AssociationEntitiesModifiedQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "address 1     =    new   Address (  \" Freiburgerstrasse \"  ,     5  )  ;", "em . persist ( address 1  )  ;", "address 2     =    new   Address (  \" Hindenburgstrasse \"  ,     3  0  )  ;", "em . persist ( address 2  )  ;", "vwOwner    =    new   Person (  \" VW   owner \"  ,     2  0  ,    address 1  )  ;", "em . persist ( vwOwner )  ;", "fordOwner    =    new   Person (  \" Ford   owner \"  ,     3  0  ,    address 1  )  ;", "em . persist ( fordOwner )  ;", "toyotaOwner    =    new   Person (  \" Toyota   owner \"  ,     3  0  ,    address 2  )  ;", "em . persist ( toyotaOwner )  ;", "final   Person   nonOwner    =    new   Person (  \" NonOwner \"  ,     3  0  ,    address 1  )  ;", "em . persist ( nonOwner )  ;", "vw    =    new   Car (  \" VW \"  )  ;", "vw . setOwner ( vwOwner )  ;", "em . persist ( vw )  ;", "ford    =    new   Car (  \" Ford \"  )  ;", "ford . setOwner ( fordOwner )  ;", "em . persist ( ford )  ;", "toyota    =    new   Car (  \" Toyota \"  )  ;", "toyota . setOwner ( toyotaOwner )  ;", "em . persist ( toyota )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "toyotaOwner . setAge (  4  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   auditReader    =    getAuditReader (  )  ;", "final   Car   result 1     =     (  ( Car )     ( auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" Ford %  \"  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals (  \" Unexpected   single   car   at   revision    1  \"  ,    ford . getId (  )  ,    result 1  . getId (  )  )  ;", "Car   result 2     =     (  ( Car )     ( auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER )  . traverseRel (  \" address \"  ,    INNER )  . add ( AuditEntity . property (  \" number \"  )  . eq (  3  0  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals (  \" Unexpected   single   car   at   revision    1  \"  ,    toyota . getId (  )  ,    result 2  . getId (  )  )  ;", "List < Car >    resultList 1     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER )  . add ( AuditEntity . property (  \" age \"  )  . ge (  3  0  )  )  . add ( AuditEntity . property (  \" age \"  )  . lt (  4  0  )  )  . up (  )  . addOrder ( AuditEntity . property (  \" make \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   cars   for   query   in   revision    1  \"  ,     2  ,    resultList 1  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0    in   revision    1  \"  ,    ford . getId (  )  ,    resultList 1  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    1    in   revision    2  \"  ,    toyota . getId (  )  ,    resultList 1  . get (  1  )  . getId (  )  )  ;", "Car   result 3     =     (  ( Car )     ( auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     2  )  . traverseRel (  \" owner \"  ,    INNER )  . add ( AuditEntity . property (  \" age \"  )  . ge (  3  0  )  )  . add ( AuditEntity . property (  \" age \"  )  . lt (  4  0  )  )  . up (  )  . addOrder ( AuditEntity . property (  \" make \"  )  . asc (  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   revision    2  \"  ,    ford . getId (  )  ,    result 3  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAssociationQuery"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Car >    cars 1     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER )  . traverseRel (  \" address \"  ,    INNER )  . addOrder ( AuditEntity . property (  \" number \"  )  . asc (  )  )  . up (  )  . addOrder ( AuditEntity . property (  \" age \"  )  . desc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     3  ,    cars 1  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    ford . getId (  )  ,    cars 1  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    1  \"  ,    vw . getId (  )  ,    cars 1  . get (  1  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    2  \"  ,    toyota . getId (  )  ,    cars 1  . get (  2  )  . getId (  )  )  ;", "List < Car >    cars 2     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER )  . traverseRel (  \" address \"  ,    INNER )  . addOrder ( AuditEntity . property (  \" number \"  )  . asc (  )  )  . up (  )  . addOrder ( AuditEntity . property (  \" age \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     3  ,    cars 2  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    vw . getId (  )  ,    cars 2  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    1  \"  ,    ford . getId (  )  ,    cars 2  . get (  1  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    2  \"  ,    toyota . getId (  )  ,    cars 2  . get (  2  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAssociationQueryWithOrdering"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Integer >    list 1     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     2  )  . traverseRel (  \" owner \"  ,    INNER )  . addProjection ( AuditEntity . property (  \" age \"  )  )  . addOrder ( AuditEntity . property (  \" age \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     3  ,    list 1  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   age   at   index    0  \"  ,    Integer . valueOf (  2  0  )  ,    list 1  . get (  0  )  )  ;", "Assert . assertEquals (  \" Unexpected   age   at   index    0  \"  ,    Integer . valueOf (  3  0  )  ,    list 1  . get (  1  )  )  ;", "Assert . assertEquals (  \" Unexpected   age   at   index    0  \"  ,    Integer . valueOf (  4  0  )  ,    list 1  . get (  2  )  )  ;", "List < Address >    list 2     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     2  )  . traverseRel (  \" owner \"  ,    INNER )  . addOrder ( AuditEntity . property (  \" age \"  )  . asc (  )  )  . traverseRel (  \" address \"  ,    INNER )  . addProjection ( AuditEntity . selectEntity ( false )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     3  ,    list 2  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   address   at   index    0  \"  ,    address 1  . getId (  )  ,    list 2  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   address   at   index    1  \"  ,    address 1  . getId (  )  ,    list 2  . get (  1  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   address   at   index    2  \"  ,    address 2  . getId (  )  ,    list 2  . get (  2  )  . getId (  )  )  ;", "List < Address >    list 3     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     2  )  . traverseRel (  \" owner \"  ,    INNER )  . traverseRel (  \" address \"  ,    INNER )  . addProjection ( AuditEntity . selectEntity ( true )  )  . addOrder ( AuditEntity . property (  \" number \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     2  ,    list 3  . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   address   at   index    0  \"  ,    address 1  . getId (  )  ,    list 3  . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   address   at   index    1  \"  ,    address 2  . getId (  )  ,    list 3  . get (  1  )  . getId (  )  )  ;", "List < Object [  ]  >    list 4     =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     2  )  . traverseRel (  \" owner \"  ,    INNER )  . addOrder ( AuditEntity . property (  \" age \"  )  . asc (  )  )  . addProjection ( AuditEntity . selectEntity ( false )  )  . traverseRel (  \" address \"  ,    INNER )  . addProjection ( AuditEntity . property (  \" number \"  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Unexpected   number   of   results \"  ,     3  ,    list 4  . size (  )  )  ;", "final   Object [  ]    index 0     =    list 4  . get (  0  )  ;", "Assert . assertEquals (  \" Unexpected   owner   at   index    0  \"  ,    vwOwner . getId (  )  ,     (  ( Person )     ( index 0  [  0  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   number   at   index    0  \"  ,    Integer . valueOf (  5  )  ,    index 0  [  1  ]  )  ;", "final   Object [  ]    index 1     =    list 4  . get (  1  )  ;", "Assert . assertEquals (  \" Unexpected   owner   at   index    1  \"  ,    fordOwner . getId (  )  ,     (  ( Person )     ( index 1  [  0  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   number   at   index    1  \"  ,    Integer . valueOf (  5  )  ,    index 1  [  1  ]  )  ;", "final   Object [  ]    index 2     =    list 4  . get (  2  )  ;", "Assert . assertEquals (  \" Unexpected   owner   at   index    2  \"  ,    toyotaOwner . getId (  )  ,     (  ( Person )     ( index 2  [  0  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   number   at   index    2  \"  ,    Integer . valueOf (  3  0  )  ,    index 2  [  1  ]  )  ;", "}", "METHOD_END"], "methodName": ["testAssociationQueryWithProjection"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "AuditReader   auditReader    =    getAuditReader (  )  ;", "Car   result    =     (  ( Car )     ( auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER ,     \" p \"  )  . traverseRel (  \" address \"  ,    INNER ,     \" a \"  )  . up (  )  . up (  )  . add ( AuditEntity . property (  \" p \"  ,     \" age \"  )  . eqProperty (  \" a \"  ,     \" number \"  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   returned \"  ,    toyota . getId (  )  ,    result . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testComparisonOfTwoPropertiesFromDifferentEntities"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Car >    resultList    =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    INNER ,     \" p \"  )  . traverseRel (  \" address \"  ,    INNER ,     \" a \"  )  . up (  )  . up (  )  . add ( AuditEntity . disjunction (  )  . add ( AuditEntity . property (  \" p \"  ,     \" age \"  )  . eq (  2  0  )  )  . add ( AuditEntity . property (  \" a \"  ,     \" number \"  )  . eq (  3  0  )  )  )  . addOrder ( AuditEntity . property (  \" make \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Expected   two   cars   to   be   returned ,    Toyota   and   VW \"  ,     2  ,    resultList . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    toyota . getId (  )  ,    resultList . get (  0  )  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    1  \"  ,    vw . getId (  )  ,    resultList . get (  1  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDisjunctionOfPropertiesFromDifferentEntities"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneInnerJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "address 1     =    new   Address (  \" address 1  \"  ,     1  )  ;", "em . persist ( address 1  )  ;", "Address   address 2     =    new   Address (  \" address 2  \"  ,     2  )  ;", "em . persist ( address 2  )  ;", "person 1     =    new   Person (  \" person 1  \"  ,     3  0  ,    address 1  )  ;", "em . persist ( person 1  )  ;", "person 2     =    new   Person (  \" person 2  \"  ,     2  0  ,    null )  ;", "em . persist ( person 2  )  ;", "Person   person 3     =    new   Person (  \" person 3  \"  ,     1  0  ,    address 1  )  ;", "em . persist ( person 3  )  ;", "car 1     =    new   Car (  \" car 1  \"  )  ;", "car 1  . setOwner ( person 1  )  ;", "em . persist ( car 1  )  ;", "car 2     =    new   Car (  \" car 2  \"  )  ;", "car 2  . setOwner ( person 2  )  ;", "em . persist ( car 2  )  ;", "car 3     =    new   Car (  \" car 3  \"  )  ;", "em . persist ( car 3  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "person 2  . setAge (  2  1  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneLeftJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Car >    resultList    =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    LEFT ,     \" p \"  )  . up (  )  . add ( AuditEntity . and ( AuditEntity . property (  \" make \"  )  . eq (  \" car 3  \"  )  ,    AuditEntity . property (  \" p \"  ,     \" age \"  )  . eq (  3  0  )  )  )  . getResultList (  )  ;", "Assert . assertTrue (  \" Expected   no   cars   to   be   returned ,    because   car 3    does   not   have   an   owner \"  ,    resultList . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesWithANullRelatedIdAreNotJoinedToOtherEntities"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneLeftJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Car >    resultList    =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    LEFT ,     \" p \"  )  . up (  )  . add ( AuditEntity . or ( AuditEntity . property (  \" make \"  )  . eq (  \" car 3  \"  )  ,    AuditEntity . property (  \" p \"  ,     \" age \"  )  . eq (  1  0  )  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" Expected   car 3    to   be   returned   but   only   once \"  ,     1  ,    resultList . size (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    car 3  . getId (  )  ,    resultList . get (  0  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesWithANullRelatedIdAreNotReturnedMoreThanOnce"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneLeftJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "final   AuditReader   auditReader    =    getAuditReader (  )  ;", "List < Car >    resultList    =    auditReader . createQuery (  )  . forEntitiesAtRevision ( Car . class ,     1  )  . traverseRel (  \" owner \"  ,    LEFT ,     \" p \"  )  . up (  )  . add ( AuditEntity . or ( AuditEntity . property (  \" p \"  ,     \" age \"  )  . eq (  2  0  )  ,    AuditEntity . relatedId (  \" owner \"  )  . eq ( null )  )  )  . addOrder ( AuditEntity . property (  \" make \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  \" The   result   list   should   have    2    results ,    car 1    because   its   owner   has   an   age   of    3  0    and   car 3    because   it   has   no   owner   at   all \"  ,     2  ,    resultList . size (  )  )  ;", "Car   car 0     =    resultList . get (  0  )  ;", "Car   car 1     =    resultList . get (  1  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    car 2  . getId (  )  ,    car 0  . getId (  )  )  ;", "Assert . assertEquals (  \" Unexpected   car   at   index    0  \"  ,    car 3  . getId (  )  ,    car 1  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinOnAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.query.AssociationToOneLeftJoinQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" b \"  ,     1  5  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "id 1     =    site 1  . getId (  )  ;", "id 2     =    site 2  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "Thread . sleep (  1  0  0  )  ;", "timestamp    =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 1  . setStr 1  (  \" c \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.CustomRevEntityQuery"}, {"methodBody": ["METHOD_START", "{", "List < Object [  ]  >    result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . add ( AuditEntity . revisionProperty (  \" customTimestamp \"  )  . ge ( timestamp )  )  . getResultList (  )  ;", "assert   result . get (  0  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" c \"  ,     1  0  ,    id 1  )  )  ;", "assert    ( result . get (  0  )  [  1  ]  )    instanceof    ;", "assert    (  (  (  )     ( result . get (  0  )  [  1  ]  )  )  . getCustomId (  )  )     =  =     2  ;", "assert    (  (  (  )     ( result . get (  0  )  [  1  ]  )  )  . getCustomTimestamp (  )  )     >  =     ( timestamp )  ;", "}", "METHOD_END"], "methodName": ["testRevisionPropertyRestriction"], "fileName": "org.hibernate.envers.test.integration.query.CustomRevEntityQuery"}, {"methodBody": ["METHOD_START", "{", "List < Object [  ]  >    result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "assert   result . get (  0  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  )  ;", "assert    ( result . get (  0  )  [  1  ]  )    instanceof    ;", "assert    (  (  (  )     ( result . get (  0  )  [  1  ]  )  )  . getCustomId (  )  )     =  =     1  ;", "assert   result . get (  1  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" c \"  ,     1  0  ,    id 1  )  )  ;", "assert    ( result . get (  1  )  [  1  ]  )    instanceof    ;", "assert    (  (  (  )     ( result . get (  1  )  [  1  ]  )  )  . getCustomId (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testRevisionsOfId1Query"], "fileName": "org.hibernate.envers.test.integration.query.CustomRevEntityQuery"}, {"methodBody": ["METHOD_START", "{", "List < Object [  ]  >    result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "assert   result . get (  0  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" b \"  ,     1  5  ,    id 2  )  )  ;", "assert    ( result . get (  0  )  [  1  ]  )    instanceof    ;", "assert    (  (  (  )     ( result . get (  0  )  [  1  ]  )  )  . getCustomId (  )  )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["testRevisionsOfId2Query"], "fileName": "org.hibernate.envers.test.integration.query.CustomRevEntityQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" b \"  ,     1  1  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "id 2     =    site 2  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "em . remove ( site 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.DeletedEntities"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . getResultList (  )  . size (  )  )     =  =     2  ;", "assert    ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . getResultList (  )  . size (  )  )     =  =     1  ;", "assert    (  ( Long )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . addProjection ( AuditEntity . id (  )  . count (  )  )  . getResultList (  )  . get (  0  )  )  )     =  =     2  ;", "assert    (  ( Long )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . addProjection ( AuditEntity . id (  )  . count (  )  )  . getResultList (  )  . get (  0  )  )  )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["testProjectionsInEntitiesAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.DeletedEntities"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    false )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     1  ;", "assert    (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" b \"  ,     1  1  ,    id 2  )  )  ;", "assert    (  (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  1  ]  )  )  . getId (  )  )     =  =     1  ;", "assert    (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  2  ]  . equals ( RevisionType . ADD )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsOfEntityWithoutDelete"], "fileName": "org.hibernate.envers.test.integration.query.DeletedEntities"}, {"methodBody": ["METHOD_START", "{", "try    {", "super . testEntityRevisions (  )  ;", "Assert . fail (  \" This   should   have   failed   with   AuditException   since   test   case   doesn ' t   enable   modifiedFlag \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( AuditException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testEntityRevisionsWithChangesQuery"], "fileName": "org.hibernate.envers.test.integration.query.EntityWithChangesQueryNoModifiedFlagTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "super . testEntityRevisionsDeletions (  )  ;", "Assert . fail (  \" This   should   have   failed   with   AuditException   since   test   case   doesn ' t   enable   modifiedFlag \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( AuditException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testEntityRevisionsWithChangesQueryNoDeletions"], "fileName": "org.hibernate.envers.test.integration.query.EntityWithChangesQueryNoModifiedFlagTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   EntityC   c    =    new   EntityC (  )  ;", "c . setId (  1  )  ;", "c . setFoo (  \" bar \"  )  ;", "entityManager . persist ( c )  ;", "final   EntityD   d    =    new   EntityD (  )  ;", "d . setId (  1  )  ;", "d . setFoo (  \" bar \"  )  ;", "entityManager . persist ( d )  ;", "final   EntityB   b 1     =    new   EntityB (  )  ;", "b 1  . setId (  1  )  ;", "b 1  . setName (  \" b 1  \"  )  ;", "b 1  . setRelC ( c )  ;", "b 1  . setRelD ( d )  ;", "entityManager . persist ( b 1  )  ;", "final   EntityB   b 2     =    new   EntityB (  )  ;", "b 2  . setId (  2  )  ;", "b 2  . setName (  \" b 2  \"  )  ;", "b 2  . setRelC ( c )  ;", "b 2  . setRelD ( d )  ;", "entityManager . persist ( b 2  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.InheritanceAssociationToOneInnerJoinTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( InheritanceAssociationToOneInnerJoinTest . EntityB . class ,     1  )  . addProjection ( AuditEntity . property (  \" name \"  )  )  . traverseRelation (  \" relationToC \"  ,    INNER )  . add ( AuditEntity . property (  \" foo \"  )  . like (  \" bar \"  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryWithJoinedInheritanceSubclassPropertyProjectionWithRelationTraversal"], "fileName": "org.hibernate.envers.test.integration.query.InheritanceAssociationToOneInnerJoinTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( InheritanceAssociationToOneInnerJoinTest . EntityB . class ,     1  )  . add ( AuditEntity . disjunction (  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 1  \"  )  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 2  \"  )  )  )  . traverseRelation (  \" relationToC \"  ,    INNER )  . add ( AuditEntity . property (  \" foo \"  )  . like (  \" bar \"  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryWithJoinedInheritanceUsingWithSemanticsManyToOne"], "fileName": "org.hibernate.envers.test.integration.query.InheritanceAssociationToOneInnerJoinTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( InheritanceAssociationToOneInnerJoinTest . EntityB . class ,     1  )  . add ( AuditEntity . disjunction (  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 1  \"  )  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 2  \"  )  )  )  . traverseRelation (  \" relationToD \"  ,    INNER )  . add ( AuditEntity . property (  \" foo \"  )  . like (  \" bar \"  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryWithJoinedInheritanceUsingWithSemanticsOneToOne"], "fileName": "org.hibernate.envers.test.integration.query.InheritanceAssociationToOneInnerJoinTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( InheritanceAssociationToOneInnerJoinTest . EntityB . class ,     1  )  . add ( AuditEntity . disjunction (  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 1  \"  )  )  . add ( AuditEntity . property (  \" name \"  )  . like (  \" b 2  \"  )  )  )  . traverseRelation (  \" relationToC \"  ,    INNER )  . add ( AuditEntity . property (  \" foo \"  )  . like (  \" bar \"  )  )  . up (  )  . traverseRelation (  \" relationToD \"  ,    INNER )  . add ( AuditEntity . property (  \" foo \"  )  . like (  \" bar \"  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryWithJoinedInheritanceUsingWithSemanticsToOne"], "fileName": "org.hibernate.envers.test.integration.query.InheritanceAssociationToOneInnerJoinTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   EntityC   c 1     =    new   EntityC (  )  ;", "c 1  . setId (  1  )  ;", "c 1  . setName (  \" c 1  \"  )  ;", "c 1  . setFoo (  \" foo \"  )  ;", "c 1  . setPropB (  \" propB \"  )  ;", "c 1  . setPropC (  \" propC \"  )  ;", "entityManager . persist ( c 1  )  ;", "final   EntityA   a 1     =    new   EntityA (  )  ;", "a 1  . setId (  1  )  ;", "a 1  . setRelToC ( c 1  )  ;", "a 1  . setPropA (  \" propC \"  )  ;", "entityManager . persist ( a 1  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.JoinedInheritancePropertyJoinTest"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( JoinedInheritancePropertyJoinTest . EntityA . class ,     1  )  . traverseRelation (  \" relationToC \"  ,    INNER )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryWithJoinedInheritanceUnrelatedPropertyJoin"], "fileName": "org.hibernate.envers.test.integration.query.JoinedInheritancePropertyJoinTest"}, {"methodBody": ["METHOD_START", "{", "final   String   queryString    =     \" FROM   EntityA   a   Inner   Join   EntityC   c   ON   a . propA    =    c . propC   Where   c . propB    =     : propB \"  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    entityManager . createQuery ( queryString )  . setParameter (  \" propB \"  ,     \" propB \"  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testHibernateUnrelatedPropertyQuery"], "fileName": "org.hibernate.envers.test.integration.query.JoinedInheritancePropertyJoinTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( entity ,    result [  0  ]  )  ;", "Assert . assertEquals ( revision ,     (  ( SequenceIdRevisionEntity )     ( result [  1  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals ( type ,    result [  2  ]  )  ;", "}", "METHOD_END"], "methodName": ["checkRevisionData"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" b \"  ,     1  5  )  ;", "StrIntTestEntity   site 3     =    new   StrIntTestEntity (  \" c \"  ,     4  2  )  ;", "StrIntTestEntity   site 4     =    new   StrIntTestEntity (  \" d \"  ,     5  2  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "em . persist ( site 3  )  ;", "em . persist ( site 4  )  ;", "id 1     =    site 1  . getId (  )  ;", "id 2     =    site 2  . getId (  )  ;", "id 3     =    site 3  . getId (  )  ;", "id 4     =    site 4  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setStr 1  (  \" d \"  )  ;", "site 2  . setNumber (  2  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setNumber (  3  0  )  ;", "site 2  . setStr 1  (  \" z \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setNumber (  5  )  ;", "site 2  . setStr 1  (  \" a \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 4     =    em . find ( StrIntTestEntity . class ,    id 4  )  ;", "em . remove ( site 4  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . revisionNumber (  )  . maximize (  )  . computeAggregationInInstanceContext (  )  )  . addOrder ( AuditEntity . property (  \" id \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  4  ,    result . size (  )  )  ;", "Object [  ]    result 1     =     (  ( Object [  ]  )     ( result . get (  0  )  )  )  ;", "Object [  ]    result 2     =     (  ( Object [  ]  )     ( result . get (  1  )  )  )  ;", "Object [  ]    result 3     =     (  ( Object [  ]  )     ( result . get (  2  )  )  )  ;", "Object [  ]    result 4     =     (  ( Object [  ]  )     ( result . get (  3  )  )  )  ;", "checkRevisionData ( result 1  ,     4  ,    RevisionType . MOD ,    new   StrIntTestEntity (  \" d \"  ,     5  ,    id 1  )  )  ;", "checkRevisionData ( result 2  ,     4  ,    RevisionType . MOD ,    new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  )  ;", "checkRevisionData ( result 3  ,     1  ,    RevisionType . ADD ,    new   StrIntTestEntity (  \" c \"  ,     4  2  ,    id 3  )  )  ;", "checkRevisionData ( result 4  ,     5  ,    RevisionType . DEL ,    new   StrIntTestEntity ( null ,    null ,    id 4  )  )  ;", "}", "METHOD_END"], "methodName": ["testAllLatestRevisionsOfEntityType"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    idsToQuery    =    Arrays . asList ( id 1  ,    id 3  )  ;", "AuditDisjunction   disjunction    =    AuditEntity . disjunction (  )  ;", "for    ( Integer   id    :    idsToQuery )     {", "disjunction . add ( AuditEntity . revisionNumber (  )  . maximize (  )  . add ( AuditEntity . id (  )  . eq ( id )  )  )  ;", "}", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( disjunction )  . getResultList (  )  ;", "Set < Integer >    idsSeen    =    new   HashSet < Integer >  (  )  ;", "for    ( Object   o    :    result )     {", "StrIntTestEntity   entity    =     (  ( StrIntTestEntity )     ( o )  )  ;", "Integer   id    =    entity . getId (  )  ;", "Assert . assertTrue (  (  (  \" Entity   with   ID    \"     +    id )     +     \"    returned   but   not   queried   for .  \"  )  ,    idsToQuery . contains ( id )  )  ;", "if    (  !  ( idsSeen . add ( id )  )  )     {", "Assert . fail (  (  (  \" Multiple   revisions   returned   with   ID    \"     +    id )     +     \"  ;    expected   only   one .  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testMaximizeInDisjunction"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . revisionNumber (  )  . maximize (  )  . add ( AuditEntity . property (  \" number \"  )  . eq (  1  0  )  )  )  . getResultList (  )  ;", "assert   Arrays . asList (  2  )  . equals ( result )  ;", "}", "METHOD_END"], "methodName": ["testMaximizeRevision"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "List   revs _ id 1     =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . property (  \" number \"  )  . maximize (  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . asc (  )  )  . getResultList (  )  ;", "assert   Arrays . asList (  2  ,     3  ,     4  )  . equals ( revs _ id 1  )  ;", "}", "METHOD_END"], "methodName": ["testMaximizeWithIdEq"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . property (  \" number \"  )  . minimize (  )  . add ( AuditEntity . property (  \" str 1  \"  )  . eq (  \" a \"  )  )  )  . getResultList (  )  ;", "assert   Arrays . asList (  1  )  . equals ( result )  ;", "}", "METHOD_END"], "methodName": ["testMinimizeWithPropertyEq"], "fileName": "org.hibernate.envers.test.integration.query.MaximalizePropertyQuery"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision (  . NonAuditedEntity . class ,     1  )  . getResultList (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testForEntitiesAtRevisionNotAuditedMultipleResults"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision (  . NonAuditedEntity . class ,     1  )  . setMaxResults (  1  )  . getSingleResult (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testForEntitiesAtRevisionNotAuditedSingleResult"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision (  . NonAuditedEntity . class ,     1  )  . getResultList (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testForEntitiesModifiedAtRevisionNotAuditedMultipleResults"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision (  . NonAuditedEntity . class ,     1  )  . setMaxResults (  1  )  . getSingleResult (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testForEntitiesModifiedAtRevisionNotAuditedSingleResult"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . NonAuditedEntity . class ,    false ,    false )  . getResultList (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsOfEntityNotAuditedMultipleResults"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . NonAuditedEntity . class ,    false ,    false )  . setMaxResults (  1  )  . getSingleResult (  )  ;", "Assert . fail (  \" Expected   a   NotAuditedException \"  )  ;", "}    catch    ( Exception   e )     {", "assertTyping ( NotAuditedException . class ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsOfEntityNotAuditedSingleResult"], "fileName": "org.hibernate.envers.test.integration.query.NotAuditedQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   nullSite    =    new   StrIntTestEntity ( null ,     1  )  ;", "StrIntTestEntity   notNullSite    =    new   StrIntTestEntity (  \" data \"  ,     2  )  ;", "em . persist ( nullSite )  ;", "em . persist ( notNullSite )  ;", "idSimpleNull    =    nullSite . getId (  )  ;", "idSimpleNotNull    =    notNullSite . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetRefIngEmbIdEntity   nullParentSrieie    =    new   SetRefIngEmbIdEntity ( idMulticolumnReferenceToParentNull ,     \" data \"  ,    null )  ;", "em . persist ( nullParentSrieie )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "CollectionRefEdEntity   parent    =    new   CollectionRefEdEntity ( idParent ,     \" data \"  )  ;", "CollectionRefIngEntity   notNullParentCrie    =    new   CollectionRefIngEntity ( idReferenceToParentNotNull ,     \" data \"  ,    parent )  ;", "em . persist ( parent )  ;", "em . persist ( notNullParentCrie )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.NullPropertyQuery"}, {"methodBody": ["METHOD_START", "{", "SetRefIngEmbIdEntity   ver    =     (  ( SetRefIngEmbIdEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . property (  \" reference \"  )  . isNull (  )  )  . getSingleResult (  )  )  )  ;", "assert   ver . getId (  )  . equals ( idMulticolumnReferenceToParentNull )  ;", "}", "METHOD_END"], "methodName": ["testReferenceMulticolumnPropertyIsNullQuery"], "fileName": "org.hibernate.envers.test.integration.query.NullPropertyQuery"}, {"methodBody": ["METHOD_START", "{", "CollectionRefIngEntity   ver    =     (  ( CollectionRefIngEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( CollectionRefIngEntity . class ,     3  )  . add ( AuditEntity . property (  \" reference \"  )  . isNotNull (  )  )  . getSingleResult (  )  )  )  ;", "assert   ver . getId (  )  . equals ( idReferenceToParentNotNull )  ;", "}", "METHOD_END"], "methodName": ["testReferencePropertyIsNotNullQuery"], "fileName": "org.hibernate.envers.test.integration.query.NullPropertyQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   ver    =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . add ( AuditEntity . property (  \" str 1  \"  )  . isNotNull (  )  )  . getSingleResult (  )  )  )  ;", "assert   ver . equals ( new   StrIntTestEntity (  \" data \"  ,     2  ,    idSimpleNotNull )  )  ;", "}", "METHOD_END"], "methodName": ["testSimplePropertyIsNotNullQuery"], "fileName": "org.hibernate.envers.test.integration.query.NullPropertyQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   ver    =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . add ( AuditEntity . property (  \" str 1  \"  )  . isNull (  )  )  . getSingleResult (  )  )  )  ;", "assert   ver . equals ( new   StrIntTestEntity ( null ,     1  ,    idSimpleNull )  )  ;", "}", "METHOD_END"], "methodName": ["testSimplePropertyIsNullQuery"], "fileName": "org.hibernate.envers.test.integration.query.NullPropertyQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite 1     =    new   IntTestEntity (  1  2  )  ;", "IntTestEntity   ite 2     =    new   IntTestEntity (  5  )  ;", "IntTestEntity   ite 3     =    new   IntTestEntity (  8  )  ;", "IntTestEntity   ite 4     =    new   IntTestEntity (  1  )  ;", "em . persist ( ite 1  )  ;", "em . persist ( ite 2  )  ;", "em . persist ( ite 3  )  ;", "em . persist ( ite 4  )  ;", "id 1     =    ite 1  . getId (  )  ;", "id 2     =    ite 2  . getId (  )  ;", "id 3     =    ite 3  . getId (  )  ;", "id 4     =    ite 4  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "IntTestEntity   ite 5     =    new   IntTestEntity (  3  )  ;", "em . persist ( ite 5  )  ;", "id 5     =    ite 5  . getId (  )  ;", "ite 1     =    em . find ( IntTestEntity . class ,    id 1  )  ;", "ite 1  . setNumber (  0  )  ;", "ite 4     =    em . find ( IntTestEntity . class ,    id 4  )  ;", "ite 4  . setNumber (  1  5  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.OrderByLimitQuery"}, {"methodBody": ["METHOD_START", "{", "List   res _  0  _ to _  1     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     1  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  0  )  . setMaxResults (  2  )  . getResultList (  )  ;", "List   res _  2  _ to _  3     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     1  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  2  )  . setMaxResults (  2  )  . getResultList (  )  ;", "List   res _ empty    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     1  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  4  )  . setMaxResults (  2  )  . getResultList (  )  ;", "assert   Arrays . asList ( new   IntTestEntity (  1  2  ,    id 1  )  ,    new   IntTestEntity (  8  ,    id 3  )  )  . equals ( res _  0  _ to _  1  )  ;", "assert   Arrays . asList ( new   IntTestEntity (  5  ,    id 2  )  ,    new   IntTestEntity (  1  ,    id 4  )  )  . equals ( res _  2  _ to _  3  )  ;", "assert   Arrays . asList (  )  . equals ( res _ empty )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesOrderLimitByQueryRev1"], "fileName": "org.hibernate.envers.test.integration.query.OrderByLimitQuery"}, {"methodBody": ["METHOD_START", "{", "List   res _  0  _ to _  1     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     2  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  0  )  . setMaxResults (  2  )  . getResultList (  )  ;", "List   res _  2  _ to _  3     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     2  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  2  )  . setMaxResults (  2  )  . getResultList (  )  ;", "List   res _  4     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( IntTestEntity . class ,     2  )  . addOrder ( AuditEntity . property (  \" number \"  )  . desc (  )  )  . setFirstResult (  4  )  . setMaxResults (  2  )  . getResultList (  )  ;", "assert   Arrays . asList ( new   IntTestEntity (  1  5  ,    id 4  )  ,    new   IntTestEntity (  8  ,    id 3  )  )  . equals ( res _  0  _ to _  1  )  ;", "assert   Arrays . asList ( new   IntTestEntity (  5  ,    id 2  )  ,    new   IntTestEntity (  3  ,    id 5  )  )  . equals ( res _  2  _ to _  3  )  ;", "assert   Arrays . asList ( new   IntTestEntity (  0  ,    id 1  )  )  . equals ( res _  4  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesOrderLimitByQueryRev2"], "fileName": "org.hibernate.envers.test.integration.query.OrderByLimitQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" b \"  ,     1  5  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "id 1     =    site 1  . getId (  )  ;", "Integer   id 2     =    site 2  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setStr 1  (  \" d \"  )  ;", "site 2  . setNumber (  2  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setNumber (  1  )  ;", "site 2  . setStr 1  (  \" z \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setNumber (  5  )  ;", "site 2  . setStr 1  (  \" a \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "Object   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  . count (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  ;", "Assert . assertEquals ( Long . valueOf (  4  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCountQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . desc (  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList (  4  ,     3  ,     2  ,     1  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testRevisionOrderQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    result    =     (  ( Object [  ]  )     ( getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  . max (  )  )  . addProjection ( AuditEntity . revisionNumber (  )  . count (  )  )  . addProjection ( AuditEntity . revisionNumber (  )  . countDistinct (  )  )  . addProjection ( AuditEntity . revisionNumber (  )  . min (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( Integer . valueOf (  4  )  ,    result [  0  ]  )  ;", "Assert . assertEquals ( Long . valueOf (  4  )  ,    result [  1  ]  )  ;", "Assert . assertEquals ( Long . valueOf (  4  )  ,    result [  2  ]  )  ;", "Assert . assertEquals ( Integer . valueOf (  1  )  ,    result [  3  ]  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionProjectionQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . add ( AuditEntity . revisionType (  )  . eq ( RevisionType . MOD )  )  . getResultList (  )  ;", "Assert . assertEquals (  3  ,    results . size (  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" d \"  ,     1  0  ,    id 1  )  ,    results . get (  0  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" d \"  ,     1  ,    id 1  )  ,    results . get (  1  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" d \"  ,     5  ,    id 1  )  ,    results . get (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypeEqQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . add ( AuditEntity . revisionType (  )  . ne ( RevisionType . MOD )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    results . size (  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ,    results . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionTypeNeQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  . distinct (  )  )  . add ( AuditEntity . revisionNumber (  )  . ge (  2  )  )  . getResultList (  )  ;", "Assert . assertEquals ( TestTools . makeSet (  2  ,     3  ,     4  )  ,    new   HashSet ( result )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsGeQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . revisionNumber (  )  . gt (  1  )  )  . add ( AuditEntity . property (  \" number \"  )  . lt (  1  0  )  )  . getResultList (  )  ;", "Assert . assertEquals ( TestTools . makeSet (  3  ,     4  )  ,    new   HashSet ( result )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsGtWithPropertyQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . revisionNumber (  )  . le (  3  )  )  . add ( AuditEntity . property (  \" str 1  \"  )  . eq (  \" a \"  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList (  1  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsLeWithPropertyQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  . distinct (  )  )  . add ( AuditEntity . revisionNumber (  )  . lt (  3  )  )  . getResultList (  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsLtQuery"], "fileName": "org.hibernate.envers.test.integration.query.RevisionConstraintQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "StrIntTestEntity   site 3     =    new   StrIntTestEntity (  \" b \"  ,     5  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "em . persist ( site 3  )  ;", "id 1     =    site 1  . getId (  )  ;", "id 2     =    site 2  . getId (  )  ;", "id 3     =    site 3  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "mulId 1     =    new   MulId (  1  ,     2  )  ;", "em . persist ( new   MulIdTestEntity ( mulId 1  . getId 1  (  )  ,    mulId 1  . getId 2  (  )  ,     \" data \"  )  )  ;", "embId 1     =    new   EmbId (  3  ,     4  )  ;", "em . persist ( new   EmbIdTestEntity ( embId 1  ,     \" something \"  )  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "site 2     =    em . find ( StrIntTestEntity . class ,    id 2  )  ;", "site 1  . setStr 1  (  \" aBc \"  )  ;", "site 2  . setNumber (  2  0  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 3     =    em . find ( StrIntTestEntity . class ,    id 3  )  ;", "site 3  . setStr 1  (  \" a \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "site 1     =    em . find ( StrIntTestEntity . class ,    id 1  )  ;", "em . remove ( site 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( AuditEntity . disjunction (  )  . add ( AuditEntity . property (  \" number \"  )  . between (  0  ,     5  )  )  . add ( AuditEntity . property (  \" number \"  )  . between (  2  0  ,     1  0  0  )  )  )  . getResultList (  )  ;", "for    ( Object   o    :    result )     {", "StrIntTestEntity   entity    =     (  ( StrIntTestEntity )     ( o )  )  ;", "int   number    =    entity . getNumber (  )  ;", "Assert . assertTrue (  (  (  ( number    >  =     0  )     &  &     ( number    <  =     5  )  )     |  |     (  ( number    >  =     2  0  )     &  &     ( number    <  =     1  0  0  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBetweenInsideDisjunction"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "EmbIdTestEntity   ver 2     =     (  ( EmbIdTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( EmbIdTestEntity . class ,     2  )  . add ( AuditEntity . property (  \" id . x \"  )  . eq ( embId 1  . getX (  )  )  )  . add ( AuditEntity . property (  \" id . y \"  )  . eq ( embId 1  . getY (  )  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( new   EmbIdTestEntity ( embId 1  ,     \" something \"  )  ,    ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testEmbeddedIdPropertyRestriction"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . conjunction (  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     7  ;", "}", "METHOD_END"], "methodName": ["testEmptyConjunctionRevisionOfEntityQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . disjunction (  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testEmptyDisjunctionRevisionOfEntityQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     7  ;", "}", "METHOD_END"], "methodName": ["testEmptyRevisionOfEntityQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 2  )  ;", "StrIntTestEntity   site 3     =    new   StrIntTestEntity (  \" b \"  ,     5  ,    id 3  )  ;", "List   result    =    getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,    StrIntTestEntity . class . getName (  )  ,     1  )  . getResultList (  )  ;", "RevisionType   revisionType    =     (  ( RevisionType )     ( getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     1  )  . addProjection ( AuditEntity . revisionType (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( result ,    site 1  ,    site 2  ,    site 3  )  )  ;", "Assert . assertEquals ( revisionType ,    RevisionType . ADD )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesAddedAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  ;", "List   result    =    getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     2  )  . getResultList (  )  ;", "RevisionType   revisionType    =     (  ( RevisionType )     ( getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     2  )  . addProjection ( AuditEntity . revisionType (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( result ,    site 1  ,    site 2  )  )  ;", "Assert . assertEquals ( revisionType ,    RevisionType . MOD )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesChangedAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   ver 2     =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getSingleResult (  )  )  )  ;", "assert   ver 2  . equals ( new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesIdQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   ver 1     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . add ( AuditEntity . property (  \" str 1  \"  )  . eq (  \" a \"  )  )  . getResultList (  )  ;", "List   ver 2     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . add ( AuditEntity . property (  \" str 1  \"  )  . eq (  \" a \"  )  )  . getResultList (  )  ;", "List   ver 3     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     3  )  . add ( AuditEntity . property (  \" str 1  \"  )  . eq (  \" a \"  )  )  . getResultList (  )  ;", "assert   new   HashSet ( ver 1  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ,    new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 2  )  )  )  ;", "assert   new   HashSet ( ver 2  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  )  )  ;", "assert   new   HashSet ( ver 3  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  ,    new   StrIntTestEntity (  \" a \"  ,     5  ,    id 3  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesPropertyEqualsQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   ver 1     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     1  )  . add ( AuditEntity . property (  \" number \"  )  . le (  1  0  )  )  . getResultList (  )  ;", "List   ver 2     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . add ( AuditEntity . property (  \" number \"  )  . le (  1  0  )  )  . getResultList (  )  ;", "List   ver 3     =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     3  )  . add ( AuditEntity . property (  \" number \"  )  . le (  1  0  )  )  . getResultList (  )  ;", "assert   new   HashSet ( ver 1  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ,    new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 2  )  ,    new   StrIntTestEntity (  \" b \"  ,     5  ,    id 3  )  )  )  ;", "assert   new   HashSet ( ver 2  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  ,    new   StrIntTestEntity (  \" b \"  ,     5  ,    id 3  )  )  )  ;", "assert   new   HashSet ( ver 3  )  . equals ( TestTools . makeSet ( new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  ,    new   StrIntTestEntity (  \" a \"  ,     5  ,    id 3  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesPropertyLeQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site 1     =    new   StrIntTestEntity ( null ,    null ,    id 1  )  ;", "List   result    =    getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     4  )  . getResultList (  )  ;", "RevisionType   revisionType    =     (  ( RevisionType )     ( getAuditReader (  )  . creat (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     4  )  . addProjection ( AuditEntity . revisionType (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertTrue ( TestTools . checkCollection ( result ,    site 1  )  )  ;", "Assert . assertEquals ( revisionType ,    RevisionType . DEL )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesRemovedAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     3  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "Assert . assertTrue ( result . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntityNotModifiedAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   ver 2     =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( StrIntTestEntity . class ,     2  )  . add ( AuditEntity . property (  \" id \"  )  . eq ( id 2  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" a \"  ,     2  0  ,    id 2  )  ,    ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testIdPropertyRestriction"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  ;", "StrIntTestEntity   result    =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . creat (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . ilike (  \" abc \"  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( site 1  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testIlike"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  ;", "StrIntTestEntity   result    =     (  ( StrIntTestEntity )     ( getAuditReader (  )  . creat (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    true )  . add ( AuditEntity . property (  \" str 1  \"  )  . ilike (  \" BC \"  ,    MatchMode . ANYWHERE )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( site 1  ,    result )  ;", "}", "METHOD_END"], "methodName": ["testIlikeWithMatchMode"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "MulIdTestEntity   ver 2     =     (  ( MulIdTestEntity )     ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( MulIdTestEntity . class ,     2  )  . add ( AuditEntity . property (  \" id 1  \"  )  . eq ( mulId 1  . getId 1  (  )  )  )  . add ( AuditEntity . property (  \" id 2  \"  )  . eq ( mulId 1  . getId 2  (  )  )  )  . getSingleResult (  )  )  )  ;", "Assert . assertEquals ( new   MulIdTestEntity ( mulId 1  . getId 1  (  )  ,    mulId 1  . getId 2  (  )  ,     \" data \"  )  ,    ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleIdPropertyRestriction"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forEntitiesModifiedAtRevision ( StrIntTestEntity . class ,     5  )  . getResultList (  )  ;", "Assert . assertTrue ( result . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoEntitiesModifiedAtRevision"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   revs _ id 1     =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . property (  \" str 1  \"  )  . le (  \" a \"  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "List   revs _ id 2     =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . property (  \" str 1  \"  )  . le (  \" a \"  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . asc (  )  )  . getResultList (  )  ;", "List   revs _ id 3     =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionNumber (  )  )  . add ( AuditEntity . property (  \" str 1  \"  )  . le (  \" a \"  )  )  . add ( AuditEntity . id (  )  . eq ( id 3  )  )  . getResultList (  )  ;", "assert   Arrays . asList (  1  )  . equals ( revs _ id 1  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( revs _ id 2  )  ;", "assert   Arrays . asList (  3  )  . equals ( revs _ id 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsPropertyEqQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     3  ;", "assert    (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  )  ;", "assert    (  ( Object [  ]  )     ( result . get (  1  )  )  )  [  0  ]  . equals ( new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  )  ;", "assert    (  ( Object [  ]  )     ( result . get (  2  )  )  )  [  0  ]  . equals ( new   StrIntTestEntity ( null ,    null ,    id 1  )  )  ;", "assert    (  (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  1  ]  )  )  . getId (  )  )     =  =     1  ;", "assert    (  (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( result . get (  1  )  )  )  [  1  ]  )  )  . getId (  )  )     =  =     2  ;", "assert    (  (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( result . get (  2  )  )  )  [  1  ]  )  )  . getId (  )  )     =  =     4  ;", "assert    (  ( Object [  ]  )     ( result . get (  0  )  )  )  [  2  ]  . equals ( RevisionType . ADD )  ;", "assert    (  ( Object [  ]  )     ( result . get (  1  )  )  )  [  2  ]  . equals ( RevisionType . MOD )  ;", "assert    (  ( Object [  ]  )     ( result . get (  2  )  )  )  [  2  ]  . equals ( RevisionType . DEL )  ;", "}", "METHOD_END"], "methodName": ["testSelectEntitiesAndRevisionsQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    true ,    false )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     2  ;", "assert   result . get (  0  )  . equals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  )  ;", "assert   result . get (  1  )  . equals ( new   StrIntTestEntity (  \" aBc \"  ,     1  0  ,    id 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectEntitiesQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "List   result    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . addProjection ( AuditEntity . revisionType (  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . addOrder ( AuditEntity . revisionNumber (  )  . asc (  )  )  . getResultList (  )  ;", "assert    ( result . size (  )  )     =  =     3  ;", "assert   result . get (  0  )  . equals ( RevisionType . ADD )  ;", "assert   result . get (  1  )  . equals ( RevisionType . MOD )  ;", "assert   result . get (  2  )  . equals ( RevisionType . DEL )  ;", "}", "METHOD_END"], "methodName": ["testSelectRevisionTypeQuery"], "fileName": "org.hibernate.envers.test.integration.query.SimpleQuery"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrIntTestEntity   site 1     =    new   StrIntTestEntity (  \" a \"  ,     1  0  )  ;", "em . persist ( site 1  )  ;", "id 1     =    site 1  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . remove ( site 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrIntTestEntity   site 2     =    new   StrIntTestEntity (  \" b \"  ,     2  0  )  ;", "em . persist ( site 2  )  ;", "id 2     =    site 2  . getId (  )  ;", "StrIntTestEntity   site 3     =    new   StrIntTestEntity (  \" c \"  ,     3  0  )  ;", "em . persist ( site 3  )  ;", "id 3     =    site 3  . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "em . remove ( site 2  )  ;", "em . remove ( site 3  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.StoreDeletedData"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    queryIds    =    Arrays . asList ( id 2  ,    id 3  )  ;", "AuditDisjunction   disjunction    =    AuditEntity . disjunction (  )  ;", "for    ( Integer   id    :    queryIds )     {", "AuditCriterion   crit    =    AuditEntity . revisionNumber (  )  . maximize (  )  . add ( AuditEntity . id (  )  . eq ( id )  )  . add ( AuditEntity . revisionType (  )  . ne ( RevisionType . DEL )  )  ;", "disjunction . add ( crit )  ;", "}", "List <  ?  >    befionRevisions    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    false )  . add ( disjunction )  . addOrder ( AuditEntity . property (  \" id \"  )  . asc (  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    befionRevisions . size (  )  )  ;", "Object [  ]    result 1     =     (  ( Object [  ]  )     ( befionRevisions . get (  0  )  )  )  ;", "Object [  ]    result 2     =     (  ( Object [  ]  )     ( befionRevisions . get (  1  )  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" b \"  ,     2  0  ,    id 2  )  ,    result 1  [  0  ]  )  ;", "Assert . assertEquals (  3  ,     (  ( SequenceIdRevisionEntity )     ( result 1  [  1  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals ( RevisionType . ADD ,    result 1  [  2  ]  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" c \"  ,     3  0  ,    id 3  )  ,    result 2  [  0  ]  )  ;", "Assert . assertEquals (  3  ,     (  ( SequenceIdRevisionEntity )     ( result 2  [  1  ]  )  )  . getId (  )  )  ;", "Assert . assertEquals ( RevisionType . ADD ,    result 2  [  2  ]  )  ;", "}", "METHOD_END"], "methodName": ["testMaximizeInDisjunction"], "fileName": "org.hibernate.envers.test.integration.query.StoreDeletedData"}, {"methodBody": ["METHOD_START", "{", "List   revs _ id 1     =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity ( StrIntTestEntity . class ,    false ,    true )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "Assert . assertEquals (  2  ,    revs _ id 1  . size (  )  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ,     (  ( Object [  ]  )     ( revs _ id 1  . get (  0  )  )  )  [  0  ]  )  ;", "Assert . assertEquals ( new   StrIntTestEntity (  \" a \"  ,     1  0  ,    id 1  )  ,     (  ( Object [  ]  )     ( revs _ id 1  . get (  1  )  )  )  [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsPropertyEqQuery"], "fileName": "org.hibernate.envers.test.integration.query.StoreDeletedData"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getOrCreateEntityManager (  )  ;", "try    {", "em . getTransac (  )  . begin (  )  ;", "NameInfo   ni    =    new   NameInfo (  \" John \"  ,     \" Doe \"  )  ;", "Person   person 1     =    new   Person (  \" JDOE \"  ,    ni )  ;", "em . persist ( person 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "person 1     =    em . find ( Person . class ,    person 1  . getId (  )  )  ;", "person 1  . getNameInfo (  )  . setFirstName (  \" Jane \"  )  ;", "em . merge ( person 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "em . getTransac (  )  . begin (  )  ;", "person 1     =    em . find ( Person . class ,    person 1  . getId (  )  )  ;", "person 1  . setName (  \" JDOE 2  \"  )  ;", "em . merge ( person 1  )  ;", "em . getTransac (  )  . commit (  )  ;", "personId    =    person 1  . getId (  )  ;", "}    finally    {", "em . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.EmbeddableQuery"}, {"methodBody": ["METHOD_START", "{", "final   NameInfo   nameInfo    =    new   NameInfo (  \" John \"  ,     \" Doe \"  )  ;", "final   AuditQuery   query    =    getAuditReader (  )  . creat (  )  . forEntitiesAtRevision ( Person . class ,     1  )  ;", "query . add ( AuditEntity . property (  \" nameInfo \"  )  . eq ( nameInfo )  )  ;", "List <  ?  >    results    =    query . getResultList (  )  ;", "Assert . assertEquals (  1  ,    results . size (  )  )  ;", "final   Person   person    =     (  ( Person )     ( results . get (  0  )  )  )  ;", "Assert . assertEquals ( nameInfo ,    person . getNameInfo (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryUsingEmbeddableEquals"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.EmbeddableQuery"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   NameInfo   nameInfo    =    new   NameInfo (  \" John \"  ,     \" Doe \"  )  ;", "final   AuditQuery   query    =    getAuditReader (  )  . creat (  )  . forEntitiesAtRevision ( Person . class ,     1  )  ;", "query . add ( AuditEntity . property (  \" nameInfo \"  )  . le ( nameInfo )  )  ;", "}    catch    ( Exception   ex )     {", "assertTyping ( AuditException . class ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["testAuditQueryUsingEmbeddableNonEqualityCheck"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.EmbeddableQuery"}, {"methodBody": ["METHOD_START", "{", "final   NameInfo   nameInfo    =    new   NameInfo (  \" Jane \"  ,     \" Doe \"  )  ;", "final   AuditQuery   query    =    getAuditReader (  )  . creat (  )  . forEntitiesAtRevision ( Person . class ,     1  )  ;", "query . add ( AuditEntity . property (  \" nameInfo \"  )  . ne ( nameInfo )  )  ;", "Assert . assertEquals (  0  ,    query . getResultList (  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditQueryUsingEmbeddableNotEquals"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.EmbeddableQuery"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  3  ,    getAuditReader (  )  . getRevisions ( Person . class ,    personId )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.EmbeddableQuery"}, {"methodBody": ["METHOD_START", "{", "return   firstName ;", "}", "METHOD_END"], "methodName": ["getFirstName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.NameInfo"}, {"methodBody": ["METHOD_START", "{", "return   lastName ;", "}", "METHOD_END"], "methodName": ["getLastName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.NameInfo"}, {"methodBody": ["METHOD_START", "{", "this . firstName    =    firstName ;", "}", "METHOD_END"], "methodName": ["setFirstName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.NameInfo"}, {"methodBody": ["METHOD_START", "{", "this . lastName    =    lastName ;", "}", "METHOD_END"], "methodName": ["setLastName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.NameInfo"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "return   nameInfo ;", "}", "METHOD_END"], "methodName": ["getNameInfo"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "this . nameInfo    =    nameInfo ;", "}", "METHOD_END"], "methodName": ["setNameInfo"], "fileName": "org.hibernate.envers.test.integration.query.embeddables.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "return   street ;", "}", "METHOD_END"], "methodName": ["getStreet"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "this . street    =    street ;", "}", "METHOD_END"], "methodName": ["setStreet"], "fileName": "org.hibernate.envers.test.integration.query.entities.Address"}, {"methodBody": ["METHOD_START", "{", "return   drivers ;", "}", "METHOD_END"], "methodName": ["getDrivers"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "return   make ;", "}", "METHOD_END"], "methodName": ["getMake"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "this . drivers    =    drivers ;", "}", "METHOD_END"], "methodName": ["setDrivers"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "this . make    =    make ;", "}", "METHOD_END"], "methodName": ["setMake"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    owner ;", "}", "METHOD_END"], "methodName": ["setOwner"], "fileName": "org.hibernate.envers.test.integration.query.entities.Car"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "return   age ;", "}", "METHOD_END"], "methodName": ["getAge"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "this . address    =    address ;", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "this . age    =    age ;", "}", "METHOD_END"], "methodName": ["setAge"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.query.entities.Person"}, {"methodBody": ["METHOD_START", "{", "id 1     =    new   EmbId (  0  ,     1  )  ;", "id 2     =    new   EmbId (  1  0  ,     1  1  )  ;", "id 3     =    new   EmbId (  2  0  ,     2  1  )  ;", "id 4     =    new   EmbId (  3  0  ,     3  1  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetRefIngEmbIdEntity   refIng 1     =    new   SetRefIngEmbIdEntity ( id 1  ,     \" x \"  ,    null )  ;", "SetRefIngEmbIdEntity   refIng 2     =    new   SetRefIngEmbIdEntity ( id 2  ,     \" y \"  ,    null )  ;", "em . persist ( refIng 1  )  ;", "em . persist ( refIng 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetRefEdEmbIdEntity   refEd 3     =    new   SetRefEdEmbIdEntity ( id 3  ,     \" a \"  )  ;", "SetRefEdEmbIdEntity   refEd 4     =    new   SetRefEdEmbIdEntity ( id 4  ,     \" a \"  )  ;", "em . persist ( refEd 3  )  ;", "em . persist ( refEd 4  )  ;", "refIng 1     =    em . find ( SetRefIngEmbIdEntity . class ,    id 1  )  ;", "refIng 2     =    em . find ( SetRefIngEmbIdEntity . class ,    id 2  )  ;", "refIng 1  . setReference ( refEd 3  )  ;", "refIng 2  . setReference ( refEd 4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "refEd 3     =    em . find ( SetRefEdEmbIdEntity . class ,    id 3  )  ;", "refIng 2     =    em . find ( SetRefIngEmbIdEntity . class ,    id 2  )  ;", "refIng 2  . setReference ( refEd 3  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "List   rev 1  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "Object   rev 2  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  ;", "Object   rev 3  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  ;", "assert    ( rev 1  _ related . size (  )  )     =  =     0  ;", "assert   rev 2  _ related . equals ( new   SetRefIngEmbIdEntity ( id 1  ,     \" x \"  ,    null )  )  ;", "assert   rev 3  _ related . equals ( new   SetRefIngEmbIdEntity ( id 1  ,     \" x \"  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedByIng1ToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "List   rev 1  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "List   rev 2  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "Object   rev 3  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getSingleResult (  )  ;", "assert    ( rev 1  _ related . size (  )  )     =  =     0  ;", "assert    ( rev 2  _ related . size (  )  )     =  =     0  ;", "assert   rev 3  _ related . equals ( new   SetRefIngEmbIdEntity ( id 2  ,     \" y \"  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedByIng2ToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "Set   rev 1  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 1     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     1  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdEmbIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "Set   rev 2  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 2     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdEmbIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "Set   rev 3  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 3     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     3  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdEmbIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "assert   rev 1  . equals ( rev 1  _ related )  ;", "assert   rev 2  . equals ( rev 2  _ related )  ;", "assert   rev 3  . equals ( rev 3  _ related )  ;", "assert   rev 1  . equals ( TestTools . makeSet (  )  )  ;", "assert   rev 2  . equals ( TestTools . makeSet ( new   SetRefIngEmbIdEntity ( id 1  ,     \" x \"  ,    null )  )  )  ;", "assert   rev 3  . equals ( TestTools . makeSet ( new   SetRefIngEmbIdEntity ( id 1  ,     \" x \"  ,    null )  ,    new   SetRefIngEmbIdEntity ( id 2  ,     \" y \"  ,    null )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "Set   rev 1  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "Set   rev 2  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "Set   rev 3  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngEmbIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "assert   rev 1  _ related . equals ( TestTools . makeSet (  )  )  ;", "assert   rev 2  _ related . equals ( TestTools . makeSet ( new   SetRefIngEmbIdEntity ( id 2  ,     \" y \"  ,    null )  )  )  ;", "assert   rev 3  _ related . equals ( TestTools . makeSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedToId4"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    new   Person (  1  ,     \" Chris \"  )  ;", "final   Document   document    =    new   Document (  1  ,     \" DL \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( person )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    new   Document (  2  ,     \" Passport \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    entityManager . find (  . class ,     1  )  ;", "final   PersonDocument   pd    =    entityManager . create (  \" FROM   PersonDocument   WHERE   id . person . id    =     : person   AND   id . document . id    =     : document \"  ,     . class )  . setParameter (  \" person \"  ,    person . getId (  )  )  . setParameter (  \" document \"  ,    document . getId (  )  )  . getSingleResult (  )  ;", "entityManager . remove ( pd )  ;", "entityManager . remove ( document )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbeddedIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" id . person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getId (  )  . getDocument (  )  ;", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" id . person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getId (  )  . getDocument (  )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" id . person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  3  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getId (  )  . getDocument (  )  ;", "assertNull ( document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" id . document \"  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  2  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getId (  )  . getDocument (  )  ;", "if    ( RevisionType . ADD . equals ( revisionType )  )     {", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "} else", "if    ( RevisionType . DEL . equals ( revisionType )  )     {", "assertNull ( document . getName (  )  )  ;", "}", "}", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" id . document \"  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getId (  )  . getDocument (  )  ;", "assertEquals ( RevisionType . ADD ,    revisionType )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testRelatedIdQueries"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbeddedIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( EmbeddedIdRelatedIdQueryTest . Person . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( EmbeddedIdRelatedIdQueryTest . Document . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( EmbeddedIdRelatedIdQueryTest . Document . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.query.ids.EmbeddedIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    new   Person (  1  ,     \" Chris \"  )  ;", "final   Document   document    =    new   Document (  1  ,     \" DL \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( person )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    new   Document (  2  ,     \" Passport \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    entityManager . find (  . class ,     1  )  ;", "final   PersonDocument   pd    =    entityManager . create (  \" FROM   PersonDocument   WHERE   person . id    =     : person   AND   document . id    =     : document \"  ,     . class )  . setParameter (  \" person \"  ,    person . getId (  )  )  . setParameter (  \" document \"  ,    document . getId (  )  )  . getSingleResult (  )  ;", "entityManager . remove ( pd )  ;", "entityManager . remove ( document )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.ids.IdClassRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  3  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertNull ( document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" document \"  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  2  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getDocument (  )  ;", "if    ( RevisionType . ADD . equals ( revisionType )  )     {", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "} else", "if    ( RevisionType . DEL . equals ( revisionType )  )     {", "assertNull ( document . getName (  )  )  ;", "}", "}", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" document \"  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getDocument (  )  ;", "assertEquals ( RevisionType . ADD ,    revisionType )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testRelatedIdQueries"], "fileName": "org.hibernate.envers.test.integration.query.ids.IdClassRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( IdClassRelatedIdQueryTest . Person . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( IdClassRelatedIdQueryTest . Document . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( IdClassRelatedIdQueryTest . Document . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.query.ids.IdClassRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "id 1     =    new   MulId (  0  ,     1  )  ;", "id 2     =    new   MulId (  1  0  ,     1  1  )  ;", "id 3     =    new   MulId (  2  0  ,     2  1  )  ;", "id 4     =    new   MulId (  3  0  ,     3  1  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetRefIngMulIdEntity   refIng 1     =    new   SetRefIngMulIdEntity ( id 1  ,     \" x \"  ,    null )  ;", "SetRefIngMulIdEntity   refIng 2     =    new   SetRefIngMulIdEntity ( id 2  ,     \" y \"  ,    null )  ;", "em . persist ( refIng 1  )  ;", "em . persist ( refIng 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetRefEdMulIdEntity   refEd 3     =    new   SetRefEdMulIdEntity ( id 3  ,     \" a \"  )  ;", "SetRefEdMulIdEntity   refEd 4     =    new   SetRefEdMulIdEntity ( id 4  ,     \" a \"  )  ;", "em . persist ( refEd 3  )  ;", "em . persist ( refEd 4  )  ;", "refIng 1     =    em . find ( SetRefIngMulIdEntity . class ,    id 1  )  ;", "refIng 2     =    em . find ( SetRefIngMulIdEntity . class ,    id 2  )  ;", "refIng 1  . setReference ( refEd 3  )  ;", "refIng 2  . setReference ( refEd 4  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "refEd 3     =    em . find ( SetRefEdMulIdEntity . class ,    id 3  )  ;", "refIng 2     =    em . find ( SetRefIngMulIdEntity . class ,    id 2  )  ;", "refIng 2  . setReference ( refEd 3  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.ids.MulIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "List   rev 1  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getResultList (  )  ;", "Object   rev 2  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  ;", "Object   rev 3  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 1  )  )  . getSingleResult (  )  ;", "Assert . assertEquals (  0  ,    rev 1  _ related . size (  )  )  ;", "Assert . assertEquals ( rev 2  _ related ,    new   SetRefIngMulIdEntity ( id 1  ,     \" x \"  ,    null )  )  ;", "Assert . assertEquals ( rev 3  _ related ,    new   SetRefIngMulIdEntity ( id 1  ,     \" x \"  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedByIng1ToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.MulIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "List   rev 1  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "List   rev 2  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getResultList (  )  ;", "Object   rev 3  _ related    =    getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . add ( AuditEntity . id (  )  . eq ( id 2  )  )  . getSingleResult (  )  ;", "Assert . assertEquals (  0  ,    rev 1  _ related . size (  )  )  ;", "Assert . assertEquals (  0  ,    rev 2  _ related . size (  )  )  ;", "Assert . assertEquals ( new   SetRefIngMulIdEntity ( id 2  ,     \" y \"  ,    null )  ,    rev 3  _ related )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedByIng2ToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.MulIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "Set   rev 1  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 1     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     1  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdMulIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "Set   rev 2  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 2     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     2  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdMulIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "Set   rev 3  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 3  )  )  . getResultList (  )  )  ;", "Set   rev 3     =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     3  )  . add ( AuditEntity . property (  \" reference \"  )  . eq ( new   SetRefEdMulIdEntity ( id 3  ,    null )  )  )  . getResultList (  )  )  ;", "Assert . assertEquals ( rev 1  ,    rev 1  _ related )  ;", "Assert . assertEquals ( rev 2  ,    rev 2  _ related )  ;", "Assert . assertEquals ( rev 3  ,    rev 3  _ related )  ;", "Assert . assertEquals ( rev 1  ,    TestTools . makeSet (  )  )  ;", "Assert . assertEquals ( rev 2  ,    TestTools . makeSet ( new   SetRefIngMulIdEntity ( id 1  ,     \" x \"  ,    null )  )  )  ;", "Assert . assertEquals ( rev 3  ,    TestTools . makeSet ( new   SetRefIngMulIdEntity ( id 1  ,     \" x \"  ,    null )  ,    new   SetRefIngMulIdEntity ( id 2  ,     \" y \"  ,    null )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedToId3"], "fileName": "org.hibernate.envers.test.integration.query.ids.MulIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "Set   rev 1  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     1  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "Set   rev 2  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     2  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "Set   rev 3  _ related    =    new   HashSet ( getAuditReader (  )  . createQuery (  )  . forEntitiesAtRevision ( SetRefIngMulIdEntity . class ,     3  )  . add ( AuditEntity . relatedId (  \" reference \"  )  . eq ( id 4  )  )  . getResultList (  )  )  ;", "Assert . assertEquals ( rev 1  _ related ,    TestTools . makeSet (  )  )  ;", "Assert . assertEquals ( rev 2  _ related ,    TestTools . makeSet ( new   SetRefIngMulIdEntity ( id 2  ,     \" y \"  ,    null )  )  )  ;", "Assert . assertEquals ( rev 3  _ related ,    TestTools . makeSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesReferencedToId4"], "fileName": "org.hibernate.envers.test.integration.query.ids.MulIdOneToManyQuery"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    new   Person (  1  ,     \" Chris \"  )  ;", "final   Document   document    =    new   Document (  1  ,     \" DL \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( person )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    new   Document (  2  ,     \" Passport \"  )  ;", "final   PersonDocument   pd    =    new   PersonDocument ( person ,    document )  ;", "entityManager . persist ( document )  ;", "entityManager . persist ( pd )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "final   Person   person    =    entityManager . find (  . class ,     1  )  ;", "final   Document   document    =    entityManager . find (  . class ,     1  )  ;", "final   PersonDocument   pd    =    entityManager . create (  \" FROM   PersonDocument   WHERE   person . id    =     : person   AND   document . id    =     : document \"  ,     . class )  . setParameter (  \" person \"  ,    person . getId (  )  )  . setParameter (  \" document \"  ,    document . getId (  )  )  . getSingleResult (  )  ;", "entityManager . remove ( pd )  ;", "entityManager . remove ( document )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.query.ids.MultipleIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" person \"  )  . eq (  1  )  )  . add ( AuditEntity . revisionNumber (  )  . eq (  3  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     (  (  ( Object [  ]  )     ( results . get (  0  )  )  )  [  0  ]  )  )  . getDocument (  )  ;", "assertNull ( document . getName (  )  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" document \"  )  . eq (  1  )  )  . getResultList (  )  ;", "assertEquals (  2  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getDocument (  )  ;", "if    ( RevisionType . ADD . equals ( revisionType )  )     {", "assertEquals (  \" DL \"  ,    document . getName (  )  )  ;", "} else", "if    ( RevisionType . DEL . equals ( revisionType )  )     {", "assertNull ( document . getName (  )  )  ;", "}", "}", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "List   results    =    getAuditReader (  )  . createQuery (  )  . forRevisionsOfEntity (  . class ,    false ,    true )  . add ( AuditEntity . r (  \" document \"  )  . eq (  2  )  )  . getResultList (  )  ;", "assertEquals (  1  ,    results . size (  )  )  ;", "for    ( Object   result    :    results )     {", "Object [  ]    row    =     (  ( Object [  ]  )     ( result )  )  ;", "final   RevisionType   revisionType    =     (  ( RevisionType )     ( row [  2  ]  )  )  ;", "final   Document   document    =     (  ( PersonDocument )     ( row [  0  ]  )  )  . getDocument (  )  ;", "assertEquals ( RevisionType . ADD ,    revisionType )  ;", "assertEquals (  \" Passport \"  ,    document . getName (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testRelatedIdQueries"], "fileName": "org.hibernate.envers.test.integration.query.ids.MultipleIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( MultipleIdRelatedIdQueryTest . Person . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     3  )  ,    getAuditReader (  )  . getRevisions ( MultipleIdRelatedIdQueryTest . Document . class ,     1  )  )  ;", "Assert . assertEquals ( Arrays . asList (  2  )  ,    getAuditReader (  )  . getRevisions ( MultipleIdRelatedIdQueryTest . Document . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.query.ids.MultipleIdRelatedIdQueryTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Staff   staff    =    new   Staff (  . HEIGHT _ INCHES ,     1  )  ;", "em . persist ( staff )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    staff . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.ReadWriteExpressionChange"}, {"methodBody": ["METHOD_START", "{", "List < Number >    revisions    =    getAuditReader (  )  . getRevisions ( Staff . class ,    id )  ;", "Assert . assertEquals (  1  ,    revisions . size (  )  )  ;", "Number   number    =    revisions . get (  0  )  ;", "Staff   staffRev    =    getAuditReader (  )  . find ( Staff . class ,    id ,    number )  ;", "Assert . assertEquals (  . HEIGHT _ INCHES ,    staffRev . getSizeInInches (  )  ,     1  .  0 E -  8  )  ;", "}", "METHOD_END"], "methodName": ["shouldRespectReadExpression"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.ReadWriteExpressionChange"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "List   resultList    =    em . createNativeQuery (  (  \" select   size _ in _ cm   from   t _ staff _ AUD   where   id    =  \"     +     ( id )  )  )  . getResultList (  )  ;", "Assert . assertEquals (  1  ,    resultList . size (  )  )  ;", "Double   sizeInCm    =    null ;", "if    (  ( getDialect (  )  )    instanceof   Oracle 8 iDialect )     {", "sizeInCm    =     (  ( BigDecimal )     ( resultList . get (  0  )  )  )  . doubleValue (  )  ;", "} else    {", "sizeInCm    =     (  ( Double )     ( resultList . get (  0  )  )  )  ;", "}", "em . getTransaction (  )  . commit (  )  ;", "Assert . assertEquals (  . HEIGHT _ CENTIMETERS ,    sizeInCm . doubleValue (  )  ,     1  .  0 E -  8  )  ;", "}", "METHOD_END"], "methodName": ["shouldRespectWriteExpression"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.ReadWriteExpressionChange"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.Staff"}, {"methodBody": ["METHOD_START", "{", "return   sizeInInches ;", "}", "METHOD_END"], "methodName": ["getSizeInInches"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.Staff"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.Staff"}, {"methodBody": ["METHOD_START", "{", "this . sizeInInches    =    sizeInInches ;", "}", "METHOD_END"], "methodName": ["setSizeInInches"], "fileName": "org.hibernate.envers.test.integration.readwriteexpression.Staff"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "GreetingSetPO   set 1     =    new   GreetingSetPO (  )  ;", "set 1  . setName (  \" a 1  \"  )  ;", "GreetingSetPO   set 2     =    new   GreetingSetPO (  )  ;", "set 2  . setName (  \" a 2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( set 1  )  ;", "em . persist ( set 2  )  ;", "set 1  _ id    =    set 1  . getId (  )  ;", "set 2  _ id    =    set 2  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "GreetingPO   g 1     =    new   GreetingPO (  )  ;", "g 1  . setGreeting (  \" g 1  \"  )  ;", "g 1  . setGreetingSet ( em . get ( GreetingSetPO . class ,    set 1  _ id )  )  ;", "em . persist ( g 1  )  ;", "g 1  _ id    =    g 1  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "g 1     =    em . find ( GreetingPO . class ,    g 1  _ id )  ;", "g 1  . setGreetingSet ( em . get ( GreetingSetPO . class ,    set 2  _ id )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reference.BidirectionalReference"}, {"methodBody": ["METHOD_START", "{", "GreetingPO   rev 1     =    getAuditReader (  )  . find ( GreetingPO . class ,    g 1  _ id ,     1  )  ;", "GreetingPO   rev 2     =    getAuditReader (  )  . find ( GreetingPO . class ,    g 1  _ id ,     2  )  ;", "GreetingPO   rev 3     =    getAuditReader (  )  . find ( GreetingPO . class ,    g 1  _ id ,     3  )  ;", "assert   rev 1     =  =    null ;", "assert   rev 2  . getGreetingSet (  )  . getName (  )  . equals (  \" a 1  \"  )  ;", "assert   rev 3  . getGreetingSet (  )  . getName (  )  . equals (  \" a 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfG1"], "fileName": "org.hibernate.envers.test.integration.reference.BidirectionalReference"}, {"methodBody": ["METHOD_START", "{", "GreetingSetPO   rev 1     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 1  _ id ,     1  )  ;", "GreetingSetPO   rev 2     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 1  _ id ,     2  )  ;", "GreetingSetPO   rev 3     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 1  _ id ,     3  )  ;", "assert   rev 1  . getName (  )  . equals (  \" a 1  \"  )  ;", "assert   rev 2  . getName (  )  . equals (  \" a 1  \"  )  ;", "assert   rev 3  . getName (  )  . equals (  \" a 1  \"  )  ;", "GreetingPO   g 1     =    new   GreetingPO (  )  ;", "g 1  . setId ( g 1  _ id )  ;", "g 1  . setGreeting (  \" g 1  \"  )  ;", "assert    ( rev 1  . getGreetings (  )  . size (  )  )     =  =     0  ;", "assert   rev 2  . getGreetings (  )  . equals ( TTools . makeSet ( g 1  )  )  ;", "assert    ( rev 3  . getGreetings (  )  . size (  )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSet1"], "fileName": "org.hibernate.envers.test.integration.reference.BidirectionalReference"}, {"methodBody": ["METHOD_START", "{", "GreetingSetPO   rev 1     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 2  _ id ,     1  )  ;", "GreetingSetPO   rev 2     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 2  _ id ,     2  )  ;", "GreetingSetPO   rev 3     =    getAuditReader (  )  . find ( GreetingSetPO . class ,    set 2  _ id ,     3  )  ;", "assert   rev 1  . getName (  )  . equals (  \" a 2  \"  )  ;", "assert   rev 2  . getName (  )  . equals (  \" a 2  \"  )  ;", "assert   rev 3  . getName (  )  . equals (  \" a 2  \"  )  ;", "GreetingPO   g 1     =    new   GreetingPO (  )  ;", "g 1  . setId ( g 1  _ id )  ;", "g 1  . setGreeting (  \" g 1  \"  )  ;", "assert    ( rev 1  . getGreetings (  )  . size (  )  )     =  =     0  ;", "assert    ( rev 2  . getGreetings (  )  . size (  )  )     =  =     0  ;", "assert   rev 3  . getGreetings (  )  . equals ( TTools . makeSet ( g 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSet2"], "fileName": "org.hibernate.envers.test.integration.reference.BidirectionalReference"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( GreetingPO . class ,    g 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( GreetingSetPO . class ,    set 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     3  )  . equals ( getAuditReader (  )  . getRevisions ( GreetingSetPO . class ,    set 2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reference.BidirectionalReference"}, {"methodBody": ["METHOD_START", "{", "return   theGreeting ;", "}", "METHOD_END"], "methodName": ["getGreeting"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "return   greetingSet ;", "}", "METHOD_END"], "methodName": ["getGreetingSet"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "this . theGreeting    =    greeting ;", "}", "METHOD_END"], "methodName": ["setGreeting"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "this . greetingSet    =    greetingSet ;", "}", "METHOD_END"], "methodName": ["setGreetingSet"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingPO"}, {"methodBody": ["METHOD_START", "{", "return   greetings ;", "}", "METHOD_END"], "methodName": ["getGreetings"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "this . greetings    =    greetings ;", "}", "METHOD_END"], "methodName": ["setGreetings"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.integration.reference.GreetingSetPO"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( CustomRevEclass ,     1  )  . getCustomTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( CustomRevEclass ,     2  )  . getCustomTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "Set < Number >    revNumbers    =    new   HashSet < Number >  (  )  ;", "revNumbers . add (  1  )  ;", "revNumbers . add (  2  )  ;", "Map < Number ,    CustomRevE   revisionMap    =    vr . findRevisions ( CustomRevEclass ,    revNumbers )  ;", "assert    ( revisionMap . size (  )  )     =  =     2  ;", "assert   revisionMap . get (  1  )  . equals ( vr . findRevision ( CustomRevEclass ,     1  )  )  ;", "assert   revisionMap . get (  2  )  . equals ( vr . findRevision ( CustomRevEclass ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  ) Value (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.Custom"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( RevEntity . class ,     1  )  . getCustomTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( RevEntity . class ,     2  )  . getCustomTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "Set < Number >    revNumbers    =    new   HashSet < Number >  (  )  ;", "revNumbers . add (  1  )  ;", "revNumbers . add (  2  )  ;", "Map < Number ,    RevEntity >    revisionMap    =    vr . findRevisions ( RevEntity . class ,    revNumbers )  ;", "assert    ( revisionMap . size (  )  )     =  =     2  ;", "assert   revisionMap . get (  1  )  . equals ( vr . findRevision ( RevEntity . class ,     1  )  )  ;", "assert   revisionMap . get (  2  )  . equals ( vr . findRevision ( RevEntity . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  ) Value (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxed"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =    null    ?     !  ( customId . equals ( that . customId )  )     :     ( that . customId )     !  =    null )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =    null    ?     !  ( customTimestamp . equals ( that . customTimestamp )  )     :     ( that . customTimestamp )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( cId )     !  =    null )     ?    cId . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( cTimestamp )     !  =    null    ?    cTimestamp . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomBoxedRevEntity"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1 L )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2 L )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( CustomRevEntity . class ,     1 L )  . getCustomTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( CustomRevEntity . class ,     2 L )  . getCustomTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1 L )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2 L )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1 L ,     2 L )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumForDate ( new   Date ( timestamp 2  )  )  . longValue (  )  )     +     1 L )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomColumnMapping"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( RevEntity . class ,     1  )  . getDateTimestamp (  )  . getTime (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( RevEntity . class ,     2  )  . getDateTimestamp (  )  . getTime (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevision ( vr . getRevisionNumberFor ( new    ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevision (  (  ( vr . getRevisionNumberFor ( new    ( timestamp 2  )  )  . intValue (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevision ( vr . getRevisionNumberFor ( new    ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomDate"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "CustomDataRevEcustom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    false )  ;", "custom . setData (  \" data 1  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "custom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    false )  ;", "custom . setData (  \" data 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "custom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    true )  ;", "custom . setData (  \" data 3  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "custom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    false )  ;", "custom . setData (  \" data 4  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" z \"  )  ;", "custom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    false )  ;", "custom . setData (  \" data 5  \"  )  ;", "custom    =    getAuditReader (  )  . getCurrentRevision ( CustomDataRevEclass ,    false )  ;", "custom . setData (  \" data 5 bis \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomNoListener"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    \" data 1  \"  . equals ( vr . findRevision ( CustomDataRevEclass ,     1  )  . getData (  )  )  ;", "assert    \" data 2  \"  . equals ( vr . findRevision ( CustomDataRevEclass ,     2  )  . getData (  )  )  ;", "assert    \" data 3  \"  . equals ( vr . findRevision ( CustomDataRevEclass ,     3  )  . getData (  )  )  ;", "assert    \" data 5 bis \"  . equals ( vr . findRevision ( CustomDataRevEclass ,     4  )  . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomNoListener"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "StrTestEver 3     =    new   StrTestE \" z \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     3  )  . equals ( ver 2  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     4  )  . equals ( ver 3  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomNoListener"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomNoListener"}, {"methodBody": ["METHOD_START", "{", "return   new   Class [  ]  {    StrTestEntity . class ,    CustomPropertyAccessRevEntity . class    }  ;", "}", "METHOD_END"], "methodName": ["getAnnotatedClasses"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( RevEntity . class ,     1  )  . getCustomTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( RevEntity . class ,     2  )  . getCustomTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  ) Value (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.CustomPropertyAccess"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEste    =    new   StrTestE \" x \"  )  ;", "em . persist ( ste )  ;", "steId    =    ste . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( StrTestEclass ,    steId )  ;", "ste . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.DifferentDBSchemaTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    steId )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    steId )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    steId ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    steId ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.DifferentDBSchemaTest"}, {"methodBody": ["METHOD_START", "{", "Table   revisionTable    =    metadata (  )  . getEntityBinding (  \" SequenceIdRevisionEntity \"  )  . getTable (  )  ;", "assert   DifferentDBSchemaTest . SCHEMA _ NAME . equals ( revisionTable . getSchema (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevinfoSchemaName"], "fileName": "org.hibernate.envers.test.integration.reventity.DifferentDBSchemaTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    steId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.DifferentDBSchemaTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Long   count    =     (  ( Long )     ( em . createQuery (  \" select   count ( s )    from   StrTestEntity   s   where   s . str    =     ' x '  \"  )  . getSingleResult (  )  )  )  ;", "assert   count    =  =     0 L ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testDataNotPersisted"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListener"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   te    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( te )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionRollback"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "revEntity    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( revEntity . id )  )     {", "return   false ;", "}", "if    (  ( timestamp )     !  =     ( revEntity . timestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( timestamp )     ^     (  ( timestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . timestamp    =    timestamp ;", "}", "METHOD_END"], "methodName": ["setTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.ExceptionListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "CountingRevision . revisionCount    =     0  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEntity   te    =    new   StrTestEntity (  \" data \"  )  ;", "em . persist ( te )  ;", "em . getTransaction (  )  . commit (  )  ;", "Assert . assertEquals (  1  ,    CountingRevision . revisionCount )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.GloballyConfiguredRevListenerTest"}, {"methodBody": ["METHOD_START", "{", "return   new   Class [  ]  {    StrTestEntity . class ,    InheritedRevEntity . class    }  ;", "}", "METHOD_END"], "methodName": ["getAnnotatedClasses"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "long   rev 1 Timestamp    =    vr . findRevision ( RevEntity . class ,     1  )  . getTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "long   rev 2 Timestamp    =    vr . findRevision ( RevEntity . class ,     2  )  . getTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "Set < Number >    revNumbers    =    new   HashSet < Number >  (  )  ;", "revNumbers . add (  1  )  ;", "revNumbers . add (  2  )  ;", "Map   revisionMap    =    vr . findRevisions ( RevEntity . class ,    revNumbers )  ;", "assert    ( revisionMap . size (  )  )     =  =     2  ;", "assert   revisionMap . get (  1  )  . equals ( vr . findRevision ( RevEntity . class ,     1  )  )  ;", "assert   revisionMap . get (  2  )  . equals ( vr . findRevision ( RevEntity . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  ) Value (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.Inherited"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestRevision . data    =     \" data 1  \"  ;", "StrTestEntity   te    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEntity . class ,    id )  ;", "TestRevision . data    =     \" data 2  \"  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  1  )  ) Value (  )  )     =  =     1  ;", "assert    ( vr . getRevisionNumberForDate ( vr . getRevisionDate (  2  )  ) Value (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "RevEntity   rev 1 Data    =    vr . findRevision ( RevEntity . class ,     1  )  ;", "RevEntity   rev 2 Data    =    vr . findRevision ( RevEntity . class ,     2  )  ;", "long   rev 1 Timestamp    =    rev 1 Data . getTimestamp (  )  ;", "assert   rev 1 Timestamp    >     ( timestamp 1  )  ;", "assert   rev 1 Timestamp    <  =     ( timestamp 2  )  ;", "assert    \" data 1  \"  . equals ( rev 1 Data . getData (  )  )  ;", "long   rev 2 Timestamp    =    rev 2 Data . getTimestamp (  )  ;", "assert   rev 2 Timestamp    >     ( timestamp 2  )  ;", "assert   rev 2 Timestamp    <  =     ( timestamp 3  )  ;", "assert    \" data 2  \"  . equals ( rev 2 Data . getData (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "Set < Number >    revNumbers    =    new   HashSet < Number >  (  )  ;", "revNumbers . add (  1  )  ;", "revNumbers . add (  2  )  ;", "Map < Number ,    RevEntity >    revisionMap    =    vr . findRevisions ( RevEntity . class ,    revNumbers )  ;", "assert    ( revisionMap . size (  )  )     =  =     2  ;", "assert   revisionMap . get (  1  )  . equals ( vr . findRevision ( RevEntity . class ,     1  )  )  ;", "assert   revisionMap . get (  2  )  . equals ( vr . findRevision ( RevEntity . class ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate (  (  ( vr . getRevisionNumberForDate ( new   Date ( timestamp 2  )  ) Value (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getRevisionDate ( vr . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.reventity.Listener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "revEntity    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( revEntity . id )  )     {", "return   false ;", "}", "if    (  ( timestamp )     !  =     ( revEntity . timestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( timestamp )     ^     (  ( timestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . timestamp    =    timestamp ;", "}", "METHOD_END"], "methodName": ["setTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.ListenerRevEntity"}, {"methodBody": ["METHOD_START", "{", "Iterator   childEntityKeyColumnsIterator    =    metadata (  )  . getEntityBinding (  \" ChildEntity _ AUD \"  )  . getKey (  )  . getColumnIterator (  )  ;", "childEntityKeyColumnsIterator . next (  )  ;", "Column   second    =     (  ( Column )     ( childEntityKeyColumnsIterator . next (  )  )  )  ;", "Assert . assertEquals ( second . getSqlType (  )  ,     \" int \"  )  ;", "}", "METHOD_END"], "methodName": ["testChildRevColumnType"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevEntityInheritanceChildAuditing"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEte    =    new   StrTestE \" x \"  )  ;", "em . persist ( te )  ;", "id    =    te . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "te    =    em . find ( StrTestEclass ,    id )  ;", "te . setStr (  \" y \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumber"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . findRevision ( RevEntity . class ,     1 L )  . getCustomId (  )  )     =  =     1 L ;", "assert    ( vr . findRevision ( RevEntity . class ,     2 L )  . getCustomId (  )  )     =  =     2 L ;", "}", "METHOD_END"], "methodName": ["testFindRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumber"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "Set < Number >    revNumbers    =    new   HashSet < Number >  (  )  ;", "revNumbers . add (  1 L )  ;", "revNumbers . add (  2 L )  ;", "Map < Number ,    RevEntity >    revisionMap    =    vr . findRevisions ( RevEntity . class ,    revNumbers )  ;", "assert    ( revisionMap . size (  )  )     =  =     2  ;", "assert   revisionMap . get (  1 L )  . equals ( vr . findRevision ( RevEntity . class ,     1 L )  )  ;", "assert   revisionMap . get (  2 L )  . equals ( vr . findRevision ( RevEntity . class ,     2 L )  )  ;", "}", "METHOD_END"], "methodName": ["testFindRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumber"}, {"methodBody": ["METHOD_START", "{", "StrTestEver 1     =    new   StrTestE \" x \"  ,    id )  ;", "StrTestEver 2     =    new   StrTestE \" y \"  ,    id )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     1 L )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( StrTestEclass ,    id ,     2 L )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId1"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumber"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1 L ,     2 L )  . equals ( getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumber"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( customId )     !  =     ( that . customId )  )     {", "return   false ;", "}", "if    (  ( customTimestamp )     !  =     ( that . customTimestamp )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customId ;", "}", "METHOD_END"], "methodName": ["getCustomId"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "return   customTimestamp ;", "}", "METHOD_END"], "methodName": ["getCustomTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( int )     (  ( customId )     ^     (  ( customId )     >  >  >     3  2  )  )  )  ;", "result    =     (  3  1     *    result )     +     (  ( int )     (  ( customTimestamp )     ^     (  ( customTimestamp )     >  >  >     3  2  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customId    =    customId ;", "}", "METHOD_END"], "methodName": ["setCustomId"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "this . customTimestamp    =    customTimestamp ;", "}", "METHOD_END"], "methodName": ["setCustomTimestamp"], "fileName": "org.hibernate.envers.test.integration.reventity.LongRevNumberRevEntity"}, {"methodBody": ["METHOD_START", "{", "EntityPersister   persister    =    sessionFactory (  )  . getEntityPersister ( SequenceIdRevisionEntity . class . getName (  )  )  ;", "IdentifierGenerator   generator    =    persister . getIdentifierGenerator (  )  ;", "Assert . assertTrue ( OrderedSequenceGenerator . class . isInstance ( generator )  )  ;", "OrderedSequenceGenerator   seqGenerator    =     (  ( OrderedSequenceGenerator )     ( generator )  )  ;", "Assert . assertTrue (  \" Oracle   sequence   needs   to   be   ordered   in   RAC   environment .  \"  ,    seqGenerator . sqlCreateStrings ( getDialect (  )  )  [  0  ]  . toLowerCase (  )  . endsWith (  \"    order \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testOracleSequenceOrder"], "fileName": "org.hibernate.envers.test.integration.reventity.MonotonicRevisionNumberTest"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  \" forcing   transaction   failure !  \"  )  ;", "}", "METHOD_END"], "methodName": ["newRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.TestExceptionRevisionListener"}, {"methodBody": ["METHOD_START", "{", "(  ( ListenerRevEntity )     ( revisionEntity )  )  . setData ( TestRevisionListener . data )  ;", "}", "METHOD_END"], "methodName": ["newRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.TestRevisionListener"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Number )     ( em . createNativeQuery (  (  \" SELECT   COUNT (  *  )    FROM    \"     +    tableName )  )  . getSingleResult (  )  )  )  . intValue (  )  ;", "}", "METHOD_END"], "methodName": ["countRecords"], "fileName": "org.hibernate.envers.test.integration.reventity.removal.AbstractRevisionEntityRemovalTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( new   StrTestEntity (  \" data \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ListOwnedEntity   owned    =    new   ListOwnedEntity (  1  ,     \" data \"  )  ;", "ListOwningEntity   owning    =    new   ListOwningEntity (  1  ,     \" data \"  )  ;", "owned . setReferencing ( new   ArrayList < ListOwningEntity >  (  )  )  ;", "owning . setReferences ( new   ArrayList < ListOwnedEntity >  (  )  )  ;", "owned . getReferencing (  )  . add ( owning )  ;", "owning . getReferences (  )  . add ( owned )  ;", "em . persist ( owned )  ;", "em . persist ( owning )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Assert . assertEquals (  1  ,    countRecords ( em ,     \" STR _ TEST _ AUD \"  )  )  ;", "Assert . assertEquals (  1  ,    countRecords ( em ,     \" ListOwned _ AUD \"  )  )  ;", "Assert . assertEquals (  1  ,    countRecords ( em ,     \" ListOwning _ AUD \"  )  )  ;", "Assert . assertEquals (  1  ,    countRecords ( em ,     \" ListOwning _ ListOwned _ AUD \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.removal.AbstractRevisionEntityRemovalTest"}, {"methodBody": ["METHOD_START", "{", "em . getTransaction (  )  . begin (  )  ;", "Object   entity    =    em . find ( geClass (  )  ,    number )  ;", "Assert . assertNotNull ( entity )  ;", "em . remove ( entity )  ;", "em . getTransaction (  )  . commit (  )  ;", "Assert . assertNull ( em . find ( geClass (  )  ,    number )  )  ;", "}", "METHOD_END"], "methodName": ["removeRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.removal.AbstractRevisionEntityRemovalTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Assert . assertEquals (  0  ,    countRecords ( em ,     \" STR _ TEST _ AUD \"  )  )  ;", "Assert . assertEquals (  0  ,    countRecords ( em ,     \" ListOwned _ AUD \"  )  )  ;", "Assert . assertEquals (  0  ,    countRecords ( em ,     \" ListOwning _ AUD \"  )  )  ;", "Assert . assertEquals (  0  ,    countRecords ( em ,     \" ListOwning _ ListOwned _ AUD \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyAuditTables"], "fileName": "org.hibernate.envers.test.integration.reventity.removal.AbstractRevisionEntityRemovalTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "remove ( em ,     1  )  ;", "remove ( em ,     2  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["testRemoveExistingRevisions"], "fileName": "org.hibernate.envers.test.integration.reventity.removal.AbstractRevisionEntityRemovalTest"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEste    =    new   StrTestE \" x \"  )  ;", "StrIntTestEsite    =    new   StrIntTestE \" y \"  ,     1  )  ;", "em . persist ( ste )  ;", "em . persist ( site )  ;", "steId    =    ste . getId (  )  ;", "siteId    =    site . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "site    =    em . find ( StrIntTestEclass ,    siteId )  ;", "site . setNumber (  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( StrTestEclass ,    steId )  ;", "site    =    em . find ( StrIntTestEclass ,    siteId )  ;", "em . remove ( ste )  ;", "em . remove ( site )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.CustomTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getCrossTypeRevisionChangesReader (  )  ;", "}", "METHOD_END"], "methodName": ["testFindEntitiesChangedInRevisionException"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.CustomTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "ModifiedEntityTypeEntity   steDescriptor    =    new   ModifiedEntityTypeEntity ( StrTestEntity . class . getName (  )  )  ;", "ModifiedEntityTypeEntity   siteDescriptor    =    new   ModifiedEntityTypeEntity ( StrIntTestEntity . class . getName (  )  )  ;", "RevisionEntity   ctre    =    getAuditReader (  )  . findRevision ( RevisionEntity . class ,     1  )  ;", "assert    ( ctre . getModifiedEntityTypes (  )  )     !  =    null ;", "assert    ( ctre . getModifiedEntityTypes (  )  . size (  )  )     =  =     2  ;", "assert   TestTools . makeSet ( steDescriptor ,    siteDescriptor )  . equals ( ctre . getModifiedEntityTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackAddedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.CustomTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "ModifiedEntityTypeEntity   steDescriptor    =    new   ModifiedEntityTypeEntity ( StrTestEntity . class . getName (  )  )  ;", "ModifiedEntityTypeEntity   siteDescriptor    =    new   ModifiedEntityTypeEntity ( StrIntTestEntity . class . getName (  )  )  ;", "RevisionEntity   ctre    =    getAuditReader (  )  . findRevision ( RevisionEntity . class ,     3  )  ;", "assert    ( ctre . getModifiedEntityTypes (  )  )     !  =    null ;", "assert    ( ctre . getModifiedEntityTypes (  )  . size (  )  )     =  =     2  ;", "assert   TestTools . makeSet ( steDescriptor ,    siteDescriptor )  . equals ( ctre . getModifiedEntityTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackDeletedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.CustomTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "ModifiedEntityTypeEntity   siteDescriptor    =    new   ModifiedEntityTypeEntity ( StrIntTestEntity . class . getName (  )  )  ;", "RevisionEntity   ctre    =    getAuditReader (  )  . findRevision ( RevisionEntity . class ,     2  )  ;", "assert    ( ctre . getModifiedEntityTypes (  )  )     !  =    null ;", "assert    ( ctre . getModifiedEntityTypes (  )  . size (  )  )     =  =     1  ;", "assert   TestTools . makeSet ( siteDescriptor )  . equals ( ctre . getModifiedEntityTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackModifiedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.CustomTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "return   getAuditReader (  )  . getCrossTypeRevisionChangesReader (  )  ;", "}", "METHOD_END"], "methodName": ["getCrossTypeRevisionChangesReader"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEste    =    new   StrTestE \" x \"  )  ;", "StrIntTestEsite    =    new   StrIntTestE \" y \"  ,     1  )  ;", "em . persist ( ste )  ;", "em . persist ( site )  ;", "steId    =    ste . getId (  )  ;", "siteId    =    site . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "site    =    em . find ( StrIntTestEclass ,    siteId )  ;", "site . setNumber (  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( StrTestEclass ,    steId )  ;", "site    =    em . find ( StrIntTestEclass ,    siteId )  ;", "em . remove ( ste )  ;", "em . remove ( site )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity (  \" x \"  ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     1  ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  1  ,    RevisionType . ADD )  ,    ste ,    site )  ;", "}", "METHOD_END"], "methodName": ["testFindChangedEntitiesByRevisionTypeADD"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity ( null ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity ( null ,    null ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  3  ,    RevisionType . DEL )  ,    ste ,    site )  ;", "}", "METHOD_END"], "methodName": ["testFindChangedEntitiesByRevisionTypeDEL"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     2  ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  2  ,    RevisionType . MOD )  ,    site )  ;", "}", "METHOD_END"], "methodName": ["testFindChangedEntitiesByRevisionTypeMOD"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "assert   getCrossTypeRevisionChangesReader (  )  . findEntities (  4  )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["testFindChangesInInvalidRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "assert   TestTools . makeSet ( Pair . make ( StrTestEntity . class . getName (  )  ,    StrTestEntity . class )  ,    Pair . make ( StrIntTestEntity . class . getName (  )  ,    StrIntTestEntity . class )  )  . equals ( getCrossTypeRevisionChangesReader (  )  . findEntityTypes (  1  )  )  ;", "assert   TestTools . makeSet ( Pair . make ( StrIntTestEntity . class . getName (  )  ,    StrIntTestEntity . class )  )  . equals ( getCrossTypeRevisionChangesReader (  )  . findEntityTypes (  2  )  )  ;", "assert   TestTools . makeSet ( Pair . make ( StrTestEntity . class . getName (  )  ,    StrTestEntity . class )  ,    Pair . make ( StrIntTestEntity . class . getName (  )  ,    StrIntTestEntity . class )  )  . equals ( getCrossTypeRevisionChangesReader (  )  . findEntityTypes (  3  )  )  ;", "}", "METHOD_END"], "methodName": ["testFindEntityTypesChangedInRevision"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "for    ( Table   table    :    metadata (  )  . collectTableMappings (  )  )     {", "if    (  \" REVCHANGES \"  . equals ( table . getName (  )  )  )     {", "assert    ( table . getColumnSpan (  )  )     =  =     2  ;", "assert    ( table . getColumn ( new   Column (  \" REV \"  )  )  )     !  =    null ;", "assert    ( table . getColumn ( new   Column (  \" ENTITYNAME \"  )  )  )     !  =    null ;", "return ;", "}", "}", "assert   false ;", "}", "METHOD_END"], "methodName": ["testRevEntityTableCreation"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity (  \" x \"  ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     1  ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  1  )  ,    ste ,    site )  ;", "}", "METHOD_END"], "methodName": ["testTrackAddedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity (  \" x \"  ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     1  ,    siteId )  ;", "Map < RevisionType ,    List < Object >  >    result    =    getCrossTypeRevisionChangesReader (  )  . findGroupByRevisionType (  1  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . ADD )  ,    site ,    ste )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . MOD )  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . DEL )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackAddedEntitiesGroupByRevisionType"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity ( null ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity ( null ,    null ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  3  )  ,    site ,    ste )  ;", "}", "METHOD_END"], "methodName": ["testTrackDeletedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste    =    new   StrTestEntity ( null ,    steId )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity ( null ,    null ,    siteId )  ;", "Map < RevisionType ,    List < Object >  >    result    =    getCrossTypeRevisionChangesReader (  )  . findGroupByRevisionType (  3  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . ADD )  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . MOD )  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . DEL )  ,    site ,    ste )  ;", "}", "METHOD_END"], "methodName": ["testTrackDeletedEntitiesGroupByRevisionType"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     2  ,    siteId )  ;", "assert   TestTools . checkCollection ( getCrossTypeRevisionChangesReader (  )  . find (  2  )  ,    site )  ;", "}", "METHOD_END"], "methodName": ["testTrackModifiedEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" y \"  ,     2  ,    siteId )  ;", "Map < RevisionType ,    List < Object >  >    result    =    getCrossTypeRevisionChangesReader (  )  . findGroupByRevisionType (  2  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . ADD )  )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . MOD )  ,    site )  ;", "assert   TestTools . checkCollection ( result . get ( RevisionType . DEL )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackModifiedEntitiesGroupByRevisionType"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.DefaultTrackingEntitiesTest"}, {"methodBody": ["METHOD_START", "{", "Person   pers 1     =    new   Person (  \" Hernan \"  ,     2  8  )  ;", "Person   pers 2     =    new   Person (  \" Leandro \"  ,     2  9  )  ;", "Person   pers 3     =    new   Person (  \" Barba \"  ,     3  2  )  ;", "Person   pers 4     =    new   Person (  \" Camomo \"  ,     1  5  )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "List < Person >    owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 1  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "Car   car 1     =    new   Car (  5  ,    owners )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "long   person 1 Id    =    pers 1  . getId (  )  ;", "owners    =    new   ArrayList < Person >  (  )  ;", "owners . add ( pers 2  )  ;", "owners . add ( pers 3  )  ;", "owners . add ( pers 4  )  ;", "Car   car 2     =    new   Car (  2  7  ,    owners )  ;", "getSession (  )  . getTransaction (  )  . begin (  )  ;", "Person   person 1     =     (  ( Person )     ( getSession (  )  . get (  \" Personaje \"  ,    person 1 Id )  )  )  ;", "person 1  . setName (  \" Hernan   David \"  )  ;", "person 1  . setAge (  4  0  )  ;", "getSession (  )  . persist ( car 1  )  ;", "getSession (  )  . persist ( car 2  )  ;", "getSession (  )  . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.EntityNamesTest"}, {"methodBody": ["METHOD_START", "{", "assert   TestTools . makeSet ( Pair . make ( Car . class . getName (  )  ,    Car . class )  ,    Pair . make (  \" Personaje \"  ,    Person . class )  )  . equals ( getAuditReader (  )  . getCrossTypeRevisionChangesReader (  )  . findEntityTypes (  1  )  )  ;", "assert   TestTools . makeSet ( Pair . make ( Car . class . getName (  )  ,    Car . class )  ,    Pair . make (  \" Personaje \"  ,    Person . class )  )  . equals ( getAuditReader (  )  . getCrossTypeRevisionChangesReader (  )  . findEntityTypes (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testModifiedEntityTypes"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.EntityNamesTest"}, {"methodBody": ["METHOD_START", "{", "ExtendedRevisionEntity   ere    =    getAuditReader (  )  . findRevision ( ExtendedRevisionEntity . class ,     1  )  ;", "Assert . assertEquals ( ExtendedRevisionListener . COMMENT _ VALUE ,    ere . getComment (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCommentPropertyValue"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.ExtendedRevisionEntityTest"}, {"methodBody": ["METHOD_START", "{", "return   getAuditReader (  )  . getCrossTypeRevisionChangesReader (  )  ;", "}", "METHOD_END"], "methodName": ["getCrossTypeRevisionChangesReader"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.TrackingEntitiesMultipleChangesTest"}, {"methodBody": ["METHOD_START", "{", "Eanager   em    =    getEanager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrTestEste 1     =    new   StrTestE \" x \"  )  ;", "StrTestEste 2     =    new   StrTestE \" y \"  )  ;", "em . persist ( ste 1  )  ;", "em . persist ( ste 2  )  ;", "steId 1     =    ste 1  . getId (  )  ;", "steId 2     =    ste 2  . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste 1     =    em . find ( StrTestEclass ,    steId 1  )  ;", "ste 2     =    em . find ( StrTestEclass ,    steId 2  )  ;", "ste 1  . setStr (  \" z \"  )  ;", "em . remove ( ste 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste 1     =    em . find ( StrTestEclass ,    steId 1  )  ;", "ste 1  . setStr (  \" a \"  )  ;", "em . merge ( ste 1  )  ;", "em . remove ( ste 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.TrackingEntitiesMultipleChangesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    new   StrTestEntity (  \" x \"  ,    steId 1  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity (  \" y \"  ,    steId 2  )  ;", "Assert . assertEquals ( TestTools . makeSet ( ste 1  ,    ste 2  )  ,    new   HashSet < Object >  ( getCrossTypeRevisionChangesReader (  )  . find (  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackAddedTwoEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.TrackingEntitiesMultipleChangesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    new   StrTestEntity (  \" z \"  ,    steId 1  )  ;", "StrTestEntity   ste 2     =    new   StrTestEntity ( null ,    steId 2  )  ;", "Assert . assertEquals ( TestTools . makeSet ( ste 1  ,    ste 2  )  ,    new   HashSet < Object >  ( getCrossTypeRevisionChangesReader (  )  . find (  2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackUpdateAndRemoveDifferentEntities"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.TrackingEntitiesMultipleChangesTest"}, {"methodBody": ["METHOD_START", "{", "StrTestEntity   ste 1     =    new   StrTestEntity ( null ,    steId 1  )  ;", "Assert . assertEquals ( TestTools . makeSet ( ste 1  )  ,    new   HashSet < Object >  ( getCrossTypeRevisionChangesReader (  )  . find (  3  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTrackUpdateAndRemoveTheSameEntity"], "fileName": "org.hibernate.envers.test.integration.reventity.trackmodifiedentities.TrackingEntitiesMultipleChangesTest"}, {"methodBody": ["METHOD_START", "{", "timestamp 1     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransac (  )  . begin (  )  ;", "StrTestEntity   rfd    =    new   StrTestEntity (  \" x \"  )  ;", "em . persist ( rfd )  ;", "id    =    rfd . getId (  )  ;", "em . getTransac (  )  . commit (  )  ;", "timestamp 2     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransac (  )  . begin (  )  ;", "rfd    =    em . find ( StrTestEntity . class ,    id )  ;", "rfd . setStr (  \" y \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "timestamp 3     =    System . currentTimeMillis (  )  ;", "Thread . sleep (  1  0  0  )  ;", "em . getTransac (  )  . begin (  )  ;", "rfd    =    em . find ( StrTestEntity . class ,    id )  ;", "rfd . setStr (  \" z \"  )  ;", "em . getTransac (  )  . commit (  )  ;", "timestamp 4     =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getNumberForDate ( vr . getDate (  1  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( vr . getNumberForDate ( vr . getDate (  2  )  )  . intValue (  )  )     =  =     2  ;", "assert    ( vr . getNumberForDate ( vr . getDate (  3  )  )  . intValue (  )  )     =  =     3  ;", "}", "METHOD_END"], "methodName": ["testDatesForRevisions"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "assert    \" x \"  . equals ( getAuditReader (  )  . find ( StrTestEntity . class ,    id ,    new   Date ( timestamp 2  )  )  . getStr (  )  )  ;", "assert    \" y \"  . equals ( getAuditReader (  )  . find ( StrTestEntity . class ,    id ,    new   Date ( timestamp 3  )  )  . getStr (  )  )  ;", "assert    \" z \"  . equals ( getAuditReader (  )  . find ( StrTestEntity . class ,    id ,    new   Date ( timestamp 4  )  )  . getStr (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntitiesForTimestamps"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "AuditReader   vr    =    getAuditReader (  )  ;", "assert    ( vr . getDate ( vr . getNumberForDate ( new   Date ( timestamp 2  )  )  )  . getTime (  )  )     <  =     ( timestamp 2  )  ;", "assert    ( vr . getDate (  (  ( vr . getNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 2  )  ;", "assert    ( vr . getDate ( vr . getNumberForDate ( new   Date ( timestamp 3  )  )  )  . getTime (  )  )     <  =     ( timestamp 3  )  ;", "assert    ( vr . getDate (  (  ( vr . getNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     +     1  )  )  . getTime (  )  )     >     ( timestamp 3  )  ;", "assert    ( vr . getDate ( vr . getNumberForDate ( new   Date ( timestamp 4  )  )  )  . getTime (  )  )     <  =     ( timestamp 4  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsForDates"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 2  )  )  . intValue (  )  )     =  =     1  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 3  )  )  . intValue (  )  )     =  =     2  ;", "assert    ( getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 4  )  )  . intValue (  )  )     =  =     3  ;", "}", "METHOD_END"], "methodName": ["testTimestamps"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . getRevisionNumberForDate ( new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamps1"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "getAuditReader (  )  . find ( StrTestEntity . class ,    id ,    new   Date ( timestamp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestampslWithFind"], "fileName": "org.hibernate.envers.test.integration.revfordate.RevisionForDate"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIdTestEntity2"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TestEntity 1    site 1     =    new   TestEntity 1  (  1  ,     \" str 1  \"  )  ;", "TestEntity 2    site 2     =    new   TestEntity 2  (  1  ,     \" str 1  \"  )  ;", "em . persist ( site 1  )  ;", "em . persist ( site 2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "site 1     =    em . find ( TestEntity 1  . class ,     1  )  ;", "site 2     =    em . find ( TestEntity 2  . class ,     1  )  ;", "site 1  . setStr 1  (  \" str 2  \"  )  ;", "site 2  . setStr 1  (  \" str 2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIds"}, {"methodBody": ["METHOD_START", "{", "SameIdTestEntity 1    ver 1     =    new   SameIdTestEntity 1  (  1  ,     \" str 1  \"  )  ;", "SameIdTestEntity 1    ver 2     =    new   SameIdTestEntity 1  (  1  ,     \" str 2  \"  )  ;", "assert   getAuditReader (  )  . find ( SameIdTestEntity 1  . class ,     1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SameIdTestEntity 1  . class ,     1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSite1"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIds"}, {"methodBody": ["METHOD_START", "{", "SameIdTestEntity 2    ver 1     =    new   SameIdTestEntity 2  (  1  ,     \" str 1  \"  )  ;", "SameIdTestEntity 2    ver 2     =    new   SameIdTestEntity 2  (  1  ,     \" str 2  \"  )  ;", "assert   getAuditReader (  )  . find ( SameIdTestEntity 2  . class ,     1  ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SameIdTestEntity 2  . class ,     1  ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfSite2"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIds"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SameIdTestEntity 1  . class ,     1  )  )  ;", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SameIdTestEntity 2  . class ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.sameids.SameIds"}, {"methodBody": ["METHOD_START", "{", "SecondaryTestEntity   ste    =    new   SecondaryTestEntity (  \" a \"  ,     \"  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ste )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( SecondaryTestEntity . class ,    ste . getId (  )  )  ;", "ste . setS 1  (  \" b \"  )  ;", "ste . setS 2  (  \"  2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    ste . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.secondary.BasicSecondary"}, {"methodBody": ["METHOD_START", "{", "SecondaryTestEntity   ver 1     =    new   SecondaryTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "SecondaryTestEntity   ver 2     =    new   SecondaryTestEntity ( id ,     \" b \"  ,     \"  2  \"  )  ;", "assert   getAuditReader (  )  . find ( SecondaryTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SecondaryTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.secondary.BasicSecondary"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SecondaryTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.secondary.BasicSecondary"}, {"methodBody": ["METHOD_START", "{", "assert    \" secondary _ AUD \"  . equals (  (  ( Iterator < Join >  )     ( metadata (  )  . getEntityBinding (  \" SecondaryTestEntity _ AUD \"  )  . getJoinIterator (  )  )  )  . next (  )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableNames"], "fileName": "org.hibernate.envers.test.integration.secondary.BasicSecondary"}, {"methodBody": ["METHOD_START", "{", "SecondaryNamingTestEntity   ste    =    new   SecondaryNamingTestEntity (  \" a \"  ,     \"  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ste )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( SecondaryNamingTestEntity . class ,    ste . getId (  )  )  ;", "ste . setS 1  (  \" b \"  )  ;", "ste . setS 2  (  \"  2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "id    =    ste . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.secondary.NamingSecondary"}, {"methodBody": ["METHOD_START", "{", "SecondaryNamingTestEntity   ver 1     =    new   SecondaryNamingTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "SecondaryNamingTestEntity   ver 2     =    new   SecondaryNamingTestEntity ( id ,     \" b \"  ,     \"  2  \"  )  ;", "assert   getAuditReader (  )  . find ( SecondaryNamingTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SecondaryNamingTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.secondary.NamingSecondary"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SecondaryNamingTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.secondary.NamingSecondary"}, {"methodBody": ["METHOD_START", "{", "assert    \" sec _ versions \"  . equals (  (  ( Iterator < Join >  )     ( metadata (  )  . getEntityBinding (  \" SecondaryNamingTestEntity _ AUD \"  )  . getJoinIterator (  )  )  )  . next (  )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableNames"], "fileName": "org.hibernate.envers.test.integration.secondary.NamingSecondary"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 1  )     !  =    null    ?     !  ( s 1  . equals ( that . s 1  )  )     :     ( that . s 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 2  )     !  =    null    ?     !  ( s 2  . equals ( that . s 2  )  )     :     ( that . s 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 1  ;", "}", "METHOD_END"], "methodName": ["getS1"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 2  ;", "}", "METHOD_END"], "methodName": ["getS2"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( s 1  )     !  =    null    ?    s 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( s 2  )     !  =    null    ?    s 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 1     =    s 1  ;", "}", "METHOD_END"], "methodName": ["setS1"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 2     =    s 2  ;", "}", "METHOD_END"], "methodName": ["setS2"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryNamingTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 1  )     !  =    null    ?     !  ( s 1  . equals ( that . s 1  )  )     :     ( that . s 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 2  )     !  =    null    ?     !  ( s 2  . equals ( that . s 2  )  )     :     ( that . s 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 1  ;", "}", "METHOD_END"], "methodName": ["getS1"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 2  ;", "}", "METHOD_END"], "methodName": ["getS2"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( s 1  )     !  =    null    ?    s 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( s 2  )     !  =    null    ?    s 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 1     =    s 1  ;", "}", "METHOD_END"], "methodName": ["setS1"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 2     =    s 2  ;", "}", "METHOD_END"], "methodName": ["setS2"], "fileName": "org.hibernate.envers.test.integration.secondary.SecondaryTestEntity"}, {"methodBody": ["METHOD_START", "{", "id    =    new   EmbId (  1  ,     2  )  ;", "EmbIdTestEntity   ste    =    new   EmbIdTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ste )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( EmbIdTestEntity . class ,    ste . getId (  )  )  ;", "ste . setS 1  (  \" b \"  )  ;", "ste . setS 2  (  \"  2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.EmbIdSecondary"}, {"methodBody": ["METHOD_START", "{", "SecondaryEmbIdTestEntity   ver 1     =    new   SecondaryEmbIdTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "SecondaryEmbIdTestEntity   ver 2     =    new   SecondaryEmbIdTestEntity ( id ,     \" b \"  ,     \"  2  \"  )  ;", "assert   getAuditReader (  )  . find ( SecondaryEmbIdTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SecondaryEmbIdTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.EmbIdSecondary"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SecondaryEmbIdTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.EmbIdSecondary"}, {"methodBody": ["METHOD_START", "{", "assert    \" sec _ embid _ versions \"  . equals (  (  ( Iterator < Join >  )     ( metadata (  )  . getEntityBinding (  \" SecondaryEmbIdTestEntity _ AUD \"  )  . getJoinIterator (  )  )  )  . next (  )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableNames"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.EmbIdSecondary"}, {"methodBody": ["METHOD_START", "{", "id    =    new   MulId (  1  ,     2  )  ;", "MulIdTestEntity   ste    =    new   MulIdTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ste )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ste    =    em . find ( MulIdTestEntity . class ,    id )  ;", "ste . setS 1  (  \" b \"  )  ;", "ste . setS 2  (  \"  2  \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.MulIdSecondary"}, {"methodBody": ["METHOD_START", "{", "SecondaryMulIdTestEntity   ver 1     =    new   SecondaryMulIdTestEntity ( id ,     \" a \"  ,     \"  1  \"  )  ;", "SecondaryMulIdTestEntity   ver 2     =    new   SecondaryMulIdTestEntity ( id ,     \" b \"  ,     \"  2  \"  )  ;", "assert   getAuditReader (  )  . find ( SecondaryMulIdTestEntity . class ,    id ,     1  )  . equals ( ver 1  )  ;", "assert   getAuditReader (  )  . find ( SecondaryMulIdTestEntity . class ,    id ,     2  )  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfId"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.MulIdSecondary"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( SecondaryMulIdTestEntity . class ,    id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.MulIdSecondary"}, {"methodBody": ["METHOD_START", "{", "assert    \" sec _ mulid _ versions \"  . equals (  (  ( Iterator < Join >  )     ( metadata (  )  . getEntityBinding (  \" SecondaryMulIdTestEntity _ AUD \"  )  . getJoinIterator (  )  )  )  . next (  )  . getTable (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableNames"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.MulIdSecondary"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 1  )     !  =    null    ?     !  ( s 1  . equals ( that . s 1  )  )     :     ( that . s 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 2  )     !  =    null    ?     !  ( s 2  . equals ( that . s 2  )  )     :     ( that . s 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 1  ;", "}", "METHOD_END"], "methodName": ["getS1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 2  ;", "}", "METHOD_END"], "methodName": ["getS2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( s 1  )     !  =    null    ?    s 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( s 2  )     !  =    null    ?    s 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 1     =    s 1  ;", "}", "METHOD_END"], "methodName": ["setS1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 2     =    s 2  ;", "}", "METHOD_END"], "methodName": ["setS2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryEmbIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id 1  )     !  =    null    ?     !  ( id 1  . equals ( that . id 1  )  )     :     ( that . id 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id 2  )     !  =    null    ?     !  ( id 2  . equals ( that . id 2  )  )     :     ( that . id 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 1  )     !  =    null    ?     !  ( s 1  . equals ( that . s 1  )  )     :     ( that . s 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( s 2  )     !  =    null    ?     !  ( s 2  . equals ( that . s 2  )  )     :     ( that . s 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 1  ;", "}", "METHOD_END"], "methodName": ["getId1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   id 2  ;", "}", "METHOD_END"], "methodName": ["getId2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 1  ;", "}", "METHOD_END"], "methodName": ["getS1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "return   s 2  ;", "}", "METHOD_END"], "methodName": ["getS2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id 1  )     !  =    null )     ?    id 1  . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( id 2  )     !  =    null    ?    id 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( s 1  )     !  =    null    ?    s 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( s 2  )     !  =    null    ?    s 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 1     =    id 1  ;", "}", "METHOD_END"], "methodName": ["setId1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . id 2     =    id 2  ;", "}", "METHOD_END"], "methodName": ["setId2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 1     =    s 1  ;", "}", "METHOD_END"], "methodName": ["setS1"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "this . s 2     =    s 2  ;", "}", "METHOD_END"], "methodName": ["setS2"], "fileName": "org.hibernate.envers.test.integration.secondary.ids.SecondaryMulIdTestEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "RefEdEntity   ed 1     =    new   RefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "RefIngEntity   ing 1     =    new   RefIngEntity (  3  ,     \" data _ ing _  1  \"  ,    ed 1  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( ed 1  )  ;", "em . persist ( ing 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "ed 1  _ id    =    ed 1  . getId (  )  ;", "ing 1  _ id    =    ing 1  . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.serialization.SerializingCollection"}, {"methodBody": ["METHOD_START", "{", "if    ( o    =  =    null )     {", "return   null ;", "}", "ByteArrayOutputStream   baos    =    new   ByteArrayOutputStream (  )  ;", "ObjOutputStream   oos    =    new   ObjOutputStream ( baos )  ;", "oos . writeObj ( o )  ;", "byte [  ]    buffer    =    baos . toByteArray (  )  ;", "baos . close (  )  ;", "ByteArrayInputStream   bais    =    new   ByteArrayInputStream ( buffer )  ;", "ObjInputStream   ois    =    new   ObjInputStream ( bais )  ;", "return    (  ( T )     ( ois . readObj (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["serializeDeserialize"], "fileName": "org.hibernate.envers.test.integration.serialization.SerializingCollection"}, {"methodBody": ["METHOD_START", "{", "CollectionRefIngEntity   ing 1     =    getEntityManager (  )  . find ( CollectionRefIngEntity . class ,    ing 1  _ id )  ;", "CollectionRefEdEntity   rev 1     =    getAuditReader (  )  . find ( CollectionRefEdEntity . class ,    ed 1  _ id ,     1  )  ;", "assert    ( rev 1  . getReffering (  )  . size (  )  )     =  =     1  ;", "rev 1     =     . serializeDeserialize ( rev 1  )  ;", "assert   rev 1  . getReffering (  )  . contains ( ing 1  )  ;", "assert    ( rev 1  . getReffering (  )  . size (  )  )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["testDetach"], "fileName": "org.hibernate.envers.test.integration.serialization.SerializingCollection"}, {"methodBody": ["METHOD_START", "{", "EntityTransactransac =    entityManager . getTransac )  ;", "transacbegin (  )  ;", "IntNoAutoIdTestEntity   entity    =    new   IntNoAutoIdTestEntity (  0  ,    id )  ;", "entityManager . persist ( entity )  ;", "Assert . assertEquals ( id ,    entity . getId (  )  )  ;", "transaccommit (  )  ;", "transacbegin (  )  ;", "entity    =    entityManager . find ( IntNoAutoIdTestEntity . class ,    id )  ;", "entity . setNumVal (  1  )  ;", "entity    =    entityManager . merge ( entity )  ;", "Assert . assertEquals ( id ,    entity . getId (  )  )  ;", "transaccommit (  )  ;", "transacbegin (  )  ;", "entity    =    entityManager . find ( IntNoAutoIdTestEntity . class ,    id )  ;", "Assert . assertNotNull ( entity )  ;", "entityManager . remove ( entity )  ;", "transaccommit (  )  ;", "}", "METHOD_END"], "methodName": ["saveUpdateAndRemoveEntity"], "fileName": "org.hibernate.envers.test.integration.strategy.IdentifierReuseTest"}, {"methodBody": ["METHOD_START", "{", "final   Integer   reusedId    =     1  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "saveUpdateAndRemoveEntity ( entityManager ,    reusedId )  ;", "saveUpdateAndRemoveEntity ( entityManager ,    reusedId )  ;", "entityManager . close (  )  ;", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  ,     6  )  ,    getAuditReader (  )  . getRevisions ( IntNoAutoIdTestEntity . class ,    reusedId )  )  ;", "}", "METHOD_END"], "methodName": ["testIdentifierReuse"], "fileName": "org.hibernate.envers.test.integration.strategy.IdentifierReuseTest"}, {"methodBody": ["METHOD_START", "{", "this . productId    =    TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Product   product    =    new   Product (  1  ,     \" Test \"  )  ;", "product . getItems (  )  . add ( new   Item (  \" bread \"  ,    null )  )  ;", "entityManager . persist ( product )  ;", "return   product . getId (  )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Product   product    =    entityManager . find (  . class ,    productId )  ;", "product . getItems (  )  . add ( new   Item (  \" bread 2  \"  ,     2  )  )  ;", "entityManager . merge ( product )  ;", "}  )  ;", "TransactionUtil . doInJPA ( this :  : entityManagerFactory ,     (    entityManager )     -  >     {", "Product   product    =    entityManager . find (  . class ,    productId )  ;", "product . getItems (  )  . remove (  0  )  ;", "entityManager . merge ( product )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyComponentCollectionRevEndTest"}, {"methodBody": ["METHOD_START", "{", "final   ValidityAuditStrategyComponentCollectionRevEndTest . Product   product    =    getAuditReader (  )  . find ( ValidityAuditStrategyComponentCollectionRevEndTest . Product . class ,    productId ,     1  )  ;", "Assert . assertEquals (  1  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyComponentCollectionRevEndTest"}, {"methodBody": ["METHOD_START", "{", "final   ValidityAuditStrategyComponentCollectionRevEndTest . Product   product    =    getAuditReader (  )  . find ( ValidityAuditStrategyComponentCollectionRevEndTest . Product . class ,    productId ,     2  )  ;", "Assert . assertEquals (  2  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "Assert . assertEquals (  \" bread 2  \"  ,    product . getItems (  )  . get (  1  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyComponentCollectionRevEndTest"}, {"methodBody": ["METHOD_START", "{", "final   ValidityAuditStrategyComponentCollectionRevEndTest . Product   product    =    getAuditReader (  )  . find ( ValidityAuditStrategyComponentCollectionRevEndTest . Product . class ,    productId ,     3  )  ;", "Assert . assertEquals (  1  ,    product . getItems (  )  . size (  )  )  ;", "Assert . assertEquals (  \" bread 2  \"  ,    product . getItems (  )  . get (  0  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevision3"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyComponentCollectionRevEndTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  ,     2  ,     3  )  ,    getAuditReader (  )  . getRevisions ( ValidityAuditStrategyComponentCollectionRevEndTest . Product . class ,    productId )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCounts"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyComponentCollectionRevEndTest"}, {"methodBody": ["METHOD_START", "{", "SetOwnedEntity   result    =    new   SetOwnedEntity ( ed _ id ,     \" child \"  )  ;", "result . setReferencing ( new   HashSet < SetOwningEntity >  (  )  )  ;", "for    ( SetOwningEntity   setOwningEntity    :    owning )     {", "result . getReferencing (  )  . add ( setOwningEntity )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["createOwnedEntity"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "SetOwningEntity   result    =    new   SetOwningEntity ( ing _ id ,     \" parent \"  )  ;", "result . setReferences ( new   HashSet < SetOwnedEntity >  (  )  )  ;", "for    ( SetOwnedEntity   setOwnedEntity    :    owned )     {", "result . getReferences (  )  . add ( setOwnedEntity )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["createOwningEntity"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityManager   em    =    getEntityManager (  )  ;", "final   SetOwningEntity   setOwningEntity    =    new   SetOwningEntity (  1  ,     \" parent \"  )  ;", "final   SetOwnedEntity   setOwnedEntity    =    new   SetOwnedEntity (  2  ,     \" child \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( setOwningEntity )  ;", "em . persist ( setOwnedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ing _ id    =    setOwningEntity . getId (  )  ;", "ed _ id    =    setOwnedEntity . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "SetOwnedEntity   ver _ empty    =    createOwnedEntity (  )  ;", "SetOwnedEntity   ver _ child    =    createOwnedEntity ( new   SetOwningEntity ( ing _ id ,     \" parent \"  )  )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwnedEntity . class ,    ed _ id ,     1  )  ,    ver _ empty )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwnedEntity . class ,    ed _ id ,     2  )  ,    ver _ child )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwnedEntity . class ,    ed _ id ,     3  )  ,    ver _ empty )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwnedEntity . class ,    ed _ id ,     4  )  ,    ver _ child )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwnedEntity . class ,    ed _ id ,     5  )  ,    ver _ empty )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfEd1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "SetOwningEntity   ver _ empty    =    createOwningEntity (  )  ;", "SetOwningEntity   ver _ child    =    createOwningEntity ( new   SetOwnedEntity ( ed _ id ,     \" child \"  )  )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwningEntity . class ,    ing _ id ,     1  )  ,    ver _ empty )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwningEntity . class ,    ing _ id ,     2  )  ,    ver _ child )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwningEntity . class ,    ing _ id ,     3  )  ,    ver _ empty )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwningEntity . class ,    ing _ id ,     4  )  ,    ver _ child )  ;", "Assert . assertEquals ( getReader (  )  . find ( SetOwningEntity . class ,    ing _ id ,     5  )  ,    ver _ empty )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfIng1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "final   EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "SetOwningEntity   owningEntity    =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing _ id )  ;", "SetOwnedEntity   ownedEntity    =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed _ id )  ;", "owningEntity . setReferences ( new   HashSet < SetOwnedEntity >  (  )  )  ;", "owningEntity . getReferences (  )  . add ( ownedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "owningEntity    =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing _ id )  ;", "ownedEntity    =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed _ id )  ;", "owningEntity . getReferences (  )  . remove ( ownedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "owningEntity    =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing _ id )  ;", "ownedEntity    =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed _ id )  ;", "owningEntity . getReferences (  )  . add ( ownedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "owningEntity    =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing _ id )  ;", "ownedEntity    =    getEntityManager (  )  . find ( SetOwnedEntity . class ,    ed _ id )  ;", "owningEntity . getReferences (  )  . remove ( ownedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "owningEntity    =    getEntityManager (  )  . find ( SetOwningEntity . class ,    ing _ id )  ;", "Assert . assertEquals ( owningEntity . getReferences (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleAddAndRemove"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( getAuditReader (  )  . getRevisions ( SetOwningEntity . class ,    ing _ id )  ,    Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  )  ;", "Assert . assertEquals ( getAuditReader (  )  . getRevisions ( SetOwnedEntity . class ,    ed _ id )  ,    Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyManyToManyTest"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  \" select   auditEntity   from    \"  )  ;", "builder . append ( originalEntityClazz . getName (  )  )  . append (  \"  _ AUD   auditEntity \"  )  ;", "builder . append (  \"    where   auditEntity . originalId . id    =     : originalEntityId \"  )  ;", "Query   qry    =    getEntityManager (  )  . createQuery ( builder . toString (  )  )  ;", "qry . setParameter (  \" originalEntityId \"  ,    originalEntityId )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Map < String ,    Object >  >    resultList    =    qry . getResultList (  )  ;", "return   resultList ;", "}", "METHOD_END"], "methodName": ["getRevisions"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Session   session    =     (  ( Session )     ( em . getDelegate (  )  )  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children    (    parent _ id    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children _ AUD \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children _ AUD    (    REV    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"    NOT   NULL \"  )     +     \"  ,    REVEND    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,     \"  )     +     ( revendTimestampColumName )  )     +     \"     \"  )     +     ( getDialect (  )  . getTypeName ( Types . TIMESTAMP )  )  )     +     \"  ,    REVTYPE    \"  )     +     ( getDialect (  )  . getTypeName ( Types . TINYINT )  )  )     +     \"  ,    parent _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ParentEntity   p 1     =    new   ParentEntity (  \" parent _  1  \"  )  ;", "ParentEntity   p 2     =    new   ParentEntity (  \" parent _  2  \"  )  ;", "Child 1 Entity   c 1  _  1     =    new   Child 1 Entity (  \" child 1  _  1  \"  )  ;", "Child 1 Entity   c 1  _  2     =    new   Child 1 Entity (  \" child 1  _  2  \"  )  ;", "Child 2 Entity   c 2  _  1     =    new   Child 2 Entity (  \" child 2  _  1  \"  )  ;", "Child 2 Entity   c 2  _  2     =    new   Child 2 Entity (  \" child 2  _  2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( p 1  )  ;", "em . persist ( p 2  )  ;", "em . persist ( c 1  _  1  )  ;", "em . persist ( c 1  _  2  )  ;", "em . persist ( c 2  _  1  )  ;", "em . persist ( c 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  1     =    em . find ( Child 2 Entity . class ,    c 2  _  1  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  2  )  ;", "p 1  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "p 2  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . remove ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "c 2  _  2  . getParents (  )  . remove ( p 2  )  ;", "c 1  _  2  . getParents (  )  . remove ( p 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "p 1  _ id    =    p 1  . getId (  )  ;", "p 2  _ id    =    p 2  . getId (  )  ;", "c 1  _  1  _ id    =    c 1  _  1  . getId (  )  ;", "c 1  _  2  _ id    =    c 1  _  2  . getId (  )  ;", "c 2  _  1  _ id    =    c 2  _  1  . getId (  )  ;", "c 2  _  2  _ id    =    c 2  _  2  . getId (  )  ;", "Set < Number >    revisionNumbers    =    new   HashSet < Number >  (  )  ;", "revisionNumbers . addAll ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  )  ;", "revisions    =    getAuditReader (  )  . findRevisions ( DateRevEntity . class ,    revisionNumbers )  ;", "assert    ( revisions . size (  )  )     =  =     5  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "List < Map < String ,    Object >  >    p 1 RevList    =    getRevisions ( ParentEntity . class ,    p 1  _ id )  ;", "List < Map < String ,    Object >  >    p 2 RevList    =    getRevisions ( ParentEntity . class ,    p 2  _ id )  ;", "List < Map < String ,    Object >  >    c 1  _  1  _ List    =    getRevisions ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "List < Map < String ,    Object >  >    c 1  _  2  _ List    =    getRevisions ( Child 1 Entity . class ,    c 1  _  2  _ id )  ;", "List < Map < String ,    Object >  >    c 2  _  1  _ List    =    getRevisions ( Child 2 Entity . class ,    c 2  _  1  _ id )  ;", "List < Map < String ,    Object >  >    c 2  _  2  _ List    =    getRevisions ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "verifimeStamps (  (  \" ParentEntity :     \"     +     ( p 1  _ id )  )  ,    p 1 RevList )  ;", "verifimeStamps (  (  \" ParentEntity :     \"     +     ( p 2  _ id )  )  ,    p 2 RevList )  ;", "verifimeStamps (  (  \" Child 1 Entity :     \"     +     ( c 1  _  1  _ id )  )  ,    c 1  _  1  _ List )  ;", "verifimeStamps (  (  \" Child 1 Entity :     \"     +     ( c 1  _  2  _ id )  )  ,    c 1  _  2  _ List )  ;", "verifimeStamps (  (  \" Child 2 Entity :     \"     +     ( c 2  _  1  _ id )  )  ,    c 2  _  1  _ List )  ;", "verifimeStamps (  (  \" Child 2 Entity :     \"     +     ( c 2  _  2  _ id )  )  ,    c 2  _  2  _ List )  ;", "}", "METHOD_END"], "methodName": ["testAllRevEndTimeStamps"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 1 Entity   rev 1     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "Child 1 Entity   rev 1     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 1 Entity   c 1  _  2     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 1  (  )  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 2 Entity   c 2  _  1     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 2  (  )  ,    c 2  _  1  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "for    ( Map < String ,    Object >    revisionEntity    :    revisionEntities )     {", "Date   revendTimestamp    =     (  ( Date )     ( revisionEntity . get ( revendTimestampColumName )  )  )  ;", "DateRevEntity   revEnd    =     (  ( DateRevEntity )     ( revisionEntity . get (  \" REVEND \"  )  )  )  ;", "if    ( revendTimestamp    =  =    null )     {", "assert   revEnd    =  =    null ;", "} else    {", "assert    ( revendTimestamp . getTime (  )  )     =  =     ( revEnd . getDateTimestamp (  )  . getTime (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["verifyRevEndTimeStamps"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTestCustomRevEnt"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  \" select   auditEntity   from    \"  )  ;", "builder . append ( originalEntityClazz . getName (  )  )  . append (  \"  _ AUD   auditEntity \"  )  ;", "builder . append (  \"    where   auditEntity . originalId . id    =     : originalEntityId \"  )  ;", "Query   qry    =    getEntityManager (  )  . createQuery ( builder . toString (  )  )  ;", "qry . setParameter (  \" originalEntityId \"  ,    originalEntityId )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "List < Map < String ,    Object >  >    resultList    =    qry . getResultList (  )  ;", "return   resultList ;", "}", "METHOD_END"], "methodName": ["getRevisions"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "Session   session    =     (  ( Session )     ( em . getDelegate (  )  )  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children    (    parent _ id    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "session . createSQLQuery (  \" DROP   TABLE   children _ AUD \"  )  . executeUpdate (  )  ;", "session . createSQLQuery (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   children _ AUD    (    REV    \"     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"    NOT   NULL \"  )     +     \"  ,    REVEND    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,     \"  )     +     ( revendTimestampColumName )  )     +     \"     \"  )     +     ( getDialect (  )  . getTypeName ( Types . TIMESTAMP )  )  )     +     \"  ,    REVTYPE    \"  )     +     ( getDialect (  )  . getTypeName ( Types . TINYINT )  )  )     +     \"  ,    parent _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     \"  ,    child 1  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"  ,    child 2  _ id    \"  )     +     ( getDialect (  )  . getTypeName ( Types . INTEGER )  )  )     +     ( getDialect (  )  . getNullColumnString (  )  )  )     +     \"     )  \"  )  )  . executeUpdate (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "ParentEntity   p 1     =    new   ParentEntity (  \" parent _  1  \"  )  ;", "ParentEntity   p 2     =    new   ParentEntity (  \" parent _  2  \"  )  ;", "Child 1 Entity   c 1  _  1     =    new   Child 1 Entity (  \" child 1  _  1  \"  )  ;", "Child 1 Entity   c 1  _  2     =    new   Child 1 Entity (  \" child 1  _  2  \"  )  ;", "Child 2 Entity   c 2  _  1     =    new   Child 2 Entity (  \" child 2  _  1  \"  )  ;", "Child 2 Entity   c 2  _  2     =    new   Child 2 Entity (  \" child 2  _  2  \"  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( p 1  )  ;", "em . persist ( p 2  )  ;", "em . persist ( c 1  _  1  )  ;", "em . persist ( c 1  _  2  )  ;", "em . persist ( c 2  _  1  )  ;", "em . persist ( c 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  1     =    em . find ( Child 2 Entity . class ,    c 2  _  1  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . add ( c 1  _  2  )  ;", "p 1  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "p 2  . getChildren 1  (  )  . add ( c 1  _  1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  1     =    em . find ( Child 1 Entity . class ,    c 1  _  1  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "p 1  . getChildren 1  (  )  . remove ( c 1  _  1  )  ;", "p 2  . getChildren 2  (  )  . add ( c 2  _  2  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "p 1     =    em . find ( ParentEntity . class ,    p 1  . getId (  )  )  ;", "p 2     =    em . find ( ParentEntity . class ,    p 2  . getId (  )  )  ;", "c 1  _  2     =    em . find ( Child 1 Entity . class ,    c 1  _  2  . getId (  )  )  ;", "c 2  _  2     =    em . find ( Child 2 Entity . class ,    c 2  _  2  . getId (  )  )  ;", "c 2  _  2  . getParents (  )  . remove ( p 2  )  ;", "c 1  _  2  . getParents (  )  . remove ( p 1  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . clear (  )  ;", "p 1  _ id    =    p 1  . getId (  )  ;", "p 2  _ id    =    p 2  . getId (  )  ;", "c 1  _  1  _ id    =    c 1  _  1  . getId (  )  ;", "c 1  _  2  _ id    =    c 1  _  2  . getId (  )  ;", "c 2  _  1  _ id    =    c 2  _  1  . getId (  )  ;", "c 2  _  2  _ id    =    c 2  _  2  . getId (  )  ;", "Set < Number >    revisionNumbers    =    new   HashSet < Number >  (  )  ;", "revisionNumbers . addAll ( Arrays . asList (  1  ,     2  ,     3  ,     4  ,     5  )  )  ;", "revisions    =    getReader (  )  . findRevisions ( SequenceIdRevisionEntity . class ,    revisionNumbers )  ;", "assert    ( revisions . size (  )  )     =  =     5  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "List < Map < String ,    Object >  >    p 1 RevList    =    getRevisions ( ParentEntity . class ,    p 1  _ id )  ;", "List < Map < String ,    Object >  >    p 2 RevList    =    getRevisions ( ParentEntity . class ,    p 2  _ id )  ;", "List < Map < String ,    Object >  >    c 1  _  1  _ List    =    getRevisions ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "List < Map < String ,    Object >  >    c 1  _  2  _ List    =    getRevisions ( Child 1 Entity . class ,    c 1  _  2  _ id )  ;", "List < Map < String ,    Object >  >    c 2  _  1  _ List    =    getRevisions ( Child 2 Entity . class ,    c 2  _  1  _ id )  ;", "List < Map < String ,    Object >  >    c 2  _  2  _ List    =    getRevisions ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "verifimeStamps (  (  \" ParentEntity :     \"     +     ( p 1  _ id )  )  ,    p 1 RevList )  ;", "verifimeStamps (  (  \" ParentEntity :     \"     +     ( p 2  _ id )  )  ,    p 2 RevList )  ;", "verifimeStamps (  (  \" Child 1 Entity :     \"     +     ( c 1  _  1  _ id )  )  ,    c 1  _  1  _ List )  ;", "verifimeStamps (  (  \" Child 1 Entity :     \"     +     ( c 1  _  2  _ id )  )  ,    c 1  _  2  _ List )  ;", "verifimeStamps (  (  \" Child 2 Entity :     \"     +     ( c 2  _  1  _ id )  )  ,    c 2  _  1  _ List )  ;", "verifimeStamps (  (  \" Child 2 Entity :     \"     +     ( c 2  _  2  _ id )  )  ,    c 2  _  2  _ List )  ;", "}", "METHOD_END"], "methodName": ["testAllRevEndTimeStamps"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 1 Entity   rev 1     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "Child 1 Entity   rev 1     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     1  )  ;", "Child 1 Entity   rev 2     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     2  )  ;", "Child 1 Entity   rev 3     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     3  )  ;", "Child 1 Entity   rev 4     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     4  )  ;", "Child 1 Entity   rev 5     =    getReader (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild1_2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "ParentEntity   p 1     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 1  _ id )  ;", "ParentEntity   p 2     =    getEntityManager (  )  . find ( ParentEntity . class ,    p 2  _ id )  ;", "Child 2 Entity   rev 1     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     1  )  ;", "Child 2 Entity   rev 2     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     2  )  ;", "Child 2 Entity   rev 3     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     3  )  ;", "Child 2 Entity   rev 4     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     4  )  ;", "Child 2 Entity   rev 5     =    getReader (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getParents (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getParents (  )  ,    p 1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getParents (  )  ,    p 1  ,    p 2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getParents (  )  ,    p 1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfChild2_2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 1 Entity   c 1  _  2     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  2  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getReader (  )  . find ( ParentEntity . class ,    p 1  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 1  (  )  ,    c 1  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 2  (  )  ,    c 2  _  2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent1"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "Child 1 Entity   c 1  _  1     =    getEntityManager (  )  . find ( Child 1 Entity . class ,    c 1  _  1  _ id )  ;", "Child 2 Entity   c 2  _  1     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  1  _ id )  ;", "Child 2 Entity   c 2  _  2     =    getEntityManager (  )  . find ( Child 2 Entity . class ,    c 2  _  2  _ id )  ;", "ParentEntity   rev 1     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     1  )  ;", "ParentEntity   rev 2     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     2  )  ;", "ParentEntity   rev 3     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     3  )  ;", "ParentEntity   rev 4     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     4  )  ;", "ParentEntity   rev 5     =    getReader (  )  . find ( ParentEntity . class ,    p 2  _ id ,     5  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 1  (  )  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 1  (  )  ,    c 1  _  1  )  ;", "assert   TestTools . checkCollection ( rev 1  . getChildren 2  (  )  )  ;", "assert   TestTools . checkCollection ( rev 2  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 3  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "assert   TestTools . checkCollection ( rev 4  . getChildren 2  (  )  ,    c 2  _  1  ,    c 2  _  2  )  ;", "assert   TestTools . checkCollection ( rev 5  . getChildren 2  (  )  ,    c 2  _  1  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfParent2"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     2  ,     3  ,     4  )  . equals ( getAuditReader (  )  . getRevisions ( ParentEntity . class ,    p 2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( Child 1 Entity . class ,    c 1  _  2  _ id )  )  ;", "assert   Arrays . asList (  1  )  . equals ( getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  1  _ id )  )  ;", "assert   Arrays . asList (  1  ,     5  )  . equals ( getAuditReader (  )  . getRevisions ( Child 2 Entity . class ,    c 2  _  2  _ id )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCounts"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "for    ( Map < String ,    Object >    revisionEntity    :    revisionEntities )     {", "Date   revendTimestamp    =     (  ( Date )     ( revisionEntity . get ( revendTimestampColumName )  )  )  ;", "SequenceIdRevisionEntity   revEnd    =     (  ( SequenceIdRevisionEntity )     ( revisionEntity . get (  \" REVEND \"  )  )  )  ;", "if    ( revendTimestamp    =  =    null )     {", "Assert . assertNull ( revEnd )  ;", "} else    {", "if    (  (  ( getDialect (  )  )    instanceof   MySQL 5 Dialect )     &  &     (  !  (  (  ( getDialect (  )  )    instanceof   MySQL 5  7 Dialect )     |  |     (  ( getDialect (  )  )    instanceof   MariaDB 5  3 Dialect )  )  )  )     {", "Assert . assertEquals ( revendTimestamp . getTime (  )  ,     (  ( revEnd . getTimestamp (  )  )     -     (  ( revEnd . getTimestamp (  )  )     %     1  0  0  0  )  )  )  ;", "} else", "if    (  ( getDialect (  )  )    instanceof   dialect . SybaseASE 1  5 Dialect )     {", "Assert . assertEquals (  (  ( revendTimestamp . getTime (  )  )     /     1  0  0  0  .  0  )  ,     (  ( revEnd . getTimestamp (  )  )     /     1  0  0  0  .  0  )  ,     (  1  .  0     /     3  0  0  .  0  )  )  ;", "} else    {", "Assert . assertEquals ( revendTimestamp . getTime (  )  ,    revEnd . getTimestamp (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["verifyRevEndTimeStamps"], "fileName": "org.hibernate.envers.test.integration.strategy.ValidityAuditStrategyRevEndTsTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   otherStr ;", "}", "METHOD_END"], "methodName": ["getOtherStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return    ( str )     !  =    null    ?    str . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . otherStr    =    otherStr ;", "}", "METHOD_END"], "methodName": ["setOtherStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.AuditedMethodMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   notAuditedStr ;", "}", "METHOD_END"], "methodName": ["getNotAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . notAuditedStr    =    notAuditedStr ;", "}", "METHOD_END"], "methodName": ["setNotAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   subAuditedStr ;", "}", "METHOD_END"], "methodName": ["getSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . subAuditedStr    =    subAuditedStr ;", "}", "METHOD_END"], "methodName": ["setSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "NotAuditedSubclassEntity   nas    =    new   NotAuditedSubclassEntity (  \" nae \"  ,     \" super   str \"  ,     \" not   audited   str \"  )  ;", "em . persist ( nas )  ;", "AuditedEntity   ae    =    new   AuditedEntity (  \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "em . persist ( ae )  ;", "id 1  _  1     =    ae . getId (  )  ;", "id 2  _  1     =    nas . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ae    =    em . find ( AuditedEntity . class ,    id 1  _  1  )  ;", "ae . setStr (  \" ae   new \"  )  ;", "ae . setSubAuditedStr (  \" audited   str   new \"  )  ;", "nas    =    em . find ( NotAuditedSubclassEntity . class ,    id 2  _  1  )  ;", "nas . setStr (  \" nae   new \"  )  ;", "nas . setNotAuditedStr (  \" not   aud   str   new \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedAllSubclassEntity   ver 1     =    new   AuditedAllSubclassEntity ( id 1  _  1  ,     \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "AuditedAllSubclassEntity   ver 2     =    new   AuditedAllSubclassEntity ( id 1  _  1  ,     \" ae   new \"  ,     \" super   str \"  ,     \" audited   str   new \"  )  ;", "AuditedAllSubclassEntity   rev 1     =    getAuditReader (  )  . find ( AuditedAllSubclassEntity . class ,    id 1  _  1  ,     1  )  ;", "AuditedAllSubclassEntity   rev 2     =    getAuditReader (  )  . find ( AuditedAllSubclassEntity . class ,    id 1  _  1  ,     2  )  ;", "assert    ( rev 1  . getOtherStr (  )  )     =  =    null ;", "assert    ( rev 2  . getOtherStr (  )  )     =  =    null ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . find ( NotAuditEntity . class ,    id 2  _  1  ,     1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testHistoryOfNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( AuditedAllSubclassEntity . class ,    id 1  _  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . getRevisions ( NotAuditEntity . class ,    id 2  _  1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   subAuditedStr ;", "}", "METHOD_END"], "methodName": ["getSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . subAuditedStr    =    subAuditedStr ;", "}", "METHOD_END"], "methodName": ["setSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "NotAuditedSubclassEntity   nas    =    new   NotAuditedSubclassEntity (  \" nae \"  ,     \" super   str \"  ,     \" not   audited   str \"  )  ;", "em . persist ( nas )  ;", "AuditedEntity   ae    =    new   AuditedEntity (  \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "em . persist ( ae )  ;", "id 1  _  1     =    ae . getId (  )  ;", "id 2  _  1     =    nas . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ae    =    em . find ( AuditedEntity . class ,    id 1  _  1  )  ;", "ae . setStr (  \" ae   new \"  )  ;", "ae . setSubAuditedStr (  \" audited   str   new \"  )  ;", "nas    =    em . find ( NotAuditedSubclassEntity . class ,    id 2  _  1  )  ;", "nas . setStr (  \" nae   new \"  )  ;", "nas . setNotAuditedStr (  \" not   aud   str   new \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedMethodSubclassEntity   ver 1     =    new   AuditedMethodSubclassEntity ( id 1  _  1  ,     \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "AuditedMethodSubclassEntity   ver 2     =    new   AuditedMethodSubclassEntity ( id 1  _  1  ,     \" ae   new \"  ,     \" super   str \"  ,     \" audited   str   new \"  )  ;", "AuditedMethodSubclassEntity   rev 1     =    getAuditReader (  )  . find ( AuditedMethodSubclassEntity . class ,    id 1  _  1  ,     1  )  ;", "AuditedMethodSubclassEntity   rev 2     =    getAuditReader (  )  . find ( AuditedMethodSubclassEntity . class ,    id 1  _  1  ,     2  )  ;", "assert    ( rev 1  . getOtherStr (  )  )     =  =    null ;", "assert    ( rev 2  . getOtherStr (  )  )     =  =    null ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . find ( NotAuditEntity . class ,    id 2  _  1  ,     1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testHistoryOfNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( AuditedMethodSubclassEntity . class ,    id 1  _  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . getRevisions ( NotAuditEntity . class ,    id 2  _  1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( str )     !  =    null    ?     !  ( str . equals ( that . str )  )     :     ( that . str )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   otherStr ;", "}", "METHOD_END"], "methodName": ["getOtherStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return   str ;", "}", "METHOD_END"], "methodName": ["getStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "return    ( str )     !  =    null    ?    str . hashCode (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . otherStr    =    otherStr ;", "}", "METHOD_END"], "methodName": ["setOtherStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "this . str    =    str ;", "}", "METHOD_END"], "methodName": ["setStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.AuditedAllMappedSuperclass"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   notAuditedStr ;", "}", "METHOD_END"], "methodName": ["getNotAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . notAuditedStr    =    notAuditedStr ;", "}", "METHOD_END"], "methodName": ["setNotAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.NotAuditedSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   subAuditedStr ;", "}", "METHOD_END"], "methodName": ["getSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . subAuditedStr    =    subAuditedStr ;", "}", "METHOD_END"], "methodName": ["setSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.AuditedAllSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "NotAuditedSubclassEntity   nas    =    new   NotAuditedSubclassEntity (  \" nae \"  ,     \" super   str \"  ,     \" not   audited   str \"  )  ;", "em . persist ( nas )  ;", "AuditedEntity   ae    =    new   AuditedEntity (  \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "em . persist ( ae )  ;", "id 1  _  1     =    ae . getId (  )  ;", "id 2  _  1     =    nas . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ae    =    em . find ( AuditedEntity . class ,    id 1  _  1  )  ;", "ae . setStr (  \" ae   new \"  )  ;", "ae . setSubAuditedStr (  \" audited   str   new \"  )  ;", "nas    =    em . find ( NotAuditedSubclassEntity . class ,    id 2  _  1  )  ;", "nas . setStr (  \" nae   new \"  )  ;", "nas . setNotAuditedStr (  \" not   aud   str   new \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedAllSubclassEntity   ver 1     =    new   AuditedAllSubclassEntity ( id 1  _  1  ,     \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "AuditedAllSubclassEntity   ver 2     =    new   AuditedAllSubclassEntity ( id 1  _  1  ,     \" ae   new \"  ,     \" super   str \"  ,     \" audited   str   new \"  )  ;", "AuditedAllSubclassEntity   rev 1     =    getAuditReader (  )  . find ( AuditedAllSubclassEntity . class ,    id 1  _  1  ,     1  )  ;", "AuditedAllSubclassEntity   rev 2     =    getAuditReader (  )  . find ( AuditedAllSubclassEntity . class ,    id 1  _  1  ,     2  )  ;", "assert    ( rev 1  . getOtherStr (  )  )     !  =    null ;", "assert    ( rev 2  . getOtherStr (  )  )     !  =    null ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . find ( NotAuditEntity . class ,    id 2  _  1  ,     1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testHistoryOfNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( AuditedAllSubclassEntity . class ,    id 1  _  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . getRevisions ( NotAuditEntity . class ,    id 2  _  1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditAllSubclass.MappedSubclassingAllAuditedTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "return   subAuditedStr ;", "}", "METHOD_END"], "methodName": ["getSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( id )     !  =    null    ?    id . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "this . subAuditedStr    =    subAuditedStr ;", "}", "METHOD_END"], "methodName": ["setSubAuditedStr"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.AuditedMethodSubclassEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "NotAuditedSubclassEntity   nas    =    new   NotAuditedSubclassEntity (  \" nae \"  ,     \" super   str \"  ,     \" not   audited   str \"  )  ;", "em . persist ( nas )  ;", "AuditedEntity   ae    =    new   AuditedEntity (  \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "em . persist ( ae )  ;", "id 1  _  1     =    ae . getId (  )  ;", "id 2  _  1     =    nas . getId (  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ae    =    em . find ( AuditedEntity . class ,    id 1  _  1  )  ;", "ae . setStr (  \" ae   new \"  )  ;", "ae . setSubAuditedStr (  \" audited   str   new \"  )  ;", "nas    =    em . find ( NotAuditedSubclassEntity . class ,    id 2  _  1  )  ;", "nas . setStr (  \" nae   new \"  )  ;", "nas . setNotAuditedStr (  \" not   aud   str   new \"  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "AuditedMethodSubclassEntity   ver 1     =    new   AuditedMethodSubclassEntity ( id 1  _  1  ,     \" ae \"  ,     \" super   str \"  ,     \" audited   str \"  )  ;", "AuditedMethodSubclassEntity   ver 2     =    new   AuditedMethodSubclassEntity ( id 1  _  1  ,     \" ae   new \"  ,     \" super   str \"  ,     \" audited   str   new \"  )  ;", "AuditedMethodSubclassEntity   rev 1     =    getAuditReader (  )  . find ( AuditedMethodSubclassEntity . class ,    id 1  _  1  ,     1  )  ;", "AuditedMethodSubclassEntity   rev 2     =    getAuditReader (  )  . find ( AuditedMethodSubclassEntity . class ,    id 1  _  1  ,     2  )  ;", "assert    ( rev 1  . getOtherStr (  )  )     !  =    null ;", "assert    ( rev 2  . getOtherStr (  )  )     !  =    null ;", "assert   rev 1  . equals ( ver 1  )  ;", "assert   rev 2  . equals ( ver 2  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . find ( NotAuditEntity . class ,    id 2  _  1  ,     1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testHistoryOfNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "assert   Arrays . asList (  1  ,     2  )  . equals ( getAuditReader (  )  . getRevisions ( AuditedMethodSubclassEntity . class ,    id 1  _  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "getAuditReader (  )  . getRevisions ( NotAuditEntity . class ,    id 2  _  1  )  ;", "assert   false ;", "}    catch    ( NotAuditedException   nae )     {", "throw   nae ;", "}", "}", "METHOD_END"], "methodName": ["testRevisionsCountsForNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditedAtSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ClassOverrideAuditedEntity   classOverrideAuditedEntity    =    new   ClassOverrideAuditedEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  )  ;", "em . persist ( classOverrideAuditedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "classAuditedEntityId    =    classOverrideAuditedEntity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "ClassOverrideNotAuditedEntity   classOverrideNotAuditedEntity    =    new   ClassOverrideNotAuditedEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  )  ;", "em . persist ( classOverrideNotAuditedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "classNotAuditedEntityId    =    classOverrideNotAuditedEntity . getId (  )  ;", "classAuditedTable    =    metadata (  )  . getEntityBinding (  \" ClassOverrideAuditedEntity _ AUD \"  )  . getTable (  )  ;", "classNotAuditedTable    =    metadata (  )  . getEntityBinding (  \" ClassOverrideNotAuditedEntity _ AUD \"  )  . getTable (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditClassOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( classAuditedTable . getColumn ( new   Column (  \" number 1  \"  )  )  )  ;", "Assert . assertNotNull ( classAuditedTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "Assert . assertNotNull ( classAuditedTable . getColumn ( new   Column (  \" str 2  \"  )  )  )  ;", "Assert . assertNotNull ( classNotAuditedTable . getColumn ( new   Column (  \" str 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditClassOverrideTest"}, {"methodBody": ["METHOD_START", "{", "ClassOverrideAuditedEntity   ver 1     =    new   ClassOverrideAuditedEntity (  \" data    1  \"  ,     1  ,    classAuditedEntityId ,     \" data    2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( ClassOverrideAuditedEntity . class ,    classAuditedEntityId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfClassOverrideAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditClassOverrideTest"}, {"methodBody": ["METHOD_START", "{", "ClassOverrideNotAuditedEntity   ver 1     =    new   ClassOverrideNotAuditedEntity ( null ,    null ,    classNotAuditedEntityId ,     \" data    2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( ClassOverrideNotAuditedEntity . class ,    classNotAuditedEntityId ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfClassOverrideNotAuditedEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditClassOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNull ( classNotAuditedTable . getColumn ( new   Column (  \" number 1  \"  )  )  )  ;", "Assert . assertNull ( classNotAuditedTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditClassOverrideTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "PropertyOverrideEntity   propertyEntity    =    new   PropertyOverrideEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  )  ;", "em . persist ( propertyEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "propertyEntityId    =    propertyEntity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "TransitiveOverrideEntity   transitiveEntity    =    new   TransitiveOverrideEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  ,     2  ,     \" data    3  \"  )  ;", "em . persist ( transitiveEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "transitiveEntityId    =    transitiveEntity . getId (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "AuditedSpecialEntity   auditedEntity    =    new   AuditedSpecialEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  )  ;", "em . persist ( auditedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "auditedEntityId    =    auditedEntity . getId (  )  ;", "propertyTable    =    metadata (  )  . getEntityBinding (  \" PropertyOverrideEntity _ AUD \"  )  . getTable (  )  ;", "transitiveTable    =    metadata (  )  . getEntityBinding (  \" TransitiveOverrideEntity _ AUD \"  )  . getTable (  )  ;", "auditedTable    =    metadata (  )  . getEntityBinding (  \" edSpecialEntity _ AUD \"  )  . getTable (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( propertyTable . getColumn ( new   Column (  \" number 1  \"  )  )  )  ;", "Assert . assertNotNull ( transitiveTable . getColumn ( new   Column (  \" number 2  \"  )  )  )  ;", "Assert . assertNotNull ( auditedTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "AuditedSpecialEntity   ver 1     =    new   AuditedSpecialEntity (  \" data    1  \"  ,    null ,    auditedEntityId ,     \" data    2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( AuditedSpecialEntity . class ,    auditedEntityId ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfAuditedSpecialEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "PropertyOverrideEntity   ver 1     =    new   PropertyOverrideEntity ( null ,     1  ,    propertyEntityId ,     \" data    2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( PropertyOverrideEntity . class ,    propertyEntityId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfPropertyOverrideEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "TransitiveOverrideEntity   ver 1     =    new   TransitiveOverrideEntity (  \" data    1  \"  ,     1  ,    transitiveEntityId ,     \" data    2  \"  ,     2  ,     \" data    3  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( TransitiveOverrideEntity . class ,    transitiveEntityId ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfTransitiveOverrideEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNull ( propertyTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( transitiveTable . getColumn ( new   Column (  \" number 1  \"  )  )  )  ;", "Assert . assertNotNull ( transitiveTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTransitiveAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditPropertyOverrideTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number 1  )     !  =    null    ?     !  ( number 1  . equals ( that . number 1  )  )     :     ( that . number 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 1  ;", "}", "METHOD_END"], "methodName": ["getNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( number 1  )     !  =    null    ?    number 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 1     =    number 1  ;", "}", "METHOD_END"], "methodName": ["setNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" AuditedBaseEntity ( id    =     \"     +     ( id )  )     +     \"  ,    str 1     =     \"  )     +     ( str 1  )  )     +     \"  ,    number 1     =     \"  )     +     ( number 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedSpecialEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.AuditedSpecialEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number 1  )     !  =    null    ?     !  ( number 1  . equals ( that . number 1  )  )     :     ( that . number 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 1  ;", "}", "METHOD_END"], "methodName": ["getNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( number 1  )     !  =    null    ?    number 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 1     =    number 1  ;", "}", "METHOD_END"], "methodName": ["setNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" BaseEntity ( id    =     \"     +     ( id )  )     +     \"  ,    str 1     =     \"  )     +     ( str 1  )  )     +     \"  ,    number 1     =     \"  )     +     ( number 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.BaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ClassOverrideAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ClassOverrideAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ClassOverrideNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ClassOverrideNotAuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 2  ;", "}", "METHOD_END"], "methodName": ["getNumber2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ExtendedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ExtendedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 2     =    number 2  ;", "}", "METHOD_END"], "methodName": ["setNumber2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ExtendedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.ExtendedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "MixedOverrideEntity   mixedEntity    =    new   MixedOverrideEntity (  \" data    1  \"  ,     1  ,     \" data    2  \"  )  ;", "em . persist ( mixedEntity )  ;", "em . getTransaction (  )  . commit (  )  ;", "mixedEntityId    =    mixedEntity . getId (  )  ;", "mixedTable    =    metadata (  )  . getEntityBinding (  \" Entity _ AUD \"  )  . getTable (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNotNull ( mixedTable . getColumn ( new   Column (  \" number 1  \"  )  )  )  ;", "Assert . assertNotNull ( mixedTable . getColumn ( new   Column (  \" str 2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideTest"}, {"methodBody": ["METHOD_START", "{", "MixedOverrideEntity   ver 1     =    new   MixedOverrideEntity ( null ,     1  ,    mixedEntityId ,     \" data    2  \"  )  ;", "Assert . assertEquals ( ver 1  ,    getAuditReader (  )  . find ( MixedOverrideEntity . class ,    mixedEntityId ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHistoryOfMixedEntity"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertNull ( mixedTable . getColumn ( new   Column (  \" str 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotAuditedProperty"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.MixedOverrideTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number 1  )     !  =    null    ?     !  ( number 1  . equals ( that . number 1  )  )     :     ( that . number 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( str 1  )     !  =    null    ?     !  ( str 1  . equals ( that . str 1  )  )     :     ( that . str 1  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 1  ;", "}", "METHOD_END"], "methodName": ["getNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 1  ;", "}", "METHOD_END"], "methodName": ["getStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( str 1  )     !  =    null    ?    str 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( number 1  )     !  =    null    ?    number 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 1     =    number 1  ;", "}", "METHOD_END"], "methodName": ["setNumber1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 1     =    str 1  ;", "}", "METHOD_END"], "methodName": ["setStr1"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" NotAuditedBaseEntity ( id    =     \"     +     ( id )  )     +     \"  ,    str 1     =     \"  )     +     ( str 1  )  )     +     \"  ,    number 1     =     \"  )     +     ( number 1  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.NotAuditedBaseEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 2  ;", "}", "METHOD_END"], "methodName": ["getStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.PropertyOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 2     =    str 2  ;", "}", "METHOD_END"], "methodName": ["setStr2"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.PropertyOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "return   str 3  ;", "}", "METHOD_END"], "methodName": ["getStr3"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.TransitiveOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "this . str 3     =    str 3  ;", "}", "METHOD_END"], "methodName": ["setStr3"], "fileName": "org.hibernate.envers.test.integration.superclass.auditoverride.TransitiveOverrideEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( baby )     !  =    null    ?     !  ( baby . equals ( that . baby )  )     :     ( that . baby )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.BabyCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "return   baby ;", "}", "METHOD_END"], "methodName": ["getBaby"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.BabyCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( baby )     !  =    null    ?    baby . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.BabyCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "this . baby    =    baby ;", "}", "METHOD_END"], "methodName": ["setBaby"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.BabyCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" BabyCompleteEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    baby    =     \"  )     +     ( baby )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.BabyCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( child )     !  =    null    ?     !  ( child . equals ( that . child )  )     :     ( that . child )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "return   child ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( child )     !  =    null    ?    child . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "this . child    =    child ;", "}", "METHOD_END"], "methodName": ["setChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ChildCompleteEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    child    =     \"  )     +     ( child )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildCompleteEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( child )     !  =    null    ?     !  ( child . equals ( that . child )  )     :     ( that . child )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildMultipleParentsEntity"}, {"methodBody": ["METHOD_START", "{", "return   child ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildMultipleParentsEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( child )     !  =    null    ?    child . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildMultipleParentsEntity"}, {"methodBody": ["METHOD_START", "{", "this . child    =    child ;", "}", "METHOD_END"], "methodName": ["setChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildMultipleParentsEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ChildMultipleParentsEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    child    =     \"  )     +     ( child )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildMultipleParentsEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( child )     !  =    null    ?     !  ( child . equals ( that . child )  )     :     ( that . child )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildSingleParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   child ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildSingleParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( child )     !  =    null    ?    child . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildSingleParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . child    =    child ;", "}", "METHOD_END"], "methodName": ["setChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildSingleParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ChildSingleParentEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    child    =     \"  )     +     ( child )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ChildSingleParentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( child )     !  =    null    ?     !  ( child . equals ( that . child )  )     :     ( that . child )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ExplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   child ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ExplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( child )     !  =    null    ?    child . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ExplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . child    =    child ;", "}", "METHOD_END"], "methodName": ["setChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ExplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ExplicitTransitiveChildEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    child    =     \"  )     +     ( child )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ExplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( child )     !  =    null    ?     !  ( child . equals ( that . child )  )     :     ( that . child )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ImplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "return   child ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ImplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  ( child )     !  =    null    ?    child . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ImplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "this . child    =    child ;", "}", "METHOD_END"], "methodName": ["setChild"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ImplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" ImplicitTransitiveChildEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    child    =     \"  )     +     ( child )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.ImplicitTransitiveChildEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( grandparent )     !  =    null    ?     !  ( grandparent . equals ( that . grandparent )  )     :     ( that . grandparent )     !  =    null )     {", "return   false ;", "}", "if    (  ( notAudited )     !  =    null    ?     !  ( notAudited . equals ( that . notAudited )  )     :     ( that . notAudited )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "return   grandparent ;", "}", "METHOD_END"], "methodName": ["getGrandparent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "return   notAudited ;", "}", "METHOD_END"], "methodName": ["getNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( g )     !  =    null    ?    g . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( notAudited )     !  =    null    ?    notAudited . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "this . grandparent    =    grandparent ;", "}", "METHOD_END"], "methodName": ["setGrandparent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "this . notAudited    =    notAudited ;", "}", "METHOD_END"], "methodName": ["setNotAudited"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" MappedGrandparentEntity ( id    =     \"     +     ( id )  )     +     \"  ,    grandparent    =     \"  )     +     ( grandparent )  )     +     \"  ,    notAudited    =     \"  )     +     ( notAudited )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedGrandparentEntity"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( parent )     !  =    null    ?     !  ( parent . equals ( that . parent )  )     :     ( that . parent )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   relation ;", "}", "METHOD_END"], "methodName": ["getRelation"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  (  )     !  =    null    ?     . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . relation    =    relation ;", "}", "METHOD_END"], "methodName": ["setRelation"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  \" MappedParentEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    parent    =     \"  )     +     ( parent )  )     +     \"  ,    relation    =     \"  )     +     ( relation )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MappedParentEntity"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" data    1  \"  ,     1  )  ;", "em . persist ( site )  ;", "em . persist ( new   ChildParentsEntity ( childId ,     \" grandparent    1  \"  ,     \" notAudited    1  \"  ,     \" parent    1  \"  ,     \" child    1  \"  ,    site )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "siteId    =    site . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MultipleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "Set < String >    expectedColumns    =    TestTools . makeSet (  \" child \"  ,     \" parent \"  ,     \" relation _ id \"  ,     \" grandparent \"  ,     \" id \"  )  ;", "Set < String >    unexpectedColumns    =    TestTools . makeSet (  \" notAudited \"  )  ;", "Table   table    =    metadata (  )  . getEntityBinding (  \" ChildMultipleParentsEntity _ AUD \"  )  . getTable (  )  ;", "for    ( String   columnName    :    expectedColumns )     {", "Assert . assertNotNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "for    ( String   columnName    :    unexpectedColumns )     {", "Assert . assertNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCreatedAuditTable"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MultipleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "ChildMultipleParentsEntity   expectedMultipleChild    =    new   ChildMultipleParentsEntity ( childMultipleId ,     \" grandparent    1  \"  ,    null ,     \" parent    1  \"  ,     \" child    1  \"  ,    new   StrIntTestEntity (  \" data    1  \"  ,     1  ,    siteMultipleId )  )  ;", "ChildMultipleParentsEntity   child    =    getAuditReader (  )  . find ( ChildMultipleParentsEntity . class ,    childMultipleId ,     1  )  ;", "Assert . assertEquals ( expectedMultipleChild ,    child )  ;", "Assert . assertEquals ( expectedMultipleChild . getRelation (  )  . getId (  )  ,    child . getRelation (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleAuditParents"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.MultipleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   site    =    new   StrIntTestEntity (  \" data    1  \"  ,     1  )  ;", "em . persist ( site )  ;", "em . persist ( new   ChildParentEntity ( childId ,     \" grandparent    1  \"  ,     \" notAudited    1  \"  ,     \" parent    1  \"  ,     \" child    1  \"  ,    site )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "siteId    =    site . getId (  )  ;", "em . close (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.SingleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "Set < String >    expectedColumns    =    TestTools . makeSet (  \" child \"  ,     \" grandparent \"  ,     \" id \"  )  ;", "Set < String >    unexpectedColumns    =    TestTools . makeSet (  \" parent \"  ,     \" relation _ id \"  ,     \" notAudited \"  )  ;", "Table   table    =    metadata (  )  . getEntityBinding (  \" ChildSingleParentEntity _ AUD \"  )  . getTable (  )  ;", "for    ( String   columnName    :    expectedColumns )     {", "Assert . assertNotNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "for    ( String   columnName    :    unexpectedColumns )     {", "Assert . assertNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCreatedAuditTable"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.SingleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "ChildSingleParentEntity   expectedSingleChild    =    new   ChildSingleParentEntity ( childSingleId ,     \" grandparent    1  \"  ,    null ,    null ,     \" child    1  \"  ,    null )  ;", "ChildSingleParentEntity   child    =    getAuditReader (  )  . find ( ChildSingleParentEntity . class ,    childSingleId ,     1  )  ;", "Assert . assertEquals ( expectedSingleChild ,    child )  ;", "Assert . assertNull ( child . getRelation (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleAuditParent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.SingleAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "StrIntTestEntity   siteComplete    =    new   StrIntTestEntity (  \" data    1  \"  ,     1  )  ;", "em . persist ( siteComplete )  ;", "em . persist ( new   BabyCompleteEntity ( babyCompleteId ,     \" grand    1  \"  ,     \" notAudited    1  \"  ,     \"     1  \"  ,     \" child    1  \"  ,    siteComplete ,     \" baby    1  \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "siteCompleteId    =    siteComplete . getId (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TotalAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "BabyCompleteEntity   expectedBaby    =    new   BabyCompleteEntity ( babyCompleteId ,     \" grandparent    1  \"  ,    null ,     \" parent    1  \"  ,     \" child    1  \"  ,    new   StrIntTestEntity (  \" data    1  \"  ,     1  ,    siteCompleteId )  ,     \" baby    1  \"  )  ;", "BabyCompleteEntity   baby    =    getAuditReader (  )  . find ( BabyCompleteEntity . class ,    babyCompleteId ,     1  )  ;", "Assert . assertEquals ( expectedBaby ,    baby )  ;", "Assert . assertEquals ( expectedBaby . getRelation (  )  . getId (  )  ,    baby . getRelation (  )  . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompleteAuditParents"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TotalAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "Set < String >    expectedColumns    =    TestTools . makeSet (  \" baby \"  ,     \" child \"  ,     \" parent \"  ,     \" relation _ id \"  ,     \" grandparent \"  ,     \" id \"  )  ;", "Set < String >    unexpectedColumns    =    TestTools . makeSet (  \" notAudited \"  )  ;", "Table   table    =    metadata (  )  . getEntityBinding (  \" BabyCompleteEntity _ AUD \"  )  . getTable (  )  ;", "for    ( String   columnName    :    expectedColumns )     {", "Assert . assertNotNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "for    ( String   columnName    :    unexpectedColumns )     {", "Assert . assertNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCreatedAuditTable"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TotalAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "for    ( String   columnName    :    expectedColumns )     {", "Assert . ertNotNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "for    ( String   columnName    :    unexpectedColumns )     {", "Assert . ertNull ( table . getColumn ( new   Column ( columnName )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTableColumns"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   em    =    getEntityManager (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( new   ImplicitChildEntity ( childImpTransId ,     \" grandparent    1  \"  ,     \" notAudited    1  \"  ,     \" parent    1  \"  ,     \" child    1  \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "em . getTransaction (  )  . begin (  )  ;", "em . persist ( new   ExplicitChildEntity ( childExpTransId ,     \" grandparent    2  \"  ,     \" notAudited    2  \"  ,     \" parent    2  \"  ,     \" child    2  \"  )  )  ;", "em . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "Table   explicitTransChildTable    =    metadata (  )  . getEntityBinding (  \" ExplicitTransitiveChildEntity _ AUD \"  )  . getTable (  )  ;", "checkTableColumns ( TestTools . makeSet (  \" child \"  ,     \" parent \"  ,     \" grandparent \"  ,     \" id \"  )  ,    TestTools . makeSet (  \" notAudited \"  )  ,    explicitTransChildTable )  ;", "Table   implicitTransChildTable    =    metadata (  )  . getEntityBinding (  \" ImplicitTransitiveChildEntity _ AUD \"  )  . getTable (  )  ;", "checkTableColumns ( TestTools . makeSet (  \" child \"  ,     \" parent \"  ,     \" grandparent \"  ,     \" id \"  )  ,    TestTools . makeSet (  \" notAudited \"  )  ,    implicitTransChildTable )  ;", "}", "METHOD_END"], "methodName": ["testCreatedAuditTables"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "ExplicitTransitiveChildEntity   expectedChild    =    new   ExplicitTransitiveChildEntity ( childExpTransId ,     \" grandparent    2  \"  ,    null ,     \" parent    2  \"  ,     \" child    2  \"  )  ;", "ExplicitTransitiveChildEntity   child    =    getAuditReader (  )  . find ( ExplicitTransitiveChildEntity . class ,    childExpTransId ,     2  )  ;", "Assert . assertEquals ( expectedChild ,    child )  ;", "}", "METHOD_END"], "methodName": ["testExplicitTransitiveAuditParents"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "ImplicitTransitiveChildEntity   expectedChild    =    new   ImplicitTransitiveChildEntity ( childImpTransId ,     \" grandparent    1  \"  ,    null ,     \" parent    1  \"  ,     \" child    1  \"  )  ;", "ImplicitTransitiveChildEntity   child    =    getAuditReader (  )  . find ( ImplicitTransitiveChildEntity . class ,    childImpTransId ,     1  )  ;", "Assert . assertEquals ( expectedChild ,    child )  ;", "}", "METHOD_END"], "methodName": ["testImplicitTransitiveAuditParents"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveAuditParentsTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "if    (  !  ( super . equals ( o )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( parent )     !  =    null    ?     !  ( parent . equals ( that . parent )  )     :     ( that . parent )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveParentEntity"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveParentEntity"}, {"methodBody": ["METHOD_START", "{", "int   result    =    super . hashCode (  )  ;", "result    =     (  3  1     *    result )     +     (  (  )     !  =    null    ?     . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveParentEntity"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveParentEntity"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" TransitiveParentEntity (  \"     +     ( super . toString (  )  )  )     +     \"  ,    parent    =     \"  )     +     ( parent )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.hibernate.envers.test.integration.superclass.auditparents.TransitiveParentEntity"}, {"methodBody": ["METHOD_START", "{", "createSchema    =    File . createTempFile (  \" create _ schema \"  ,     \"  . sql \"  )  ;", "dropSchema    =    File . createTempFile (  \" drop _ schema \"  ,     \"  . sql \"  )  ;", "super . buildEntityManagerFactory (  )  ;", "}", "METHOD_END"], "methodName": ["buildEntityManagerFactory"], "fileName": "org.hibernate.envers.test.integration.tools.OrderSequenceGenerationTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getOrCreateEntityManager (  )  ;", "try    {", "StrEntity   e    =    new   StrEntity (  \" Acme \"  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "entityManager . persist ( e )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . clear (  )  ;", "StrEntity   rev 1     =    getAuditReader (  )  . find ( StrEntity . class ,    e . getId (  )  ,     1  )  ;", "Assert . assertEquals ( e ,    rev 1  )  ;", "}    catch    ( Exception   e )     {", "if    ( entityManager . getTransaction (  )  . isActive (  )  )     {", "entityManager . getTransaction (  )  . rollback (  )  ;", "}", "throw   e ;", "}    finally    {", "entityManager . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBasicPersistAndAuditFetch"], "fileName": "org.hibernate.envers.test.integration.tools.OrderSequenceGenerationTest"}, {"methodBody": ["METHOD_START", "{", "final   String [  ]    createStrings    =    getDialect (  )  . getCreateSequenceStrings (  \" REVISION _ GENERATOR \"  ,     1  ,     1  )  ;", "final   String   content    =    new   String ( Files . readAllBytes ( createSchema . toPath (  )  )  )  . toLowerCase (  )  ;", "for    ( int   i    =     0  ;    i    <     ( createStrings . length )  ;     +  + i )     {", "if    (  ( getDialect (  )  )    instanceof   Oracle 8 iDialect )     {", "Assert . assertTrue ( content . contains (  (  ( createStrings [ i ]  )     +     \"    ORDER \"  )  . toLowerCase (  )  )  )  ;", "} else    {", "Assert . assertTrue ( content . contains ( createStrings [ i ]  . toLowerCase (  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testCreateSequenceExportScripts"], "fileName": "org.hibernate.envers.test.integration.tools.OrderSequenceGenerationTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( Arrays . asList (  1  )  ,    getAuditReader (  )  . getRevisions ( StrTestEntity . class ,    id )  )  ;", "Assert . assertEquals ( new   StrTestEntity (  \" data \"  ,    id )  ,    getAuditReader (  )  . find ( StrTestEntity . class ,    id ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testAuditDataRetrieval"], "fileName": "org.hibernate.envers.test.integration.tools.SchemaExportTest"}, {"methodBody": ["METHOD_START", "{", "Sesssess =    getSess )  ;", "sessgetTransact )  . begin (  )  ;", "StrTestEntity   entity    =    new   StrTestEntity (  \" data \"  )  ;", "sesssave ( entity )  ;", "sessgetTransact )  . commit (  )  ;", "id    =    entity . getId (  )  ;", "}", "METHOD_END"], "methodName": ["testSchemaCreation"], "fileName": "org.hibernate.envers.test.integration.tools.SchemaExportTest"}, {"methodBody": ["METHOD_START", "{", "final   SelectBeforeUpdateTest . Author   author    =    new   SelectBeforeUpdateTest . Author (  2  ,     \" Author 2  \"  )  ;", "final   SelectBeforeUpdateTest . Book   book    =    new   SelectBeforeUpdateTest . Book (  2  ,     \" Book 2  \"  ,    author )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . save ( author )  ;", "session . save ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "book . setName (  \" Book 2 Updated \"  )  ;", "session . update ( book )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initDataUpdateDetachedChanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "final   SelectBeforeUpdateTest . Author   author    =    new   SelectBeforeUpdateTest . Author (  4  ,     \" Author 4  \"  )  ;", "final   SelectBeforeUpdateTest . Book   book    =    new   SelectBeforeUpdateTest . Book (  4  ,     \" Book 4  \"  ,    author )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . save ( author )  ;", "session . save ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "book . setName (  \" Book 4 Updated \"  )  ;", "session . update ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . update ( book )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initDataUpdateDetachedChangedAndUnchanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "final   SelectBeforeUpdateTest . Author   author    =    new   SelectBeforeUpdateTest . Author (  1  ,     \" Author 1  \"  )  ;", "final   SelectBeforeUpdateTest . Book   book    =    new   SelectBeforeUpdateTest . Book (  1  ,     \" Book 1  \"  ,    author )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . save ( author )  ;", "session . save ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . update ( book )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initDataUpdateDetachedUnchanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "final   SelectBeforeUpdateTest . Author   author    =    new   SelectBeforeUpdateTest . Author (  3  ,     \" Author 3  \"  )  ;", "final   SelectBeforeUpdateTest . Book   book    =    new   SelectBeforeUpdateTest . Book (  3  ,     \" Book 3  \"  ,    author )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . save ( author )  ;", "session . save ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . update ( book )  ;", "}  )  ;", "TransactionUtil . doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "book . setName (  \" Book 3 Updated \"  )  ;", "session . update ( book )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["initDataUpdateDetachedUnchangedAndChanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Author . class ,     2  )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Book . class ,     2  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCountsUpdateDetachedChanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Author . class ,     4  )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Book . class ,     4  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCountsUpdateDetachedChangedAndUnchanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Author . class ,     1  )  . size (  )  )  ;", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Book . class ,     1  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCountsUpdateDetachedUnchanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals (  1  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Author . class ,     3  )  . size (  )  )  ;", "Assert . assertEquals (  2  ,    getAuditReader (  )  . getRevisions ( SelectBeforeUpdateTest . Book . class ,     3  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRevisionCountsUpdateDetachedUnchangedAndChanged"], "fileName": "org.hibernate.envers.test.integration.update.SelectBeforeUpdateTest"}, {"methodBody": ["METHOD_START", "{", "new   Configuration (  )  . buildSessionFactory (  )  . close (  )  ;", "new   Configuration (  )  . addAnnotatedClass (  . SimpleNonAuditedEntity . class )  . buildSessionFactory (  )  . close (  )  ;", "}", "METHOD_END"], "methodName": ["testNoAudited"], "fileName": "org.hibernate.envers.test.integrator.BasicIntegratorTest"}, {"methodBody": ["METHOD_START", "{", "closeEntityManager (  )  ;", "emf . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( entityManager )     !  =    null )     {", "entityManager . close (  )  ;", "entityManager    =    null ;", "}", "}", "METHOD_END"], "methodName": ["closeEntityManager"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   new   BootstrapServiceRegistryBuilder (  )  ;", "}", "METHOD_END"], "methodName": ["createBootstrapRegistryBuilder"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["createSchema"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   new   Class [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getAnnotatedClasses"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   auditReader ;", "}", "METHOD_END"], "methodName": ["getAuditReader"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   AbstractEntityManagerTest . DIALECT ;", "}", "METHOD_END"], "methodName": ["getDialect"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return   entityManager ;", "}", "METHOD_END"], "methodName": ["getEntityManager"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "init ( true ,    getAuditStrategy (  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "this . audited    =    audited ;", "Properties   configurationProperties    =    new   Properties (  )  ;", "configurationProperties . putAll ( Environment . getProperties (  )  )  ;", "if    (  ! audited )     {", "configurationProperties . setProperty ( EnversIntegrator . AUTO _ REGISTER ,     \" false \"  )  ;", "}", "if    ( createSchema (  )  )     {", "configurationProperties . setProperty ( HBM 2 DDL _ AUTO ,     \" create - drop \"  )  ;", "configurationProperties . setProperty ( USE _ NEW _ ID _ GENERATOR _ MAPPINGS ,     \" true \"  )  ;", "configurationProperties . setProperty ( EnversSettings . USE _ REVISION _ ENTITY _ WITH _ NATIVE _ ID ,     \" false \"  )  ;", "}", "if    (  ( auditStrategy    !  =    null )     &  &     (  !  (  \"  \"  . equals ( auditStrategy )  )  )  )     {", "configurationProperties . setProperty (  \" audit _ strategy \"  ,    auditStrategy )  ;", "}", "addConfigurationProperties ( configurationProperties )  ;", "configurationProperties . put ( LOADED _ CLASSES ,    Arrays . asList ( getAnnotatedClasses (  )  )  )  ;", "entityManagerFactoryBuilder    =     (  ( EntityManagerFactoryBuilderImpl )     ( Bootstrap . getEntityManagerFactoryBuilder ( new   PersistenceUnitDescriptorAdapter (  )  ,    configurationProperties )  )  )  ;", "emf    =    entityManagerFactoryBuilder . build (  )  . unwrap ( HibernateEntityManagerFactory . class )  ;", "serviceRegistry    =     (  ( StandardServiceRegistryImpl )     ( emf . getSessionFactory (  )  . getServiceRegistry (  )  . getParentServiceRegistry (  )  )  )  ;", "newEntityManager (  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "closeEntityManager (  )  ;", "entityManager    =    emf . createEntityManager (  )  ;", "if    ( audited )     {", "auditReader    =    AuditReaderFactory . get ( entityManager )  ;", "}", "}", "METHOD_END"], "methodName": ["newEntityManager"], "fileName": "org.hibernate.envers.test.performance.AbstractEntityManagerTest"}, {"methodBody": ["METHOD_START", "{", "return    (  ( milliseconds    /     1  0  0  0  )     +     \"  .  \"  )     +     ( milliseconds    %     1  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["getSecondsString"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  (  \" Unaudited :     \"     +     ( getSecondsString ( unaudited )  )  )  )  ;", "System . out . println (  (  \"       Audited :     \"     +     ( getSecondsString ( audited )  )  )  )  ;", "System . out . println (  (  \"             Delta :     \"     +     ( getSecondsString (  ( audited    -    unaudited )  )  )  )  )  ;", "System . out . println (  (  \"          Factor :     \"     +     (  (  ( double )     ( audited )  )     /    unaudited )  )  )  ;", "}", "METHOD_END"], "methodName": ["printResults"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "runTotal    =     0  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "long   total    =     0  ;", "for    ( int   i    =     0  ;    i    <  =    numberOfRuns ;    i +  +  )     {", "System . out . println (  )  ;", "System . out . println (  (  \" RUN    \"     +    i )  )  ;", "reset (  )  ;", "do (  )  ;", "results . add ( runTotal )  ;", "total    +  =    runTotal ;", "newEntityManager (  )  ;", "}", "return   total ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "startTime    =    System . currentTimeMillis (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "long   stopTime    =    System . currentTimeMillis (  )  ;", "runTotal    +  =    stopTime    -     ( startTime )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "List < Long >    unauditedRuns    =    new   ArrayList < Long >  (  )  ;", "List < Long >    auditedRuns    =    new   ArrayList < Long >  (  )  ;", "init ( true ,    null )  ;", "long   audited    =    run ( numOfRuns ,    auditedRuns )  ;", "close (  )  ;", "init ( false ,    null )  ;", "long   unaudited    =    run ( numOfRuns ,    unauditedRuns )  ;", "close (  )  ;", "for    ( int   i    =     0  ;    i    <  =    numOfRuns ;    i +  +  )     {", "System . out . println (  (  \" RUN    \"     +    i )  )  ;", "printResults ( unauditedRuns . get ( i )  ,    auditedRuns . get ( i )  )  ;", "System . out . println (  )  ;", "}", "System . out . println (  \" TOTAL \"  )  ;", "printResults ( unaudited ,    audited )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "org.hibernate.envers.test.performance.AbstractPerformanceTest"}, {"methodBody": ["METHOD_START", "{", "new   InsertsPerformance (  )  . test (  1  0  )  ;", "new   ComplexInsertPerformance (  )  . test (  1  0  )  ;", "new   UpdatesPerformance (  )  . test (  1  0  )  ;", "new   InsertsOneTransactionPerformance (  )  . test (  1  0  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.performance.AllPerformance"}, {"methodBody": ["METHOD_START", "{", "ChildEntity 1     =    new   ChildEntity 1  (  )  ;", "setId (  (  ( idCounter )  +  +  )  )  ;", "setData 1  (  \" xxx \"  )  ;", "setData 2  (  \" yyy \"  )  ;", "setChild 1  ( createChildEntity 2  (  )  )  ;", "setChild 2  ( createChildEntity 2  (  )  )  ;", "return", "}", "METHOD_END"], "methodName": ["createChildEntity1"], "fileName": "org.hibernate.envers.test.performance.ComplexInsertPerformance"}, {"methodBody": ["METHOD_START", "{", "ChildEntity 2     =    new   ChildEntity 2  (  )  ;", "setId (  (  ( idCounter )  +  +  )  )  ;", "setNumber (  1  2  3  4  5  6  7  8  )  ;", "setData (  \" some   data ,    not   really   meaningful \"  )  ;", "setStrings ( new   HashSet < String >  (  )  )  ;", "getStrings (  )  . add (  \" aaa \"  )  ;", "getStrings (  )  . add (  \" bbb \"  )  ;", "getStrings (  )  . add (  \" ccc \"  )  ;", "return", "}", "METHOD_END"], "methodName": ["createChildEntity2"], "fileName": "org.hibernate.envers.test.performance.ComplexInsertPerformance"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( ComplexInsertPerformance . NUMBER _ INSERTS )  ;    i +  +  )     {", "newEntityManager (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "RootEntity   re    =    new   RootEntity (  )  ;", "re . setId (  (  ( idCounter )  +  +  )  )  ;", "re . setData 1  (  \" data 1  \"  )  ;", "re . setData 2  (  \" data 2  \"  )  ;", "re . setDate 1  ( new   Date (  )  )  ;", "re . setNumber 1  (  1  2  3  )  ;", "re . setNumber 2  (  4  5  6  )  ;", "re . setChild 1  ( createChildEntity 1  (  )  )  ;", "re . setChild 2  ( createChildEntity 1  (  )  )  ;", "re . setChild 3  ( createChildEntity 1  (  )  )  ;", "start (  )  ;", "entityManager . persist ( re )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.hibernate.envers.test.performance.ComplexInsertPerformance"}, {"methodBody": ["METHOD_START", "{", "ComplexInsertPerformance   insertsPerformance    =    new   ComplexInsertPerformance (  )  ;", "insertsPerformance . test (  3  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.performance.ComplexInsertPerformance"}, {"methodBody": ["METHOD_START", "{", "List < String >    entityNames    =    Arrays . asList ( auditEntityNames )  ;", "PersistenceContext   persistenceContext    =     (  ( SessionImplementor )     ( session )  )  . getPersistenceContext (  )  ;", "for    ( Map . Entry < Object ,    EntityEntry >    entrySet    :    persistenceContext . reentrantSafeEntityEntries (  )  )     {", "final   EntityEntry   entityEntry    =    entrySet . getValue (  )  ;", "if    ( entityNames . contains ( entityEntry . getEntityName (  )  )  )     {", "assert   false    :     \" Audit   data   shall   not   be   stored   in   the   session   level   cache .    This   causes      issues .  \"  ;", "}", "Assert . assertFalse (  \" Revision   entity   shall   not   be   stored   in   the   session   level   cache .    This   causes      issues .  \"  ,    SequenceIdRevisionEntity . class . getName (  )  . equals ( entityEntry . getEntityName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkEmptyAuditSessionCache"], "fileName": "org.hibernate.envers.test.performance.EvictAuditDataAfterCommitTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "StrTestEntity   ste    =    new   StrTestEntity (  \" data \"  )  ;", "session . persist ( ste )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,     \" entities . StrTestEntity _ AUD \"  )  ;", "}", "METHOD_END"], "methodName": ["testSessionCacheClear"], "fileName": "org.hibernate.envers.test.performance.EvictAuditDataAfterCommitTest"}, {"methodBody": ["METHOD_START", "{", "final   String [  ]    auditEntityNames    =    new   String [  ]  {     \" SetRefEdEntity _ AUD \"  ,     \" SetRefIngEntity _ AUD \"     }  ;", "SetRefEdEntity   ed 1     =    new   SetRefEdEntity (  1  ,     \" data _ ed _  1  \"  )  ;", "SetRefEdEntity   ed 2     =    new   SetRefEdEntity (  2  ,     \" data _ ed _  2  \"  )  ;", "SetRefIngEntity   ing 1     =    new   SetRefIngEntity (  3  ,     \" data _ ing _  1  \"  )  ;", "SetRefIngEntity   ing 2     =    new   SetRefIngEntity (  4  ,     \" data _ ing _  2  \"  )  ;", "Session   session    =    openSession (  )  ;", "session . getTransaction (  )  . begin (  )  ;", "session . persist ( ed 1  )  ;", "session . persist ( ed 2  )  ;", "session . persist ( ing 1  )  ;", "session . persist ( ing 2  )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,    auditEntityNames )  ;", "session . getTransaction (  )  . begin (  )  ;", "ed 1     =     (  ( SetRefEdEntity )     ( session . load ( SetRefEdEntity . class ,    ed 1  . getId (  )  )  )  )  ;", "ing 1  . setReference ( ed 1  )  ;", "ing 2  . setReference ( ed 1  )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,    auditEntityNames )  ;", "session . getTransaction (  )  . begin (  )  ;", "ed 2     =     (  ( SetRefEdEntity )     ( session . load ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  )  )  ;", "Set < SetRefIngEntity >    reffering    =    new   HashSet < SetRefIngEntity >  (  )  ;", "reffering . add ( ing 1  )  ;", "reffering . add ( ing 2  )  ;", "ed 2  . setReffering ( reffering )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,    auditEntityNames )  ;", "session . getTransaction (  )  . begin (  )  ;", "ed 2     =     (  ( SetRefEdEntity )     ( session . load ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  )  )  ;", "ed 2  . getReffering (  )  . remove ( ing 1  )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,    auditEntityNames )  ;", "session . getTransaction (  )  . begin (  )  ;", "ed 2     =     (  ( SetRefEdEntity )     ( session . load ( SetRefEdEntity . class ,    ed 2  . getId (  )  )  )  )  ;", "ed 2  . getReffering (  )  . iterator (  )  . next (  )  . setData (  \" mod _ data _ ing _  2  \"  )  ;", "session . getTransaction (  )  . commit (  )  ;", "checkEmptyAuditSessionCache ( session ,    auditEntityNames )  ;", "session . close (  )  ;", "}", "METHOD_END"], "methodName": ["testSessionCacheCollectionClear"], "fileName": "org.hibernate.envers.test.performance.EvictAuditDataAfterCommitTest"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "start (  )  ;", "for    ( int   i    =     0  ;    i    <     (  . NUMBER _ INSERTS )  ;    i +  +  )     {", "entityManager . persist ( new   StrTestEntity (  (  \" x \"     +    i )  )  )  ;", "}", "entityManager . getTransaction (  )  . commit (  )  ;", "stop (  )  ;", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.hibernate.envers.test.performance.InsertsOneTransactionPerformance"}, {"methodBody": ["METHOD_START", "{", "InsertsOneTransactionPerformance   insertsOneTransactionPerformance    =    new   InsertsOneTransactionPerformance (  )  ;", "insertsOneTransactionPerformance . test (  3  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.performance.InsertsOneTransactionPerformance"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( InsertsPerformance . NUMBER _ INSERTS )  ;    i +  +  )     {", "newEntityManager (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "start (  )  ;", "entityManager . persist ( new   StrTestEntity (  (  \" x \"     +    i )  )  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.hibernate.envers.test.performance.InsertsPerformance"}, {"methodBody": ["METHOD_START", "{", "InsertsPerformance   insertsPerformance    =    new   InsertsPerformance (  )  ;", "insertsPerformance . test (  3  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.performance.InsertsPerformance"}, {"methodBody": ["METHOD_START", "{", "setup (  )  ;", "for    ( int   i    =     0  ;    i    <     (  . NUMBER _ UPDATES )  ;    i +  +  )     {", "newEntityManager (  )  ;", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "Integer   id    =    ids . get ( random . nextInt (  . NUMBER _ ENTITIES )  )  ;", "start (  )  ;", "StrTestEntity   testEntity    =    entityManager . find ( StrTestEntity . class ,    id )  ;", "testEntity . setStr (  (  \" z \"     +    i )  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["doTest"], "fileName": "org.hibernate.envers.test.performance.UpdatesPerformance"}, {"methodBody": ["METHOD_START", "{", "UpdatesPerformance   updatesPerformance    =    new   UpdatesPerformance (  )  ;", "updatesPerformance . test (  3  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.performance.UpdatesPerformance"}, {"methodBody": ["METHOD_START", "{", "EntityManager   entityManager    =    getEntityManager (  )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "for    ( int   i    =     0  ;    i    <     (  . NUMBER _ ENTITIES )  ;    i +  +  )     {", "StrTestEntity   testEntity    =    new   StrTestEntity (  (  \" x \"     +    i )  )  ;", "entityManager . persist ( testEntity )  ;", "ids . add ( testEntity . getId (  )  )  ;", "}", "entityManager . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.hibernate.envers.test.performance.UpdatesPerformance"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data 1  )     !  =    null    ?     !  ( data 1  . equals ( that . data 1  )  )     :     ( that . data 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( data 2  )     !  =    null    ?     !  ( data 2  . equals ( that . data 2  )  )     :     ( that . data 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "return   child 1  ;", "}", "METHOD_END"], "methodName": ["getChild1"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "return   child 2  ;", "}", "METHOD_END"], "methodName": ["getChild2"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data 1  )     !  =    null    ?    data 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data 2  )     !  =    null    ?    data 2  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "this . child 1     =    child 1  ;", "}", "METHOD_END"], "methodName": ["setChild1"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "this . child 2     =    child 2  ;", "}", "METHOD_END"], "methodName": ["setChild2"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity1"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data )     !  =    null    ?     !  ( data . equals ( that . data )  )     :     ( that . data )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number )     !  =    null    ?     !  ( number . equals ( that . number )  )     :     ( that . number )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "return   number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "return   strings ;", "}", "METHOD_END"], "methodName": ["getStrings"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data )     !  =    null    ?    data . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( num )     !  =    null    ?    num . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "this . data    =    data ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "this . strings    =    strings ;", "}", "METHOD_END"], "methodName": ["setStrings"], "fileName": "org.hibernate.envers.test.performance.complex.ChildEntity2"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  ( data 1  )     !  =    null    ?     !  ( data 1  . equals ( that . data 1  )  )     :     ( that . data 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( data 2  )     !  =    null    ?     !  ( data 2  . equals ( that . data 2  )  )     :     ( that . data 2  )     !  =    null )     {", "return   false ;", "}", "if    (  ( date 1  )     !  =    null    ?     !  ( date 1  . equals ( that . date 1  )  )     :     ( that . date 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( id )     !  =    null    ?     !  ( id . equals ( that . id )  )     :     ( that . id )     !  =    null )     {", "return   false ;", "}", "if    (  ( number 1  )     !  =    null    ?     !  ( number 1  . equals ( that . number 1  )  )     :     ( that . number 1  )     !  =    null )     {", "return   false ;", "}", "if    (  ( number 2  )     !  =    null    ?     !  ( number 2  . equals ( that . number 2  )  )     :     ( that . number 2  )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   child 1  ;", "}", "METHOD_END"], "methodName": ["getChild1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   child 2  ;", "}", "METHOD_END"], "methodName": ["getChild2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   child 3  ;", "}", "METHOD_END"], "methodName": ["getChild3"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 1  ;", "}", "METHOD_END"], "methodName": ["getData1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   data 2  ;", "}", "METHOD_END"], "methodName": ["getData2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   date 1  ;", "}", "METHOD_END"], "methodName": ["getDate1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 1  ;", "}", "METHOD_END"], "methodName": ["getNumber1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "return   number 2  ;", "}", "METHOD_END"], "methodName": ["getNumber2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =     (  ( id )     !  =    null )     ?    id . hashCode (  )     :     0  ;", "result    =     (  3  1     *    result )     +     (  ( data 1  )     !  =    null    ?    data 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( data 2  )     !  =    null    ?    data 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( num 1  )     !  =    null    ?    num 1  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( num 2  )     !  =    null    ?    num 2  . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( date 1  )     !  =    null    ?    date 1  . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . child 1     =    child 1  ;", "}", "METHOD_END"], "methodName": ["setChild1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . child 2     =    child 2  ;", "}", "METHOD_END"], "methodName": ["setChild2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . child 3     =    child 3  ;", "}", "METHOD_END"], "methodName": ["setChild3"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 1     =    data 1  ;", "}", "METHOD_END"], "methodName": ["setData1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . data 2     =    data 2  ;", "}", "METHOD_END"], "methodName": ["setData2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . date 1     =    date 1  ;", "}", "METHOD_END"], "methodName": ["setDate1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 1     =    number 1  ;", "}", "METHOD_END"], "methodName": ["setNumber1"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "this . number 2     =    number 2  ;", "}", "METHOD_END"], "methodName": ["setNumber2"], "fileName": "org.hibernate.envers.test.performance.complex.RootEntity"}, {"methodBody": ["METHOD_START", "{", "Assert . assertEquals ( expected . size (  )  ,    actual . size (  )  )  ;", "Iterator < T >    it    =    actual . iterator (  )  ;", "for    ( T   obj    :    actual )     {", "Assert . assertEquals ( obj ,    it . next (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertCollectionsEqual"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "if    (  ( list . size (  )  )     !  =     ( objects . length )  )     {", "return   false ;", "}", "for    ( T   obj    :    objects )     {", "if    (  !  ( list . contains ( obj )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["checkCollection"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "return   TestTools . extractModProperties ( persistentClass ,     \"  _ MOD \"  )  ;", "}", "METHOD_END"], "methodName": ["extractModProperties"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    result    =    new   HashSet < String >  (  )  ;", "final   Iterator   iterator    =    persistentClass . getPropertyIterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "final   Property   property    =     (  ( Property )     ( iterator . next (  )  )  )  ;", "final   String   propertyName    =    property . getName (  )  ;", "if    ( propertyNamdsWith ( suffix )  )     {", "result . add ( propertyName )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["extractModProperties"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "final   List < Integer >    result    =    new   ArrayList < Integer >  (  )  ;", "for    ( Object   queryResult    :    queryResults )     {", "result . add (  (  ( SequenceIdRevisionEntity )     (  (  ( Object [  ]  )     ( queryResult )  )  [  1  ]  )  )  . getId (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["extractRevisionNumbers"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( objects )  ;", "}", "METHOD_END"], "methodName": ["makeList"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "final   Map < Object ,    Object >    ret    =    new   HashMap < Object ,    Object >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( objects . length )  ;    i    +  =     2  )     {", "ret . put ( objects [ i ]  ,    objects [  ( i    +     1  )  ]  )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeMap"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "final   Set < T >    ret    =    new   HashSet < T >  (  )  ;", "for    ( T   o    :    objects )     {", "ret . add ( o )  ;", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["makeSet"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "return   new   TestTools . MashMapBuilderImpl < K ,    E >  (  )  ;", "}", "METHOD_END"], "methodName": ["mapBuilder"], "fileName": "org.hibernate.envers.test.tools.TestTools"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "address    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( address . id )  )     {", "return   false ;", "}", "if    (  ( flatNumber )     !  =    null    ?     !  ( flatNumber . equals ( address . flatNumber )  )     :     ( address . flatNumber )     !  =    null )     {", "return   false ;", "}", "if    (  ( houseNumber )     !  =    null    ?     !  ( houseNumber . equals ( address . houseNumber )  )     :     ( address . houseNumber )     !  =    null )     {", "return   false ;", "}", "if    (  ( streetName )     !  =    null    ?     !  ( streetName . equals ( address . streetName )  )     :     ( address . streetName )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return   flatNumber ;", "}", "METHOD_END"], "methodName": ["getFlatNumber"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return   houseNumber ;", "}", "METHOD_END"], "methodName": ["getHouseNumber"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return   persons ;", "}", "METHOD_END"], "methodName": ["getPersons"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return   streetName ;", "}", "METHOD_END"], "methodName": ["getStreetName"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( streetName )     !  =    null    ?    streetName . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( houseNumber )     !  =    null    ?    houseNumber . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( flatNumber )     !  =    null    ?    flatNumber . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "this . flatNumber    =    flatNumber ;", "}", "METHOD_END"], "methodName": ["setFlatNumber"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "this . houseNumber    =    houseNumber ;", "}", "METHOD_END"], "methodName": ["setHouseNumber"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "this . persons    =    persons ;", "}", "METHOD_END"], "methodName": ["setPersons"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "this . streetName    =    streetName ;", "}", "METHOD_END"], "methodName": ["setStreetName"], "fileName": "org.hibernate.envers.test.various.Address"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( Long )     ( entityManager . createQuery (  \" select   count ( a )    from   Address   a \"  )  . getSingleResult (  )  )  )     +     (  ( Long )     ( entityManager . createQuery (  \" select   count ( p )    from   Person   p \"  )  . getSingleResult (  )  )  )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["hasData"], "fileName": "org.hibernate.envers.test.various.HsqlTest"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    configurationOverrides    =    new   HashMap < String ,    String >  (  )  ;", "EntityManagerFactory   emf    =    Persistence . createEntityManagerFactory (  \" ConsolePU \"  ,    configurationOverrides )  ;", "EntityManager   entityManager    =    emf . createEntityManager (  )  ;", "HsqlTest . populateTestData ( entityManager )  ;", "entityManager . getTransaction (  )  . begin (  )  ;", "Session   sesion    =     (  ( Session )     ( entityManager . getDelegate (  )  )  )  ;", "System . out . println ( sesion . createQuery (  (  \" select   e   from   demo . Person _ versions   e    \"     +     (  (  (  (  \" where    \"     +     \" e . originalId .  _ revision . id    =  \"  )     +     \"  ( select   max ( e 2  . originalId .  _ revision . id )     \"  )     +     \" from   demo . Person _ versions   e 2     \"  )     +     \" where   e . originalId . id    =     : p 0  )     \"  )  )  )  . setParameter (  \" p 0  \"  ,     1  )  . list (  )  )  ;", "entityManager . getTransaction (  )  . commit (  )  ;", "entityManager . close (  )  ;", "emf . close (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.hibernate.envers.test.various.HsqlTest"}, {"methodBody": ["METHOD_START", "{", "entityManager . getTransaction (  )  . begin (  )  ;", "if    (  !  (  . hasData ( entityManager )  )  )     {", "Person   p 1     =    new   Person (  )  ;", "Address   a 1     =    new   Address (  )  ;", "p 1  . setName (  \" James \"  )  ;", "p 1  . setSurname (  \" Bond \"  )  ;", "p 1  . setAddress ( a 1  )  ;", "a 1  . setStreetName (  \" MI 6  \"  )  ;", "a 1  . setHouseNumber (  1  8  )  ;", "a 1  . setFlatNumber (  2  5  )  ;", "a 1  . setPersons ( new   HashSet < Person >  (  )  )  ;", "a 1  . getPersons (  )  . add ( p 1  )  ;", "entityManager . persist ( a 1  )  ;", "entityManager . persist ( p 1  )  ;", "System . out . println (  \" The   DB   was   populated   with   example   data .  \"  )  ;", "}", "entityManager . getTransaction (  )  . commit (  )  ;", "}", "METHOD_END"], "methodName": ["populateTestData"], "fileName": "org.hibernate.envers.test.various.HsqlTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "person    =     (  (  )     ( o )  )  ;", "if    (  ( id )     !  =     ( person . id )  )     {", "return   false ;", "}", "if    (  ( name )     !  =    null    ?     !  ( name . equals ( person . name )  )     :     ( person . name )     !  =    null )     {", "return   false ;", "}", "if    (  ( surname )     !  =    null    ?     !  ( surname . equals ( person . surname )  )     :     ( person . surname )     !  =    null )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "return   surname ;", "}", "METHOD_END"], "methodName": ["getSurname"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "int   result ;", "result    =    id ;", "result    =     (  3  1     *    result )     +     (  ( name )     !  =    null    ?    name . hashCode (  )     :     0  )  ;", "result    =     (  3  1     *    result )     +     (  ( sume )     !  =    null    ?    sume . hashCode (  )     :     0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "this . address    =    address ;", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "this . surname    =    surname ;", "}", "METHOD_END"], "methodName": ["setSurname"], "fileName": "org.hibernate.envers.test.various.Person"}, {"methodBody": ["METHOD_START", "{", "return   obj 1  ;", "}", "METHOD_END"], "methodName": ["getFirst"], "fileName": "org.hibernate.envers.tools.Pair"}, {"methodBody": ["METHOD_START", "{", "return   obj 2  ;", "}", "METHOD_END"], "methodName": ["getSecond"], "fileName": "org.hibernate.envers.tools.Pair"}, {"methodBody": ["METHOD_START", "{", "return   new   Pair <  >  ( obj 1  ,    obj 2  )  ;", "}", "METHOD_END"], "methodName": ["make"], "fileName": "org.hibernate.envers.tools.Pair"}]