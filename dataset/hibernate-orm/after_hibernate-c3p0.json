[{"methodBody": ["METHOD_START", "{", "stop (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.hibernate.c3p0.internal.C3P0ConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "final   String   peeledC 3 p 0 Key    =    c 3 p 0 StyleKey . substring (  5  )  ;", "c 3 p . put ( peeledC 3 p 0 Key ,    String . valueOf ( value )  . trim (  )  )  ;", "if    ( hibp . containsKey ( c 3 p 0 StyleKey )  )     {", "warnPropertyConflict ( tyleKey ,    c 3 p 0 StyleKey )  ;", "}", "final   String   longC 3 p 0 StyleKey    =     \"  \"     +    c 3 p 0 StyleKey ;", "if    ( hibp . containsKey ( longC 3 p 0 StyleKey )  )     {", "warnPropertyConflict ( tyleKey ,    longC 3 p 0 StyleKey )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setOverwriteProperty"], "fileName": "org.hibernate.c3p0.internal.C3P0ConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "C 3 P 0 ConnectionProvider . LOG . bothHibernateAndC 3 p 0 StylesSet ( hibernateStyle ,    c 3 p 0 Style )  ;", "}", "METHOD_END"], "methodName": ["warnPropertyConflict"], "fileName": "org.hibernate.c3p0.internal.C3P0ConnectionProvider"}, {"methodBody": ["METHOD_START", "{", "JdbcServices   jdbcServices    =    serviceRegistry (  )  . getService ( JdbcServices . class )  ;", "ConnectionProviderJdbcConnectionAccess   connectionAccess    =    assertTyping ( ConnectionProviderJdbcConnectionAccess . class ,    jdbcServices . getBootstrapJdbcConnectionAccess (  )  )  ;", "assertTrue (  (  ( connectionAccess . getConnectionProvider (  )  )    instanceof    )  )  ;", "}", "METHOD_END"], "methodName": ["testC3P0isDefaultWhenThereIsC3P0Properties"], "fileName": "org.hibernate.test.c3p0.C3P0ConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "MBeanServer   mBeanServer    =    ManagementFactory . getPlatformMBeanServer (  )  ;", "Set < ObjectName >    set    =    mBeanServer . queryNames ( null ,    null )  ;", "boolean   mbeanfound    =    false ;", "for    ( ObjectName   obj    :    set )     {", "if    (  ( obj . getKeyPropertyListString (  )  . indexOf (  \" PooledDataSource \"  )  )     >     0  )     {", "mbeanfound    =    true ;", "int   actual _ minPoolSize    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" minPoolSize \"  )  )  )  ;", "assertEquals (  5  0  ,    actual _ minPoolSize )  ;", "int   actual _ initialPoolSize    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" initialPoolSize \"  )  )  )  ;", "assertEquals (  5  0  ,    actual _ initialPoolSize )  ;", "int   actual _ maxPoolSize    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" maxPoolSize \"  )  )  )  ;", "assertEquals (  8  0  0  ,    actual _ maxPoolSize )  ;", "int   actual _ maxStatements    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" maxStatements \"  )  )  )  ;", "assertEquals (  5  0  ,    actual _ maxStatements )  ;", "int   actual _ maxIdleTime    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" maxIdleTime \"  )  )  )  ;", "assertEquals (  3  0  0  ,    actual _ maxIdleTime )  ;", "int   actual _ idleTestPeriod    =     (  ( Integer )     ( mBeanServer . getAttribute ( obj ,     \" idleTestPeriod \"  )  )  )  ;", "assertEquals (  3  0  0  0  ,    actual _ idleTestPeriod )  ;", "break ;", "}", "}", "assertTrue (  \" PooledDataSource   BMean   not   found ,    please   verify   version   of   c 3 p 0  \"  ,    mbeanfound )  ;", "}", "METHOD_END"], "methodName": ["testHHH6635"], "fileName": "org.hibernate.test.c3p0.C3P0ConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "C 3 P 0 ConnectionProvider   provider    =    new   C 3 P 0 ConnectionProvider (  )  ;", "try    {", "Properties   configuration    =    new   Properties (  )  ;", "configuration . setProperty ( ISOLATION ,     \"  \"  )  ;", "provider . configure ( configuration )  ;", "}    finally    {", "provider . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testIsolationPropertyCouldBeEmpty"], "fileName": "org.hibernate.test.c3p0.C3P0ConnectionProviderTest"}, {"methodBody": ["METHOD_START", "{", "ssr    =    new   StandardServiceRegistryBuilder (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.hibernate.test.c3p0.C3p0TransactionIsolationConfigTest"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.test.c3p0.IrrelevantEntity"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.test.c3p0.IrrelevantEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.test.c3p0.IrrelevantEntity"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.test.c3p0.IrrelevantEntity"}, {"methodBody": ["METHOD_START", "{", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . doWork (  (    connection )     -  >     {", "String   schema    =    connection . getSchema (  )  ;", "assertNotNull ( schema )  ;", "}  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testJdbc41"], "fileName": "org.hibernate.test.c3p0.JdbcCompatibilityTest"}, {"methodBody": ["METHOD_START", "{", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "IrrelevantEntity   entity    =    new   IrrelevantEntity (  )  ;", "entity . setName ( getClass (  )  . getName (  )  )  ;", "session . persist ( entity )  ;", "}", "session . flush (  )  ;", "session . doWork (  (    connection )     -  >     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . executeUpdate (  \" DELETE   FROM   IrrelevantEntity \"  )  ;", "assertEquals (  5  ,    statement . getLargeUpdateCount (  )  )  ;", "}", "}  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testJdbc42"], "fileName": "org.hibernate.test.c3p0.JdbcCompatibilityTest"}, {"methodBody": ["METHOD_START", "{", "configuration . setProperty ( CONNECTION _ PROVIDER ,    C 3 P 0 ConnectionProvider . class . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.hibernate.test.c3p0.OracleSQLCallableStatementProxyTest"}, {"methodBody": ["METHOD_START", "{", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "session . doWork (  (    connection )     -  >     {", "Statement   statement    =    null ;", "try    {", "statement    =    connection . creat (  )  ;", "statement . executeUpdate (  (  \" CREATE   OR   REPLACE   FUNCTION   fn _ person    (     \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \"          personId   IN   NUMBER )     \"     +     \"             RETURN   SYS _ REFCURSOR    \"  )     +     \" IS    \"  )     +     \"             persons   SYS _ REFCURSOR ;     \"  )     +     \" BEGIN    \"  )     +     \"          OPEN   persons   FOR    \"  )     +     \"                         SELECT    \"  )     +     \"                                     p . id   AS    \\  \" p . id \\  \"  ,     \"  )     +     \"                                     p . name   AS    \\  \" p . name \\  \"  ,     \"  )     +     \"                                     p . nickName   AS    \\  \" p . nickName \\  \"     \"  )     +     \"                      FROM   person   p    \"  )     +     \"                      WHERE   p . id    =    personId ;     \"  )     +     \"          RETURN   persons ;     \"  )     +     \" END ;  \"  )  )  )  ;", "}    catch    (    ignore )     {", "}    finally    {", "if    ( statement    !  =    null )     {", "statement . close (  )  ;", "}", "}", "}  )  ;", "}  )  ;", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "Person   person 1     =    new   Person (  )  ;", "person 1  . setId (  1 L )  ;", "person 1  . setName (  \" John   Doe \"  )  ;", "person 1  . setNickName (  \" JD \"  )  ;", "session . persist ( person 1  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.hibernate.test.c3p0.OracleSQLCallableStatementProxyTest"}, {"methodBody": ["METHOD_START", "{", "doInHibernate ( this :  : sessionFactory ,     (    session )     -  >     {", "List < Object [  ]  >    persons    =    session . createNamedQuery (  \" getPerson \"  )  . setParameter (  1  ,     1 L )  . getResultList (  )  ;", "assertEquals (  1  ,    persons . size (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testStoredProcedureOutParameter"], "fileName": "org.hibernate.test.c3p0.OracleSQLCallableStatementProxyTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    openSession (  )  ;", "session . beginTransaction (  )  ;", "IrrelevantEntity   irrelevantEntity    =    new   IrrelevantEntity (  )  ;", "irrelevantEntity . setName (  \" valid    1  \"  )  ;", "session . save ( irrelevantEntity )  ;", "irrelevantEntity    =    new   IrrelevantEntity (  )  ;", "session . save ( irrelevantEntity )  ;", "try    {", "session . flush (  )  ;", "Assert . fail (  \" Validation   exception   did   not   occur \"  )  ;", "}    catch    ( Exception   e )     {", "session . getTransaction (  )  . rollback (  )  ;", "}", "session . close (  )  ;", "session    =    openSession (  )  ;", "session . beginTransaction (  )  ;", "irrelevantEntity    =    new   IrrelevantEntity (  )  ;", "irrelevantEntity . setName (  \" valid    2  \"  )  ;", "session . save ( irrelevantEntity )  ;", "session . flush (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "session    =    openSession (  )  ;", "session . beginTransaction (  )  ;", "Criteria   criteria    =    session . creCriteria ( IrrelevantEntity . class )  ;", "List   results    =    criteria . list (  )  ;", "session . getTransaction (  )  . commit (  )  ;", "session . close (  )  ;", "Assert . assertEquals (  1  ,    results . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testStatementCaching"], "fileName": "org.hibernate.test.c3p0.StatementCacheTest"}]