[{"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.hibernate.wildfly.integrationtest.AuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.hibernate.wildfly.integrationtest.AuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.hibernate.wildfly.integrationtest.AuditedEntity"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.hibernate.wildfly.integrationtest.AuditedEntity"}, {"methodBody": ["METHOD_START", "{", "return   ShrinkWrap . create ( WebArchive . class )  . addClass ( AuditedEntity . class )  . addAsWebInfResource ( INSTANCE ,     \" beans . xml \"  )  . addAsWebInfResource (  \" jboss - deployment - structure . xml \"  )  . addAsResource ( new   StringAsset ( HibernateEnversOnWildflyTest . persistenceXml (  )  . exportAsString (  )  )  ,     \" META - INF / persistence . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createDeployment"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateEnversOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "return   Descriptors . create ( PersistenceDescriptor . class )  . version (  \"  2  .  1  \"  )  . createPersistenceUnit (  )  . name (  \" primary \"  )  . transactionType (  _ JTA )  . jtaDataSource (  \" java : jboss / datasources / ExampleDS \"  )  . getOrCreateProperties (  )  . createProperty (  )  . name (  \" jboss . as . jpa . providerModule \"  )  . value (  (  \" hibernate :  \"     +     ( HibernateEnversOnWildflyTest . ORM _ MINOR _ VERSION )  )  )  . up (  )  . createProperty (  )  . name (  \" hibernate . hbm 2 ddl . auto \"  )  . value (  \" create - drop \"  )  . up (  )  . createProperty (  )  . name (  \" hibernate . allow _ update _ outside _ transaction \"  )  . value (  \" true \"  )  . up (  )  . up (  )  . up (  )  ;", "}", "METHOD_END"], "methodName": ["persistenceXml"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateEnversOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "userTransaction . begin (  )  ;", "entityManager . joinTransaction (  )  ;", "AuditedEntity   entity    =    new   AuditedEntity (  1  ,     \" Marco   Polo \"  )  ;", "entityManager . persist ( entity )  ;", "userTransaction . commit (  )  ;", "userTransaction . begin (  )  ;", "entityManager . joinTransaction (  )  ;", "entity . setName (  \" George   Washington \"  )  ;", "entityManager . merge ( entity )  ;", "userTransaction . commit (  )  ;", "entityManager . clear (  )  ;", "userTransaction . begin (  )  ;", "final   AuditReader   auditReader    =    AuditReaderFactory . get ( entityManager )  ;", "assertEquals ( Arrays . asList (  1  ,     2  )  ,    auditReader . getRevisions ( AuditedEntity . class ,     1  )  )  ;", "userTransaction . commit (  )  ;", "}", "METHOD_END"], "methodName": ["testEnversCompatibility"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateEnversOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "return   ShrinkWrap . create ( WebArchive . class )  . addClass ( Kryptonite . class )  . addAsWebInfResource ( INSTANCE ,     \" beans . xml \"  )  . addAsWebInfResource (  \" jboss - deployment - structure . xml \"  )  . addAsResource ( new   StringAsset ( HibernateModulesOnWildflyTest . persistenceXml (  )  . exportAsString (  )  )  ,     \" META - INF / persistence . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createDeployment"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateModulesOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "return   Descriptors . create ( PersistenceDescriptor . class )  . version (  \"  2  .  1  \"  )  . createPersistenceUnit (  )  . name (  \" primary \"  )  . transactionType (  _ JTA )  . jtaDataSource (  \" java : jboss / datasources / ExampleDS \"  )  . getOrCreateProperties (  )  . createProperty (  )  . name (  \" jboss . as . jpa . providerModule \"  )  . value (  (  \" hibernate :  \"     +     ( HibernateModulesOnWildflyTest . ORM _ MINOR _ VERSION )  )  )  . up (  )  . createProperty (  )  . name (  \" hibernate . hbm 2 ddl . auto \"  )  . value (  \" create - drop \"  )  . up (  )  . createProperty (  )  . name (  \" hibernate . allow _ update _ outside _ transaction \"  )  . value (  \" true \"  )  . up (  )  . up (  )  . up (  )  ;", "}", "METHOD_END"], "methodName": ["persistenceXml"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateModulesOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    entityManager . unwrap ( Session . class )  ;", "Kryptonite   kryptonite 1     =    new   Kryptonite (  )  ;", "kryptonite 1  . id    =     1 L ;", "kryptonite 1  . descrip    =     \" Some   Kryptonite \"  ;", "session . persist ( kryptonite 1  )  ;", "Kryptonite   loaded    =    session . find ( Kryptonite . class ,     1 L )  ;", "assertThat ( loaded . descrip ,    equalTo (  \" Some   Kryptonite \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldUseHibernateOrm52"], "fileName": "org.hibernate.wildfly.integrationtest.HibernateModulesOnWildflyTest"}, {"methodBody": ["METHOD_START", "{", "return   ShrinkWrap . create ( WebArchive . class )  . addClass ( Kryptonite . class )  . addAsWebInfResource ( INSTANCE ,     \" beans . xml \"  )  . addAsWebInfResource (  \" jboss - deployment - structure . xml \"  )  . addAsResource ( new   StringAsset ( TransactionRollbackTest . persistenceXml (  )  . exportAsString (  )  )  ,     \" META - INF / persistence . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["createDeployment"], "fileName": "org.hibernate.wildfly.integrationtest.TransactionRollbackTest"}, {"methodBody": ["METHOD_START", "{", "return   Descriptors . create ( PersistenceDescriptor . class )  . version (  \"  2  .  1  \"  )  . createPersistenceUnit (  )  . name (  \" primary \"  )  . transactionType (  _ RESOURCE _ LOCAL )  . jtaDataSource (  \" java : jboss / datasources / ExampleDS \"  )  . getOrCreateProperties (  )  . createProperty (  )  . name (  \" jboss . as . jpa . providerModule \"  )  . value (  (  \" hibernate :  \"     +     ( TransactionRollbackTest . ORM _ MINOR _ VERSION )  )  )  . up (  )  . createProperty (  )  . name (  \" hibernate . hbm 2 ddl . auto \"  )  . value (  \" create - drop \"  )  . up (  )  . createProperty (  )  . name (  \" hibernate . allow _ update _ outside _ transaction \"  )  . value (  \" true \"  )  . up (  )  . up (  )  . up (  )  ;", "}", "METHOD_END"], "methodName": ["persistenceXml"], "fileName": "org.hibernate.wildfly.integrationtest.TransactionRollbackTest"}, {"methodBody": ["METHOD_START", "{", "EntityTransaction   transaction    =    entityManager . getTransaction (  )  ;", "final   TransactionImplementor   hibernateTransaction    =     (  ( TransactionImplementor )     ( transaction )  )  ;", "transaction . begin (  )  ;", "hibernateTransaction . markRollbackOnly (  )  ;", "transaction . rollback (  )  ;", "assertFalse ( transaction . isActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMarkRollbackOnlyAnActiveTransaction"], "fileName": "org.hibernate.wildfly.integrationtest.TransactionRollbackTest"}, {"methodBody": ["METHOD_START", "{", "EntityTransaction   transaction    =    entityManager . getTransaction (  )  ;", "final   TransactionImplementor   hibernateTransaction    =     (  ( TransactionImplementor )     ( transaction )  )  ;", "hibernateTransaction . markRollbackOnly (  )  ;", "transaction . rollback (  )  ;", "assertFalse ( transaction . isActive (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMarkRollbackOnlyAnUnactiveTransaction"], "fileName": "org.hibernate.wildfly.integrationtest.TransactionRollbackTest"}]