[{"methodBody": ["METHOD_START", "{", "throw   new   CacheException (  (  (  \" On - the - fly   creation   of   JCache   Cache   objects   is   not   supported    [  \"     +    regionName )     +     \"  ]  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createCache"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "return   cacheManager ;", "}", "METHOD_END"], "methodName": ["getCacheManager"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "verifyStarted (  )  ;", "assert    !  ( INSTANCE . isQualified ( unqualifiedRegionName ,    sess . getSessOptions (  )  )  )  ;", "final   String   qualifiedRegionName    =    INSTANCE . qualify ( unqualifiedRegionName ,    sess . getSessOptions (  )  )  ;", "final   Cache   cache    =    cacheManager . getCache ( qualifiedRegionName )  ;", "if    ( cache    =  =    null )     {", "return   createCache ( qualifiedRegionName )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getOrCreateCache"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "return    ( super . isStarted (  )  )     &  &     (  ( cacheManager )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["isStarted"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isStarted (  )  )  )     {", "throw   new   IllegalStateException (  \" Cannot   load   resource   through   a   non - started    \"  )  ;", "}", "return    . loadResource ( configurationResourceName ,    getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["loadResource"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "URL   url    =    settings . getServiceRegistry (  )  . getService ( ClassLoaderService . class )  . locateResource ( configurationResourceName )  ;", "if    ( url    =  =    null )     {", "final   ClassLoader   standardClassloader    =    Thread . currentThread (  )  . getContextClassLoader (  )  ;", "if    ( standardClassloader    !  =    null )     {", "url    =    standardClassloader . getResource ( configurationResourceName )  ;", "}", "if    ( url    =  =    null )     {", "url    =     . class . getResource ( configurationResourceName )  ;", "}", "if    ( url    =  =    null )     {", "try    {", "url    =    new   URL ( configurationResourceName )  ;", "}    catch    ( MalformedURLException   e )     {", "}", "}", "}", "if    (  . LOG . isDebugEnabled (  )  )     {", ". LOG . debugf (  \" Creating   EhCacheRegionFactory   from   a   specified   resource :     % s .       Resolved   to   URL :     % s \"  ,    configurationResourceName ,    url )  ;", "}", "if    ( url    =  =    null )     {", "EhCacheMessageLogger . INSTANCE . unableToLoadConfiguration ( configurationResourceName )  ;", "}", "return   url ;", "}", "METHOD_END"], "methodName": ["loadResource"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "final   Object   explicitCacheManager    =    properties . get ( ConfigSettings . CACHE _ MANAGER )  ;", "if    ( explicitCacheManager    !  =    null )     {", "return   useExplicitCacheManager ( settings ,    explicitCacheManager )  ;", "}", "return    . useNormalCacheManager ( settings ,    properties )  ;", "}", "METHOD_END"], "methodName": ["resolveCacheManager"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( setting   instanceof   CacheManager )     {", "return    (  ( CacheManager )     ( setting )  )  ;", "}", "final   Class <  ?    extends   CacheManager >    ManagerClass ;", "if    ( setting   instanceof   Class )     {", "ManagerClass    =     (  ( Class <  ?    extends   CacheManager >  )     ( setting )  )  ;", "} else    {", "ManagerClass    =    settings . getServiceRegistry (  )  . getService ( ClassLoaderService . class )  . classForName ( setting . toString (  )  )  ;", "}", "try    {", "return   ManagerClass . newInstance (  )  ;", "}    catch    ( InstantiationException    |    IllegalAccessException   e )     {", "throw   new   CacheException (  (  \" Could   not   use   explicit   CacheManager    :     \"     +    setting )  )  ;", "}", "}", "METHOD_END"], "methodName": ["useExplicitCacheManager"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   configurationResourceName    =    null ;", "if    ( properties    !  =    null )     {", "configurationResourceName    =     (  ( String )     ( properties . get ( ConfigSettings . EHCACHE _ CONFIGURATION _ RESOURCE _ NAME )  )  )  ;", "}", "if    (  ( configurationResourceName    =  =    null )     |  |     (  ( configurationResourceName . length (  )  )     =  =     0  )  )     {", "final   Configuration   configuration    =    ConfigurationFactory . parseConfiguration (  )  ;", "HibernateEhcacheUtils . setCacheManagerNameIfNeeded ( settings ,    configuration ,    properties )  ;", "return   new   net . sf . ehcache . CacheManager ( configuration )  ;", "} else    {", "final   URL   url    =     . loadResource ( configurationResourceName ,    settings )  ;", "final   Configuration   configuration    =    HibernateEhcacheUtils . loadAndCorrectConfiguration ( url )  ;", "HibernateEhcacheUtils . setCacheManagerNameIfNeeded ( settings ,    configuration ,    properties )  ;", "return   new   net . sf . ehcache . CacheManager ( configuration )  ;", "}", "}    catch    ( net . sf . ehcache   e )     {", "if    ( e . getMessage (  )  . startsWith (  (  \" Cannot   parseConfiguration   CacheManager .    Attempt   to   create   a   new   instance   of    \"     +     \" CacheManager   using   the   diskStorePath \"  )  )  )     {", "throw   new   CacheException (  (  (  \" Attempt   to   restart   an   already   started   EhCacheRegionFactory .     \"     +     (  \" Use   sessionFactory . close (  )    between   repeated   calls   to   buildSessionFactory .     \"     +     \" Consider   using   SingletonEhCacheRegionFactory .    Error   from   ehcache   was :     \"  )  )     +     ( e . getMessage (  )  )  )  )  ;", "} else    {", "throw   new   CacheException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["useNormalCacheManager"], "fileName": "org.hibernate.cache.ehcache.internal.EhcacheRegionFactory"}, {"methodBody": ["METHOD_START", "{", "final   Configuration   config    =    ConfigurationFactory . parseConfiguration ( url )  ;", "if    ( config    =  =    null )     {", "return   null ;", "}", "if    (  (  ( config . getDefaultCacheConfiguration (  )  )     !  =    null )     &  &     ( config . getDefaultCacheConfiguration (  )  . isTerracottaClustered (  )  )  )     {", ". setupHibernateTimeoutBehavior ( config . getDefaultCacheConfiguration (  )  . getTerracottaConfiguration (  )  . getNonstopConfiguration (  )  )  ;", "}", "for    ( CacheConfiguration   cacheConfig    :    config . getCacheConfigurations (  )  . values (  )  )     {", "if    ( cacheConfig . isTerracottaClustered (  )  )     {", ". setupHibernateTimeoutBehavior ( cacheConfig . getTerracottaConfiguration (  )  . getNonstopConfiguration (  )  )  ;", "}", "}", "return   config ;", "}", "METHOD_END"], "methodName": ["loadAndCorrectConfiguration"], "fileName": "org.hibernate.cache.ehcache.internal.HibernateEhcacheUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( properties    !  =    null )     {", "final   String   ManagerName    =     (  ( String )     ( properties . get ( ConfigSettings . EHCACHE _ CONFIGURATION _ CACHE _ MANAGER _ NAME )  )  )  ;", "if    ( ManagerName    !  =    null )     {", "configuration . setName ( ManagerName )  ;", "}", "}", "return   configuration ;", "}", "METHOD_END"], "methodName": ["overwriteCacheManagerIfConfigured"], "fileName": "org.hibernate.cache.ehcache.internal.HibernateEhcacheUtils"}, {"methodBody": ["METHOD_START", "{", "HibernateEhcacheUtils . overwriteCacheManagerIfConfigured ( configuration ,    properties )  ;", "if    (  ( configuration . getName (  )  )     =  =    null )     {", "String   sessionFactoryName    =    settings . getSessionFactoryName (  )  ;", "if    ( sessionFactoryName    !  =    null )     {", "configuration . setName ( sessionFactoryName )  ;", "} else    {", "configuration . setName (  (  \" Hibernate    \"     +     ( settings . getUuid (  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setCacheManagerNameIfNeeded"], "fileName": "org.hibernate.cache.ehcache.internal.HibernateEhcacheUtils"}, {"methodBody": ["METHOD_START", "{", "nonstopConfig . getTimeoutBehavior (  )  . setType ( EXCEPTION . getTypeName (  )  )  ;", "}", "METHOD_END"], "methodName": ["setupHibernateTimeoutBehavior"], "fileName": "org.hibernate.cache.ehcache.internal.HibernateEhcacheUtils"}, {"methodBody": ["METHOD_START", "{", "return   cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.hibernate.cache.ehcache.internal.StorageAccessImpl"}, {"methodBody": ["METHOD_START", "{", "final   StandardServiceRegistry   registry    =    new   StandardServiceRegistryBuilder (  )  . applySetting ( CACHE _ REGION _ FACTORY ,     \" ehcache \"  )  . build (  )  ;", "assertThat ( registry . getService ( RegionFactory . class )  ,    instanceOf ( EhcacheRegionFactory . class )  )  ;", "}", "METHOD_END"], "methodName": ["testEhcacheShortName"], "fileName": "org.hibernate.cache.ehcache.test.SmokeTest"}, {"methodBody": ["METHOD_START", "{", "final   StandardServiceRegistry   registry    =    new   StandardServiceRegistryBuilder (  )  . applySetting ( CACHE _ REGION _ FACTORY ,     \" ehcache - singleton \"  )  . build (  )  ;", "assertThat ( registry . getService ( RegionFactory . class )  ,    instanceOf ( SingletonEhcacheRegionFactory . class )  )  ;", "}", "METHOD_END"], "methodName": ["testSingletonEhcacheShortName"], "fileName": "org.hibernate.cache.ehcache.test.SmokeTest"}, {"methodBody": ["METHOD_START", "{", "final   BootstrapServiceRegistry   registry    =    new   BootstrapServiceRegistryBuilder (  )  . build (  )  ;", "final   Collection < Class <  ?    extends   RegionFactory >  >    implementors    =    registry . getService ( StrategySelector . class )  . getRegisteredStrategyImplementors ( RegionFactory . class )  ;", "assertTrue ( implementors . contains ( ERegionFactory . class )  )  ;", "assertTrue ( implementors . contains ( SingletonERegionFactory . class )  )  ;", "}", "METHOD_END"], "methodName": ["testStrategySelectorRegistrations"], "fileName": "org.hibernate.cache.ehcache.test.SmokeTest"}]