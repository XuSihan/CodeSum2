[{"methodBody": ["METHOD_START", "{", "if    (  !  ( GLFW . glfwJoystickPresent ( index )  )  )     {", "manager . disconnected ( this )  ;", "return ;", "}", "FloatBuffer   axes    =    GLFW . glfwGetJoystickAxes ( index )  ;", "if    ( axes    =  =    null )     {", "manager . disconnected ( this )  ;", "return ;", "}", "ByteBuffer   buttons    =    GLFW . glfwGetJoystickButtons ( index )  ;", "if    ( buttons    =  =    null )     {", "manager . disconnected ( this )  ;", "return ;", "}", "ByteBuffer   hats    =    GLFW . glfwGetJoystickHats ( index )  ;", "if    ( hats    =  =    null )     {", "manager . disconnected ( this )  ;", "return ;", "}", "for    ( int   i    =     0  ;    i    <     ( axes . limit (  )  )  ;    i +  +  )     {", "if    (  ( axisState [ i ]  )     !  =     ( axes . get ( i )  )  )     {", "for    ( Listener   listener    :    listeners )     {", "listener . axisMoved ( this ,    i ,    axes . get ( i )  )  ;", "}", "manager . axisChanged ( this ,    i ,    axes . get ( i )  )  ;", "}", "axisState [ i ]     =    axes . get ( i )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( buttons . limit (  )  )  ;    i +  +  )     {", "if    (  ( buttonState [ i ]  )     !  =     (  ( buttons . get ( i )  )     =  =     ( GLFW . GLFW _ PRESS )  )  )     {", "for    ( Listener   listener    :    listeners )     {", "if    (  ( buttons . get ( i )  )     =  =     ( GLFW . GLFW _ PRESS )  )     {", "listener . buttonDown ( this ,    i )  ;", "} else    {", "listener . buttonUp ( this ,    i )  ;", "}", "}", "manager . buttonChanged ( this ,    i ,     (  ( buttons . get ( i )  )     =  =     ( GLFW . GLFW _ PRESS )  )  )  ;", "}", "buttonState [ i ]     =     ( buttons . get ( i )  )     =  =     ( GLFW . GLFW _ PRESS )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( hats . limit (  )  )  ;    i +  +  )     {", "if    (  ( hatState [ i ]  )     !  =     ( hats . get ( i )  )  )     {", "hatState [ i ]     =    hats . get ( i )  ;", "for    ( Listener   listener    :    listeners )     {", "listener . povMoved ( this ,    i ,    getPov ( i )  )  ;", "}", "manager . hatChanged ( this ,    i ,    getPov ( i )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["pollState"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3Controller"}, {"methodBody": ["METHOD_START", "{", "for    ( ControllerListener   listener    :    listeners )     {", "listener . axisMoved ( controller ,    axisCode ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["axisChanged"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ControllerListener   listener    :    listeners )     {", "if    ( value )     {", "listener . buttonDown ( controller ,    buttonCode )  ;", "} else    {", "listener . buttonUp ( controller ,    buttonCode )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["buttonChanged"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}, {"methodBody": ["METHOD_START", "{", "controllers . add ( controller )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "listener . connected ( controller )  ;", "}", "}", "METHOD_END"], "methodName": ["connected"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}, {"methodBody": ["METHOD_START", "{", "controllers . removeValue ( controller ,    true )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "listener . disconnected ( controller )  ;", "}", "}", "METHOD_END"], "methodName": ["disconnected"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ControllerListener   listener    :    listeners )     {", "listener . povMoved ( controller ,    hatCode ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["hatChanged"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =    GLFW . GLFW _ JOYSTICK _  1  ;    i    <     ( GLFW . GLFW _ JOYSTICK _ LAST )  ;    i +  +  )     {", "if    ( GLFW . glfwJoystickPresent ( i )  )     {", "boolean   alreadyUsed    =    false ;", "for    ( int   j    =     0  ;    j    <     ( controllers . size )  ;    j +  +  )     {", "if    (  (  (  (  )     ( controllers . get ( j )  )  )  . index )     =  =    i )     {", "alreadyUsed    =    true ;", "break ;", "}", "}", "if    (  ! alreadyUsed )     {", "controller    =    new    ( this ,    i )  ;", "connected ( controller )  ;", "}", "}", "}", "polledControllers . addAll ( controllers )  ;", "for    ( Controller   controller    :    polledControllers )     {", "(  (  )     ( controller )  )  . pollState (  )  ;", "}", "polledControllers . clear (  )  ;", "}", "METHOD_END"], "methodName": ["pollState"], "fileName": "com.badlogic.gdx.controllers.lwjgl3.Lwjgl3ControllerManager"}]