[{"methodBody": ["METHOD_START", "{", "return    (  (  ( a    <  <     2  4  )     |     ( b    <  <     1  6  )  )     |     ( c    <  <     8  )  )     |    d ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeType"}, {"methodBody": ["METHOD_START", "{", "new   SharedLibraryLoader (  )  . load (  \" gdx - freetype \"  )  ;", "long   address    =    FreeType . initFreeTypeJni (  )  ;", "if    ( address    =  =     0  )", "throw   new   utils . GdxRuntimeException (  (  \" Couldn ' t   initialize   FreeType   library ,    FreeType   error   code :     \"     +     ( FreeType . getLastErrorCode (  )  )  )  )  ;", "else", "return   new   FreeType . Library ( address )  ;", "}", "METHOD_END"], "methodName": ["initFreeType"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeType"}, {"methodBody": ["METHOD_START", "{", "return    (  ( value    +     6  3  )     &     (  -  6  4  )  )     >  >     6  ;", "}", "METHOD_END"], "methodName": ["toInt"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeType"}, {"methodBody": ["METHOD_START", "{", "int   faceFlags    =    face . getFaceFlags (  )  ;", "if    (  (  ( faceFlags    &     (  . FT _ FACE _ FLAG _ FIXED _ SIZES )  )     =  =     (  . FT _ FACE _ FLAG _ FIXED _ SIZES )  )     &  &     (  ( faceFlags    &     (  . FT _ FACE _ FLAG _ HORIZONTAL )  )     =  =     (  . FT _ FACE _ FLAG _ HORIZONTAL )  )  )     {", "if    ( loadChar (  3  2  )  )     {", ". GlyphSlot   slot    =    face . getGlyph (  )  ;", "if    (  ( slot . getFormat (  )  )     =  =     1  6  5  1  0  7  8  2  5  9  )     {", "bitmapped    =    true ;", "}", "}", "}", "return   bitmapped ;", "}", "METHOD_END"], "methodName": ["checkForBitmapFont"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "boolean   missing    =     (  ( face . getCharIndex ( c )  )     =  =     0  )     &  &     ( c    !  =     0  )  ;", "if    ( missing )", "return   null ;", "if    (  !  ( loadChar ( c ,    getLoadingFlags ( parameter )  )  )  )", "return   null ;", "FreeType . GlyphSlot   slot    =    face . getGlyph (  )  ;", "FreeType . Glyph   mainGlyph    =    slot . getGlyph (  )  ;", "try    {", "mainGlyph . toBitmap (  ( parameter . mono    ?    FreeType . FT _ RENDER _ MODE _ MONO    :    FreeType . FT _ RENDER _ MODE _ NORMAL )  )  ;", "}    catch    ( GdxRuntimeException   e )     {", "mainGlyph . dispose (  )  ;", "app . log (  \"  \"  ,     (  \" Couldn ' t   render   char :     \"     +    c )  )  ;", "return   null ;", "}", "FreeType . Bitmap   mainBitmap    =    mainGlyph . getBitmap (  )  ;", "Pixmap   mainPixmap    =    mainBitmap . getPixmap ( RGBA 8  8  8  8  ,    parameter . color ,    parameter . gamma )  ;", "if    (  (  ( mainBitmap . getWidth (  )  )     !  =     0  )     &  &     (  ( mainBitmap . getRows (  )  )     !  =     0  )  )     {", "int   offsetX    =     0  ;", "int   offsetY    =     0  ;", "if    (  ( parameter . borderWidth )     >     0  )     {", "int   top    =    mainGlyph . getTop (  )  ;", "int   left    =    mainGlyph . getLeft (  )  ;", "FreeType . Glyph   borderGlyph    =    slot . getGlyph (  )  ;", "borderGlyph . strokeBorder ( stroker ,    false )  ;", "borderGlyph . toBitmap (  ( parameter . mono    ?    FreeType . FT _ RENDER _ MODE _ MONO    :    FreeType . FT _ RENDER _ MODE _ NORMAL )  )  ;", "offsetX    =    left    -     ( borderGlyph . getLeft (  )  )  ;", "offsetY    =     -  ( top    -     ( borderGlyph . getTop (  )  )  )  ;", "FreeType . Bitmap   borderBitmap    =    borderGlyph . getBitmap (  )  ;", "Pixmap   borderPixmap    =    borderBitmap . getPixmap ( RGBA 8  8  8  8  ,    parameter . borderColor ,    parameter . borderGamma )  ;", "for    ( int   i    =     0  ,    n    =    parameter . renderCount ;    i    <    n ;    i +  +  )", "borderPixmap . drawPixmap ( mainPixmap ,    offsetX ,    offsetY )  ;", "mainPixmap . dispose (  )  ;", "mainGlyph . dispose (  )  ;", "mainPixmap    =    borderPixmap ;", "mainGlyph    =    borderGlyph ;", "}", "if    (  (  ( parameter . shadowOffsetX )     !  =     0  )     |  |     (  ( parameter . shadowOffsetY )     !  =     0  )  )     {", "int   mainW    =    mainPixmap . getWidth (  )  ;", "int   mainH    =    mainPixmap . getHeight (  )  ;", "int   shadowOffsetX    =    Math . max ( parameter . shadowOffsetX ,     0  )  ;", "int   shadowOffsetY    =    Math . max ( parameter . shadowOffsetY ,     0  )  ;", "int   shadowW    =    mainW    +     ( Math . abs ( parameter . shadowOffsetX )  )  ;", "int   shadowH    =    mainH    +     ( Math . abs ( parameter . shadowOffsetY )  )  ;", "Pixmap   shadowPixmap    =    new   Pixmap ( shadowW ,    shadowH ,    mainPixmap . getFormat (  )  )  ;", "Color   shadowColor    =    parameter . shadowColor ;", "float   a    =    shadowColor . a ;", "if    ( a    !  =     0  )     {", "byte   r    =     (  ( byte )     (  ( shadowColor . r )     *     2  5  5  )  )  ;", "byte   g    =     (  ( byte )     (  ( shadowColor . g )     *     2  5  5  )  )  ;", "byte   b    =     (  ( byte )     (  ( shadowColor . b )     *     2  5  5  )  )  ;", "ByteBuffer   mainPixels    =    mainPixmap . getPixels (  )  ;", "ByteBuffer   shadowPixels    =    shadowPixmap . getPixels (  )  ;", "for    ( int   y    =     0  ;    y    <    mainH ;    y +  +  )     {", "int   shadowRow    =     ( shadowW    *     ( y    +    shadowOffsetY )  )     +    shadowOffsetX ;", "for    ( int   x    =     0  ;    x    <    mainW ;    x +  +  )     {", "int   mainPixel    =     (  ( mainW    *    y )     +    x )     *     4  ;", "byte   mainA    =    mainPixels . get (  ( mainPixel    +     3  )  )  ;", "if    ( mainA    =  =     0  )", "continue ;", "int   shadowPixel    =     ( shadowRow    +    x )     *     4  ;", "shadowPixels . put ( shadowPixel ,    r )  ;", "shadowPixels . put (  ( shadowPixel    +     1  )  ,    g )  ;", "shadowPixels . put (  ( shadowPixel    +     2  )  ,    b )  ;", "shadowPixels . put (  ( shadowPixel    +     3  )  ,     (  ( byte )     (  ( mainA    &     2  5  5  )     *    a )  )  )  ;", "}", "}", "}", "for    ( int   i    =     0  ,    n    =    parameter . renderCount ;    i    <    n ;    i +  +  )", "shadowPixmap . drawPixmap ( mainPixmap ,    Math . max (  (  -  ( parameter . shadowOffsetX )  )  ,     0  )  ,    Math . max (  (  -  ( parameter . shadowOffsetY )  )  ,     0  )  )  ;", "mainPixmap . dispose (  )  ;", "mainPixmap    =    shadowPixmap ;", "} else", "if    (  ( parameter . borderWidth )     =  =     0  )     {", "for    ( int   i    =     0  ,    n    =     ( parameter . renderCount )     -     1  ;    i    <    n ;    i +  +  )", "mainPixmap . drawPixmap ( mainPixmap ,     0  ,     0  )  ;", "}", "}", "FreeType . GlyphMetrics   metrics    =    slot . getMetrics (  )  ;", "Glyph   glyph    =    new   Glyph (  )  ;", "glyph . id    =    c ;", "glyph . width    =    mainPixmap . getWidth (  )  ;", "glyph . height    =    mainPixmap . getHeight (  )  ;", "glyph . xoffset    =    mainGlyph . getLeft (  )  ;", "glyph . yoffset    =     ( parameter . flip )     ?     (  -  ( mainGlyph . getTop (  )  )  )     +     (  ( int )     ( baseLine )  )     :     (  -  (  ( glyph . height )     -     ( mainGlyph . getTop (  )  )  )  )     -     (  ( int )     ( baseLine )  )  ;", "glyph . xadvance    =     (  ( FreeType . toInt ( metrics . getHoriAdvance (  )  )  )     +     (  ( int )     ( parameter . borderWidth )  )  )     +     ( parameter . spaceX )  ;", "if    ( bitmapped )     {", "mainPixmap . setColor ( CLEAR )  ;", "mainPixmap . fill (  )  ;", "ByteBuffer   buf    =    mainBitmap . getBuffer (  )  ;", "int   whiteIntBits    =    WHITE . toIntBits (  )  ;", "int   clearIntBits    =    CLEAR . toIntBits (  )  ;", "for    ( int   h    =     0  ;    h    <     ( glyph . height )  ;    h +  +  )     {", "int   idx    =    h    *     ( mainBitmap . getPitch (  )  )  ;", "for    ( int   w    =     0  ;    w    <     (  ( glyph . width )     +     ( glyph . xoffset )  )  ;    w +  +  )     {", "int   bit    =     (  ( buf . get (  ( idx    +     ( w    /     8  )  )  )  )     >  >  >     (  7     -     ( w    %     8  )  )  )     &     1  ;", "mainPixmap . drawPixel ( w ,    h ,     ( bit    =  =     1     ?    whiteIntBits    :    clearIntBits )  )  ;", "}", "}", "}", "Rectangle   rect    =    packer . pack ( mainPixmap )  ;", "glyph . page    =     ( packer . getPages (  )  . size )     -     1  ;", "glyph . srcX    =     (  ( int )     ( rect . x )  )  ;", "glyph . srcY    =     (  ( int )     ( rect . y )  )  ;", "if    (  (  ( parameter . incremental )     &  &     (  ( data . regions )     !  =    null )  )     &  &     (  ( data . regions . size )     <  =     ( glyph . page )  )  )", "packer . updateTextureRegions ( data . regions ,    parameter . minFilter ,    parameter . magFilter ,    parameter . genMipMaps )  ;", "mainPixmap . dispose (  )  ;", "mainGlyph . dispose (  )  ;", "return   glyph ;", "}", "METHOD_END"], "methodName": ["createGlyph"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   generateData ( parameter ,    new   FreeTypeFontGenerator . FreeTypeBitmapFontData (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateData"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "parameter    =     ( parameter    =  =    null )     ?    new   FreeTypeFontGenerator . FreeTypeFontParameter (  )     :    parameter ;", "char [  ]    characters    =    parameter . characters . toCharArray (  )  ;", "int   charactersLength    =    characters . length ;", "boolean   incremental    =    parameter . incremental ;", "int   flags    =    getLoadingFlags ( parameter )  ;", "setPixelSizes (  0  ,    parameter . size )  ;", "FreeType . SizeMetrics   fontMetrics    =    face . getSize (  )  . getMetrics (  )  ;", "data . flipped    =    parameter . flip ;", "data . ascent    =    FreeType . toInt ( fontMetrics . getAscender (  )  )  ;", "data . descent    =    FreeType . toInt ( fontMetrics . getDescender (  )  )  ;", "data . lineHeight    =    FreeType . toInt ( fontMetrics . getHeight (  )  )  ;", "float   baseLine    =    data . ascent ;", "if    (  ( bitmapped )     &  &     (  ( data . lineHeight )     =  =     0  )  )     {", "for    ( int   c    =     3  2  ;    c    <     (  3  2     +     ( face . getNumGlyphs (  )  )  )  ;    c +  +  )     {", "if    ( loadChar ( c ,    flags )  )     {", "int   lh    =    FreeType . toInt ( face . getGlyph (  )  . getMetrics (  )  . getHeight (  )  )  ;", "data . lineHeight    =     ( lh    >     ( data . lineHeight )  )     ?    lh    :    data . lineHeight ;", "}", "}", "}", "data . lineHeight    +  =    parameter . spaceY ;", "if    (  ( loadChar (  '     '  ,    flags )  )     |  |     ( loadChar (  ' l '  ,    flags )  )  )     {", "data . spaceWidth    =    FreeType . toInt ( face . getGlyph (  )  . getMetrics (  )  . getHoriAdvance (  )  )  ;", "} else    {", "data . spaceWidth    =    face . getMaxAdvanceWidth (  )  ;", "}", "for    ( char   xChar    :    data . xChars )     {", "if    (  !  ( loadChar ( xChar ,    flags )  )  )", "continue ;", "data . xHeight    =    FreeType . toInt ( face . getGlyph (  )  . getMetrics (  )  . getHeight (  )  )  ;", "break ;", "}", "if    (  ( data . xHeight )     =  =     0  )", "throw   new   com . badlogic . gdx . utils . GdxRuntimeException (  \" No   x - height   character   found   in   font \"  )  ;", "for    ( char   capChar    :    data . capChars )     {", "if    (  !  ( loadChar ( capChar ,    flags )  )  )", "continue ;", "data . capHeight    =    FreeType . toInt ( face . getGlyph (  )  . getMetrics (  )  . getHeight (  )  )  ;", "break ;", "}", "if    (  (  !  ( bitmapped )  )     &  &     (  ( data . capHeight )     =  =     1  )  )", "throw   new   com . badlogic . gdx . utils . GdxRuntimeException (  \" No   cap   character   found   in   font \"  )  ;", "data . ascent    -  =    data . capHeight ;", "data . down    =     -  ( data . lineHeight )  ;", "if    ( parameter . flip )     {", "data . ascent    =     -  ( data . ascent )  ;", "data . down    =     -  ( data . down )  ;", "}", "boolean   ownsAtlas    =    false ;", "PixmapPacker   packer    =    parameter . packer ;", "if    ( packer    =  =    null )     {", "int   size ;", "PackStrategy   packStrategy ;", "if    ( incremental )     {", "size    =    FreeTypeFontGenerator . maxTextureSize ;", "packStrategy    =    new   GuillotineStrategy (  )  ;", "} else    {", "int   maxGlyphHeight    =     (  ( int )     ( Math . ceil ( data . lineHeight )  )  )  ;", "size    =    MathUtils . nextPowerOfTwo (  (  ( int )     ( Math . sqrt (  (  ( maxGlyphHeight    *    maxGlyphHeight )     *    charactersLength )  )  )  )  )  ;", "if    (  ( FreeTypeFontGenerator . maxTextureSize )     >     0  )", "size    =    Math . min ( size ,    FreeTypeFontGenerator . maxTextureSize )  ;", "packStrategy    =    new   SkylineStrategy (  )  ;", "}", "ownsAtlas    =    true ;", "packer    =    new   PixmapPacker ( size ,    size ,    Format . RGBA 8  8  8  8  ,     1  ,    false ,    packStrategy )  ;", "packer . setTransparentColor ( parameter . color )  ;", "packer . getTransparentColor (  )  . a    =     0  ;", "if    (  ( parameter . borderWidth )     >     0  )     {", "packer . setTransparentColor ( parameter . borderColor )  ;", "packer . getTransparentColor (  )  . a    =     0  ;", "}", "}", "if    ( incremental )", "data . glyphs    =    new   Array (  ( charactersLength    +     3  2  )  )  ;", "FreeType . Stroker   stroker    =    null ;", "if    (  ( parameter . borderWidth )     >     0  )     {", "stroker    =    library . createStroker (  )  ;", "stroker . set (  (  ( int )     (  ( parameter . borderWidth )     *     6  4  .  0 F )  )  ,     ( parameter . borderStraight    ?    FreeType . FT _ STROKER _ LINECAP _ BUTT    :    FreeType . FT _ STROKER _ LINECAP _ ROUND )  ,     ( parameter . borderStraight    ?    FreeType . FT _ STROKER _ LINEJOIN _ MITER _ FIXED    :    FreeType . FT _ STROKER _ LINEJOIN _ ROUND )  ,     0  )  ;", "}", "Glyph   missingGlyph    =    createGlyph (  '  \\ u 0  0  0  0  '  ,    data ,    parameter ,    stroker ,    baseLine ,    packer )  ;", "if    (  (  ( missingGlyph    !  =    null )     &  &     (  ( missingGlyph . width )     !  =     0  )  )     &  &     (  ( missingGlyph . height )     !  =     0  )  )     {", "data . setGlyph (  '  \\ u 0  0  0  0  '  ,    missingGlyph )  ;", "data . missingGlyph    =    missingGlyph ;", "if    ( incremental )", "data . glyphs . add ( missingGlyph )  ;", "}", "int [  ]    heights    =    new   int [ charactersLength ]  ;", "for    ( int   i    =     0  ,    n    =    charactersLength ;    i    <    n ;    i +  +  )     {", "int   height    =     ( loadChar ( characters [ i ]  ,    flags )  )     ?    FreeType . toInt ( face . getGlyph (  )  . getMetrics (  )  . getHeight (  )  )     :     0  ;", "heights [ i ]     =    height ;", "}", "int   heightsCount    =    heights . length ;", "while    ( heightsCount    >     0  )     {", "int   best    =     0  ;", "int   maxHeight    =    heights [  0  ]  ;", "for    ( int   i    =     1  ;    i    <    heightsCount ;    i +  +  )     {", "int   height    =    heights [ i ]  ;", "if    ( height    >    maxHeight )     {", "maxHeight    =    height ;", "best    =    i ;", "}", "}", "char   c    =    characters [ best ]  ;", "Glyph   glyph    =    createGlyph ( c ,    data ,    parameter ,    stroker ,    baseLine ,    packer )  ;", "if    ( glyph    !  =    null )     {", "data . setGlyph ( c ,    glyph )  ;", "if    ( incremental )", "data . glyphs . add ( glyph )  ;", "}", "heightsCount -  -  ;", "heights [ best ]     =    heights [ heightsCount ]  ;", "char   tmpChar    =    characters [ best ]  ;", "characters [ best ]     =    characters [ heightsCount ]  ;", "characters [ heightsCount ]     =    tmpChar ;", "}", "if    (  ( stroker    !  =    null )     &  &     (  ! incremental )  )", "stroker . dispose (  )  ;", "if    ( incremental )     {", "data . generator    =    this ;", "data . parameter    =    parameter ;", "data . stroker    =    stroker ;", "data . packer    =    packer ;", "}", "parameter . kerning    &  =    face . hasKerning (  )  ;", "if    ( parameter . kerning )     {", "for    ( int   i    =     0  ;    i    <    charactersLength ;    i +  +  )     {", "char   firstChar    =    characters [ i ]  ;", "Glyph   first    =    data . getGlyph ( firstChar )  ;", "if    ( first    =  =    null )", "continue ;", "int   firstIndex    =    face . getCharIndex ( firstChar )  ;", "for    ( int   ii    =    i ;    ii    <    charactersLength ;    ii +  +  )     {", "char   secondChar    =    characters [ ii ]  ;", "Glyph   second    =    data . getGlyph ( secondChar )  ;", "if    ( second    =  =    null )", "continue ;", "int   secondIndex    =    face . getCharIndex ( secondChar )  ;", "int   kerning    =    face . getKerning ( firstIndex ,    secondIndex ,     0  )  ;", "if    ( kerning    !  =     0  )", "first . setKerning ( secondChar ,    FreeType . toInt ( kerning )  )  ;", "kerning    =    face . getKerning ( secondIndex ,    firstIndex ,     0  )  ;", "if    ( kerning    !  =     0  )", "second . setKerning ( firstChar ,    FreeType . toInt ( kerning )  )  ;", "}", "}", "}", "if    ( ownsAtlas )     {", "data . regions    =    new   Array (  )  ;", "packer . updateTextureRegions ( data . regions ,    parameter . minFilter ,    parameter . magFilter ,    parameter . genMipMaps )  ;", "}", "Glyph   spaceGlyph    =    data . getGlyph (  '     '  )  ;", "if    ( spaceGlyph    =  =    null )     {", "spaceGlyph    =    new   Glyph (  )  ;", "spaceGlyph . xadvance    =     (  ( int )     ( data . spaceWidth )  )     +     ( parameter . spaceX )  ;", "spaceGlyph . id    =     (  ( int )     (  '     '  )  )  ;", "data . setGlyph (  '     '  ,    spaceGlyph )  ;", "}", "if    (  ( spaceGlyph . width )     =  =     0  )", "spaceGlyph . width    =     (  ( int )     (  ( spaceGlyph . xadvance )     +     ( data . padRight )  )  )  ;", "return   data ;", "}", "METHOD_END"], "methodName": ["generateData"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "FreeTypeFontGenerator . FreeTypeFontParameter   parameter    =    new   FreeTypeFontGenerator . FreeTypeFontParameter (  )  ;", "parameter . size    =    size ;", "return   generateData ( parameter )  ;", "}", "METHOD_END"], "methodName": ["generateData"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   generateFont ( parameter ,    new   FreeTypeFontGenerator . FreeTypeBitmapFontData (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateFont"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "boolean   updateTextureRegions    =     (  ( data . regions )     =  =    null )     &  &     (  ( parameter . packer )     !  =    null )  ;", "if    ( updateTextureRegions )", "data . regions    =    new   utils . Array (  )  ;", "generateData ( parameter ,    data )  ;", "if    ( updateTextureRegions )", "parameter . packer . updateTextureRegions ( data . regions ,    parameter . minFilter ,    parameter . magFilter ,    parameter . genMipMaps )  ;", "BitmapFont   font    =    new   BitmapFont ( data ,    data . regions ,    true )  ;", "font . setOwnsTexture (  (  ( parameter . packer )     =  =    null )  )  ;", "return   font ;", "}", "METHOD_END"], "methodName": ["generateFont"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "setPixelSizes (  0  ,    size )  ;", "FreeType . SizeMetrics   fontMetrics    =    face . getSize (  )  . getMetrics (  )  ;", "int   baseline    =    FreeType . toInt ( fontMetrics . getAscender (  )  )  ;", "if    (  ( face . getCharIndex ( c )  )     =  =     0  )     {", "return   null ;", "}", "if    (  !  ( loadChar ( c )  )  )     {", "throw   new   GdxRuntimeException (  \" Unable   to   load   character !  \"  )  ;", "}", "FreeType . GlyphSlot   slot    =    face . getGlyph (  )  ;", "FreeType . Bitmap   bitmap ;", "if    ( bitmapped )     {", "bitmap    =    slot . getBitmap (  )  ;", "} else", "if    (  !  ( slot . renderGlyph ( FreeType . FT _ RENDER _ MODE _ NORMAL )  )  )     {", "bitmap    =    null ;", "} else    {", "bitmap    =    slot . getBitmap (  )  ;", "}", "FreeType . GlyphMetrics   metrics    =    slot . getMetrics (  )  ;", "Glyph   glyph    =    new   Glyph (  )  ;", "if    ( bitmap    !  =    null )     {", "glyph . width    =    bitmap . getWidth (  )  ;", "glyph . height    =    bitmap . getRows (  )  ;", "} else    {", "glyph . width    =     0  ;", "glyph . height    =     0  ;", "}", "glyph . xoffset    =    slot . getBitmapLeft (  )  ;", "glyph . yoffset    =     ( flip )     ?     (  -  ( slot . getBitmapTop (  )  )  )     +    baseline    :     (  -  (  ( glyph . height )     -     ( slot . getBitmapTop (  )  )  )  )     -    baseline ;", "glyph . xadvance    =    FreeType . toInt ( metrics . getHoriAdvance (  )  )  ;", "glyph . srcX    =     0  ;", "glyph . srcY    =     0  ;", "glyph . id    =    c ;", ". GlyphAndBitmap   result    =    new    . GlyphAndBitmap (  )  ;", "result . glyph    =    glyph ;", "result . bitmap    =    bitmap ;", "return   result ;", "}", "METHOD_END"], "methodName": ["generateGlyphAndBitmap"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "int   loadingFlags    =    FreeType . FT _ LOAD _ DEFAULT ;", "switch    ( parameter . hinting )     {", "case   None    :", "loadingFlags    |  =    FreeType . FT _ LOAD _ NO _ HINTING ;", "break ;", "case   Slight    :", "loadingFlags    |  =    FreeType . FT _ LOAD _ TARGET _ LIGHT ;", "break ;", "case   Medium    :", "loadingFlags    |  =    FreeType . FT _ LOAD _ TARGET _ NORMAL ;", "break ;", "case   Full    :", "loadingFlags    |  =    FreeType . FT _ LOAD _ TARGET _ MONO ;", "break ;", "case   AutoSlight    :", "loadingFlags    |  =     ( FreeType . FT _ LOAD _ FORCE _ AUTOHINT )     |     ( FreeType . FT _ LOAD _ TARGET _ LIGHT )  ;", "break ;", "case   AutoMedium    :", "loadingFlags    |  =     ( FreeType . FT _ LOAD _ FORCE _ AUTOHINT )     |     ( FreeType . FT _ LOAD _ TARGET _ NORMAL )  ;", "break ;", "case   AutoFull    :", "loadingFlags    |  =     ( FreeType . FT _ LOAD _ FORCE _ AUTOHINT )     |     ( FreeType . FT _ LOAD _ TARGET _ MONO )  ;", "break ;", "}", "return   loadingFlags ;", "}", "METHOD_END"], "methodName": ["getLoadingFlags"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   FreeTypeFontGenerator . maxTextureSize ;", "}", "METHOD_END"], "methodName": ["getMaxTextureSize"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   loadChar ( c ,     (  ( FreeType . FT _ LOAD _ DEFAULT )     |     ( FreeType . FT _ LOAD _ FORCE _ AUTOHINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["loadChar"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   face . loadChar ( c ,    flags )  ;", "}", "METHOD_END"], "methodName": ["loadChar"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "setPixelSizes (  0  ,    height )  ;", ". SizeMetrics   fontMetrics    =    face . getSize (  )  . getMetrics (  )  ;", "int   ascent    =     . toInt ( fontMetrics . getAscender (  )  )  ;", "int   descent    =     . toInt ( fontMetrics . getDescender (  )  )  ;", "return    ( height    *    height )     /     ( ascent    -    descent )  ;", "}", "METHOD_END"], "methodName": ["scaleForPixelHeight"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "FreeType . SizeMetrics   fontMetrics    =    face . getSize (  )  . getMetrics (  )  ;", "int   advance    =    FreeType . toInt ( fontMetrics . getMaxAdvance (  )  )  ;", "int   ascent    =    FreeType . toInt ( fontMetrics . getAscender (  )  )  ;", "int   descent    =    FreeType . toInt ( fontMetrics . getDescender (  )  )  ;", "int   unscaledHeight    =    ascent    -    descent ;", "int   height    =     ( unscaledHeight    *    width )     /     ( advance    *    numChars )  ;", "setPixelSizes (  0  ,    height )  ;", "return   height ;", "}", "METHOD_END"], "methodName": ["scaleForPixelWidth"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "return   Math . min ( scaleForPixelHeight ( height )  ,    scaleForPixelWidth ( width ,    numChars )  )  ;", "}", "METHOD_END"], "methodName": ["scaleToFitSquare"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "FreeTypeFontGenerator . maxTextureSize    =    texSize ;", "}", "METHOD_END"], "methodName": ["setMaxTextureSize"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "this . pixelWidth    =    pixelWidth ;", "this . pixelHeight    =    pixelHeight ;", "if    (  (  !  ( bitmapped )  )     &  &     (  !  ( face . setPixelSizes ( pixelWidth ,    pixelHeight )  )  )  )", "throw   new   utils . GdxRuntimeException (  \" Couldn ' t   set   size   for   font \"  )  ;", "}", "METHOD_END"], "methodName": ["setPixelSizes"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator"}, {"methodBody": ["METHOD_START", "{", "String [  ]    headers    =    new   String [  ]  {     \" freetype -  2  .  6  .  2  / include \"     }  ;", "String [  ]    sources    =    new   String [  ]  {     \" freetype -  2  .  6  .  2  / src / base / ftsystem . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftinit . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftdebug . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftbase . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftbbox . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftglyph . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftbdf . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftbitmap . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftcid . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftfstype . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftgasp . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftgxval . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftlcdfil . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftmm . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftotval . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftpatent . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftpfr . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftstroke . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftsynth . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / fttype 1  . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftwinfnt . c \"  ,     \" freetype -  2  .  6  .  2  / src / base / ftxf 8  6  . c \"  ,     \" freetype -  2  .  6  .  2  / src / bdf / bdf . c \"  ,     \" freetype -  2  .  6  .  2  / src / cff / cff . c \"  ,     \" freetype -  2  .  6  .  2  / src / cid / type 1 cid . c \"  ,     \" freetype -  2  .  6  .  2  / src / pcf / pcf . c \"  ,     \" freetype -  2  .  6  .  2  / src / pfr / pfr . c \"  ,     \" freetype -  2  .  6  .  2  / src / sfnt / sfnt . c \"  ,     \" freetype -  2  .  6  .  2  / src / truetype / truetype . c \"  ,     \" freetype -  2  .  6  .  2  / src / type 1  / type 1  . c \"  ,     \" freetype -  2  .  6  .  2  / src / type 4  2  / type 4  2  . c \"  ,     \" freetype -  2  .  6  .  2  / src / winfonts / winfnt . c \"  ,     \" freetype -  2  .  6  .  2  / src / raster / raster . c \"  ,     \" freetype -  2  .  6  .  2  / src / smooth / smooth . c \"  ,     \" freetype -  2  .  6  .  2  / src / autofit / autofit . c \"  ,     \" freetype -  2  .  6  .  2  / src / cache / ftcache . c \"  ,     \" freetype -  2  .  6  .  2  / src / gzip / ftgzip . c \"  ,     \" freetype -  2  .  6  .  2  / src / lzw / ftlzw . c \"  ,     \" freetype -  2  .  6  .  2  / src / bzip 2  / ftbzip 2  . c \"  ,     \" freetype -  2  .  6  .  2  / src / gxvalid / gxvalid . c \"  ,     \" freetype -  2  .  6  .  2  / src / otvalid / otvalid . c \"  ,     \" freetype -  2  .  6  .  2  / src / psaux / psaux . c \"  ,     \" freetype -  2  .  6  .  2  / src / pshinter / pshinter . c \"  ,     \" freetype -  2  .  6  .  2  / src / psnames / psnames . c \"     }  ;", "BuildTarget   win 3  2 home    =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2 home . compilerPrefix    =     \"  \"  ;", "win 3  2 home . buildFileName    =     \" build - windows 3  2 home . xml \"  ;", "win 3  2 home . excludeFromMasterBuildFile    =    true ;", "win 3  2 home . headerDirs    =    headers ;", "win 3  2 home . cIncludes    =    sources ;", "win 3  2 home . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "win 3  2 home . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   win 3  2     =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2  . headerDirs    =    headers ;", "win 3  2  . cIncludes    =    sources ;", "win 3  2  . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "win 3  2  . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   win 6  4     =    BuildTarget . newDefaultTarget ( Windows ,    true )  ;", "win 6  4  . headerDirs    =    headers ;", "win 6  4  . cIncludes    =    sources ;", "win 6  4  . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "win 6  4  . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   lin 3  2     =    BuildTarget . newDefaultTarget ( Linux ,    false )  ;", "lin 3  2  . headerDirs    =    headers ;", "lin 3  2  . cIncludes    =    sources ;", "lin 3  2  . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "lin 3  2  . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   lin 6  4     =    BuildTarget . newDefaultTarget ( Linux ,    true )  ;", "lin 6  4  . headerDirs    =    headers ;", "lin 6  4  . cIncludes    =    sources ;", "lin 6  4  . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "lin 6  4  . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   mac    =    BuildTarget . newDefaultTarget ( MacOsX ,    false )  ;", "mac . headerDirs    =    headers ;", "mac . cIncludes    =    sources ;", "mac . cFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "mac . cppFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "mac . linkerFlags    +  =     \"     - framework   CoreServices    - framework   Carbon \"  ;", "BuildTarget   mac 6  4     =    BuildTarget . newDefaultTarget ( MacOsX ,    true )  ;", "mac 6  4  . headerDirs    =    headers ;", "mac 6  4  . cIncludes    =    sources ;", "mac 6  4  . cFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "mac 6  4  . cppFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "mac 6  4  . linkerFlags    +  =     \"     - framework   CoreServices    - framework   Carbon \"  ;", "BuildTarget   android    =    BuildTarget . newDefaultTarget ( Android ,    false )  ;", "android . headerDirs    =    headers ;", "android . cIncludes    =    sources ;", "android . cFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "android . cppFlags    +  =     \"        - DFT 2  _ BUILD _ LIBRARY \"  ;", "BuildTarget   ios    =    BuildTarget . newDefaultTarget ( IOS ,    false )  ;", "ios . headerDirs    =    headers ;", "ios . cIncludes    =    sources ;", "ios . cFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "ios . cppFlags    +  =     \"     - DFT 2  _ BUILD _ LIBRARY \"  ;", "new   NativeCodeGenerator (  )  . generate (  \" src \"  ,     \" bin :  .  .  /  .  .  / gdx / bin \"  ,     \" jni \"  )  ;", "new   AntScriptGenerator (  )  . generate ( new   BuildConfig (  \" gdx - freetype \"  )  ,    win 3  2 home ,    win 3  2  ,    win 6  4  ,    lin 3  2  ,    lin 6  4  ,    mac ,    mac 6  4  ,    android ,    ios )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.graphics.g2d.freetype.FreetypeBuild"}]